{"version":3,"sources":["webpack:///../manual/Design-Patterns/Decorator-Pattern.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,6NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,oEACA,sMACA,gCACA,sBACE,kBAAIC,WAAW,MAAf,qGACA,kBAAIA,WAAW,MAAf,+EACA,kBAAIA,WAAW,MAAf,gEAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,y7BA+CL,4H,oNAKJJ,EAAWK,gBAAiB","file":"component---manual-design-patterns-decorator-pattern-md-f0df7d2b7f7972ef7a04.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"decorator-pattern\"\n    }}>{`Decorator Pattern`}</h1>\n    <p>{`This is another type of structural pattern.`}</p>\n    <p>{`The decorator pattern works by creating a decorator class that accepts the base class as an argument to the constructor and then implementing a function that calls to super.`}</p>\n    <p>{`Intent:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Attach additional responsibilities to an object dynamically. Gives an alternative to subclassing.`}</li>\n      <li parentName=\"ol\">{`Client-specified embellishment of a core object by recursively wrapping it.`}</li>\n      <li parentName=\"ol\">{`Wrapping a gift, putting it in a box, and wrapping the box.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`interface Pizza {\n  cost(): Number;\n}\n\nclass BasePizza implements Pizza {\n  cost(): Number {\n    return 10;\n  }\n}\n\nabstract class PizzaExtraDecorator implements Pizza {\n  private _pizza: Pizza;\n\n  constructor(pizza: BasePizza) {\n    this._pizza = pizza;\n  }\n\n  cost(): Number {\n    return this._pizza.cost();\n  }\n}\n\nclass ExtraPineappleDecorator extends PizzaExtraDecorator {\n  private _price: Number = 2;\n\n  cost(): Number {\n    return super.cost().valueOf() + this._price.valueOf();\n  }\n}\n\nclass ExtraCheeseDecorator extends PizzaExtraDecorator {\n  private _price: Number = 2.5;\n\n  cost(): Number {\n    return super.cost().valueOf() + this._price.valueOf();\n  }\n}\n\n(function main() {\n  const pizza = new BasePizza();\n  const withPineapple = new ExtraPineappleDecorator(pizza);\n  const withExtraCheese = new ExtraCheeseDecorator(withPineapple);\n  console.log(\\`Total: $\\${withExtraCheese.cost()}\\`);\n})();\n`}</code></pre>\n    <p>{`Other alternatives could include creating a christmas tree with actual decorations as a decorator.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}