(window.webpackJsonp=window.webpackJsonp||[]).push([[475],{eHmm:function(e,a,n){"use strict";n.r(a),n.d(a,"_frontmatter",(function(){return r})),n.d(a,"default",(function(){return b}));n("1c7q"),n("abGl"),n("gZHo"),n("Fdmb"),n("Ir+3"),n("2mQt"),n("mXGw");var t=n("/FXl"),l=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/Scala/Scala-Values-Variables-Types.md"}});var o={_frontmatter:r},c=l.a;function b(e){var a=e.components,n=function(e,a){if(null==e)return{};var n,t,l={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,["components"]);return Object(t.b)(c,i({},o,n,{components:a,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"scala-values-variables-and-types"},"Scala Values, Variables and Types"),Object(t.b)("p",null,"The presumes you have Scala installed on the local system."),Object(t.b)("p",null,"This is just the basics on declaring variables in Scala and what data types are available."),Object(t.b)("h2",{id:"declaring-variables"},"Declaring Variables"),Object(t.b)("p",null,"Create file ",Object(t.b)("inlineCode",{parentName:"p"},"src/main/scala/Playground.scala")," with the following."),Object(t.b)("pre",null,Object(t.b)("code",i({parentName:"pre"},{className:"language-scala"}),"object Playground extends App {\n  val x: Int = 42\n  println(x)\n}\n")),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"println")," will allow us to print to the console."),Object(t.b)("li",{parentName:"ul"},"Extending ",Object(t.b)("inlineCode",{parentName:"li"},"App")," allows us to run the file in the command line correctly."),Object(t.b)("li",{parentName:"ul"},Object(t.b)("inlineCode",{parentName:"li"},"val")," are immutable - this is the Scala and functional programming way.")),Object(t.b)("p",null,"Say we remove the explicit type:"),Object(t.b)("pre",null,Object(t.b)("code",i({parentName:"pre"},{className:"language-scala"}),"object Playground extends App {\n  val x = 42\n  println(x)\n}\n")),Object(t.b)("p",null,"This still works as the compiler infers the type to be an ",Object(t.b)("inlineCode",{parentName:"p"},"Int"),"."),Object(t.b)("h2",{id:"declaring-various-types"},"Declaring various types"),Object(t.b)("p",null,"Below we will run through a declaration of each type."),Object(t.b)("pre",null,Object(t.b)("code",i({parentName:"pre"},{className:"language-scala"}),"object Playground extends App {\n  val x: Int = 42\n  val y: String = \"Hello, Friend!\"\n  val z: Boolean = true\n  val a: Char = 'a' // Note single quotes\n  val b: Short = 1234\n  val c: Long = 1234123412341234L // Note the L - similar to Java longs\n  val d: Float = 2.0f // Note the f - similar to Java\n  val e: Double = 2.14 // No marker needed\n\n  /* in order to mutate a variable */\n  var f: Int = 1\n  f = 2 // this is known as a side effect\n}\n")),Object(t.b)("p",null,"Note that the ",Object(t.b)("inlineCode",{parentName:"p"},"val")," and ",Object(t.b)("inlineCode",{parentName:"p"},"var")," keywords have different meanings. ",Object(t.b)("inlineCode",{parentName:"p"},"val")," is a constant and follows functional, immutable conventions while ",Object(t.b)("inlineCode",{parentName:"p"},"var")," is mutable and changing a mutable variable is known as a side effect."))}b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/Scala/Scala-Values-Variables-Types.md"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-scala-scala-values-variables-types-md-0c6d488936bcc2a77ec7.js.map