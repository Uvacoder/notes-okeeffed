{"version":3,"sources":["webpack:///../manual/iOS/iOS-Delegation.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,8MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAMA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uBADQ,qBAEU,kBAAIA,WAAW,MACzC,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qCADQ,qCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gDADQ,gDAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iCADQ,iCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0CADQ,0CAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,2CADQ,8CAQ1B,iBAAQ,CACN,GAAM,mCADR,oCAGA,yEACA,sBACE,kBAAIA,WAAW,MAAf,+BACA,kBAAIA,WAAW,MAAf,mCACA,kBAAIA,WAAW,MAAf,yBAEF,2KACA,qCAAoB,0BAAYA,WAAW,KAAvB,yBACpB,qBAAG,kBAAIA,WAAW,KAAf,yBACH,mLACA,6FACA,iBAAQ,CACN,GAAM,8CADR,+CAGA,qBAAG,kBAAIA,WAAW,KAAf,mCACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,gmFA8FL,uBACA,qBAAG,kBAAIA,WAAW,KAAf,sBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,8gEAmEL,sHACA,kFACA,uEACA,0PACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,yGAIL,oMACA,uEACA,wEACA,+HACA,qBAAG,kBAAIA,WAAW,KAAf,+BACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,kUASL,6QACA,yJACA,qLACA,mIACA,gIACA,yGACA,+IACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,yDAKL,+JACA,iJACA,iBAAQ,CACN,GAAM,+BADR,gCAGA,0EACA,uHACA,iCACA,yJACA,+FACA,gHACA,wFACA,sGACA,8GACA,2IACA,qDAAoC,0BAAYA,WAAW,KAAvB,eAApC,uHACA,+NACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,igBAyBL,iBAAQ,CACN,GAAM,wCADR,yCAGA,iGACA,oFACA,uJACA,+LACA,yDAAwC,0BAAYA,WAAW,KAAvB,YAAxC,wEAAqK,0BAAYA,WAAW,KAAvB,YAArK,oDAA8Q,0BAAYA,WAAW,KAAvB,6BAA9Q,2DACA,4CAA2B,0BAAYA,WAAW,KAAvB,4BAC3B,qEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,gzBA+BL,iBAAQ,CACN,GAAM,yCADR,0CAGA,oJACA,kH,qMAKJJ,EAAWK,gBAAiB","file":"component---manual-i-os-i-os-delegation-md-203e10475b43a158820d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"delegation-in-ios\"\n    }}>{`Delegation in iOS`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#delegation-in-ios\"\n        }}>{`Delegation in iOS`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#iosd-1-intro-to-design-patterns\"\n            }}>{`IOSD-1: Intro to Design Patterns`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#iosd-2-learning-by-example---racing-horses\"\n            }}>{`IOSD-2: Learning by example - Racing Horses`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#iosd-3-acting-as-a-delegate\"\n            }}>{`IOSD-3: Acting as a Delegate`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#iosd-4-examples---cllocation-manager\"\n            }}>{`IOSD-4: Examples - CLLocation Manager`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#iosd-5-examples---uitextfielddelegate\"\n            }}>{`IOSD-5: Examples - UITextFieldDelegate`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"iosd-1-intro-to-design-patterns\"\n    }}>{`IOSD-1: Intro to Design Patterns`}</h2>\n    <p>{`Three common issues developers have come across:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Avoiding inflexible objects`}</li>\n      <li parentName=\"ol\">{`Maintaining loose relationships`}</li>\n      <li parentName=\"ol\">{`Avoid tight coupling`}</li>\n    </ol>\n    <p>{`We use Design Pattern as a general, reusable solution to a commonly occurring problem within a given context, regardless of the particular domain.`}</p>\n    <p>{`An example - `}<inlineCode parentName=\"p\">{`The Delegate Pattern`}</inlineCode></p>\n    <p><em parentName=\"p\">{`The Delegate Pattern`}</em></p>\n    <p>{`The delegate pattern is an alteration on the decorator pattern, a structural pattern that is focused on how we can compose objects to form larger objects.`}</p>\n    <p>{`It is concerned with adding responsibilities to objects dynamically.`}</p>\n    <h2 {...{\n      \"id\": \"iosd-2-learning-by-example---racing-horses\"\n    }}>{`IOSD-2: Learning by example - Racing Horses`}</h2>\n    <p><em parentName=\"p\">{`The Horse Class and Race Class`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass Horse {\n    let name: String\n    let maxSpeed: Double\n    var distanceTraveled = 0.0\n    var currentLap = 1\n\n    init(name: String, maxSpeed: Double) {\n        self.maxSpeed = maxSpeed\n        self.name = name\n    }\n\n    var currentSpeed: Double {\n        let random = Double(arc4random())\n        return random.truncatingRemainder(dividingBy: maxSpeed - 13) + 13\n    }\n}\n\nclass Race {\n    let laps: Int\n    let lapLength: Double = 300\n    let participants: [Horse]\n\n    weak var delegate: HorseRaceDelegate?\n\n    // since we want to use a delegate, we do not create instances\n    // let tracker = Tracker()\n    // let broadcaster = RaceBroadcaster()\n\n    lazy var timer: Timer = Timer(timeInterval: 1, repeats: true) { timer in\n        self.updateProgress()\n    }\n\n    init(laps: Int, participants: [Horse]) {\n        self.laps = laps\n        self.participants = participants\n    }\n\n    func start() {\n        RunLoop.main.add(timer, forMode: .defaultRunLoopMode)\n        // tracker.updateRaceStart(with: Date())\n        delegate?.race(self, didStartAt: Date())\n        print(\"Race in progress...\")\n    }\n\n    func updateProgress() {\n        print(\"....\")\n        for horse in participants {\n            horse.distanceTraveled += horse.currentSpeed\n\n            if horse.distanceTraveled >= lapLength {\n                horse.distanceTraveled = 0\n\n                delegate?.addLapLeader(horse, forLap: horse.currentLap, atTime: Date())\n\n                // let lapKey = \"\\\\(Tracker.Keys.lapLeader) \\\\(horse.currentLap)\"\n                // if !tracker.stats.keys.contains(lapKey) {\n                //     tracker.updateLapLeaderWith(lapNumber: horse.currentLap, horse: horse, time: Date())\n                // }\n\n                horse.currentLap += 1\n\n                if horse.currentLap >= laps + 1 {\n                    // tracker.updateRaceEndWith(winner: horse, time: Date())\n                    delegate?.raceDidEndAt(self, didEndAt: Date(), withWinner: horse)\n                    stop()\n                    break\n                }\n            }\n        }\n    }\n\n    func stop() {\n        print(\"Race complete!\")\n        // timer.invalidate()\n        // tracker.printRaceSummary()\n    }\n}\n\nlet jubilee = Horse(name: \"Jubilee\", maxSpeed: 16)\nlet sonora = Horse(name: \"Sonora\", maxSpeed: 17)\nlet jasper = Horse(name: \"Jasper\", maxSpeed: 17)\n\nlet participants = [jubilee, sonora, jasper]\n\nlet race = Race(laps: 1, participants: participants)\nrace.start()\n`}</code></pre>\n    <hr></hr>\n    <p><em parentName=\"p\">{`The Tracker Class`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class Tracker: HorseRaceDelegate {\n\n    struct Keys {\n        static let raceStartTime = \"raceStartTime\"\n        static let lapLeader = \"leaderForLap\"\n        static let raceEndTime = \"raceEndTime\"\n        static let winner = \"winner\"\n    }\n\n    var stats = [String: Any]()\n\n    // func updateRaceStart(with time: Date) {\n    //     stats.updateValue(time, forKey: Keys.raceStartTime)\n    // }\n\n    func race(_ race: Race, didStartAt time: Date) {\n        stats.updateValue(time, forKey: Keys.raceStartTime)\n    }\n\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date) {\n        let lapLead = \"Horse: \\\\(horse.name), time: \\\\(time)\"\n        let lapLeadKey = \"\\\\(Keys.lapLeader) \\\\(number)\"\n\n        stats.updateValue(lapLead, forKey: lapLeadKey)\n    }\n\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse) {\n        stats.updateValue(winner.name, forKey: Keys.winner)\n        stats.updateValue(time, forKey: Keys.raceEndTime)\n    }\n\n    // get rid of the below method\n    func updateLapLeaderWith(lapNumber number: Int, horse: Horse, time: Date) {\n        let lapLead = \"Horse: \\\\(horse.name), time: \\\\(time)\"\n        let lapLeadKey = \"\\\\(Keys.lapLeader) \\\\(number)\"\n\n        stats.updateValue(lapLead, forKey: lapLeadKey)\n    }\n\n    // get rid of the below method\n    func updateRaceEndWith(winner: Horse, time: Date) {\n        stats.updateValue(winner.name, forKey: Keys.winner)\n        stats.updateValue(time, forKey: Keys.raceEndTime)\n    }\n\n    func printRaceSummary() {\n        print(\"***********\")\n\n        let raceStartTime = stats[Keys.raceStartTime]!\n        print(\"Race start time: \\\\(raceStartTime)\")\n\n        for (key, value) in stats where key.contains(Keys.lapLeader) {\n            print(\"\\\\(key): \\\\(value)\")\n        }\n\n        let raceEndTime = stats[Keys.raceEndTime]!\n        print(\"Race end time: \\\\(raceEndTime)\")\n\n        let winner = stats[Keys.winner]!\n        print(\"Winner: \\\\(winner)\")\n\n        print(\"***********\")\n    }\n}\n`}</code></pre>\n    <p>{`In this example, we use the Tracker methods and Keys to help monitor the results of the race.`}</p>\n    <p>{`Now so far so good, but what if we want a live broadcast?`}</p>\n    <p>{`However, trackers should do more than one job.`}</p>\n    <p>{`This new class will care about the same info as Tracker, but Tracker objects are tied to a particular race. This becomes a problem since the Race also \"knows\" about the Tracker and Broadcast class. This coupling is too tight.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`class RaceBroadcaster {\n    // methods to try to help broadcast information on the Race object\n}\n`}</code></pre>\n    <p>{`The Race class shouldn't care about implementing the methods from the Tracker and Broadcast class. Those classes should just listen to the information that Race gives out.`}</p>\n    <p>{`How do we do this? By implementing a delegate.`}</p>\n    <p>{`We will make a \"contract\" that uses a protocol.`}</p>\n    <p>{`This will implement the rules that anything that wants to interact with the Race class must adhere to.`}</p>\n    <p><em parentName=\"p\">{`HorseRaceDelegate Protocol`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`protocol HorseRaceDelegate: class {\n    // this will require any adhering class to use the didStartAt method\n    func race(_ race: Race, didStartAt time: Date)\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date)\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse)\n}\n`}</code></pre>\n    <p>{`This protocol will now govern the events that we care about. We can create a delegate instance, but since the race doesn't \"need\" to have to have a tracker, we will make it optional and also give it the \"weak\" var to prevent a reference cycle.`}</p>\n    <p>{`Since only classes can be at the end of a weak relationship, we are violating the rule, so we can make the delegate class bound.`}</p>\n    <p>{`The delegate will be used by the Race class to delegate tasks out. We don't care which object is acting as the delegate, we just know that someone might be.`}</p>\n    <p>{`Now in the methods, we can use the delegate. The class won't care about who is listening for the delegate.`}</p>\n    <p>{`Once we have a class that implements a delegate, how do we then have a another class act as a delegate?`}</p>\n    <p>{`That means that for the class (eg Tracker), it needs to conform to the delegate.`}</p>\n    <p>{`Now that we've conformed to the protocol, we can assign an instance of Tracker to that delegate property to listen in!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let tracker = Tracker();\nrace.delegate = tracker;\n`}</code></pre>\n    <p>{`This now works, because within the Race class, we're already tracking the relevant information and passing them along to the delegate.`}</p>\n    <p>{`Rather than worry about the events itself, the class can delegate can pass out the information to the qualified objects.`}</p>\n    <h2 {...{\n      \"id\": \"iosd-3-acting-as-a-delegate\"\n    }}>{`IOSD-3: Acting as a Delegate`}</h2>\n    <p>{`So why do we need to decouple in the first place?`}</p>\n    <p>{`It will become far more manageable once you start creating Objects that focus on just one job.`}</p>\n    <p>{`Analogy:`}</p>\n    <p>{`You are the CEO of an important company and have many tasks to do, but many of them involve other side tasks that are important.`}</p>\n    <p>{`Instead of doing it all yourself, you delegate it out to an assistant.`}</p>\n    <p>{`Beforehand, you need to define what they do. Think of the requirements as the protocol.`}</p>\n    <p>{`If they have all these abilities, they conform to the protocol.`}</p>\n    <p>{`Now you hire and give the tasks to the employee - they are now your delegate.`}</p>\n    <p>{`However, if they quit - that's cool. You can look for another delegate that conforms.`}</p>\n    <p>{`Typically, you need the delegates to be weak. The reason is that it's total valid to have a circular relationship.`}</p>\n    <p>{`Example, if you have a class `}<inlineCode parentName=\"p\">{`RaceManager`}</inlineCode>{` that conforms, they can also have race of type Race as a property, we've created a strong relationship by default.`}</p>\n    <p>{`Since the Manager also conforms to the HorseRaceDelegate, you can have one that references the other. If they had a strong cycle, we couldn't get rid of the objects and it would cause a memory leak.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class RaceManager: HorseRaceDelegate {\n\n    let race: Race\n\n    init(race: Race) {\n        self.race = race\n        race.delegate = self\n        race.start()\n    }\n\n    func race(_ race: Race, didStartAt time: Date) {\n        // some implementation\n    }\n\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date) {\n        // some implementation\n    }\n\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse) {\n        // some implementation\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iosd-4-examples---cllocation-manager\"\n    }}>{`IOSD-4: Examples - CLLocation Manager`}</h2>\n    <p>{`Using the CoreLocation Framework, we can create a LocationManager class.`}</p>\n    <p>{`Once we create the class, we can request for authorization.`}</p>\n    <p>{`Since we need to wait for a response, we actually use the delegate pattern to help assigned a delegate that will recieve info.`}</p>\n    <p>{`In this case here, as long as we conform the the correct protocols, the delegate has already been created for us. For this one, we need the CLLocationManagerDelegate.`}</p>\n    <p>{`To use it, we can conform to the `}<inlineCode parentName=\"p\">{`NSObject`}</inlineCode>{` class and override the init() method since there already is one for `}<inlineCode parentName=\"p\">{`NSObject`}</inlineCode>{`. This will allow us to give conformance for the `}<inlineCode parentName=\"p\">{`CLLocationManagerDelegate`}</inlineCode>{`. Swift does not have the option of optional protocols.`}</p>\n    <p>{`Then we can set the `}<inlineCode parentName=\"p\">{`manager.delegate = self`}</inlineCode></p>\n    <p>{`This is an example of a circular dependence.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import Foundation\nimport CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let manager = CLLocationManager()\n\n    override init() {\n        super.init()\n\n        manager.delegate = self\n        manager.requestWhenInUseAuthorization\n    }\n\n    // this is an example of a protocol method!\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            manager.requestLocation()\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(Error)\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        print(locations.first!)\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iosd-5-examples---uitextfielddelegate\"\n    }}>{`IOSD-5: Examples - UITextFieldDelegate`}</h2>\n    <p>{`In case of the UITextField, we can assign the ViewController that is \"listening\" as the delegate to recieve the broadcasts.`}</p>\n    <p>{`Then we can implement the methods from the protocol to the class to give us the results.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}