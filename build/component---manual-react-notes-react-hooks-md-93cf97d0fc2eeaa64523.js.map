{"version":3,"sources":["webpack:///../manual/React-Notes/React-Hooks.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,mNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,yCAAwB,0BAAYC,WAAW,KAAvB,SAAxB,QAAkF,0BAAYA,WAAW,KAAvB,qBAAlF,kCACA,qFACA,iBAAQ,CACN,GAAM,oBADR,oBAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,YAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,0BAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,aAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,4BAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,gCAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,2CAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,6DAMN,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2WAmBL,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oYAmBL,iBAAQ,CACN,GAAM,6BADR,6BAGA,qBAAG,0BAAYA,WAAW,KAAvB,aAAH,uDAAgH,0BAAYA,WAAW,KAAvB,qBAAhH,QAAsL,0BAAYA,WAAW,KAAvB,sBAAtL,KACA,+BACA,sBACE,kBAAIA,WAAW,MAAf,yDAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kMASL,iBAAQ,CACN,GAAM,sBADR,sBAGA,iIACA,gF,0MAKJJ,EAAWK,gBAAiB","file":"component---manual-react-notes-react-hooks-md-93cf97d0fc2eeaa64523.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-hooks\"\n    }}>{`React Hooks`}</h1>\n    <p>{`Hooks introduces `}<inlineCode parentName=\"p\">{`State`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Lifecycle Methods`}</inlineCode>{` to function-based components.`}</p>\n    <p>{`Hooks make it really easy to share logic between components.`}</p>\n    <h2 {...{\n      \"id\": \"some-basic-hooks\"\n    }}>{`Some Basic Hooks`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Function`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`useState`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Component-level state`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`useEffect`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use 'lifecycle methods'`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`useContext`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Allow use of context system`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`useRef`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Allow func component to use ref system`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`useReducer`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Allow func component to store data through a 'reducer'`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"before-hooks\"\n    }}>{`Before Hooks`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// components/App.js\nimport React from 'react';\n\nexport default App extends React.Component {\n    state = {\n        counter: 0\n    }\n\n    handleClick = () => this.setState({counter: this.state.counter++})\n\n    render() {\n        return <div>\n            <button onClick={this.handleClick}>{this.state.counter}</button>\n        </div>\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"after-hooks\"\n    }}>{`After Hooks`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// components/App.js\nimport React, {useState, useEffect} from 'react';\n\nconst App = () => {\n    const [counter, setCounter] = useState(0);\n\n    const updateCounter = () => setCounter(counter++)\n\n    useEffect(() => {\n        console.log('Counter updated!');\n    }, [counter]);\n\n    return <div>\n        <button onClick={updateCounter}>{counter}</button>\n    </div>\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lifecycles-with-useeffect\"\n    }}>{`Lifecycles with useEffect`}</h2>\n    <p><inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` allows us to effectively use a combined version of `}<inlineCode parentName=\"p\">{`componentDidMount`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`componentDidUpdate`}</inlineCode>{`.`}</p>\n    <p>{`Notes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`useEffect argument function cannot be an async func.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, {useEffect} from 'react';\n\n// second argument controls whether or not the arrow function is called\nuseEffect(() => {\n    console.log('Counter updated!');\n}, [counter]);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"code-reuse-example\"\n    }}>{`Code Reuse Example`}</h2>\n    <p>{`Believe it or not, what we can actually do is abstract the useEffect outside of the function component. `}</p>\n    <p>{`This is incredibly useful to create reuseable effects.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}