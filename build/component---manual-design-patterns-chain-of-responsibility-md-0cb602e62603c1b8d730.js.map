{"version":3,"sources":["webpack:///../manual/Design-Patterns/Chain-Of-Responsibility.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,mOAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,2BADR,2BAGA,2DAEA,iBAAQ,CACN,GAAM,SADR,SAGA,8OACA,yCACA,sBACE,kBAAIC,WAAW,MAAf,4CACA,kBAAIA,WAAW,MAAf,+EACA,kBAAIA,WAAW,MAAf,8CACA,kBAAIA,WAAW,MAAf,iGAEF,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAf,sHACA,kBAAIA,WAAW,MAAf,kGACA,kBAAIA,WAAW,MAAf,wEAEF,iBAAQ,CACN,GAAM,YADR,aAGA,8BACA,sBACE,kBAAIA,WAAW,MAAf,2BACA,kBAAIA,WAAW,MAAf,8EACA,kBAAIA,WAAW,MAAf,+CAEF,8BACA,sBACE,kBAAIA,WAAW,MAAf,sCACA,kBAAIA,WAAW,MAAf,qGACA,kBAAIA,WAAW,MAAf,2DAEF,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,g1CA6DL,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uEADQ,wB,0NAQ1BJ,EAAWK,gBAAiB","file":"component---manual-design-patterns-chain-of-responsibility-md-0cb602e62603c1b8d730.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"chain-of-responsibility\"\n    }}>{`Chain Of Responsibility`}</h1>\n    <p>{`Purpose: Behavioural\nType: Object`}</p>\n    <h2 {...{\n      \"id\": \"about\"\n    }}>{`About`}</h2>\n    <p>{`Used to achieve loose coupling where a request from a client is passed to a chain of objects to process them. The object in the chain will decide whether the request moves onto the next object in the chain or not.`}</p>\n    <p>{`Applicable when:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Decoupling request's sender and reciever`}</li>\n      <li parentName=\"ul\">{`Multiple objects, determined at runtime, are candidates to handle a request`}</li>\n      <li parentName=\"ul\">{`Don't want to specific handlers explicitly`}</li>\n      <li parentName=\"ul\">{`Want to issue a request to one of several objects without explicitly specifying the reciever`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Handler: An interface which will primarily recieve the request and dispatch that request to the chain of handlers.`}</li>\n      <li parentName=\"ul\">{`Concrete handlers: Handlers that actually handle the request chained in some sequential order.`}</li>\n      <li parentName=\"ul\">{`Client: Originator of request and will access handler to handle it.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"proscons\"\n    }}>{`Pros/Cons`}</h2>\n    <p>{`Pros:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Reduce coupling degree.`}</li>\n      <li parentName=\"ul\">{`Flexible, simplified objct that does not need to know the chain structure.`}</li>\n      <li parentName=\"ul\">{`Convenient to increase request processing.`}</li>\n    </ul>\n    <p>{`Cons:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`No guarantee for request recieved.`}</li>\n      <li parentName=\"ul\">{`Performance of system affected, but also code debugging may not be so easy and could by cyclical.`}</li>\n      <li parentName=\"ul\">{`Observability of operation characteristcs not so easy.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class Handler {\n  private _successor: Handler;\n\n  public set successor(successor: Handler) {\n    this._successor = successor;\n  }\n\n  public get successor() {\n    return this._successor;\n  }\n\n  public handleRequest(msg: Number): void {}\n}\n\nclass ConcreteHandlerA extends Handler {\n  handleRequest(req: Number): void {\n    if (req > 0) {\n      console.log(\\`Handler A process \\${req}\\`);\n    } else {\n      this.successor.handleRequest(req);\n    }\n  }\n}\n\nclass ConcreteHandlerB extends Handler {\n  handleRequest(req: Number): void {\n    if (req < 0) {\n      console.log(\\`Handler B process \\${req}\\`);\n    } else {\n      this.successor.handleRequest(req);\n    }\n  }\n}\n\nclass ConcreteHandlerC extends Handler {\n  handleRequest(req: Number): void {\n    if (req === 0) {\n      console.log(\\`Handler C process \\${req}\\`);\n    } else {\n      this.successor.handleRequest(req);\n    }\n  }\n}\n\n(function main() {\n  const reqA = new ConcreteHandlerA();\n  const reqB = new ConcreteHandlerB();\n  const reqC = new ConcreteHandlerC();\n\n  // set the chain or responsibility\n  reqA.successor = reqB;\n  reqB.successor = reqC;\n\n  // handle the requests\n  reqA.handleRequest(0); // logs \"Handler C process 0\"\n  reqA.handleRequest(1); // logs \"Handler A process 1\"\n  reqA.handleRequest(-1); // logs \"Handler B process -1\"\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.geeksforgeeks.org/chain-responsibility-design-pattern/\"\n        }}>{`C# Implementation`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}