(window.webpackJsonp=window.webpackJsonp||[]).push([[314],{"+v/S":function(e,n,a){"use strict";a.r(n),a.d(n,"_frontmatter",(function(){return i})),a.d(n,"default",(function(){return b}));a("1c7q"),a("abGl"),a("gZHo"),a("Fdmb"),a("Ir+3"),a("2mQt"),a("mXGw");var t=a("/FXl"),r=a("TjRS");a("aD51");function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/Kotlin/Kotlin-Arrays-And-Lists.md"}});var s={_frontmatter:i},o=r.a;function b(e){var n=e.components,a=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(t.b)(o,l({},s,a,{components:n,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"kotlin-arrays-and-lists"},"Kotlin Arrays And Lists"),Object(t.b)("h2",{id:"creating-arrays"},"Creating Arrays"),Object(t.b)("p",null,"Easiest way is to use the ",Object(t.b)("inlineCode",{parentName:"p"},"arrayOf")," func. Kotlin will infer the type."),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),"val evenNumbers = arrayOf(2,4,6,8)\n\n// easy way to create an array with default values\nval fiveFives = arrayOf(5, {5}) // 5,5,5,5,5\n")),Object(t.b)("h2",{id:"array-of-primitives"},"Array Of Primitives"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),"val oddNumbers = intArrayOf(1,3,5,7)\nval zeros = DoubleArray(4) // 0.0, 0.0, 0.0, 0.0\nval otherOddNumbers = arrayOf(1,3,5,7).toIntArray()\n")),Object(t.b)("h2",{id:"lists"},"Lists"),Object(t.b)("p",null,"List type in Kotlin is an interface that has concrete realizations in types such as ArrayList, LinkedList and others."),Object(t.b)("p",null,"Lists have the additional features of being ",Object(t.b)("inlineCode",{parentName:"p"},"dynamically-sized"),"."),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),'val innerPlanets = listOf("Mercury", "Venus", "Earth", "Mars")\n')),Object(t.b)("h3",{id:"empty-lists"},"Empty Lists"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),"val subscribers: List<String> = listOf()\n// same as\nval subscribers = listOf<String>()\n")),Object(t.b)("h3",{id:"mutable-lists"},"Mutable Lists"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),'val outerPlanets = mutableListOf("Jupiter", "Saturn", "Uranus",\n"Neptune")\nval exoPlanets = mutableListOf<String>()\n')),Object(t.b)("h3",{id:"list-properties-and-methods"},"List Properties and Methods"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),'val players = mutableListOf("Alice", "Bob", "Cindy", "Dan")\n\nprint(players.isEmpty()) // > false\n\nif (players.size < 2) {\n  println("We need at least two players!")\n} else {\n  println("Let\'s start!")\n}\n// > Let\'s start!\n\nvar currentPlayer = players.first()\nprintln(currentPlayer) // > Alice\nprintln(players.last()) // > Dan\n\nval minPlayer = players.min()\nminPlayer.let {\n  println("$minPlayer will start") // > Alice will start\n}\n\nprintln(arrayOf(2, 3, 1).first())\n// > 2\nprintln(arrayOf(2, 3, 1).min())\n// > 1\n\nval maxPlayer = players.max()\nif (maxPlayer != null) {\n  println("$maxPlayer is the MAX") // > Dan is the MAX\n}\n\nval firstPlayer = players[0]\nprintln("First player is $firstPlayer")\n// > First player is Alice\nval secondPlayer = players.get(1)\n\nval upcomingPlayersSlice = players.slice(1..2)\nprintln(upcomingPlayersSlice.joinToString()) // > Bob, Cindy\n\nplayers.slice(1..3).contains("Alice") // false\n')),Object(t.b)("h2",{id:"adding-list-elements"},"Adding List Elements"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),'players.add("Eli")\n// or\nplayers += "Gina"\n\nprintln(players.joinToString())\n// > "Alice", "Bob", "Cindy", "Dan", "Eli", "Gina"\n\n// inserting elements\nplayers.add(5, "Frank")\n')),Object(t.b)("h2",{id:"removing-list-elements"},"Removing List Elements"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),'val wasPlayerRemoved = players.remove("Gina")\nprintln("It is $wasPlayerRemoved that Gina was removed")\n// > It is true that Gina was removed\n\nval removedPlayer = players.removeAt(2)\nprintln("$removedPlayer was removed") // > Cindy was removed\n')),Object(t.b)("h2",{id:"iterating-through-a-list"},"Iterating Through A List"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),'for (player in players) {\n  println(player)\n}\n// > Alice\n// > Anna\n// > Bob\n// > Dan\n// > Franklin\n\n// with index\nfor ((index, player) in players.withIndex()) {\n  println("${index + 1}. $player")\n}\n// > 1. Alice\n// > 2. Anna\n// > 3. Bob\n// > 4. Dan\n// > 5. Franklin\n\n// if summing numbers\nfun sumOfElements(list: List<Int>): Int {\n  var sum = 0\n  for (number in list) {\n    sum += number\n  }\nreturn sum }\n')),Object(t.b)("h2",{id:"nullable-lists"},"Nullable Lists"),Object(t.b)("p",null,"You can have nullable lists, a list of nullables or both."),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),"var nullableList = List<Int>? = listOf(1,2,3,4) // list can be nullable\nvar listOfNullables = List<Int?> = listOf(1,2,null,4) // elements can be null\n")),Object(t.b)("h2",{id:"maps-and-sets"},"Maps and Sets"),Object(t.b)("p",null,"A map is an unordered collection of pairs, where each pair is compised of a a key and value."),Object(t.b)("h2",{id:"creating-maps"},"Creating Maps"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),' var yearOfBirth = mapOf("Anna" to 1990, "Brian" to 1991, "Craig" to 1992,\n"Donna" to 1993)\nvar namesAndScores = mutableMapOf("Anna" to 2, "Brian" to 2, "Craig" to\n8, "Donna" to 6)\nprintln(namesAndScores) // > {Anna=2, Brian=2, Craig=8, Donna=6}\nnamesAndScores = mutableMapOf()\nvar pairs = HashMap<String, Int>()\npairs = HashMap<String, Int>(20)\n')),Object(t.b)("h2",{id:"mutating-mutable-maps"},"Mutating Mutable Maps"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),'val bobData = mutableMapOf(\n  "name" to "Bob",\n  "profession" to "CardPlayer",\n  "country" to "USA")\nbobData.put("state", "CA")\nbobData["city"] = "San Francisco"\n')),Object(t.b)("h3",{id:"updating-map-values"},"Updating Map Values"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),'bobData.put("name", "Bobby") // Bob\nbobData["profession"] = "Mailman"\nval pair = "nickname" to "Bobby D"\nbobData += pair\nprintln(bobData)\n// > {name=Bobby, profession=Mailman, country=USA, state=CA, city=San\nFrancisco, nickname=Bobby D}\n')),Object(t.b)("h3",{id:"removing-pairs"},"Removing Pairs"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),'bobData.remove("city")\nbobData.remove("state", "CA")\n')),Object(t.b)("h3",{id:"iterating-through-maps"},"Iterating through maps"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),'for ((player, score) in namesAndScores) {\n  println ("$player - $score")\n}\n// > Anna - 2\n// > Brian - 2\n// > Craig - 8\n// > Donna - 6\n\nfor (player in namesAndScores.keys) {\n  print("$player, ") // no newline\n}\nprintln() // print a newline\n// > Anna, Brian, Craig, Donna,\n')),Object(t.b)("p",null,"Note: For performance-critical code, ",Object(t.b)("inlineCode",{parentName:"p"},"HashMap<K, V>")," should be used via ",Object(t.b)("inlineCode",{parentName:"p"},"hashMapOf()")," instead of ",Object(t.b)("inlineCode",{parentName:"p"},"mapOf()"),"."),Object(t.b)("h2",{id:"sets"},"Sets"),Object(t.b)("p",null,"A set is an unordered collection of unique values of the same type. This can be useful for uniqueness."),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),'val names = setOf("Anna", "Brian", "Craig", "Anna")\nprintln(names)\n// > [Anna, Brian, Craig]\n\n// for an empty set\nval hashSet = HashSet<Int>()\n')),Object(t.b)("h2",{id:"sets-from-arrays"},"Sets from Arrays"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),"val someArray = arrayOf(1, 2, 3, 1)\nvar someSet = mutableSetOf(*someArray)\nprintln(someSet) // > [1, 2, 3]\n\nprintln(someSet.contains(1))\n// > true\n\nprintln(4 in someSet)\n// > false\n")),Object(t.b)("h2",{id:"adding-or-removing-elements"},"Adding Or Removing Elements"),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-kotlin"}),"someSet.add(5)\nval removedOne = someSet.remove(1)\nprintln(removedOne) // > true\nprintln(someSet)\n// > [2, 3, 5]\n")))}b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/Kotlin/Kotlin-Arrays-And-Lists.md"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-kotlin-kotlin-arrays-and-lists-md-5a14d114b957f19c3cb6.js.map