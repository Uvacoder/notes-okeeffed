{"version":3,"sources":["webpack:///../manual/React-Notes/React-Animations.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,wNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uBADR,uBAMA,iBAAQ,CACN,GAAM,0BADR,2BAGA,+DAA8C,0BAAYC,WAAW,KAAvB,2BAA9C,KACA,8JACA,oCAAmB,0BAAYA,WAAW,KAAvB,+CACnB,wCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,sSAcL,oCAAmB,0BAAYA,WAAW,KAAvB,6BAAnB,iBAA0G,0BAAYA,WAAW,KAAvB,QAA1G,0BAAqL,0BAAYA,WAAW,KAAvB,aAArL,gCAA2Q,0BAAYA,WAAW,KAAvB,6CAC3Q,4FAA2E,0BAAYA,WAAW,KAAvB,kBAA3E,KACA,6BAAY,0BAAYA,WAAW,KAAvB,oEACZ,2EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6YAaL,iBAAQ,CACN,GAAM,iEADR,kEAGA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,mnB,+MAuCTJ,EAAWK,gBAAiB","file":"component---manual-react-notes-react-animations-md-dff4d5d35f2f0601a0be.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"animations-in-react\"\n    }}>{`Animations in React`}</h1>\n    {\n      /* TOC -->autoauto- [Animations in React](#animations-in-react)auto- [REACTAN-1: Installation](#reactan-1-installation)auto- [REACTAN-2: Using CSS to now run the Transitions and Transforms](#reactan-2-using-css-to-now-run-the-transitions-and-transforms)autoauto<!-- /TOC */\n    }\n    <h1 {...{\n      \"id\": \"reactan-1-installation\"\n    }}>{`REACTAN-1: Installation`}</h1>\n    <p>{`React Transistions can be done use the `}<inlineCode parentName=\"p\">{`ReactCSSTransitionGroup`}</inlineCode>{`.`}</p>\n    <p>{`Since React uses the virtual DOM, we don't get a chance to directly apply a CSS transition like you normally would with jQuery or JS.`}</p>\n    <p>{`To install: `}<inlineCode parentName=\"p\">{`yarn add react-addons-css-transition-group`}</inlineCode></p>\n    <p>{`In the JS file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\nexport default class Transition extends Component {\n    render() {\n        return {\n            <ReactCSSTransitionGroup>\n                { list }\n            </ReactCSSTransitionGroup>\n        }\n    }\n}\n`}</code></pre>\n    <p>{`By default, `}<inlineCode parentName=\"p\">{`<ReactCSSTransitionGroup>`}</inlineCode>{` renders as a `}<inlineCode parentName=\"p\">{`span`}</inlineCode>{`, but we can give it a `}<inlineCode parentName=\"p\">{`component`}</inlineCode>{` property to change it! E.g. `}<inlineCode parentName=\"p\">{`<ReactCSSTransitionGroup component=\"ul\">`}</inlineCode></p>\n    <p>{`To access the property for animations, we need to set a property of `}<inlineCode parentName=\"p\">{`transitionName`}</inlineCode>{`.`}</p>\n    <p>{`E.g. `}<inlineCode parentName=\"p\">{`<ReactCSSTransitionGroup component=\"ul\" transitionName=\"slide\">`}</inlineCode></p>\n    <p>{`There are a couple of other noteworthy properties:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<ReactCSSTransitionGroup\n  component=\"ul\"\n  transitionName=\"slide\"\n  transitionEnterTimeout={500} // this is for the duration of the transition in ms\n  transitionLeaveTimeout={500} // transition for leaving the DOM\n  transitionAppear={true} // transition for the ReactCSSTransitionGroup component\n  transitionAppearTimeout={500} // time for is\n>\n  {list}\n</ReactCSSTransitionGroup>\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"reactan-2-using-css-to-now-run-the-transitions-and-transforms\"\n    }}>{`REACTAN-2: Using CSS to now run the Transitions and Transforms`}</h1>\n    <pre><code parentName=\"pre\" {...{}}>{`// in the css file\n\n/* start enter state */\n.slide-enter {\n    transform: translateX(-100%);\n}\n\n/* end enter state */\n.slide-enter.slide-enter-active {\n    transform: translateX(0);\n    transition: transform 0.5s ease-out;\n}\n\n/* start leave state */\n.slide-leave {\n    transform: translateX(0);\n}\n\n/* end leave state */\n.slide-leave.slide-leave-active {\n    transform: translateX(-100%);\n    opacity: 0;\n    transition: 0.5s ease-in;\n}\n\n/* initial mounting */\n.slide-appear {\n    opacity: 0;\n}\n\n.slide-appear.slide-appear-active {\n    opacity: 1;\n    transition: opacity 0.5s ease-in;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}