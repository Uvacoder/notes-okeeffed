{"version":3,"sources":["webpack:///../manual/COMP3306-AI/2-Problem-Solving-And-Search.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-comp-3306-ai-2-problem-solving-and-search-md-b4458a0447ed605c4de1.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"problem-solving-and-search\"\n    }}>{`Problem Solving and Search`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#problem-solving-and-search\"\n        }}>{`Problem Solving and Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#search-problem-formulation\"\n        }}>{`Search Problem Formulation`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#searching-for-solutions\"\n        }}>{`Searching for solutions`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#tree-search-algorithm---pseudo-code\"\n        }}>{`Tree search algorithm - pseudo code`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#nodes-vs-states\"\n        }}>{`Nodes vs States`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#search-strategies\"\n        }}>{`Search Strategies`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#uninformed-blind-search-strategies\"\n        }}>{`Uninformed (Blind) Search Strategies`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#bfs---breadth-first-search\"\n        }}>{`BFS - Breadth First Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#ucs---uniform-cost-search\"\n        }}>{`UCS - Uniform Cost Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#dfs---depth-firth-search\"\n        }}>{`DFS - Depth-Firth Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#ids---iterative-deepening-searh-ids\"\n        }}>{`IDS - Iterative Deepening Searh (IDS)`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#informed-vs-uninformed-search\"\n        }}>{`Informed vs Uninformed Search`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#best-first-search\"\n        }}>{`Best First Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#greedy-search-gs\"\n        }}>{`Greedy Search (GS)`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Learning Aims`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Uninformed Search: BFS, DFS, UCS and IDS`}</li>\n      <li parentName=\"ol\">{`Informed Search: Greedy Best-First`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"search-problem-formulation\"\n    }}>{`Search Problem Formulation`}</h2>\n    <p>{`Defined by 4 items:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Initial state`}</li>\n      <li parentName=\"ol\">{`Goal state`}</li>\n      <li parentName=\"ol\">{`Operators = actions`}</li>\n      <li parentName=\"ol\">{`Path cost function`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`Choosing States and Actions`}</strong></p>\n    <p>{`Real problems are too complex, to solve them we need to `}<em parentName=\"p\">{`abstract`}</em>{` them! Simplify them by removing unnecessary details.`}</p>\n    <p>{`Eg. If we need to find the path somewhere, we can ignore things such as weather, road conditions, scenary.`}</p>\n    <p>{`Actions need to be suitable specified eg not \"turn the steering wheel left by 5 degrees\".`}</p>\n    <p>{`The `}<em parentName=\"p\">{`level of abstraction`}</em>{` must be appropriate.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`State = set of real states`}</li>\n      <li parentName=\"ul\">{`Action = complex combination of real actions`}</li>\n      <li parentName=\"ul\">{`Solution = set of real paths that are solutions in the real world`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`8-Queens Problem`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Incremental - stat with empty space, add 1 queen at a time`}</li>\n      <li parentName=\"ol\">{`Complete-state - start with all 8 queens and move them around`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`For 1:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`States? Any arrangement of 0 to 8 queens`}</li>\n      <li parentName=\"ul\">{`Initial state? No queens on the board`}</li>\n      <li parentName=\"ul\">{`Operators? Add any queen to any square`}</li>\n      <li parentName=\"ul\">{`State space? 1.8 `}<em parentName=\"li\">{` 10^14 states (= 64 `}</em>{` 63 `}<em parentName=\"li\">{` ... `}</em>{` 57)`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`For 2:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`States? Any arrangement of 0 to 8 queens, 1 in each column with no queen attacking each other`}</li>\n      <li parentName=\"ul\">{`Initial state? No queens on the board`}</li>\n      <li parentName=\"ul\">{`Operators? Place a queen in the left-most-empty column such that it is not attacked by any other queen`}</li>\n      <li parentName=\"ul\">{`State space? 2057 states`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`For 100-queens:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`1: 10^400 states`}</li>\n      <li parentName=\"ul\">{`2: 10^52 states (hugh improvement but problem still not tractable)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"searching-for-solutions\"\n    }}>{`Searching for solutions`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Searching the state space`}</li>\n      <li parentName=\"ul\">{`Generate a search tree starting from the initial state and applying the operators`}</li>\n      <li parentName=\"ul\">{`We can generate a search graph - in a graph the same state can be reached rom multiple paths`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"tree-search-algorithm---pseudo-code\"\n    }}>{`Tree search algorithm - pseudo code`}</h2>\n    <p>{`Basic idea: offline exploration of the state space by generating successors of the explored states (i.e. exapnding states)`}</p>\n    <p><strong parentName=\"p\">{`We keep two lists:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Expanded - for nodes that have been expanded`}</li>\n      <li parentName=\"ul\">{`Fringe - for nodes that bae been generated but not expanded yet`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"nodes-vs-states\"\n    }}>{`Nodes vs States`}</h2>\n    <p>{`A `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` is different than a `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`A node:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`represents a state`}</li>\n      <li parentName=\"ul\">{`is a data structure used in the search tree`}</li>\n      <li parentName=\"ul\">{`includes `}<inlineCode parentName=\"li\">{`parent`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`children`}</inlineCode>{`, and other relevant information e.g. `}<inlineCode parentName=\"li\">{`depth`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`path cost g`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"search-strategies\"\n    }}>{`Search Strategies`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`search strategy`}</inlineCode>{` defines which node from the fringe is most promising and should be expanded next`}</li>\n      <li parentName=\"ul\">{`We always keep the nodes in the fringe orded based on the search strategy and always expand the first one`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Evaluation Critera`}</strong></p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Term`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Completeness`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is it guaranteed to find a solution if one exists?`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optimality`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`is it guaranteed to find an `}<inlineCode parentName=\"td\">{`optimal (least cost path)`}</inlineCode>{` solution?`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Time complexity`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`How long does it take to find the solution? (measured as no. of generated nodes)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Space complexity`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`what is the max number of nodes in memory?`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Time and space complexity`}</strong></p>\n    <p>{`Measured in terms of:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`b: max branching factor of the search tree (we can assume that it is finite)`}</li>\n      <li parentName=\"ul\">{`d: depth of the optimal (least cost) solution`}</li>\n      <li parentName=\"ul\">{`m: maximum depth of the state space (can be finite or not finite)`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`There are two types of search methods:`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Uninformed (blind)`}</li>\n      <li parentName=\"ol\">{`Informed (heuristic)`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"uninformed-blind-search-strategies\"\n    }}>{`Uninformed (Blind) Search Strategies`}</h2>\n    <p><strong parentName=\"p\">{`Uninformed strategies:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Generate children in a systematic way eg level by level, from left to right`}</li>\n      <li parentName=\"ul\">{`Know if a child node is a goal or non-goal node`}</li>\n      <li parentName=\"ul\">{`Do not know if one non-goal child is better (more promising) than another one. By contrast, informed (heuristic) search strategies know this`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`5 uninformed search strategies:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Breadth first`}</li>\n      <li parentName=\"ul\">{`Uniform-cost`}</li>\n      <li parentName=\"ul\">{`Depth-first`}</li>\n      <li parentName=\"ul\">{`Depth-limited`}</li>\n      <li parentName=\"ul\">{`Iterative deepening`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"bfs---breadth-first-search\"\n    }}>{`BFS - Breadth First Search`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Is the first node in the fringe a goal node?\n    Yes => stop and return solution\n    No => expand it:\n        - Move it to the expanded list\n        - Generate its children and put them in the fringe in a order defined by the search strategy\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Properties`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Complete? Yes`}</li>\n      <li parentName=\"ul\">{`Optimal? Not optimal in general; Yes, if step cost is the same, e.g. =1`}</li>\n      <li parentName=\"ul\">{`Time? generated nodes = `}<inlineCode parentName=\"li\">{`1+b+b^2+ ... + b^d = O(b^d)`}</inlineCode>{`, exponential`}</li>\n      <li parentName=\"ul\">{`Space? O(b^d) (keeps every node in memory)`}</li>\n      <li parentName=\"ul\">{`Both time and space are problems as they grow exponentially with depth but space is the bigger problem!`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"ucs---uniform-cost-search\"\n    }}>{`UCS - Uniform Cost Search`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Complete? Yes ( if step cost>0 )`}</li>\n      <li parentName=\"ul\">{`Optimal? Yes`}</li>\n      <li parentName=\"ul\">{`Time? # nodes with g  cost of optimal solution O(bd)`}</li>\n      <li parentName=\"ul\">{`Space? # nodes with g  cost of optimal solution O(bd)`}</li>\n    </ul>\n    <p>{`UCS is equivalent to BFS if the step cost is 1 or the same`}</p>\n    <h2 {...{\n      \"id\": \"dfs---depth-firth-search\"\n    }}>{`DFS - Depth-Firth Search`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Expands deepest unexpanded node`}</li>\n      <li parentName=\"ul\">{`Implementation: insert children at the front of the fringe Fringe: A\nExpanded: none`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"ids---iterative-deepening-searh-ids\"\n    }}>{`IDS - Iterative Deepening Searh (IDS)`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Sidesteps issue o choosing the best depth limit by trying all possible depth limits in turn (0, 1, 2, etc.) and applying DFS.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Depth-limited search = DFS with depth limit l - i.e. it imposes a cutoff on the maximum depth`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Properties - similar to DFS - Complete? Yes (as the search depth is always finite) - Optimal? No - Time? 1+b^2+b^3+b^4 + ... +b^l = O(b^l) - Space? O(bl)`}</p>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`Overhead of multiple expansion`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`May seem wasteful as many nodes are expanded multiple times`}</li>\n      <li parentName=\"ul\">{`But for most problems the overhead of this multiple expansion is small!`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Common properties of IDS`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`b - branching factor\nd - depth of least cost solution\nm - max depth\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Combines the benefits of DFS and BFS`}</li>\n      <li parentName=\"ul\">{`Complete? As BFS: - Yes `}{`[DFS: yes, if m is finite; no otherwise]`}{`*`}</li>\n      <li parentName=\"ul\">{`Optimal? As BFS: - No in general; Yes if step cost=1 `}{`[DFS: not optimal, even if step cost=1]`}{` `}{`*`}</li>\n      <li parentName=\"ul\">{`Time? As BFS: - `}<inlineCode parentName=\"li\">{`(d+1)b^0+db^1+(d-1)b^2+ ... +bd = O(b^d) [DFS: O(bm)] *`}</inlineCode></li>\n      <li parentName=\"ul\">{`Space? As DFS: O(bd), linear`}</li>\n      <li parentName=\"ul\">{`Where are the improvements of IDS in comparison to DFS? - in completeness, optimality and time (shown with `}{`*`}{`)`}</li>\n      <li parentName=\"ul\">{`Can be modified to explore uniform-cost tree`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"informed-vs-uninformed-search\"\n    }}>{`Informed vs Uninformed Search`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`A search strategy defines the order of node expansion`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Uniformed`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Uninformed search strategies do not use problem specific knowledge beyond the definition of the problem, i.e. they do not use heuristic knowledge. - expand nodes systematically - know if node is goal or non-goal - cannot compare two non-goal nodes (do not know if one goal node is better than another) - typically inefficient`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Informed`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Informed search strategies use problem-specific heuristic knowledge to select the order of node expansion. They: - can compare non-goal nodes – they know if one non-goal node is better than another one - are typically more efficient`}</li>\n    </ul>\n    <hr></hr>\n    <h1 {...{\n      \"id\": \"best-first-search\"\n    }}>{`Best First Search`}</h1>\n    <p>{`How can informed strategies compare non-goal nodes?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`By using domain specific knowledge to devise an evaluation function which estimates how good each node is`}</li>\n      <li parentName=\"ul\">{`The evaluation function assigns a value to each node`}</li>\n      <li parentName=\"ul\">{`At each step, the best node is expanded (the one with the best\nvalue)`}</li>\n      <li parentName=\"ul\">{`This is called best-first search - Note that we don’t really know which is the best node as we use an estimate based on the evaluation function. So best-first search expands the node that appears to be the best.`}</li>\n      <li parentName=\"ul\">{`Fringe: insert children in decreasing order of desirability`}</li>\n      <li parentName=\"ul\">{`We will study 2 best-first search algorithms: greedy and A`}{`*`}</li>\n    </ul>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"greedy-search-gs\"\n    }}>{`Greedy Search (GS)`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Uses `}<inlineCode parentName=\"li\">{`h`}</inlineCode>{` value as an evaluation function (h - heuristic)`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`h(n)`}</inlineCode>{` for node `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` is the estimated cost from `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` to a `}<inlineCode parentName=\"li\">{`goal`}</inlineCode>{` node`}</li>\n      <li parentName=\"ul\">{`Eg for the Romania example we can use `}<inlineCode parentName=\"li\">{`h(n)=SLD(n, Bucharest)`}</inlineCode>{` = straight-line distance from `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` to Bucharest`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`h`}</inlineCode>{` value of a goal node is 0, i.e. `}<inlineCode parentName=\"li\">{`h(goal)=0`}</inlineCode></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Properties`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Complete? As DFS - Yes in finite spaces (if `}<inlineCode parentName=\"li\">{`m`}</inlineCode>{` is finite) - No - fails in infinite spaces (can get stuck in a loop)`}</li>\n      <li parentName=\"ul\">{`Optimal? No`}</li>\n      <li parentName=\"ul\">{`Time? O(b^m) but good heauristic can give dramatic improvement`}</li>\n      <li parentName=\"ul\">{`Space? O(b^m), keeps every node in memory`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}