{"version":3,"sources":["webpack:///../manual/Kotlin/Kotlin-Arrays-And-Lists.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,0NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,2BADR,2BAGA,iBAAQ,CACN,GAAM,mBADR,mBAGA,kDAAiC,0BAAYC,WAAW,KAAvB,WAAjC,sCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,6IAOL,iBAAQ,CACN,GAAM,uBADR,uBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,kJAML,iBAAQ,CACN,GAAM,SADR,SAGA,8IACA,oEAAmD,0BAAYA,WAAW,KAAvB,qBAAnD,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,qEAIL,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,+FAML,iBAAQ,CACN,GAAM,iBADR,iBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,4HAML,iBAAQ,CACN,GAAM,+BADR,+BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,87BA0CL,iBAAQ,CACN,GAAM,wBADR,wBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,4LAYL,iBAAQ,CACN,GAAM,0BADR,0BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,8PASL,iBAAQ,CACN,GAAM,4BADR,4BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,obA6BL,iBAAQ,CACN,GAAM,kBADR,kBAGA,kFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,6JAKL,iBAAQ,CACN,GAAM,iBADR,iBAGA,qHACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,uWAWL,iBAAQ,CACN,GAAM,yBADR,yBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,6KASL,iBAAQ,CACN,GAAM,uBADR,uBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,yPAUL,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,4DAKL,iBAAQ,CACN,GAAM,0BADR,0BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,iSAgBL,6DAA4C,0BAAYA,WAAW,KAAvB,iBAA5C,uBAA6H,0BAAYA,WAAW,KAAvB,eAA7H,eAAoM,0BAAYA,WAAW,KAAvB,WAApM,KACA,iBAAQ,CACN,GAAM,QADR,QAGA,+HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,0JASL,iBAAQ,CACN,GAAM,oBADR,oBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,mMAYL,iBAAQ,CACN,GAAM,+BADR,+BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,2H,iNAYTJ,EAAWK,gBAAiB","file":"component---manual-kotlin-kotlin-arrays-and-lists-md-332b550085b9531a0b62.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"kotlin-arrays-and-lists\"\n    }}>{`Kotlin Arrays And Lists`}</h1>\n    <h2 {...{\n      \"id\": \"creating-arrays\"\n    }}>{`Creating Arrays`}</h2>\n    <p>{`Easiest way is to use the `}<inlineCode parentName=\"p\">{`arrayOf`}</inlineCode>{` func. Kotlin will infer the type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val evenNumbers = arrayOf(2,4,6,8)\n\n// easy way to create an array with default values\nval fiveFives = arrayOf(5, {5}) // 5,5,5,5,5\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"array-of-primitives\"\n    }}>{`Array Of Primitives`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val oddNumbers = intArrayOf(1,3,5,7)\nval zeros = DoubleArray(4) // 0.0, 0.0, 0.0, 0.0\nval otherOddNumbers = arrayOf(1,3,5,7).toIntArray()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lists\"\n    }}>{`Lists`}</h2>\n    <p>{`List type in Kotlin is an interface that has concrete realizations in types such as ArrayList, LinkedList and others.`}</p>\n    <p>{`Lists have the additional features of being `}<inlineCode parentName=\"p\">{`dynamically-sized`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val innerPlanets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"empty-lists\"\n    }}>{`Empty Lists`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val subscribers: List<String> = listOf()\n// same as\nval subscribers = listOf<String>()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mutable-lists\"\n    }}>{`Mutable Lists`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val outerPlanets = mutableListOf(\"Jupiter\", \"Saturn\", \"Uranus\",\n\"Neptune\")\nval exoPlanets = mutableListOf<String>()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"list-properties-and-methods\"\n    }}>{`List Properties and Methods`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val players = mutableListOf(\"Alice\", \"Bob\", \"Cindy\", \"Dan\")\n\nprint(players.isEmpty()) // > false\n\nif (players.size < 2) {\n  println(\"We need at least two players!\")\n} else {\n  println(\"Let's start!\")\n}\n// > Let's start!\n\nvar currentPlayer = players.first()\nprintln(currentPlayer) // > Alice\nprintln(players.last()) // > Dan\n\nval minPlayer = players.min()\nminPlayer.let {\n  println(\"$minPlayer will start\") // > Alice will start\n}\n\nprintln(arrayOf(2, 3, 1).first())\n// > 2\nprintln(arrayOf(2, 3, 1).min())\n// > 1\n\nval maxPlayer = players.max()\nif (maxPlayer != null) {\n  println(\"$maxPlayer is the MAX\") // > Dan is the MAX\n}\n\nval firstPlayer = players[0]\nprintln(\"First player is $firstPlayer\")\n// > First player is Alice\nval secondPlayer = players.get(1)\n\nval upcomingPlayersSlice = players.slice(1..2)\nprintln(upcomingPlayersSlice.joinToString()) // > Bob, Cindy\n\nplayers.slice(1..3).contains(\"Alice\") // false\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-list-elements\"\n    }}>{`Adding List Elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`players.add(\"Eli\")\n// or\nplayers += \"Gina\"\n\nprintln(players.joinToString())\n// > \"Alice\", \"Bob\", \"Cindy\", \"Dan\", \"Eli\", \"Gina\"\n\n// inserting elements\nplayers.add(5, \"Frank\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"removing-list-elements\"\n    }}>{`Removing List Elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val wasPlayerRemoved = players.remove(\"Gina\")\nprintln(\"It is $wasPlayerRemoved that Gina was removed\")\n// > It is true that Gina was removed\n\nval removedPlayer = players.removeAt(2)\nprintln(\"$removedPlayer was removed\") // > Cindy was removed\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iterating-through-a-list\"\n    }}>{`Iterating Through A List`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`for (player in players) {\n  println(player)\n}\n// > Alice\n// > Anna\n// > Bob\n// > Dan\n// > Franklin\n\n// with index\nfor ((index, player) in players.withIndex()) {\n  println(\"\\${index + 1}. $player\")\n}\n// > 1. Alice\n// > 2. Anna\n// > 3. Bob\n// > 4. Dan\n// > 5. Franklin\n\n// if summing numbers\nfun sumOfElements(list: List<Int>): Int {\n  var sum = 0\n  for (number in list) {\n    sum += number\n  }\nreturn sum }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nullable-lists\"\n    }}>{`Nullable Lists`}</h2>\n    <p>{`You can have nullable lists, a list of nullables or both.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var nullableList = List<Int>? = listOf(1,2,3,4) // list can be nullable\nvar listOfNullables = List<Int?> = listOf(1,2,null,4) // elements can be null\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"maps-and-sets\"\n    }}>{`Maps and Sets`}</h2>\n    <p>{`A map is an unordered collection of pairs, where each pair is compised of a a key and value.`}</p>\n    <h2 {...{\n      \"id\": \"creating-maps\"\n    }}>{`Creating Maps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{` var yearOfBirth = mapOf(\"Anna\" to 1990, \"Brian\" to 1991, \"Craig\" to 1992,\n\"Donna\" to 1993)\nvar namesAndScores = mutableMapOf(\"Anna\" to 2, \"Brian\" to 2, \"Craig\" to\n8, \"Donna\" to 6)\nprintln(namesAndScores) // > {Anna=2, Brian=2, Craig=8, Donna=6}\nnamesAndScores = mutableMapOf()\nvar pairs = HashMap<String, Int>()\npairs = HashMap<String, Int>(20)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mutating-mutable-maps\"\n    }}>{`Mutating Mutable Maps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val bobData = mutableMapOf(\n  \"name\" to \"Bob\",\n  \"profession\" to \"CardPlayer\",\n  \"country\" to \"USA\")\nbobData.put(\"state\", \"CA\")\nbobData[\"city\"] = \"San Francisco\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"updating-map-values\"\n    }}>{`Updating Map Values`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`bobData.put(\"name\", \"Bobby\") // Bob\nbobData[\"profession\"] = \"Mailman\"\nval pair = \"nickname\" to \"Bobby D\"\nbobData += pair\nprintln(bobData)\n// > {name=Bobby, profession=Mailman, country=USA, state=CA, city=San\nFrancisco, nickname=Bobby D}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"removing-pairs\"\n    }}>{`Removing Pairs`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`bobData.remove(\"city\")\nbobData.remove(\"state\", \"CA\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"iterating-through-maps\"\n    }}>{`Iterating through maps`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`for ((player, score) in namesAndScores) {\n  println (\"$player - $score\")\n}\n// > Anna - 2\n// > Brian - 2\n// > Craig - 8\n// > Donna - 6\n\nfor (player in namesAndScores.keys) {\n  print(\"$player, \") // no newline\n}\nprintln() // print a newline\n// > Anna, Brian, Craig, Donna,\n`}</code></pre>\n    <p>{`Note: For performance-critical code, `}<inlineCode parentName=\"p\">{`HashMap<K, V>`}</inlineCode>{` should be used via `}<inlineCode parentName=\"p\">{`hashMapOf()`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`mapOf()`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"sets\"\n    }}>{`Sets`}</h2>\n    <p>{`A set is an unordered collection of unique values of the same type. This can be useful for uniqueness.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val names = setOf(\"Anna\", \"Brian\", \"Craig\", \"Anna\")\nprintln(names)\n// > [Anna, Brian, Craig]\n\n// for an empty set\nval hashSet = HashSet<Int>()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sets-from-arrays\"\n    }}>{`Sets from Arrays`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val someArray = arrayOf(1, 2, 3, 1)\nvar someSet = mutableSetOf(*someArray)\nprintln(someSet) // > [1, 2, 3]\n\nprintln(someSet.contains(1))\n// > true\n\nprintln(4 in someSet)\n// > false\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-or-removing-elements\"\n    }}>{`Adding Or Removing Elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`someSet.add(5)\nval removedOne = someSet.remove(1)\nprintln(removedOne) // > true\nprintln(someSet)\n// > [2, 3, 5]\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}