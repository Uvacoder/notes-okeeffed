{"version":3,"sources":["webpack:///../manual/Algorithms/Tree-Constructor.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,6rC,8MA6DTJ,EAAWK,gBAAiB","file":"component---manual-algorithms-tree-constructor-md-65eee1dd70c5aa9b3f56.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tree-constructor\"\n    }}>{`Tree Constructor`}</h1>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function TreeConstructor(strArr) {\n  // convert to intArr\n  const convertedDataArr = strArr.map(leafSet =>\n    leafSet\n      .replace(/[\\\\(\\\\)]/gi, '')\n      .split(',')\n      .map(char => parseInt(char)),\n  );\n\n  let treeMap = {};\n  let children = [];\n  let parents = [];\n  for (let [child, parent] of convertedDataArr) {\n    if (!treeMap[parent]) {\n      // set empty object\n      treeMap[parent] = {};\n      if (child < parent) {\n        treeMap[parent].min = child;\n      } else if (child > parent) {\n        treeMap[parent].max = child;\n      } else {\n        return false;\n      }\n    } else {\n      if (child < parent && !treeMap[parent].min) {\n        treeMap[parent].min = child;\n      } else if (child > parent && !treeMap[parent].max) {\n        treeMap[parent].max = child;\n      } else {\n        return false;\n      }\n    }\n\n    children.push(child);\n    parents.push(parent);\n  }\n\n  // handle multiple parents not connected\n  let diff = 0;\n  for (let parent of parents) {\n    if (!children.includes(parent)) {\n      diff++;\n    } else {\n      diff--;\n    }\n  }\n\n  if (diff > 1) {\n    return false;\n  }\n\n  // code goes here\n  return true;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}