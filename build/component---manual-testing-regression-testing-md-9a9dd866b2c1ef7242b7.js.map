{"version":3,"sources":["webpack:///../manual/Testing/Regression-Testing.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,sNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,0BADR,0BAGA,yIACA,iBAAQ,CACN,GAAM,eADR,eAGA,iBAAQ,CACN,GAAM,cADR,cAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,4HAIL,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,8FAML,iBAAQ,CACN,GAAM,gBADR,gBAGA,+CAA8B,0BAAYA,WAAW,KAAvB,cAA9B,oCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2JAaL,iBAAQ,CACN,GAAM,wBADR,wBAGA,iBAAQ,CACN,GAAM,eADR,eAGA,sBACE,kBAAIA,WAAW,MAAf,wCACA,kBAAIA,WAAW,MAAf,uBACA,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,uCACA,kBAAIA,WAAW,MAAf,0BACA,kBAAIA,WAAW,MAAf,qCACA,kBAAIA,WAAW,MAAf,8CAEF,iBAAQ,CACN,GAAM,eADR,eAGA,iBAAQ,CACN,GAAM,2BADR,4BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0LAgBL,iBAAQ,CACN,GAAM,yBADR,0BAGA,8GACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0pBAyBL,iBAAQ,CACN,GAAM,2BADR,4BAGA,+FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+wCAkDL,iBAAQ,CACN,GAAM,mCADR,oCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kG,6MAQTJ,EAAWK,gBAAiB","file":"component---manual-testing-regression-testing-md-9a9dd866b2c1ef7242b7.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"css-regression-testing\"\n    }}>{`CSS Regression Testing`}</h1>\n    <p>{`We can achieve CSS regression testing by using an assertion library in conjuction with Puppeteer and Pixel Diff.`}</p>\n    <h2 {...{\n      \"id\": \"prequisites\"\n    }}>{`Prequisites`}</h2>\n    <h3 {...{\n      \"id\": \"using-yarn\"\n    }}>{`Using yarn`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn install --dev mocha chai puppeteer pixelmatch pngfs babel-polyfill babel-preset-env babel-plugin-module-resolver\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"using-kratos\"\n    }}>{`Using kratos`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kratos install js-controllers pixeldiff\nkratos install js-test regression\nshotgun run\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"folder-setup\"\n    }}>{`Folder setup`}</h3>\n    <p>{`Ensure that you have a `}<inlineCode parentName=\"p\">{`regression`}</inlineCode>{` folder to store all the images.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Example regression layout\nregression\n├── diff\n│   └── test.png\n├── src\n│   └── test.png\n└── temp\n    └── test.png\n\n3 directories, 3 files\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-regression-cli\"\n    }}>{`Using Regression CLI`}</h2>\n    <h3 {...{\n      \"id\": \"preparation\"\n    }}>{`Preparation`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Set the imports for the router file.`}</li>\n      <li parentName=\"ol\">{`Set the dev router.`}</li>\n      <li parentName=\"ol\">{`Set the array in the .puppeteer file.`}</li>\n      <li parentName=\"ol\">{`Ensure the devRouter is being used.`}</li>\n      <li parentName=\"ol\">{`Ensure app is running.`}</li>\n      <li parentName=\"ol\">{`Run source to set the base image.`}</li>\n      <li parentName=\"ol\">{`Run compare to compare source to current.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"application\"\n    }}>{`Application`}</h2>\n    <h3 {...{\n      \"id\": \"1-create-a-babelrc-file\"\n    }}>{`1. Create a babelrc file`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"presets\": [\"env\"],\n  \"plugins\": [\n    [\n      \"module-resolver\",\n      {\n        \"alias\": {\n          \"controllers\": \"./controllers\"\n        }\n      }\n    ]\n  ]\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"2-saving-a-screenshot\"\n    }}>{`2. Saving a screenshot`}</h3>\n    <p>{`This is not the test itself but a simple node script to get the initial base working:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const PixelDiff = require('./controllers/pixeldiff');\nconst puppeteer = require('puppeteer');\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n\n  console.log('Opening browser');\n  await page.goto('http://localhost:3000');\n\n  const el = await page.$('.homeSplashFade');\n  await el.screenshot({ path: 'regression/src/test.png' });\n\n  console.log('Closing browser');\n  await browser.close();\n\n  /*\n    console.log('Comparing images');\n    const res = await PixelDiff.diff({imgOnePath: 'test.png', imgTwoPath: 'test2.png', dest: 'dest.png', output: true});\n    console.log(res);\n    */\n})();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"3-writing-the-test-file\"\n    }}>{`3. Writing the test file`}</h3>\n    <p>{`Create your test file. Any example test file looks like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Regression tests\n * @author Dennis O'Keeffe\n */\nrequire('babel-polyfill');\nconst expect = require('chai').expect;\nconst cwd = process.cwd();\nconst PixelDiff = require('controllers/pixeldiff');\nconst puppeteer = require('puppeteer');\n\nconsole.log(PixelDiff);\nconsole.log(cwd);\n\nconst screenshot = async (selector, savePath, location = '/') => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n\n  console.log('Opening browser');\n  await page.goto('http://localhost:3000');\n\n  const el = await page.$('#root');\n  await el.screenshot({ path: savePath });\n\n  console.log('Closing browser');\n  await browser.close();\n};\n\ndescribe('It works functionality', () => {\n  it('Expects true to be true', () => {\n    expect(true).to.be.true;\n  });\n});\n\ndescribe('Image regression testing', () => {\n  it('has no pixel difference', async () => {\n    console.log('Comparing images');\n    await screenshot('.homeSplashFade', cwd + '/regression/temp/test.png');\n\n    const res = await PixelDiff.diff({\n      imgOnePath: cwd + '/regression/src/test.png',\n      imgTwoPath: cwd + '/regression/temp/test.png',\n      dest: cwd + '/regression/diff/test.png',\n      output: true\n    });\n    expect(res).to.equal(0);\n  });\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"4-running-the-test-from-the-cli\"\n    }}>{`4. Running the test from the CLI`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`mocha --compilers js:babel-core/register --timeout 0 ./test/regression/regression.mocha.js\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}