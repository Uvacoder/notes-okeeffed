(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{"10/5":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return c})),t.d(n,"default",(function(){return p}));t("1c7q"),t("abGl"),t("gZHo"),t("Fdmb"),t("Ir+3"),t("2mQt"),t("mXGw");var r=t("/FXl"),a=t("TjRS");t("aD51");function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/Algorithms/Tree-Constructor.md"}});var l={_frontmatter:c},o=a.a;function p(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(r.b)(o,i({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"tree-constructor"},"Tree Constructor"),Object(r.b)("h2",{id:"answer"},"Answer"),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"function TreeConstructor(strArr) {\n  // convert to intArr\n  const convertedDataArr = strArr.map(leafSet =>\n    leafSet\n      .replace(/[\\(\\)]/gi, '')\n      .split(',')\n      .map(char => parseInt(char)),\n  );\n\n  let treeMap = {};\n  let children = [];\n  let parents = [];\n  for (let [child, parent] of convertedDataArr) {\n    if (!treeMap[parent]) {\n      // set empty object\n      treeMap[parent] = {};\n      if (child < parent) {\n        treeMap[parent].min = child;\n      } else if (child > parent) {\n        treeMap[parent].max = child;\n      } else {\n        return false;\n      }\n    } else {\n      if (child < parent && !treeMap[parent].min) {\n        treeMap[parent].min = child;\n      } else if (child > parent && !treeMap[parent].max) {\n        treeMap[parent].max = child;\n      } else {\n        return false;\n      }\n    }\n\n    children.push(child);\n    parents.push(parent);\n  }\n\n  // handle multiple parents not connected\n  let diff = 0;\n  for (let parent of parents) {\n    if (!children.includes(parent)) {\n      diff++;\n    } else {\n      diff--;\n    }\n  }\n\n  if (diff > 1) {\n    return false;\n  }\n\n  // code goes here\n  return true;\n}\n")))}p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/Algorithms/Tree-Constructor.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-algorithms-tree-constructor-md-4948635d0a0820bd9e8a.js.map