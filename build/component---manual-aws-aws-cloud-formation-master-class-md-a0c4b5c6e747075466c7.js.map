{"version":3,"sources":["webpack:///../manual/AWS/AWS-CloudFormation-MasterClass.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-aws-aws-cloud-formation-master-class-md-a0c4b5c6e747075466c7.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"cloudformation-master-class\"\n    }}>{`CloudFormation Master Class`}</h1>\n    {\n      /* TOC -->autoauto- [CloudFormation Master Class](#cloudformation-master-class)auto    - [What is CloudFormation](#what-is-cloudformation)auto    - [Benefits](#benefits)auto    - [CloudFormation vs Ansible / Terraform](#cloudformation-vs-ansible--terraform)auto    - [First template](#first-template)auto    - [YAML Intro](#yaml-intro)auto    - [Creating a S3 Bucket](#creating-a-s3-bucket)auto        - [Types of updates](#types-of-updates)auto        - [Properties](#properties)auto        - [Deleting the stack](#deleting-the-stack)auto    - [CloudFormation template options](#cloudformation-template-options)auto    - [CloudFormation Designer](#cloudformation-designer)auto    - [Building Blocks](#building-blocks)auto    - [Template helpers](#template-helpers)auto    - [CloudFormation Parameters](#cloudformation-parameters)auto        - [Overview](#overview)auto        - [Theory and hands on](#theory-and-hands-on)auto    - [How to reference a parameter](#how-to-reference-a-parameter)auto    - [Resources](#resources)auto        - [Reading the docs for an ES2 Instance](#reading-the-docs-for-an-es2-instance)auto        - [Optional Attributes for Resources](#optional-attributes-for-resources)auto        - [FAQ for resources](#faq-for-resources)auto    - [Mappings](#mappings)auto        - [Fn::FindInMap - Accessing Mapping Values](#fnfindinmap---accessing-mapping-values)auto        - [Mappings in practise](#mappings-in-practise)auto    - [Concept: Pseudo Parameters](#concept-pseudo-parameters)auto    - [CloudFormation Outputs](#cloudformation-outputs)auto        - [Outputs Hands-On](#outputs-hands-on)auto        - [Cross Stack Reference](#cross-stack-reference)auto    - [Conditions](#conditions)auto        - [How to define a condition?](#how-to-define-a-condition)auto    - [Conditional Hands On](#conditional-hands-on)auto    - [Fn::GetAtt](#fngetatt)auto    - [CF Metadata](#cf-metadata)auto        - [AWS::CloudFormation::Designer hands on](#awscloudformationdesigner-hands-on)auto        - [AWS::CloudFormation::Interface hands on](#awscloudformationinterface-hands-on)auto    - [CFN Init and EC2 User Data](#cfn-init-and-ec2-user-data)auto        - [EC2 User Data Overview](#ec2-user-data-overview)auto        - [CloudFormation Init](#cloudformation-init)auto        - [AWS::CloudFormation::Init](#awscloudformationinit)auto        - [Packages](#packages)auto        - [Groups and Users](#groups-and-users)auto        - [Sources](#sources)auto        - [Files](#files)auto        - [Fn::Sub](#fnsub)auto        - [Commands](#commands)auto        - [Services](#services)auto        - [CFN Init and Signal](#cfn-init-and-signal)auto        - [cfn-hup](#cfn-hup)auto        - [CFN Init Hands-On](#cfn-init-hands-on)auto    - [Advanced CF Concepts](#advanced-cf-concepts)auto        - [Using the AWS CLI](#using-the-aws-cli)auto        - [Using Troposphere (Python) to generate CloudFormation templates](#using-troposphere-python-to-generate-cloudformation-templates)auto        - [DeletionPolicy](#deletionpolicy)auto        - [Custom Resources with AWS Lambda](#custom-resources-with-aws-lambda)auto        - [Best practises to organize your CloudFormation templates](#best-practises-to-organize-your-cloudformation-templates)auto        - [Cost estimate for templates](#cost-estimate-for-templates)autoauto<!-- /TOC */\n    }\n    <h2 {...{\n      \"id\": \"what-is-cloudformation\"\n    }}>{`What is CloudFormation`}</h2>\n    <p>{`Having >50 services, CloudFormation was brought in to help develops scaffold out the requires AWS stack.`}</p>\n    <p>{`Eg. I want a security group, two EC2 machines with it, two elastic IPs, an S3 bucket + a load balancer in front.`}</p>\n    <p>{`CloudFormation will create all of this in the right order with the exact config.`}</p>\n    <h2 {...{\n      \"id\": \"benefits\"\n    }}>{`Benefits`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Infrastructure as code`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`No manual creation`}</li>\n          <li parentName=\"ul\">{`Can be version controlled`}</li>\n          <li parentName=\"ul\">{`Changes to infrastructure are reviewed through code`}</li>\n        </ul></li>\n      <li parentName=\"ol\">{`Cost`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Each resource will be tagged so you can estimate the costs and figure out which costs what`}</li>\n          <li parentName=\"ul\">{`Great savings strategy`}</li>\n        </ul></li>\n      <li parentName=\"ol\">{`Productivity`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Ability to destroy and re-create an infrastructure`}</li>\n          <li parentName=\"ul\">{`Automated generation of Diagram for templates`}</li>\n          <li parentName=\"ul\">{`All declarative`}</li>\n        </ul></li>\n      <li parentName=\"ol\">{`Separation of concern`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Many different stacks for many different layers`}</li>\n        </ul></li>\n      <li parentName=\"ol\">{`Don't re-invent the wheel`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Already so many templates`}</li>\n          <li parentName=\"ul\">{`Leverage the docs`}</li>\n        </ul></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"cloudformation-vs-ansible--terraform\"\n    }}>{`CloudFormation vs Ansible / Terraform`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`CF is native, and also contain the latest`}</li>\n      <li parentName=\"ul\">{`CF is state based`}</li>\n      <li parentName=\"ul\">{`The others are instruction based - difficult to orchestrate`}</li>\n      <li parentName=\"ul\">{`For new services, Ansible / Terraform can take a long time`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"first-template\"\n    }}>{`First template`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`---\nResources:\n  MyInstance:\n    Type: AWS::EC2::Instance\n    Properties:\n      AvailabilityZone: us-east-1a\n      ImageId: ami-a4c7edb2\n      InstanceType: t2.micro\n`}</code></pre>\n    <p>{`The stack instance can be created, updated or destroyed.`}</p>\n    <p>{`You cannot edit the stack itself later, you need to just re-update the stack by uploading a new file.`}</p>\n    <p>{`The stack itself can clean up instances after itself too.`}</p>\n    <h2 {...{\n      \"id\": \"yaml-intro\"\n    }}>{`YAML Intro`}</h2>\n    <p>{`You can use YAML or JSON for writing it - but JSON is tough for it`}</p>\n    <p>{`Array support:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`product:\n    - test  : 1\n      quantity: 2\n    - test  : 2\n      quantity: 4\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-a-s3-bucket\"\n    }}>{`Creating a S3 Bucket`}</h2>\n    <p>{`Googling for the type, you will get the in depth docs from AWS.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`---\nResources: # always the start\n    MyS3Bucket: # template name\n        Type: \"AWS::S3::Bucket\"\n        Properties:\n            AccessControl: PublicRead\n            BucketName: \"www.site.com\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"types-of-updates\"\n    }}>{`Types of updates`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Updates with no interruption`}</li>\n      <li parentName=\"ol\">{`Replacements are breaking and need to replace the resource`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h3>\n    <p>{`On the properties under the docs, you can see info about the properties.`}</p>\n    <h3 {...{\n      \"id\": \"deleting-the-stack\"\n    }}>{`Deleting the stack`}</h3>\n    <p>{`Just right click on the CloudFormation and delete the resources.`}</p>\n    <h2 {...{\n      \"id\": \"cloudformation-template-options\"\n    }}>{`CloudFormation template options`}</h2>\n    <p>{`You have a few template options:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Tags`}</li>\n      <li parentName=\"ol\">{`Permissions (IAM role)`}</li>\n      <li parentName=\"ol\">{`Notifications Options (SNS topic)`}</li>\n      <li parentName=\"ol\">{`Timeouts (minutes before calling failure)`}</li>\n      <li parentName=\"ol\">{`Rollback on Failure`}</li>\n      <li parentName=\"ol\">{`Stack Policy`}</li>\n    </ol>\n    <p>{`These (if you manually do it) all show up on the \"create stack\" part of CloudFormation.`}</p>\n    <p>{`The template review also gives you an opportunity to estimate cost.`}</p>\n    <h2 {...{\n      \"id\": \"cloudformation-designer\"\n    }}>{`CloudFormation Designer`}</h2>\n    <p>{`A visual aid to help build the CF Stack. Ensure the template is also well written.`}</p>\n    <p>{`You can drag and drop basically everything. Dropping it will give you options to selecting documentation etc.`}</p>\n    <p>{`It's great for dragging and dropping templates and giving information on that template as well.`}</p>\n    <h2 {...{\n      \"id\": \"building-blocks\"\n    }}>{`Building Blocks`}</h2>\n    <p>{`There are a number of building blocks for each template:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Resources: your AWS resources declared in the template`}</li>\n      <li parentName=\"ol\">{`Parameters: the dynamic inputs for your template`}</li>\n      <li parentName=\"ol\">{`Mappings: the static variables for your template`}</li>\n      <li parentName=\"ol\">{`Outputs: References to what has been created`}</li>\n      <li parentName=\"ol\">{`Conditionals: List of conditions to perform resource creation`}</li>\n      <li parentName=\"ol\">{`Metadata`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"template-helpers\"\n    }}>{`Template helpers`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`References`}</li>\n      <li parentName=\"ol\">{`Functions`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"cloudformation-parameters\"\n    }}>{`CloudFormation Parameters`}</h2>\n    <h3 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h3>\n    <p>{`What are they? The way to provide inputs to your AWS CloudFormation template.`}</p>\n    <p>{`They're important to know about it:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`You want to reuse your templates across the company`}</li>\n      <li parentName=\"ol\">{`Some inputs can not be determined ahead of time`}</li>\n    </ol>\n    <p>{`The major benefit: you won't have to re-upload a template to change its content.`}</p>\n    <h3 {...{\n      \"id\": \"theory-and-hands-on\"\n    }}>{`Theory and hands on`}</h3>\n    <p>{`Parameters can be controlled by all these settings:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Type:`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">{`String`}</li>\n      <li parentName=\"ul\">{`Number`}</li>\n      <li parentName=\"ul\">{`CommaDelimitedList`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`List<Type>`}</inlineCode></li>\n      <li parentName=\"ul\">{`AWS Parameter (to help catch invalid values - match against existing values in the AWS Account)`}</li>\n    </ul>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Description`}</li>\n      <li parentName=\"ol\">{`Constraints`}</li>\n      <li parentName=\"ol\">{`ConstraintDescription (String)`}</li>\n      <li parentName=\"ol\">{`Min/MaxLength`}</li>\n      <li parentName=\"ol\">{`Min/MaxValue`}</li>\n      <li parentName=\"ol\">{`Defaults`}</li>\n      <li parentName=\"ol\">{`AllowedValues (array)`}</li>\n      <li parentName=\"ol\">{`AllowedPattern (regexp)`}</li>\n      <li parentName=\"ol\">{`NoEcho (Boolean)`}</li>\n    </ol>\n    <p>{`This can be found in the `}<inlineCode parentName=\"p\">{`0-parameters-hands-on.yaml`}</inlineCode>{`.`}</p>\n    <p>{`Again - check the docs.`}</p>\n    <p>{`To reference a parameter, you then go with `}<inlineCode parentName=\"p\">{`Key: !Ref Reference`}</inlineCode>{`.`}</p>\n    <p>{`If you have `}<inlineCode parentName=\"p\">{`!Select`}</inlineCode>{` for a CommaDelimitedList, you need to go `}<inlineCode parentName=\"p\">{`Key: !Select [ArrayNumber, !Ref Reference]`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-reference-a-parameter\"\n    }}>{`How to reference a parameter`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Using the Fn::Ref function.`}</li>\n      <li parentName=\"ul\">{`Shorthand in YAML is !Ref.`}</li>\n      <li parentName=\"ul\">{`Can reference block, not just parameter`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <p>{`Resources are the core of your CloudFormation template. They represent the different AWS Components that will be created and configured.`}</p>\n    <p>{`They are declared and can be references by eachother. AWS figures out creation, updates, deletes etc.`}</p>\n    <p>{`There are over 224 types of resources.`}</p>\n    <p>{`They are identified using the form `}<inlineCode parentName=\"p\">{`AWS::aws-product-name::data-type-name`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"reading-the-docs-for-an-es2-instance\"\n    }}>{`Reading the docs for an ES2 Instance`}</h3>\n    <p>{`If you look at the docs, if comes up with both JSON and YAML docs.`}</p>\n    <h3 {...{\n      \"id\": \"optional-attributes-for-resources\"\n    }}>{`Optional Attributes for Resources`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`DependsOn: very useful to draw a dependency between two resources. For example, only create an ECS cluster after creating an ASG (auto scaling group).`}</li>\n      <li parentName=\"ol\">{`DeletionPolicy: protect resource from being deleted even if cloudformation is deleted.`}</li>\n      <li parentName=\"ol\">{`CreationPolicy: more info on CFN`}</li>\n      <li parentName=\"ol\">{`Metadata: anything you want!`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"faq-for-resources\"\n    }}>{`FAQ for resources`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Can I create a dynamic a dynamic amount of resources? No you can perform code generation. The work around is the `}<inlineCode parentName=\"li\">{`troposphere`}</inlineCode>{` Python library.`}</li>\n      <li parentName=\"ol\">{`Is every AWS Service supported? Almost. Only a select few niches are not there.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"mappings\"\n    }}>{`Mappings`}</h2>\n    <p>{`What are mappings? Fixed ariables within your CF Template. Great for dev vs prod, regions, AMI types etc.`}</p>\n    <p>{`Every mapping has top, middle and bottom.`}</p>\n    <p>{`Great to use when you know in advance:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Region`}</li>\n      <li parentName=\"ul\">{`AZ`}</li>\n      <li parentName=\"ul\">{`AWSAccount`}</li>\n      <li parentName=\"ul\">{`Environment (dev vs prod)`}</li>\n    </ul>\n    <p>{`They allow safer control over the template. Use parameters when the values are `}<em parentName=\"p\">{`really`}</em>{` user specific.`}</p>\n    <h3 {...{\n      \"id\": \"fnfindinmap---accessing-mapping-values\"\n    }}>{`Fn::FindInMap - Accessing Mapping Values`}</h3>\n    <p>{`Use Fn::FindInMap to return a named value from a specific key.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`!FindInMap `}{`[ MapName, TopLevelKey, SecondLevelKey ]`}</li>\n    </ul>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWSTemplateFormatVersion: '2010-09-09'\nMappings:\n  RegionMap:\n    us-east-1:\n      '32': 'ami-6411e20d'\n      '64': 'ami-7a11e213'\nResources:\n  myEC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', 32]\n      InstanceType: m1.small\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mappings-in-practise\"\n    }}>{`Mappings in practise`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Parameters:\n  EnvironmentName:\n    Description: Environment Name\n    Type: String\n    AllowedValues: [development, production]\n    ConstraintDescription: must be development or production\n\nMappings:\n  AWSRegionArch2AMI:\n    us-east-1:\n      HVM64: ami-6869aa05\n  EnvironmentToInstantType:\n    development:\n      instanceType: t2.micro\n    production:\n      instanceType: t2.small\n\nResources:\n  EC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      InstanceType:\n        !FindInMap [\n          EnvironmentToInstanceType,\n          !Ref 'EnvironmentName',\n          instanceType,\n        ]\n      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"concept-pseudo-parameters\"\n    }}>{`Concept: Pseudo Parameters`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`AWS offers us pseudo params in any CF template.`}</li>\n      <li parentName=\"ul\">{`These can be used at any time and are enabled by default.`}</li>\n    </ul>\n    <ol>\n      <li parentName=\"ol\">{`AWS::AccountId`}</li>\n      <li parentName=\"ol\">{`AWS::NotificationsARNs`}</li>\n      <li parentName=\"ol\">{`AWS::NoValue`}</li>\n      <li parentName=\"ol\">{`AWS::Region`}</li>\n      <li parentName=\"ol\">{`AWS::StackId`}</li>\n      <li parentName=\"ol\">{`AWS::StackName`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"cloudformation-outputs\"\n    }}>{`CloudFormation Outputs`}</h2>\n    <p>{`What are they? They are `}<em parentName=\"p\">{`optional`}</em>{` values that we can import into other stacks.`}</p>\n    <p>{`You can also view the outputs in the AWS Console or in using the AWS CLI.`}</p>\n    <p>{`They're very useful for example if you define a network CloudFormation, and output the variables such as VPC ID and your Subnet IDs.`}</p>\n    <p>{`It's the best way to perform some collaboration cross stack. Let the expert handle their part and you handle yours.`}</p>\n    <h3 {...{\n      \"id\": \"outputs-hands-on\"\n    }}>{`Outputs Hands-On`}</h3>\n    <p>{`Creating a SSH Security Group as part of one template. We can create an output that references that security group.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Outputs:\n  <Logical ID>:\n    Description: Information about the value\n    Value: Value to return\n    Export:\n      Name: Value to export\n`}</code></pre>\n    <p>{`In 0-create-ssh-security-group.yaml`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Resources:\n  # here we define a SSH security group that will be used in the entire company\n  MyCompanyWideSSHSecurityGroup:\n    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Enable SSH access via port 22\n      SecurityGroupIngress:\n        # we have a lot of rules because it's a perfect security group\n        # finance team network\n        - CidrIp: 10.0.48.0/24\n          FromPort: 22\n          IpProtocol: tcp\n          ToPort: 22\n          # marketing team network\n        - CidrIp: 10.0.112.0/24\n          FromPort: 22\n          IpProtocol: tcp\n          ToPort: 22\n          # application team support network\n        - CidrIp: 10.0.176.0/24\n          FromPort: 22\n          IpProtocol: tcp\n          ToPort: 22\n\nOutputs:\n  StackSSHSecurityGroup:\n    Description: The SSH Security Group for our Company\n    Value: !Ref MyCompanyWideSSHSecurityGroup\n    Export:\n      Name: SSHSecurityGroup\n`}</code></pre>\n    <p>{`It is important to note that for an `}<inlineCode parentName=\"p\">{`output`}</inlineCode>{` to be used anywhere, you need to define an `}<inlineCode parentName=\"p\">{`export`}</inlineCode>{` value.`}</p>\n    <h3 {...{\n      \"id\": \"cross-stack-reference\"\n    }}>{`Cross Stack Reference`}</h3>\n    <p>{`We use `}<inlineCode parentName=\"p\">{`Fn::ImportValue`}</inlineCode>{` in a simple block:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Resources:\n  MySecureInstance:\n    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html\n    Type: AWS::EC2::Instance\n    Properties:\n      AvailabilityZone: us-east-1a\n      ImageId: ami-a4c7edb2\n      InstanceType: t2.micro\n      SecurityGroups:\n        # we reference the output here, using the Fn::ImportValue function\n        - !ImportValue SSHSecurityGroup\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"conditions\"\n    }}>{`Conditions`}</h2>\n    <p>{`Conditionals are used to control the creation of resources or outputs based on a condition.`}</p>\n    <p>{`Conditions can be whatever you want them to be, but common ones are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Environment (dev/test/prod)`}</li>\n      <li parentName=\"ul\">{`AWS Region`}</li>\n      <li parentName=\"ul\">{`Any parameter value`}</li>\n    </ul>\n    <p>{`Each condition can reference another condition, parameter value or mapping.`}</p>\n    <h3 {...{\n      \"id\": \"how-to-define-a-condition\"\n    }}>{`How to define a condition?`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Conditions:\n  [Logical ID]: [Intrinsic function]\n`}</code></pre>\n    <p>{`Logical ID is for you to choose. It's how you name the condition.`}</p>\n    <p>{`The intrinsic function (logical) can be any of the following: - Fn::And - Fn::Equals - Fn::If - Fn::Not - Fn::Or`}</p>\n    <h2 {...{\n      \"id\": \"conditional-hands-on\"\n    }}>{`Conditional Hands On`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Let's analyze a CF template that optionally creates a volume and mount point only if \"prod\" is specified as a parameter.`}</li>\n      <li parentName=\"ul\">{`It utilizes params, mappings, conditionals, outputs`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWSTemplateFormatVersion: '2010-09-09'\nMappings:\n  RegionMap:\n    us-east-1:\n      AMI: 'ami-a4c7edb2'\n      TestAz: 'us-east-1a'\n    us-west-1:\n      AMI: 'ami-6df1e514'\n      TestAz: 'us-west-1a'\n    us-west-2:\n      AMI: 'ami-327f5352'\n      TestAz: 'us-west-2a'\n    eu-west-1:\n      AMI: 'ami-d7b9a2b1'\n      TestAz: 'eu-west-1a'\n    sa-east-1:\n      AMI: 'ami-87dab1eb'\n      TestAz: 'sa-east-1a'\n    ap-southeast-1:\n      AMI: 'ami-77af2014'\n      TestAz: 'ap-southeast-1a'\n    ap-southeast-2:\n      AMI: 'ami-10918173'\n      TestAz: 'ap-southeast-2a'\n    ap-northeast-1:\n      AMI: 'ami-e21cc38c'\n      TestAz: 'ap-northeast-1a'\nParameters:\n  EnvType:\n    Description: Environment type.\n    Default: test\n    Type: String\n    AllowedValues:\n      - prod\n      - test\n    ConstraintDescription: must specify prod or test.\n\nConditions:\n  CreateProdResources: !Equals [!Ref EnvType, prod]\n\nResources:\n  EC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]\n      InstanceType: t2.micro\n      AvailabilityZone: !FindInMap [RegionMap, !Ref 'AWS::Region', TestAz]\n\n  MountPoint:\n    Type: 'AWS::EC2::VolumeAttachment'\n    Condition: CreateProdResources\n    Properties:\n      InstanceId: !Ref EC2Instance\n      VolumeId: !Ref NewVolume\n      Device: /dev/sdh\n\n  NewVolume:\n    Type: 'AWS::EC2::Volume'\n    Condition: CreateProdResources\n    Properties:\n      Size: 100\n      AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone\n\nOutputs:\n  VolumeId:\n    Condition: CreateProdResources\n    Value: !Ref NewVolume\n`}</code></pre>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`conditions`}</inlineCode>{` can not be applied to `}<inlineCode parentName=\"p\">{`parameters`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"fngetatt\"\n    }}>{`Fn::GetAtt`}</h2>\n    <p>{`Get an attribute attached to any resource that exists. To know the attributes, check the docs.`}</p>\n    <h2 {...{\n      \"id\": \"cf-metadata\"\n    }}>{`CF Metadata`}</h2>\n    <p>{`This is any optional metadata section to include arbitrary YAML that provide details about the template or resource.`}</p>\n    <p>{`There are 3 metadata keys that have special meaning:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`AWS::CloudFormation::Designer`}</li>\n    </ol>\n    <p>{`Describes how the resources are laid out in your template. This is automatically added by the AWS Designer. This helps the UI (x and y)`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`AWS::CloudFormation::Interface`}</li>\n    </ol>\n    <p>{`Define grouping and ordering of input parameters when they are displayed in the AWS Console.`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`AWS::CloudFormation::Init`}</li>\n    </ol>\n    <p>{`Define configuration tasks for cfn-init. It's the most powerful usage of the metadata. This is very important and a lot to learn about it below.`}</p>\n    <h3 {...{\n      \"id\": \"awscloudformationdesigner-hands-on\"\n    }}>{`AWS::CloudFormation::Designer hands on`}</h3>\n    <p>{`This is automatically added for you but worth deleting for online sharing and usage. When dragging and dropping each resource you will see a huge set of metadata left there. The metadata can also be added to each resource.`}</p>\n    <h3 {...{\n      \"id\": \"awscloudformationinterface-hands-on\"\n    }}>{`AWS::CloudFormation::Interface hands on`}</h3>\n    <p>{`Define grouping and ordering of input parameteres when they are displayed in the AWS Console. This is meant when users must input params manually.`}</p>\n    <p>{`You provide them with grouping, or sorting, that allow them to input parameters efficiently.`}</p>\n    <p>{`Example: Group all the EC2 related params together.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`---\nParameters:\n  KeyName:\n    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.\n    Type: AWS::EC2::KeyPair::KeyName\n  InstanceType:\n    Description: EC2 instance type.\n    Type: String\n    Default: t2.micro\n    AllowedValues:\n      - t2.micro\n      - t2.small\n      - t2.medium\n      - m3.medium\n      - m3.large\n      - m3.xlarge\n      - m3.2xlarge\n  SSHLocation:\n    Description: The IP address range that can SSH to the EC2 instance.\n    Type: String\n    MinLength: '9'\n    MaxLength: '18'\n    Default: 0.0.0.0/0\n    AllowedPattern: \"(\\\\\\\\d{1,3})\\\\\\\\.(\\\\\\\\d{1,3})\\\\\\\\.(\\\\\\\\d{1,3})\\\\\\\\.(\\\\\\\\d{1,3})/(\\\\\\\\d{1,2})\"\n    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n  VPCID:\n    Description: VPC to operate in\n    Type: AWS::EC2::VPC::Id\n  SubnetID:\n    Description: Subnet ID\n    Type: AWS::EC2::Subnet::Id\n  SecurityGroupID:\n    Description: Security Group\n    Type: AWS::EC2::SecurityGroup::Id\n\nResources:\n  MyEC2Instance:\n    Type: 'AWS::EC2::Instance'\n    Properties:\n      AvailabilityZone: us-east-1a\n      ImageId: ami-a4c7edb2\n      InstanceType: !Ref InstanceType\n      SecurityGroups:\n        - !Ref SecurityGroupID\n      SubnetID: !Ref SubnetID\n\nMetadata:\n  # This is the important part\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: 'Network Configuration'\n        Parameters:\n          - VPCID\n          - SubnetID\n          - SecurityGroupID\n      - Label:\n          default: 'Amazon EC2 Configuration'\n        Parameters:\n          - InstanceType\n          - KeyName\n    ParameterLabels:\n      VPCID:\n        default: 'Which VPC should this be deployed to?'\n`}</code></pre>\n    <p>{`If you deploy a new stack using the above, you will see that the `}<inlineCode parentName=\"p\">{`Parameters`}</inlineCode>{` block will then drop you to questions about what configuration you are looking for.`}</p>\n    <h2 {...{\n      \"id\": \"cfn-init-and-ec2-user-data\"\n    }}>{`CFN Init and EC2 User Data`}</h2>\n    <h3 {...{\n      \"id\": \"ec2-user-data-overview\"\n    }}>{`EC2 User Data Overview`}</h3>\n    <p>{`Many CF templates will be about provisioning computer resources in your AWS Cloud eg. EC2 instances, autoscaling.`}</p>\n    <p>{`Usually, you want to the instances to be self configured so that they can perform the job they are supposed to perform.`}</p>\n    <p>{`You can fully automate the EC2 fleet with CF init.`}</p>\n    <p>{`Example: an EC2 instance that has php and mysql installed on it.`}</p>\n    <p>{`We want a user-data script to get this up and going. From the EC2 management console, you can basically use the advanced section to add a `}<inlineCode parentName=\"p\">{`/bin/bash`}</inlineCode>{` section. This is already started to become more tedious than what we want.`}</p>\n    <p>{`How can we do this in CloufFormation?`}</p>\n    <p>{`The following script can use `}<inlineCode parentName=\"p\">{`UserData`}</inlineCode>{` to add the script:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Parameters:\n  KeyName:\n    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.\n    Type: AWS::EC2::KeyPair::KeyName\n  SSHLocation:\n    Description: The IP address range that can be used to SSH to the EC2 instances\n    Type: String\n    MinLength: '9'\n    MaxLength: '18'\n    Default: 0.0.0.0/0\n    AllowedPattern: \"(\\\\\\\\d{1,3})\\\\\\\\.(\\\\\\\\d{1,3})\\\\\\\\.(\\\\\\\\d{1,3})\\\\\\\\.(\\\\\\\\d{1,3})/(\\\\\\\\d{1,2})\"\n    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.\n\nResources:\n  WebServer:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: ami-a4c7edb2\n      InstanceType: t2.micro\n      KeyName: !Ref KeyName\n      SecurityGroups:\n        - !Ref WebServerSecurityGroup\n      UserData:\n        Fn::Base64: | # everything after will be kept as is\n          #!/bin/bash\n          yum update -y\n          yum install -y httpd24 php56 mysql55-server php56-mysqlnd\n          service httpd start\n          chkconfig httpd on\n          groupadd www\n          usermod -a -G www ec2-user\n          chown -R root:www /var/www\n          chmod 2775 /var/www\n          find /var/www -type d -exec chmod 2775 {} +\n          find /var/www -type f -exec chmod 0664 {} +\n          echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php\n\n  WebServerSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: 'Enable HTTP access via port 80 + SSH access'\n      SecurityGroupIngress:\n        - CidrIp: 0.0.0.0/0\n          FromPort: '80'\n          IpProtocol: tcp\n          ToPort: '80'\n        - CidrIp: !Ref SSHLocation\n          FromPort: '22'\n          IpProtocol: tcp\n          ToPort: '22'\n`}</code></pre>\n    <p>{`Now that we see the power of this, let's have a look at CF Init.`}</p>\n    <h3 {...{\n      \"id\": \"cloudformation-init\"\n    }}>{`CloudFormation Init`}</h3>\n    <p>{`What is the problem with EC2 user data? Well, what happens if we have a large configuration? What if we want to evolve the state without terminating it? How do we make it readable? How do we know or signal that our EC2 user-data script actually completed successfully?`}</p>\n    <p>{`Amazon creating CF helper scripts.`}</p>\n    <p>{`There are 4 python scripts that come directly with Amazon Linux AMI or can be installed using `}<inlineCode parentName=\"p\">{`yum`}</inlineCode>{` on non-Amazon Linux. They are:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`cfn-init: Used to retrieve and interprety the resouce metadata, installing packages, creating files and starting services.`}</li>\n      <li parentName=\"ol\">{`cfn-signal: A simple wrapper to signal an AWS CloudFormation CreationPolicy or WaitCondition, enabling you to sync other resources in the stack with the application being ready. This can give us the yes/no if succssful.`}</li>\n      <li parentName=\"ol\">{`cfn-get-metadata: A wrapper script making it easy to retrieve either all metadata defined for a resource or path to a specific key or subtree of the resource metadata.`}</li>\n      <li parentName=\"ol\">{`cfn-hup: A daemon to check for updates to metadata and execute custom hooks when the changes are detected.`}</li>\n    </ol>\n    <p>{`The usual flow? cfn-init, then cfn-signal, then optionally cfn-hup.`}</p>\n    <h3 {...{\n      \"id\": \"awscloudformationinit\"\n    }}>{`AWS::CloudFormation::Init`}</h3>\n    <p>{`A config contains the following and is executed in that order:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Packages: install a list of packages on the Linux OS (mysql, wordpress, etc)`}</li>\n      <li parentName=\"ol\">{`Groups: define user groups`}</li>\n      <li parentName=\"ol\">{`Users: define users, and which group they belong to`}</li>\n      <li parentName=\"ol\">{`Sources: download an archive file and place it on the ec2 instance (tar, zip, bz2)`}</li>\n      <li parentName=\"ol\">{`Files: create files on the ec2 instance, using inline or can be pulled from a URL`}</li>\n      <li parentName=\"ol\">{`Commands: run a series of commands`}</li>\n      <li parentName=\"ol\">{`Services: launch a list of sysvinit`}</li>\n    </ol>\n    <p>{`You can also have multiple configs and you can run them sequentially etc.`}</p>\n    <h3 {...{\n      \"id\": \"packages\"\n    }}>{`Packages`}</h3>\n    <p>{`You can install packages from the following repositories:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`apt`}</li>\n      <li parentName=\"ul\">{`msi`}</li>\n      <li parentName=\"ul\">{`python`}</li>\n      <li parentName=\"ul\">{`rpm`}</li>\n      <li parentName=\"ul\">{`rubygems`}</li>\n      <li parentName=\"ul\">{`yum`}</li>\n    </ul>\n    <p>{`Packages are processed in the following order: rpm, yum/apt, and then rubygems and python.`}</p>\n    <p>{`You can also specify a version if you want.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    packages:\n      rpm:\n        epel: 'http://download....'\n      yum:\n        httpd: [] # means latest\n        php: []\n        wordpress: []\n      rubygems:\n        chef:\n          - '0.10.2' # get this version\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"groups-and-users\"\n    }}>{`Groups and Users`}</h3>\n    <p>{`If you want to have multiple users and groups (with optional gid) in your ec2 instance, you can add groups and users to CF and metadata.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    groups:\n      groupeOne: {}\n      groupTwo:\n        gid: '45' #gid = group ID\n    users:\n      myUser:\n        groups:\n          - 'groupOne'\n          - 'groupTwo'\n        uid: '50'\n        homeDir: '/tmp'\n`}</code></pre>\n    <p>{`In the larger example...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    groups:\n      apache: {} # assign any group ID\n    users:\n      'apache':\n        groups:\n          - 'apache' # user apache belongs to apache\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"sources\"\n    }}>{`Sources`}</h3>\n    <p>{`These are conveninence for a compressed archieve.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    # where to unpack and from where\n    sources:\n      '/home/ec2-user/aws-cli': 'https://github.com/aws/aws-cli/tarball/master'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"files\"\n    }}>{`Files`}</h3>\n    <p>{`Files can be the most used section. Almost all the full power. It can be a specific URL or written inline for what you are doing.`}</p>\n    <p>{`Base example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    # where to unpack and from where\n    files:\n      /tmp/setup.mysql:\n        content: !Sub |\n          CREATE DATABASE \\${DBName};\n          CREATE USER '\\${DBUsername}'@'localhost' IDENTIFIED BY '\\${DBPassword}';\n          GRANT ALL ON \\${DBName}.* TO '\\${DBUsername}'@'localhost';\n          FLUSH PRIVILEDGES;\n        mode: '000644'\n        owner: 'root'\n        group: 'root'\n`}</code></pre>\n    <p>{`Full example:`}</p>\n    <p>{`Note: !Sub is a function used for making substitution. ie where you see `}<inlineCode parentName=\"p\">{`\\${AWS::StackName}`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    # where to unpack and from where\n    files:\n      '/tmp/cwlogs/apacheaccess.conf':\n        content: !Sub |\n          [general]\n          state_file= /var/awslogs/agent-state\n          [/var/log/httpd/access_log]\n          file = /var/log/httpd/access_log\n          log_group_name = \\${AWS::StackName}\n          log_stream_name = {instance_id}/apache.log\n          datetime_format = %d/%b/%Y:%H:%M:%S\n        mode: '000400'\n        owner: apache\n        group: apache\n      '/var/www/html/index.php':\n        content: !Sub |\n          <?php\n          echo '<h1>AWS CloudFormation sample PHP application for \\${AWS::StackName}</h1>';\n          ?>\n        mode: '000644'\n        owner: apache\n        group: apache\n      '/etc/cfn/cfn-hup.conf':\n        content: !Sub |\n          [main]\n          stack=\\${AWS::StackId}\n          region=\\${AWS::Region}\n        mode: '000400'\n        owner: 'root'\n        group: 'root'\n      '/etc/cfn/hooks.d/cfn-auto-reloader.conf':\n        content: !Sub |\n          [cfn-auto-reloader-hook]\n          triggers=post.update\n          path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init\n          action=/opt/aws/bin/cfn-init -v --stack \\${AWS::StackName} --resource WebServerHost --region \\${AWS::Region}\n        mode: '000400'\n        owner: 'root'\n        group: 'root'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fnsub\"\n    }}>{`Fn::Sub`}</h3>\n    <p>{`(Or as !Sub) is used to substitute variables from a text. It's a very handy function that will allow you to fully customize your templates.`}</p>\n    <p>{`For example, you can combine !Sub with References or AWS Pseudo variables.`}</p>\n    <p>{`Must be in the form `}<inlineCode parentName=\"p\">{`\\${VarName}`}</inlineCode>{`.`}</p>\n    <p>{`Forms:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# You can do this\n!Sub\n  - String\n  - { Var1Name: Var1Value, Var2Name: Var2Value }\n\n# or (more complicated and rarely seen)\n!Sub String\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"commands\"\n    }}>{`Commands`}</h3>\n    <p>{`You can run commands one at a time in the `}<inlineCode parentName=\"p\">{`alphabetical order`}</inlineCode>{`.`}</p>\n    <p>{`You can set a directory from which that command is run, environment variables etc.`}</p>\n    <p>{`You can also provide a test to control whether the command is executed or not.`}</p>\n    <p>{`This should be a last resort. You can execute any of the scripts from the above files in this section.`}</p>\n    <p>{`Example: call the echo command only if the file doesn't exist`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`commands:\n  test:\n    command: 'echo \"$MAGIC\" > test.txt'\n    env:\n      MAGIC: 'I come from the environment!'\n    cwd: '~'\n    test: 'test ! -e ~/test.txt' # check file exists\n    ignoreErrors: 'false' # fail if is doesn't work\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"services\"\n    }}>{`Services`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`AWS::CloudFormation::Init:\n  config:\n    services:\n      sysvinit:\n        httpd:\n          enabled: 'true'\n          ensureRunning: 'true'\n        sendmail:\n          enabled: 'false'\n          ensureRunning: 'false'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"cfn-init-and-signal\"\n    }}>{`CFN Init and Signal`}</h3>\n    <p>{`First, we use `}<inlineCode parentName=\"p\">{`cfn-init`}</inlineCode>{` to launch the config.`}</p>\n    <p>{`Then we use `}<inlineCode parentName=\"p\">{`cfn-signal`}</inlineCode>{` to tell when the config is complete, which will let CF know that the resource creation has been successful.`}</p>\n    <p>{`This has to be used in conjuction with a `}<inlineCode parentName=\"p\">{`CreationPolicy`}</inlineCode>{`.`}</p>\n    <p>{`This example means waiting a max of 5 minutes for the instance to come online and be self configured. If we don't hear back by `}<inlineCode parentName=\"p\">{`cfn-signal`}</inlineCode>{` by the, CF will fail and rollback.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`CreationPolicy:\n  ResourceSignal:\n    Timeout: PT5M\n`}</code></pre>\n    <p>{`This is useful in case of a bad update.`}</p>\n    <h3 {...{\n      \"id\": \"cfn-hup\"\n    }}>{`cfn-hup`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Cfn-hup can be used to tell your EC2 instance to look for Metadata changes every 15 minutes and apply the metadata configuration again.`}</li>\n      <li parentName=\"ul\">{`It's very powerful but you really need to try it out to understand how it works.`}</li>\n    </ul>\n    <p>{`Example from the \"files\" declation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`'/etc/cfn/cfn-hup.conf':\n  content: !Sub |\n    [main]\n    stack=\\${AWS::StackId}\n    region=\\${AWS::Region}\n  mode: '000400'\n  owner: 'root'\n  group: 'root'\n'/etc/cfn/hooks.d/cfn-auto-reloader.conf':\n  content: !Sub |\n    [cfn-auto-reloader-hook]\n    triggers=post.update\n    path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init\n    action=/opt/aws/bin/cfn-init -v --stack \\${AWS::StackName} --resource WebServerHost --region \\${AWS::Region}\n  mode: '000400'\n  owner: 'root'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"cfn-init-hands-on\"\n    }}>{`CFN Init Hands-On`}</h3>\n    <p>{`After loading the CFN Init yaml file into CF, it will go through a series of different events.`}</p>\n    <p>{`You can under \"status reason\" if there is a success message sent back.`}</p>\n    <p>{`You need to practise your !Init skilles. It will be extremely handy for creating EC2 Instances or AutoScaling groups.`}</p>\n    <p>{`Remember logs for ec2-user data are in `}<inlineCode parentName=\"p\">{`/var/log/cloud-init-output.log`}</inlineCode>{` and logs for cfn-init are in `}<inlineCode parentName=\"p\">{`/var/log/cfn-init.log`}</inlineCode>{`, which is really helpful if commands don't complete like you want them to.`}</p>\n    <h2 {...{\n      \"id\": \"advanced-cf-concepts\"\n    }}>{`Advanced CF Concepts`}</h2>\n    <p>{`Review of current standing:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`You can check AWS labs templates from `}<inlineCode parentName=\"li\">{`https://github/com/awslabs/aws-cloudformation-templates`}</inlineCode>{` to see what you can understand/see good practise.`}</li>\n    </ul>\n    <p>{`The example with WordPress is what is shown in the course.`}</p>\n    <h3 {...{\n      \"id\": \"using-the-aws-cli\"\n    }}>{`Using the AWS CLI`}</h3>\n    <p>{`We can use the AWS CLI to create, update or delete CF templates.`}</p>\n    <p>{`Super conventient for when you start automating your deployments.`}</p>\n    <p>{`Once you've downloaded the AWS config, use `}<inlineCode parentName=\"p\">{`aws configure --profile <profile_name>`}</inlineCode>{` to configure a profile with the ID and Secret Access key.`}</p>\n    <p>{`To run a CF command, you can use something like the following `}<inlineCode parentName=\"p\">{`aws cloudformation create-stack --stack-name example-cli-stack --template-body file://0-sample-template.yaml --parameters file://0-parameters.json --profile cf-course --region us-east-1`}</inlineCode></p>\n    <p>{`We can use the `}<inlineCode parentName=\"p\">{`parameters.json`}</inlineCode>{` file to set ParameterKey and ParameterValue for all the keys and values we are looking to share.`}</p>\n    <p>{`After running the command, what you get back is the `}<inlineCode parentName=\"p\">{`StackId`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"using-troposphere-python-to-generate-cloudformation-templates\"\n    }}>{`Using Troposphere (Python) to generate CloudFormation templates`}</h3>\n    <p>{`Troposhere allows you to leverage Python write the templates.`}</p>\n    <p>{`This means you can start using types in your templates for safety.`}</p>\n    <p>{`You will also have valid CF and can dynamically generate CloudFormation.`}</p>\n    <p>{`This means you can also have very complex conditions.`}</p>\n    <p>{`The disadvantage is that the Python needs to generate the JSON for it to be.`}</p>\n    <h3 {...{\n      \"id\": \"deletionpolicy\"\n    }}>{`DeletionPolicy`}</h3>\n    <p>{`This policy can prevent resources from being deleted, or in some cases, back them up before the deletion. This will help prevent doing something really, really bad.`}</p>\n    <p>{`Deletion Policy can take up the following values:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Delete: AWS CloudFormation will delete the resource and all its content if applicable during stack deletion (does not apply to S3)`}</li>\n      <li parentName=\"ol\">{`Retain: AWS CloudFormation keeps the resource without deleting the resource or its contents when its stack is deleted. You can add this deletion policy to any resource type.`}</li>\n      <li parentName=\"ol\">{`Snapshot: For resources that support snapshots (AWS::EC2::Volume, AWS::ElasticCache::CacheCluster etc)`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`Resources:\n  myS3Bucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Retain\n`}</code></pre>\n    <p>{`In the above example, it will create the S3 Bucket, you will see the bucket created.`}</p>\n    <p>{`Now if we delete that stack and the deletion policy is retain, you will still have that bucket there.`}</p>\n    <h3 {...{\n      \"id\": \"custom-resources-with-aws-lambda\"\n    }}>{`Custom Resources with AWS Lambda`}</h3>\n    <p>{`Custom resources enable you to write custom provisioning logic in templates that AWS CloudFormation runs anytime you create, update (if you changed the custom resource) or delete stacks.`}</p>\n    <p>{`For example, you might want to include resources that aren't available as AWS CloudFormation resource types.`}</p>\n    <p>{`Check online for a walkthrough of custom resources.`}</p>\n    <h3 {...{\n      \"id\": \"best-practises-to-organize-your-cloudformation-templates\"\n    }}>{`Best practises to organize your CloudFormation templates`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`How to organise templates: you can have a layered architecture (horizontal layers) vs service oriented architecture (vertical layers).`}</li>\n      <li parentName=\"ol\">{`Use cross stack references eg. to reference a VPC or subnet.`}</li>\n      <li parentName=\"ol\">{`Make sure the template is environment agnostic to do dev / test / prod and across regions / accounts seemlessly.`}</li>\n      <li parentName=\"ol\">{`Never embed credentials (use parameters with NoEcho or KMS).`}</li>\n      <li parentName=\"ol\">{`Use specific parameters types and constraints.`}</li>\n      <li parentName=\"ol\">{`Use CFN Init (& latest version of the helper scripts)`}</li>\n      <li parentName=\"ol\">{`Validate templates`}</li>\n      <li parentName=\"ol\">{`Don't do anything manual on the elements of the stack - that can cause a state mismatch.`}</li>\n      <li parentName=\"ol\">{`Verify changes with changesets (and avoid disasters).`}</li>\n      <li parentName=\"ol\">{`Use stack policies to prevent critical components from being deleted after create (such as your most valuable RDS database).`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"cost-estimate-for-templates\"\n    }}>{`Cost estimate for templates`}</h3>\n    <p>{`You can estimate the cost of a stack very easily.`}</p>\n    <p>{`For this, just upload the stack onto the AWS console, enter the params and click \"cost\".`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}