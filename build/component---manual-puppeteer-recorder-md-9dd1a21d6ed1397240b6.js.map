{"version":3,"sources":["webpack:///../manual/Puppeteer/Recorder.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,8MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,uGACA,iBAAQ,CACN,GAAM,WADR,WAGA,8FACA,iBAAQ,CACN,GAAM,SADR,SAGA,gCAAe,0BAAYC,WAAW,KAAvB,WAAf,gEAAmI,0BAAYA,WAAW,KAAvB,UAAnI,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,qkBA0BL,iBAAQ,CACN,GAAM,wBADR,wBAGA,qEAAoD,0BAAYA,WAAW,KAAvB,UAApD,cACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,qCAGL,2H,qMAKJJ,EAAWK,gBAAiB","file":"component---manual-puppeteer-recorder-md-9dd1a21d6ed1397240b6.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"puppeteer-recorder\"\n    }}>{`Puppeteer Recorder`}</h1>\n    <p>{`Use this to convert a db.json events file into someting usable with puppeteer.`}</p>\n    <h2 {...{\n      \"id\": \"install\"\n    }}>{`Install`}</h2>\n    <p>{`Currently this is a lib file that needs to be installed using kratos.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`Emitter`}</inlineCode>{` common JS class to handle this. Ensure you sub to the event `}<inlineCode parentName=\"p\">{`action`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Example of emission with type inferred\nhandlePrimaryClick = (e) => {\n    Emitter.emit('action', {\n        event: 'ComponentALLandingOne.handlePrimaryClick',\n        e: e.target\n    });\n\n    const { router } = this.props;\n    router.push('/testTwo');\n};\n\n// Example of emission with type manually specified\nhandleLink = (e) => {\n    e.preventDefault();\n    Emitter.emit('action', {\n        event: 'ComponentALLandingOne.handleLink',\n        type: 'link',\n        e: e.target\n    });\n\n    const { router } = this.props;\n    router.push('/testTwo');\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"generating-the-tests\"\n    }}>{`Generating the tests`}</h2>\n    <p>{`The recorder relies on JSON DB and using the `}<inlineCode parentName=\"p\">{`events`}</inlineCode>{` endpoint.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# usage\nnode path/to/recorder\n`}</code></pre>\n    <p>{`The console log output for this guy can then be transferred to a test file to use with Puppeteer.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}