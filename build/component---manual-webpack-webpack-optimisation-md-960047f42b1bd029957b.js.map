{"version":3,"sources":["webpack:///../manual/Webpack/Webpack-Optimisation.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,wNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,wBADR,wBAGA,iBAAQ,CACN,GAAM,oBADR,oBAGA,kFACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,kZA6BL,iBAAQ,CACN,GAAM,aADR,aAGA,8GACA,iBAAQ,CACN,GAAM,aADR,aAGA,oEACA,sBACE,kBAAIA,WAAW,MAAf,mCAAwD,0BAAYA,WAAW,MAAvB,mBAAxD,KAA0H,0BAAYA,WAAW,MAAvB,sBAA1H,KAA+L,0BAAYA,WAAW,MAAvB,qBAA/L,KAAmQ,0BAAYA,WAAW,MAAvB,4BAAnQ,sDACA,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,2BAA5B,kCAAmI,0BAAYA,WAAW,MAAvB,YAAnI,OAAgM,0BAAYA,WAAW,MAAvB,aAAhM,MACA,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,mCAA5B,yEAEF,iBAAQ,CACN,GAAM,QADR,QAGA,gCAAe,0BAAYA,WAAW,KAAvB,aAAf,kLACA,iBAAQ,CACN,GAAM,mBADR,oBAGA,4HACA,sBACE,kBAAIA,WAAW,MAAf,0BACA,kBAAIA,WAAW,MAAf,WAAgC,0BAAYA,WAAW,MAAvB,qBAAhC,+BACA,kBAAIA,WAAW,MAAf,WAAgC,0BAAYA,WAAW,MAAvB,qBAAhC,OAAsG,0BAAYA,WAAW,MAAvB,SAAtG,oCACA,kBAAIA,WAAW,MAAf,sBACA,kBAAIA,WAAW,MAAf,sEAEF,iBAAQ,CACN,GAAM,eADR,eAGA,4BAAW,0BAAYA,WAAW,KAAvB,iBAAX,+DACA,8BACE,iBAAGA,WAAW,cAAd,kLAEF,iBAAQ,CACN,GAAM,oBADR,oBAGA,2DAA0C,0BAAYA,WAAW,KAAvB,gBAA1C,+CAAkJ,0BAAYA,WAAW,KAAvB,gBAAlJ,KACA,iBAAQ,CACN,GAAM,yBADR,0BAGA,kFACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,gEACA,wGAAuF,0BAAYA,WAAW,KAAvB,qBAAvF,KACA,iBAAQ,CACN,GAAM,qBADR,qBAGA,kIACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,uBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,2BACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,4BAEtB,iBAAQ,CACN,GAAM,WADR,WAGA,wGACA,sBACE,kBAAIA,WAAW,MAAf,iFACA,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,oBAA5B,0FACA,kBAAIA,WAAW,MAAf,SAA8B,0BAAYA,WAAW,MAAvB,mBAA9B,uDACc,0BAAYA,WAAW,MAAvB,gCADd,yBAGF,mH,+MAKJJ,EAAWK,gBAAiB","file":"component---manual-webpack-webpack-optimisation-md-960047f42b1bd029957b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"webpack-optimisation\"\n    }}>{`Webpack Optimisation`}</h1>\n    <h2 {...{\n      \"id\": \"loader-targeting\"\n    }}>{`Loader targeting`}</h2>\n    <p>{`Apply loaders to the minimal number of modules necessary.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// instead of...\nmodule.exports = {\n  //...\n  module: {\n    rules: [\n      {\n        test: /\\\\.js$/,\n        loader: 'babel-loader'\n      }\n    ]\n  }\n};\n\n// try using the include target\nmodule.exports = {\n  //...\n  module: {\n    rules: [\n      {\n        test: /\\\\.js$/,\n        include: path.resolve(__dirname, 'src'),\n        loader: 'babel-loader'\n      }\n    ]\n  }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"bootstrap\"\n    }}>{`Bootstrap`}</h2>\n    <p>{`Each additional loader/plugin has a bootup time. Try to use as few tools as possible.`}</p>\n    <h2 {...{\n      \"id\": \"resolving\"\n    }}>{`Resolving`}</h2>\n    <p>{`The following can increase resolving speed:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Minimize the number of items in `}<inlineCode parentName=\"li\">{`resolve.modules`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`resolve.extensions`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`resolve.mainFiles`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`resolve.descriptionFiles`}</inlineCode>{`, as they increase the number of filesystem calls.`}</li>\n      <li parentName=\"ul\">{`Set `}<inlineCode parentName=\"li\">{`resolve.symlinks: false`}</inlineCode>{` if you don't use symlinks (eg `}<inlineCode parentName=\"li\">{`npm link`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`yarn link`}</inlineCode>{`).`}</li>\n      <li parentName=\"ul\">{`Set `}<inlineCode parentName=\"li\">{`resolve.cacheWithContext: false`}</inlineCode>{` if you use custom resolving plugins, that are not context specific.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"dlls\"\n    }}>{`Dlls`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`DllPlugin`}</inlineCode>{` to move code that is changes less frequently into a separate compilation. This will improve app compilation speed, although it does increase complexity of the build process.`}</p>\n    <h2 {...{\n      \"id\": \"smaller--faster\"\n    }}>{`Smaller = Faster`}</h2>\n    <p>{`Decrease the total size of the compilation to increase build performance. Try to keep chunks small.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Use fewer/smaller libs`}</li>\n      <li parentName=\"ul\">{`Use the `}<inlineCode parentName=\"li\">{`SplitChunksPlugin`}</inlineCode>{` in Multi-Page Applications`}</li>\n      <li parentName=\"ul\">{`Use the `}<inlineCode parentName=\"li\">{`SplitChunksPlugin`}</inlineCode>{` in `}<inlineCode parentName=\"li\">{`async`}</inlineCode>{` mode in Multi-Page Applications`}</li>\n      <li parentName=\"ul\">{`Remove unused code`}</li>\n      <li parentName=\"ul\">{`Only compile the part of the code you are currently developing on`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"worker-pool\"\n    }}>{`Worker Pool`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`thread-loader`}</inlineCode>{` can be used to offload expensive loaders to a worker pool.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Don't use too many loaders. There is a boot overhead for the Node.js runtime and the loader. Minimize the module transfers between worker and main process. IPC is expensive.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"persistent-cache\"\n    }}>{`Persistent Cache`}</h2>\n    <p>{`Enable persistent caching with the `}<inlineCode parentName=\"p\">{`cache-loader`}</inlineCode>{`. Clear cache directory on \"postinstall\" in `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"custom-pluginsloaders\"\n    }}>{`Custom plugins/loaders`}</h2>\n    <p>{`Profile them to not introduce a performance problem here.`}</p>\n    <h2 {...{\n      \"id\": \"incremental-builds\"\n    }}>{`Incremental Builds`}</h2>\n    <p>{`Use watch mode. Specifically Webpack's.`}</p>\n    <p>{`If CPU overloads due to poling mode, you can increase the polling interval with `}<inlineCode parentName=\"p\">{`watchOptions.poll`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"compile-in-memory\"\n    }}>{`Compile in Memory`}</h2>\n    <p>{`Following utils improve performance by compilin and serving assets in memory rather than writing to disk:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`webpack-dev-server`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`webpack-hot-middleware`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`webpack-dev-middleware`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"devtool\"\n    }}>{`Devtool`}</h2>\n    <p>{`Be aware of the performance differences between the different devtool settings.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`\"eval\" has the best performance, but doesn't assist you for transpiled code.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`cheap-source-map`}</inlineCode>{` variants are more performant if you can live with the slightly worse mapping quality.`}</li>\n      <li parentName=\"ul\">{`Use a `}<inlineCode parentName=\"li\">{`eval-source-map`}</inlineCode>{` variant for incremental builds.\n=> In most cases, `}<inlineCode parentName=\"li\">{`cheap-module-eval-source-map`}</inlineCode>{` is the best option.`}</li>\n    </ul>\n    <p>{`[TO FINISH => up to https://webpack.js.org/guides/build-performance/#minimal-entry-chunk]`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}