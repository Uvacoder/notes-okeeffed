{"version":3,"sources":["webpack:///../manual/JavaScript/ES6-Guide.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-java-script-es-6-guide-md-277fcf854d50cdaeee56.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"introducing-es2015\"\n    }}>{`Introducing ES2015`}</h1>\n    <h2 {...{\n      \"id\": \"es6-1-es2015-basics\"\n    }}>{`ES6-1: ES2015 Basics`}</h2>\n    <p>{`6th Edition to ECMA Script`}</p>\n    <h3 {...{\n      \"id\": \"es6-2-getting-started-with-es2015\"\n    }}>{`ES6-2: Getting Started with ES2015`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`biggest change up to JS since its inception`}</li>\n      <li parentName=\"ul\">{`JS built in 10 days`}</li>\n      <li parentName=\"ul\">{`Microsoft used Jscript`}</li>\n      <li parentName=\"ul\">{`ECMAScript and JavaScript are the same (ECMA named 1997)`}</li>\n      <li parentName=\"ul\">{`ECMAScript 5 (2009)`}</li>\n      <li parentName=\"ul\">{`Most browsers are using the latest`}</li>\n      <li parentName=\"ul\">{`Babel can be used to compile for those using older browsers`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Let and Const`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`so far, we need to be on top of scope`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar hello = 'hello'\n\n// ecma2015\n\nA block can be either a loop, if statement or function\n\n'use strict'\n\n(function initLoop() {\n    function doLoop(x) {\n        console.log('loop: ', x);\n    }\n\n    for (var i=0; i < 10; i++) {\n        doLoop(i + 1);\n    }\n})\n`}</code></pre>\n    <p>{`...what can go wrong? Dirty Read`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict'\n\n(function initLoop() {\n    function doLoop(x) {\n        i=3;\n        console.log('loop: ', x);\n    }\n\n    for (var i=0; i < 10; i++) {\n        doLoop(i + 1);\n    }\n})\n\nWe can fix this with the let keyword\n\n'use strict'\n\n(function initLoop() {\n    function doLoop(x) {\n        // i=3; -> this won't be allowed\n        console.log('loop: ', x);\n    }\n\n    for (let i=0; i < 10; i++) {\n        doLoop(i + 1);\n    }\n})\n`}</code></pre>\n    <p><strong parentName=\"p\">{`this will throw an error at us!`}</strong></p>\n    <h3 {...{\n      \"id\": \"es6-3-duplicate-values\"\n    }}>{`ES6-3: Duplicate values`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar student = { name: 'Ken' };\nvar student = { name: 'James' };\n\nconsole.log(student);\n\n// student become James\n\n'use strict';\n\nconst student = { name: 'Ken' };\nvar student = { name: 'James' };\n\nconsole.log(student);\n\n// we will now get an exception (happens for let or const)\n\n- you can have different const variables of the same name for different constants\n\n**not allowed**\n\n... {\n    const student = 'test';\n    ... {\n        student = 'test'\n    }\n}\n\n**allowed**\n\n... {\n    let student = 'test';\n    ... {\n        student = 'test'\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{` Use let when you need to reassign, use const when you do not want the value to change. `}</strong></p>\n    <h3 {...{\n      \"id\": \"es6-4-template-strings\"\n    }}>{`ES6-4: Template Strings`}</h3>\n    <p><strong parentName=\"p\">{` ES5 Strings `}</strong></p>\n    <p>{`let str = 'My favourite name is';`}</p>\n    <p>{`console.log(str, 5);`}</p>\n    <p><strong parentName=\"p\">{` ES2015 Strings `}</strong></p>\n    <p>{`// interpolation`}</p>\n    <p>{`const student = { name: 'James', followerCount: 34 }`}</p>\n    <p>{`\\${student.name}`}</p>\n    <p><inlineCode parentName=\"p\">{`<this stuff is neatly formatted>`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"es6-5-string-search-methods\"\n    }}>{`ES6-5: String search methods`}</h3>\n    <p>{`new functions:`}</p>\n    <p>{`startsWith\nendsWith\nincludes`}</p>\n    <p>{`console.log(strToSearch.startsWith('example-at-start'));\nconsole.log(strToSearch.endsWith('example-at-end'));\nconsole.log(strToSearch.includes('example-in-the-middle'));`}</p>\n    <p><strong parentName=\"p\">{` all take an optional parameter `}</strong></p>\n    <p>{`startsWith('example', 5); //start search from 5th index\nendsWith('example', 21); //searches the first 21 characters`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"es6-6-the-cooler-parts-of-es2015\"\n    }}>{`ES6-6: The Cooler Parts of ES2015`}</h2>\n    <h3 {...{\n      \"id\": \"es6-7-arrow-functions\"\n    }}>{`ES6-7: Arrow Functions`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Bound to its parent scope`}</li>\n    </ul>\n    <p>{`New syntax for writing functions`}</p>\n    <ul>\n      <li parentName=\"ul\">{`referred to as Lamda functions in other languages`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{` ES5 `}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar Person = function (data) {\n  for (var key in data) {\n    this[key] = data[key];  \n  }\n  this.getKeys = function () {\n    return Object.keys(this);\n  }\n}\n\nvar Alena = new Person({ name: 'Alena', role: 'Teacher' });\n\nconsole.log('Alena\\\\'s Keys:', Alena.getKeys()); // 'this' refers to 'Alena'\n\nvar getKeys = Alena.getKeys;\n\nconsole.log(getKeys()); // 'this' refers to the node process\n\n// throws error get getKeys()\n`}</code></pre>\n    <p><strong parentName=\"p\">{`ES2015`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar Person = function (data) {\n  for (var key in data) {\n    this[key] = data[key];  \n  }\n  this.getKeys = () => {\n    return Object.keys(this);\n  }\n}\n\nvar Alena = new Person({ name: 'Alena', role: 'Teacher' });\n\nconsole.log('Alena\\\\'s Keys:', Alena.getKeys()); // 'this' refers to 'Alena'\n\nvar getKeys = Alena.getKeys;\n\nconsole.log(getKeys()); // 'this' refers to the node process\n\n// this fixes it!\n`}</code></pre>\n    <p>{`The lamda function binds the function to the instance of the person no matter where it was called`}</p>\n    <p><strong parentName=\"p\">{` Promises `}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar Teacher = function (data) {\n  this.name = data.name;\n  this.greet = function (studentCnt) {\n    let promise = new Promise(function (resolve, reject) {\n      if (studentCnt === 0) {\n        reject('Zero students in class');\n      } else {\n        resolve(\\`Hello to \\${studentCnt} of my favorite students!\\`);\n      }\n    });\n    return promise;\n  }\n}\n\nvar Classroom = function (data) {\n  this.subject = data.name;\n  this.teacher = data.teacher;\n  this.students = [];\n  this.addStudent = function (data) {\n    this.students.push(data);\n    this.greet();\n  }\n  this.greet = () => {\n    this.teacher.greet(this.students.length).then(\n      (function (classroom) {\n        return function (greeting) {\n          console.log(\\`\\${classroom.teacher.name} says: \\`, greeting);\n        }\n      })(this),\n      function (err) {\n        console.log(err);\n      })\n  }\n}\n\nvar myTeacher = new Teacher({ name: 'James' });\nvar myClassroom = new Classroom({ name: 'The Future of JavaScript', teacher: myTeacher });\n\nmyClassroom.addStudent({ name: 'Dave' });\n`}</code></pre>\n    <p><strong parentName=\"p\">{`ES 2015 Promises`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar Teacher = function (data) {\n  this.name = data.name;\n  this.greet = function (studentCnt) {\n    let promise = new Promise(function (resolve, reject) {\n      if (studentCnt === 0) {\n        reject('Zero students in class');\n      } else {\n        resolve(\\`Hello to \\${studentCnt} of my favorite students!\\`);\n      }\n    });\n    return promise;\n  }\n}\n\nvar Classroom = function (data) {\n  this.subject = data.name;\n  this.teacher = data.teacher;\n  this.students = [];\n  this.addStudent = function (data) {\n    this.students.push(data);\n    this.greet();\n  }\n  this.greet = () => {\n    this.teacher.greet(this.students.length).then(\n      greeting => console.log(\\`\\${this.classroom.teacher.name} says: \\`, greeting);\n      error => console.log(err);\n  }\n}\n\nvar myTeacher = new Teacher({ name: 'James' });\nvar myClassroom = new Classroom({ name: 'The Future of JavaScript', teacher: myTeacher });\n\nmyClassroom.addStudent({ name: 'Dave' });\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-8-default-parameters\"\n    }}>{`ES6-8: Default Parameters`}</h3>\n    <p>{`Set default parameters for a function -> similar to other languages`}</p>\n    <p><strong parentName=\"p\">{`ES5`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict'\n\nfunction greet(name, timeOfDay) {\n    name = name || 'Guil';\n    timeofDay = timeOfDay || 'Day';\n    ...\n}\n\ngreet();\n\n**ES 2015**\n\n'use strict'\n\nfunction greet(name = 'Guil', timeOfDay = 'Day') {\n    ...\n}\n\ngreet(undefined, 'Afternoon');  // defaults are optional, need to undefine\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-9-rest-parameters-and-spread-operator\"\n    }}>{`ES6-9: Rest Parameters and Spread Operator`}</h3>\n    <p><strong parentName=\"p\">{`How to use the rest parameters`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`rest must be the last parameter`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function myFunction(name, ...params) {\n    console.log(name, params);\n}\n\nmyFunction('Andrew', 1, 2, 3);\n\n// output Andrew [1, 2, 3]\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Spread parameters`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nconst originalFlavors = ['Chocolate', 'Vanilla'];\n\nconst newFlavors = ['Strawberry', 'Mint Chocolate Chip'];\n\nconst inventory = ['Rocky Road', ...originalFlavors, 'Neopolitan', ...newFlavors];\n\nconsole.log(inventory);\n\n// spitting an array and them using them as arguments using the spread operator\n\nfunction myFunction(name, iceCreamFlavor) {\n    console.log('\\${name} really likes \\${iceCreamFlavor} ice cream.')\n}\n\nlet args = ['Gabe', 'Vanilla'];\n\nmyFunction(...args);    // sends as separate arguments\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-10-destructuring\"\n    }}>{`ES6-10: Destructuring`}</h3>\n    <p>{`Relatively simple concept`}</p>\n    <p>{`Let's you extract values from arrays or objects`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nlet toybox = { item1: 'car', item2: 'ball', item3: 'frisbee' };\n\nlet { item3: disc} = toybox;\n\nconsole.log(disc);\n\n// logs item3 value\n\nlet widgets = ['wid1','wid2','wid3','wid4','wid5'];\n\nlet [a,b,c, ...d] = widgets;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"es6-11-objects-and-new-collection-types\"\n    }}>{`ES6-11: Objects and New Collection Types`}</h2>\n    <h3 {...{\n      \"id\": \"es6-12-object-property-shorthand\"\n    }}>{`ES6-12: Object Property Shorthand`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nfunction submit(name, comments, rating = 5) {\n    let data = { name, comments, rating };\n\n    for (let key in data) {\n        console.log(key + ':', data[key]);\n    }\n\n    // ... do ajax request\n}\n\nsubmit('English', 'Great course!');\n\n// without a default name, the key because the parameter for the object\n// works with all forms\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-13-forof\"\n    }}>{`ES6-13: for...of`}</h3>\n    <p>{`For iterating over a data set`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// previous for (let ... )\n// ES5 gave us for each\n\nlet myNumbers = [1,2,3,4,5,6];\n\nfor (let number of myNumbers) {\n    ...\n    if (example) {\n        break; // you can break!\n    }\n}\n\n// still use for...in for iterating over regular objects\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-14-set\"\n    }}>{`ES6-14: Set`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let classroom = new Set(); // unique collection of values\n\nlet stevenJ = { name: 'Steven', age: 22 },\n    sarah = { name: 'Sarah', age: 23 },\n    stevenS = { name: 'Steve', age: 22 }\n\nclassroom.add(stevenJ);\nclassroom.add(sarah);\nclassroom.add(stevenS);\n\nif (classroom.has(stevenJ)) console.log('stevenJ is in the classroom'); //true\nif (classroom.has(sarah)) console.log('sarah is in the classroom'); //true\nif (classroom.has(stevenS)) console.log('sarah is in the classroom'); //true\n\nBUT IF stevenS = stevenJ\n\nlet stevenJ = { name: 'Steven', age: 22 },\n    sarah = { name: 'Sarah', age: 23 },\n    stevenS = stevenJ;\n\nclassroom.add(stevenJ);\nclassroom.add(sarah);\nclassroom.add(stevenS);\n\nif (classroom.has(stevenJ)) console.log('stevenJ is in the classroom'); //true\nif (classroom.has(sarah)) console.log('sarah is in the classroom'); //true\nif (classroom.has(stevenS)) console.log('sarah is in the classroom'); //true\n\nconsole.log(classroom.size()); //3\n\nclassroom.delete(stevenJ)\n\nconsole.log(classroom.size()); //2\n\n// Create array of students from the classroom set\n\nlet arrayOfStrudents = Array.from(classroom);\nconsole.log(arrayOfStudents);\n\n// Create set from set\n\nlet alumni = new Set(arrayOfStudents);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-15-map\"\n    }}>{`ES6-15: Map`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict'\n\nlet classroom = new Map();\n\nlet stevenJ = { name: 'Steven', age: 22 },\n    sarah = { name: 'Sarah', age: 23 },\n    stevenS = { name: 'Steven', age: 22 };\n\nclassroom.set('stevenJ', stevenJ);\nclassroom.set('sarah',sarah);\nclassroom.set('stevenS', stevenS);\n\nconsole.log(classroom.size);\n\nif (classroom.has('stevenJ')) console.log('stevenJ is in the classroom');\nif (classroom.has('sarah')) console.log('sarah is in the classroom');\nif (classroom.has('stevenS')) console.log('stevenS is in the classroom');\n\nconsole.log('sarah:', classroom.get('sarah'));\n\nclassroom.delete('sarah');\nclassroom.clear();        //deletes all\n\nfor (let student of classroom) {\n  console.log('\\${student[0]} : \\${student[1].name} is \\${student[1].age} years old');\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"es6-16-classes\"\n    }}>{`ES6-16: Classes`}</h2>\n    <h3 {...{\n      \"id\": \"es6-17-structure-of-a-class\"\n    }}>{`ES6-17: Structure of a Class`}</h3>\n    <p>{`A class is a blueprint for those that share similar properties or methods`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// old way\n\nlet Student = function(data) {\n  this.name = data.name;\n  this.age = data.age\n}\n\n// new way\n\nclass Student {\n  constructor({ name, age, interestLevel = 5 } = {}) {\n    this.name = name;\n    this.age = age;\n    this.interestLevel = interestLevel;\n    this.grades = new Map();\n  }\n}\n\nlet sarah = new Student('Sarah', 11);\n\nconsole.log(Array.from(sarah.grades));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"es6-18-subclasses\"\n    }}>{`ES6-18: Subclasses`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`classes can inherit from other classes`}</li>\n      <li parentName=\"ul\">{`var hoisting`}</li>\n      <li parentName=\"ul\">{`destructuring is one way to set default values for class properties`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`bla = 2\nvar bla;\n// ...\n\n// is implicitly understood as:\n\nvar bla;\nbla = 2;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Person {\n  dance() {\n    const dances = [\n      'waltz',\n      'tango',\n      'mambo'\n    ];\n\n    console.log(\\${this.name} is doing the \\${dances[Math.floor(Math.random()*dances.length)]}!);\n  }\n  constructor({ name, age, eyeColor = 'brown' } = {}) {\n    this.name = name;\n    this.age = age;\n    this.eyeColor = eyeColor;\n  }\n}\n\nclass Student extends Person {\n\n  dance(traditional) {\n    if (traditional) {\n      super.dance();\n      return;\n    }\n\n    const dances = [\n      'lyrical',\n      'tap',\n      'jazz'\n    ];\n\n    console.log(\\${this.name} is doing the \\${dances[Math.floor(Math.random()*dances.length)]}!);\n  }\n\n  constructor({ name, age, interestLevel = 5 } = {} ) {\n    super({ name, age });\n    this.name = name;\n    this.age = age;\n    this.interestLevel = interestLevel;\n    this.grades = new Map;\n  }\n}\n\nlet stevenJ = new Student({name: 'Steven', age: 22, interestLevel: 3 });\nstevenJ.dance();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"es6-19-static-methods\"\n    }}>{`ES6-19: Static Methods`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Bird {\n  static changeColor(color) {\n    this.color = color;\n  }\n  constructor({ color = 'red' } = {}) {\n    this.color = color;\n  }\n}\n\nlet redBird = new Bird;\nconsole.log(redBird.color);\nredBird.changeColor('blue');\nconsole.log(redBird.color); // would call an error!\n\n// what we could do\n\nBird.changeColor.call(redBird, 'blue');\nconsole.log(redBird.color);\n\n/* the other option is to change the changeColor function to accept (bird, color) and then change this.color to bird.color\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"es6-20-getter-and-setter-methods-in-a-class\"\n    }}>{`ES6-20: Getter and Setter methods in a class`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Bird {\n  changeColor(color) {\n    this.color = color;\n  }\n\n  set color(color) {\n    this.color = color;\n  }\n\n  get color() {\n    return this.color;\n  }\n\n  constructor({ color = 'red' } = {}) {\n    this.color = color;\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}