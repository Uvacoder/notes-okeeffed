(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{ewE2:function(n,e,t){"use strict";t.r(e),t.d(e,"_frontmatter",(function(){return d})),t.d(e,"default",(function(){return l}));t("1c7q"),t("abGl"),t("gZHo"),t("Fdmb"),t("Ir+3"),t("2mQt"),t("mXGw");var a=t("/FXl"),r=t("TjRS");t("aD51");function i(){return(i=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(n[a]=t[a])}return n}).apply(this,arguments)}var d={};void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/Java/Java-Basic-Tree.md"}});var o={_frontmatter:d},s=r.a;function l(n){var e=n.components,t=function(n,e){if(null==n)return{};var t,a,r={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,["components"]);return Object(a.b)(s,i({},o,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"java---basic-tree-data-structure"},"Java - Basic Tree Data Structure"),Object(a.b)("p",null,"This is a basic implementation. The ",Object(a.b)("inlineCode",{parentName:"p"},"bfs")," and ",Object(a.b)("inlineCode",{parentName:"p"},"dfs")," methods each return a ",Object(a.b)("inlineCode",{parentName:"p"},"List<Integer>")," of the data stored in each ",Object(a.b)("inlineCode",{parentName:"p"},"Node")," to make a comparison in the test."),Object(a.b)("h2",{id:"answer"},"Answer"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-java"}),'// src/main/java/Tree.java\nimport main.java.Node;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Tree {\n    public Node root;\n\n    public Tree() {\n        this.root = null;\n    }\n\n    public Tree(Node root) {\n        this.root = root;\n    }\n\n    public List<Integer> bfs() {\n        if (this.root == null) {\n            throw new NullPointerException("this.root is null");\n        }\n\n        List<Node> n = new ArrayList<>();\n        n.add(this.root);\n\n        List<Integer> res = new ArrayList<>();\n\n        while (n.size() > 0) {\n            Node child = n.remove(0);\n            if (child.children != null) {\n                n.addAll(child.children);\n            }\n            res.add(child.data);\n        }\n\n        return res;\n    }\n\n    public List<Integer> dfs() {\n        if (this.root == null) {\n            throw new NullPointerException("No root");\n        }\n\n        List<Node> n = new ArrayList<Node>();\n        n.add(this.root);\n\n        List<Integer> res = new ArrayList<Integer>();\n\n        while (n.size() > 0) {\n            Node child = n.remove(0);\n\n            if (child.children != null) {\n                n.addAll(0, child.children);\n            }\n            res.add(child.data);\n        }\n\n        return res;\n    }\n}\n')),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-java"}),"// src/main/java/Node.java\npackage main.java;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Node {\n    public Integer data;\n    public List<Node> children;\n\n    public Node() {\n        this.data = null;\n        this.children = new ArrayList<>();\n    }\n\n    public Node(Integer data) {\n        this.data = data;\n        this.children = new ArrayList<>();\n    }\n\n    public Node(Integer data, List<Node> children) {\n        this.data = data;\n        this.children = new ArrayList<>();\n        this.children.addAll(children);\n    }\n}\n")),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-java"}),"// test/java/TreeTest.java\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport main.java.Node;\n\npublic class TreeTest {\n    @Test\n    public void testBFS() {\n        Node n1 = new Node(1);\n        Node n2 = new Node(2);\n        Node n3 = new Node(3);\n        Node n4 = new Node(4);\n        Node n5 = new Node(5);\n\n        List<Integer> expected = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            expected.add(i + 1);\n        }\n\n        Tree t = new Tree(n1);\n        n1.children.add(n2);\n        n1.children.add(n3);\n        n2.children.add(n4);\n        n3.children.add(n5);\n\n        List<Integer> res = t.bfs();\n\n        assertEquals(expected, res);\n    }\n\n    @Test\n    public void testDFS() {\n        Node n1 = new Node(1);\n        Node n2 = new Node(2);\n        Node n3 = new Node(3);\n        Node n4 = new Node(4);\n        Node n5 = new Node(5);\n\n        List<Integer> expected = new ArrayList<>();\n        expected.add(1);\n        expected.add(2);\n        expected.add(4);\n        expected.add(3);\n        expected.add(5);\n\n        Tree t = new Tree(n1);\n        n1.children.add(n2);\n        n1.children.add(n3);\n        n2.children.add(n4);\n        n3.children.add(n5);\n\n        List<Integer> res = t.dfs();\n\n        assertEquals(expected, res);\n    }\n}\n")))}l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/Java/Java-Basic-Tree.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-java-java-basic-tree-md-34617ffa4e7afa54fe38.js.map