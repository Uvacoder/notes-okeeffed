{"version":3,"sources":["webpack:///../manual/Design-Patterns/Builder-Pattern.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,2NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,4BAAW,0BAAYC,WAAW,KAAvB,mBAAX,8FACA,wIACA,kEACA,sBACE,kBAAIA,WAAW,MAAf,KAA0B,0BAAYA,WAAW,MAAvB,WAA1B,6FAA4K,0BAAYA,WAAW,MAAvB,SAA5K,kEAAiS,0BAAYA,WAAW,MAAvB,gBAAjS,KACA,kBAAIA,WAAW,MAAf,KAA0B,0BAAYA,WAAW,MAAvB,WAA1B,uDAAsI,0BAAYA,WAAW,MAAvB,WAAtI,2BAAsN,0BAAYA,WAAW,MAAvB,SAAtN,kDAA2T,0BAAYA,WAAW,MAAvB,gBAA3T,KACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,qBAApB,0MAA6R,0BAAYA,WAAW,MAAvB,oBAA7R,cAAyW,0BAAYA,WAAW,MAAvB,KAAzW,wKAAgkB,0BAAYA,WAAW,MAAvB,0BAAhkB,QAA4oB,0BAAYA,WAAW,MAAvB,6BAA5oB,qBACA,kBAAIA,WAAW,MAAf,KAA0B,0BAAYA,WAAW,MAAvB,YAA1B,yCAAyH,0BAAYA,WAAW,MAAvB,WAAzH,8CAA4N,0BAAYA,WAAW,MAAvB,gBAA5N,gCAAsT,0BAAYA,WAAW,MAAvB,gBAAtT,6EAEF,iBAAQ,CACN,GAAM,oCADR,oCAGA,+CAA8B,0BAAYA,WAAW,KAAvB,gBAA9B,oIAA2N,0BAAYA,WAAW,KAAvB,gBAA3N,KACA,4BAAW,0BAAYA,WAAW,KAAvB,gBAAX,oHAAwL,0BAAYA,WAAW,KAAvB,YAAxL,QAAqP,0BAAYA,WAAW,KAAvB,qBAArP,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,i9BA0CL,iBAAQ,CACN,GAAM,gCADR,gCAGA,oDAAmC,0BAAYA,WAAW,KAAvB,gBAAnC,yIACA,iMACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+vBA0BL,iBAAQ,CACN,GAAM,iCADR,iCAGA,0FAAyE,0BAAYA,WAAW,KAAvB,qBAAzE,gCAAuK,0BAAYA,WAAW,KAAvB,oBAAvK,+CAAmR,0BAAYA,WAAW,KAAvB,gBAAnR,KACA,wLAAuK,0BAAYA,WAAW,KAAvB,gBAAvK,iDAAiR,0BAAYA,WAAW,KAAvB,UAAjR,8HAAkc,0BAAYA,WAAW,KAAvB,oBAAlc,cACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iiBA8BL,iBAAQ,CACN,GAAM,wBADR,wBAGA,6JAA4I,0BAAYA,WAAW,KAAvB,gBAA5I,8CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0kBAyBL,iBAAQ,CACN,GAAM,2BADR,2BAGA,6IAA4H,0BAAYA,WAAW,KAAvB,gBAA5H,uDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,uiBAkBL,6EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+H,kNASTJ,EAAWK,gBAAiB","file":"component---manual-design-patterns-builder-pattern-md-c24e315393068ba8ac31.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"builder-pattern\"\n    }}>{`Builder Pattern`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Builder Pattern`}</inlineCode>{` enables us to create different instance representations using the same construction code.`}</p>\n    <p>{`In this scenario, we will use the classic trope of building a pizza to illustate how to implement this pattern.`}</p>\n    <p>{`The pattern works by using the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`Product`}</inlineCode>{` which represents the complex object under construction. In this case, the product is the `}<inlineCode parentName=\"li\">{`Pizza`}</inlineCode>{` class which denotes our pizza instances. We wil name this our `}<inlineCode parentName=\"li\">{`PizzaProduct`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`Builder`}</inlineCode>{` that specifies the abstract class for creating the `}<inlineCode parentName=\"li\">{`Product`}</inlineCode>{` parts (in our case the `}<inlineCode parentName=\"li\">{`Pizza`}</inlineCode>{`). In this case, it will be our abstract class `}<inlineCode parentName=\"li\">{`PizzaBuilder`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Concrete Builders`}</inlineCode>{` where each builder is responsible to instantiate different representations of the product. In this case, the concrete builders will be our classes that construct different types of pizza denoted as `}<inlineCode parentName=\"li\">{`NConcreteBuilder`}</inlineCode>{` where the `}<inlineCode parentName=\"li\">{`N`}</inlineCode>{` represents the name of the kind of pizza. All we will do in this example is create a Hawaiin pizza and a Meat Lovers pizza, so the concrete builders will be called `}<inlineCode parentName=\"li\">{`HawaiinConcreteBuilder`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`MeatLoversConcreteBuilder`}</inlineCode>{` in this example.`}</li>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`Director`}</inlineCode>{` that constructs the object using the `}<inlineCode parentName=\"li\">{`Builder`}</inlineCode>{` interface. In this case, we will have the `}<inlineCode parentName=\"li\">{`ChefDirector`}</inlineCode>{` class fulfil this role. The `}<inlineCode parentName=\"li\">{`ChefDirector`}</inlineCode>{` will create a chef that is used to create the different types of pizza.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"builder-design-pattern-in-action\"\n    }}>{`Builder Design Pattern In Action`}</h2>\n    <p>{`First, let's build our `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{`. To do so, we will create an interface to ensure our product will include all the pizza essentials and then implement that to a `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{` itself will create the pizza instances, but will ultimately be abstracted away and flexibly built thanks to our `}<inlineCode parentName=\"p\">{`Director`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Concrete Builders`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// each pizza requires a base, sauce and topping property\n// also ensure a taste method is implemented\ninterface Pizza {\n    base: string;\n    sauce: string;\n    topping: string;\n    taste(): void;\n}\n\nclass PizzaProduct implements Pizza {\n    private _base: string;\n    private _topping: string;\n    private _sauce: string;\n\n    constructor() {\n        // initialise all values to empty strings\n        // our direct will use the concrete builders\n        // to set all these values durin\n        this._base = '';\n        this._topping = '';\n        this._sauce = '';\n    }\n\n    set base(baseValue: string) {\n        this._base = baseValue;\n    }\n\n    set topping(toppingValue: string) {\n        this._topping = toppingValue;\n    }\n\n    set sauce(sauceValue: string) {\n        this._sauce = sauceValue;\n    }\n\n    taste(): void {\n        console.log(\\`Base: \\${this._base}, Topping: \\${this._topping}, Sauce: \\${this._sauce}.\\`);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-our-abstract-builder\"\n    }}>{`Writing Our Abstract Builder`}</h2>\n    <p>{`Next, we need to define our `}<inlineCode parentName=\"p\">{`PizzaBuilder`}</inlineCode>{`. This builder will be an abstract class that defines the required methods and set the base for our concrete builders to extend from.`}</p>\n    <p>{`Note: an abstract class cannot have an instance created. This is incredibly important. The instances created in the program will be done by our concrete builders later.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`abstract class PizzaBuilder {\n    // this relation to the PizzaProduct is what abstracts the PizzaProduct\n    // from the code run from the program\n    protected _pizza: PizzaProduct;\n\n    // we set these functions to abstract because we want\n    // the concrete builders that extend the PizzaBuilder\n    // to implement these functions\n    abstract buildBase(): void;\n    abstract buildSauce(): void;\n    abstract buildTopping(): void;\n\n    constructor() {\n        // added for the sake of simplicty instead of a makePizza function\n        // we will just instantiate an \"empty\" pizza when a builder\n        // instance is initialised\n        this._pizza = new PizzaProduct();\n    }\n\n    get pizza() {\n        return this._pizza;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-our-concrete-builders\"\n    }}>{`Writing Our Concrete Builders`}</h2>\n    <p>{`Now that the abstract builder has been created, we now create the `}<inlineCode parentName=\"p\">{`concrete builders`}</inlineCode>{`. Remember, the role of each `}<inlineCode parentName=\"p\">{`concrete builder`}</inlineCode>{` is the build out different versions of our `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{`.`}</p>\n    <p>{`Note: since we are extended from the abstract class, we do not need to override the constructor method. The base constructor method provided in the super class `}<inlineCode parentName=\"p\">{`PizzaBuilder`}</inlineCode>{` will handle our instantiation of the private `}<inlineCode parentName=\"p\">{`_pizza`}</inlineCode>{` property as well as the getter, so the code for these concrete builders should be straight forward implementations of the `}<inlineCode parentName=\"p\">{`abstract classes`}</inlineCode>{` required.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class HawaiinConcreteBuilder extends PizzaBuilder {\n  buildBase(): void {\n    this._pizza.base = 'thick crust';\n  }\n\n  buildSauce(): void {\n    this._pizza.sauce = 'tomato';\n  }\n\n  buildTopping(): void {\n    this._pizza.topping = 'ham and pineapple';\n  }\n}\n\nclass MeatLoversConcreteBuilder extends PizzaBuilder {\n  buildBase(): void {\n    this._pizza.base = 'thin crust';\n  }\n\n  buildSauce(): void {\n    this._pizza.sauce = 'tomato';\n  }\n\n  buildTopping(): void {\n    this._pizza.topping = 'a lot of meat';\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-our-director\"\n    }}>{`Writing Our Director`}</h2>\n    <p>{`Finally, we can build our Chef Director. The role of the director is to take any builder that conforms to our abstract builder class `}<inlineCode parentName=\"p\">{`PizzaBuilder`}</inlineCode>{` and make the pizzas and taste the pizzas.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class ChefDirector {\n    private pizzaBuilder?: PizzaBuilder;\n\n    makePizza(pizzaBuilder: PizzaBuilder): void {\n        this.pizzaBuilder = pizzaBuilder;\n        this.pizzaBuilder.buildBase();\n        this.pizzaBuilder.buildSauce();\n        this.pizzaBuilder.buildTopping();\n    }\n\n    tastePizza(): void {\n        try {\n            if (!this.pizzaBuilder) {\n                throw new Error('No pizza builder property defined');\n            }\n\n            this.pizzaBuilder.pizza.taste();\n        } catch(e) {\n            console.error(e);\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"putting-it-all-together\"\n    }}>{`Putting It All Together`}</h2>\n    <p>{`Now that all our required code has been written, we can happily write a quite script to test that an instance of our `}<inlineCode parentName=\"p\">{`ChefDirector`}</inlineCode>{` can make both a \"Hawaiin\" and \"Meat Lovers\" pizza!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// the director will be used to create and taste pizzas\nconst chefDirector = new ChefDirector();\n\n// the concrete builders will now be used to define\n// what type of pizza the chef will make and taste\nconst hawaiinBuilder = new HawaiinConcreteBuilder();\nconst meatLoversBuilder = new MeatLoversConcreteBuilder();\n\n// First, let's test our Hawaiin Pizza\nchefDirector.makePizza(hawaiinBuilder);\nchefDirector.tastePizza();\n\n// Secondly, let's test our Meat Lovers\nchefDirector.makePizza(meatLoversBuilder);\nchefDirector.tastePizza();\n`}</code></pre>\n    <p>{`If we now check our console, we can see our results:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`Base: thick crust, Topping: ham and pineapple, Sauce: tomato.\nBase: thin crust, Topping: a lot of meat, Sauce: tomato.\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}