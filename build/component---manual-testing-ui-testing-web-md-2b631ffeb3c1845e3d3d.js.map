{"version":3,"sources":["webpack:///../manual/Testing/UI-Testing-Web.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,2JAA0I,0BAAYC,WAAW,KAAvB,eAA1I,uCACA,iBAAQ,CACN,GAAM,mBADR,mBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,2LAOL,iBAAQ,CACN,GAAM,4BADR,4BAGA,iFAAgE,0BAAYA,WAAW,KAAvB,iBAAhE,eAAyI,0BAAYA,WAAW,KAAvB,WAAzI,UACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,mCAAkB,0BAAYA,WAAW,KAAvB,WAAlB,4EAAkJ,0BAAYA,WAAW,KAAvB,SAAlJ,sEACA,wEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,i3DAyFL,iBAAQ,CACN,GAAM,4CADR,4CAGA,uGAAsF,mBAAGA,WAAW,KAAQ,CACxG,KAAQ,kDAD0E,cAAtF,mBAGA,mKACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,szCA4CL,iBAAQ,CACN,GAAM,kCADR,mCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2BAML,iBAAQ,CACN,GAAM,iCADR,iCAGA,iE,yMAKJJ,EAAWK,gBAAiB","file":"component---manual-testing-ui-testing-web-md-2b631ffeb3c1845e3d3d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"ui-testing-web\"\n    }}>{`UI Testing Web`}</h1>\n    <p>{`For web, we can test UI elements by making the most of Puppeteer and both the Emitter and Recorder JS packages from Kratos and the `}<inlineCode parentName=\"p\">{`json-server`}</inlineCode>{` js-controller package from Kratos.`}</p>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting started`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kratos install js-controllers json-server\nkratos install js Emitter\nkratos install js Recorder\n# install puppeteer, mocha, json-server etc if required - should be bootstrappable\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-for-the-tests\"\n    }}>{`Setting up for the tests`}</h2>\n    <p>{`Within the component module you want to target, create a `}<inlineCode parentName=\"p\">{`.puppeteer.js`}</inlineCode>{` file and a `}<inlineCode parentName=\"p\">{`db.json`}</inlineCode>{` file.`}</p>\n    <h2 {...{\n      \"id\": \"the-component-file\"\n    }}>{`The component file`}</h2>\n    <p>{`We use the `}<inlineCode parentName=\"p\">{`Emitter`}</inlineCode>{` module to emit events to our file, which in turn will - if config is in `}<inlineCode parentName=\"p\">{`debug`}</inlineCode>{` mode, pass on to JSON Server to generate our event emission file.`}</p>\n    <p>{`The component could look like this for example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport Emitter from 'common/Emitter';\nimport Config from 'src/app.json';\nimport Waypoint from 'react-waypoint';\n\n/**\n * Render the Component component\n *\n * @class Component\n * @extends {Component}\n */\nclass Component extends Component {\n  /**\n   * Handle primary button click event.\n   *\n   * @memberof Component\n   */\n  handlePrimaryClick = (e) => {\n    Emitter.emit('event', {\n      event: 'Component.handlePrimaryClick',\n      e: e.target\n    });\n\n    if (Config.debug) {\n      e.preventDefault();\n      return;\n    }\n\n    const { router } = this.props;\n    router.push(Config.baseUrl + '/test');\n  };\n\n  /**\n   * Handle component enter event.\n   *\n   * @memberof Component\n   */\n  handleWaypointEnter = (e) => {\n    Emitter.emit('event', { event: 'Component.handleWaypointEnter' });\n  };\n\n  /**\n   * Handle component exit event.\n   *\n   * @memberof Component\n   */\n  handleWaypointExit = (e) => {\n    Emitter.emit('event', { event: 'Component.handleWaypointExit' });\n  };\n\n  /**\n   * Render Component component\n   * @memberof Component\n   * @var {function} render Render Component component\n   * @returns {Object} component\n   */\n  render() {\n    const {\n      title,\n      subtitle,\n      buttonPrimary,\n      buttonSecondary,\n      imageMain\n    } = this.props.copy;\n\n    return (\n      <Waypoint\n        onEnter={this.handleWaypointEnter}\n        onLeave={this.handleWaypointExit}\n      >\n        <div className=\"component\">\n          <div className=\"container content\">\n            <button\n              onClick={this.handlePrimaryClick}\n              className=\"button primary f-primary cta animate\"\n            >\n              {buttonPrimary}\n            </button>\n          </div>\n        </div>\n      </Waypoint>\n    );\n  }\n}\n\nexport default Component;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"recording-the-events-manually-on-the-web\"\n    }}>{`Recording the events manually on the web`}</h2>\n    <p>{`Use the Puppeteer recorder to do a runthrough of the events you want to cover. `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/checkly/puppeteer-recorder\"\n      }}>{`Check here`}</a>{` for more info.`}</p>\n    <p>{`After running through with the recorder, we should be able to modify the Puppeteer template. The end result could look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * ComponentALLandingOne tests\n */\nconst puppeteer = require('puppeteer');\nconst json = require('./db.json');\nconst fs = require('fs-extra');\nconst cwd = process.cwd();\nconst server = require(cwd + '/controllers/json-server');\nconst wait = require('waait');\nconst Recorder = require(cwd + '/src/common/Recorder').default;\nlet dbJson;\nserver.listen(4444, () => console.log('JSON DB server started'));\n\ndescribe('ComponentALLandingFive UI functionality', () => {\n  describe('ComponentALLandingFive events', () => {\n    beforeEach(() => {\n      dbJson = fs.readJsonSync(cwd + '/db.json');\n      dbJson.events.map((e) => Recorder.delete(e.id));\n    });\n\n    it('Events emitted equals prerecording', async () => {\n      const browser = await puppeteer.launch();\n      const page = await browser.newPage();\n\n      await page.goto('http://localhost:3000/ComponentALLandingFive');\n      await page.waitForSelector(\n        '.grid > .item > .flex > .block-info > .primary'\n      );\n      await page.click('.grid > .item > .flex > .block-info > .primary');\n\n      await page.goto('http://localhost:3000/ComponentALLandingFive');\n\n      await browser.close();\n\n      await wait(300);\n      dbJson = fs.readJsonSync(cwd + '/db.json');\n\n      expect(dbJson).to.deep.equal(json);\n    });\n  });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"init-the-component-dbjson-file\"\n    }}>{`Init the component db.json file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"events\": []\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"first-run-through-of-the-file\"\n    }}>{`First run through of the file`}</h2>\n    <p>{`If we decide to run that Puppeteer test`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}