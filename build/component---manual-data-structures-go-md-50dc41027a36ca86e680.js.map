{"version":3,"sources":["webpack:///../manual/Data-Structures/Go.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,8MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,4PAeL,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ocAuBL,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ke,qMAiCTJ,EAAWK,gBAAiB","file":"component---manual-data-structures-go-md-50dc41027a36ca86e680.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"go-data-structures\"\n    }}>{`Go Data Structures`}</h1>\n    <h2 {...{\n      \"id\": \"fizzbuzz\"\n    }}>{`Fizzbuzz`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func fizzBuzz(i int) string {\n  switch true {\n    case i%3 == 0 && i%5 == 0:\n        return \"fizzbuzz\"\n    case i%3 == 0:\n        return \"fizz\"\n    case i%5 == 0:\n        return \"buzz\"\n    default:\n        return strconv.Itoa(i)\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"chunked-arrays\"\n    }}>{`Chunked Arrays`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func arrayChunk(arr []int, size int) [][]int {\n    if len(arr) <= 0 {\n        return nil\n    }\n\n    var tmp []int\n    var chunkedArr [][]int\n    for i, item := range arr {\n        tmp = append(tmp, item)\n\n        isFinal := len(arr)-1 == i\n        if i%size == size-1 || isFinal {\n            fmt.Printf(\"%v\", tmp)\n            chunkedArr = append(chunkedArr, tmp)\n            tmp = nil\n        }\n    }\n\n    return chunkedArr\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"palindromes\"\n    }}>{`Palindromes`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\n// return whether it is a palindrome or not\nfunc main() {\n    return\n}\n\n// String converts string struct expecting palindromes\ntype String struct {\n    str string\n}\n\nfunc newPalindrome(s string) String {\n    return String{s}\n}\n\nfunc (s String) isPalindrome() bool {\n    r := []rune(s.str)\n    for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n        if r[i] != r[j] {\n            return false\n        }\n    }\n\n    return true\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}