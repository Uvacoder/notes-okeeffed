{"version":3,"sources":["webpack:///../manual/Python/Python-Exceptions.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,gJACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,oBADZ,2FAOL,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,6U,2MAsBTJ,EAAWK,gBAAiB","file":"component---manual-python-python-exceptions-md-0cb7eaab3bbe53827804.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"python-exceptions\"\n    }}>{`Python Exceptions`}</h1>\n    <p>{`The base example is to use a try/except block. You can raise exceptions in code that can be caught by the except block.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`try:\n    linux_interaction()\nexcept:\n    print('Linux function was not executed')\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example-case\"\n    }}>{`Example case`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`class LinkedList:\n    def __init__(self, head=None):\n        self.head = head\n\n    def getFirst(self):\n        if self.head == None:\n            raise Exception(\"No items in list\")\n        else:\n            return self.head\n\ntry:\n    ll = LinkedList()\n    ll.getFirst()\nexcept Exception, error:\n    print(error)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}