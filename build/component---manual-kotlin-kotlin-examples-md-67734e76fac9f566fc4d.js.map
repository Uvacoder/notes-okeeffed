{"version":3,"sources":["webpack:///../manual/Kotlin/Kotlin-Examples.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,iBAAQ,CACN,GAAM,cADR,cAGA,+BACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,uBAKL,gCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,mCAML,8DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,kYAoBL,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,+EAQL,mHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,uNAOL,iBAAQ,CACN,GAAM,8BADR,8BAGA,yLACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,4IAKL,iBAAQ,CACN,GAAM,eADR,eAGA,+DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,0KAUL,iBAAQ,CACN,GAAM,cADR,cAGA,kCAAiB,0BAAYA,WAAW,KAAvB,MAAjB,cACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,iIAML,iBAAQ,CACN,GAAM,gBADR,kBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,6DAML,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,wEAKL,qDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,oM,yMAcTJ,EAAWK,gBAAiB","file":"component---manual-kotlin-kotlin-examples-md-67734e76fac9f566fc4d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"kotlin-examples\"\n    }}>{`Kotlin Examples`}</h1>\n    <h2 {...{\n      \"id\": \"plus-minus\"\n    }}>{`Plus Minus`}</h2>\n    <p>{`Input:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`6\n-4 3 -9 0 4 1\n`}</code></pre>\n    <p>{`Output:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`0.500000\n0.333333\n0.166667\n`}</code></pre>\n    <p>{`Prints positive, negative and zeroes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun plusMinus(arr: Array<Int>): Unit {\n    var positive = 0\n    var negative = 0\n    var zeroes = 0\n\n    for (i in arr) {\n        when {\n            i > 0 -> positive++\n            i < 0 -> negative++\n            else -> zeroes++\n        }\n    }\n\n    println(1.0 / arr.size * positive)\n    println(1.0 / arr.size * negative)\n    println(1.0 / arr.size * zeroes)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nullable-types\"\n    }}>{`Nullable Types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var errorCode: Int?\n\nerrorCode = 100\n// or for null\nerrorCode = null\n`}</code></pre>\n    <p>{`Note that treating nullable types from non-nullable types will have unusual repercussions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var result: Int? = 30\nprintln(result) // 30\n\nprintln(result + 1) // throws error \"Operator call corresponds to a dot-qualified call 'result.plus(1)' which is not allowed on a nullable receiver 'result'.\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"unwrapping-nullable-values\"\n    }}>{`Unwrapping nullable values`}</h3>\n    <p>{`There are two different methods you can use to remove these nullables from the box. The first is using the not-null assertion operator !! (use these sparingly):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val ageAfterBirthday = authorAge!! + 1\nprintln(\"After their next birthday, author will bne $ageAfterBirthday\") // prints as expected\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"smart-casts\"\n    }}>{`Smart Casts`}</h3>\n    <p>{`This is the second way to go about it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var nonNullableAuthor: String\nvar nullableAuthor: String?\nif (authorName != null) {\n  nonNullableAuthor = authorName\n} else {\n  nullableAuthor = authorName\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"safe-calls\"\n    }}>{`Safe Calls`}</h3>\n    <p>{`Using the `}<inlineCode parentName=\"p\">{`?.`}</inlineCode>{` operator:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val nameLength = authorName?.length\nprintln(\"Author's name has length $nameLength.\")\n// > Author's name has length 10.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"let-function\"\n    }}>{`let() function`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`authorName?.let {\n  nonNullableAuthor = authorName\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"elvis-operator\"\n    }}>{`Elvis Operator`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var nullableInt: Int? = 10\nvar mustHaveResult = nullableInt ?: 0\n`}</code></pre>\n    <p>{`The following is equivalent:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// this...\nvar nullableInt: Int? = 10\nvar mustHaveResult = if (nullableInt != null) nullableInt else 0\n\n// ...is the same as this\nnullableInt = null\nmustHaveResult = nullableInt ?: 0\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}