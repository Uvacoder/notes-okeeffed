{"version":3,"sources":["webpack:///../manual/Dotnet/Getting-Started.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,6BADR,6BAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,yEADQ,yBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,kHADQ,4CAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0CADQ,mBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iFADQ,0DAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,yEADQ,0BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gHADQ,wBAItB,iBAAQ,CACN,GAAM,mBADR,mBAGA,2IACA,wCAAuB,0BAAYA,WAAW,KAAvB,UAAvB,4LACA,iBAAQ,CACN,GAAM,0BADR,0BAGA,gFACA,+EAA8D,0BAAYA,WAAW,KAAvB,SAA9D,YACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,4CAKL,uEAAsD,0BAAYA,WAAW,KAAvB,cAAtD,SAAsH,0BAAYA,WAAW,KAAvB,SAAtH,gBAAwL,0BAAYA,WAAW,KAAvB,gBAAxL,oCAAqR,0BAAYA,WAAW,KAAvB,OAArR,YACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,4MAgBL,uCAAsB,0BAAYA,WAAW,KAAvB,cAAtB,2CAAwH,0BAAYA,WAAW,KAAvB,gBAAxH,sBACA,yEAAwD,0BAAYA,WAAW,KAAvB,QAAxD,iBAA0H,0BAAYA,WAAW,KAAvB,6DAA1H,2BACA,iBAAQ,CACN,GAAM,8BADR,8BAGA,kFAAiE,0BAAYA,WAAW,KAAvB,YAAjE,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,8HAKL,yIACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,kDACA,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,kBAA5B,mEACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,mBAApB,gDAEF,kCAAiB,0BAAYA,WAAW,KAAvB,cAAjB,iEAAyI,0BAAYA,WAAW,KAAvB,QAAzI,KACA,iBAAQ,CACN,GAAM,wCADR,wCAGA,gCAAe,0BAAYA,WAAW,KAAvB,sBAAf,0EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,kM,yMAiBTJ,EAAWK,gBAAiB","file":"component---manual-dotnet-getting-started-md-ebc748d212c0b301bf08.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"getting-start-with-dotnet\"\n    }}>{`Getting Start with Dotnet`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro\"\n        }}>{`Dotnet in 10 Minutes`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://codeburst.io/how-to-set-up-a-modern-full-stack-net-web-development-environment-on-mac-os-542dcd43a564\"\n        }}>{`Setting up full stack .NET web on MacOS`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://dotnet.microsoft.com/download\"\n        }}>{`Dotnet install`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stackoverflow.com/questions/53030531/dotnet-command-not-found-in-mac\"\n        }}>{`Symlinking Dotnet to /usr/local/bin post-installation`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://dotnet.microsoft.com/learn/aspnet/hello-world-tutorial/intro\"\n        }}>{`First web application`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-3.1&tabs=visual-studio\"\n        }}>{`Building a web API`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting started`}</h2>\n    <p>{`Follow resources `}{`[3]`}{` and `}{`[4]`}{` for getting installation going (installation example above is for MacOS).`}</p>\n    <p>{`Afterwards, run `}<inlineCode parentName=\"p\">{`dotnet`}</inlineCode>{` to confirm things are working. If nothing happens after installation, ensure you have followed resource `}{`[4]`}{` to symlink the installation to your path (or add the folder to path).`}</p>\n    <h2 {...{\n      \"id\": \"creating-a-console-app\"\n    }}>{`Creating a Console App`}</h2>\n    <p>{`We simply run the following to start a new console app.`}</p>\n    <p>{`The following creates new app of type console into the `}<inlineCode parentName=\"p\">{`myApp`}</inlineCode>{` folder:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`dotnet new console -o myApp\ncd myApp\n`}</code></pre>\n    <p>{`The above code will also generate a file named `}<inlineCode parentName=\"p\">{`Program.cs`}</inlineCode>{` into `}<inlineCode parentName=\"p\">{`myApp`}</inlineCode>{`, along with `}<inlineCode parentName=\"p\">{`myApp.csproj`}</inlineCode>{` config for library usage and an `}<inlineCode parentName=\"p\">{`obj`}</inlineCode>{` folder.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`// Program.cs\nusing System;\n\nnamespace myApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n`}</code></pre>\n    <p>{`If we now fire `}<inlineCode parentName=\"p\">{`dotnet run`}</inlineCode>{` from the command line, we will see our `}<inlineCode parentName=\"p\">{`Hello World!`}</inlineCode>{` response. Hooray!`}</p>\n    <p>{`Moving further, we could add more lines into our `}<inlineCode parentName=\"p\">{`Main`}</inlineCode>{` program like `}<inlineCode parentName=\"p\">{`Console.WriteLine(\"The current time is \" + DateTime.Now);`}</inlineCode>{` to update what we get.`}</p>\n    <h2 {...{\n      \"id\": \"creating-a-web-application\"\n    }}>{`Creating a Web application`}</h2>\n    <p>{`The following initialises a web application in the folder `}<inlineCode parentName=\"p\">{`myWebApp`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# note that we are specifying not to enable https in this particular instance\ndotnet new webApp -o myWebApp --no-https\n`}</code></pre>\n    <p>{`Several files were created in the myWebApp directory, to give you a simple web application that is ready to run.`}</p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`Startup.cs`}</inlineCode>{` contains all the settings and configurations.`}</li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`myWebApp/Pages`}</inlineCode>{` directory contains some example web pages for the application.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`myWebApp.csproj`}</inlineCode>{` defines what libraries are referenced etc.`}</li>\n    </ol>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`dotnet run`}</inlineCode>{` we will have a local development environment open up at port `}<inlineCode parentName=\"p\">{`5000`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"updating-the-code-in-the-application\"\n    }}>{`Updating the code in the application`}</h2>\n    <p>{`Editing `}<inlineCode parentName=\"p\">{`Pages/Index.cshtml`}</inlineCode>{` with the following will edit the application to show the server time:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`@page\n@model IndexModel\n@{\n    ViewData[\"Title\"] = \"Home page\";\n}\n\n<div class=\"text-center\">\n    <h1>Hello, world!</h1>\n    <p>The time on the server is @DateTime.Now</p>\n</div>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}