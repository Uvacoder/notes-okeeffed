{"version":3,"sources":["webpack:///../manual/Laravel/Laravel-Artisan.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-laravel-laravel-artisan-md-5d26cf7def1f91902f92.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"laravel-and-artisan\"\n    }}>{`Laravel and Artisan`}</h1>\n    <p>{`Artisan is the command-line interface included with Laravel. It provides a number of helpful commands that can assist you while you build your application. `}</p>\n    <h2 {...{\n      \"id\": \"basics\"\n    }}>{`Basics`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Commands`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`php artisan list`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`List commands`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`php aristan help migrate`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Example that every command has it's own help command`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`php artisan tinker`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All Laravel applications include Tinker, a REPL powered by the PsySH package.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`php artisan make:command SendEmails`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Create custom command SendEmails`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`email:send {user}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Adding custom args`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`email:send {user?}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional custom args`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`email:send {user=foo}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default custom args`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`email:send {user} {--queue=}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Adding custom options`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\\`email:send {user} {--Q`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`queue}\\``}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`email:send {user*}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input arrays`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`email:send {user : The ID of the user}`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input descriptions`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Laravel REPL`}</strong></p>\n    <p>{`All Laravel applications include Tinker, a REPL powered by the PsySH package. Tinker allows you to interact with your entire Laravel application on the command line, including the Eloquent ORM, jobs, events, and more. To enter the Tinker environment, run the tinker Artisan command `}<inlineCode parentName=\"p\">{`php artisan tinker`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"custom-commands\"\n    }}>{`Custom Commands`}</h2>\n    <p>{`You can build your own custom commands which are typically stored in the `}<inlineCode parentName=\"p\">{`app/Console/Commands`}</inlineCode>{` directory.`}</p>\n    <p>{`Feel free to change storage as long as it can be accessed by `}<inlineCode parentName=\"p\">{`Composer`}</inlineCode>{`.`}</p>\n    <p>{`Once you have created a command for the CLI, you will need to register it before you can use it on the CLI.`}</p>\n    <p><strong parentName=\"p\">{`Command Structure`}</strong></p>\n    <p>{`Example commands `}<inlineCode parentName=\"p\">{`SendEmails`}</inlineCode>{`. Note that we are able to inject any dependencies we need into the command's constructor. The Laravel service container will automatically inject all dependencies type-hinted in the constructor.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\nnamespace App\\\\Console\\\\Commands;\n\nuse App\\\\User;\nuse App\\\\DripEmailer;\nuse Illuminate\\\\Console\\\\Command;\n\nclass SendEmails extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'email:send {user}';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Send drip e-mails to a user';\n\n    /**\n     * The drip e-mail service.\n     *\n     * @var DripEmailer\n     */\n    protected $drip;\n\n    /**\n     * Create a new command instance.\n     *\n     * @param  DripEmailer  $drip\n     * @return void\n     */\n    public function __construct(DripEmailer $drip)\n    {\n        parent::__construct();\n\n        $this->drip = $drip;\n    }\n\n    /**\n     * Execute the console command.\n     *\n     * @return mixed\n     */\n    public function handle()\n    {\n        $this->drip->send(User::find($this->argument('user')));\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Closure Commands`}</strong></p>\n    <p>{`This is an alternative to declaring a class for a console command. This is similar to the same way that route Closures are an alternative to controllers.`}</p>\n    <p>{`Within the commands method of your app/Console/Kernel.php file, Laravel loads the routes/console.php file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * Register the Closure based commands for the application.\n *\n * @return void\n */\nprotected function commands()\n{\n    require base_path('routes/console.php');\n}\n`}</code></pre>\n    <p>{`Even though this file does not define HTTP routes, it defines console based entry points (routes) into your application. Within this file, you may define all of your Closure based routes using the  Artisan::command method. The command method accepts two arguments: the command signature and a Closure which receives the commands arguments and options.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`Artisan::command('build {project}', function ($project) {\n    $this->info(\"Building {$project}!\");\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}