{"version":3,"sources":["webpack:///../manual/Functional-Programming/Hardcore-FP-In-JavaScript.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-functional-programming-hardcore-fp-in-java-script-md-67c1d6d00de1295d8f1d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"hardcore-functional-programming-in-javascrpt\"\n    }}>{`Hardcore Functional Programming in JavaScrpt`}</h1>\n    <p>{`There are notes taken from Frontend Masters course \"Hardcore Functional Programming in JavaScrpt\"`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/functional-javascript/introduction/\"\n        }}>{`Frontend Masters course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.google.com/presentation/d/1WmIH538r0ubjW5zfKh43I1_Up4OnqQnNhICETyDnhSI/\"\n        }}>{`Course Slides`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://ramdajs.com/\"\n        }}>{`RamdaJS`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://baconjs.github.io/\"\n        }}>{`BaconJS`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://baconjs.github.io/\"\n        }}>{`Fantasy IO`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/DrBoolean/pointfree-fantasy\"\n        }}>{`Pointfree Fantasy - for mjoin, chain etc`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/origamitower/folktale\"\n        }}>{`Folktale - Either monad`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`\"Separation and recognition\" - the soul of functional programming.`}</p>\n    </blockquote>\n    <p>{`The symptoms:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Custom names`}</li>\n      <li parentName=\"ol\">{`Looping patterns`}</li>\n      <li parentName=\"ol\">{`Glue code`}</li>\n      <li parentName=\"ol\">{`Side effects`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"omit-needless-names\"\n    }}>{`Omit Needless Names`}</h3>\n    <p>{`Variable declarations from within a function - is it needed? If not, omit and add as an argument.`}</p>\n    <h3 {...{\n      \"id\": \"separating-mutation-from-calculation\"\n    }}>{`Separating Mutation From Calculation`}</h3>\n    <p>{`Ask \"where is the mutation happening?\" For example, the `}<inlineCode parentName=\"p\">{`teaser`}</inlineCode>{` function in the example to chop down text in the call `}<inlineCode parentName=\"p\">{`map(teaser(50), all('p'))`}</inlineCode>{` is where the mutation is happening. It is important to understand where and how this mutation works for simplification.`}</p>\n    <p>{`In the above example, the `}<inlineCode parentName=\"p\">{`teaser`}</inlineCode>{` also ran `}<inlineCode parentName=\"p\">{`setText`}</inlineCode>{` from within the function with the mutated text, which is unnecessary for that function and can be abstracted out.`}</p>\n    <h3 {...{\n      \"id\": \"recognize-pure-functions\"\n    }}>{`Recognize Pure Functions`}</h3>\n    <p>{`Functions that don't change anything are called \"pure\".`}</p>\n    <p>{`Their purity makes them:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Testable`}</li>\n      <li parentName=\"ol\">{`Portable`}</li>\n      <li parentName=\"ol\">{`Memoizable`}</li>\n      <li parentName=\"ol\">{`Parallelizable`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"separate-functions-from-rules\"\n    }}>{`Separate Functions From Rules`}</h3>\n    <p>{`Functions are nouns. Each input (in the domain) should map to a specific output (in the range).`}</p>\n    <p>{`Separate arity from functions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function get(property, object) {\n  return object[property];\n}\nvar people = [{ name: 'example' }];\n\n// args up front\nfunction getPersonName(person) {\n  return get('name', person);\n}\n\nvar names = people.map(getPersonName);\n\n// more args later\n// - magic happens here -\nvar names = people.map(get('name'));\n\n// the magic in detail\nfunction curry(fn) {\n  return function() {\n    if (fn.length > argument.length) {\n      var slice = Array.prototype.slice;\n      var args = slice.apply(arguments);\n      return function() {\n        return fn.apply(null, args.concat(slice.apply(arguments)));\n      };\n    }\n    return fn.apply(null, arguments);\n  };\n}\n\nvar get = curry(function(property, object) {\n  return object[property];\n});\n`}</code></pre>\n    <p>{`Arity is the idea of separating functions and making them only give one thing at a time (currying).`}</p>\n    <p>{`The examples then used in this application where using Ramda.`}</p>\n    <h3 {...{\n      \"id\": \"compose\"\n    }}>{`Compose`}</h3>\n    <p>{`Function can \"meld\" aka compose. Compose is right-to-left, the opposite of Unix pipe which is left-to-right.`}</p>\n    <p>{`When you can understand the relationship between `}<inlineCode parentName=\"p\">{`map`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`compose`}</inlineCode>{` you can start to see the relationship between the two.`}</p>\n    <h3 {...{\n      \"id\": \"point-free\"\n    }}>{`Point Free`}</h3>\n    <p>{`Points in this case mean arguments.`}</p>\n    <h2 {...{\n      \"id\": \"the-voyage\"\n    }}>{`The Voyage`}</h2>\n    <h3 {...{\n      \"id\": \"category-theory\"\n    }}>{`Category Theory`}</h3>\n    <p>{`Here is a simply example: `}<inlineCode parentName=\"p\">{`add(1, 1) // => 2`}</inlineCode></p>\n    <p>{`Mathematically, we know this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// associative\nadd(add(1, 1), 4) === add(1, add(1, 4));\n// communitive\nadd(1, 4) === add(4, 1);\n// identity\nadd(n, 0) === n;\n// distributive\nmultiply(2, add(3, 4)) === add(multiply(2, 3), multiply(2, 4));\n`}</code></pre>\n    <p>{`These theorems and formulas make the basis of our work.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`compose :: (b -> c) -> (a -> b) -> (a -> c)\nid :: a -> a\n`}</code></pre>\n    <p>{`You need both a composition AND an identity to form a `}<inlineCode parentName=\"p\">{`category`}</inlineCode>{`.`}</p>\n    <p>{`Note: The identity function is if you give it a value it will give it right back.`}</p>\n    <p>{`So we can get some category laws:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// left identity\ncompose(\n  id,\n  f,\n) === f;\n// right identity\ncompose(\n  f,\n  id,\n) === f;\n// associativity\ncompose(\n  compose(\n    f,\n    g,\n  ),\n  h,\n) ===\n  compose(\n    f,\n    compose(\n      g,\n      h,\n    ),\n  );\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"objects\"\n    }}>{`Objects`}</h3>\n    <p>{`How do we deal with errors, side effects etc? We use objects. Think of them like:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Container/Wrappers for values (also known as Identity)`}</li>\n      <li parentName=\"ol\">{`No methods`}</li>\n      <li parentName=\"ol\">{`Not nouns`}</li>\n      <li parentName=\"ol\">{`Probably won't be making your own often`}</li>\n    </ol>\n    <p>{`The container:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var _Container = function(val) {\n  this.val = val;\n};\n\n// helper for during compose use\nvar Container = function(x) {\n  return new _Container(x);\n};\n\nContainer(3);\n// => _Container { val: 3}\n`}</code></pre>\n    <p>{`In order to map over our container, we can add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var _Container.prototype.map = function(f) {\n  // this is the important part - it is running\n  // the function on the value in the container\n  return Container(f(this.val))\n}\n\nContainer(\"flamethrower\").map(function(s) { return capitalize(s)})\nContainer(\"flamethrower\").map(capitalize)\n// => Container(\"Flamethrower\")\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The general idea is that we go within the object and run a function on the object.`}</p>\n    </blockquote>\n    <p>{`These themselves are what we know as a `}<inlineCode parentName=\"p\">{`functor`}</inlineCode>{`.`}</p>\n    <p>{`More example of this in action with the `}<inlineCode parentName=\"p\">{`ramda.map`}</inlineCode>{` function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`map(match(/cat/g), Container('catsup'));\n//=> Container([\"cat\"])\nmap(\n  compose(\n    first,\n    reverse,\n  ),\n  Container('dog'),\n);\n//=> Container(\"g\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"maybe-functor\"\n    }}>{`Maybe Functor`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`\"An object or data structure you can map over\" - a functor`}</p>\n    </blockquote>\n    <p>{`Let's take an example that runs in null issues:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var getElement = document.querySelector;\nvar getNameParts = compose(\n  split(''),\n  get('value'),\n  getElement,\n);\n\ngetNameParts('#full_name');\n//=> ['Jonathan', 'Gregory', 'Brandis']\n`}</code></pre>\n    <p>{`So, meeting our first Functor: `}<inlineCode parentName=\"p\">{`Maybe`}</inlineCode>{`.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Captures a null check`}</li>\n      <li parentName=\"ol\">{`The value inside may not be there`}</li>\n      <li parentName=\"ol\">{`Sometimes has two subclasses `}<inlineCode parentName=\"li\">{`Just / Nothing`}</inlineCode></li>\n      <li parentName=\"ol\">{`Sometimes called `}<inlineCode parentName=\"li\">{`Option`}</inlineCode>{` with subclassess `}<inlineCode parentName=\"li\">{`Some / None`}</inlineCode></li>\n    </ol>\n    <p>{`The idea is that you may or may not have a value in your container.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var _Maybe.prototype.map = function(f) {\n  return this.val ? Maybe(f(this.val)) : Maybe(null)\n}\n\nmap(capitalize, Maybe(\"flame\"))\n//=> Maybe(\"Flame\")\nmap(capitalize, Maybe(null))\n//=> Maybe(null)\n`}</code></pre>\n    <p>{`This in application:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var firstMatch = compose(\n  map(first),\n  Maybe,\n  match(/cat/g),\n);\nfirstMatch('dogsup');\n//=> Maybe(null)\n`}</code></pre>\n    <p>{`Worthy inclusions from the course questions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const _ = require('ramda');\nconst inc = _.add(1);\n\nmap(inc, [4]); // [5]\nmap(inc, Identity(4)); // Identity(5)\nmap(map(inc), Identity([4])); // Identity([5])\n`}</code></pre>\n    <p>{`This can also trip people up:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var xs = Identity(['do', 'ray', 'me', 'fa', 'so', 'la', 'ti', 'do']);\nvar ex2 = map(_.head);\nassertEqual(Identity('do'), ex2(xs)); // Note the identity gets passed in here!\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"either-w-subclasses-left-or-right\"\n    }}>{`Either w/ subclasses Left or Right`}</h3>\n    <p>{`Typically used for pure error handling. Like Maybe, but with an error message embedded. Has two subclasses: Left/Right. Mays the function over a Right, ignores the Left.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`map(function(x) {\n  return x + 1;\n}, Right(2));\n//=> Right(3)\nmap(function(x) {\n  return x + 1;\n}, Left('some message'));\n//=> Left('some message') for error handling\n`}</code></pre>\n    <p>{`A more practical application:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var determineAge = function(user) {\n  return user.age ? Right(user.age) : Left('could not get age');\n};\nvar yearOlder = compose(\n  map(add(1)),\n  determineAge,\n);\n\nyearOlder({ age: 22 });\n//=> Right(23)\n\nyearOlder({ age: null });\n//=> Left(\"couldn't get age\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"io\"\n    }}>{`IO`}</h3>\n    <p><inlineCode parentName=\"p\">{`IO`}</inlineCode>{` is a functor that puts a function inside it (not a string, number etc).`}</p>\n    <p>{`Facets of IO:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A lazy computation \"builder\"`}</li>\n      <li parentName=\"ol\">{`Typically used to contain side effects`}</li>\n      <li parentName=\"ol\">{`You must `}<inlineCode parentName=\"li\">{`runIO`}</inlineCode>{` to perform the operation`}</li>\n      <li parentName=\"ol\">{`Map appends the function to a list of things to run with the effectful value`}</li>\n    </ol>\n    <p>{`Examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var email_io = IO(function() {\n  return $('#email').val();\n});\nvar msg_io = map(concat('welcome'), email_io);\n\nrunIO(msg_io);\n//=> \"welcome steve@foodie.net\"\n`}</code></pre>\n    <p>{`An example of building up an IO:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var getBgColor = compose(\n  get('background-color'),\n  JSON.parse,\n);\nvar bgPref = compose(\n  map(getBgColor),\n  Store.get('preferences'),\n);\n\nvar app = bgPref();\n//=> IO()\n\nrunIO(app);\n//=> #efefef\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"other-functors\"\n    }}>{`Other Functors`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`EventStream: Infinite list of results, dual of array, map is sometimes lazy, calls the mapped function each time an event happens. Similar-ish to RxJS. They used Bacon in this example.`}</li>\n      <li parentName=\"ol\">{`Future: Has an eventual value, similar to a promise but \"lazy\", you must \"fork\" it to kick it off, it takes a function as its value, calls the function with it's result once it's there.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"functor-law-properties\"\n    }}>{`Functor Law Properties`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// identity\nmap(id) === id;\n\n// composition\ncompose(\n  map(f),\n  map(g),\n) ===\n  map(\n    compose(\n      f,\n      g,\n    ),\n  );\n`}</code></pre>\n    <p>{`An example functor:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// reverse :: String -> String\n// toArray :: a -> Array a\nvar toArray = function(x) {\n  return [x];\n};\n\ncompose(\n  toArray,\n  reverse,\n)('bingo');\n//=> [ognib]\n\ncompose(\n  map(reverse),\n  toArray,\n)('bingo');\n//=> [ognib]\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Natural Transformations`}</inlineCode>{` is when you take one functor to another without knowing anything about the values.`}</p>\n    <p>{`An example is `}<inlineCode parentName=\"p\">{`Maybe`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`maybeToArray(Maybe(2));\nmaybeToArray(Maybe(null));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"monads\"\n    }}>{`Monads`}</h3>\n    <p>{`Monads = Pointed Functors `}<inlineCode parentName=\"p\">{`of :: a -> F a`}</inlineCode>{` aka: pure, return, unit, point.`}</p>\n    <p>{`Anything with an `}<inlineCode parentName=\"p\">{`of`}</inlineCode>{` is a Pointed Functor:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`Container.of(split);\n// Container(split)\n\nFuture.of(split);\n// Future(split)\n\nMaybe.of(split);\n// Maybe(split)\n\nEventStream.of(split);\n// EventStream(split)\n`}</code></pre>\n    <p>{`\"Nest computations\" - just a pointed functor with one the following functions: `}<inlineCode parentName=\"p\">{`mjoin`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`chain`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`mjoin :: M M a -> M a\nchain :: (a -> M b) -> M a -> M b\n`}</code></pre>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`mjoin(Container(Container(2))); //=> Container(2)\n\n// in the given example\nvar getTrackingId = compose(\n  Maybe,\n  get('tracking_id'),\n);\nvar findOrder = compose(\n  Maybe,\n  Api.findOrder,\n);\nvar getOrderTracking = compose(\n  mjoin,\n  map(getTrackingId),\n  findOrder,\n);\n\nvar renderPage = compose(\n  map(renderTemplate),\n  getOrderTracking,\n);\nrenderPage(379);\n//=> Maybe(Html)\n`}</code></pre>\n    <p>{`Converting deep nested maps:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// safeGet returns a Maybe functor\nvar ex1 = compose(\n  map(map(safeGet('name'))),\n  map(safeGet('street')),\n  safeGet('address'),\n);\n\n// with a mjoin, you could do...\nvar ex1 = compose(\n  mjoin\n  map(safeGet('name')),\n  mjoin,\n  map(safeGet('street')),\n  safeGet('address'),\n);\n\n// but given we know chain is just \"monad\",\n// then mjoin, we could...\nvar ex1 = compose(\n  chain(safeGet('name')),\n  chain(safeGet('street')),\n  safeGet('address'),\n);\n`}</code></pre>\n    <p>{`There is also such thing as `}<inlineCode parentName=\"p\">{`mcompose`}</inlineCode>{` which will remove the need for the child `}<inlineCode parentName=\"p\">{`chain`}</inlineCode>{` function.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}