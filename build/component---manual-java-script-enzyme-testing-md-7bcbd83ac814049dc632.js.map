{"version":3,"sources":["webpack:///../manual/JavaScript/Enzyme-Testing.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,qNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uBADR,uBAGA,mFACA,8CAA6B,0BAAYC,WAAW,KAAvB,WAA7B,KAAsF,0BAAYA,WAAW,KAAvB,SAAtF,KAA6I,0BAAYA,WAAW,KAAvB,UAA7I,KAAqM,0BAAYA,WAAW,KAAvB,SAArM,KAA4P,0BAAYA,WAAW,KAAvB,SAC5P,6IAA4H,0BAAYA,WAAW,KAAvB,WAA5H,KACA,sDAAqC,0BAAYA,WAAW,KAAvB,SAArC,KACA,6GAA4F,0BAAYA,WAAW,KAAvB,UAA5F,KACA,qBAAG,kBAAIA,WAAW,KAAf,mBACH,sBACE,kBAAIA,WAAW,MAAf,kFAIA,kBAAIA,WAAW,MAAf,8BAEA,kBAAIA,WAAW,MAAf,gBACA,kBAAIA,WAAW,MAAf,yCAIF,iBAAQ,CACN,GAAM,8BADR,iCAGA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,6WAeL,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,8wCA+BL,iBAAQ,CACN,GAAM,4BADR,+BAGA,6CAA4B,0BAAYA,WAAW,KAAvB,WAC5B,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,6hBAuBL,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,w4DAoDL,iBAAQ,CACN,GAAM,6BADR,gCAGA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,wb,4MAmBTJ,EAAWK,gBAAiB","file":"component---manual-java-script-enzyme-testing-md-7bcbd83ac814049dc632.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"testing-with-enzyme\"\n    }}>{`Testing with Enzyme`}</h1>\n    <p>{`React components allow unit tests in JS to be much easier.`}</p>\n    <p>{`These exampes require `}<inlineCode parentName=\"p\">{`sinonjs`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`jsdom`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`enzyme`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`mocha`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`chai`}</inlineCode></p>\n    <p>{`These are examples of the three APIs that you get with Enzyme. Remember, that a majority of the test cases will need `}<inlineCode parentName=\"p\">{`shallow`}</inlineCode>{`.`}</p>\n    <p>{`Testing lifecycle events, use `}<inlineCode parentName=\"p\">{`mount`}</inlineCode>{`.`}</p>\n    <p>{`If you need to test a component that gets rendered or returns just HTML, you can use `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{`.`}</p>\n    <p><em parentName=\"p\">{`File structure`}</em></p>\n    <ul>\n      <li parentName=\"ul\">{`test\n- repository_test.spec.js\n- github_widget.spec.js\n- user_image.spec.js`}</li>\n      <li parentName=\"ul\">{`scripts\n- mocha_runner.js`}</li>\n      <li parentName=\"ul\">{`package.json`}</li>\n      <li parentName=\"ul\">{`src\n- components\n- repositories.js`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"enz-1-testing-with-shallow\"\n    }}>{`ENZ-1: Testing with \"Shallow\"`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// package.json\n...\n\nNote: the --debug flag allows us to use the debugger statements and interact with the debugger through the command line\n\nNote: There is also a \\`node-intercept\\` that allows you to tap into Chrome Dev tools\n\n\"scripts\": {\n    ...\n    \"test\": \"mocha --debug --require scripts/mocha_runner.js ./test/**/*.spec.js\",\n    ...\n}\n...\n\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`// reposity_test.js\nimport React from 'react-native';\nimport { shallow } from 'enzyme';\nimport { expect } from 'chai';\n\n// import a component\nimport Repositories from '../src/components/repositories';\n\ndescribe('<Repositories />', () => {\n    it('should render one number of repos specified by top prop', () => {\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n        expect(wrapper.find(Repository)).to.have.length(2);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enz-2-testing-with-mount\"\n    }}>{`ENZ-2: Testing with \"Mount\"`}</h2>\n    <p>{`This requires use of `}<inlineCode parentName=\"p\">{`js-dom`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`// mocha_runner.js\n\nvar jsdom = require('jsdom').jsdom;\n\nvar exposedProperties = ['window', 'navigator', 'document'];\n\nglobal.document = jsdom('');\nglobal.window = document.defaultView;\nObject.keys(document.defaultView).forEach((property) => {\n    if (typeof global[property] === 'undefined') {\n        exposedProperties.push(property);\n        global[property] = document.defaultView[property];\n    }\n});\n\nglobal.navigator = {\n    userAgent: 'node.js'\n};\n\ndocumentRef = document;\n\nrequire('babel-core/register');\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`// github_widget.spec.js\nimport React from 'react-native';\nimport { mount } from 'enzyme';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\n// js dom has also been used as an example for these headless browser testing\n\n// import a component\nimport GithubWidget from '../src/components/GithubWidget';\nimport UserDetails from ...\n// import all the other components\n// found in the expect below\n...\n\ndescribe('<GithubWidget />', () => {\n    it('should render all sub-components', () => {\n        const wrapper = mount(<GithubWidget username=\"test\" />);\n        \n        expect(wrapper.containsAllMatchingElements([\n            <UserDetails />,\n            <UserStats />,\n            <hr />,\n            <Repositories />,\n            <Footer />\n        ])).to.equal(true);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n\n    it('should call componentDidMount once' () => {\n        // create a spy\n        sinon.spy(GithubWidget.prototype, 'componentDidMount');\n        mount(<GithubWidget username =\"test />\");\n        expect(GithubWidget.prototype.componentDidMount.calledOnce).to.equal(true);\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enz-3-testing-with-render\"\n    }}>{`ENZ-3: Testing with \"Render\"`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// user_image.spec.js\nimport React from 'react-native';\nimport { render } from 'enzyme';\nimport { expect } from 'chai';\n\n// Component\nimport UserImage from './UserImage';\n\ndescribe('<UserImage />', () => {\n    it('should have a <div /> element with .gh-widget-photo class', () => {\n        const wrapper = render(<UserImage />);\n        expect(wrapper.find('div').attr('class')).to.equal('gh-widget-photo');\n    });\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}