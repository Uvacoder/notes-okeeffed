{"version":3,"sources":["webpack:///../manual/System-Design/Data-Systems.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,sNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,iBAAQ,CACN,GAAM,UADR,UAGA,sBACE,kBAAIC,WAAW,MAAf,gEACA,kBAAIA,WAAW,MAAf,kGAEF,iBAAQ,CACN,GAAM,eADR,eAGA,sBACE,kBAAIA,WAAW,MAAf,oFACA,kBAAIA,WAAW,MAAf,0JACA,kBAAIA,WAAW,MAAf,uDAEF,iBAAQ,CACN,GAAM,eADR,eAGA,sBACE,kBAAIA,WAAW,MAAf,qFACA,kBAAIA,WAAW,MAAf,iDAEF,yHACA,sBACE,kBAAIA,WAAW,MAAf,mBACA,kBAAIA,WAAW,MAAf,oBACA,kBAAIA,WAAW,MAAf,wBACA,kBAAIA,WAAW,MAAf,mBACA,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,oBAEF,kLACA,sBACE,kBAAIA,WAAW,MAAf,+EAEF,iBAAQ,CACN,GAAM,mBADR,mBAGA,yDACA,sBACE,kBAAIA,WAAW,MAAf,eACA,kBAAIA,WAAW,MAAf,8CACA,kBAAIA,WAAW,MAAf,iBAEF,iBAAQ,CACN,GAAM,eADR,eAGA,sBACE,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,YACA,kBAAIA,WAAW,MAAf,wDAEF,iBAAQ,CACN,GAAM,8BADR,8BAGA,sBACE,kBAAIA,WAAW,MAAf,sBACA,kBAAIA,WAAW,MAAf,sCACA,kBAAIA,WAAW,MAAf,oDAEF,iBAAQ,CACN,GAAM,sBADR,uBAGA,sBACE,kBAAIA,WAAW,MAAf,0GACA,kBAAIA,WAAW,MAAf,yDACA,kBAAIA,WAAW,MAAf,uHACA,kBAAIA,WAAW,MAAf,8DAAmF,kBAAIA,WAAW,MAC9F,kBAAIA,WAAW,MAAf,yEAGN,iBAAQ,CACN,GAAM,WADR,WAGA,sBACE,kBAAIA,WAAW,MAAf,wCACA,kBAAIA,WAAW,MAAf,uMACA,kBAAIA,WAAW,MAAf,qFAEF,iBAAQ,CACN,GAAM,wBADR,wBAGA,sBACE,kBAAIA,WAAW,MAAf,sBACA,kBAAIA,WAAW,MAAf,yBACA,kBAAIA,WAAW,MAAf,sBACA,kBAAIA,WAAW,MAAf,iGACA,kBAAIA,WAAW,MAAf,8HACA,kBAAIA,WAAW,MAAf,oCAEF,iBAAQ,CACN,GAAM,8BADR,8BAGA,sBACE,kBAAIA,WAAW,MAAf,0EAEF,iBAAQ,CACN,GAAM,eADR,eAGA,sBACE,kBAAIA,WAAW,MAAf,4DAAiF,0BAAYA,WAAW,MAAvB,WAAjF,KACA,kBAAIA,WAAW,MAAf,oEACA,kBAAIA,WAAW,MAAf,0IAEF,iBAAQ,CACN,GAAM,gBADR,gBAGA,sBACE,kBAAIA,WAAW,MAAf,mHACA,kBAAIA,WAAW,MAAf,4CACA,kBAAIA,WAAW,MAAf,iGAAsH,kBAAIA,WAAW,MACjI,kBAAIA,WAAW,MAAf,yDACA,kBAAIA,WAAW,MAAf,uF,6MAOVJ,EAAWK,gBAAiB","file":"component---manual-system-design-data-systems-md-614a93c2267e19156f3a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"data-systems\"\n    }}>{`Data Systems`}</h1>\n    <h2 {...{\n      \"id\": \"basics\"\n    }}>{`Basics`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The aim is to keep them: Reliable, Scalable and Maintainable`}</li>\n      <li parentName=\"ul\">{`Data Systems knowledge includes understanding caches, search indexes, stream/batch processing`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"reliability\"\n    }}>{`Reliability`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Keeping data correctness, completeness across systems, performant and resilient.`}</li>\n      <li parentName=\"ul\">{`Fault vs Failure: Fault is a system failing to adhere to a design spec whereas failure means a system failure and requires failover backup procedures.`}</li>\n      <li parentName=\"ul\">{`It's better to measure the latency in percentiles.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"scalability\"\n    }}>{`Scalability`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`For many backends, the response time is dependent on the slowest server response.`}</li>\n      <li parentName=\"ul\">{`Elastic vs manual scaling: one is automated.`}</li>\n    </ul>\n    <p>{`The architecture for each large scale project is highly specific. It depends on factors such as:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Volume of reads`}</li>\n      <li parentName=\"ol\">{`Volume of writes`}</li>\n      <li parentName=\"ol\">{`Type of data to stor`}</li>\n      <li parentName=\"ol\">{`Data complexity`}</li>\n      <li parentName=\"ol\">{`Response time`}</li>\n      <li parentName=\"ol\">{`Access patterns`}</li>\n    </ol>\n    <p>{`Example: You could expect 100,000 req/s @ 1kB in size vs 3 req/s @ 2GB in size which equates to the same data throughput but very different requirements.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Load parameters identify which requests are common vs which ones are rare.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"maintainability\"\n    }}>{`Maintainability`}</h3>\n    <p>{`Remember these three principles:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Operability`}</li>\n      <li parentName=\"ol\">{`Simplicity (- think abstractions like SQL)`}</li>\n      <li parentName=\"ol\">{`Evolvability`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"data-models\"\n    }}>{`Data Models`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Relational`}</li>\n      <li parentName=\"ul\">{`Document`}</li>\n      <li parentName=\"ul\">{`Graph (this is essentially a subtype of relational)`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"pros-of-the-document-model\"\n    }}>{`Pros of the Document Model`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Schema flexibility`}</li>\n      <li parentName=\"ul\">{`Better performance due to locality`}</li>\n      <li parentName=\"ul\">{`Apps are generally closer to the data structure`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"storage--retrieval\"\n    }}>{`Storage + Retrieval`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Big difference in storage engines that are optimized for transactional vs analytical (think OLTP/OLAP)`}</li>\n      <li parentName=\"ul\">{`Indexes help find keys but generally slow down writes`}</li>\n      <li parentName=\"ul\">{`In-memory tress: examples red-black trees, AVL trees. We can make the storage engines to use these styles of trees.`}</li>\n      <li parentName=\"ul\">{`LSM Trees can be slow when looking up keys that don't exist`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Can be countered by \"Bloom Filters\" -> can tell if the key exists.`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"b-trees\"\n    }}>{`B-Trees`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Most common index used by databases.`}</li>\n      <li parentName=\"ul\">{`While log-structured indexes work in variable-size segments and written sequentially, B-Trees have fixed sized \"blocks\" or \"pages\" - this design corresponds to reflecting the underlying hardware.`}</li>\n      <li parentName=\"ul\">{`B-Tree variant \"fractal trees\" borrow log-structured ideas to reduce disk seeks.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"b-trees-vs-lsm-trees\"\n    }}>{`B-Trees vs LSM-Trees`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`B-Tree more mature`}</li>\n      <li parentName=\"ul\">{`LSM faster for writes`}</li>\n      <li parentName=\"ul\">{`B faster for reads`}</li>\n      <li parentName=\"ul\">{`B-Tree must write everything twice (write-ahead log and potential multi-writes to tree pages)`}</li>\n      <li parentName=\"ul\">{`Log structured indexes also rewrite data multiple times. This is known as \"write amplification\" and is a concern for SSDs.`}</li>\n      <li parentName=\"ul\">{`LSM trees compress files better`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"the-downsides-of-lsm-trees\"\n    }}>{`The downsides of LSM-Trees`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Compaction process can sometimes interfere with ongoing reads/writes.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"other-notes\"\n    }}>{`Other notes`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Secondary index normally not unique (consider the use of `}<inlineCode parentName=\"li\">{`user_id`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`R-Trees normally used for optimised geospatial query efficiency.`}</li>\n      <li parentName=\"ul\">{`LSM-Trees themselves do not handle updating. They essentially can only append and remove the stale data. B-Trees can update in place.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"olap-vs-oltp\"\n    }}>{`OLAP vs OLTP`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`A transaction needn't adhere to all principles of ACID. \"Transaction\" processing mean low latency read/writes.`}</li>\n      <li parentName=\"ul\">{`Commonly used with relational databases.`}</li>\n      <li parentName=\"ul\">{`Performance can be improved using vectorized processing (SIMD - single instruction multi data)`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Column compression can also make use of the L1 cache.`}</li>\n          <li parentName=\"ul\">{`Update-in-place like what B-Trees use are not possible with column compression.`}</li>\n        </ul></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}