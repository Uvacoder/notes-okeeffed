{"version":3,"sources":["webpack:///../manual/JavaScript/The-New-Hard-Parts.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,yNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mEADQ,sBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gHADQ,kBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8BADQ,uBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sFADQ,oBAItB,iBAAQ,CACN,GAAM,aADR,aAGA,8HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,gFAML,6HACA,8BACE,iBAAGA,WAAW,cAAd,4HAEF,uCACA,sBACE,kBAAIA,WAAW,MAAf,0CACA,kBAAIA,WAAW,MAAf,wCAEF,wKACA,4TACA,8BACE,iBAAGA,WAAW,cAAd,4EAEF,iBAAQ,CACN,GAAM,uCADR,uCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,sVAkBL,8BACE,iBAAGA,WAAW,cAAd,mFAEF,iBAAQ,CACN,GAAM,cADR,cAGA,+KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,yMAYL,4GAA2F,0BAAYA,WAAW,KAAvB,SAA3F,iEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oRAaL,8BACE,iBAAGA,WAAW,cAAd,6FAEF,8BACE,iBAAGA,WAAW,cAAd,+FAEF,iBAAQ,CACN,GAAM,oBADR,oBAGA,6FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iUAgBL,8BACE,iBAAGA,WAAW,cAAd,+EAEF,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,yQ,gNAmBTJ,EAAWK,gBAAiB","file":"component---manual-java-script-the-new-hard-parts-md-573607a14cfd663421be.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"the-new-hard-parts\"\n    }}>{`The New Hard Parts`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/javascript-new-hard-parts/\"\n        }}>{`FE Masters Course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://static.frontendmasters.com/resources/2018-05-23-javascript-new-hard-parts/new-hard-parts-slides.pdf\"\n        }}>{`Course Slides`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"http://csbin.io/iterators\"\n        }}>{`Iterator Exercises`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\"\n        }}>{`MDN yield Docs`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"iterators\"\n    }}>{`Iterators`}</h2>\n    <p>{`We regularly have lists/collections/data where we want to go through the elements and do something ie`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`for (let i = 0; i < numbers.length; i++) {\n  console.log(numbers[i]);\n}\n`}</code></pre>\n    <p>{`We're going to discover there's a new beautiful way of thinking about using each element one-by-one.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Programs store data and apply functonality to it. But there are two parts to applying functions to collections of data.`}</p>\n    </blockquote>\n    <p>{`The parts are:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The process of accessing each element.`}</li>\n      <li parentName=\"ol\">{`What we want to do to each element.`}</li>\n    </ol>\n    <p>{`Iterators automate the accessing of each element - so we can focus on what to do to each element - and make it available to us in a smooth way.`}</p>\n    <p>{`If we can create a function that stored numbers and each time we ran the function return the next element, it would let us think of our array/list as a stream/flow of data with our function returning the next element from our \"stream\" - this makes our code more readable and more functional.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Remember, functions can be returned from other functions in JavaScript.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"return-next-element-with-a-function\"\n    }}>{`Return Next Element with a Function`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Note: There will eventually be an error with this\n// that isn't currently handled.\nfunction createFunction(array) {\n  let i = 0;\n  const inner: {\n    next: function() {\n       const element = array[i];\n       i++;\n       return element;\n    }\n  }\n  return inner;\n}\n\nconst returnNextElement = createFunction([4, 5, 6]);\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Any function that returns the next element is known as an \"iterator function\".`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"generators\"\n    }}>{`Generators`}</h2>\n    <p>{`Once we start thinking of data as flows (picking elements one-by-one), we can rethink how we produce those flows. JS let's us do this with a function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function* createFlow() {\n  yield 4;\n  yield 5;\n  yield 6;\n}\n\nconst returnNextElement = createFlow();\nconst element1 = returnNextElement.next();\nconst element2 = returnNextElement.next();\n`}</code></pre>\n    <p>{`Yielding allows us to dynamically set what data flows out to us. The implication of `}<inlineCode parentName=\"p\">{`yield`}</inlineCode>{` is that the work that comes of a function is what is stored:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function* createFlow() {\n  const num = 10;\n  const newNum = yield num;\n  yield 5 + newNum;\n  yield 6;\n}\n\nconst returnNextElement = createFlow();\nconst element1 = returnNextElement.next(); // 10\nconst element2 = returnNextElement.next(2); // 7 - be wary of that\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Generators are described to be more towards the declarative side and not the imperative.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`A great insight was the idea of being able to infinitely calculate the fibonacci sequence.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"async-generators\"\n    }}>{`Async Generators`}</h2>\n    <p>{`We have the ability to pause and only restart when the data returns.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function doWhenDataReceived(value) {\n  returnNextElement.next(value)\n}\n\nfunction* createFlow() {\n  const data = yield fetch('http://twitter.com/will/tweets/1\\`)\n  console.log(data)\n}\n\nconst returnNextElement = createFlow()\nconst futureData = returnNextElement.next()\n\nfutureData.then(doWhenDataReceived)\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Important to note how this generate continues to keep things asynchronous.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"async-await\"\n    }}>{`Async Await`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function doWhenDataReceived(value) {\n  returnNextElement.next(value)\n}\n\nfunction* createFlow() {\n  console.log('Me first')\n  const data = await fetch('http://twitter.com/will/tweets/1\\`)\n  console.log(data)\n}\n\ncreateFlow()\nconsole.log('Me second')\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}