{"version":3,"sources":["webpack:///../manual/Scala/Scala-Values-Variables-Types.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,8NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oCADR,qCAGA,mFACA,mHACA,iBAAQ,CACN,GAAM,uBADR,uBAGA,oCAAmB,0BAAYC,WAAW,KAAvB,mCAAnB,wBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,0EAOL,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,WAApB,2CACA,kBAAIA,WAAW,MAAf,aAAkC,0BAAYA,WAAW,MAAvB,OAAlC,6DACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,OAApB,uEAEF,yDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,qEAOL,kFAAiE,0BAAYA,WAAW,KAAvB,OAAjE,KACA,iBAAQ,CACN,GAAM,2BADR,2BAGA,8EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,+cAiBL,sCAAqB,0BAAYA,WAAW,KAAvB,OAArB,QAA6E,0BAAYA,WAAW,KAAvB,OAA7E,sCAAmK,0BAAYA,WAAW,KAAvB,OAAnK,sEAAyR,0BAAYA,WAAW,KAAvB,OAAzR,2E,qNAKJJ,EAAWK,gBAAiB","file":"component---manual-scala-scala-values-variables-types-md-4be6983fb77c201ce158.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"scala-values-variables-and-types\"\n    }}>{`Scala Values, Variables and Types`}</h1>\n    <p>{`The presumes you have Scala installed on the local system.`}</p>\n    <p>{`This is just the basics on declaring variables in Scala and what data types are available.`}</p>\n    <h2 {...{\n      \"id\": \"declaring-variables\"\n    }}>{`Declaring Variables`}</h2>\n    <p>{`Create file `}<inlineCode parentName=\"p\">{`src/main/scala/Playground.scala`}</inlineCode>{` with the following.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`object Playground extends App {\n  val x: Int = 42\n  println(x)\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`println`}</inlineCode>{` will allow us to print to the console.`}</li>\n      <li parentName=\"ul\">{`Extending `}<inlineCode parentName=\"li\">{`App`}</inlineCode>{` allows us to run the file in the command line correctly.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`val`}</inlineCode>{` are immutable - this is the Scala and functional programming way.`}</li>\n    </ul>\n    <p>{`Say we remove the explicit type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`object Playground extends App {\n  val x = 42\n  println(x)\n}\n`}</code></pre>\n    <p>{`This still works as the compiler infers the type to be an `}<inlineCode parentName=\"p\">{`Int`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"declaring-various-types\"\n    }}>{`Declaring various types`}</h2>\n    <p>{`Below we will run through a declaration of each type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`object Playground extends App {\n  val x: Int = 42\n  val y: String = \"Hello, Friend!\"\n  val z: Boolean = true\n  val a: Char = 'a' // Note single quotes\n  val b: Short = 1234\n  val c: Long = 1234123412341234L // Note the L - similar to Java longs\n  val d: Float = 2.0f // Note the f - similar to Java\n  val e: Double = 2.14 // No marker needed\n\n  /* in order to mutate a variable */\n  var f: Int = 1\n  f = 2 // this is known as a side effect\n}\n`}</code></pre>\n    <p>{`Note that the `}<inlineCode parentName=\"p\">{`val`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{` keywords have different meanings. `}<inlineCode parentName=\"p\">{`val`}</inlineCode>{` is a constant and follows functional, immutable conventions while `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{` is mutable and changing a mutable variable is known as a side effect.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}