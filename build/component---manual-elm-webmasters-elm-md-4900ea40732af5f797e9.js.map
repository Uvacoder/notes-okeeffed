{"version":3,"sources":["webpack:///../manual/Elm/Webmasters-Elm.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-elm-webmasters-elm-md-4900ea40732af5f797e9.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"webmasters-elm\"\n    }}>{`Webmasters Elm`}</h1>\n    <h2 {...{\n      \"id\": \"costs\"\n    }}>{`Costs`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Learning a new language`}</li>\n      <li parentName=\"ol\">{`Smaller ecosystem`}</li>\n      <li parentName=\"ol\">{`Fewer Web APIs have first-class support`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"benefits\"\n    }}>{`Benefits`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Bundle size small`}</li>\n      <li parentName=\"ol\">{`Production Elm in the first week`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"elm\"\n    }}>{`Elm`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`JS Equivalent`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Elm`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`UI`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`view`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`State`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`model`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Async`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`update`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Utilities`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`core`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Packages`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`elm install`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"rendering-a-page\"\n    }}>{`Rendering a page`}</h2>\n    <h3 {...{\n      \"id\": \"compiling\"\n    }}>{`Compiling`}</h3>\n    <p>{`Compiles to JS.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`elm make Main.elm --output elm.js\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"user-interface-example\"\n    }}>{`User Interface Example`}</h2>\n    <p>{`Converting this to Elm:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let pluralize = (singular, plural, quantity) =>\n  quantity === 1 ? singular : plural;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`pluralize singular plural quantity =\n    if quantity == 1 then\n        singular\n    else\n        plural\n\nmain =\n    text (pluralize \"leaf\" \"leaves\" 1) -- parentheses are to disambiguate\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"part-1---example\"\n    }}>{`Part 1 - Example`}</h2>\n    <p>{`This basic example gives a short look at actually creating a working piece of code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`module Main exposing (main)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\n\n\nbanner =\n    div [ class \"banner\" ]\n        [ div [ class \"container\" ]\n            [ h1 [] [ text \"conduit\"]\n            , p [] [ text \"A place to share your knowledge.\"]\n            ]\n        ]\n\n\nfeed =\n    div [ class \"feed-toggle\" ] [ text \"(In the future weâ€™ll display a feed of articles here!)\" ]\n\n\nmain =\n    div [ class \"home-page\" ]\n        [ banner\n        , div [ class \"container page\" ]\n            [ div [ class \"row\" ]\n                [ div [ class \"col-md-9\" ] [ feed ]\n                , div [ class \"col-md-3\" ] []\n                ]\n            ]\n        ]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-elm-architecture\"\n    }}>{`The Elm Architecture`}</h2>\n    <p>{`Update, Model, View.`}</p>\n    <p>{`View is function that takes a `}<inlineCode parentName=\"p\">{`model`}</inlineCode>{` as a function.`}</p>\n    <p>{`Note that whatever message you use, you need to be consistent for `}<inlineCode parentName=\"p\">{`Update`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`View`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`type alias Msg =\n    { description: String\n    , data: String\n    }\n\nview : Model -> Html Msg\nview model =\n\n--\nupdate : Msg -> Model -> Model\nupdate msg model =\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-annotations\"\n    }}>{`Type Annotations`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`username = \"okeeffed\"\n\n-- typed example (Elm uses inference either way)\nusername : String\nusername = \"okeeffed\"\n\n-- alt example\nString.length : String -> Int\n\n-- name list\nnames : List String\nnames = [\"Sam\", \"Bob\", \"Bill\"]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`pluralize : String -> String -> Int -> String\n\n-- equivocal to\npluralize : String -> (String -> (Int -> String))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"case-expressions\"\n    }}>{`Case Expressions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`case model.tab of\n    \"YourFeed\" ->\n        -- show feed\n    \"GlobalFeed\" ->\n        -- show Global Feed\n    _ ->\n        -- show Tag Feed\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-types\"\n    }}>{`Custom Types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- creates completely distinct values\ntype Tab =\n    YourFeed\n    | GlobalFeed\n    | TagFeed\n\nyours : Tab\nyours =\n    YourFeed\n\n-- Turning types into functions\n\ntype Tab =\n    YourFeed\n    | GlobalFeed\n    | TagFeed String\n\n-- in the repl\n> TagFeed \"Happiness\"\nTagFeed \"Happiness\" : Tab\n> TagFeed\n<function> : String -> Tab\n`}</code></pre>\n    <p>{`Using Custom Types with updates:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- allows us to pass different data types\ntype Msg\n    = ClickedTag String\n    | ClickedPage Int\n\nupdate msg model =\n    case msg of\n        ClickedTag selectedTag ->\n            -- use tag here\n        ClickedPage page ->\n            -- use page here\n`}</code></pre>\n    <p>{`Summing it all up`}</p>\n    <p>{`Type | In Elm\ncase-expressions | case msg of\nEnumerations | type Bool = True | False\nContainers | type Msg = ClickedPage Int | ...\nVariant Functions | onClick (ClickedPage pageNumber)`}</p>\n    <h2 {...{\n      \"id\": \"maybe-overview\"\n    }}>{`Maybe Overview`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- List.head : List elem -> Maybe elem\nfirst users =\n    List.head users\n\n-- example case\ncase first newUsers of\n    Just user ->\n        String.length user\n    Nothing ->\n        0\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pipelines\"\n    }}>{`Pipelines`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`List.head (List.map (List.reverse (List.filter (\\\\x -> x < 5) [2, 4, 6])) negate)\n\n-- As pipeline\n[2, 4, 6]\n    |> List.filter (\\\\x -> x < 5)\n    |> List.reverse\n    |> List.map negate\n    |> List.head\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"decoding-json\"\n    }}>{`Decoding JSON`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- Import to understand custom type\ntype Result okVal errVal\n    = Ok okVal\n    | Err errVal\n\n-- similar to String.toint()\ncase decodeString Json.Decode.int \"42\" of\n    Ok num ->\n        -- Do something with Int\n    Err error ->\n        -- Do something with the error\n\ntype alias User =\n    { id : Int\n    , firstName : String\n    , lastName : String\n    }\n\nuser : Decoder User\nuser =\n    Json.Decode.succeed User\n        |> required \"user_id\" int\n        |> required \"first_name\" string\n        |> required \"last_name\" string\n\n-- Alternatively\nusers : Decoder (List User)\nusers =\n    list user\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"optional-and-nullable\"\n    }}>{`Optional and Nullable`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`type alias User =\n    { id : Int\n    , name : Maybe String\n    , email : String\n    }\n\nuser : Decoder User\nuser =\n    Json.Decode.succeed User\n        |> required \"user_id\" int\n        |> required \"name\" (nullable string)\n        |> required \"email\" string\n`}</code></pre>\n    <p>{`For an example that requires a list:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`Decode.succeed Metadata\n   |> required \"description\" string\n   |> required \"title\" string\n   |> required \"tagList\" (list string)\n   |> required \"favorited\" bool\n   |> required \"favoritesCound\" int\n   |> required \"createdAt\" Timestamp.iso8601Decoder\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tuples\"\n    }}>{`Tuples`}</h2>\n    <p>{`Serve the same purpose as records but with field `}<inlineCode parentName=\"p\">{`positions`}</inlineCode>{` instead of names.`}</p>\n    <p>{`There is a 3 limit max!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`x = Tuple.first (5, 7)\n(name, x, y) = (\"foo\", 5, 7)\n\nx = { x = 5, y = 7 }.x\n{ name, x, y } = { name = \"foo\", x = 5, y = 7 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"http-and-interacting-with-servers\"\n    }}>{`Http and interacting with servers`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`Http\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}