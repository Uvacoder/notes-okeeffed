{"version":3,"sources":["webpack:///../manual/Go/Go-Fizz-Buzz.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uBADR,uBAGA,4FACA,iBAAQ,CACN,GAAM,uBADR,uBAGA,+BAAc,0BAAYC,WAAW,KAAvB,qBAAd,6BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iuDAuDL,iBAAQ,CACN,GAAM,4BADR,4BAGA,mEAAkD,0BAAYA,WAAW,KAAvB,QAAlD,aAAgH,0BAAYA,WAAW,KAAvB,WAAhH,aACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gVAoBL,iBAAQ,CACN,GAAM,iBADR,iBAGA,8CAA6B,0BAAYA,WAAW,KAAvB,WAA7B,M,kMAKJJ,EAAWK,gBAAiB","file":"component---manual-go-go-fizz-buzz-md-4feda246f9df5776a032.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fizz-buzz-in-golang\"\n    }}>{`Fizz Buzz in Golang`}</h1>\n    <p>{`A basic implementation of the infamous Fizz Buzz with unit testing.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up-the-test\"\n    }}>{`Setting up the test`}</h2>\n    <p>{`Set up `}<inlineCode parentName=\"p\">{`fizz_buzz_test.go`}</inlineCode>{` with the following file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package fizzbuzz\n\nimport \"testing\"\n\nfunc TestReturnString(t *testing.T) {\n    expected := \"2\"\n    if observed := FizzBuzz(2); observed != expected {\n        t.Fatalf(\"FizzBuzz(2)) = %v, want %v\", observed, expected)\n    }\n}\nfunc TestFizz(t *testing.T) {\n    expected := \"Fizz\"\n    if observed := FizzBuzz(3); observed != expected {\n        t.Fatalf(\"FizzBuzz(3)) = %v, want %v\", observed, expected)\n    }\n}\n\nfunc TestBuzz(t *testing.T) {\n    expected := \"Buzz\"\n    if observed := FizzBuzz(5); observed != expected {\n        t.Fatalf(\"FizzBuzz(5)) = %v, want %v\", observed, expected)\n    }\n}\n\nfunc TestFizzBuzz(t *testing.T) {\n    expected := \"FizzBuzz\"\n    if observed := FizzBuzz(15); observed != expected {\n        t.Fatalf(\"FizzBuzz(15)) = %v, want %v\", observed, expected)\n    }\n}\n\n// BenchmarkFizzBuzz() is a benchmarking function. These functions follow the\n// form \\`func BenchmarkXxx(*testing.B)\\` and can be used to test the performance\n// of your implementation. They may not be present in every exercise, but when\n// they are you can run them by including the \\`-bench\\` flag with the \\`go test\\`\n// command, like so: \\`go test -v --bench . --benchmem\\`\n//\n// You will see output similar to the following:\n//\n// BenchmarkFizzBuzz    2000000000           0.46 ns/op\n//\n// This means that the loop ran 2000000000 times at a speed of 0.46 ns per loop.\n//\n// While benchmarking can be useful to compare different iterations of the same\n// exercise, keep in mind that others will run the same benchmarks on different\n// machines, with different specs, so the results from these benchmark tests may\n// vary.\nfunc BenchmarkFizzBuzz(b *testing.B) {\n    for i := 0; i < b.N; i++ {\n        FizzBuzz(15)\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"fizz-buzz-implementation\"\n    }}>{`Fizz Buzz implementation`}</h2>\n    <p>{`We will use the interger-to-ASCII function `}<inlineCode parentName=\"p\">{`itoa`}</inlineCode>{` from the `}<inlineCode parentName=\"p\">{`strings`}</inlineCode>{` library.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package fizzbuzz\n\nimport \"strconv\"\n\n// FizzBuzz should have a comment documenting it.\nfunc FizzBuzz(i int) string {\n    switch true {\n    case i%15 == 0:\n        return \"FizzBuzz\"\n    case i%3 == 0:\n        return \"Fizz\"\n    case i%5 == 0:\n        return \"Buzz\"\n    default:\n        return strconv.Itoa(i)\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"running-tests\"\n    }}>{`Running Tests`}</h2>\n    <p>{`In the directory, run `}<inlineCode parentName=\"p\">{`go test`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}