{"version":3,"sources":["webpack:///../manual/Algorithms/Caesar-Cipher.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,wrB,2MAmCTJ,EAAWK,gBAAiB","file":"component---manual-algorithms-caesar-cipher-md-8bfd41b6bfa6873c64ac.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"causar-cipher\"\n    }}>{`Causar Cipher`}</h1>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function CaesarCipher(str, num) {\n  // handle base case\n  if (num === 0) {\n    return str;\n  }\n\n  let finalStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (/[^a-zA-Z]/gi.test(str[i])) {\n      finalStr += str[i];\n      continue;\n    }\n\n    // 1. handle char code conversion\n    let charCode = str.charCodeAt(i) + num;\n    // 2. handle char code > a/A + 26\n    if (charCode > 90 && /[A-Z]/.test(str[i])) {\n      charCode = charCode - 26;\n    } else if (charCode > 122 && /[a-z]/.test(str[i])) {\n      charCode = charCode - 26;\n    }\n\n    // 3. handle str conversion from char code\n    finalStr += String.fromCharCode(charCode);\n  }\n\n  return finalStr;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}