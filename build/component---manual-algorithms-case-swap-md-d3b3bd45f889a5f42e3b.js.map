{"version":3,"sources":["webpack:///../manual/Algorithms/Case-Swap.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,wDADQ,wBAItB,iBAAQ,CACN,GAAM,YADR,YAGA,0CAAyB,0BAAYA,WAAW,KAAvB,iBAAzB,0HAA6M,0BAAYA,WAAW,KAAvB,eAA7M,oDACA,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,4CAKL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,gDAKL,iBAAQ,CACN,GAAM,UADR,UAGA,uCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iVAiBL,mCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,0mB,uMA4BTJ,EAAWK,gBAAiB","file":"component---manual-algorithms-case-swap-md-d3b3bd45f889a5f42e3b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"case-swap\"\n    }}>{`Case Swap`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.coderbyte.com/editor/Swap%20Case:Kotlin\"\n        }}>{`CoderByte - Kotlin`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"question\"\n    }}>{`Question`}</h2>\n    <p>{`Have the function `}<inlineCode parentName=\"p\">{`SwapCase(str)`}</inlineCode>{` take the str parameter and swap the case of each character. For example: if str is \"Hello World\" the output should be `}<inlineCode parentName=\"p\">{`hELLO wORLD`}</inlineCode>{`. Let numbers and symbols stay the way they are.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Input: \"Hello-LOL\"\nOutput: hELLO-lol\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Input: \"Sup DUDE!!?\"\nOutput: sUP dude!!?\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <p>{`In JavaScript:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function SwapCase(str) {\n  let retStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (/[a-z]/.test(str[i])) {\n      retStr += str[i].toUpperCase();\n    } else if (/[A-Z]/.test(str[i])) {\n      retStr += str[i].toLowerCase();\n    } else {\n      retStr += str[i];\n    }\n  }\n  // code goes here\n  return retStr;\n}\n`}</code></pre>\n    <p>{`In Kotlin:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun SwapCase(str: String): String {\n  val regexLower = Regex(pattern = \"[a-z]\")\n  val regexUpper = Regex(pattern = \"[A-Z]\")\n  val list = mutableListOf<String>()\n\n  for (i in str.indices) {\n    if (regexLower.containsMatchIn(str[i].toString())) {\n      list.add(str[i].toString().toUpperCase())\n    } else if (regexUpper.containsMatchIn(str[i].toString())) {\n      list.add(str[i].toString().toLowerCase())\n    } else {\n      list.add(str[i].toString())\n    }\n  }\n  // code goes here\n  return list.joinToString(\"\").trim();\n}\n\nfun main(args: Array<String>) {\n  println(SwapCase(readLine()))\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}