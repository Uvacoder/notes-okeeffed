{"version":3,"sources":["webpack:///../manual/Haskell/Syntax-In-Functions.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uBADR,uBAGA,iBAAQ,CACN,GAAM,oBADR,oBAGA,4KACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,qBADZ,0HAML,uEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,gGAML,kGACA,mFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,2GAML,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,wTASL,8CAA6B,0BAAYA,WAAW,KAAvB,aAA7B,cACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,8JASL,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,4WAUL,iBAAQ,CACN,GAAM,gBADR,iB,8MAOJJ,EAAWK,gBAAiB","file":"component---manual-haskell-syntax-in-functions-md-ba0e233961301fa19a42.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"syntax-in-functions\"\n    }}>{`Syntax in Functions`}</h1>\n    <h2 {...{\n      \"id\": \"pattern-matching\"\n    }}>{`Pattern matching`}</h2>\n    <p>{`When defining functions, you can define separate function bodies for different patterns. This leads to really neat code that's simple and readable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`lucky :: (Integral a) => a -> String\nlucky 7 = \"LUCKY NUMBER SEVEN!\"\nlucky x = \"Sorry, you're out of luck, pal!\"\n`}</code></pre>\n    <p>{`Here is a more useful example with factorials:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`factorial :: (Integral a) => a -> a\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)\n`}</code></pre>\n    <p>{`Note: Pattern matching can also fail if the fallback case is not defined.`}</p>\n    <p>{`Pattern matching can also happen with list comprehensions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`ghci> let xs = [(1,3), (4,3), (2,4), (5,3), (5,6), (3,1)]\nghci> [a+b | (a,b) <- xs]\n[4,7,6,8,11,4]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"guards\"\n    }}>{`Guards`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`bmiTell :: (RealFloat a) => a -> String\nbmiTell bmi\n    | bmi <= 18.5 = \"You're underweight, you emo, you!\"\n    | bmi <= 25.0 = \"You're supposedly normal. Pffft, I bet you're ugly!\"\n    | bmi <= 30.0 = \"You're fat! Lose some weight, fatty!\"\n    | otherwise   = \"You're a whale, congratulations!\"\n`}</code></pre>\n    <p>{`An example of a small `}<inlineCode parentName=\"p\">{`myCompare`}</inlineCode>{` function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`myCompare :: (Ord a) => a -> a -> Ordering\na \\`myCompare\\` b\n    | a > b     = GT\n    | a == b    = EQ\n    | otherwise = LT\n-- 3 \\`myCompare\\` 2 -> GT\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"where-bindings\"\n    }}>{`Where bindings`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`bmiTell :: (RealFloat a) => a -> a -> String\nbmiTell weight height\n    | bmi <= 18.5 = \"You're underweight, you emo, you!\"\n    | bmi <= 25.0 = \"You're supposedly normal. Pffft, I bet you're ugly!\"\n    | bmi <= 30.0 = \"You're fat! Lose some weight, fatty!\"\n    | otherwise   = \"You're a whale, congratulations!\"\n    where bmi = weight / height ^ 2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"let-bindings\"\n    }}>{`Let bindings`}</h2>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}