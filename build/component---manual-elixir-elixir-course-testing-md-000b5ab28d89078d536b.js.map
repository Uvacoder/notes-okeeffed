{"version":3,"sources":["webpack:///../manual/Elixir/Elixir-Course-Testing.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,wNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,2CADR,2CAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,mCACA,sBACE,kBAAIC,WAAW,MAAf,2CACA,kBAAIA,WAAW,MAAf,4DAEF,8BAAa,0BAAYA,WAAW,KAAvB,UAAb,gCAAgG,0BAAYA,WAAW,KAAvB,2BAAhG,qEAAyO,0BAAYA,WAAW,KAAvB,YAAzO,mCACA,2DAA0C,0BAAYA,WAAW,KAAvB,kBAA1C,KACA,kCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,kWAuBL,iBAAQ,CACN,GAAM,kBADR,kBAGA,4EACA,sBACE,kBAAIA,WAAW,MAAf,mBACA,kBAAIA,WAAW,MAAf,gBAEF,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,yIAWL,qGACA,2DAA0C,0BAAYA,WAAW,KAAvB,OAA1C,iDACA,4BAAW,0BAAYA,WAAW,KAAvB,kBAAX,iEAAuI,0BAAYA,WAAW,KAAvB,kBAAvI,KACA,0CAAyB,0BAAYA,WAAW,KAAvB,eAAzB,oDACA,wDAAuC,0BAAYA,WAAW,KAAvB,QAAvC,QAAgG,0BAAYA,WAAW,KAAvB,eAAhG,yDACA,wEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,wRAgBL,iBAAQ,CACN,GAAM,qBADR,qBAGA,sEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,sEAOL,qBAAG,0BAAYA,WAAW,KAAvB,WAAH,oDACA,iBAAQ,CACN,GAAM,cADR,cAGA,sCAAqB,0BAAYA,WAAW,KAAvB,mBAArB,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,kMAYL,iBAAQ,CACN,GAAM,oBADR,oBAGA,4BAAW,0BAAYA,WAAW,KAAvB,UAAX,oCAAkG,0BAAYA,WAAW,KAAvB,UAAlG,M,+MAKJJ,EAAWK,gBAAiB","file":"component---manual-elixir-elixir-course-testing-md-000b5ab28d89078d536b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"elixir-course-testing-and-documentation\"\n    }}>{`Elixir Course Testing And Documentation`}</h1>\n    <h2 {...{\n      \"id\": \"documentation\"\n    }}>{`Documentation`}</h2>\n    <p>{`Two types:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Module documentation: purpose of module`}</li>\n      <li parentName=\"ol\">{`Function documentation: purpose of individual functions`}</li>\n    </ol>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`ex_doc`}</inlineCode>{` as the required module, add `}<inlineCode parentName=\"p\">{`{:ex_doc, \"~> 0.21.1\"},`}</inlineCode>{` to you deps (or the latest version) and after fetching deps, run `}<inlineCode parentName=\"p\">{`mix docs`}</inlineCode>{` to generate the documentation.`}</p>\n    <p>{`Documentation can then be found at `}<inlineCode parentName=\"p\">{`doc/index.html`}</inlineCode>{`.`}</p>\n    <p>{`Examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule ModuleName.Queries do\n  @moduledoc \"\"\"\n  Provides Ecto queries for querying important Action Framework requirement.\n  \"\"\"\n\n  import Ecto.Query\n\n  @doc \"\"\"\n  Does a thing\n\n  ## Examples\n\n      iex> query = \"Hello, World!\"\n      iex> query\n      \"Hello, World!\"\n  \"\"\"\n  def hello_world() do\n    \"Hello, World!\"\n  end\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"elixir-testing\"\n    }}>{`Elixir Testing`}</h2>\n    <p>{`There are two distinct types of tests we can write:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Assertion tests`}</li>\n      <li parentName=\"ol\">{`Doc testing`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"example-test\"\n    }}>{`Example Test`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule Cards do\n  def create_deck do\n    values = [\"Ace\", \"Two\"]\n    suits = [\"Spades\", \"Clubs\"]\n  end\n\n  # ... more\nend\n`}</code></pre>\n    <p>{`Testing can be considered a first-class citizen. It comes built into Elixir.`}</p>\n    <p>{`When you generate the project with `}<inlineCode parentName=\"p\">{`mix`}</inlineCode>{`, you get a test folder put in automatically.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`cards_test.exs`}</inlineCode>{` file is specifically built for testing the functions used in `}<inlineCode parentName=\"p\">{`cards_test.exs`}</inlineCode>{`.`}</p>\n    <p>{`Note that running `}<inlineCode parentName=\"p\">{`elixir test`}</inlineCode>{` will end up with two tests run with 0 failures.`}</p>\n    <p>{`The \"mystery\" test cmes frm the `}<inlineCode parentName=\"p\">{`@doc`}</inlineCode>{` tag `}<inlineCode parentName=\"p\">{`## Examples`}</inlineCode>{` - it will run that chunk of code as if it is a test!`}</p>\n    <p>{`Example, the following code will run as a test:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`@doc \"\"\"\n  Divides a deck ito a hand and the remainder of the deck.\n\n## Examples\n\n    iex> deck = Card.create_deck\n    iex> {hand, deck} = Cards.deal(deck, 1)\n    iex> hand\n    [\"Ace of Spaces\"]\n\"\"\"\ndef deal(deck, hand_size) do\n  Enum.split(deck, hand_size)\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"important-tidbits\"\n    }}>{`Important Tidbits`}</h2>\n    <p>{`Worth noting for a basic Elixir test example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule CardsTest do\n  use ExUnit.Case\n  doctest Cards\nend\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`doctest`}</inlineCode>{` is used for testing the documentation examples.`}</p>\n    <h2 {...{\n      \"id\": \"case-tests\"\n    }}>{`Case Tests`}</h2>\n    <p>{`For the terms `}<inlineCode parentName=\"p\">{`use ExUnit.Case`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule CardsTest do\n  use ExUnit.Case\n  doctest Cards\n\n  test \"create_deck makes 20 cards\" do\n    deck_length = length(Cards.create_deck)\n    assert deck_length == 20\n  end\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"assert-vs-refute\"\n    }}>{`Assert vs Refute`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`refute`}</inlineCode>{` keyword is just the opposite of `}<inlineCode parentName=\"p\">{`assert`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}