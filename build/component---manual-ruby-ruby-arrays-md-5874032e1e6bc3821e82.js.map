{"version":3,"sources":["webpack:///../manual/Ruby/Ruby-Arrays.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,4MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,iBAAQ,CACN,GAAM,OADR,OAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,syCA4DL,iBAAQ,CACN,GAAM,6BADR,6BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,w5B,mMAwDTJ,EAAWK,gBAAiB","file":"component---manual-ruby-ruby-arrays-md-5874032e1e6bc3821e82.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"ruby-arrays\"\n    }}>{`Ruby Arrays`}</h1>\n    <h2 {...{\n      \"id\": \"map\"\n    }}>{`Map`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`# map.rb\nclass Map\n    def self.updatesVar(arr)\n        arr.map! {|x| x + \"!\"}\n        return arr\n    end\n\n    def self.doesNotUpdateVar(arr)\n        b = arr.map {|x| x + \"!\"}\n        return arr\n    end\n\n    def self.returnsNewArr(arr)\n        b = arr.map {|x| x + \"!\"}\n        return b\n    end\nend\n\n# map_test.rb\nbegin\n  gem 'minitest', '>= 5.0.0'\n  require 'minitest/autorun'\n  require_relative 'arrays'\nrescue Gem::LoadError => e\n  puts \"\\\\nMissing Dependency:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts 'Minitest 5.0 gem must be installed for the Ruby track.'\nrescue LoadError => e\n  puts \"\\\\nError:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts DATA.read\n  exit 1\nend\n\n# Common test data version: 1.1.0 be3ae66\nclass MapTest < Minitest::Test\n  def test_map_updates_var\n    # skip\n    arr = [\"a\",\"b\",\"c\",\"d\"]\n    expected = [\"a!\",\"b!\",\"c!\",\"d!\"]\n    assert_equal expected, Map.updatesVar(arr)\n  end\n\n  def test_map_does_not_update_var\n    # skip\n    arr = [\"a\",\"b\",\"c\",\"d\"]\n    expected = [\"a\",\"b\",\"c\",\"d\"]\n    assert_equal expected, Map.doesNotUpdateVar(arr)\n  end\n\n  def test_map_returns_new_arr\n    # skip\n    arr = [\"a\",\"b\",\"c\",\"d\"]\n    expected = [\"a!\",\"b!\",\"c!\",\"d!\"]\n    assert_equal expected, Map.returnsNewArr(arr)\n  end\nend\n\n__END__\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"other-important-functions\"\n    }}>{`Other important functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`a = [\"a\",\"b\",\"c\"]\n# => [\"a\", \"b\", \"c\"]\na.map! {|x| x + \"!\"}\n# => [\"a!\", \"b!\", \"c!\"]\nnum = [1, 2, 3, 4]\nnum.map! &-> (x) { x + 2 } # mapping as lambda\n# => [3, 4, 5, 6]\na = a.join(', ')\n# => \"a!, b!, c!\"\na = a.split(', ')\n# => [\"a!\", \"b!\", \"c!\"]\na = a.reverse()\n# => [\"c!\", \"b!\", \"a!\"]\nb = a.first() # a[0]\n# => [\"a!\"]\na += b\n# => [\"a!\", \"b!\", \"c!\", \"a!\"]\nfirst, *rest = a\n# first = [\"a!\"], rest = [\"b!\", \"c!\", \"a!\"]\na.take(1)\n# => [\"a!\"]\na.drop(1)\n# => [\"b!\", \"c!\", \"a!\"]\na.select{|x| x != \"a!\"}\n# => [\"b!\", \"c!\"]\na.select{|x| !x.include? \"a\"}\n# => [\"b!\", \"c!\"]\nnum = [1, 2, 3, 4]\nnum.map! &-> (x) { x > 3 }\n# => [4]\nc = num.reduce(0) {|x,y| x + y}\n# => 10\nnum = [4, 3, 2, 1]\nnum.sort!\n# => [1, 2, 3, 4]\nnum.size()\n# => 4\nnum.push(5)\n# => [1, 2, 3, 4, 5]\nnum.pop()\n# => 5\nnum.unshift(5)\n# => [5, 1, 2, 3, 4]\nnum.shift()\n# => 5\nnum.min()\n# => 1\nnum.max()\n# => 4\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}