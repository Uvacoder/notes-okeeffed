{"version":3,"sources":["webpack:///../manual/Stripe/Slim-Stripe-Configuration.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,4NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uCADR,uCAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sCADQ,0BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iEADQ,8BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8DADQ,0BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0DADQ,mBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mEADQ,8CAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,wCADQ,eAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,yCADQ,sBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gCADQ,eAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oHADQ,wBAItB,iBAAQ,CACN,GAAM,eADR,eAGA,+BAAc,0BAAYA,WAAW,KAAvB,YAAd,mGAAsK,0BAAYA,WAAW,KAAvB,iBAAtK,4DAA4R,0BAAYA,WAAW,KAAvB,SAA5R,OAAqV,0BAAYA,WAAW,KAAvB,YAArV,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,uWAcL,qEAAoD,0BAAYA,WAAW,KAAvB,wBAApD,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8ZAkBL,oDAAmC,0BAAYA,WAAW,KAAvB,cAAnC,YAAsG,0BAAYA,WAAW,KAAvB,yBAAtG,KACA,uCAAsB,0BAAYA,WAAW,KAAvB,uBAAtB,oBAA0G,0BAAYA,WAAW,KAAvB,gBAA1G,cACA,iBAAQ,CACN,GAAM,kBADR,mBAGA,4BAAW,0BAAYA,WAAW,KAAvB,QAAX,kGACA,iDAAgC,0BAAYA,WAAW,KAAvB,QAAhC,gDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,sDAKL,iBAAQ,CACN,GAAM,0CADR,0CAGA,sCAAqB,0BAAYA,WAAW,KAAvB,wBAArB,qEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,85CAuDL,gFAA+D,0BAAYA,WAAW,KAAvB,QAA/D,iIACA,kCAAiB,0BAAYA,WAAW,KAAvB,yFAAjB,qDAAwM,0BAAYA,WAAW,KAAvB,qBAAxM,kBACA,2EAA0D,0BAAYA,WAAW,KAAvB,uBAA1D,gDAA0K,0BAAYA,WAAW,KAAvB,WAA1K,c,mNAKJJ,EAAWK,gBAAiB","file":"component---manual-stripe-slim-stripe-configuration-md-bbbfb9bd0a90dce881e6.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"configuring-stripe-for-php-and-slim\"\n    }}>{`Configuring Stripe for PHP and Slim`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://getcomposer.org/download/\"\n        }}>{`Composer installation`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.slimframework.com/docs/v4/start/installation.html\"\n        }}>{`Getting started with Slim`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.slimframework.com/docs/v4/objects/request.html\"\n        }}>{`Request Object - Slim`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.php.net/manual/en/language.exceptions.php\"\n        }}>{`PHP Exceptions`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://akrabat.com/receiving-input-into-a-slim-4-application/\"\n        }}>{`Receiving input into a Slim 4 application`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/vlucas/phpdotenv\"\n        }}>{`PHP Dotenv`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stripe/stripe-php\"\n        }}>{`Stripe PHP Github`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/api\"\n        }}>{`Stripe API`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://hotexamples.com/examples/slim.http/Request/getParsedBody/php-request-getparsedbody-method-examples.html\"\n        }}>{`getParsedBody Slim`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"get-started\"\n    }}>{`Get Started`}</h2>\n    <p>{`Ensure `}<inlineCode parentName=\"p\">{`composer`}</inlineCode>{` is installed correctly and run the following. Note that you need to ensure that the downloaded `}<inlineCode parentName=\"p\">{`composer.phar`}</inlineCode>{` file from the installation instructions must be in your `}<inlineCode parentName=\"p\">{`$PATH`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`composer`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mkdir slim-stripe && cd slim-stripe\ncomposer require slim/slim:\"4.*\"\n# required to enable App::Run() etc without manual ServerRequest\ncomposer require slim/psr7\n# installing for Stripe\ncomposer require stripe/stripe-php\n# required to read dotenv vars\ncomposer require vlucas/phpdotenv\nmkdir -p src/public\ntouch src/public/index.php\ntouch .env\n`}</code></pre>\n    <p>{`To check Slim is up and working, add this to `}<inlineCode parentName=\"p\">{`src/public/index.php`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\nuse Psr\\\\Http\\\\Message\\\\ResponseInterface as Response;\nuse Psr\\\\Http\\\\Message\\\\ServerRequestInterface as Request;\nuse Slim\\\\Factory\\\\AppFactory;\n\nrequire __DIR__ . '/../../vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->get('/', function (Request $request, Response $response, $args) {\n    $response->getBody()->write(\"Hello world!\");\n    return $response;\n});\n\n$app->run();\n`}</code></pre>\n    <p>{`Once completed, change into `}<inlineCode parentName=\"p\">{`src/public`}</inlineCode>{` and run `}<inlineCode parentName=\"p\">{`php -S localhost:8080`}</inlineCode>{`.`}</p>\n    <p>{`If we now ping `}<inlineCode parentName=\"p\">{`curl localhost:8080`}</inlineCode>{` we will see our `}<inlineCode parentName=\"p\">{`Hello world!`}</inlineCode>{` response.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up-env\"\n    }}>{`Setting up .env`}</h2>\n    <p>{`Our `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file should contain our keys for development. Get these from your Stripe Developer dashboard.`}</p>\n    <p>{`Add the following to the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file in the root of your project directory:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`SK_TEST_KEY= sk_test...\nPK_TEST_KEY=pk_test...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"making-a-simple-charge-with-stripe-api\"\n    }}>{`Making a simple charge with Stripe API`}</h2>\n    <p>{`Let us update `}<inlineCode parentName=\"p\">{`src/public/index.php`}</inlineCode>{` to take a simple request to make a charge to our Stripe account.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\nuse Psr\\\\Http\\\\Message\\\\ResponseInterface as Response;\nuse Psr\\\\Http\\\\Message\\\\ServerRequestInterface as Request;\nuse Slim\\\\Factory\\\\AppFactory;\n\nrequire __DIR__ . '/../../vendor/autoload.php';\n\n$dotenv = Dotenv\\\\Dotenv::createImmutable(__DIR__ . '/../..');\n$dotenv->load();\n\n$stripeKey = getenv('SK_TEST_KEY');\n\\\\Stripe\\\\Stripe::setApiKey($stripeKey);\n\n$app = AppFactory::create();\n\n// Parse json, form data and xml\n$app->addBodyParsingMiddleware();\n$app->addRoutingMiddleware();\n$app->addErrorMiddleware(true, true, true);\n\n$app->get('/', function (Request $request, Response $response, $args) {\n    $response->getBody()->write(\"Hello world!\");\n    return $response;\n});\n\n$app->post('/api/charge', function (Request $request, Response $response, $args) {\n  try {\n    $data = $request->getParsedBody();\n\n    // parse attributes from JSON\n    $receiptEmail = $data['receiptEmail'];\n    $amount = $data['amount'];\n\n    // create the charge\n    $charge = \\\\Stripe\\\\Charge::create([\n      'amount' => $amount,\n      'currency' => 'usd',\n      'source' => 'tok_visa',\n      'receipt_email' => $receiptEmail\n    ]);\n\n    $response->getBody()->write('Successful charge');\n    $response->withStatus(201);\n    return $response;\n  } catch (Exception $e) {\n    $response->getBody()->write('Failed charge');\n    $response->withStatus(500);\n    return $response;\n  }\n});\n\n$app->run();\n`}</code></pre>\n    <p>{`Note that in the above example we are loading keys from `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{`, setting the Stripe API key, then using Slim 4's body parsing middleware to help us with parsing the request body from JSON.`}</p>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`http POST http://localhost:8080/api/charge amount:=500 receiptEmail=hello@example.com`}</inlineCode>{` (using HTTPie) from the console, we will get our `}<inlineCode parentName=\"p\">{`Successful charge`}</inlineCode>{` message back.`}</p>\n    <p>{`We can head to our dashboard on Stripe and head to `}<inlineCode parentName=\"p\">{`Developers > Events`}</inlineCode>{` to see the log of our successful charge for `}<inlineCode parentName=\"p\">{`US$5.00`}</inlineCode>{`. Hooray!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}