{"version":3,"sources":["webpack:///../manual/React/Context-API.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,6MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,iBAAQ,CACN,GAAM,QADR,SAGA,mDAAkC,0BAAYC,WAAW,KAAvB,YAAlC,QAA+F,0BAAYA,WAAW,KAAvB,YAA/F,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,wd,oMA0BTJ,EAAWK,gBAAiB","file":"component---manual-react-context-api-md-ed63db02fcff0117f1ae.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"context-api\"\n    }}>{`Context API`}</h1>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`Create context and use the `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Consumer`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nconst ThemeContext = React.createContext(\n  /* optional default value */\n);\nconst App = props => (\n  <ThemeContext.Provider value={{ primaryColor: green }}>\n    {props.children}\n  </ThemeContext.Provider>\n);\n\nconst ThemedButton = () => (\n  <ThemeContext.Consumer>\n    {value => (\n      <Button primaryColor={{ value.primaryColor }}>\n        I'm button using context!\n      </Button>\n    )}\n  </ThemeContext.Consumer>\n);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}