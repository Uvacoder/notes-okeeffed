{"version":3,"sources":["webpack:///../manual/GraphQL/Clientside-GraphQL-In-React.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-graph-ql-clientside-graph-ql-in-react-md-8bf693d8ae6b4f29cf16.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"clientside-graphql-in-react\"\n    }}>{`Clientside GraphQL in React`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://static.frontendmasters.com/resources/2019-10-14-full-stack-graphql/client-graphql-react.pdf\"\n        }}>{`Course Slides`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/FrontendMasters/fullstack-graphql\"\n        }}>{`Course Repo`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.apollographql.com/docs/react/data/mutations/\"\n        }}>{`Apollo Client - Mutation docs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.apollographql.com/docs/link/\"\n        }}>{`Apollo Link Docs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/APIs-guru/graphql-voyager\"\n        }}>{`GraphQL Voyager`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/APIs-guru/graphql-lodash\"\n        }}>{`GraphQL Lodash`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/OneGraph/graphiql-explorer\"\n        }}>{`Graphiql Explorer`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.onegraph.com/\"\n        }}>{`OneGraph`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://fly.io/\"\n        }}>{`fly.io - app on the edge`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/dotansimha/graphql-code-generator\"\n        }}>{`GraphQL Code Generator`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Purpose of GraphQL was to solve how I view can consume data in the exact shape required from the server.`}</p>\n    </blockquote>\n    <p>{`These days GraphQL is its own process to build schemas, its own language and more.`}</p>\n    <p>{`GraphQL is a spec that describes a declarative query language that your clients can use to ask an API for the exact data they want. This is achieved by creating a strongly typed Schema for your API, ultimate flexibility in how your API can resolve data, and client queries validated against your Schema.`}</p>\n    <p>{`There are several variations and implementations of that spec.`}</p>\n    <h2 {...{\n      \"id\": \"graphql-basics\"\n    }}>{`GraphQL Basics`}</h2>\n    <h3 {...{\n      \"id\": \"queries\"\n    }}>{`Queries`}</h3>\n    <p>{`Responsible for retrieving data. We give it an operation name, with optional arguments.`}</p>\n    <p>{`Operation names are unique names for the cliest side Query and Mutation operations. Used for client side chachingm indexing inside of tools like GraphQL playground, etc. Like naming your functions in JS vs keeping them anonymous.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query AllCharacters {\n  characters {\n    results {\n      name\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Variables with operations: we can also define arguments. We use the `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` to indicate we're using a placeholder, so to we could name an arg page `}<inlineCode parentName=\"p\">{`$page`}</inlineCode>{`. Query params can also take object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query AllCharacters($page: string) {\n  # takes query variable $page\n  characters(page: $page) {\n    results {\n      name\n    }\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"multiple-queries--mutations\"\n    }}>{`Multiple Queries & Mutations`}</h3>\n    <p>{`We can use aliases to change the return variable name. The following changes `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`fullName`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query AllCharacters($page: string) {\n  # takes query variable $page\n  characters(page: $page) {\n    results {\n      fullName: name\n    }\n  }\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note that you can do this for any of the query scopes ie `}<inlineCode parentName=\"p\">{`characters`}</inlineCode>{` could also change to `}<inlineCode parentName=\"p\">{`filteredCharacters: characters`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <p>{`A `}<inlineCode parentName=\"p\">{`Mutation`}</inlineCode>{` is used to alter data and can be declared like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`mutation CreateACharacter {\n  createCharacter() {\n\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"apollo-client\"\n    }}>{`Apollo Client`}</h2>\n    <p>{`Encapsulates HTTP logic used to interact with a GraphQL API. Doubles as a client side state management alternative as well. If you GraphQL API is also an Apollo Server, it provides some extra features. Offers a plug approach for extending its capabilities. Also framework independent.`}</p>\n    <p>{`Apollo no longer depends on Redux as well!`}</p>\n    <h3 {...{\n      \"id\": \"storing-api-data\"\n    }}>{`Storing API Data`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`By default, Apollo is going to store all the nodes flat by a unique ID. This also enables it to be easy to update the cache.`}</li>\n      <li parentName=\"ul\">{`Unique ID is defaulted to `}<inlineCode parentName=\"li\">{`.id`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`._id`}</inlineCode>{` from nodes. You can change this.`}</li>\n      <li parentName=\"ul\">{`Every node should send an `}<inlineCode parentName=\"li\">{`.id`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`._id`}</inlineCode>{`, or none at all. Or you have to customize that logic.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"client--querying\"\n    }}>{`Client + Querying`}</h3>\n    <p>{`Setting up the client:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// client.js\nimport { ApolloClient } from 'apollo-client';\n// the is the default cache\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport gql from 'graphql-tag';\n\nconst cache = new InMemoryCache();\n// tell the click where the server is\nconst link = new HttpLink({ uri: 'http://localhost:4000/' });\n\n// initialising the client\nconst client = new ApolloClient({\n  cache,\n  link,\n});\n\nconst query = gql\\`\n  {\n    # takes query variable $page\n    characters(page: $page) {\n      results {\n        id\n        name\n      }\n    }\n  }\n\\`;\n\nclient.query({ query }).then(result => console.log(result));\n\nexport default client;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"setting-up-the-provider\"\n    }}>{`Setting up the Provider`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n// the important parts\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport client from './client';\nimport App from './components/App';\nimport './index.css';\n\nconst Root = () => (\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>\n);\n\nReactDOM.render(<Root />, document.getElementById('app'));\n\nif (module.hot) {\n  module.hot.accept();\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"querying-and-mutation-data-from-react-hooks\"\n    }}>{`Querying and Mutation Data From React Hooks`}</h3>\n    <p>{`The important part for queries is using the `}<inlineCode parentName=\"p\">{`useQuery`}</inlineCode>{` hook ie `}<inlineCode parentName=\"p\">{`const pets = useQuery(GET_PETS);`}</inlineCode>{`.`}</p>\n    <p>{`For mutations, it is `}<inlineCode parentName=\"p\">{`const [createPet, newPet] = useMutation(CREATE_PET, options)`}</inlineCode>{`.`}</p>\n    <p>{`For more indepth information, checkout `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.apollographql.com/docs/react/data/mutations/\"\n      }}>{`Apollo's Mutation docs`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { useState } from 'react';\nimport gql from 'graphql-tag';\nimport PetBox from '../components/PetBox';\nimport NewPet from '../components/NewPet';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport Loader from '../components/Loader';\n\n// fragment used for reusable code\nconst PET_DETAILS = gql\\`\n  fragment PetDetails on Pet {\n    id\n    type\n    name\n    img\n    vacinated @client\n  }\n\\`;\n\nconst GET_PETS = gql\\`\n  query petsList($input: PetsInput) {\n    pets(input: $input) {\n      ...PetDetails\n    }\n  }\n  \\${PET_DETAILS}\n\\`;\n\nconst CREATE_PET = gql\\`\n  mutation CreatePet($input: NewPetInput!) {\n    addPet(input: $input) {\n      ...PetDetails\n    }\n  }\n  \\${PET_DETAILS}\n\\`;\n\nexport default function Pets() {\n  const [modal, setModal] = useState(false);\n  // consists of object data, loading, error\n  const pets = useQuery(GET_PETS);\n\n  const [createPet, newPet] = useMutation(CREATE_PET, {\n    update(\n      cache,\n      {\n        data: { addPet },\n      },\n    ) {\n      // this is the the integral part to the update\n      // of the pets var at the function scope level\n      const { pets } = cache.readQuery({ query: GET_PETS });\n\n      cache.writeQuery({\n        query: GET_PETS,\n        data: { pets: [addPet, ...pets] },\n      });\n    },\n  });\n\n  if (pets.loading) return <Loader />;\n  if (pets.error || newPet.error) return <p>ERROR</p>;\n\n  const onSubmit = input => {\n    setModal(false);\n    createPet({\n      // passing required variables for the createPet mutation\n      variables: { input },\n    });\n  };\n\n  const petsList = pets.data.pets.map(pet => (\n    <div className=\"col-xs-12 col-md-4 col\" key={pet.id}>\n      <div className=\"box\">\n        <PetBox pet={pet} />\n      </div>\n    </div>\n  ));\n\n  if (modal) {\n    return (\n      <div className=\"row center-xs\">\n        <div className=\"col-xs-8\">\n          <NewPet onSubmit={onSubmit} onCancel={() => setModal(false)} />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"page pets-page\">\n      <section>\n        <div className=\"row betwee-xs middle-xs\">\n          <div className=\"col-xs-10\">\n            <h1>Pets</h1>\n          </div>\n\n          <div className=\"col-xs-2\">\n            <button onClick={() => setModal(true)}>new pet</button>\n          </div>\n        </div>\n      </section>\n      <section>\n        <div className=\"row\">{petsList}</div>\n      </section>\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"caching--synchronicity\"\n    }}>{`Caching & Synchronicity`}</h2>\n    <p>{`We need to update the local cache for us to inform React to re-render with the updated data.`}</p>\n    <p>{`We can keep the cache in sync by:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Refetch matching queries after a mutation.`}</li>\n      <li parentName=\"ol\">{`Use update method on mutation. This is the standard approach.`}</li>\n      <li parentName=\"ol\">{`Watch Queries.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const [createPet, newPet] = useMutation(CREATE_PET, {\n  update(\n    cache,\n    {\n      data: { addPet },\n    },\n  ) {\n    // this is the the integral part to the update\n    // of the pets var at the function scope level\n    const { pets } = cache.readQuery({ query: GET_PETS });\n\n    cache.writeQuery({\n      query: GET_PETS,\n      data: { pets: [addPet, ...pets] },\n    });\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"optimistic-updates\"\n    }}>{`Optimistic Updates`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Your UI does not wait until after a mutation operation to update itself. Instead it anticipates the response from the API and proceeds as if the API call was sync. The API response replaces the generated one. This gives the illusions of being really fast.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"optimistic-loading\"\n    }}>{`Optimistic Loading`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport gql from 'graphql-tag';\n\n// used for optimistic UI\nconst delay = setContext(\n  request =>\n    new Promise((success, fail) => {\n      setTimeout(() => {\n        success();\n      }, 800);\n    }),\n);\n\nconst cache = new InMemoryCache();\nconst http = new HttpLink({\n  uri: 'http://localhost:4000/',\n});\n\n// adding in the delay via link\n// @see https://www.apollographql.com/docs/link/\nconst link = ApolloLink.from([delay, http]);\n\nconst client = new ApolloClient({\n  cache,\n  link,\n});\n\nexport default client;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"optimistic-repsonses\"\n    }}>{`Optimistic Repsonses`}</h3>\n    <p>{`This will optimistically add something to the cache.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// omitting other code for brevity\nconst onSubmit = input => {\n  setModal(false);\n  createPet({\n    // passing required variables for the createPet mutation\n    variables: { input },\n    // this is the object we can use to be optimistic\n    optimisticResponse: {\n      __typename: 'Mutation',\n      addPet: {\n        __typename: 'Pet',\n        id: Math.round(Math.random() * -1000000) + '',\n        type: input.type,\n        name: input.name,\n        img: 'https://via.placeholder.com/300',\n        vacinated: true,\n      },\n    },\n  });\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: If there is an error, Scott says you will need to clean the cache yourself.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"client-side-schemas\"\n    }}>{`Client Side Schemas`}</h2>\n    <p>{`We can extend the server schema through our options in the client by providing `}<inlineCode parentName=\"p\">{`typeDefs`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`resolvers`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport gql from 'graphql-tag';\n\nconst typeDefs = gql\\`\n  extend type Pet {\n    vacinated: Boolean!\n  }\n\\`;\n\nconst resolvers = {\n  Pet: {\n    vacinated: () => true,\n  },\n};\n\n// used for optimistic UI\nconst delay = setContext(\n  request =>\n    new Promise((success, fail) => {\n      setTimeout(() => {\n        success();\n      }, 800);\n    }),\n);\n\nconst cache = new InMemoryCache();\nconst http = new HttpLink({\n  uri: 'http://localhost:4000/',\n});\n\n// adding in the delay via link\n// @see https://www.apollographql.com/docs/link/\nconst link = ApolloLink.from([delay, http]);\n\nconst client = new ApolloClient({\n  cache,\n  link,\n  typeDefs,\n  resolvers,\n});\n\nexport default client;\n`}</code></pre>\n    <p>{`We then set a directive on a GraphQL tag to indicate that the value comes from the clientside:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// fragment used for reusable code\nconst PET_DETAILS = gql\\`\n  fragment PetDetails on Pet {\n    id\n    type\n    name\n    img\n    vacinated @client\n  }\n\\`;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"fragments\"\n    }}>{`Fragments`}</h2>\n    <p>{`\"Little pieces of something\". The below is a great example of them in action:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const PET_DETAILS = gql\\`\n  fragment PetDetails on Pet {\n    id\n    type\n    name\n    img\n    vacinated @client\n  }\n\\`;\n\nconst GET_PETS = gql\\`\n  query petsList($input: PetsInput) {\n    pets(input: $input) {\n      ...PetDetails\n    }\n  }\n  \\${PET_DETAILS}\n\\`;\n\nconst CREATE_PET = gql\\`\n  mutation CreatePet($input: NewPetInput!) {\n    addPet(input: $input) {\n      ...PetDetails\n    }\n  }\n  \\${PET_DETAILS}\n\\`;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"possible-directives\"\n    }}>{`Possible directives`}</h2>\n    <p>{`Out-of-the-box directions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const PET_DETAILS = gql\\`\n  fragment PetDetails on Pet {\n    id @skip\n    type @include\n    name\n    img\n    vacinated @client\n  }\n\\`;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tools\"\n    }}>{`Tools`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/APIs-guru/graphql-voyager\"\n        }}>{`GraphQL Voyager`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/APIs-guru/graphql-lodash\"\n        }}>{`GraphQL Lodash`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/OneGraph/graphiql-explorer\"\n        }}>{`Graphiql Explorer`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.onegraph.com/\"\n        }}>{`OneGraph`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://fly.io/\"\n        }}>{`fly.io - app on the edge`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/dotansimha/graphql-code-generator\"\n        }}>{`GraphQL Code Generator`}</a></li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}