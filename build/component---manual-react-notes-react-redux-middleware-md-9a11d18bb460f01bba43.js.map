{"version":3,"sources":["webpack:///../manual/React-Notes/React-Redux-Middleware.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,8NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iCADR,iCAMA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mCADQ,iCAEsB,kBAAIA,WAAW,MACrD,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uBADQ,sBAApB,MAEsC,mBAAGA,WAAW,MAAS,CACzD,KAAQ,qCAD0B,qCAFtC,MAIqD,mBAAGA,WAAW,MAAS,CACxE,KAAQ,2DADyC,+DAQ3D,iBAAQ,CACN,GAAM,qBADR,sBAGA,8JACA,+HACA,+EACA,0GACA,iBAAQ,CACN,GAAM,8BADR,gCAGA,sBACE,kBAAIA,WAAW,MAAf,aACA,kBAAIA,WAAW,MAAf,OACA,kBAAIA,WAAW,MAAf,gBACA,kBAAIA,WAAW,MAAf,UAEF,kGACA,qBAAG,sBAAQA,WAAW,KAAnB,iCACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kdAmBL,qBAAG,sBAAQA,WAAW,KAAnB,2BACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mRAeL,iBAAQ,CACN,GAAM,oDADR,sDAGA,yEACA,2LACA,8JACA,mJACA,qBAAG,sBAAQA,WAAW,KAAnB,iCACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,u7B,qNAwCTJ,EAAWK,gBAAiB","file":"component---manual-react-notes-react-redux-middleware-md-9a11d18bb460f01bba43.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-with-redux---middleware\"\n    }}>{`React with Redux - Middleware`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#react-with-redux---middleware\"\n        }}>{`React with Redux - Middleware`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#redmid-1-overview\"\n            }}>{`REDMID-1: Overview`}</a>{` - `}<a parentName=\"li\" {...{\n              \"href\": \"#-----redmid-11-component-set-up\"\n            }}>{`---- REDMID-1.1: Component Set up`}</a>{` - `}<a parentName=\"li\" {...{\n              \"href\": \"#-----redmid-12-controlled-components-and-binding-text\"\n            }}>{`---- REDMID-1.2: Controlled Components and Binding Text`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"redmid-1-overview\"\n    }}>{`REDMID-1: Overview`}</h2>\n    <p>{`In the last chapter, we saw some main ideas about Redux. Now, we want to create an app. We will have async (like AJAX) calls in this.`}</p>\n    <p>{`We're going to create a webpage that will search for cities and give back Temp, Pressure and Humidity.`}</p>\n    <p>{`We will use things like a line chart for the temp etc.`}</p>\n    <p>{`In general, the components won't make AJAX calls... we want Redux to that for us.`}</p>\n    <h3 {...{\n      \"id\": \"redmid-11-component-set-up\"\n    }}>{`REDMID-1.1: Component Set up`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`SearchBar`}</li>\n      <li parentName=\"ol\">{`App`}</li>\n      <li parentName=\"ol\">{`ForecastList`}</li>\n      <li parentName=\"ol\">{`Chart`}</li>\n    </ol>\n    <p>{`Ensure that within source, you have the folders that you are looking for.`}</p>\n    <p><strong parentName=\"p\">{`In containers > SearchBar.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\n\nexport default class SearchBar extends Component {\n    render() {\n        return (\n            <form className=\"input-group\">\n                <input />\n                <span className=\"input-group-btn\">\n                    <button type=\"submit\" className=\"btn btn-secondary\">\n                        Submit\n                    </button>\n                </span>\n            </form>\n        );\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`In components > app.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport SearchBar from '../containers/SearchBar.js';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div>\n                <SearchBar />\n            </div>\n        );\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"redmid-12-controlled-components-and-binding-text\"\n    }}>{`REDMID-1.2: Controlled Components and Binding Text`}</h3>\n    <p>{`To create the component level state. (not redux)`}</p>\n    <p>{`Remember, for event handlers, we need to set the callback function where the callback reference is \"this\", it will have the wrong context from the render section.`}</p>\n    <p>{`You can fix this in the constructor by let the instance of search bar to bind \"this\" and replace this.onInputChange with this result.`}</p>\n    <p>{`The other option sometimes would be to instead of using the constructor, we could us onChange={ () => this.onInputChange }`}</p>\n    <p><strong parentName=\"p\">{`In containers > SearchBar.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react'\n\nexport default class SearchBar extends Component {\n\n    contructor(props) {\n        super(props);\n\n        this.state = { term: '' };\n\n        this.onInputChage = this.onInputChange.bind(this);\n    }\n\n    onInputChange(event) {\n        console.log(event.target.value);\n        this.setState({ term: event.target.value });\n    }\n\n    render() {\n        return (\n            <form className=\"input-group\">\n                <input\n                    placeholder=\"Get a 5-day forecast in your favourite cities\"\n                    className=\"form-control\"\n                    value={this.state.term}\n                    onChange={this.onInputChange}\n                />\n                <span className=\"input-group-btn\">\n                    <button type=\"submit\" className=\"btn btn-secondary\">Submit</button>\n                </span>\n            </form>\n        )\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}