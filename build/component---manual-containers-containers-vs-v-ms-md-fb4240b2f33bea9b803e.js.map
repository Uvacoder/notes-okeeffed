{"version":3,"sources":["webpack:///../manual/Containers/Containers-vs-VMs.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,wNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qDADQ,iBAItB,iBAAQ,CACN,GAAM,6BADR,6BAGA,2UACA,8UACA,qHACA,saACA,iBAAQ,CACN,GAAM,uBADR,uBAGA,wGACA,oFACA,8GACA,iVACA,iBAAQ,CACN,GAAM,wBADR,yBAGA,2KACA,mG,+MAKJJ,EAAWK,gBAAiB","file":"component---manual-containers-containers-vs-v-ms-md-fb4240b2f33bea9b803e.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"containers-vs-vms\"\n    }}>{`Containers vs VMs`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://blog.netapp.com/blogs/containers-vs-vms/\"\n        }}>{`NetApp Blog`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"what-are-virtual-machines\"\n    }}>{`What are Virtual Machines`}</h2>\n    <p>{`VMs were born to run software on top of physical servers to emulate a particular hardware system. A hypervisor, or a virtual machine monitor, is software, firmware, or hardware that creates and runs VMs. It’s what sits between the hardware and the virtual machine and is necessary to virtualize the server.`}</p>\n    <p>{`Within each virtual machine runs a unique guest operating system. VMs with different operating systems can run on the same physical server — a UNIX VM can sit alongside a Linux VM, and so on. Each VM has its own binaries, libraries, and applications that it services, and the VM may be many gigabytes in size.`}</p>\n    <p>{`Some of the benefits of VMs is the ability to consolidate applications onto a single system.`}</p>\n    <p>{`Each VM includes a separate operating system image, which adds overhead in memory and storage footprint. As it turns out, this issue adds complexity to all stages of a software development lifecycle—from development and test to production and disaster recovery. This approach also severely limits the portability of applications between public clouds, private clouds, and traditional data centers.`}</p>\n    <h2 {...{\n      \"id\": \"what-are-containers\"\n    }}>{`What are Containers`}</h2>\n    <p>{`Containers provide a way to run isolated systems on a single server or host OS.`}</p>\n    <p>{`Containers sit on top of a physical server and its host OS.`}</p>\n    <p>{`Running containers share the host OS kernel and, usually, the binaries and libraries.`}</p>\n    <p>{`Shared components are read-only, therefore containers are considered \"light\". They are only megabytes in size and take just seconds to start, versus gigabytes and minutes for a VM. This enables use cases such as serveless applications to become very possible for deploying a container to run a specific function.`}</p>\n    <h2 {...{\n      \"id\": \"whats-the-difference\"\n    }}>{`What's the difference`}</h2>\n    <p>{`The main difference is that containers provide a way to virtualise an operating system so that multiple workloads can run on a single OS instance.`}</p>\n    <p>{`With VMs, the hardware is being virtualised to run multiple OS instances.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}