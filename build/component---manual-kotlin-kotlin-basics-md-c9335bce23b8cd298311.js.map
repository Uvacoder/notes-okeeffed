{"version":3,"sources":["webpack:///../manual/Kotlin/Kotlin-Basics.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-kotlin-kotlin-basics-md-c9335bce23b8cd298311.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"kotlin-basics\"\n    }}>{`Kotlin Basics`}</h1>\n    <p>{`This highlight just covers scenarios not entirely standardised to most programming languages eg it will not cover while loops etc.`}</p>\n    <h2 {...{\n      \"id\": \"kotlin-repl\"\n    }}>{`Kotlin REPL`}</h2>\n    <p>{`Brew install `}<inlineCode parentName=\"p\">{`kotlin`}</inlineCode>{` and then you'll have access to the REPL.`}</p>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`kotlinc`}</inlineCode>{` with no arguments to enter the REPL.`}</p>\n    <p>{`To compile and run code from the command line:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kotlinc hello.kt -include-runtime -d hello.jar\njava -jar hello.jar\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"hello-kotlin\"\n    }}>{`Hello, Kotlin`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun main(args: Array<String>) {\n  println(\"Hello, Kotlin!\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shift-operators\"\n    }}>{`Shift Operators`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`1 shl 3 // shift left\n32 shr 2 // shift right\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"math-functions\"\n    }}>{`Math Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import kotlin.math.*\n\nfun main(args: Array<String>) {\n  sin(45 * PI / 180) // 0.7071067811865475\n}\n\nsqrt(4.0) // 2.0\n\nmax(1,2) // 2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"naming\"\n    }}>{`Naming`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val number: Int = 10 // constants\n\nconst val reallyConstant: Int = 42 // top level keyword to mark it as compile-time constant\n\nvar variableNumber: Int = 42\nvariableNumber = 12 // allowed\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-conversion\"\n    }}>{`Type Conversion`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var integer: Int = 100\nvar decimal: Double = 12.5\ninteger = decimal // THROWS error\ninteger = decimal.toInt() // works nicer\n`}</code></pre>\n    <p>{`To do implicit conversion:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val hourlyRate: Double = 19.5\nval hoursWorked: Int = 10\nval totalCost: Double = hourlyRate * hoursWorked\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"chars-vs-strings\"\n    }}>{`Chars Vs Strings`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val characterA: Char = 'a' // must be single quotes\nval stringDog: String = \"Dog\" // must be double quotes\n`}</code></pre>\n    <p>{`String interpolation happens with `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var name = \"Dick\"\nvar message = \"Hello my name is $name!\" // \"Hello my name is Dick!\"\n`}</code></pre>\n    <p>{`Multiline strings:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`let bigString = \"\"\"\n  |You can have a string\n  |that contains multiple\n  |lines\n  |by\n  |doing this.\n  \"\"\".trimMargin()\nprintln(bigString)\n`}</code></pre>\n    <p>{`The above will print:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`You can have a string\nthat contains multiple\nlines\nby\ndoing this.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pair--triples\"\n    }}>{`Pair + Triples`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val coordinates: Pair<Int, Int> = Pair(2, 3)\nval coordinates3D = Triple(2, 3, 1)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"number-types\"\n    }}>{`Number types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val a: Short = 12\nval b: Byte = 120\nval c: Int = -100000\n\nval answer = a + b + c // Answer will be an Int\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"any-unit-and-nothing\"\n    }}>{`Any, Unit, and Nothing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val anyNum: Any = 1\nval anyString: Any = \"Yo\"\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Unit`}</inlineCode>{` is a special type which only ever represents one value: the Unit object. It is similar to the void type in Java, except it makes working with generics easier:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun add() {\n  val result = 2 + 2\n  println(result)\n}\n\n// same as\nfun add(): Unit {\n  val result = 2 + 2\n  println(result)\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Nothing`}</inlineCode>{` is a type that is helpful for declaring that a function not only doesn't return anything, but also never completes.`}</p>\n    <p>{`This can occur if a function either causes the program to stop completely by throwing an `}<inlineCode parentName=\"p\">{`Exception`}</inlineCode>{` or if it simply goes on forever without ever finishing.`}</p>\n    <h2 {...{\n      \"id\": \"control-logic\"\n    }}>{`Control Logic`}</h2>\n    <p>{`Worth noting if/else can be single line ie `}<inlineCode parentName=\"p\">{`val min = if (a < b) a else b`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"range\"\n    }}>{`Range`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val closedRange = 0..5 // (0,1,2,3,4,5)\nval halfOpenRange = 0 until 5 // (0,1,2,3,4)\nval decreasingRange = 5 downTo 0 // (5,4,3,2,1,0)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"repeat\"\n    }}>{`Repeat`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 1\nvar lastSum = 0\nrepeat(10) {\n  val temp = sum\n  sum += lastSum\n  lastSum = temp\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"stepping\"\n    }}>{`Stepping`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 0\nfor (i in 1..count step 2) {\n  sum += i\n}\n`}</code></pre>\n    <p>{`You could even `}<inlineCode parentName=\"p\">{`downTo`}</inlineCode>{` step:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 0\nfor (i in count downTo 1 step 2) {\n  sum += i\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"labelled-statements\"\n    }}>{`Labelled Statements`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 0\nfor (row in 0 until 8) {\n  if (row % 2 == 0) {\n    continue\n  }\n  for (column in 0 until 8) {\n    sum += row * column\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"when-expressions\"\n    }}>{`When Expressions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val number = 10\nwhen (number) {\n  0 -> println(\"Zero\")\n  else -> println(\"Non-zero\")\n}\n\n// multi-valued whens\nval string = \"Dog\"\nwhen (string) {\n  \"Cat\", \"Dog\" -> println(\"Animal is a house pet.\")\n  else -> println(\"Animal is not a house pet.\")\n}\n\n// when in range\ntimeOfDay = when (hourOfDay) {\n  in 0..5 -> \"Early morning\"\n  in 6..11 -> \"Morning\"\n  in 12..16 -> \"Afternoon\"\n  in 17..19 -> \"Evening\"\n  in 20..23 -> \"Late evening\"\n  else -> \"INVALID HOUR!\"\n}\n\n// conditions in when statements\nwhen {\n  x == 0 && y == 0 && z == 0 -> println(\"Origin\")\n  y == 0 && z == 0 -> println(\"On the x-axis at x = $x\")\n  x == 0 && z == 0 -> println(\"On the y-axis at y = $y\")\n  x == 0 && y == 0 -> println(\"On the z-axis at z = $z\")\n  else -> println(\"Somewhere in space at x = $x, y = $y, z = $z\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <p>{`Note that parameters are constants by default.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun printMyName() {\n  println(\"My name is Dick Lucas.\")\n}\n\n// with params\nfun printMultipleOfFive(value: Int) {\n  println(\"$value * 5 = \\${value * 5}\")\n}\nprintMultipleOfFive(10)\n\n// string interpolated\nfun printMultipleOf(multiplier: Int, andValue: Int) {\n  println(\"$multiplier * $andValue = \\${multiplier * andValue}\")\n}\nprintMultipleOf(4, 2)\n`}</code></pre>\n    <p>{`If a function consists solely of a single expression, you can assign the expression to the function using = while at the same time not using braces, a return type, or a return statement:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun multiplyInferred(number: Int, multiplier: Int) = number * multiplier\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"overloading\"\n    }}>{`Overloading`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun getValue(value: Int): Int {\n  return value + 1\n}\nfun getValue(value: String): String {\n  return \"The value is $value\"\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"functions-as-variables\"\n    }}>{`Functions As Variables`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun add(a: Int, b: Int): Int {\n  return a + b\n}\n\nvar function = ::add\nfunction(4,2) // works\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}