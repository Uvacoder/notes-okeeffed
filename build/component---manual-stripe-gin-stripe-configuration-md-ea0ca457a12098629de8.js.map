{"version":3,"sources":["webpack:///../manual/Stripe/Gin-Stripe-Configuration.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,2NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mCADR,mCAGA,iHACA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,6DADQ,mBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,6DADQ,eAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0CADQ,yBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0EADQ,oCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qCADQ,eAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qCADQ,0BAItB,iBAAQ,CACN,GAAM,cADR,cAGA,oHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,8KASL,iBAAQ,CACN,GAAM,qBADR,sBAGA,oIACA,mLACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yqDAqEL,iBAAQ,CACN,GAAM,wBADR,wBAGA,kEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,qBAIL,iDAAgC,0BAAYA,WAAW,KAAvB,yFAAhC,wCAA0M,0BAAYA,WAAW,KAAvB,wBAA1M,0B,kNAKJJ,EAAWK,gBAAiB","file":"component---manual-stripe-gin-stripe-configuration-md-ea0ca457a12098629de8.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"golang-gin-stripe-configuration\"\n    }}>{`Golang Gin Stripe Configuration`}</h1>\n    <p>{`This is a small \"Hello, World!\" to show a charge being made for Golang + Gin web server.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://godoc.org/github.com/stripe/stripe-go#CardParams\"\n        }}>{`Go Docs Stripe`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://godoc.org/github.com/stripe/stripe-go#CardParams\"\n        }}>{`Stripe API`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/testing#cards\"\n        }}>{`Stripe Testing Cards`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stripe/stripe-go/blob/master/charge/client_test.go\"\n        }}>{`Github Stripe Go Charge Testing`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/gin-gonic/gin\"\n        }}>{`Gin Github`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/joho/godotenv\"\n        }}>{`Golang Dotenv Github`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"setting-up\"\n    }}>{`Setting up`}</h2>\n    <p>{`We need a few libs to get this all going. Run the following to fetch prerequisite packages:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# Gin server lib\ngo get -u github.com/gin-gonic/gin\n# Stripe Go API\ngo get github.com/stripe/stripe-go\n# Dotenv package for Golang\ngo get github.com/joho/godotenv\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-maingo\"\n    }}>{`Setting up main.go`}</h2>\n    <p>{`The Golang API (in my opinion) has some more complexity as opposed to others for setting up a basic charge.`}</p>\n    <p>{`Reading over their tests (like resource `}{`[4]`}{`) is the perfect way to see how to conform and adhere to the types -- particularly for our basic example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n        \"log\"\n        \"net/http\"\n        \"os\"\n\n        \"github.com/gin-gonic/gin\"\n        \"github.com/joho/godotenv\"\n        \"github.com/stripe/stripe-go\"\n        \"github.com/stripe/stripe-go/charge\"\n)\n\n// ChargeJSON incoming data for Stripe API\ntype ChargeJSON struct {\n        Amount       int64  \\`json:\"amount\"\\`\n        ReceiptEmail string \\`json:\"receiptEmail\"\\`\n}\n\nfunc main() {\n  // load .env file\n  err := godotenv.Load()\n  if err != nil {\n    log.Fatal(\"Error loading .env file\")\n  }\n\n  // set up server\n  r := gin.Default()\n\n  // basic hello world GET route\n  r.GET(\"/\", func(c *gin.Context) {\n    c.JSON(200, gin.H{\n            \"message\": \"Hello, World!\",\n    })\n  })\n\n  // our basic charge API route\n  r.POST(\"/api/charge\", func(c *gin.Context) {\n    // we will bind our JSON body to the \\`json\\` var\n    var json ChargeJSON\n    c.BindJSON(&json)\n\n    // Set Stripe API key\n    apiKey := os.Getenv(\"SK_TEST_KEY\")\n    stripe.Key = apiKey\n\n    // Attempt to make the charge.\n    // We are setting the charge response to _\n    // as we are not using it.\n    _, err := charge.New(&stripe.ChargeParams{\n      Amount:       stripe.Int64(json.Amount),\n      Currency:     stripe.String(string(stripe.CurrencyUSD)),\n      Source:       &stripe.SourceParams{Token: stripe.String(\"tok_visa\")}, // this should come from clientside\n      ReceiptEmail: stripe.String(json.ReceiptEmail)})\n\n    if err != nil {\n      // Handle any errors from attempt to charge\n      c.String(http.StatusBadRequest, \"Request failed\")\n      return\n    }\n\n    c.String(http.StatusCreated, \"Successfully charged\")\n  })\n\n  r.Run(\":8080\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"making-a-test-charge\"\n    }}>{`Making A Test Charge`}</h2>\n    <p>{`We can run our server with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`go run main.go\n`}</code></pre>\n    <p>{`In another terminal, run `}<inlineCode parentName=\"p\">{`http POST http://localhost:8080/api/charge amount:=500 receiptEmail=hello@example.com`}</inlineCode>{` (using HTTPie) and we will get back `}<inlineCode parentName=\"p\">{`Successfully charged`}</inlineCode>{`! Hooray! We made it.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}