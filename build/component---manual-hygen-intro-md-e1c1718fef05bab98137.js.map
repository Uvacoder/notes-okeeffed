{"version":3,"sources":["webpack:///../manual/Hygen/intro.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,uMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,oKACA,iBAAQ,CACN,GAAM,SADR,SAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qBADQ,mBAItB,iBAAQ,CACN,GAAM,SADR,SAGA,8DACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,qBAEL,4CAA2B,0BAAYA,WAAW,KAAvB,cAA3B,4CACA,4BAAW,0BAAYA,WAAW,KAAvB,cAAX,yCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,y8BA0CL,0JACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,wJASL,wGAAuF,0BAAYA,WAAW,KAAvB,aAAvF,0BACA,qFAAoE,0BAAYA,WAAW,KAAvB,yBAApE,KACA,iBAAQ,CACN,GAAM,0BADR,2BAGA,kEAAiD,0BAAYA,WAAW,KAAvB,aAAjD,UACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,4OAeL,oHAAmG,0BAAYA,WAAW,KAAvB,QAAnG,QAA4J,0BAAYA,WAAW,KAAvB,WAA5J,4DAA4Q,0BAAYA,WAAW,KAAvB,gBAA5Q,WACA,+HAA8G,0BAAYA,WAAW,KAAvB,gBAA9G,uBAA8L,0BAAYA,WAAW,KAAvB,eAA9L,eACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oEAML,yCAAwB,0BAAYA,WAAW,KAAvB,oBAAxB,yBAA8G,0BAAYA,WAAW,KAAvB,6DAA9G,qDAAyQ,0BAAYA,WAAW,KAAvB,mCAAzQ,uCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0KAUL,8BAAa,0BAAYA,WAAW,KAAvB,eAAb,QAA6E,0BAAYA,WAAW,KAAvB,kBAA7E,sFACA,yJ,8LAKJJ,EAAWK,gBAAiB","file":"component---manual-hygen-intro-md-e1c1718fef05bab98137.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"intro-to-hygen\"\n    }}>{`Intro to Hygen`}</h1>\n    <p>{`Hygen is a really great template engine that allows us to harness the power of multiple JS libraries and use them to make our lives easier.`}</p>\n    <h2 {...{\n      \"id\": \"links\"\n    }}>{`Links`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://hygen.io/\"\n        }}>{`Hygen.io site`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"setup\"\n    }}>{`Setup`}</h2>\n    <p>{`First, ensure that you install Hygen.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm i -g hygen\n`}</code></pre>\n    <p>{`Hygen then uses the `}<inlineCode parentName=\"p\">{`_templates`}</inlineCode>{` folder on direction for what to create.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`_templates`}</inlineCode>{` folder may have a structure like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`_templates\n└── react\n    ├── component\n    │   ├── mocha.ejs.t\n    │   ├── prompt.js\n    │   ├── puppeteer.ejs.t\n    │   ├── readme.ejs.t\n    │   ├── story.ejs.t\n    │   ├── styles.ejs.t\n    │   └── view.ejs.t\n    ├── component-promptless\n    │   ├── mocha.ejs.t\n    │   ├── puppeteer.ejs.t\n    │   ├── readme.ejs.t\n    │   ├── story.ejs.t\n    │   ├── styles.ejs.t\n    │   └── view.ejs.t\n    ├── multi-component\n    │   ├── container.ejs.t\n    │   ├── default.ejs.t\n    │   ├── docs.ejs.t\n    │   ├── mocha.ejs.t\n    │   ├── prompt.js\n    │   ├── puppeteer.ejs.t\n    │   ├── readme.ejs.t\n    │   ├── typeOne.ejs.t\n    │   ├── typeTwo.ejs.t\n    │   └── view.ejs.t\n    ├── reducer\n    │   ├── prompt.js\n    │   └── reducer.ejs.t\n    └── redux-component\n        ├── container.ejs.t\n        ├── mocha.ejs.t\n        ├── prompt.js\n        ├── puppeteer.ejs.t\n        ├── readme.ejs.t\n        ├── story.ejs.t\n        └── view.ejs.t\n`}</code></pre>\n    <p>{`How this works in practise is that you can invoke the following calls and Hygen will generate those files according to the rules:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`# Examples\n\n# Generate the files from react > components\nhygen react component\n# Generate the files from react > reducer\nhygen react reducer\n`}</code></pre>\n    <p>{`Hygen can work using a prompt or without one. I recommend going with, and using `}<inlineCode parentName=\"p\">{`prompt.js`}</inlineCode>{` to set the questions.`}</p>\n    <p>{`For an example from start to finish, I will demonstate using `}<inlineCode parentName=\"p\">{`hygen react component`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"-hygen-react-component\"\n    }}>{`> hygen react component`}</h2>\n    <p>{`Running the command will first look for a `}<inlineCode parentName=\"p\">{`prompt.js`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`module.exports = [\n    {\n        type: 'input',\n        name: 'name',\n        message: \"What's the name?\"\n    },\n    {\n        type: 'input',\n        name: 'message',\n        message: \"What's the message?\"\n    }\n];\n`}</code></pre>\n    <p>{`Hygen uses Inquirer (which in turn uses RxJS) to create prompts. In this example, answering `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{` will in turn create variables that are used thorugh the `}<inlineCode parentName=\"p\">{`[file].ejs.t`}</inlineCode>{` files.`}</p>\n    <p>{`Hygen will then go through the rest of the files and export them to where is defined at the top of the `}<inlineCode parentName=\"p\">{`[file].ejs.t`}</inlineCode>{` file. For example, `}<inlineCode parentName=\"p\">{`mocha.ejs.t`}</inlineCode>{` will have:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`---\nto: src/components/<%= name %>/<%= name %>.mocha.js\n---\n`}</code></pre>\n    <p>{`If we enter name `}<inlineCode parentName=\"p\">{`PageTestNewFiles`}</inlineCode>{`, it will output file `}<inlineCode parentName=\"p\">{`src/components/PageTestNewFiles/PageTestNewFiles.mocha.js`}</inlineCode>{`. This will continue for all the files, and so in `}<inlineCode parentName=\"p\">{`src/components/PageTestNewFiles`}</inlineCode>{` we will end up with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Javascript\"\n      }}>{`PageTestNewFiles\n├── PageTestNewFiles.mocha.js\n├── PageTestNewFiles.puppeteer.js\n├── PageTestNewFiles.storybook.js\n├── README.md\n├── index.js\n└── styles.scss\n`}</code></pre>\n    <p>{`Where `}<inlineCode parentName=\"p\">{`<%= name %>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<%= message %>`}</inlineCode>{` is found throughout those files will be in turn replaced with the entered values.`}</p>\n    <p>{`If there are any issues with the Hygen generated files, go to the template file and change the templates to resolve any issues.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}