{"version":3,"sources":["webpack:///../manual/Unity/How-To-Make-A-Video-Game.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-unity-how-to-make-a-video-game-md-35b6b0d814af6e009069.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-to-make-a-video-game\"\n    }}>{`How to make a video game`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#how-to-make-a-video-game\"\n        }}>{`How to make a video game`}</a>{` - `}<a parentName=\"li\" {...{\n          \"href\": \"#what-is-a-game-engine\"\n        }}>{`What is a game engine?`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#part-2\"\n            }}>{`Part 2`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#unity-interface\"\n                }}>{`Unity Interface`}</a><ul parentName=\"li\">\n                  <li parentName=\"ul\"><a parentName=\"li\" {...{\n                      \"href\": \"#prefabs\"\n                    }}>{`Prefabs`}</a></li>\n                </ul></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#setup-the-project\"\n                }}>{`Setup the project`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#navigating-the-scene-view\"\n                }}>{`Navigating the Scene View`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#position-the-camera\"\n                }}>{`Position the camera`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#image-effects-and-asset-stores\"\n                }}>{`Image effects and asset stores`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#programming-games\"\n            }}>{`Programming Games`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#programming-with-c-with-unity\"\n                }}>{`Programming with C# with Unity`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#gather-player-input\"\n                }}>{`Gather Player Input`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#moving-a-player-with-animation\"\n                }}>{`Moving a player with animation`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#quaternions\"\n                }}>{`Quaternions`}</a><ul parentName=\"li\">\n                  <li parentName=\"ul\"><a parentName=\"li\" {...{\n                      \"href\": \"#target-rotation\"\n                    }}>{`Target rotation`}</a></li>\n                </ul></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#making-a-follow-camera\"\n                }}>{`Making a follow camera`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#section-3\"\n            }}>{`Section 3`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#adding-the-flies-to-the-swamp\"\n                }}>{`Adding the flies to the swamp`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#adding-the-fly-pickup\"\n                }}>{`Adding the Fly Pickup`}</a><ul parentName=\"li\">\n                  <li parentName=\"ul\"><a parentName=\"li\" {...{\n                      \"href\": \"#pickup-particles\"\n                    }}>{`Pickup Particles`}</a></li>\n                </ul></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#creating-the-enemy-in-the-game\"\n                }}>{`Creating the enemy in the game`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#monitor-player-health\"\n                }}>{`Monitor Player Health`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#managing-the-game-state\"\n                }}>{`Managing the game state`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#adding-audio\"\n            }}>{`Adding Audio`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#game-audio\"\n                }}>{`Game audio`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#controlling-sounds-on-game-objects\"\n                }}>{`Controlling sounds on game objects`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#audio-mixing\"\n                }}>{`Audio mixing`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#exporting-the-game\"\n                }}>{`Exporting the game`}</a></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <p>{`How are games made?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Game designers`}</li>\n      <li parentName=\"ul\">{`Game artists`}</li>\n      <li parentName=\"ul\">{`Game developers`}</li>\n    </ul>\n    <p>{`These roles can be between one or thousands of people.`}</p>\n    <p>{`Game artists deal with what you see and hear in the game.`}</p>\n    <h3 {...{\n      \"id\": \"what-is-a-game-engine\"\n    }}>{`What is a game engine?`}</h3>\n    <p>{`Game engines help deal with things like the physics and rendering graphics.`}</p>\n    <p>{`A game engine is a framework for building games that helps coordinate things like assets and gives you all the tools you need to start coding.`}</p>\n    <p>{`A game engine is not a 3D art engine.`}</p>\n    <p>{`We are Unity as it is easier to learn when you are just getting started.`}</p>\n    <h2 {...{\n      \"id\": \"part-2\"\n    }}>{`Part 2`}</h2>\n    <h3 {...{\n      \"id\": \"unity-interface\"\n    }}>{`Unity Interface`}</h3>\n    <p>{`Create a `}<inlineCode parentName=\"p\">{`_Scenes`}</inlineCode>{` folder.`}</p>\n    <p>{`Game assets are `}<inlineCode parentName=\"p\">{`a piece of media for the game`}</inlineCode>{`. This could be sounds, scripts or models etc.`}</p>\n    <h4 {...{\n      \"id\": \"prefabs\"\n    }}>{`Prefabs`}</h4>\n    <p>{`Stores several objects together. An example `}<inlineCode parentName=\"p\">{`prefab`}</inlineCode>{` is the frog which contains the 3d model, the texture and the animation together.`}</p>\n    <h3 {...{\n      \"id\": \"setup-the-project\"\n    }}>{`Setup the project`}</h3>\n    <p>{`Games use `}<inlineCode parentName=\"p\">{`real time rendering`}</inlineCode>{` where it is drawn at the frame rate. Generally you want to aim for 60fps or higher. This will make is look as smooth as possible.`}</p>\n    <p>{`We can go to `}<inlineCode parentName=\"p\">{`Window > Lighting > Settings`}</inlineCode>{` to adjust things about how the scene is lit.`}</p>\n    <p>{`To adjust the player settings go to `}<inlineCode parentName=\"p\">{`Edit > Project Settings > Player`}</inlineCode>{`.`}</p>\n    <p>{`For quality, go to `}<inlineCode parentName=\"p\">{`Edit > Project Settings > Quality`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"navigating-the-scene-view\"\n    }}>{`Navigating the Scene View`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`environment`}</inlineCode>{` prefab links a bunch of Maya elements and groups them as a prefab.`}</p>\n    <p>{`Our environment prefab already has a light associated with it. Ensure after adding that you re-generate the light in the settings.`}</p>\n    <p>{`Anything with a green square is outlining a game object.`}</p>\n    <p>{`After selecting an object, you can use the 3d axis to change the transform of the axis.`}</p>\n    <p>{`On the top left, we can change the tools from position to rotation etc and with similar methods to before, we can rotate the axis.`}</p>\n    <p>{`We can also just use the `}<inlineCode parentName=\"p\">{`qwer`}</inlineCode>{` keys to change between tools.`}</p>\n    <p>{`We can also switch between `}<inlineCode parentName=\"p\">{`global`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`local`}</inlineCode>{` space to help move things around.`}</p>\n    <h3 {...{\n      \"id\": \"position-the-camera\"\n    }}>{`Position the camera`}</h3>\n    <p>{`The scenes looks good so far, but it we need to update the camera.`}</p>\n    <p>{`At the top of the scene window, we have `}<inlineCode parentName=\"p\">{`scene`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`game`}</inlineCode>{` tabs. If we select `}<inlineCode parentName=\"p\">{`game`}</inlineCode>{`, we get to see how the game will look when we play it. We can either write code to control to camera or change the transform.`}</p>\n    <h3 {...{\n      \"id\": \"image-effects-and-asset-stores\"\n    }}>{`Image effects and asset stores`}</h3>\n    <p>{`An image effect can change things like colours etc.`}</p>\n    <p>{`Once we click on the asset store, we can build or share models to use.`}</p>\n    <p>{`Unity is component based so we can add things that way. We can now create a post processing profile to use.`}</p>\n    <h2 {...{\n      \"id\": \"programming-games\"\n    }}>{`Programming Games`}</h2>\n    <h3 {...{\n      \"id\": \"programming-with-c-with-unity\"\n    }}>{`Programming with C# with Unity`}</h3>\n    <p>{`JavaScript is also able to be used, but far less adopted by the Unity commmunity.`}</p>\n    <p>{`After creating a file, you will run into the `}<inlineCode parentName=\"p\">{`Start`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Update`}</inlineCode>{` methods that are able to run at each frame so that we can edit the code to do specific things.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour {\n    private Animator playerAnimator;\n    private float moveHorizontal;\n    private float moveVertical;\n    private Vector3 movement;\n\n    // Use this for initialization\n    void Start () {\n\n    }\n\n    // Update is called once per frame\n    void Update () {\n\n    }\n}\n`}</code></pre>\n    <p>{`Public and private are differing `}<inlineCode parentName=\"p\">{`accessibility levels`}</inlineCode>{`. The second keyword in a declaration is the `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"gather-player-input\"\n    }}>{`Gather Player Input`}</h3>\n    <p>{`We need to record which button they are pressing in each frame.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour {\n    private Animator playerAnimator;\n    private float moveHorizontal;\n    private float moveVertical;\n    private Vector3 movement;\n\n    // Use this for initialization\n    void Start () {\n\n    }\n\n    // Update is called once per frame\n    void Update () {\n        moveHorizontal = Input.GetAxisRaw(\"Horizontal\");\n        moveVertical = Input.GetAxisRaw(\"Vertical\");\n\n        movement = new Vector3(moveHorizontal, 0.0f, moveVertical);\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"moving-a-player-with-animation\"\n    }}>{`Moving a player with animation`}</h3>\n    <p>{`After adding the script to update the script, we need to animate the frog.`}</p>\n    <p>{`The animator components with now be on the inspector for the player.`}</p>\n    <p>{`We will use the playerAnimator to access to Animator component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour {\n    private Animator playerAnimator;\n    private float moveHorizontal;\n    private float moveVertical;\n    private Vector3 movement;\n\n    // Use this for initialization\n    void Start () {\n        // special method to get the \"Animator\" component\n        playerAnimator = GetComponent<Animator>();\n    }\n\n    // Update is called once per frame\n    void Update () {\n        moveHorizontal = Input.GetAxisRaw(\"Horizontal\");\n        moveVertical = Input.GetAxisRaw(\"Vertical\");\n\n        movement = new Vector3(moveHorizontal, 0.0f, moveVertical);\n    }\n\n    // this is code that runs after the \\`update\\` method\n    // this method doesn't run that often without\n    // significant gameplay slow down\n    void FixedUpdate() {\n        if (movement != Vector3.zero) {\n            playerAnimator.SetFloat(\"Speed\", 3f);\n        } else {\n            playerAnimator.SetFloat(\"Speed\", 0);\n        }\n    }\n}\n`}</code></pre>\n    <p>{`So far we haven't told the frog how to change direction or to have the camera follow the movement.`}</p>\n    <h3 {...{\n      \"id\": \"quaternions\"\n    }}>{`Quaternions`}</h3>\n    <p>{`Behind the scenes, Unity stores the rotational values as `}<inlineCode parentName=\"p\">{`Quaternions`}</inlineCode>{`. Most games ending will use these to solve rotational issues.`}</p>\n    <h4 {...{\n      \"id\": \"target-rotation\"\n    }}>{`Target rotation`}</h4>\n    <p>{`The rigid body and box collider is how the objects like `}<inlineCode parentName=\"p\">{`Player`}</inlineCode>{` can interact with the physics and turning.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerMovement : MonoBehaviour {\n    private Animator playerAnimator;\n    private float moveHorizontal;\n    private float moveVertical;\n    private Vector3 movement;\n    private float turningSpeed = 20f;\n    private Rigidbody playerRigidBody;\n\n    // Use this for initialization\n    void Start () {\n        // Gather components from the player object\n        // special method to get the \"Animator\" component\n        playerAnimator = GetComponent<Animator> ();\n        playerRigidBody = GetComponent<Rigidbody> ();\n    }\n\n    // Update is called once per frame\n    void Update () {\n        moveHorizontal = Input.GetAxisRaw (\"Horizontal\");\n        moveVertical = Input.GetAxisRaw (\"Vertical\");\n\n        movement = new Vector3(moveHorizontal, 0.0f, moveVertical);\n    }\n\n    // this is code that runs after the \\`update\\` method\n    // this method doesn't run that often without\n    // significant gameplay slow down\n    void FixedUpdate() {\n        if (movement != Vector3.zero) {\n            playerAnimator.SetFloat (\"Speed\", 3f);\n        } else {\n            playerAnimator.SetFloat (\"Speed\", 0);\n        }\n    }\n}\n`}</code></pre>\n    <p>{`We need to perform a `}<inlineCode parentName=\"p\">{`Lerp`}</inlineCode>{` to change the variable from one to another over time.`}</p>\n    <p>{`Unity also doesn't save any change settings when you are playing the game.`}</p>\n    <h3 {...{\n      \"id\": \"making-a-follow-camera\"\n    }}>{`Making a follow camera`}</h3>\n    <p>{`This will have the camera to always follow the parent.`}</p>\n    <p>{`We can use `}<inlineCode parentName=\"p\">{`[SerializeField]`}</inlineCode>{` to expose fields from the code into the inspector.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FollowCamera : MonoBehaviour {\n\n    [SerializeField]\n    private Transform player;\n    [SerializeField]\n    private Vector3 offset;\n    private float cameraFollowSpeed = 5f;\n\n    // Update is called once per frame\n    void Update () {\n        Vector3 newPosition = player.position + offset;\n\n        // Smooth transition\n        transform.position = Vector3.Lerp(transform.position, newPosition, cameraFollowSpeed + Time.deltaTime);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"section-3\"\n    }}>{`Section 3`}</h2>\n    <h3 {...{\n      \"id\": \"adding-the-flies-to-the-swamp\"\n    }}>{`Adding the flies to the swamp`}</h3>\n    <p>{`Let's add an objective to the game (pickup).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FlyMovement : MonoBehaviour {\n    [SerializeField]\n    private Transform center;\n    private float flySpeed;\n\n    // Use this for initialization\n    void Start () {\n        flySpeed = Random.Range (300f, 700f);\n    }\n\n    // Update is called once per frame\n    void Update () {\n        transform.RotateAround (center.position, Vector3.up, flySpeed * Time.deltaTime);\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"adding-the-fly-pickup\"\n    }}>{`Adding the Fly Pickup`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FlyPickup : MonoBehaviour {\n    // Trigger\n    void OnTriggerEnter(Collider other) {\n        // if collider is the player, execute...\n        if (other.CompareTag (\"Player\")) {\n            Destroy (gameObject);\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"pickup-particles\"\n    }}>{`Pickup Particles`}</h4>\n    <p>{`Particle systems are a game object which generates multiple systems.`}</p>\n    <p>{`As for their destruction:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PickupParticlesDestruction : MonoBehaviour {\n\n    // Use this for initialization\n    void Start () {\n        Destroy (gameObject, 5f);\n    }\n}\n`}</code></pre>\n    <p>{`You can also create scripts that aren't attached to a 3d model in the scene view.`}</p>\n    <p>{`You can create an empty object from the left hand sidebar. Reset the transform and rename.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`// Fly Spawner\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FlyPickup : MonoBehaviour {\n    [SerializeField]\n    private GameObject pickupPrefab;\n\n    // Trigger\n    void OnTriggerEnter(Collider other) {\n        // if collider is the player, execute...\n        if (other.CompareTag (\"Player\")) {\n            // add pickup particles\n            // Quaternion.identity returns no rotation\n            Instantiate (pickupPrefab, transform.position, Quaternion.identity);\n            // Decrement total flies\n            FlySpawner.totalFlies--;\n            Destroy (gameObject);\n        }\n    }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`// Fly Pickup\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class FlyPickup : MonoBehaviour {\n    [SerializeField]\n    private GameObject pickupPrefab;\n\n    // Trigger\n    void OnTriggerEnter(Collider other) {\n        // if collider is the player, execute...\n        if (other.CompareTag (\"Player\")) {\n            // add pickup particles\n            // Quaternion.identity returns no rotation\n            Instantiate (pickupPrefab, transform.position, Quaternion.identity);\n            // Decrement total flies\n            FlySpawner.totalFlies--;\n            Destroy (gameObject);\n        }\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"creating-the-enemy-in-the-game\"\n    }}>{`Creating the enemy in the game`}</h3>\n    <p>{`The bird game object needs to know where the player is. It's known as path finding.`}</p>\n    <p>{`Unity makes path finding very easy.`}</p>\n    <p>{`With the `}<inlineCode parentName=\"p\">{`Nav Mesh Agent`}</inlineCode>{`, you can set the following for the bird:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Speed: 5\nAngular Speed: 720\nStopping Distance: 5\nRadius: 1\nHeight: 4\n`}</code></pre>\n    <p>{`We now need to create a `}<inlineCode parentName=\"p\">{`Nav Mesh`}</inlineCode>{`. The `}<inlineCode parentName=\"p\">{`NavMeshAgent`}</inlineCode>{` allows us to set a destination target that the \"enemy\" can follow. It is a component that can be attached to a game object so that it can interact with the `}<inlineCode parentName=\"p\">{`NavMesh`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`// BirdMovement.cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BirdMovement : MonoBehaviour {\n\n    [SerializeField]\n    private Transform target;\n    private UnityEngine.AI.NavMeshAgent birdAgent;\n    private Animator birdAnimator;\n\n    // Use this for initialization\n    void Start () {\n        birdAgent = GetComponent<UnityEngine.AI.NavMeshAgent> ();\n        birdAnimator = GetComponent<Animator> ();\n    }\n\n    // Update is called once per frame\n    void Update () {\n        // Set the bird's destination\n        birdAgent.SetDestination (target.position);\n\n        // Measure the magnitude of the NavMeshAgent's velocity\n        float speed = birdAgent.velocity.magnitude;\n\n        // Pass the velocity to the animator component\n        birdAnimator.SetFloat(\"Speed\", speed);\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"monitor-player-health\"\n    }}>{`Monitor Player Health`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class PlayerHealth : MonoBehaviour {\n    public bool alive;\n    [SerializeField]\n    private GameObject pickupPrefab;\n    // Use this for initialization\n    void Start () {\n        alive = true;\n    }\n\n    void OnTriggerEnter(Collider other) {\n        if (other.CompareTag (\"Enemy\") && alive == true) {\n            alive = false;\n\n            // Create the pickup particles\n            Instantiate(pickupPrefab, transform.position, Quaternion.identity);\n        }\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"managing-the-game-state\"\n    }}>{`Managing the game state`}</h3>\n    <p>{`How do we know when the game has started and when we need to restart?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.SceneManagement;\n\npublic class GameState : MonoBehaviour {\n    private bool gameStarted = false;\n    [SerializeField]\n    private Text gameStateText;\n    [SerializeField]\n    private GameObject player;\n    [SerializeField]\n    private BirdMovement birdMovement;\n    [SerializeField]\n    private FollowCamera followCamera;\n    private float restartDelay = 3f;\n    private float restartTimer;\n    private PlayerMovement playerMovement;\n    private PlayerHealth playerHealth;\n\n    // Use this for initialization\n    void Start () {\n        Cursor.visible = false;\n\n        playerMovement = player.GetComponent<PlayerMovement> ();\n        playerHealth = player.GetComponent<PlayerHealth> ();\n\n        // do not allow player to move before the game\n        playerMovement.enabled = false;\n        // prevent bird\n        birdMovement.enabled = false;\n        // prevent follow camear\n        followCamera.enabled = false;\n    }\n\n    // Update is called once per frame\n    void Update () {\n        // If the game is not sarted and the player presses the space bar...\n        if (gameStarted == false && Input.GetKeyUp(KeyCode.Space)) {\n            // ... start the game\n            StartGame();\n        }\n\n        // If player is no longer alive ...\n        if (playerHealth.alive == false) {\n            // ...end the game\n            EndGame();\n\n            // ... increment timer to count up to restarting...\n            restartTimer = restartTimer + Time.deltaTime;\n\n            // ...and if it reaches the restart delay...\n            if (restartTimer >= restartDelay) {\n                // reload scene\n                SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n            }\n        }\n    }\n\n    private void StartGame() {\n        gameStarted = true;\n\n        // set main text to see through\n        gameStateText.color = Color.clear;\n\n        // allow player to move\n        playerMovement.enabled = true;\n        birdMovement.enabled = true;\n        followCamera.enabled = true;\n    }\n\n    private void EndGame() {\n        gameStarted = false;\n\n        gameStateText.text = \"Game Over\";\n        // set main text to see through\n        gameStateText.color = Color.white;\n\n        // remove player from game\n        player.SetActive (false);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-audio\"\n    }}>{`Adding Audio`}</h2>\n    <h3 {...{\n      \"id\": \"game-audio\"\n    }}>{`Game audio`}</h3>\n    <p>{`We can add the `}<inlineCode parentName=\"p\">{`Audio Source`}</inlineCode>{` component and select the sounds.`}</p>\n    <p>{`We can also randomly generate a sound to help add something natural.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class RandomSoundPlayer : MonoBehaviour {\n    private AudioSource audioSource;\n    [SerializeField]\n    private List<AudioClip> soundClips = new List<AudioClip>();\n    [SerializeField]\n    private float soundTimerDelay = 3f;\n    private float soundTimer;\n\n    // Use this for initialization\n    void Start () {\n        audioSource = GetComponent<AudioSource>();\n    }\n\n    // Update is called once per frame\n    void Update () {\n        // incredment a timer to count up to restarting\n        soundTimer = soundTimer + Time.deltaTime;\n\n        // if the timer reaches the delay...\n        if (soundTimer >= soundTimerDelay) {\n            soundTimer = 0f;\n            // choose a random sound\n            AudioClip randomSound = soundClips[Random.Range(0, soundClips.Count)];\n            audioSource.PlayOneShot (randomSound);\n        }\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"controlling-sounds-on-game-objects\"\n    }}>{`Controlling sounds on game objects`}</h3>\n    <p>{`Add another empty game child and add the audio but select `}<inlineCode parentName=\"p\">{`play on awake`}</inlineCode>{` off.`}</p>\n    <p>{`To make sounds 3d, we need to change the spatial blend. We also need to make sure the game camera and distance are set correctly.`}</p>\n    <p>{`We need to update the scripts to ensure that these clips play at the appropriate time.`}</p>\n    <h3 {...{\n      \"id\": \"audio-mixing\"\n    }}>{`Audio mixing`}</h3>\n    <p>{`Use the audio mixer, create groups and assign these groups via the `}<inlineCode parentName=\"p\">{`AudioComponent`}</inlineCode>{` on the hierarchy or prefab.`}</p>\n    <h3 {...{\n      \"id\": \"exporting-the-game\"\n    }}>{`Exporting the game`}</h3>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}