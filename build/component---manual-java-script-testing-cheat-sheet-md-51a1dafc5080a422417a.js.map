{"version":3,"sources":["webpack:///../manual/JavaScript/Testing-Cheat-Sheet.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,0NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,uGAAsF,0BAAYC,WAAW,KAAvB,+BAAtF,KACA,4BAAW,0BAAYA,WAAW,KAAvB,YAAX,6DACA,wIACA,qBAAG,sBAAQA,WAAW,KAAnB,mBACH,sIACA,kLAAiK,0BAAYA,WAAW,KAAvB,SAAjK,uBAA0O,0BAAYA,WAAW,KAAvB,UAA1O,KACA,mEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,q+BAuCL,qBAAG,sBAAQA,WAAW,KAAnB,aACH,sMACA,6DAA4C,0BAAYA,WAAW,KAAvB,OAA5C,UAAsG,0BAAYA,WAAW,KAAvB,QAAtG,sCACA,qBAAG,kBAAIA,WAAW,KAAf,gBACH,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,22BAyCL,qBAAG,kBAAIA,WAAW,KAAf,iBACH,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,kgCA6CL,qBAAG,sBAAQA,WAAW,KAAnB,UACH,sEAAqD,0BAAYA,WAAW,KAAvB,aAArD,kFACA,oDAAmC,0BAAYA,WAAW,KAAvB,wBAAnC,M,iNAKJJ,EAAWK,gBAAiB","file":"component---manual-java-script-testing-cheat-sheet-md-51a1dafc5080a422417a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h2>\n    <p>{`The test files are stored in the test folders and require the dev dependencies `}<inlineCode parentName=\"p\">{`sinonjs, jsdom, mocha, chai`}</inlineCode>{`.`}</p>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`npm test`}</inlineCode>{` to view the tests files that are written in that folder.`}</p>\n    <p>{`Testing is still primitive and should be BDD (behaviour driven). Tests that are too specific will cause issues.`}</p>\n    <p><strong parentName=\"p\">{`mocha and chai`}</strong></p>\n    <p>{`These two are used in tandem to assert/expect values. Check out the Chai documentation for relative examples.`}</p>\n    <p>{`Tests consist of test suites and test specs. In order to recreate DOM elements if you are looking to test values etc. from functionality, you can use the `}<inlineCode parentName=\"p\">{`jsdom`}</inlineCode>{` library and import `}<inlineCode parentName=\"p\">{`jquery`}</inlineCode>{`.`}</p>\n    <p>{`Below is a small example of a test set up.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import jsdom from 'jsdom-global';\nimport jQuery from '../bower_components/jquery/dist/jquery.min.js';\n\nimport ModuleToTest from 'path/to/module'l\n\n// require sinon/chai\nconst sinon = require('sinon');\nconst expect = require('chai').expect;\n\n// Test suite\ndescribe('These tests are supposed to test some functionality', () => {\n\n    let $;\n    let ageGateFilters;\n    jsdom();\n\n    // this function will run before every Test Spec\n    before(function () {\n        $ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const moduleToTest = new ModuleToTest(...params);\n    });\n\n    // Test Spec (unit test)\n    it('This test should return ok', () => {\n        expect(true).to.be.ok;  // returns ok\n    });\n\n    // Test Spec (unit test)\n    it('This test should return true for the ModuleToTest function', () => {\n        expect(moduleToTest.func()).to.equal(true); // returns ok if result is true\n    });\n\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`sinon.js`}</strong></p>\n    <p>{`This library is used to essentially stub data for functions that require things like ajax etc. No tests currently use this effectively. Examples will be added later if used.`}</p>\n    <p>{`For now, I will show an example of a `}<inlineCode parentName=\"p\">{`spy`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`stub`}</inlineCode>{` (as this may the most relevant): `}</p>\n    <p><em parentName=\"p\">{`For the Spy`}</em></p>\n    <pre><code parentName=\"pre\" {...{}}>{`// in module Example\n\nexport default class Example {\n    \n    callout() {\n        let a = 1;\n        let b = 2;\n\n        return target(a,b);\n    }\n\n}\n\n// in a test file\n\nimport Example from 'Example';\n\n// Test suite\ndescribe('A test suite using sinon', () => {\n\n    // this function will run before every Test Spec\n    before(function () {\n        $ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const example = new Example(...params);\n    });\n\n    // Test spec (unit test)\n    it('Should return that the async func was called', () => {\n        \n        let targetSpy = sinon.spy(example, 'target');\n\n        // Now, any time we call the function, the spy logs information about it\n        example.callout();\n\n        assert(targetSpy.calledOnce); // returns true\n    });\n});\n`}</code></pre>\n    <p><em parentName=\"p\">{`For the Stub`}</em></p>\n    <pre><code parentName=\"pre\" {...{}}>{`// in module Example\n\nexport default class Example {\n    \n    callout(param, callback) {\n        $.ajax({\n            // whatever it normally is\n        }, callback);\n    }\n\n}\n\n// in a test file\n\nimport Example from 'Example';\n\n// Test suite\ndescribe('A test suite using sinon', () => {\n\n    // this function will run before every Test Spec\n    before(function () {\n        $ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const example = new Example(...params);\n    });\n\n    // Test spec (unit test)\n    it('Should call callback after saving', () => {\n        \n        //We'll stub $.post so a request is not sent\n        const post = sinon.stub($, 'ajax');\n        post.yields();\n\n        //We can use a spy as the callback so it's easy to verify\n        var callback = sinon.spy();\n\n        example.callout(param, callback);\n\n        post.restore();\n        sinon.assert.calledOnce(callback); // returns true\n    });\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`jsdom`}</strong></p>\n    <p>{`jsdom is a library that allows you to write a `}<inlineCode parentName=\"p\">{`innerHTML`}</inlineCode>{` var for the test to use if you want to test out the jQuery values for a test.`}</p>\n    <p>{`For an example, checkout yt `}<inlineCode parentName=\"p\">{`test/agegate_test.js`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}