{"version":3,"sources":["webpack:///../manual/React/React-SSR.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iFADQ,2BAItB,iBAAQ,CACN,GAAM,oBADR,oBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,mCAIL,iBAAQ,CACN,GAAM,mBADR,mBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6JAQL,iBAAQ,CACN,GAAM,6BADR,6BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,40CAqDL,iBAAQ,CACN,GAAM,gCADR,gCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,6HAML,iBAAQ,CACN,GAAM,eADR,iBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sEAML,iBAAQ,CACN,GAAM,mBADR,qBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6ZA2BL,iBAAQ,CACN,GAAM,sBADR,uBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kO,kMAYTJ,EAAWK,gBAAiB","file":"component---manual-react-react-ssr-md-b78107c2baf646b43e41.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h1>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.digitalocean.com/community/tutorials/react-server-side-rendering\"\n        }}>{`Digital Ocean article`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"create-react-app\"\n    }}>{`Create React App`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`npx create-react-app example\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"update-reactdom\"\n    }}>{`Update ReactDOM`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.hydrate(<App />, document.getElementById('root'));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"update-the-express-server\"\n    }}>{`Update the Express server`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import path from 'path';\nimport fs from 'fs';\n\nimport React from 'react';\nimport express from 'express';\nimport ReactDOMServer from 'react-dom/server';\nimport App from '../src/App';\n\napp.get('/', (req, res) => {\n  const app = ReactDOMServer.renderToString(<App />);\n\n  const indexFile = path.resolve('./build/index.html');\n  fs.readFile(indexFile, 'utf8', (err, data) => {\n    if (err) {\n      console.error('Something went wrong:', err);\n      return res.status(500).send('Oops, better luck next time!');\n    }\n\n    return res.send(\n      data.replace('<div id=\"root\"></div>', \\`<div id=\"root\">\\${app}</div>\\`),\n    );\n  });\n});\n\napp.use(express.static('./build'));\n\nconst PORT = process.env.PORT || 3006;\nconst app = express();\n\napp.get('/', (req, res) => {\n  const app = ReactDOMServer.renderToString(<App />);\n\n  const indexFile = path.resolve('./build/index.html');\n  fs.readFile(indexFile, 'utf8', (err, data) => {\n    if (err) {\n      console.error('Something went wrong:', err);\n      return res.status(500).send('Oops, better luck next time!');\n    }\n\n    return res.send(\n      data.replace('<div id=\"root\"></div>', \\`<div id=\"root\">\\${app}</div>\\`),\n    );\n  });\n});\n\napp.use(express.static('./build'));\n\napp.listen(PORT, () => {\n  console.log(\\`Server is listening on port \\${PORT}\\`);\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-webpack-server-config\"\n    }}>{`Create Webpack Server config`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`npm install webpack-node-externals --save-dev\n# For the style loaders\nnpm install css-loader style-loader --save-dev\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"babelrcjson\"\n    }}>{`.babelrc.json`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"webpackserverjs\"\n    }}>{`webpack.server.js`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const path = require('path');\nconst nodeExternals = require('webpack-node-externals');\n\nmodule.exports = {\n  entry: './server/index.js',\n\n  target: 'node',\n\n  externals: [nodeExternals()],\n\n  output: {\n    path: path.resolve('server-build'),\n    filename: 'index.js',\n  },\n\n  module: {\n    rules: [\n      {\n        test: /\\\\.js$/,\n        use: 'babel-loader',\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"update-packagejson\"\n    }}>{`Update package.json`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"scripts\": {\n  \"dev:build-server\": \"NODE_ENV=development webpack --config webpack.server.js --mode=development -w\",\n  \"dev:start\": \"nodemon ./server-build/index.js\",\n  \"dev\": \"npm-run-all --parallel build dev:*\"\n},\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}