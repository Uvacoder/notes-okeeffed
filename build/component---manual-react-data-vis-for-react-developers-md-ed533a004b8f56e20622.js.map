{"version":3,"sources":["webpack:///../manual/React/Data-Vis-For-React-Developers.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-react-data-vis-for-react-developers-md-ed533a004b8f56e20622.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"data-vis-for-react-devs\"\n    }}>{`Data Vis For React Devs`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://observablehq.com/@d3\"\n        }}>{`Observable HQ @ d3`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/d3-js-react/\"\n        }}>{`FE Masters Course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://academy.datawrapper.de/article/134-what-to-consider-when-creating-choropleth-maps\"\n        }}>{`Data Wrapper Academy - chloropleth maps`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://slides.com/shirleywu/deck-11\"\n        }}>{`Course Slides`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\"\n        }}>{`MDN Path documentation`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://beta.observablehq.com/@sxywu/data-visualization-for-react-developers-starter\"\n        }}>{`SVG Explorations - Observable`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"navigating-her-3-workshops\"\n    }}>{`Navigating Her 3 Workshops`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Data Vis for React Devs`}</li>\n      <li parentName=\"ol\">{`Intro to D3`}</li>\n      <li parentName=\"ol\">{`Building Custom Data Visualations`}</li>\n    </ol>\n    <p>{`[3]`}{` builds on top of `}{`[2]`}{` and these notes are based on `}{`[1]`}{`.`}</p>\n    <p>{`[3]`}{` will talk more about the Gestalt laws and how to design the visualisations.`}</p>\n    <h2 {...{\n      \"id\": \"intro-to-different-data-types\"\n    }}>{`Intro To Different Data Types`}</h2>\n    <p>{`There are a number of data types:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Categorical (genres)`}</li>\n      <li parentName=\"ol\">{`Ordinal (t-shirt sizes)`}</li>\n      <li parentName=\"ol\">{`Quantitative (temperatures)`}</li>\n      <li parentName=\"ol\">{`Temporal (dates)`}</li>\n      <li parentName=\"ol\">{`Spatial (cities)`}</li>\n    </ol>\n    <p>{`The basic charts and when to use them:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Bar chart: for categorial comparisons. The domain is categorial and the range is quantitative.`}</li>\n      <li parentName=\"ol\">{`Histogram: for categorial distributions. Domain is quantitative bins and range is the frequency of quantitative bin. Example: x-axis is movie scores and height is number of movies that fall into that score.`}</li>\n      <li parentName=\"ol\">{`Scatter plots: for correlation. 2 attributes and the relationship between their quantitative values.`}</li>\n      <li parentName=\"ol\">{`Line chart: for temporal trends. Domain is temporal and range is quantitative.`}</li>\n      <li parentName=\"ol\">{`Tree: For hierarchy, parent-child relationships, multiple tiers of category. Unidirectional.`}</li>\n      <li parentName=\"ol\">{`Node-link diagram: For connection. Shows the relationship between entities. Cyclical.`}</li>\n      <li parentName=\"ol\">{`Chlorodepth: For spatial trends. Domain: spatial regions. Range: Quantitative. Not good for subtle differences in data.`}</li>\n      <li parentName=\"ol\">{`Pie charts: used sparingly. For hierarchical part-to-whole. Best for: When values are around 25%, 30% or 75% (3 or 4 values). Not good for comparing fine differences and multiple totals.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"intro-to-svg\"\n    }}>{`Intro to SVG`}</h2>\n    <p>{`SVG is really good at drawing shapes onto the sreen. The most used SVG elements are `}<inlineCode parentName=\"p\">{`rect`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`circle`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`path`}</inlineCode>{`.`}</p>\n    <p>{`The SVG co-ordinate starts with (0,0) at the top-left and the numbers in crease for X to the right or down when talking about Y.`}</p>\n    <p>{`In the three charts the course makes (bar chart, line chart, radial chart), Susie explains that the bar chart uses `}<inlineCode parentName=\"p\">{`<rect/>`}</inlineCode>{` elements, the line chart uses `}<inlineCode parentName=\"p\">{`<path/>`}</inlineCode>{` elements and the radial chart uses `}<inlineCode parentName=\"p\">{`<path/>`}</inlineCode>{` elements.`}</p>\n    <h2 {...{\n      \"id\": \"data-to-svg-shapes\"\n    }}>{`Data to SVG Shapes`}</h2>\n    <p>{`The work here is to look at how some elements are made through the `}<a parentName=\"p\" {...{\n        \"href\": \"https://beta.observablehq.com/@sxywu/data-visualization-for-react-developers-starter\"\n      }}>{`Observable notebook`}</a>{`.`}</p>\n    <p>{`D3 is a tool that helps us take data to SVG without the difficulty.`}</p>\n    <p>{`People can be intimidated by the size of the API. There is an API slide you can see `}<a parentName=\"p\" {...{\n        \"href\": \"https://slides.com/shirleywu/deck-11#/21/0/0\"\n      }}>{`here`}</a>{` that breaks down the API modules.`}</p>\n    <h2 {...{\n      \"id\": \"scales\"\n    }}>{`Scales`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Mapping from data attributes (domain) to display (range).`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`d3.linearScale()\n  .domain([min, max]) // input\n  .range([min, max]); // output\n`}</code></pre>\n    <p>{`An example of taking the data and scaling by fetching min/max:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var width = 800;\nvar height = 600;\nvar data = [\n  { date: new Date('01-01-2015'), temp: 0 },\n  { date: new Date('01-01-2017'), temp: 3 },\n];\n\nvar min = d3.min(data, d => d.date);\nvar max = d3.max(data, d => d.date);\n\n// or use extent, which gives back [min, max]\nconst [min, max] = d3.extent(data, d => d.date);\n\nvar xScale = d3\n  .scaleTime()\n  .domain([min, max])\n  .range([0, width]);\nvar yScale = d3\n  .scaleLinear()\n  .domain([min, max])\n  .range([height, 0]); // to account for 0,0 viewbox\n`}</code></pre>\n    <p>{`Which scale to use and when:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Domain`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Range`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Scale`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quantitative`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Continuous`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Continuous`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`scaleLinear`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quantitative`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Continuous`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Continuous`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`scaleLog`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quantitative`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Continuous`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Continuous`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`scaleTime`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quantitative`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Continuous`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Discrete`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`scaleQuantize`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Categorial`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Discrete`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Discrete`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`scaleOrdinal`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Categorial`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Discrete`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Continuous`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`scaleBand`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"creating-bar-charts\"\n    }}>{`Creating Bar Charts`}</h2>\n    <p>{`You can do the example on `}<a parentName=\"p\" {...{\n        \"href\": \"https://observablehq.com/@sxywu/data-visualization-for-react-developers-starter\"\n      }}>{`2 of this Observable notebook`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const barChartData = () => {\n  const extent = d3.extent(data, d => d.date);\n  const xScale = d3\n    .scaleTime()\n    .domain(extent)\n    .range([0, width]);\n\n  const tempMax = d3.max(data, d => d.high);\n  const tempMin = d3.min(data, d => d.low);\n  const yScale = d3\n    .scaleLinear()\n    .domain([tempMin, tempMax])\n    .range([height, 0]);\n\n  return data.map(d => ({\n    x: xScale(d.date),\n    y: yScale(d.high),\n    height: yScale(d.low) - yScale(d.high),\n  }));\n};\n`}</code></pre>\n    <p>{`Here we wanted to calculate the x-axis of time and y-axis of height and use these scales to calculate values for `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`y`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{`.`}</p>\n    <p>{`We also used `}<inlineCode parentName=\"p\">{`min`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` functions for the temp as they were different keys in the data.`}</p>\n    <h3 {...{\n      \"id\": \"adding-in-a-color-scale\"\n    }}>{`Adding in a color scale`}</h3>\n    <p>{`We add this in addition to the work in the section above.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const barChartData = () => {\n  const extent = d3.extent(data, d => d.date);\n  const xScale = d3\n    .scaleTime()\n    .domain(extent)\n    .range([0, width]);\n\n  const tempMax = d3.max(data, d => d.high);\n  const tempMin = d3.min(data, d => d.low);\n  const yScale = d3\n    .scaleLinear()\n    .domain([tempMin, tempMax])\n    .range([height, 0]);\n\n  // the important part\n  const colorExtent = d3.extent(data, d => d.avg).reverse();\n  // scaleSequential allows you to use an interpolator to map\n  // to the range.\n  const colorScale = d3\n    .scaleSequential()\n    .domain(colorExtent)\n    .interpolator(d3.interpolateRdYlBu);\n\n  return data.map(d => ({\n    x: xScale(d.date),\n    y: yScale(d.high),\n    height: yScale(d.low) - yScale(d.high),\n    fill: colorScale(d.avg),\n  }));\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-line-charts\"\n    }}>{`Creating Line Charts`}</h2>\n    <p>{`The important part here is again understanding the `}<inlineCode parentName=\"p\">{`line`}</inlineCode>{` SVG and parts that go into it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const lineChartData = () => {\n  const extent = d3.extent(data, d => d.date);\n  const xScale = d3\n    .scaleTime()\n    .domain(extent)\n    .range([0, width]);\n\n  const tempMax = d3.max(data, d => d.high);\n  const tempMin = d3.min(data, d => d.low);\n  const yScale = d3\n    .scaleLinear()\n    .domain([tempMin, tempMax])\n    .range([height, 0]);\n\n  // you could also create two different lines and pass the .y func\n  const line = d3.line().x(d => xScale(d.date));\n\n  return [\n    { path: line.y(d => yScale(d.high))(data), fill: 'red' },\n    { path: line.y(d => yScale(d.low))(data), fill: 'blue' },\n  ];\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"building-a-radial-chart\"\n    }}>{`Building a Radial Chart`}</h2>\n    <p>{`You use `}<inlineCode parentName=\"p\">{`d3.arc`}</inlineCode>{` which is similar to `}<inlineCode parentName=\"p\">{`d3.line`}</inlineCode>{`, but we give an object of one data point as opposed to an array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var pie = {\n  data: 1,\n  value: 1,\n  startAngle: 6.050474740247008,\n  endAngle: 6.166830023713296,\n};\n\nvar arc = d3\n  .arc()\n  .innerRadius(0)\n  .outerRadius(100)\n  .startAngle(d => d.startAngle)\n  .endAngle(d => d.endAngle);\n\narc(pie);\n\n// M-23.061587074244123,-97.30448705798236A100,100,0,0,1,-11.609291412523175,-99.32383577419428L0,0Z\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Commonly used for a pie chart.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"creating-the-radial-chart\"\n    }}>{`Creating the Radial Chart`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const radialChartData = () => {\n  const radiusScale = d3\n    .scaleLinear()\n    .domain([d3.min(data, d => d.low), d3.max(data, d => d.high)])\n    .range([0, width / 2]);\n\n  // startAngle = i * perSliceAngle\n  // endAngle = (i+1) * perSliceAngle\n\n  const arcGenerator = d3.arc();\n  // get the angle for each slide\n  // 2PI / 365\n  const perSliceAngle = (2 * Math.PI) / data.length;\n\n  const colorExtent = d3.extent(data, d => d.avg).reverse();\n  const colorScale = d3\n    .scaleSequential()\n    .domain(colorExtent)\n    .interpolator(d3.interpolateRdYlBu);\n\n  return data.map((d, i) => {\n    const path = arcGenerator({\n      startAngle: i * perSliceAngle,\n      endAngle: (i + 1) * perSliceAngle,\n      innerRadius: radiusScale(d.low),\n      outerRadius: radiusScale(d.high),\n    });\n    return {\n      path,\n      fill: colorScale(d.avg),\n    };\n  });\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"breaking-down-the-d3-api\"\n    }}>{`Breaking Down the D3 API`}</h2>\n    <p>{`Out of the sections for D3, there are a two sections that Susan breaks is down into.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Data preparation: Some could be replaced by JS/Lodash etc. Chords, hierarchies and pies here are very useful.`}</li>\n      <li parentName=\"ol\">{`Layout calculation: Calulations that help for drawing out the SVG objects themselves. This includes things like geo, chord etc.`}</li>\n      <li parentName=\"ol\">{`DOM manipulation`}</li>\n    </ol>\n    <p>{`...and...`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Finishing touches: anyimations, color shemes, axes etc.`}</li>\n      <li parentName=\"ol\">{`Interactions: making the charts interactive`}</li>\n    </ol>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Something interesting was replacing `}<inlineCode parentName=\"p\">{`blocks.org`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`blockbuilder.org`}</inlineCode>{` ie `}<inlineCode parentName=\"p\">{`https://blockbuilder.org/mbostock/2e73ec84221cb9773f4c`}</inlineCode>{` it will take you to an interactive editor.`}</p>\n    </blockquote>\n    <p>{`For React, the important sections to probably note are `}<inlineCode parentName=\"p\">{`selections`}</inlineCode>{` from DOM manipulations (basically the enter, update, exit lifecycle) and Dispatches.`}</p>\n    <h3 {...{\n      \"id\": \"bar-chart-exercise\"\n    }}>{`Bar Chart Exercise`}</h3>\n    <p>{`With React, we don't need to both with the `}<inlineCode parentName=\"p\">{`enter, exit, update`}</inlineCode>{` lifecycle as React can handle this for us just with state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// helper func\nconst barChartData = data => {\n  const extent = d3.extent(data, d => d.date);\n  const xScale = d3\n    .scaleTime()\n    .domain(extent)\n    .range([0, width]);\n\n  const tempMax = d3.max(data, d => d.high);\n  const tempMin = d3.min(data, d => d.low);\n  const yScale = d3\n    .scaleLinear()\n    .domain([tempMin, tempMax])\n    .range([height, 0]);\n\n  // the important part\n  const colorExtent = d3.extent(data, d => d.avg).reverse();\n  // scaleSequential allows you to use an interpolator to map\n  // to the range.\n  const colorScale = d3\n    .scaleSequential()\n    .domain(colorExtent)\n    .interpolator(d3.interpolateRdYlBu);\n\n  return data.map(d => ({\n    x: xScale(d.date),\n    y: yScale(d.high),\n    height: yScale(d.low) - yScale(d.high),\n    fill: colorScale(d.avg),\n  }));\n};\n\nconst Component = ({ data, width, height }) => {\n  const res = useCallback(() => barChartData(data));\n\n  return (\n    <svg width={width} height={height}>\n      {res.map(d => (\n        // she manually put <rect x={d.x} y={d.y} width={2} height={d.height} fill={d.fill}>\n        <rect {...d} />\n      ))}\n    </svg>\n  );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arc-exercise\"\n    }}>{`Arc Exercise`}</h2>\n    <p>{`In this particular exercise, we need to actually shift the center from `}<inlineCode parentName=\"p\">{`0,0`}</inlineCode>{` using a transformation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const radialChartData = () => {\n  const radiusScale = d3\n    .scaleLinear()\n    .domain([d3.min(data, d => d.low), d3.max(data, d => d.high)])\n    .range([0, width / 2]);\n\n  // startAngle = i * perSliceAngle\n  // endAngle = (i+1) * perSliceAngle\n\n  const arcGenerator = d3.arc();\n  // get the angle for each slide\n  // 2PI / 365\n  const perSliceAngle = (2 * Math.PI) / data.length;\n\n  const colorExtent = d3.extent(data, d => d.avg).reverse();\n  const colorScale = d3\n    .scaleSequential()\n    .domain(colorExtent)\n    .interpolator(d3.interpolateRdYlBu);\n\n  return data.map((d, i) => {\n    const path = arcGenerator({\n      startAngle: i * perSliceAngle,\n      endAngle: (i + 1) * perSliceAngle,\n      innerRadius: radiusScale(d.low),\n      outerRadius: radiusScale(d.high),\n    });\n    return {\n      path,\n      fill: colorScale(d.avg),\n    };\n  });\n};\n\nconst Component = ({ data, width, height }) => {\n  const res = useCallback(() => radialChartData(data));\n\n  // <g /> used to transform the arc to where the center should be\n  return (\n    <svg width={width} height={height}>\n      <g transform={\\`translate(\\${width / 2}, \\${height / 2})\\`}>\n        {res.map(d => (\n          // she manually put <path d={d.x=path} fill={d.fill}>\n          <path {...d} />\n        ))}\n      </g>\n    </svg>\n  );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-three-exceptions-to-react\"\n    }}>{`The Three Exceptions to React`}</h2>\n    <p>{`Axis, brush, translations and zoom don't always play well together between React and D3.`}</p>\n    <h3 {...{\n      \"id\": \"axes-legends--annotations\"\n    }}>{`Axes, Legends + Annotations`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// 1. Create axisLeft or axisBottom at beginning of lifecycle with corresponding scale\nconst yAxis = d3.axisLeft().scale(yScale);\n\n// 2. Create an SVG group element in \\`render\\`\n// parents omitted for brevity\nreturn <g ref=\"group\" />;\n\n// 3. Call axis on the group element in componentDidUpdate\nd3.select(this.refs.group).call(yAxis);\n`}</code></pre>\n    <p>{`In context:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// helper func\nconst barChartData = data => {\n  const xAxis = d3.axisBottom();\n  const yAxis = d3.axisLeft();\n\n  const extent = d3.extent(data, d => d.date);\n  const xScale = d3\n    .scaleTime()\n    .domain(extent)\n    .range([0, width]);\n\n  const tempMax = d3.max(data, d => d.high);\n  const tempMin = d3.min(data, d => d.low);\n  const yScale = d3\n    .scaleLinear()\n    .domain([tempMin, tempMax])\n    .range([height, 0]);\n\n  // the important part\n  const colorExtent = d3.extent(data, d => d.avg).reverse();\n  // scaleSequential allows you to use an interpolator to map\n  // to the range.\n  const colorScale = d3\n    .scaleSequential()\n    .domain(colorExtent)\n    .interpolator(d3.interpolateRdYlBu);\n\n  return {\n    data: data.map(d => ({\n      x: xScale(d.date),\n      y: yScale(d.high),\n      height: yScale(d.low) - yScale(d.high),\n      fill: colorScale(d.avg),\n    })),\n    xAxis: xAxis.scale(xScale),\n    yAxis: yAxis.scale(yScale),\n  };\n};\n\nconst Component = ({ data, width, height }) => {\n  const { data, xAxis, yAxis } = useCallback(() => barChartData(data));\n  const xAxisRef = useRef('xAxis');\n  const yAxisRef = useRef('yAxis');\n\n  useEffect(() => {\n    d3.select(xAxisRef).call(xAxis);\n    d3.select(yAxisRef).call(yAxis);\n  }, [data]);\n\n  return (\n    <svg width={width} height={height}>\n      {data.map(d => (\n        // she manually put <rect x={d.x} y={d.y} width={2} height={d.height} fill={d.fill}>\n        <rect {...d} />\n      ))}\n      <g ref={xAxisRef} transform={\\`translate(0, \\${height}\\`)} />\n      <g ref={yAxisRef} transform={\\`translate(\\${leftPadding}, 0)\\`)} />\n    </svg>\n  );\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: You will want to update the functions to use margins to then add in the axis.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"transitions\"\n    }}>{`Transitions`}</h2>\n    <p>{`In general, React recommeneds you `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` for animations. For D3, the approach changes. Susan uses D3 or Greenstock.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// in componentDidUpdate (or similar)\nd3.select(this.refs.bars)\n  .selectAll('rect')\n  .data(this.state.bars)\n  .transition()\n  .attr('y', d => d.y)\n  .attr('height', d => d.height)\n  .attr('fill', d => d.fill);\n\nreturn (\n  <g ref=\"bars\">\n    {this.state.bars.map((d, i) => (\n      <rect key={i} x={d.x} width=\"2\" />\n    ))}\n  </g>\n);\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Important: Make sure that the attributes that React does not manage is not placed in the SVG element.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"brush\"\n    }}>{`Brush`}</h2>\n    <p>{`In `}<inlineCode parentName=\"p\">{`componentDidMount`}</inlineCode>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create brush instance`}</li>\n      <li parentName=\"ol\">{`Define brushable area (extent)`}</li>\n      <li parentName=\"ol\">{`Pass in a function to execute on every brush, or brush end.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`this.brush = d3.brush().extent([0,0], [width, height]).on('end', () => {\n  // end function\n})\n\nd3.select(this.refs.brush).call(this.brush)\n\n// in render\n<g ref=\"brush\" />\n`}</code></pre>\n    <p>{`Once the d3 brush is in, you get the interactivity.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Use `}<inlineCode parentName=\"p\">{`useRef`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` for function components.`}</p>\n    </blockquote>\n    <p>{`An example handler for the brush:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`this.brush = d3\n  .brushX()\n  .extent([0, 0], [width, height])\n  .on('end', () => {\n    // end function\n    console.log(d3.event.selection); // [leftValue, rightValue]\n    const [minX, maxX] = d3.event.selection;\n    const range = [\n      this.state.XScale.invert(minX) // denormalise values\n      this.state.XScale.invert(maxX)\n    ]\n    functionToUpdateRange(range)\n  });\n\n// handling coloring\nconst isColored = !range.length || range[0] < d.date && d.date < range[1]\n\nreturn {\n  //... other properties\n  fill: isColored ? colorScale(d.avg) : '#ccc' // grey\n}\n`}</code></pre>\n    <p>{`There is also a `}<inlineCode parentName=\"p\">{`brushX`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`brushY`}</inlineCode>{` available.`}</p>\n    <h2 {...{\n      \"id\": \"additional-resources\"\n    }}>{`Additional Resources`}</h2>\n    <p><inlineCode parentName=\"p\">{`d3-annotation`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`react-annotation`}</inlineCode>{` was made by Susie and she has a library for that.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://vx-demo.now.sh/\"\n      }}>{`vx`}</a>{` is an example and `}<a parentName=\"p\" {...{\n        \"href\": \"https://semiotic.nteract.io/\"\n      }}>{`semiotic`}</a>{` are resources from others.`}</p>\n    <h2 {...{\n      \"id\": \"canvas\"\n    }}>{`Canvas`}</h2>\n    <p>{`If you need to have a few thousand SVG nodes on the screen, consider using Canvas.`}</p>\n    <p>{`While interactivity is easier for SVG, `}<inlineCode parentName=\"p\">{`canvas`}</inlineCode>{` is more like a painting with no as much ability for interactivity.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// in render\n<canvas\n  ref=\"canvas\"\n  style={{ width: \\`\\${width}px\\`, height: \\`\\${height}px\\` }}\n  width={2 * width}\n  height={2 * height}\n/>;\n\nctx = this.refs.canvas.getContext('2d');\n\n// some available commands\nctx.fillRect(x, y, width, height);\n\n// circle\nctx.beginPath();\nctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);\nctx.fill();\n\n// line\nctx.beginPath();\n// moveTo, lineTo, bezierCurveTo\nctx.fill();\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}