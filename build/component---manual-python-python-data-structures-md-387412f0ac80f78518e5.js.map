{"version":3,"sources":["webpack:///../manual/Python/Python-Data-Structures.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-python-python-data-structures-md-387412f0ac80f78518e5.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"data-structures-with-python\"\n    }}>{`Data Structures with Python`}</h1>\n    {\n      /* TOC -->autoauto- [Data Structures with Python](#data-structures-with-python)auto    - [PYDS-12.0: Arrays](#pyds-120-arrays)auto    - [PYDS-12.1: Low Level Arrays](#pyds-121-low-level-arrays)auto    - [PYDS 12.2: Amotization](#pyds-122-amotization)auto    - [PYDS-13.0: Stacks, Queues and Deques](#pyds-130-stacks-queues-and-deques)auto    - [PYDS-13.1: Queues Overview](#pyds-131-queues-overview)auto    - [PYDS-13.2: Deques Overview](#pyds-132-deques-overview)auto    - [PYDS-14.0: Singly Linked Lists](#pyds-140-singly-linked-lists)auto    - [PYDS-14.1: Doubly Linked Lists](#pyds-141-doubly-linked-lists)auto    - [PYDS-15.0: Recursion](#pyds-150-recursion)auto    - [PYDS-15.1: Memoization](#pyds-151-memoization)auto    - [PYDS-16.0: Trees](#pyds-160-trees)auto    - [PYDS-16.1: Implementing a Tree as a List of Lists](#pyds-161-implementing-a-tree-as-a-list-of-lists)auto    - [PYDS-16.1: Node and Node References Implementation](#pyds-161-node-and-node-references-implementation)auto    - [PYDS-16.2: Tree Traversals](#pyds-162-tree-traversals)auto    - [PYDS-16.3: Priority Queues with Binary Heaps](#pyds-163-priority-queues-with-binary-heaps)auto        - [More on Heap Operations](#more-on-heap-operations)auto    - [---- Inserting an element (up-heap, percolate-up)](#-----inserting-an-element-up-heap-percolate-up)auto    - [---- Extract (down-heap, percolate-down)](#-----extract-down-heap-percolate-down)auto    - [PYDS-16.4: Binary Search Trees](#pyds-164-binary-search-trees)auto    - [PYDS-16.5: Common Tree Questions](#pyds-165-common-tree-questions)auto- [17.0: Searching and Sorting](#170-searching-and-sorting)auto    - [17.1: Sequential Search](#171-sequential-search)auto    - [17.2: Implementation of a Sequential Search](#172-implementation-of-a-sequential-search)auto    - [17.3: Binary Search](#173-binary-search)auto    - [17.4: Implementation of a Binary Search](#174-implementation-of-a-binary-search)auto    - [17.5: Hashing](#175-hashing)auto    - [17.6: Implementation of a Hash Table](#176-implementation-of-a-hash-table)auto    - [17.7: Sorting Overview](#177-sorting-overview)auto    - [17.8: Visualizing Sorting Algorithms](#178-visualizing-sorting-algorithms)auto    - [17.9: Implementing the Bubblesort Sort Method](#179-implementing-the-bubblesort-sort-method)auto    - [17.10: Implementing the Selection Sort](#1710-implementing-the-selection-sort)auto- [[2, 3, 4, 10]](#2-3-4-10)auto- [[2, 3, 4, 10]](#2-3-4-10-1)auto- [[2, 3, 4, 10, 12, 35]](#2-3-4-10-12-35)auto- [output [2,2,4,5,7,11,12,23,56]](#output-2245711122356)auto- [quickSort recursively calls](#quicksort-recursively-calls)auto- [Vertex() - create a new vertice with an id and what it is connected to](#vertex---create-a-new-vertice-with-an-id-and-what-it-is-connected-to)auto- [addNeighbour() - create a neighbour that it is connected to](#addneighbour---create-a-neighbour-that-it-is-connected-to)auto- [getWeight() returns the weight of the edge from this vertex](#getweight-returns-the-weight-of-the-edge-from-this-vertex)auto- [Graph() - create new, empty graph](#graph---create-new-empty-graph)auto- [addVertex(vert) - create new instance of a vertex](#addvertexvert---create-new-instance-of-a-vertex)auto- [addEdge(fromVert, toVert, weight)](#addedgefromvert-tovert-weight)auto- [addEdge (fromtVert, toVert) - without weight](#addedge-fromtvert-tovert---without-weight)auto- [getVertex(vertKey) - return vertex](#getvertexvertkey---return-vertex)auto- [getVertices() - return list of all vertices](#getvertices---return-list-of-all-vertices)auto- [in - returns True for a statement of the form vertex in graph, if the given vertex is in the graph, False otherwise](#in---returns-true-for-a-statement-of-the-form-vertex-in-graph-if-the-given-vertex-is-in-the-graph-false-otherwise)auto- [gives back dict of vertices](#gives-back-dict-of-vertices)auto- [[ 0: <memory pos>, 1: ...]](#-0-memory-pos-1-)auto- [prints list with edge connected from 0 to 1](#prints-list-with-edge-connected-from-0-to-1)autoauto<!-- /TOC */\n    }\n    <h2 {...{\n      \"id\": \"pyds-120-arrays\"\n    }}>{`PYDS-12.0: Arrays`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Introduction to Arrays`}</li>\n      <li parentName=\"ul\">{`Low Level Arrays`}</li>\n      <li parentName=\"ul\">{`Dynamic Arrays and Amotization`}</li>\n      <li parentName=\"ul\">{`Array based \"mini project\"`}</li>\n      <li parentName=\"ul\">{`Several Array Interview Problems`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Array Sequences`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`List`}</li>\n      <li parentName=\"ul\">{`Tuple`}</li>\n      <li parentName=\"ul\">{`String`}</li>\n    </ul>\n    <p>{`All of which support indexing.`}</p>\n    <h2 {...{\n      \"id\": \"pyds-121-low-level-arrays\"\n    }}>{`PYDS-12.1: Low Level Arrays`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Focus on low level computer theory`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Low-level comp architecture`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Memory stored in bits, stored in units called bytes`}</li>\n      <li parentName=\"ul\">{`Stores these bytes in an address`}</li>\n      <li parentName=\"ul\">{`Just as easy to retrieve or stored in O(1) time`}</li>\n      <li parentName=\"ul\">{`Arrays can be a contiguous portion of the computers memory - eg. String is consecutive - each location within the array is a `}<em parentName=\"li\">{`cell`}</em>{` - calcs done by start address + (cellsize `}{`*`}{` index)`}</li>\n    </ul>\n    <p><em parentName=\"p\">{`Referential Arrays`}</em></p>\n    <ul>\n      <li parentName=\"ul\">{`100 student id names, each needs to have the same number of bytes. - We can use an array of object `}<em parentName=\"li\">{`References`}</em>{` - This helps the constant time access`}</li>\n      <li parentName=\"ul\">{`A single list instance may include multiple references to the same objects`}</li>\n      <li parentName=\"ul\">{`Single object can be an element of two or more lists - Changing the element reference to another point`}</li>\n    </ul>\n    <p><em parentName=\"p\">{`Copying Arrays`}</em></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`backup = list(primes)`}</inlineCode></li>\n      <li parentName=\"ul\">{`This produces a new list that is a `}<inlineCode parentName=\"li\">{`shallow copy`}</inlineCode>{` in that it references the same elements as in the first list. - If the contents of the list were of a mutable type, a `}<inlineCode parentName=\"li\">{`deep copy`}</inlineCode>{`, meaning a new list with new elements, can be produced by using the deepcopy function from the copy module`}</li>\n      <li parentName=\"ul\">{`counters = `}{`[0]`}{` `}{`*`}{` 8 - All 8 cells reference the same object! - We rely on the object being mutable - counters`}{`[2]`}{` += 1 does not change the value of the existing int instances - computes a new integer`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`primes.extend(extras)`}</inlineCode>{` will add the references to the first list`}</li>\n    </ul>\n    <p><em parentName=\"p\">{`Review`}</em></p>\n    <ul>\n      <li parentName=\"ul\">{`Basic computer architecture`}</li>\n      <li parentName=\"ul\">{`Low-level array representation`}</li>\n      <li parentName=\"ul\">{`Referential arrays`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"pyds-122-amotization\"\n    }}>{`PYDS 12.2: Amotization`}</h2>\n    <p>{`Using amortization, we can show that performing a sequence of such append operations on a dynamic array is actually quite efficient!`}</p>\n    <p><strong parentName=\"p\">{`Amotized Anaylsis`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Allocate memory for a larger array of size, typically twice the old array`}</li>\n      <li parentName=\"ol\">{`Copy the contents of old array to new array`}</li>\n      <li parentName=\"ol\">{`Free the old array`}</li>\n    </ol>\n    <p>{`Once we hit a full array in items being asserted, we conclude an overflow and we implement the doubling.`}</p>\n    <p>{`With amortization, after we have continually doubled the size at an overflow, cost when we are not in overflow is a cost of 1 whereas the cost with inserting for overflow is the `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Amortized Cost = ( 1 + 2 + 3 + 5 + 1 + 1 + 9 + 1 ... ) / n\n                = [(1 + 1 + 1 + ... ) + ( 1 + 2 + 4 + ...)]\n                = [n + 2n] / n\n                = 3\n                = O(1)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pyds-130-stacks-queues-and-deques\"\n    }}>{`PYDS-13.0: Stacks, Queues and Deques`}</h2>\n    <p><strong parentName=\"p\">{`What is a stack?`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Ordered collection of items where additional and removal occur at the same end`}</li>\n      <li parentName=\"ul\">{`End is referred to as the \"top\"`}</li>\n      <li parentName=\"ul\">{`Opposite is the \"base\"`}</li>\n      <li parentName=\"ul\">{`Items near the base have been in the stack the longest`}</li>\n      <li parentName=\"ul\">{`Recently added are in position to be removed first - LIFO`}</li>\n      <li parentName=\"ul\">{`Fundamentally important as it can reverse the stack easily`}</li>\n      <li parentName=\"ul\">{`Similar to a list`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Stack implementation`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Stack() creates a new empty stack\n# push(item) add to stack\n# pop() removes item from the top\n# peek() shows you the top but does not remove\n# isEmpty() bool\n# size() return item size\n\nclass Stack(object):\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items)\n\ns = Stack()\nprint s.isEmpty()   # true\ns.push('two')\ns.peek()\ns.push(True)\ns.size()            # 1\ns.isEmpty()         # false\ns.pop()             # 'two'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pyds-131-queues-overview\"\n    }}>{`PYDS-13.1: Queues Overview`}</h2>\n    <p><strong parentName=\"p\">{`What are Queues?`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Ordered collection of items where items addition happens at the end \"rear\"`}</li>\n      <li parentName=\"ul\">{`Removal happens from the \"front\"`}</li>\n      <li parentName=\"ul\">{`Item entered and waits in queue to be removed`}</li>\n      <li parentName=\"ul\">{`Longest item at the front - FIFO implementation`}</li>\n      <li parentName=\"ul\">{`\"Enqueue\" and \"Dequeue\" to the adding to the rear and removing the front`}</li>\n      <li parentName=\"ul\">{`\"Push\" and \"pop\" refers to the queue.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Queue Implementation`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Queue() to create a queue\n# enqueue(item) to add to the rear\n# dequeue() removes from the front\n# isEmpty() is the bool\n# size() returns the size\n\nclass Queue(object):\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def enqueue(self, item):\n        self.items.insert(0, item) # insert for FIFO\n\n    def dequeue():\n        return self.items.pop()\n\n    def size():\n        return len(self.items)\n\nq = Queue()\nq.size()        # 0\nq.enqueue(1)\nq.enqueue(2)\nq.dequeue()     # 1\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pyds-132-deques-overview\"\n    }}>{`PYDS-13.2: Deques Overview`}</h2>\n    <p><strong parentName=\"p\">{`What is a deque?`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`A deque is a double-ended queue`}</li>\n      <li parentName=\"ul\">{`Also has a front and an end and the items are position within the collection`}</li>\n      <li parentName=\"ul\">{`Unrestrictive nature for adding items - add to front OR rear!`}</li>\n      <li parentName=\"ul\">{`Same for removal`}</li>\n      <li parentName=\"ul\">{`Does not require LIFO/FIFO enforced data structure design`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Implement a deque`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Deque() create a deque\n# addFront(item)\n# addRear(item)\n# removeFront()\n# removeRear()\n# isEmpty()\n# size()\n\nclass Deque(object):\n    def __init__:\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    # rear is the first index\n    def addRear(self, item):\n        self.items.insert(0, item)\n\n    # front is the len(self.items) index\n    def addFront(self, item):\n        self.items.append(item)\n\n    def removeFront(self):\n        return self.items.pop()\n\n    def removeRear(self):\n        return self.items.pop(0)\n\n    def size(self):\n        return len(self.items)\n\nd = Deque()\nd.addFront('hello')\nd.addRear('world')\nd.size()                                        # 2\nprint d.removeFront() + ' ' + d.removeRear()    # 'hello world'\nd.size()                                        # 0\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pyds-140-singly-linked-lists\"\n    }}>{`PYDS-14.0: Singly Linked Lists`}</h2>\n    <p><strong parentName=\"p\">{`What is a singly linked list?`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Singly Linked List is a collection of nodes that form a linear sequence`}</li>\n      <li parentName=\"ul\">{`Each node stores a reference to the next node`}</li>\n      <li parentName=\"ul\">{`The first and last node of the list are known as the \"head\" and the \"tail\" of the list`}</li>\n      <li parentName=\"ul\">{`Process of moving through the list is \"traversing\"`}</li>\n      <li parentName=\"ul\">{`Each node stores a reference to the element and the next node (except the tail)`}</li>\n      <li parentName=\"ul\">{`How do we add a new element?`}</li>\n      <li parentName=\"ul\">{`Example to append to the Head (inverse can be done for appending to the Tail) - We create a new node - Set its element to the new element - Set the next link to refer to the current head - Set the list's head to point to the new node`}</li>\n      <li parentName=\"ul\">{`Removing an element from the Head is essentially the reverse operation to adding the item`}</li>\n      <li parentName=\"ul\">{`We cannot easily remove the last node - to do so efficiently requires a `}<inlineCode parentName=\"li\">{`doubly linked list`}</inlineCode></li>\n      <li parentName=\"ul\">{`O(k) time to access elements`}</li>\n      <li parentName=\"ul\">{`Constant time insertions and deletions in any position, arrays require O(n) time`}</li>\n      <li parentName=\"ul\">{`Linked Lists can expand without having to specify their size ahead of time!`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Implementation of a singly linked list`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`class Node(object):\n    def __init__(self, value):\n        self.value = value\n        self.nextNode = None\n\na = Node(1)\nb = Node(2)\nc = Node(3)\n\n# how to link the nodes?\na.nextNode = b\nb.nextNode = c\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pyds-141-doubly-linked-lists\"\n    }}>{`PYDS-14.1: Doubly Linked Lists`}</h2>\n    <p><strong parentName=\"p\">{`What is a doubly linked list?`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`next`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`prev`}</inlineCode>{` for references to nodes that are both next and what precedes it`}</li>\n      <li parentName=\"ul\">{`\"dummy\" nodes are known as the header sentinel and trailer sentinel for both the beginning and end of a list respectively`}</li>\n      <li parentName=\"ul\">{`Each insertion happens between a pair of existing nodes - eg. Add between header and what is after to add to the front`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Implementation of a Doubly Linked List`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`class Node(object):\n    def __init__(self, value):\n        self.value = value\n        self.nextNode = None\n        self.prevNode = None\n\na = Node(1)\nb = Node(2)\nc = Node(3)\n\na.nextNode = b\nb.prevNode = a\nb.nextNode = c\nc.prevNode = b\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pyds-150-recursion\"\n    }}>{`PYDS-15.0: Recursion`}</h2>\n    <p><strong parentName=\"p\">{`What is recursion?`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Two instances - First when recursion is used a technique in which a func makes one or more calls to itself - Second is when data structures use smaller instances of the exact type of DS when it represents itself`}</li>\n      <li parentName=\"ul\">{`Powerful alternative to repetitive tasks in which a loop is not ideal`}</li>\n      <li parentName=\"ul\">{`Great tool for building out particular DS`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"pyds-151-memoization\"\n    }}>{`PYDS-15.1: Memoization`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Remembers results of method calls based on the method inputs and then remembering them again.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"pyds-160-trees\"\n    }}>{`PYDS-16.0: Trees`}</h2>\n    <p><strong parentName=\"p\">{`Tree Section`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Tree Data Structures`}</li>\n      <li parentName=\"ol\">{`Implementing with Lists`}</li>\n      <li parentName=\"ol\">{`Implement with OOP`}</li>\n      <li parentName=\"ol\">{`Implemenet with priority queue`}</li>\n      <li parentName=\"ol\">{`Only covers ADT (Abstract Data Types)`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`What are trees?`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Has a root, branches and leaves`}</li>\n      <li parentName=\"ul\">{`Root at the top, leaves at the bottom`}</li>\n      <li parentName=\"ul\">{`Children of one node are independent of children of another`}</li>\n      <li parentName=\"ul\">{`Each leaf node is unique`}</li>\n      <li parentName=\"ul\">{`File systems are structured as a tree`}</li>\n      <li parentName=\"ul\">{`Consists of a set of nodes and edges that connect pairs of nodes`}</li>\n      <li parentName=\"ul\">{`Trees that have a max of two children are referred to as a `}<em parentName=\"li\">{`binary tree`}</em></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Nodes in the tree`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Can have a name \"key\"`}</li>\n      <li parentName=\"ul\">{`May also have additional \"payload\" info`}</li>\n      <li parentName=\"ul\">{`One incoming edge, 0-to-many outgoing`}</li>\n      <li parentName=\"ul\">{`Path: Order list of nodes connected by edges`}</li>\n      <li parentName=\"ul\">{`Level \"n\" refers to number of edges from the root node`}</li>\n      <li parentName=\"ul\">{`Height of the tree is maxHeight(Tree)`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Recursive Definition of a tree`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`either empty or consists of a root and zero or more subtrees which are also a tree`}</li>\n      <li parentName=\"ul\">{`the root of each subtree is connected to the root of the parent by an edge`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"pyds-161-implementing-a-tree-as-a-list-of-lists\"\n    }}>{`PYDS-16.1: Implementing a Tree as a List of Lists`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Store value of root node as first element`}</li>\n      <li parentName=\"ul\">{`Second element will be a list that represents the left subtree`}</li>\n      <li parentName=\"ul\">{`Third element will be a list of another list representing the right subtree`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# what we are aiming for\nmyTree = ['a',      # root\n        ['b',       # left subtree\n            ['d', [], []],\n            ['e', [], []],\n        ],\n        ['c', [], []]   # right subtree\n]\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Implementing a Tree using a List of Lists`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`# define the style of tree with a root and left/right empty child lists\ndef BinaryTree(r):\n    return [r, [], []]\n\ndef insertLeft(root, newBranch):\n    t = root.pop(1)\n\n    if len(t) > 1:\n        root.insert(1, [newBranch, t, []])\n    else:\n        root.insert(1, [newBranch], [], [])\n    return root\n\ndef insertRight(root, newBranch):\n    t = root.pop(1)\n\n    if len(t) > 1:\n        # reordered compared to above\n        root.insert(2, [newBranch, [], t)\n    else:\n        root.insert(2, [newBranch], [], [])\n    return root\n\ndef getRootVal(root):\n    return root[0]\n\ndef setRootVal(root, newVal):\n    root[0] = newVal\n\ndef getLeftChild(root):\n    return root[1]\n\ndef getRightChild(root):\n    return root[2]\n\nr = BinaryTree(3)\ninsertLeft(r, 4)\n# [3, [4, [], []], []]\ninsertLeft(r, 5)\n# [3, [5 [4, [], []], []], []]\ninsertRight(r, 6)\n# [3, [5 [4, [], []], []], [6, [], []]]\ninsertRight(r, 7)\n# [3, [5 [4, [], []], []], [7, [], [6, [], []]]]\nl = getLeftChild(r)\nprint l\n# [5 [4, [], []], []]\nsetRootVal(1, 9)\n# [3, [9 [4, [], []], []], [7, [], [6, [], []]]]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pyds-161-node-and-node-references-implementation\"\n    }}>{`PYDS-16.1: Node and Node References Implementation`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`In this case, define a class that has attributes for the root value as well as left and right subtrees`}</li>\n      <li parentName=\"ul\">{`Since rep more closely follows OOP, we will continue with this representation`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`class BinaryTree(object):\n    def __init__(self, rootObj):\n        self.key = rootObj\n        self.leftChild = None\n        self.rightChild = None\n\n    def insertLeft(self, newNode):\n        if self.leftChild == None:\n            self.leftChild = BinaryTree(newNode)\n        else:\n            t = BinaryTree(newNode)\n            t.leftChild = self.leftChild\n            self.leftChild = t\n\n    def insertRight(self, newNode):\n        if self.rightChild == None:\n            self.rightChild = BinaryTree(newNode)\n        else:\n            t = BinaryTree(newNode)\n            t.rightChild(self.rightChild)\n            self.rightChild=(t)\n\n    # bring back Object Address values\n    def getRightChild(self):\n        return self.rightChild\n\n    def getLeftChild(self):\n        return self.leftChild\n\n    def setRootVal(self, obj):\n        self.key = obj\n\n    def getRootVal(self):\n        return self.key\n\nr = BinaryTree('a')\nr.getRootVal()\n# 'a'\nprint r.getLeftChild()\n# None\nr.insertLeft('b')\nr.getLeftChild()\n# get address of another binary tree\nr.getLeftChild().getRootVal()\n# 'b'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pyds-162-tree-traversals\"\n    }}>{`PYDS-16.2: Tree Traversals`}</h2>\n    <p><strong parentName=\"p\">{`3 Main Methods`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Preorder`}</li>\n      <li parentName=\"ol\">{`Inorder`}</li>\n      <li parentName=\"ol\">{`Postorder`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">{`Commonly used patterns`}</li>\n      <li parentName=\"ul\">{`Difference is the order in which nodes are visited`}</li>\n      <li parentName=\"ul\">{`Preorder - We visit the root node first, before a recursive preorder traversal of the left subtree followed by the same for the right subtree`}</li>\n      <li parentName=\"ul\">{`Inorder - We recursively do an inorder traversal of left subtree, then visit the root node, then a recusive inorder traversal of the right subtree`}</li>\n      <li parentName=\"ul\">{`Postorder - Recursively postorder traversal of the left subtree and the right subtree followed by a visit to the root node`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`How to use \"Preorder\"`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Think of a tree with a Book as the root, Chapters 1 and 2 as the children and sections as the children of the chapters`}</li>\n      <li parentName=\"ul\">{`Preorder can \"read it\" from front to book`}</li>\n      <li parentName=\"ul\">{`Read the \"Book\" node, then recusively go down the left child eg. Chapter One and each recursive left subtree from there`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Preorder implementation`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Base case to check if tree exists`}</li>\n      <li parentName=\"ul\">{`If parameter is None, then the function returns without taking any action`}</li>\n      <li parentName=\"ul\">{`This can be implemented as a method of the `}<inlineCode parentName=\"li\">{`BinaryTree`}</inlineCode>{` class - Must check for the existence of the left and the right children before making the recursive call to preorder - In this case, probably better implementing it as an external function - The reason is that you rarely just want to traverse the tree - Most cases you want to accomplish something else during traversal`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def preorder(tree):\n    if tree != None:\n        print(tree.getRootVal())\n        preorder(tree.getLeftChild())\n        preorder(tree.getRightChild())\n\n# implementation as a BinaryTree method\n# generally not what you will want to do\ndef preorder(self):\n    print(self.key)\n    if self.leftChild:\n        self.leftChild.preorder()\n    if self.rightChild:\n        self.rightChild.preorder()\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Postorder Implementation`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Nearly identical to preorder except that we move the call to print to the end`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def postorder(tree):\n    if tree != None:\n        preorder(tree.getLeftChild())\n        preorder(tree.getRightChild())\n        print(tree.getRootVal())\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Inorder Implementation`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`In inorder traversal we visit the left subtree, followed by the root and finally the right subtree`}</li>\n      <li parentName=\"ul\">{`Notice that in all three of the traversal functions we are simply changing the position of the print statement with respect to the two recursive function calls`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def inorder(tree):\n    if tree != None:\n        inorder(tree.getLeftChild())\n        print(tree.getRootVal())                # print root for Proof of Concept\n        inorder(tree.getRightChild())\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pyds-163-priority-queues-with-binary-heaps\"\n    }}>{`PYDS-16.3: Priority Queues with Binary Heaps`}</h2>\n    <p><strong parentName=\"p\">{`What are Binary Queues?`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`One important variation of a queue is called a `}<em parentName=\"li\">{`Priority Queue`}</em></li>\n      <li parentName=\"ul\">{`A priority queue acts like a queue in that you dequeue an item by removing it from the front`}</li>\n      <li parentName=\"ul\">{`However, the logical order of items inside a queue is determined by their priority`}</li>\n      <li parentName=\"ul\">{`The classic way to implement this is using a `}<em parentName=\"li\">{`Binary Heap`}</em></li>\n      <li parentName=\"ul\">{`Binary heap allows us both enqueue and dequeue items in O(log n) time!`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`What are Binary Heaps`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Two common variations - \"min heap\": the smallest key is always at the front - \"max heap\": in which the largest key value is always at the front`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Implementing a Binary Heap`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`to make the heap work efficiently, we use logarithmic nature of binary tree`}</li>\n      <li parentName=\"ul\">{`must keep the tree balanced - we do this by creating a `}<em parentName=\"li\">{`complete binary tree`}</em>{` - if we know it is a complete list, we can find the parent/child relationship `}<inlineCode parentName=\"li\">{`2p`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`2p+1`}</inlineCode>{` - we can use this to make an efficient implementation of the tree - index 0 is set as 0 and then that math operation works`}</li>\n      <li parentName=\"ul\">{`heap will init with one element 0, but the current size will be 0`}</li>\n      <li parentName=\"ul\">{`most efficient way is to append to the list - likely violate the heap structure property by comparing with the parent - if new item is less than parent, we can swap the parent and child and repeat!`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# BinaryHeap() - create new heap\n# insert(k) - adds a new item to the heap\n# findMin() - returns the item with the minimum key value, leaving item in the heap\n# delMin() - returns the item with the minimum key value, removing item from the heap\n    # requires that we take the last position and set it to the root\n    # restore order by pushing down new root node\n    # swap new root with smallest child recursively\n# isEmpty()\n# size\n# buildHeap(list) builds a new heap from a list of keys\n    # we can build a heap in O(n) operations\n\nclass BinaryHeap(object):\n    def __init__(self):\n        self.heapList = [0]\n        self.currentSize = 0\n\n    def percUp(self, i):\n        while i // 2 > 0:\n            if self.heapList[i] < self.heapList[i // 2]:\n                tmp = self.heapList[i//2]\n                self.heapList[i//2] = self.heapList[i]\n                self.heapList[i] = tmp\n            i = i // 2\n\n    def insert(self, k):\n        self.heapList.append(k)\n        self.currentSize = self.currentSize + 1\n        self.percUp(self.currentSize)\n\n    def percDown(self, i):\n        while (i * 2) <= self.currentSize:\n            mc = self.minChild(i)\n            if self.heapList[i] > self.heapList[mc]:\n                tmp = self.heapList[i]\n                self.heapList[i] = self.heapList[mc]\n                self.heapList[mc] = tmp\n            i = mc\n\n    def minChild(self, i):\n        if i * 2 + 1 > self.currentSize:\n            return i * 2\n        else:\n            if self.heapList[i*2] < self.heapList[i*2+1]:\n                return i * 2\n            else:\n                return i * 2 + 1\n\n    def delMin(self):\n        retVal = self.heapList[1]\n        self.heapList[1] = self.heapList[self.currentSize]\n        self.currentSize = self.currentSize - 1\n        self.heapList.pop()\n        self.percDown(1)\n        return retVal\n\n    def buildHeap(self, aList):\n        i = len(aList) // 2\n        self.currentSize = len(aList)\n        self.heapList = [0] + aList[:]\n        while (i > 0):\n            self.percDown(i)\n            i = i - 1\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"more-on-heap-operations\"\n    }}>{`More on Heap Operations`}</h3>\n    <p>{`Generally implemented as an array due t the nature of accessing children.`}</p>\n    <h2 {...{\n      \"id\": \"-----inserting-an-element-up-heap-percolate-up\"\n    }}>{`---- Inserting an element (up-heap, percolate-up)`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Add element to the bottom level of the heap`}</li>\n      <li parentName=\"ol\">{`Compare the added element with its parent; if they are correct, stop`}</li>\n      <li parentName=\"ol\">{`If not, swap the element with its parent and return to the previous step`}</li>\n    </ol>\n    <p>{`We do not need to check the other child in the end, as the `}<inlineCode parentName=\"p\">{`transistive relation`}</inlineCode>{` will ensure that it holds.`}</p>\n    <h2 {...{\n      \"id\": \"-----extract-down-heap-percolate-down\"\n    }}>{`---- Extract (down-heap, percolate-down)`}</h2>\n    <p>{`The procedure for deleting the root form the heap.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Replace the root of the heap with the last element on the last level`}</li>\n      <li parentName=\"ol\">{`Compare the new root with its children; if the order is correct, stop`}</li>\n      <li parentName=\"ol\">{`If not, swap the element with one of its children and return to the previous step (swap with smaller child in min-heap and larger child in max-heap) - always swap the child that has the larger and correct difference`}</li>\n    </ol>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"pyds-164-binary-search-trees\"\n    }}>{`PYDS-16.4: Binary Search Trees`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`We've seen two different ways to get key-value pairs in a collection`}</li>\n      <li parentName=\"ul\">{`These collections implement the `}<inlineCode parentName=\"li\">{`map abstract data type`}</inlineCode></li>\n      <li parentName=\"ul\">{`Two implementations talked about so far were binary search on a list and hash tables.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Implementation of Binary Search Trees`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`relies on the property that keys that are less than the parent are found in the left subtree, while those greater are in the right subtree. - left/right subtree implementation is the `}<inlineCode parentName=\"li\">{`bst`}</inlineCode>{` property - refers just to direct parent - understand when something becomes to left and right tree`}</li>\n      <li parentName=\"ul\">{`implementation will use two classes! `}<em parentName=\"li\">{`BinarySearchTree`}</em>{` and `}<em parentName=\"li\">{`TreeNode`}</em>{` - since we need to be able to create and work with an empty tree - `}<em parentName=\"li\">{`BinarySearchTree`}</em>{` has a reference to the `}<em parentName=\"li\">{`TreeNode`}</em>{` that is the root of the binary search tree`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# order of insert data = [70,31,93,94,14,23,73]\n# put moethod - check if tree already has a root\n    # if not, create a new TreeNode and install it as the root of the tree\n    # if root node in place, call private, helper function put\n        # start at root of tree, search tree comparing new key to key in current node\n        # if less, search left, if more, search right\n\n# get method is easier since it searches tree recursively until it gets to a non-matching leaf node of finds a matching key\n    # when matching key found, the value stored in the payload of the node is returned\n\n# delete is more difficult\n    # if tree has more than one node, we search using the _get method to find the TreeNode that needs to be removed\n    # if single node, remove root but must check if root key == param key\n    # if we find node, 3 options to consider\n        # does node to delete have children?\n            # remove reference to parent -> set [left|right] child to None\n        #  does node to delete have single child?\n            # slightly more complex -> promote child to take parent\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n        self.size = 0\n\n    def length(self):\n        return self.size\n\n    # allows to call len(<BST object>)\n    def __len__(self):\n        return self.size\n\n    def __iter__(self):\n        return self.root.__iter__()\n\n    def _put(self, key, val, currentNode):\n        if key < currentNode.key:\n            if currentNode.hasLeftChild():\n                self._put(key,val,currentNode.leftChild)\n            else:\n                currentNode.leftChild = TreeNode(key,val,parent=currentNode)\n        else:\n            if currentNode.hasRightChild():\n                self._put(key,val,currentNode.rightChild)\n            else:\n                currentNode.rightChild = TreeNode(key, val, parent = currentNode)\n\n    def __setitem__(self, k, v):\n        self.put(k,v)\n\n    def put(self, key, val):\n        if self.root:\n            self._put(key, val, self.root)\n        else:\n            self.root = TreeNode(key, val)\n        self.size = self.size + 1\n\n    # _ for code refactoring reasons as help\n    def _put(self, key, val, currentNode):\n        if key < currentNode.key:\n            if currentNode.hasLeftChild():\n                self._put(ley, val, currentNode.leftChild)\n            else:\n                currentNode.leftChild = TreeNode(key, val, parent = currentNode)\n        else:\n            if currentNode.hasRightChild():\n                self._put(key, val, currentNode.rightChild)\n            else:\n                currentNode.rightChild = TreeNode(key, val, parent = currentNode)\n\n    def get(self, key):\n        if self.root:\n            res = self._get(key,self.root)\n            if res:\n                return res.payload\n            else:\n                return None\n        else:\n            return None\n\n    def _get(self, key, currentNode):\n        if not currentNode:\n            return None\n        elif currentNode.key == key:\n            return currentNode\n        elif key < currentNode.key:\n            return self._get(key, currentNode.leftChild)\n        else:\n            return self._get(key, currentNode.rightChild)\n\n    def __getitem__(self, key):\n        return self.get(key)\n\n    def __contains__(self, key):\n        if self._get(key, self.root):\n            return True\n        else:\n            return False\n\n    def delete(self, key):\n        if self.size > 1:\n            nodeToRemove = self._get(key, self.root)\n            if nodeToRemove:\n                self.remove(nodeToRemove)\n                self.size = self.size-1\n            else:\n                raise KeyError('Error, key not in tree')\n        elif self.size == 1 and self.root.key == key:\n            self.root = None\n            self.size = self.size - 1\n        else:\n            raise KeyError('Error, key not in tree')\n\n    def __delitem__(self, key):\n        self.delete(key)\n\n    def spliceOut(self):\n        if self.isLeaf():\n            if self.isLeftChild():\n                self.parent.leftChild = None\n            else:\n                self.parent.rightChild = None\n        elif self.hasAnyChildren():\n            if self.hasLeftChild():\n                if self.isLeftChild():\n                    self.parent.leftChild = self.leftChild\n                else:\n                    self.parent.rightChild = self.leftChild\n                    self.leftChild.parent = self.parent\n        else:\n            if self.isLeftChild():\n                self.parent.leftChild = self.rightChild\n            else:\n                self.parent.rightChild = self.rightChild\n                self.rightChild.parent = self.parent\n\n    def findSuccessor(self):\n        succ = None\n        if self.hasRightChild():\n            succ = self.rightChild.findMin()\n        else:\n            if self.parent:\n                if self.isLeftChild():\n                    succ = self.parent\n                else:\n                    self.parent.rightChild = None\n                    succ = self.parent.findSuccessor()\n                    self.parent.rightChild = self\n        return succ\n\n    def findMin(self):\n        current = self\n        while current.hasLeftChild():\n            current = current.leftChild\n        return current\n\n    def remove(self, currentNode):\n        if currentNode.isLeft(): #Leaf\n            if currentNode == currentNode.parent.leftChild:\n                currentNode.parent.leftChild = None\n            else:\n                currentNode.parent.rightChild = None\n        elif currentNode.hasBothChildren(): #interior\n            succ = currentNode.findSuccessor()\n            succ.spliceOut()\n            currentNode.key = succ.key\n            currentNode.payload = succ.payload\n        else: # this node has one child\n            if currentNode.hasLeftChild():\n                if currentNode.isLeftChild():\n                    currentNode.leftChild.parent = currentNode.parent\n                    currentNode.parent.leftChild = currentNode.leftChild\n                elif currentNode.isRightChild():\n                    currentNode.leftChild.parent = currentNode.parent\n                    currentNode.parent.rightChild = currentNode.leftChild\n                else:\n                    currentNode.replaceNodeData(currentNode.leftChild.key,\n                            currentNode.leftChild.payload,\n                            currentNode.leftChild.leftChild,\n                            currentNode.leftChild.rightChild)\n            else:\n                if currentNode.isLeftChild():\n                    currentNode.rightChild.parent = currentNode.parent\n                    currentNode.parent.leftChild = currentNode.rightChild\n                elif currentNode.isRightChild():\n                    currentNode.rightChild.parent = currentNode.parent\n                    currentNode.parent.rightChild = currentNode.rightChild\n                else:\n                    currentNode.replaceNodeData(currentNode.rightChild.key,\n                            currentNode.rightChild.payload,\n                            currentNode.rightChild.leftChild,\n                            currentNode.rightChild.rightChild)\n\nclass TreeNode:\n    def __init__(self, key, val, left=None, right=None, parent=None):\n        self.key=key\n        self.val=val\n        self.left=left\n        self.right=right\n        self.parent=parent\n\n    def hasLeftChild(self):\n        return self.leftChild\n\n    def hasRightChild(self):\n        return self.rightChild\n\n    def isLeftChild(self):\n        return self.parent and self.parent.leftChild == self\n\n    def isRightChild(self):\n        return self.parent and self.parent.rightChild == self\n\n    def isRoot(self):\n        return not self.parent\n\n    def isLeaf(self):\n        return not (self.rightChild or self.leftChild)\n\n    def hasAnyChildren(self):\n        return self.rightChild or self.leftChild\n\n    def hasBothChildren(self):\n        return self.rightChild and self.leftChild\n\n    def replaceNodeData(self, key, value, lc, rc):\n        self.key = key\n        self.payload = value\n        self.leftChild = lc\n        self.rightChild = rc\n        if self.hasLeftChild():\n            self.leftChild.parent = self\n        if self.hasRightChild():\n            self.rightChild.parent = self\n`}</code></pre>\n    <p>{`Notes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Deletion is one of the more difficult things we can do for a binary search tree`}</li>\n      <li parentName=\"ul\">{`If both children are present, then we need to decide on a successor`}</li>\n      <li parentName=\"ul\">{`The successor is guaranteed to have no more than one child, so we know how to remove it using the two cases for deletion that we have already implemented`}</li>\n      <li parentName=\"ul\">{`Once the successor has been removed, we simply put it in the tree in place of the node to be deleted`}</li>\n      <li parentName=\"ul\">{`This is an inorder traversal from largest to smallest - If right child, the successor is the findMin() of that right subtree - If no right child, then successor is the parent`}</li>\n      <li parentName=\"ul\">{`Remember, left most child will be the smallest of a BST`}</li>\n      <li parentName=\"ul\">{`The iterator method itself takes a bit more work - yield keyword freezes the state of the function - iterators vs generators in Python`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"pyds-165-common-tree-questions\"\n    }}>{`PYDS-16.5: Common Tree Questions`}</h2>\n    <p>{`Given a binary tree, check whether it's a binary search tree or not.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Tree traversal should lead to sorted order`}</li>\n      <li parentName=\"ul\">{`Another solution is to keep track of the min and max values a node can take`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Solution 1\ntree_vals = []\n# traversal should lead to sorted order\ndef inorder(tree):\n    if tree != None:\n        inorder(tree.getLeftChild())\n        treeVals.append(tree.getRootVal())\n        inorder(tree.getRightChild())\n\ndef sortCheck(treeVals):\n    return treeVals == sorted(treeVals)\n\ninorder(tree)\nsortCheck(treeVals)\n\n# Solution 2\n# class Node\n    # def treeMax - if not node, return -inf\n    # def tree Min - not node, return inf\n    # def verify\n        - if not node, return True\n        - if tree.max and tree.min and verify(node.right) return True\n        - else return False\n`}</code></pre>\n    <hr></hr>\n    <h1 {...{\n      \"id\": \"170-searching-and-sorting\"\n    }}>{`17.0: Searching and Sorting`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`First half is search`}</li>\n      <li parentName=\"ul\">{`Second half is sorting`}</li>\n    </ul>\n    <p>{`Note: In python, we can use `}<inlineCode parentName=\"p\">{`in`}</inlineCode>{` to check if an element is in a list.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`15 in [5, 4, 15] # true\n`}</code></pre>\n    <p>{`How does this work? What is the best way to search?`}</p>\n    <h2 {...{\n      \"id\": \"171-sequential-search\"\n    }}>{`17.1: Sequential Search`}</h2>\n    <p>{`Basic searching technique. Sequentially go through a data subject and compare as you go along.`}</p>\n    <p>{`Eg. traversing an unordered list for 50 and comparing as you go.`}</p>\n    <p>{`If 50 was not present, we still had to check every element in the array.`}</p>\n    <p>{`But what if it was ordered?`}</p>\n    <p>{`If the array was sorted, then we only have to search until we get a match or find something greater than our search target.`}</p>\n    <p><strong parentName=\"p\">{`Ordered vs Unordered sequential search`}</strong></p>\n    <p>{`Average time for unordered will be `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{`, whereas for ordered it will be `}<inlineCode parentName=\"p\">{`n/2`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"172-implementation-of-a-sequential-search\"\n    }}>{`17.2: Implementation of a Sequential Search`}</h2>\n    <p><strong parentName=\"p\">{`Unordered List`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def seqSearch(arr, el):\n    pos = 0\n    found = False\n\n    while pos < len(arr) and not found:\n        if arr[pos] == el:\n            found = True\n        else:\n            pos += 1\n\n    return found\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Ordered List`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def orderedSeqSearch(arr, el):\n    pos = 0\n    found = False\n    stopped = False\n\n    while pos < len(arr) and not found and not stopped:\n        if arr[pos] == el:\n            found = True\n        else:\n            if arr[pos] > el:\n                stopped = True\n            else:\n                pos += 1\n\n    return found\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"173-binary-search\"\n    }}>{`17.3: Binary Search`}</h2>\n    <p>{`If the list is ordered, we can do a binary search!`}</p>\n    <p>{`This item starts from the middle.`}</p>\n    <p>{`If the item is greater, we know the entire lower half of the list can be ignore.`}</p>\n    <p>{`Then, we can repeat the process with the upper half.`}</p>\n    <p>{`So it uses `}<inlineCode parentName=\"p\">{`Divide and Conquer`}</inlineCode>{` - divide to smaller pieces, solve the smaller pieces and then repeat.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Each comparison eliminates about half of the remaining items from consideration`}</li>\n      <li parentName=\"ul\">{`What is the maximum number of comparisons this algorithm will require to check the entire list?`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`// Comparisons\n\n1: n/2 comparisons left\n2: n/4 comparisons left\n3: n/8 comparisons left\n...\ni: n/2^i comparisons left\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"174-implementation-of-a-binary-search\"\n    }}>{`17.4: Implementation of a Binary Search`}</h2>\n    <p>{`2 Versions - iterative and recusive`}</p>\n    <p><strong parentName=\"p\">{`Iterative`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def binarySearch(arr, el):\n    first = 0\n    last = len(arr)-1\n\n    found = False\n\n    while first <= last and not found:\n        mid = (first+last)/2\n        if arr[mid] == el:\n            found = True\n        else:\n            if el < arr[mid]:\n                last = mid-1\n            else:\n                first = mid+1\n    return found\n\narr = [1,2,3,4...] # must be sorted\n\nbinarySearch(arr, 4) # True\nbinarySeach(arr, 13) # False\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Recursive`}</strong></p>\n    <p>{`Remember: Must always have a base case!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def recBinSearch(arr, el):\n    if len(arr) == 0:\n        return False\n    else:\n        mid = len(arr)/2\n        if arr[mid] == el:\n            return True\n        else:\n            if el < arr[mid]:\n                return recBinSearch(arr[:mid], el)\n            else:\n                return recBinSearch(arr[mid+1:], el])\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"175-hashing\"\n    }}>{`17.5: Hashing`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Hashing`}</li>\n      <li parentName=\"ul\">{`Hash Tables`}</li>\n      <li parentName=\"ul\">{`Hash Functions`}</li>\n      <li parentName=\"ul\">{`Collision Resolution`}</li>\n      <li parentName=\"ul\">{`Implementing a Hash Table`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Hashing`}</strong></p>\n    <p>{`We've seen how we can improve search by knowing about structures beforehand.`}</p>\n    <p>{`We can build a data structure that can be accessed in O(1) time - this is hashing!`}</p>\n    <p>{`A `}<inlineCode parentName=\"p\">{`hash table`}</inlineCode>{` is a collection of items that are stored in such a way that it becomes easy to find them later.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Each position of the hash table, `}<inlineCode parentName=\"li\">{`slots`}</inlineCode>{`, can hold an item and is named by an integer value starting at 0.`}</li>\n      <li parentName=\"ul\">{`For example, we will have a slot named 0, a slot named 1, a slot named 2 and so on.`}</li>\n      <li parentName=\"ul\">{`Initially, the hash table contains no items so every slot is empty`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Hash Tables`}</strong></p>\n    <p>{`The mapping between an item and the slot were that item belongs in the hash table is called the `}<inlineCode parentName=\"p\">{`hash function`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\">{`The hash function will take any item in the collection and return an integer in the range of slot names, between 0 and m-1.`}</li>\n      <li parentName=\"ul\">{`So how should we use hash functions to map items to slots?`}</li>\n    </ul>\n    <p>{`One `}<inlineCode parentName=\"p\">{`hash function`}</inlineCode>{` we can use is the remainder method. When preseted with an item, the hash function is the item divided by the table size, this is then its slot number.`}</p>\n    <p>{`Example:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Assume we have 54, 26, 93, 17, 77 and 31`}</li>\n      <li parentName=\"ul\">{`We've preassigned an empty hash table of m=11`}</li>\n      <li parentName=\"ul\">{`Our remainder hash function then is `}<inlineCode parentName=\"li\">{`h(item)=item%11`}</inlineCode></li>\n    </ul>\n    <p>{`Let's see the results!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Item    | Hash Value\n---------------------\n54      | 10\n26      | 4\n93      | 5\n17      | 6\n77      | 0\n31      | 9\n`}</code></pre>\n    <p>{`We are now ready to occupy 6 out of the 11 slots`}</p>\n    <ul>\n      <li parentName=\"ul\">{`This is referred to as the `}<inlineCode parentName=\"li\">{`load factor`}</inlineCode>{` and is commonly denoted by `}<inlineCode parentName=\"li\">{`lambda = number of items / table size`}</inlineCode></li>\n      <li parentName=\"ul\">{`Here we have `}<inlineCode parentName=\"li\">{`lambda = 6/11`}</inlineCode></li>\n    </ul>\n    <p>{`Our Hash Table has now been loaded.`}</p>\n    <p>{`When we want to search, we just need to use the hash function to compute the slot name for the item and then chack the hash table to see if it is present.`}</p>\n    <p>{`Therefore the operation is O(1), since a constant amount o time is required to compute the hash value and then index the hash table at that location.`}</p>\n    <p>{`What if we have two items that have the same location? This is known as a `}<inlineCode parentName=\"p\">{`collision`}</inlineCode>{` (sometimes a `}<inlineCode parentName=\"p\">{`clash`}</inlineCode>{`).`}</p>\n    <p>{`We can talk about this resolution soon.`}</p>\n    <p><strong parentName=\"p\">{`Hash Function`}</strong></p>\n    <p>{`A hash func that maps each item into a unique slot is referred to as a `}<inlineCode parentName=\"p\">{`perfect hash function`}</inlineCode>{`.`}</p>\n    <p>{`Our goal is to create a hash func that minimizes collisions, so it is easy to compute and evenly distributes the items in the hash table.`}</p>\n    <p><strong parentName=\"p\">{`Folding Method`}</strong></p>\n    <p>{`This method for constructing hash functions begins by dividing the item into equal-size pieces (last piece may not be of equal size).`}</p>\n    <p>{`These pieces are then added together to give the resulting hash value.`}</p>\n    <p>{`Example:`}</p>\n    <p>{`Give the number `}<inlineCode parentName=\"p\">{`436-555-4601`}</inlineCode>{` - we can divide these numbers into groups of two.`}</p>\n    <p>{`After add the numbers now, we get 210.`}</p>\n    <p>{`If we assume our hash table has 11 slots, we need to perform the extra step of dividing by 11 and keeping its remainder.`}</p>\n    <p>{`210 % 11 is 1, so the phone number 436-555-4601 hashes to slot 1.`}</p>\n    <p><strong parentName=\"p\">{`Mid-square method`}</strong></p>\n    <p>{`We first square the item, and then extract some portion of the resulting digits.`}</p>\n    <p>{`Example, if it were 44, we computer 44^2 = 1936.`}</p>\n    <p>{`By extracting the middle two digits, 93, and performing the remainder step, we get 93%11 = 5`}</p>\n    <p><strong parentName=\"p\">{`Non-Integer elements`}</strong>{`\nWe can also create hash funcs for character-based items.`}</p>\n    <p>{`The word `}<inlineCode parentName=\"p\">{`cat`}</inlineCode>{` can be thought of as a sequence of ordinal values.`}</p>\n    <p>{`If you use Python, you can just use the function `}<inlineCode parentName=\"p\">{`ord('a')`}</inlineCode>{` and then get the values.`}</p>\n    <p>{`So `}<inlineCode parentName=\"p\">{`ord('a')`}</inlineCode>{` = 97 % 11 = 11`}</p>\n    <p>{`For cat, you can sum up all the ordinal values, get 312 % 11 = 4.`}</p>\n    <p><strong parentName=\"p\">{`Collision Resolution`}</strong></p>\n    <p>{`One method for resolving it to look into the hash table and find another open slot to hold the item that caused the collision. This is known as `}<inlineCode parentName=\"p\">{`Open Addressing`}</inlineCode>{`.`}</p>\n    <p>{`By systematically visiting every spot, we are doing something known as `}<inlineCode parentName=\"p\">{`linear probing`}</inlineCode>{`.`}</p>\n    <p>{`Example if we had 77, 44, and 55, we then move 44 and 55 up until it finds something that fits.`}</p>\n    <p>{`One way to deal with clustering is to skip slots, thereby more evenly distributing the items that have caused collisions.`}</p>\n    <p><inlineCode parentName=\"p\">{`rehashing`}</inlineCode>{` is the general process of looking for another slot.`}</p>\n    <p><inlineCode parentName=\"p\">{`quadratic probing`}</inlineCode>{` is a variation of the linear probing idea.`}</p>\n    <p>{`Instead of using a constant \"skip\" value, we use a rehash function that increments the hash value by 1, 3, 5, 7, 9 and so on.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`If the first have value is `}<inlineCode parentName=\"li\">{`h`}</inlineCode>{`, successive values are `}<inlineCode parentName=\"li\">{`h+1`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`h+4`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`h+9`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`h+16`}</inlineCode></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Alternative Option`}</strong></p>\n    <p>{`We can also allow each slot to hold a reference to a collection (or chain) or items.`}</p>\n    <p><inlineCode parentName=\"p\">{`Chaining`}</inlineCode>{` allows many items to exist at the same location in the hash table.`}</p>\n    <p>{`When collisions happen, the item is still placed in the proper slot of the hash table.`}</p>\n    <p>{`As more items hash to the same location, the difficulty for finding the item also increases.`}</p>\n    <h2 {...{\n      \"id\": \"176-implementation-of-a-hash-table\"\n    }}>{`17.6: Implementation of a Hash Table`}</h2>\n    <p><strong parentName=\"p\">{`Map`}</strong></p>\n    <p>{`The idea of a dictionary used as a hash table to get and retrieve items using `}<inlineCode parentName=\"p\">{`keys`}</inlineCode>{` is often referred to as a mapping.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# HashTable() - Create a new, empty map. It returns an empty map colleciton.\n# put(key, val) - Add a new key-value pair to the map. If the key is already in the map then replace the old value with the new value\n# get(key) - Give a key, return the value stored in the map or None\n# del - Delete the key-value pair from the map using a statement of the form del map[key]\n# len() - Return the number of key-value pairs stored\n# in the map Return True for a statement of the form \\`key in map\\`, if the given key is in the map, False otherwise\n\n#\n# Note - you can take this and play around with other hash functions\n#\n\nclass HashTable(object):\n    def __init__(self, size):\n        self.size = size\n        self.slots = [None] * self.size     # list with an empty item\n        self.data = [None] * self.size\n\n    def put(self, key, data):\n        hashvalue = self.hashfunction(key, len(self.slots))\n        if self.slots[hashvalue] == None:\n            self.slots[hashvalue] = key\n            self.data[hashvalue] = data\n        else:\n            if self.slots[hashvalue] == key:\n                self.data[hashvalue] = data\n            else:\n                nextslot = self.rehash(hashvalue, len(self.slots))\n\n                while self.slots[nextslot] != None and self.slots[nextslot] != key:\n                    nextslot = self.rehash(nextslot, len(self.slots))\n\n                if self.slots[nextslot] == None:\n                    self.slots[nextslot] = key\n                    self.data[nextslot] = data\n\n                else:\n                    self.data[nextslot] = data\n\n    def hashfunction(self, key, size):\n        return key%size\n\n    def rehash(self, oldhash, size):\n        return (oldhash+1)%size\n\n    def get(self,key):\n        startslot = self.hashfunction(key, len(self.slots))\n        data = None\n        stop = False\n        found = False\n        position = startslot\n\n        while self.slots[position] != None and not found and not stop:\n            if self.slots[position] == key:\n                found = True\n                data = self.slots[position]\n            else:\n                position = self.rehash(position, len(self.slots))\n                if position == startslot:\n                    stop = True\n        return data\n\n    def __getitem__(self, key):\n        return self.get(key)\n\n    def __setitem__(self, key, data):\n        self.put(key, data)\n\nh = HashTable(5)\nh[1] = 'one'\nh[2] = 'two'\nh[3] = 'three'\nh[1] # 'one'\nh[2] # 'two'\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"177-sorting-overview\"\n    }}>{`17.7: Sorting Overview`}</h2>\n    <p>{`We've discussed how to search for items, but now we will look at how to sort!`}</p>\n    <p>{`Explanations and Implementations:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Bubble Sort`}</li>\n      <li parentName=\"ol\">{`Selection Sort`}</li>\n      <li parentName=\"ol\">{`Insertion Sort`}</li>\n      <li parentName=\"ol\">{`Shell Sort`}</li>\n      <li parentName=\"ol\">{`Merge Sort`}</li>\n      <li parentName=\"ol\">{`Quick Sort`}</li>\n    </ol>\n    <p>{`Common interview questions consist of being asked to implement a sorting algorithm.`}</p>\n    <p>{`The best way to understand algorithms is to understand two things:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The underlying principle behind the algorithm`}</li>\n      <li parentName=\"ol\">{`What a simple visualization of what the algorithm looks like`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"178-visualizing-sorting-algorithms\"\n    }}>{`17.8: Visualizing Sorting Algorithms`}</h2>\n    <p>{`Examples for seeing them:`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"www.sorting-algorithms.com\"\n      }}>{`Sorting Algorithms website`}</a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"www.visualgo.net/sorting.html\"\n      }}>{`Visualgo`}</a></p>\n    <h2 {...{\n      \"id\": \"179-implementing-the-bubblesort-sort-method\"\n    }}>{`17.9: Implementing the Bubblesort Sort Method`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`bubble sort`}</inlineCode>{` makes multiple passes through a list`}</p>\n    <ul>\n      <li parentName=\"ul\">{`It compares adjacent items and exchanges those that are out of order`}</li>\n      <li parentName=\"ul\">{`Each pass through the list places the next largest value in its proper place`}</li>\n      <li parentName=\"ul\">{`Each item \"bubbles\" up to the location where it belongs`}</li>\n    </ul>\n    <p>{`In the visualization of the sort, imagine the comparision beside each other to see if they are out of order.`}</p>\n    <p>{`If so, you swap and repeat (exchange), if not (no exchange), set the element to compare to the next number.`}</p>\n    <p>{`There can be multiple passes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def bubbleSort(arr):\n    for n in range(len(arr)-1, 0, -1):\n        # print n\n        for k in range(n):\n            # print k\n            if arr[k] > arr[k+1]:\n                temp = arr[k]\n                arr[k] = arr[k+1]\n                arr[k+1] = temp\n\narr = [5, 3, 7, 2]\nbubbleSort(arr)\narr             # [2 3, 5, 7]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"1710-implementing-the-selection-sort\"\n    }}>{`17.10: Implementing the Selection Sort`}</h2>\n    <p>{`Selection sort improves on the bubble sort by making only one exchange for every pass through the list.`}</p>\n    <p>{`It looks for the largest value as it makes a pass and, after completing the pass, places it in the proper location.`}</p>\n    <p>{`The process continues and requires `}<inlineCode parentName=\"p\">{`n-1`}</inlineCode>{` passes to sort `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{` items since the final item is placed on the nth pass.`}</p>\n    <p>{`Example: `}{`[10, 4, 3, 2]`}</p>\n    <p>{`We notice 10 is the largest, so we swap last place with it.\nThen 4, so second last place.\nRepeat.`}</p>\n    <p>{`Resources:`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://www.cs.armstrong.edu/liang/animation/web/SelectionSort.html\"\n      }}>{`cs.armstrong`}</a></p>\n    <p><strong parentName=\"p\">{`Implementation of the Selection Sort`}</strong></p>\n    <p>{`\\`\\`python\ndef selectionSort(arr):\nfor fillslot in range(len(arr)-1, 0, -1):\npositionOfMax = 0`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`    for location in range(1, fillslot+1):\n        if arr[location] > arr[positionOfMax]:\n            positionOfMax = location\n\n    temp = arr[fillslot]\n    arr[fillslot] = arr[positionOfMax]\n    arr[positionOfMax] = temp\n`}</code></pre>\n    <p>{`arr = `}{`[10, 4, 3, 2]`}{`\nselectionSort(arr)`}</p>\n    <h1 {...{\n      \"id\": \"2-3-4-10\"\n    }}>{`[2, 3, 4, 10]`}</h1>\n    <pre><code parentName=\"pre\" {...{}}>{`## 17.11: Insertion Sort\n\nAlways maintains a sorted sublist in the lower positions of the list.\n\nEach new item is inserted back into the previous sublist such that the sorted sublist is one item larger.\n\n- Begin by assuming list with one item (position 0) is already sorted.\n- On each pass pass, one for each item 1 through n-1, the current item is checked against those in the already sorted sublist.\n- As we look back into the already sorted sublist, we shift those items that are greater to the right.\n- When we reach a smaller item or the end of the sublist, the current item can be inserted.\n\nInsertion sort builds the final sorted array one item at a time. It is much less effecient on large lists than more advanced algorithms such as quicksort, heapsort or merge sort.\n\nThis runs in O(n^2) but a best case costs 1 on each pass. This requires a third of the processing power though!\n\n**Implementation of the Insertion Sort**\n\n\\`\\`\\`python\ndef insertionSort(arr):\n    for i in range(1, len(arr)):\n        currentValue = arr[i]\n        position = i\n\n        while position > 0 and arr[position-1] > currentValue:\n            arr[position] = arr[position-1]\n            position = position-1\n\n        arr[position] = currentValue\n\narr = [10, 4, 3, 2]\ninsertionSort(arr)\n# [2, 3, 4, 10]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"1712-shell-sort\"\n    }}>{`17.12: Shell Sort`}</h2>\n    <p>{`Shell sort improves on the insertion sort by breaking the original list into a number of smaller sublists.`}</p>\n    <p>{`The unique way that these sublists are chosen is the key to the shell sort.`}</p>\n    <p>{`Instead of breaking lists into contiguous sublists, shell sort uses an increment `}<inlineCode parentName=\"p\">{`i`}</inlineCode>{` to create a sublist by choose all items that are `}<inlineCode parentName=\"p\">{`i`}</inlineCode>{` items apart.`}</p>\n    <p>{`If we have 9 items and we have an increment of 3, each n+3 form the sublist.`}</p>\n    <p>{`After completing these sublists, we've moved these closer to where they belong.`}</p>\n    <p>{`Then if we do the final sort with an increment of one (so in this case, just a standard insertion sort).`}</p>\n    <p><strong parentName=\"p\">{`Implementation of Shell Sort`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def shellSort(arr):\n    sublistCount = len(arr)/2\n\n    # While we still have sub lists\n    while sublistCount > 0:\n        for start in range(sublistCount):\n            # Use a gap insertion\n            gapInsertionSort(arr, start, sublistCount)\n\n        print 'After increments of size: ', sublistCount\n        print 'Current array: ', arr\n        sublistCount = sublistCount / 2\n\ndef gapInsertionSort(arr, start, gap):\n    for i in range(start+gap, len(arr), gap):\n        currentValue = arr[i]\n        position = i\n\n        # Using the gap\n        while position >= gap and arr[position - gap] > currentValue:\n            arr[position] = arr[position - gap]\n            position = position - gap\n\n        # Set current value\n        arr[position] = currentValue\n\narr = [10, 4, 3, 2, 12, 35]\nshellSort(arr)\n# [2, 3, 4, 10, 12, 35]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"1712-merge-sort\"\n    }}>{`17.12: Merge Sort`}</h2>\n    <p>{`Merge sort is a recursive algorithm that continual splits a list a half. Going with a `}<inlineCode parentName=\"p\">{`divide and conquer`}</inlineCode>{` strategy.`}</p>\n    <p>{`If the list is empty or has one item, it is sorted by definition (the base case).`}</p>\n    <p>{`If the list has more than one item, we split the list and recursively invoke a merge sort on both halves.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Once the two halves are sorted, the fundamental operation, called a `}<inlineCode parentName=\"li\">{`merge`}</inlineCode>{` is performed.`}</li>\n      <li parentName=\"ul\">{`Merging is the process of taking two smaller sorted lists and combining them together into a single, sorted, new list.`}</li>\n      <li parentName=\"ul\">{`Continually `}<inlineCode parentName=\"li\">{`split`}</inlineCode>{` and at the end, recusively merge!`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Implementation of a Merge Sort`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def mergesort(arr):\n    if len(arr) > 1:\n        mid = len(arr) / 2\n        lefthalf = arr[:mid]\n        righthalf = arr[mid:]\n\n        mergesort(lefthalf)\n        mergesort(righthalf)\n\n        i = 0\n        j = 0\n        k = 0\n\n        while i < len(lefthalf) and j < len(righthalf):\n            if lefthalf[i] < righthalf[i]:\n                arr[k] = lefthalf[i]\n\n                i += 1\n\n            else:\n                arr[k] = righthalf[j]\n                j += 1\n\n            k += 1\n\n        while i < len(lefthalf):\n            arr[k] = lefthalf[i]\n            i += 1\n            k += 1\n\n        while j < len(righthalf):\n            arr[k] = righthalf[j]\n            j += 1\n            k += 1\n    print 'Merging', arr\n\narr = [11,2,5,4,7,56,2,12,23]\nmergesort(arr)\n# output [2,2,4,5,7,11,12,23,56]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"1713-quick-sort\"\n    }}>{`17.13: Quick Sort`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`First selects a value, called the `}<inlineCode parentName=\"li\">{`pivot value`}</inlineCode>{` and there will be a `}<inlineCode parentName=\"li\">{`left mark`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`right mark`}</inlineCode></li>\n      <li parentName=\"ul\">{`The role of the pivot value is to assist with splitting the list`}</li>\n      <li parentName=\"ul\">{`After selecting the `}<inlineCode parentName=\"li\">{`pivot value`}</inlineCode>{`, the `}<inlineCode parentName=\"li\">{`partition`}</inlineCode>{` process happens next - It will find the split point and at the same time move other items to the appropriate side of the list, either less than or greater than the pivot value`}</li>\n      <li parentName=\"ul\">{`The actual position where the pivot value belongs in the final sorted list, commonly called the `}<inlineCode parentName=\"li\">{`split point`}</inlineCode>{`, will be used to divide the list for subsequent calls to the quick sort`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`left mark`}</inlineCode>{` will check if greater than `}<inlineCode parentName=\"li\">{`pivot value`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`right mark`}</inlineCode>{` will check if less than`}</li>\n      <li parentName=\"ul\">{`Once decided, switch the marks`}</li>\n      <li parentName=\"ul\">{`When the `}<inlineCode parentName=\"li\">{`right mark`}</inlineCode>{` is < than the `}<inlineCode parentName=\"li\">{`left mark`}</inlineCode>{` on the array, we call this the `}<inlineCode parentName=\"li\">{`split point`}</inlineCode>{` - Once crossed, we swap right mark with the `}<inlineCode parentName=\"li\">{`pivot value`}</inlineCode></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Implementation of the Quick Sort`}</strong></p>\n    <p>{`You can choose different pivot values, but this implementation will choose the first item in the list.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def quickSort(arr):\n    quickSortHelper(arr, 0, len(arr-1))\n\n# quickSort recursively calls\ndef quickSortHelper(arr, first, last):\n    if first < last:\n        splitPoint = partition(arr, first, last)\n\n        quickSortHelper(arr, first, splitPoint-1)\n        quickSortHelper(arr, splitPoint+1, last)\n\ndef partition(arr, first, last):\n    pivotValue = arr[first]\n    leftmark = first+1\n    rightmark = last\n\n    done = False\n\n    while not done:\n        while leftmark <= rightmark and arr[leftmark] <= pivotValue:\n            leftmark += 1\n        while arr[rightmark] >= pivotValue and rightmark >= leftmark:\n            rightmark -= 1\n        if rightmark < leftmark:\n            done = True\n        else:\n            temp = arr[leftmark]\n            arr[leftmark] = arr[rightmark]\n            arr[rightmark] = temp\n\n    temp = arr[first]\n    arr[first] = arr[rightmark]\n    arr[rightmark] = temp\n\n    return rightmark\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"180-graphs\"\n    }}>{`18.0: Graphs`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Learn about graphs`}</li>\n      <li parentName=\"ul\">{`Implement the graph abstract data type using multiple internal representations`}</li>\n      <li parentName=\"ul\">{`See how graphs solve a wide variety of problems`}</li>\n      <li parentName=\"ul\">{`With a good graph implementation, we can then use these to solve problems which at first see difficult`}</li>\n      <li parentName=\"ul\">{`Vertices and Edges - Edges can be directed (one-way/digraph) or two-way - Edges can be weighted`}</li>\n      <li parentName=\"ul\">{`Cycle in a directed graph is a path that starts and ends at the same vertex - No cycles is called `}<inlineCode parentName=\"li\">{`acyclic`}</inlineCode>{` - we will see that we can solve several important problems if the problem can be represented as a `}<inlineCode parentName=\"li\">{`directed acyclic graph`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"181-adjacency-matrices-and-lists\"\n    }}>{`18.1: Adjacency Matrices and Lists`}</h2>\n    <p><strong parentName=\"p\">{`Adjacency Matrix`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`One of the easiest ways to implement a graph is to use a two-dimensional matrix`}</li>\n      <li parentName=\"ul\">{`In this matrix implementation, each of the rows and columns represent a vertex in the graph`}</li>\n      <li parentName=\"ul\">{`If two vertices are connected by an edge, we say they are `}<inlineCode parentName=\"li\">{`adjacent`}</inlineCode></li>\n      <li parentName=\"ul\">{`A matrix is not a very efficient way to store sparse data`}</li>\n      <li parentName=\"ul\">{`It's good to use when the number of edges is large`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Adjacency List`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`A more space-efficient way to implement a sparsely connected graph`}</li>\n      <li parentName=\"ul\">{`This is a list with an object that gives the adjacent vertices and their values`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Implementation of a Graph as an Adjacency List`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Vertex() - create a new vertice with an id and what it is connected to\n# addNeighbour() - create a neighbour that it is connected to\n# getWeight() returns the weight of the edge from this vertex\n\nclass Vertix:\n    def __init__(self, key):\n        self.key = key\n        self.connectedTo = {}\n\n    def addNeighbour(self, nbr, weight=0):\n        self.connectedTo[nbr] = weight\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getId(self):\n        return self.id\n\n    def getWeight(self, nbr):\n        return self.connectedTo[nbr]\n\n    def __str__(self):\n        return str(self.id) + ' connected to: ' + str([x.id for x in self.connctedTo])\n\n# Graph() - create new, empty graph\n# addVertex(vert) - create new instance of a vertex\n# addEdge(fromVert, toVert, weight)\n# addEdge (fromtVert, toVert) - without weight\n# getVertex(vertKey) - return vertex\n# getVertices() - return list of all vertices\n# in - returns True for a statement of the form vertex in graph, if the given vertex is in the graph, False otherwise\n\nclass Graph:\n    def __init__(self):\n        # dict, but modelled after adjacency list\n        self.vertList = {}\n        self.numVert = 0\n\n    def addVertex(self, key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertix(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self, n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    # f: from, t: to, cost: weight\n    def addEdge(self, f, t, cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n\n        self.vertList[f].addNeighbour(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())\n\n    def __contains__(self, n):\n        return n in self.vertList\n\ng = Graph()\n\nfor i in range(6):\n    g.addVertex(i)\n\ng.vertList\n# gives back dict of vertices\n# [ 0: <memory pos>, 1: ...]\ng.addEdge(0,1,2)\nfor vertex in g:\n    print vertex\n    print vertex.getConnections()\n    print '\\\\n'\n\n# prints list with edge connected from 0 to 1\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"181-bfs---breadth-first-search\"\n    }}>{`18.1: BFS - Breadth First Search`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`One of the easiest algorithms for searching a graph`}</li>\n      <li parentName=\"ul\">{`Given graph `}<inlineCode parentName=\"li\">{`G`}</inlineCode>{` and starting node `}<inlineCode parentName=\"li\">{`s`}</inlineCode>{` is that explores all vertices that are distance `}<inlineCode parentName=\"li\">{`k`}</inlineCode>{` from `}<inlineCode parentName=\"li\">{`s`}</inlineCode>{` before finding any that are `}<inlineCode parentName=\"li\">{`k+1`}</inlineCode>{` from `}<inlineCode parentName=\"li\">{`s`}</inlineCode></li>\n    </ul>\n    <p>{`Algorithm for exploration if vertex is unexplored:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The new, unexplored vertex `}<inlineCode parentName=\"li\">{`nbr`}</inlineCode>{` is coloured gray`}</li>\n      <li parentName=\"ol\">{`The predecessor of `}<inlineCode parentName=\"li\">{`nbr`}</inlineCode>{` is set to the current node `}<inlineCode parentName=\"li\">{`currentVert`}</inlineCode></li>\n      <li parentName=\"ol\">{`Distance to `}<inlineCode parentName=\"li\">{`nbr`}</inlineCode>{` is set to the distance to `}<inlineCode parentName=\"li\">{`currentVert + 1`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`nbr`}</inlineCode>{` is added to the end of a queue - adding `}<inlineCode parentName=\"li\">{`nbr`}</inlineCode>{` to the end of the queue effectively schedules this node for further exploration - but not until all the other vertices on the adjacency list of `}<inlineCode parentName=\"li\">{`currentVert`}</inlineCode>{` have been explored`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">{`Ultimately, the implementation will construct a tree! - This will help solve issues about finding the path! - Now we can also find any short word later back to the root from any vertex!`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def bfs(g, start):\n    # would need to implement setDistance and setPred\n    start.setDistance(0)\n    start.setPred(None)\n    vertQueue = Queue()\n    vertQueue.enqueue(start)\n    while (vertQueue.size() > 0)\n        currentVert = vertQueue.dequeue()\n        for nbr in currentVert.getConnections():\n            if (ngr.getColor() == 'white'):\n                nbr.setColor('gray')\n                nbr.setDistance(currentVert.getDistance() + 1)\n                nbr.setPred(currentVert)\n                vertQueue.enqueue(nbr)\n        currentVert.setColor('black')\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"182-dfs---depth-first-search\"\n    }}>{`18.2: DFS - Depth First Search`}</h2>\n    <p><strong parentName=\"p\">{`Knight's Tour Problem`}</strong></p>\n    <p>{`On a chess board, how can the knight move? And from there, making more moves, how can we move?`}</p>\n    <p>{`Again, ajacency matrix would be sparse - so we certainly want an adjaency list.`}</p>\n    <p>{`DFS will explore each node as deeply as possible. That being said, the nodes can be visited more than once.`}</p>\n    <p>{`It will then return as far back as it can to find the next legal move.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`knightTour`}</inlineCode>{` function takes four parameters:`}</p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`n`}</inlineCode>{` - the current depth of the search tree`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`path`}</inlineCode>{` - a list of vertices visited up to this point`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`u`}</inlineCode>{` - the vertex in the graph we wish to explore`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`limit`}</inlineCode>{` - the number of nodes in the path`}</li>\n    </ol>\n    <p>{`The function itself is also recursive.`}</p>\n    <p>{`We use a queue to keep a list of what vertice to visit next.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`def knightTour(n, path, u, limit):\n    u.setColor('gray')\n    path.append(u)\n    if n < limit:\n        nbrList = list(u.getConnections())\n        i = 0\n        done = False\n        while i < len(nbrList) and not done:\n            if nbrList[i].getColor() == 'white':\n                done = knightTour(n+1, path, nbrList[i], limit)\n            i = i + 1\n        if not done: # prepare to backtrack - haven't reach limit\n            path.pop()\n            u.setColor('white')\n    else:\n        done = True\n    return done\n`}</code></pre>\n    <p><strong parentName=\"p\">{`DFS Overview`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Knight's tour is a special case where the goal is to create the deepest depth first tree without any branches`}</li>\n      <li parentName=\"ul\">{`Really the general DFS is more about searching as deep as possible and then branching where needed`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`DFS`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`As with the BFS, our DFS makes use of predecessor links to construct the tree`}</li>\n      <li parentName=\"ul\">{`In addition, DFS will make use of tw additional instance variables in the Vertex class`}</li>\n      <li parentName=\"ul\">{`New instance variables are the discovery and finish times`}</li>\n      <li parentName=\"ul\">{`Discovery time tracks the number of steps in the algorithm before a vertex is first encountered`}</li>\n      <li parentName=\"ul\">{`Finish time is the number of steps in the algorithm before a vertex is coloured black`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`class DFSGraph(Graph):\n    def __init__(self):\n        super().__init__()\n        self.time = 0\n\n    def dfs(self):\n        for aVertex in self:\n            aVertex.setColor('white')\n            aVertex.setPred(-1)\n        for aVertex in self:\n            if aVertex.getColor() == 'white':\n                self.dfsvisit(aVertex)\n\n    # dfsvisit uses a stack\n    def dfsvisit(self, startVertex):\n        startVertex.setColor('gray')\n        self.time += 1\n        startVertex.setDiscovery(self.time)\n        for nextVertex in startVertex.getConnections():\n            if nextVertex.getColor() == 'white':\n                nextVertex.setPred(startVertex)\n                self.dfsvisit(nextVertex)\n        startVertex.setColor('black')\n        self.time += 1\n        startVertex.setFinish(self.time)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Start and Finish times display a property called the `}<inlineCode parentName=\"li\">{`parenthesis property`}</inlineCode></li>\n      <li parentName=\"ul\">{`This means that all children of a particular node in DFS have a later discovery time and an earlier finish time than their parent`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}