{"version":3,"sources":["webpack:///../manual/Design-Patterns/Singleton.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,qNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,iHACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,4lB,4MA8BTJ,EAAWK,gBAAiB","file":"component---manual-design-patterns-singleton-md-f3a036c0d877765bad1b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"singleton\"\n    }}>{`Singleton`}</h1>\n    <p>{`Another creational design pattern used to ensure there is only ever one instance in use.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Singleton {\n  private static instance: Singleton;\n  public value: number = 4;\n\n  private constructor() {}\n\n  static getSharedInstance() {\n    if (!Singleton.instance) {\n      Singleton.instance = new Singleton();\n    }\n\n    return Singleton.instance;\n  }\n}\n\nconst singletonOne = Singleton.getSharedInstance();\nsingletonOne.value = 12;\nconsole.log('S1 value:', singletonOne.value); // 12\n\nconst singletonTwo = Singleton.getSharedInstance();\nsingletonTwo.value = 21;\nconsole.log('S2 value:', singletonTwo.value); // 21\nconsole.log('S1 value:', singletonOne.value); // 21\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}