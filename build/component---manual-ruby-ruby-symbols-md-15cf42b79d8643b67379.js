(window.webpackJsonp=window.webpackJsonp||[]).push([[480],{sCCD:function(e,n,a){"use strict";a.r(n),a.d(n,"_frontmatter",(function(){return s})),a.d(n,"default",(function(){return i}));a("1c7q"),a("abGl"),a("gZHo"),a("Fdmb"),a("Ir+3"),a("2mQt"),a("mXGw");var t=a("/FXl"),r=a("TjRS");a("aD51");function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/Ruby/Ruby-Symbols.md"}});var l={_frontmatter:s},b=r.a;function i(e){var n=e.components,a=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(t.b)(b,o({},l,a,{components:n,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"ruby-symbols-colon-variables"},"Ruby Symbols (Colon Variables)"),Object(t.b)("h2",{id:"tldr"},"tl;dr"),Object(t.b)("p",null,"A ruby symbol is like an Enum constant in Java or C++."),Object(t.b)("p",null,"Symbols are immutable. Their value remains constant during the entirety of the program. They never appear on the left side of an assignment. You'll never see this:"),Object(t.b)("pre",null,Object(t.b)("code",o({parentName:"pre"},{className:"language-ruby"}),':myname = "steve"\n\n# Symbols ARE used like this:\nmystring = :steveT\nmystring = :steveT.to_s\nmyint = :steveT.to_i\nclass Example\n  attr_reader :steveT\nend\n')),Object(t.b)("h2",{id:"more-info"},"More info"),Object(t.b)("p",null,"Colon variable refers to :abc type variables you might have seen in Ruby."),Object(t.b)("p",null,"They are called Ruby symbols."),Object(t.b)("ul",null,Object(t.b)("li",{parentName:"ul"},"A Ruby symbol is not a variable because it cannot be assigned a value."),Object(t.b)("li",{parentName:"ul"},"It is not a reference to another variable nor is it a pointer to a memory location."),Object(t.b)("li",{parentName:"ul"},"Has a value and whenever the name of the symbol is same, its value is the same.")),Object(t.b)("pre",null,Object(t.b)("code",o({parentName:"pre"},{className:"language-ruby"}),'# It is trivial to assign a value to a variable.\nabc = "1"\n=> "1"\n\n# But a symbol cannot be assigned any value.\n:a = "1"\n# SyntaxError: A symbol cannot be assigned a value\n\n# Can use a variable as a map-key (You know already)\nm = {abc => "1"}\n=> {"1"=>"1"}\n\n# Can use a string as a map-key (You know already)\nm = {"def" => "1"}\n=> {"def"=>"1"}\n\n# Can also use a symbol as a map-key (Most common use case)\nm = {:a => "1"}\n=> {:a=>"1"}\n\n# Can use same symbol as key in another map\nm2 = {:a => "2"}\n=> {:a=>"2"}\n\n# And it won\'t affect the previous map.\nm\n=> {:a=>"1"}\n\nm2\n=> {:a=>"2"}\n')))}i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/Ruby/Ruby-Symbols.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-ruby-ruby-symbols-md-15cf42b79d8643b67379.js.map