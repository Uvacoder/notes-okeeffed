{"version":3,"sources":["webpack:///../manual/Android/Lists-And-Adapters.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,sNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iCADR,iCAGA,qBAAG,sBAAQC,WAAW,KAAnB,wBACH,oHACA,yEACA,yCAAwB,0BAAYA,WAAW,KAAvB,gBAAxB,+BAAgH,0BAAYA,WAAW,KAAvB,eAAhH,KACA,4DAA2C,0BAAYA,WAAW,KAAvB,wBAA3C,qFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+kB,6MA4BTJ,EAAWK,gBAAiB","file":"component---manual-android-lists-and-adapters-md-9e63ae7f1a856716eb2a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lists-and-adapters-in-android\"\n    }}>{`Lists and Adapters in Android`}</h1>\n    <p><strong parentName=\"p\">{`What is an adapter?`}</strong></p>\n    <p>{`If we have our data and a list view, we can then use an adapter to adapt data for the view.`}</p>\n    <p>{`Android provides a number of different adapters.`}</p>\n    <p>{`Example with the `}<inlineCode parentName=\"p\">{`ArrayAdapter`}</inlineCode>{`, it is an extension of the `}<inlineCode parentName=\"p\">{`BaseAdapter`}</inlineCode>{`.`}</p>\n    <p>{`Declaring a string adapter would be `}<inlineCode parentName=\"p\">{`ArrayAdapter<String>`}</inlineCode>{` that can deal with generic types. We specify the type within the angle brackets.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package teamtreehouse.com.stormy.ui;\n\nimport ...\n\nstatic class DailyForecastActivity extends ListActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_daily_forecast);\n\n        String[] daysOfTheWeek = {\n            \"Sunday\",\n            \"Monday\",\n            ...\n        }\n        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1,\n            daysOfTheWeek);\n\n        setListAdapter(adapter);\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}