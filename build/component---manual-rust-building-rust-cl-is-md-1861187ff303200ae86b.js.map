{"version":3,"sources":["webpack:///../manual/Rust/Building-Rust-CLIs.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,mNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oCADR,oCAGA,oEAAmD,mBAAGC,WAAW,KAAQ,CACrE,KAAQ,sDADuC,cAAnD,KAGA,wCAAuB,mBAAGA,WAAW,KAAQ,CACzC,KAAQ,oCADW,QAAvB,kCAGA,iBAAQ,CACN,GAAM,4BADR,4BAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,4CADQ,4CAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,+CADQ,+CAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0CADQ,0CAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0CADQ,0CAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,2CADQ,2CAGpB,kBAAIA,WAAW,QAEjB,iBAAQ,CACN,GAAM,QADR,SAGA,gDAA+B,0BAAYA,WAAW,KAAvB,qCAA/B,KACA,0HACA,iBAAQ,CACN,GAAM,aADR,eAGA,kEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,q4CAsCL,iBAAQ,CACN,GAAM,aADR,eAGA,6DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8tBA+BL,iBAAQ,CACN,GAAM,4BADR,4BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,gO,0MAeTJ,EAAWK,gBAAiB","file":"component---manual-rust-building-rust-cl-is-md-1861187ff303200ae86b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"building-rust-command-line-tools\"\n    }}>{`Building Rust Command Line Tools`}</h1>\n    <p>{`Initial findings based off a useful article `}<a parentName=\"p\" {...{\n        \"href\": \"https://mattgathu.github.io/writing-cli-app-rust/\"\n      }}>{`found here`}</a>{`.`}</p>\n    <p>{`We're using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/clap-rs/clap\"\n      }}>{`Clap`}</a>{` crate to help bootstrap CLIs.`}</p>\n    <h2 {...{\n      \"id\": \"useful-tools-to-consider\"\n    }}>{`Useful tools to consider`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/rust-cli/human-panic\"\n        }}>{`https://github.com/rust-cli/human-panic`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/hniksic/rust-subprocess\"\n        }}>{`https://github.com/hniksic/rust-subprocess`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/oconnor663/duct.rs\"\n        }}>{`https://github.com/oconnor663/duct.rs`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/kkawakam/rustyline\"\n        }}>{`https://github.com/kkawakam/rustyline`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mitsuhiko/indicatif\"\n        }}>{`https://github.com/mitsuhiko/indicatif`}</a></li>\n      <li parentName=\"ul\"></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`Initialise an app using `}<inlineCode parentName=\"p\">{`cargo new app_name_you_want --bin`}</inlineCode>{`.`}</p>\n    <p>{`This example diverges from the above article by using the \"Clap\" crate with the YAML file config.`}</p>\n    <h3 {...{\n      \"id\": \"srcmainrs\"\n    }}>{`src/main.rs`}</h3>\n    <p>{`Update the file to reflect the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[macro_use]\nextern crate clap;\nuse clap::App;\n\nfn main() {\n    let yaml = load_yaml!(\"cli.yml\");\n    let matches = App::from_yaml(yaml).get_matches();\n\n    // Gets a value for config if supplied by user, or defaults to \"default.conf\"\n    let config = matches.value_of(\"config\").unwrap_or(\"default.conf\");\n    println!(\"Value for config: {}\", config);\n\n    // Calling .unwrap() is safe here because \"INPUT\" is required (if \"INPUT\" wasn't\n    // required we could have used an 'if let' to conditionally get the value)\n    println!(\"Using input file: {}\", matches.value_of(\"INPUT\").unwrap());\n\n    // Vary the output based on how many times the user used the \"verbose\" flag\n    // (i.e. 'myprog -v -v -v' or 'myprog -vvv' vs 'myprog -v'\n    match matches.occurrences_of(\"verbose\") {\n        0 => println!(\"No verbose info\"),\n        1 => println!(\"Some verbose info\"),\n        2 => println!(\"Tons of verbose info\"),\n        3 | _ => println!(\"Don't be crazy\"),\n    }\n\n    // You can handle information about subcommands by requesting their matches by name\n    // (as below), requesting just the name used, or both at the same time\n    if let Some(matches) = matches.subcommand_matches(\"test\") {\n        if matches.is_present(\"debug\") {\n            println!(\"Printing debug info...\");\n        } else {\n            println!(\"Printing normally...\");\n        }\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"srccliyml\"\n    }}>{`src/cli.yml`}</h3>\n    <p>{`For the CLI args, set the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`name: jamaica\nversion: \"1.0\"\nauthor: Dennis O'Keeffe <hello@dennisokeeffe.com>\nabout: Build agnostic app configs\nargs:\n    - config:\n        short: c\n        long: config\n        value_name: FILE\n        help: Sets a custom config file\n        takes_value: true\n    - INPUT:\n        help: Sets the input file to use\n        required: true\n        index: 1\n    - verbose:\n        short: v\n        multiple: true\n        help: Sets the level of verbosity\nsubcommands:\n    - test:\n        about: controls testing features\n        version: \"1.3\"\n        author: Someone E. <someone_else@other.com>\n        args:\n            - debug:\n                short: d\n                help: print debug information\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"running-the-above-config\"\n    }}>{`Running the above config`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cargo run -- src/main.rs --config=made/up/\n# ... omitted Rust build output\nValue for config: made/up/file\nUsing input file: src/main.rs\nNo verbose info\n\ncargo run -- --help\n# shows help output: omitted for now\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}