(window.webpackJsonp=window.webpackJsonp||[]).push([[559],{y2cv:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return b})),n.d(t,"default",(function(){return c}));n("1c7q"),n("abGl"),n("gZHo"),n("Fdmb"),n("Ir+3"),n("2mQt"),n("mXGw");var a=n("/FXl"),l=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/Webpack/Webpack-2.md"}});var r={_frontmatter:b},o=l.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,["components"]);return Object(a.b)(o,i({},r,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"webpack-2"},"Webpack-2"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"#webpack-2"}),"Webpack-2"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"#10-webpack-in-action"}),"1.0: Webpack in Action")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"#11-webpack-configuration"}),"1.1 Webpack Configuration")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"#20-module-loaders"}),"2.0 Module Loaders")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"#21-css-loaders"}),"2.1 CSS Loaders")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"#22-image-loaders"}),"2.2 Image Loaders")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"#30-code-splitting"}),"3.0 Code Splitting")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",i({parentName:"li"},{href:"#44-code-splitting-in-the-real-world"}),"4.4: Code Splitting in the real world"))))),Object(a.b)("p",null,"The concept is to have many js files that are small and specific."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Webpack bundles JS"),Object(a.b)("li",{parentName:"ul"},"CSS and Babelifying is just a side effect we can do")),Object(a.b)("h2",{id:"10-webpack-in-action"},"1.0: Webpack in Action"),Object(a.b)("p",null,"Module Systems and their Common Syntax:"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",i({parentName:"tr"},{align:null}),"Module System"),Object(a.b)("th",i({parentName:"tr"},{align:null}),"Common Syntax"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),"CommonJS"),Object(a.b)("td",i({parentName:"tr"},{align:null}),"require, module.exports")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),"AMD"),Object(a.b)("td",i({parentName:"tr"},{align:null}),"require, define")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),"ES2015"),Object(a.b)("td",i({parentName:"tr"},{align:null}),"import, export")))),Object(a.b)("h2",{id:"11-webpack-configuration"},"1.1 Webpack Configuration"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",i({parentName:"tr"},{align:null}),"Command"),Object(a.b)("th",i({parentName:"tr"},{align:null}),"What it does"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),"entry"),Object(a.b)("td",i({parentName:"tr"},{align:null}),"Specify entry")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),"output"),Object(a.b)("td",i({parentName:"tr"},{align:null}),"Specify where the file is saved too")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),"output > path"),Object(a.b)("td",i({parentName:"tr"},{align:null}),"Specify the file path (must be absolute)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),"output > filename"),Object(a.b)("td",i({parentName:"tr"},{align:null}),"Output file name")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),"webpack"),Object(a.b)("td",i({parentName:"tr"},{align:null}),"allows you to install globally (instead, opt for npm script)")))),Object(a.b)("p",null,"For defining paths, we can use ",Object(a.b)("inlineCode",{parentName:"p"},"path")," from NodeJS."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{}),"const path = require('path');\n\nconst config = {\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, 'build'),\n        filename: 'bundle.js'\n    }\n};\n\nmodule.exports = config;\n")),Object(a.b)("p",null,"However, you'll notice if you have two small files that combining them into an output looks far larger than those two files - so what is happening?"),Object(a.b)("p",null,"Behind the scenes, Webpack is doing similar to the following:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"new array has been created"),Object(a.b)("li",{parentName:"ul"},"two functions within contain code from the two files"),Object(a.b)("li",{parentName:"ul"},"entry point index is defined which points to the index of the array that was given as the entry point"),Object(a.b)("li",{parentName:"ul"},"if it needs other functions, it calls them from the array")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"20-module-loaders"},"2.0 Module Loaders"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Designed to do some preprocessing before they are put into the final file eg dealing with Babel etc. - The example with Babel requires ",Object(a.b)("inlineCode",{parentName:"li"},"babel-loader"),", ",Object(a.b)("inlineCode",{parentName:"li"},"babel-core")," and ",Object(a.b)("inlineCode",{parentName:"li"},"babel-preset-env")," (the env being the preset)."),Object(a.b)("li",{parentName:"ul"},"so how do we add this to Webpack?"),Object(a.b)("li",{parentName:"ul"},"previously, we referred to loaders as opposed to rules and modules, but this is how it is in Webpack 2. - rules are to do with configuration - rules have a ",Object(a.b)("inlineCode",{parentName:"li"},"use")," and ",Object(a.b)("inlineCode",{parentName:"li"},"test")," - ",Object(a.b)("inlineCode",{parentName:"li"},"test")," is a regex to select which file to apply too")),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"const config = {\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, 'build'),\n        filename: 'bundle.js'\n    },\n    module: {\n        rules: [\n            {\n                use: 'babel-loader',\n                test: /\\.js$/\n            }\n        ]\n    }\n};\n")),Object(a.b)("h2",{id:"21-css-loaders"},"2.1 CSS Loaders"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"There are basically the ",Object(a.b)("inlineCode",{parentName:"li"},"CSS")," and ",Object(a.b)("inlineCode",{parentName:"li"},"Style")," loaders - style loader takes CSS imports and adds them to the HTML Document - CSS loader knows how to deal with CSS imports - Adding in more rules will allow us to make use of these loaders"),Object(a.b)("li",{parentName:"ul"},"Once you've compiled Webpack, what is it that these loaders are doing? - By default, it actually injects the CSS into a head tag, but how? - There is actually Javascript where the Style module actually takes that CSS and manually injects that into the CSS"),Object(a.b)("li",{parentName:"ul"},"We use another library ",Object(a.b)("inlineCode",{parentName:"li"},"Extract Text Plugin")," to ensure that these CSS files get output into their own file - Instead of ",Object(a.b)("inlineCode",{parentName:"li"},"use"),", we use ",Object(a.b)("inlineCode",{parentName:"li"},"loader")," (even though they are similar) but since the plugin is used in a way, we need to define ",Object(a.b)("inlineCode",{parentName:"li"},"loader")," - ",Object(a.b)("inlineCode",{parentName:"li"},"plugins")," are different to ",Object(a.b)("inlineCode",{parentName:"li"},"loaders")," and have the ability to stop files from ending up in the final ",Object(a.b)("inlineCode",{parentName:"li"},"bundle.js")," file - the ",Object(a.b)("inlineCode",{parentName:"li"},"plugin")," that we have will now create a ",Object(a.b)("inlineCode",{parentName:"li"},"style.css")," file")),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"const config = {\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, 'build'),\n        filename: 'bundle.js'\n    },\n    module: {\n        rules: [\n            {\n                use: 'babel-loader',\n                test: /\\.js$/\n            },\n            {\n                loader: ExtractTextPlugin.extract({\n                    loader: 'css-loader'\n                }),\n                test: /\\.css$/\n            }\n        ]\n    },\n    plugins: [new ExtractTextPlugin('style.css')]\n};\n")),Object(a.b)("h2",{id:"22-image-loaders"},"2.2 Image Loaders"),Object(a.b)("p",null,"We can use ",Object(a.b)("inlineCode",{parentName:"p"},"image-webpack-loader")," and ",Object(a.b)("inlineCode",{parentName:"p"},"url-loader"),"."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"image-webpack-loader")," will compact down the file size automatically"),Object(a.b)("li",{parentName:"ul"},"The result of a compact image is then taken and ",Object(a.b)("inlineCode",{parentName:"li"},"url-loader")," will behave differently depending on the size of the image. - options, if larger than 40000, save it as a different file, else keep it as part of the js file")),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"const config = {\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, 'build'),\n        filename: 'bundle.js',\n        // publicPath for files not saved to bundle\n        publicPath: 'build/'\n    },\n    module: {\n        rules: [\n            {\n                use: 'babel-loader',\n                test: /\\.js$/\n            },\n            {\n                loader: ExtractTextPlugin.extract({\n                    loader: 'css-loader'\n                }),\n                test: /\\.css$/\n            },\n            {\n                test: /\\.(jpe?g|png|gif|svg)$/,\n                use: [\n                    {\n                        loader: 'url-loader',\n                        options: { limit: 40000 }\n                    },\n                    'image-webpack-loader'\n                ]\n            }\n        ]\n    },\n    plugins: [new ExtractTextPlugin('style.css')]\n};\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"30-code-splitting"},"3.0 Code Splitting"),Object(a.b)("p",null,"Code splitting is one of the big wins with using Webpack."),Object(a.b)("p",null,"Code spltting is the art of creating a single ",Object(a.b)("inlineCode",{parentName:"p"},".js")," file and then being able to split that code into several individual files and know when to load up these different modules."),Object(a.b)("p",null,"To import a module only after an event:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"const button = document.createElement('button');\nbutton.innerText = 'Click me';\nbutton.onclick = () => {\n    // if this below has import statements of it's own\n    // it will also bring in this code\n    System.import('./image_view');\n};\n\ndocument.body.appendChild(button);\n")),Object(a.b)("p",null,"The above example was to see what happens, but really we can just use the ",Object(a.b)("inlineCode",{parentName:"p"},"import")," statement to do this for us."),Object(a.b)("p",null,"You can see this on the ",Object(a.b)("inlineCode",{parentName:"p"},"network")," tab on Google Dev Tools to see this all in action."),Object(a.b)("p",null,"Anything that uses ",Object(a.b)("inlineCode",{parentName:"p"},"System.import()")," it will split up our call for different modules to import."),Object(a.b)("hr",null),Object(a.b)("h2",{id:"44-code-splitting-in-the-real-world"},"4.4: Code Splitting in the real world"),Object(a.b)("p",null,"The CommonChunksPlugin will look for common code in the bundles and split them into seperate files depending on the value you pass in for ",Object(a.b)("inlineCode",{parentName:"p"},"name"),"."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"...\n\nplugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n        name: 'vendor'\n    });\n];\n\n...\n")))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/Webpack/Webpack-2.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-webpack-webpack-2-md-726708c8edf0903225f1.js.map