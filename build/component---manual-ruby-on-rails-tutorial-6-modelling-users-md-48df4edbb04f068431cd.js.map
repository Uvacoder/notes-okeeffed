{"version":3,"sources":["webpack:///../manual/Ruby-On-Rails-Tutorial/6-Modelling-Users.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-ruby-on-rails-tutorial-6-modelling-users-md-48df4edbb04f068431cd.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"modelling-users\"\n    }}>{`Modelling Users`}</h1>\n    <p>{`Given a form that accepts name, email, password and confirmation, we're going to create the backend for this.`}</p>\n    <h2 {...{\n      \"id\": \"database-migrations\"\n    }}>{`Database migrations`}</h2>\n    <p>{`To display the user on a view, we started by adding the following to the `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{` model.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class User < ApplicationRecord\n  # add this\n  attr_accessor :name, :email\nend\n`}</code></pre>\n    <p>{`In contrast, when using Rails to model users we don’t need to identify the attributes explicitly.`}</p>\n    <p>{`As noted briefly above, to store data Rails uses a relational database by default, which consists of tables composed of data rows, where each row has columns of data attributes. For example, to store users with names and email addresses, we’ll create a users table with name and email columns (with each row corresponding to one user).`}</p>\n    <p>{`An example of such a table appears in Figure 6.2, corresponding to the data model shown in Figure 6.3. (Figure 6.3 is just a sketch; the full data model appears in Figure 6.4.) By naming the columns name and email, we’ll let Active Record figure out the User object attributes for us.`}</p>\n    <p>{`To do similar via the generate command, we would use `}<inlineCode parentName=\"p\">{`rails generate model User name:string email:string`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: with generating models, the `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{` is singular as opposed to the scaffold where it is plural.`}</p>\n    </blockquote>\n    <p>{`The `}<inlineCode parentName=\"p\">{`generate`}</inlineCode>{` command creates a migration. We run the migration with `}<inlineCode parentName=\"p\">{`rails db:migrate`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"dbschemarb\"\n    }}>{`db/schema.rb`}</h2>\n    <p>{`Rails uses a file called `}<inlineCode parentName=\"p\">{`schema.rb`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`db/`}</inlineCode>{` directory to keep track of the structure of the database (called the schema, hence the filename).`}</p>\n    <p>{`Most migrations (including all the ones in this tutorial) are reversible, which means we can \"migrate down\" and undo them with a single command, called `}<inlineCode parentName=\"p\">{`db:rollback`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`$ rails db:rollback\n`}</code></pre>\n    <p>{`After running this command, examine `}<inlineCode parentName=\"p\">{`db/schema.rb`}</inlineCode>{` to confirm that the rollback was successful. (See Box 3.1 for another technique useful for reversing migrations.) Under the hood, this command executes the `}<inlineCode parentName=\"p\">{`drop_table`}</inlineCode>{` command to remove the users table from the database. The reason this works is that the change method knows that `}<inlineCode parentName=\"p\">{`drop_table`}</inlineCode>{` is the inverse of `}<inlineCode parentName=\"p\">{`create_table`}</inlineCode>{`, which means that the rollback migration can be easily inferred. In the case of an irreversible migration, such as one to remove a database column, it is necessary to define separate up and down methods in place of the single change method.`}</p>\n    <h2 {...{\n      \"id\": \"creating-user-objects-in-a-sandbox\"\n    }}>{`Creating user objects in a sandbox`}</h2>\n    <p>{`You can pass a `}<inlineCode parentName=\"p\">{`--sandbox`}</inlineCode>{` flag to the rails console to discard changes on exit.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`$ rails console --sandbox\nLoading development environment in sandbox\nAny modifications you make will be rolled back on exit\n>>\n`}</code></pre>\n    <p>{`Due to not having restraints, the following is currently true:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):004:0> a = User.new\n   (3.5ms)  SELECT sqlite_version(*)\n=> #<User id: nil, name: nil, email: nil, created_at: nil, updated_at: nil>\nirb(main):005:0> a.valid?\n=> true\n# Putting desired values\n=> #<User id: nil, name: \"Dennis O\", email: \"hello@dennis.com\", created_at: nil, updated_at: nil>\nirb(main):007:0> b.valid?\n=> true\n`}</code></pre>\n    <p>{`To save, we can use `}<inlineCode parentName=\"p\">{`[OBJECT].save`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):008:0> b.save\n  TRANSACTION (0.7ms)  begin transaction\n  User Create (0.5ms)  INSERT INTO \"users\" (\"name\", \"email\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"name\", \"Dennis O\"], [\"email\", \"hello@dennis.com\"], [\"created_at\", \"2021-02-04 23:56:13.252130\"], [\"updated_at\", \"2021-02-04 23:56:13.252130\"]]\n  TRANSACTION (0.7ms)  commit transaction\n=> true\nirb(main):011:0> b\n=> #<User id: 2, name: \"Dennis O\", email: \"hello@dennis.com\", created_at: \"2021-02-04 23:56:13.252130000 +0000\", updated_at: \"2021-02-04 23:56:13.252130000 +0000\">\n`}</code></pre>\n    <p>{`To remove, we can use the `}<inlineCode parentName=\"p\">{`destroy`}</inlineCode>{` method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):012:0> a.destroy\n=> #<User id: nil, name: nil, email: nil, created_at: nil, updated_at: nil>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"finding-user-objects\"\n    }}>{`Finding User Objects`}</h2>\n    <p>{`We can use `}<inlineCode parentName=\"p\">{`User.find`}</inlineCode>{` to find an object by id:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):013:0> User.find(2)\n  User Load (1.1ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = ? LIMIT ?  [[\"id\", 2], [\"LIMIT\", 1]]\n=> #<User id: 2, name: \"Dennis O\", email: \"hello@dennis.com\", created_at: \"2021-02-04 23:56:13.252130000 +0000\", updated_at: \"2021-02-04 23:56:13.252130000 +0000\">\n`}</code></pre>\n    <p>{`You can use `}<inlineCode parentName=\"p\">{`find_by`}</inlineCode>{` to find by a hash value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):014:0> User.find_by(email: \"hello@dennis.com\")\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"email\" = ? LIMIT ?  [[\"email\", \"hello@dennis.com\"], [\"LIMIT\", 1]]\n=> #<User id: 2, name: \"Dennis O\", email: \"hello@dennis.com\", created_at: \"2021-02-04 23:56:13.252130000 +0000\", updated_at: \"2021-02-04 23:56:13.252130000 +0000\">\n\n# HERE ARE SOME EQUIVALENTS\nirb(main):017:0> User.find_by email: \"hello@dennis.com\"\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"email\" = ? LIMIT ?  [[\"email\", \"hello@dennis.com\"], [\"LIMIT\", 1]]\n=> #<User id: 2, name: \"Dennis O\", email: \"hello@dennis.com\", created_at: \"2021-02-04 23:56:13.252130000 +0000\", updated_at: \"2021-02-04 23:56:13.252130000 +0000\">\n\nirb(main):019:0> User.find_by({ :email => \"hello@dennis.com\" })\n  User Load (0.1ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"email\" = ? LIMIT ?  [[\"email\", \"hello@dennis.com\"], [\"LIMIT\", 1]]\n=> #<User id: 2, name: \"Dennis O\", email: \"hello@dennis.com\", created_at: \"2021-02-04 23:56:13.252130000 +0000\", updated_at: \"2021-02-04 23:56:13.252130000 +0000\">\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`User.first`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`User.all`}</inlineCode>{` naturally return the first user and all users respectively.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):020:0> User.first\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\" ORDER BY \"users\".\"id\" ASC LIMIT ?  [[\"LIMIT\", 1]]\n=> #<User id: 1, name: \"Dennis\", email: \"hello@dennisokeeffe.com\", created_at: \"2021-02-04 23:27:12.601831000 +0000\", updated_at: \"2021-02-04 23:27:33.359561000 +0000\">\nirb(main):021:0> User.all\n  User Load (0.8ms)  SELECT \"users\".* FROM \"users\" /* loading for inspect */ LIMIT ?  [[\"LIMIT\", 11]]\n=> #<ActiveRecord::Relation [#<User id: 1, name: \"Dennis\", email: \"hello@dennisokeeffe.com\", created_at: \"2021-02-04 23:27:12.601831000 +0000\", updated_at: \"2021-02-04 23:27:33.359561000 +0000\">, #<User id: 2, name: \"Dennis O\", email: \"hello@dennis.com\", created_at: \"2021-02-04 23:56:13.252130000 +0000\", updated_at: \"2021-02-04 23:56:13.252130000 +0000\">]>\n`}</code></pre>\n    <p>{`Other notable things related to `}<inlineCode parentName=\"p\">{`User.all`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):022:0> User.all.class\n=> User::ActiveRecord_Relation\nirb(main):023:0> User.all.first\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\" ORDER BY \"users\".\"id\" ASC LIMIT ?  [[\"LIMIT\", 1]]\n=> #<User id: 1, name: \"Dennis\", email: \"hello@dennisokeeffe.com\", created_at: \"2021-02-04 23:27:12.601831000 +0000\", updated_at: \"2021-02-04 23:27:33.359561000 +0000\">\nirb(main):024:0> User.all.length\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\"\n=> 2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"updating-user-objects\"\n    }}>{`Updating User Objects`}</h2>\n    <p><inlineCode parentName=\"p\">{`.save`}</inlineCode>{` is required.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`>> user           # Just a reminder about our user's attributes\n=> #<User id: 1, name: \"Michael Hartl\", email: \"michael@example.com\",\ncreated_at: \"2019-08-22 01:51:03\", updated_at: \"2019-08-22 01:51:03\">\n>> user.email = \"mhartl@example.net\"\n=> \"mhartl@example.net\"\n>> user.save\n=> true\n`}</code></pre>\n    <p>{`If we do not wish to save:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`>> user.email\n=> \"mhartl@example.net\"\n>> user.email = \"foo@bar.com\"\n=> \"foo@bar.com\"\n>> user.reload.email\n=> \"mhartl@example.net\"\n`}</code></pre>\n    <p>{`To update multiple values, you can use the object's `}<inlineCode parentName=\"p\">{`update`}</inlineCode>{` method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`>> user.update(name: \"The Dude\", email: \"dude@abides.org\")\n=> true\n>> user.name\n=> \"The Dude\"\n>> user.email\n=> \"dude@abides.org\"\n`}</code></pre>\n    <p>{`You can also update the \"magic columns\":`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):027:0> b.created_at = 1.year.ago\n=> Wed, 05 Feb 2020 00:04:35.097762000 UTC +00:00\nirb(main):028:0> b.save\n  TRANSACTION (2.4ms)  begin transaction\n  User Update (0.5ms)  UPDATE \"users\" SET \"created_at\" = ?, \"updated_at\" = ? WHERE \"users\".\"id\" = ?  [[\"created_at\", \"2020-02-05 00:04:35.097762\"], [\"updated_at\", \"2021-02-05 00:04:38.528773\"], [\"id\", 2]]\n  TRANSACTION (1.2ms)  commit transaction\n=> true\nirb(main):029:0> b\n=> #<User id: 2, name: \"Test\", email: \"hello@dennis.com\", created_at: \"2020-02-05 00:04:35.097762000 +0000\", updated_at: \"2021-02-05 00:04:38.528773000 +0000\">\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"user-validations\"\n    }}>{`User validations`}</h2>\n    <p>{`In this section, it is noted that TDD is great for validations. The test setup identified for this setup should be the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`# test/models/user_test.rb\nrequire 'test_helper'\n\nclass UserTest < ActiveSupport::TestCase\n\n  def setup\n    @user = User.new(name: \"Example User\", email: \"user@example.com\")\n  end\n\n  test \"should be valid\" do\n    assert @user.valid?\n  end\nend\n`}</code></pre>\n    <p>{`Our current test doesn't have validations, so currently is looks like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`rails test:models\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"validating-presence\"\n    }}>{`Validating presence`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`require 'test_helper'\n\nclass UserTest < ActiveSupport::TestCase\n\n  def setup\n    @user = User.new(name: \"Example User\", email: \"user@example.com\")\n  end\n\n  test \"should be valid\" do\n    assert @user.valid?\n  end\n\n  ## Our updated test which fails at current\n  test \"name should be present\" do\n    @user.name = \"     \"\n    assert_not @user.valid?\n  end\nend\n`}</code></pre>\n    <p>{`To get the test passing, we can update the following in the model:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class User < ApplicationRecord\n  validates :name, presence: true\nend\n# An equivalent\nclass User < ApplicationRecord\n  validates(:name, presence: true)\nend\n`}</code></pre>\n    <p>{`We can update the test to also check the email:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`# test/models/user_test.rb\nrequire 'test_helper'\n\nclass UserTest < ActiveSupport::TestCase\n\n  def setup\n    @user = User.new(name: \"Example User\", email: \"user@example.com\")\n  end\n\n  test \"should be valid\" do\n    assert @user.valid?\n  end\n\n  test \"name should be present\" do\n    @user.name = \"\"\n    assert_not @user.valid?\n  end\n\n  test \"email should be present\" do\n    @user.email = \"     \"\n    assert_not @user.valid?\n  end\nend\n\n# app/models/user.rb\n\nclass User < ApplicationRecord\n  validates :name,  presence: true\n  validates :email, presence: true\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"length-validation\"\n    }}>{`Length validation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`# app/models/user.rb\n\nclass User < ApplicationRecord\n  validates :name,  presence: true, length: { maximum: 50 }\n  validates :email, presence: true, length: { maximum: 255 }\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"format-validation\"\n    }}>{`Format validation`}</h2>\n    <p>{`We write a series of caes for the test:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`require 'test_helper'\n\nclass UserTest < ActiveSupport::TestCase\n\n  def setup\n    @user = User.new(name: \"Example User\", email: \"user@example.com\")\n  end\n  .\n  .\n  .\n  test \"email validation should accept valid addresses\" do\n    valid_addresses = %w[user@example.com USER@foo.COM A_US-ER@foo.bar.org\n                         first.last@foo.jp alice+bob@baz.cn]\n    valid_addresses.each do |valid_address|\n      @user.email = valid_address\n      assert @user.valid?, \"#{valid_address.inspect} should be valid\"\n    end\n  end\n\n  test \"email validation should reject invalid addresses\" do\n    invalid_addresses = %w[user@example,com user_at_foo.org user.name@example.\n                           foo@bar_baz.com foo@bar+baz.com]\n    invalid_addresses.each do |invalid_address|\n      @user.email = invalid_address\n      assert_not @user.valid?, \"#{invalid_address.inspect} should be invalid\"\n    end\n  end\nend\n`}</code></pre>\n    <p>{`Which we can now update the validation on the user model with a RegExp `}<inlineCode parentName=\"p\">{`validates :email, format: { with: /<regular expression>/ }`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class User < ApplicationRecord\n  validates :name,  presence: true, length: { maximum: 50 }\n  VALID_EMAIL_REGEX = /\\\\A[\\\\w+\\\\-.]+@[a-z\\\\d\\\\-.]+\\\\.[a-z]+\\\\z/i\n  validates :email, presence: true, length: { maximum: 255 },\n                    format: { with: VALID_EMAIL_REGEX }\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"uniqueness-validation\"\n    }}>{`Uniqueness validation`}</h2>\n    <p>{`To enforce uniqueness of email addresses (so that we can use them as usernames), we’ll be using the `}<inlineCode parentName=\"p\">{`:uniqueness`}</inlineCode>{` option to the validates method. But be warned: there’s a major caveat, so don’t just skim this section—read it carefully.`}</p>\n    <p>{`First, we need to update our test to add a User to the database that we can test uniqueness against:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`require 'test_helper'\n\nclass UserTest < ActiveSupport::TestCase\n\n  def setup\n    @user = User.new(name: \"Example User\", email: \"user@example.com\")\n  end\n  .\n  .\n  .\n  test \"email addresses should be unique\" do\n    duplicate_user = @user.dup\n    # enforce that our tests is case insensitive\n    duplicate_user.email = @user.email.upcase\n    @user.save\n    assert_not duplicate_user.valid?\n  end\nend\n`}</code></pre>\n    <p>{`To conform to uniqueness, we can update our model:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class User < ApplicationRecord\n  validates :name,  presence: true, length: { maximum: 50 }\n  VALID_EMAIL_REGEX = /\\\\A[\\\\w+\\\\-.]+@[a-z\\\\d\\\\-.]+\\\\.[a-z]+\\\\z/i\n  validates :email, presence: true, length: { maximum: 255 },\n                    format: { with: VALID_EMAIL_REGEX },\n                    # enforce case_sensitivity\n                    uniqueness: { case_sensitive: false }\nend\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: There’s just one small problem, which is that the Active Record uniqueness validation does not guarantee uniqueness at the database level. Here’s a scenario that explains why:`}</p>\n    </blockquote>\n    <ol>\n      <li parentName=\"ol\">{`Alice signs up for the sample app, with address alice@wonderland.com.`}</li>\n      <li parentName=\"ol\">{`Alice accidentally clicks on \"Submit\" twice, sending two requests in quick succession.`}</li>\n      <li parentName=\"ol\">{`The following sequence occurs: request 1 creates a user in memory that passes validation, request 2 does the same, request 1’s user gets saved, request 2’s user gets saved.`}</li>\n      <li parentName=\"ol\">{`Result: two user records with the exact same email address, despite the uniqueness validation`}</li>\n    </ol>\n    <p>{`The solution is to enforce uniqueness at the database level. We can add this using an index on the `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{`. The reason we do this is because we want to avoid a `}<inlineCode parentName=\"p\">{`full-table`}</inlineCode>{` scan.`}</p>\n    <p>{`With Rails, we can do this using `}<inlineCode parentName=\"p\">{`rails generate migration add_index_to_users_email`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: Unlike the migration for users, the email uniqueness migration is not pre-defined, so we need to fill in its contents.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`# db/migrate/[timestamp]_add_index_to_users_email.rb\nclass AddIndexToUsersEmail < ActiveRecord::Migration[6.0]\n  def change\n    add_index :users, :email, unique: true\n  end\nend\n`}</code></pre>\n    <p>{`Once we migrate, if we run a test it should fail due to the user fixtures. Comment them out to have the test succeed.`}</p>\n    <p>{`We can also update our `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{` model to have issues on uniqueness:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class User < ApplicationRecord\n  before_save { self.email = email.downcase } # updated\n  validates :name,  presence: true, length: { maximum: 50 }\n  VALID_EMAIL_REGEX = /\\\\A[\\\\w+\\\\-.]+@[a-z\\\\d\\\\-.]+\\\\.[a-z]+\\\\z/i\n  validates :email, presence: true, length: { maximum: 255 },\n                    format: { with: VALID_EMAIL_REGEX },\n                    uniqueness: true #reverted back to true\nend\n`}</code></pre>\n    <p>{`We could also have written it `}<inlineCode parentName=\"p\">{`self.email = self.email.downcase`}</inlineCode>{`. The RHS self is optional - it could also be `}<inlineCode parentName=\"p\">{`self.email = email.downcase`}</inlineCode>{`.`}</p>\n    <p>{`Another alternative implementation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class User < ApplicationRecord\n  before_save { email.downcase! }\n  validates :name, presence: true, length: { maximum: 50 }\n  VALID_EMAIL_REGEX = /\\\\A[\\\\w+\\\\-.]+@[a-z\\\\d\\\\-.]+\\\\.[a-z]+\\\\z/i\n  validates :email, presence: true, length: { maximum: 255 },\n                    format: { with: VALID_EMAIL_REGEX },\n                    uniqueness: true\nend\n`}</code></pre>\n    <p>{`We can write a test for that like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`test \"email addresses should be saved as lower-case\" do\n   mixed_case_email = \"Foo@ExAMPle.CoM\"\n   @user.email = mixed_case_email\n   @user.save\n   assert_equal mixed_case_email.downcase, @user.reload.email\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"todo-adding-a-secure-password\"\n    }}>{`TODO: Adding a secure password`}</h2>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}