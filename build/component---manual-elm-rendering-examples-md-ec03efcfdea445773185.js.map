{"version":3,"sources":["webpack:///../manual/Elm/Rendering-Examples.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,0BADR,0BAGA,iBAAQ,CACN,GAAM,oCADR,oCAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,mdAiBL,iBAAQ,CACN,GAAM,0CADR,0CAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0MAML,uDACA,iBAAQ,CACN,GAAM,mBADR,mBAGA,6EAA4D,0BAAYA,WAAW,KAAvB,UAA5D,oCAAmJ,0BAAYA,WAAW,KAAvB,eAAnJ,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8dAkBL,iBAAQ,CACN,GAAM,2CADR,2CAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gJAWL,iBAAQ,CACN,GAAM,uCADR,uCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,uP,yMAaTJ,EAAWK,gBAAiB","file":"component---manual-elm-rendering-examples-md-ec03efcfdea445773185.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"elm-rendering-examples\"\n    }}>{`Elm Rendering Examples`}</h1>\n    <h2 {...{\n      \"id\": \"rendering-via-anonymous-function\"\n    }}>{`Rendering via anonymous function`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`view model =\n    div [ class \"content\" ]\n        [ h1 [] [ text \"Photo Groove\" ]\n        , div [ id \"thumbnails\" ]\n            -- anonymous function mapping photos\n            (List.map (\\\\photo -> viewThumbnail model.selectedUrl photo)\n                model.photos\n            )\n        , img                 #A\n            [ class \"large\"   #A\n            , src (urlPrefix ++ \"large/\" ++ model.selectedUrl)\n            ]\n            []\n        ]\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"anon-function-with-partial-application\"\n    }}>{`Anon function with partial application`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`Before: List.map (\\\\photo -> viewThumbnail model.selectedUrl photo) model.photos \n# Partial application is known as curried in Elm\nAfter: List.map (viewThumbnail model.selectedUrl) model.photos\n`}</code></pre>\n    <p>{`All Elm functions are curried.`}</p>\n    <h2 {...{\n      \"id\": \"update-function\"\n    }}>{`Update function`}</h2>\n    <p>{`To update the model, we need to have the appropriate `}<inlineCode parentName=\"p\">{`update`}</inlineCode>{` function and expose the correct `}<inlineCode parentName=\"p\">{`Html.Events`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`import Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (onClick)\n\nupdate msg model =\n    if msg.description == \"ClickedPhoto\" then\n        { model | selectedUrl = msg.data }\n    else model\n\nviewThumbnail selectedUrl thumb =\n    img\n        [ src (urlPrefix ++ thumb.url)\n        , classList [ ( \"selected\", selectedUrl == thumbnail.url ) ]\n        , onClick { description = \"ClickedPhoto\", data = thumb.url } ]\n        []\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"implementing-the-model-view-update-loop\"\n    }}>{`Implementing the Model-View-Update Loop`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`import Browser\n\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , view = view\n        , update = update\n        }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"multi-argument-function-annotations\"\n    }}>{`Multi-Argument Function Annotations`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`> String.padLeft\n<function:padLeft> : Int -> Char -> String -> String\n> String.padLeft 9\n<function> : Char -> String -> String\n> String.padLeft 9 '.' <function> : String -> String\n> String.padLeft 9 '.' \"not!\" \".....not!\" : String\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}