{"version":3,"sources":["webpack:///../manual/Stripe/Node-SaaS-With-Stripe.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,wNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,2BADR,4BAGA,+CACA,sBACE,kBAAIC,WAAW,MAAf,gDACA,kBAAIA,WAAW,MAAf,qBACA,kBAAIA,WAAW,MAAf,mCACA,kBAAIA,WAAW,MAAf,wCACA,kBAAIA,WAAW,MAAf,iCACA,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,mEACA,kBAAIA,WAAW,MAAf,kDAEF,iBAAQ,CACN,GAAM,8DADR,8DAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,quE,+MA0HTJ,EAAWK,gBAAiB","file":"component---manual-stripe-node-saa-s-with-stripe-md-72b7f8ec15b0be64ba16.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"nodejs-saas-with-stripe\"\n    }}>{`Node.js SaaS with Stripe`}</h1>\n    <p>{`The basics plan is to:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a test customer for the subscription.`}</li>\n      <li parentName=\"ol\">{`Create a product.`}</li>\n      <li parentName=\"ol\">{`Create a plan for that product.`}</li>\n      <li parentName=\"ol\">{`Create a subscription for that plan.`}</li>\n      <li parentName=\"ol\">{`Repeating for a few products.`}</li>\n      <li parentName=\"ol\">{`Writing a test script to do all this.`}</li>\n      <li parentName=\"ol\">{`Fetching back a list of subscriptions for that particular user.`}</li>\n      <li parentName=\"ol\">{`Writing out an example using Express servers.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"building-out-the-base-functions-to-use-for-the-express-app\"\n    }}>{`Building out the base functions to use for the Express app`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// controllers/stripe/index.js\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n\n/**\n * Create a new customer based off an email address.\n *\n * @param {string} email\n * @returns {Promise} Result of attempting to create a customer.\n */\nfunction customerCreate(email) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const customer = await stripe.customers.create({ email: email });\n      resolve(customer);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Register a new product.\n * @example\n * {\n * name: 'My SaaS Platform',\n * type: 'service'\n * }\n *\n * @param {Object} data Name and type of product\n * @returns {Promise} Request to create new product\n */\nfunction productCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.products.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Create a new plan with a product.\n * @example\n * {\n * currency: 'usd',\n * interval: 'month',\n * product: 'prod_id',\n * nickname: 'Pro Plan',\n * amount: 12\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction planCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.plans.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Create a new subscription for a user based on * a plan.\n * @example\n * {\n * customer: 'customer_id',\n * items: [\n *   {\n *     plan: 'plan_abc',\n *     quantity: 2\n *   }\n * ]\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction subscriptionCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.subscriptions.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Fetch the subscription list.\n * @example\n * {\n * { limit: 99 },\n * customer: 'cus_id'\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction subscriptionList(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.subscriptions.list(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}