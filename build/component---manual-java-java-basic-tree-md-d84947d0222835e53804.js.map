{"version":3,"sources":["webpack:///../manual/Java/Java-Basic-Tree.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oCADR,oCAGA,4DAA2C,0BAAYC,WAAW,KAAvB,OAA3C,QAAmG,0BAAYA,WAAW,KAAvB,OAAnG,0BAA6K,0BAAYA,WAAW,KAAvB,iBAA7K,+BAAsQ,0BAAYA,WAAW,KAAvB,QAAtQ,sCACA,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qyCA8DL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,skBA6BL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,u6C,uMAmETJ,EAAWK,gBAAiB","file":"component---manual-java-java-basic-tree-md-d84947d0222835e53804.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"java---basic-tree-data-structure\"\n    }}>{`Java - Basic Tree Data Structure`}</h1>\n    <p>{`This is a basic implementation. The `}<inlineCode parentName=\"p\">{`bfs`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`dfs`}</inlineCode>{` methods each return a `}<inlineCode parentName=\"p\">{`List<Integer>`}</inlineCode>{` of the data stored in each `}<inlineCode parentName=\"p\">{`Node`}</inlineCode>{` to make a comparison in the test.`}</p>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/main/java/Tree.java\nimport main.java.Node;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Tree {\n    public Node root;\n\n    public Tree() {\n        this.root = null;\n    }\n\n    public Tree(Node root) {\n        this.root = root;\n    }\n\n    public List<Integer> bfs() {\n        if (this.root == null) {\n            throw new NullPointerException(\"this.root is null\");\n        }\n\n        List<Node> n = new ArrayList<>();\n        n.add(this.root);\n\n        List<Integer> res = new ArrayList<>();\n\n        while (n.size() > 0) {\n            Node child = n.remove(0);\n            if (child.children != null) {\n                n.addAll(child.children);\n            }\n            res.add(child.data);\n        }\n\n        return res;\n    }\n\n    public List<Integer> dfs() {\n        if (this.root == null) {\n            throw new NullPointerException(\"No root\");\n        }\n\n        List<Node> n = new ArrayList<Node>();\n        n.add(this.root);\n\n        List<Integer> res = new ArrayList<Integer>();\n\n        while (n.size() > 0) {\n            Node child = n.remove(0);\n\n            if (child.children != null) {\n                n.addAll(0, child.children);\n            }\n            res.add(child.data);\n        }\n\n        return res;\n    }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/main/java/Node.java\npackage main.java;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Node {\n    public Integer data;\n    public List<Node> children;\n\n    public Node() {\n        this.data = null;\n        this.children = new ArrayList<>();\n    }\n\n    public Node(Integer data) {\n        this.data = data;\n        this.children = new ArrayList<>();\n    }\n\n    public Node(Integer data, List<Node> children) {\n        this.data = data;\n        this.children = new ArrayList<>();\n        this.children.addAll(children);\n    }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// test/java/TreeTest.java\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport main.java.Node;\n\npublic class TreeTest {\n    @Test\n    public void testBFS() {\n        Node n1 = new Node(1);\n        Node n2 = new Node(2);\n        Node n3 = new Node(3);\n        Node n4 = new Node(4);\n        Node n5 = new Node(5);\n\n        List<Integer> expected = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            expected.add(i + 1);\n        }\n\n        Tree t = new Tree(n1);\n        n1.children.add(n2);\n        n1.children.add(n3);\n        n2.children.add(n4);\n        n3.children.add(n5);\n\n        List<Integer> res = t.bfs();\n\n        assertEquals(expected, res);\n    }\n\n    @Test\n    public void testDFS() {\n        Node n1 = new Node(1);\n        Node n2 = new Node(2);\n        Node n3 = new Node(3);\n        Node n4 = new Node(4);\n        Node n5 = new Node(5);\n\n        List<Integer> expected = new ArrayList<>();\n        expected.add(1);\n        expected.add(2);\n        expected.add(4);\n        expected.add(3);\n        expected.add(5);\n\n        Tree t = new Tree(n1);\n        n1.children.add(n2);\n        n1.children.add(n3);\n        n2.children.add(n4);\n        n3.children.add(n5);\n\n        List<Integer> res = t.dfs();\n\n        assertEquals(expected, res);\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}