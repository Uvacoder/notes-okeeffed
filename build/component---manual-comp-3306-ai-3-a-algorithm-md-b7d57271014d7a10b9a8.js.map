{"version":3,"sources":["webpack:///../manual/COMP3306-AI/3-A*-Algorithm.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,sNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,wBADR,+BAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0BADQ,+BAApB,OAGF,mBAAGA,WAAW,MAAS,CACjB,KAAQ,cADd,mBAHE,OAMF,mBAAGA,WAAW,MAAS,CACjB,KAAQ,2BADd,yBANE,OASF,mBAAGA,WAAW,MAAS,CACjB,KAAQ,6BADd,kCATE,OAYF,mBAAGA,WAAW,MAAS,CACjB,KAAQ,eADd,eAIA,qBAAG,sBAAQA,WAAW,KAAnB,SACH,sBACE,kBAAIA,WAAW,MAAf,6BACA,kBAAIA,WAAW,MAAf,wCAEF,iBAAQ,CACN,GAAM,YADR,mBAGA,sBACE,kBAAIA,WAAW,MAAf,iCAAsD,0BAAYA,WAAW,MAAvB,SACtD,kBAAIA,WAAW,MAAf,+CAAoE,0BAAYA,WAAW,MAAvB,SACpE,kBAAIA,WAAW,MAAf,iCACA,kBAAIA,WAAW,MAAf,wBAA6C,0BAAYA,WAAW,MAAvB,kBAA7C,MAA+G,0BAAYA,WAAW,MAAvB,iCAA/G,MAAgM,0BAAYA,WAAW,MAAvB,mCAAhM,MAAmR,0BAAYA,WAAW,MAAvB,0DAErR,kKACA,qBAAG,sBAAQA,WAAW,KAAnB,6BACH,sBACE,kBAAIA,WAAW,MAAf,wDACA,kBAAIA,WAAW,MAAf,wDACA,kBAAIA,WAAW,MAAf,kDAEF,iBAAQ,CACN,GAAM,yBADR,yBAGA,sBACE,kBAAIA,WAAW,MAAf,aAAkC,0BAAYA,WAAW,MAAvB,QAAlC,yCAA6H,0BAAYA,WAAW,MAAvB,iBAA7H,UAAkM,0BAAYA,WAAW,MAAvB,SAAlM,0CAA+R,0BAAYA,WAAW,MAAvB,KAA/R,4FACA,kBAAIA,WAAW,MAAf,6BAAkD,0BAAYA,WAAW,MAAvB,cAAlD,oJAEF,qBAAG,sBAAQA,WAAW,KAAnB,YACH,2BAAU,0BAAYA,WAAW,KAAvB,KAAV,UAAkE,0BAAYA,WAAW,KAAvB,wBAAlE,2CACA,sCACA,oHACA,iBAAQ,CACN,GAAM,2BADR,kCAGA,+CACA,sBACE,kBAAIA,WAAW,MAAf,sEACA,kBAAIA,WAAW,MAAf,gEACA,kBAAIA,WAAW,MAAf,kCACA,kBAAIA,WAAW,MAAf,mDACA,kBAAIA,WAAW,MAAf,kCACA,kBAAIA,WAAW,MAAf,YAAiC,kBAAIA,WAAW,MAAf,eAAjC,yDACA,kBAAIA,WAAW,MAAf,uCACA,kBAAIA,WAAW,MAAf,sCACA,kBAAIA,WAAW,MAAf,+DACA,kBAAIA,WAAW,MAAf,wBAA6C,kBAAIA,WAAW,MACxD,kBAAIA,WAAW,MAAf,2CAEJ,kBAAIA,WAAW,MAAf,4BACA,kBAAIA,WAAW,MAAf,uFAEF,iBAAQ,CACN,GAAM,aADR,aAGA,+DACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,cAAoF,0BAAYA,WAAW,MAAvB,QAApF,qBAA2J,0BAAYA,WAAW,MAAvB,KAA3J,YAAsN,0BAAYA,WAAW,MAAvB,yB,6MAM5NJ,EAAWK,gBAAiB","file":"component---manual-comp-3306-ai-3-a-algorithm-md-b7d57271014d7a10b9a8.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"week-3---a-algorithm\"\n    }}>{`Week 3 - A`}{`*`}{` Algorithm`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#week-3---a-algorithm\"\n        }}>{`Week 3 - A`}{`*`}{` Algorithm`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#a-search\"\n        }}>{`A`}{`*`}{` Search`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#admissible-heauristic\"\n        }}>{`Admissible Heauristic`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#optimality-of-a---proof\"\n        }}>{`Optimality of A`}{`*`}{` - Proof`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#dominance\"\n        }}>{`Dominance`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Aims`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`A`}{`*`}{` search algorithm`}</li>\n      <li parentName=\"ul\">{`How to invent admissible heuristics`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"a-search\"\n    }}>{`A`}{`*`}{` Search`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`UCS minimizes the cost so far `}<inlineCode parentName=\"li\">{`g(n)`}</inlineCode></li>\n      <li parentName=\"ul\">{`GS minimizes the estimated cost to the goal `}<inlineCode parentName=\"li\">{`h(n)`}</inlineCode></li>\n      <li parentName=\"ul\">{`A`}{`*`}{` combining UCS and GS`}</li>\n      <li parentName=\"ul\">{`Evaluation function: `}<inlineCode parentName=\"li\">{`f(n)=g(n)+h(n)`}</inlineCode>{` - `}<inlineCode parentName=\"li\">{`g(n) = cost so far to reach n`}</inlineCode>{` - `}<inlineCode parentName=\"li\">{`h(n) = est. cost from n to goal`}</inlineCode>{` - `}<inlineCode parentName=\"li\">{`f(n) = est. total cost of path through n to the goal`}</inlineCode></li>\n    </ul>\n    <p>{`The idea is that we take into account both the cost and estimated cost and combine them to decide which nodes to add to the fringe queue!`}</p>\n    <p><strong parentName=\"p\">{`BFS and UCS Special Case`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`BFS is a special case of A`}{`*`}{` when f(n)=depth(n)`}</li>\n      <li parentName=\"ul\">{`BFS is also a special case of UCS when g(n)=depth(n)`}</li>\n      <li parentName=\"ul\">{`UCS is a special case of A`}{`*`}{` when h(n)=0`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"admissible-heauristic\"\n    }}>{`Admissible Heauristic`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Heuristic `}<inlineCode parentName=\"li\">{`h(n)`}</inlineCode>{` is admissible if for every node n: - `}<inlineCode parentName=\"li\">{`h(n) <= h*(n)`}</inlineCode>{` where `}<inlineCode parentName=\"li\">{`h*(n)`}</inlineCode>{` is the true cost to reach a goal from `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` - The estimate to reach the goal is smaller or equal to the true cost to reach the goal`}</li>\n      <li parentName=\"ul\">{`Admissible heuristics are `}<inlineCode parentName=\"li\">{`optimistic`}</inlineCode>{` - they think that the cost of solving the problem is less than it actually is. - heuristic never overestimates actual cost -> it is admissible`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Theorem`}</strong></p>\n    <p>{`If `}<inlineCode parentName=\"p\">{`h`}</inlineCode>{` is an `}<inlineCode parentName=\"p\">{`admissible heuristic`}</inlineCode>{` than A`}{`*`}{` is complete and optimal.`}</p>\n    <p>{`How to check?`}</p>\n    <p>{`See if the estimated cost for a node is <= the actual cost from that node to the goal node.`}</p>\n    <h2 {...{\n      \"id\": \"optimality-of-a---proof\"\n    }}>{`Optimality of A`}{`*`}{` - Proof`}</h2>\n    <p>{`Compare f(G2) and f(G)`}</p>\n    <ol>\n      <li parentName=\"ol\">{`f(G2)=g(G2)+h(G2) (by definition) = g(G2) as h(G2)=0, G2 is a goal`}</li>\n      <li parentName=\"ol\">{`f(G)=g(G)+h(G) (by definition) = g(G) as h(G)=0, G is a goal`}</li>\n      <li parentName=\"ol\">{`g(G2)>g(G) as G2 is suboptimal`}</li>\n      <li parentName=\"ol\">{`=> f(G2)>f(G) by substituting 1) and 2) into 3)`}</li>\n      <li parentName=\"ol\">{`f(n)=g(n)+h(n) (by definition)`}</li>\n      <li parentName=\"ol\">{`h(n) <= h`}<em parentName=\"li\">{`(n) where h`}</em>{`(n) is the true cost from n to G (as h is admissible)`}</li>\n      <li parentName=\"ol\">{`=> f(n)<=g(n) + h`}{`*`}{`(n) (5 & 6)`}</li>\n      <li parentName=\"ol\">{`= g(G) path cost from S to G via n`}</li>\n      <li parentName=\"ol\">{`g(G) = f(G) as f(G)=g(G)+h(G)=g(G)+0 as h(G)=0, G is a goal`}</li>\n      <li parentName=\"ol\">{`=> f(n)<=f(G) (7,8,9)`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Thus f(G)<f(G2) (4) & f(n)<=f(G) (10)`}</li>\n        </ul></li>\n      <li parentName=\"ol\">{`f(n)<=f(G)<f(G2) (10, 4)`}</li>\n      <li parentName=\"ol\">{`f(n)<f(G2) => n will be expanded not G2; A`}{`*`}{` will not select G2 for expansion`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"dominance\"\n    }}>{`Dominance`}</h2>\n    <p>{`Two admissibleheuristics h(1) and h(2)`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`h[2]`}</inlineCode>{` dominates `}<inlineCode parentName=\"li\">{`h[1]`}</inlineCode>{` if for all nodes `}<inlineCode parentName=\"li\">{`n`}</inlineCode>{` we have `}<inlineCode parentName=\"li\">{`h[2](n) >= h[1](n)`}</inlineCode></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}