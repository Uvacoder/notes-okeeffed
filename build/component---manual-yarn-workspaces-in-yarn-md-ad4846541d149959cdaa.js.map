{"version":3,"sources":["webpack:///../manual/Yarn/Workspaces-In-Yarn.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,mNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,4EAA2D,mBAAGC,WAAW,KAAQ,CAC7E,KAAQ,gEAD+C,cAA3D,KAGA,iBAAQ,CACN,GAAM,qBADR,sBAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,WAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,cAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,gDAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,6BAMN,iBAAQ,CACN,GAAM,gBADR,gBAGA,8BACE,iBAAGA,WAAW,cAAd,kTAEF,iBAAQ,CACN,GAAM,SADR,SAGA,sBACE,kBAAIA,WAAW,MAAf,oEACA,kBAAIA,WAAW,MAAf,4EAAiG,0BAAYA,WAAW,MAAvB,gBAAjG,oCAEF,iBAAQ,CACN,GAAM,cADR,cAGA,iMACA,sBACE,kBAAIA,WAAW,MAAf,oLAEF,iBAAQ,CACN,GAAM,0BADR,2BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,2KAWL,qCAAoB,0BAAYA,WAAW,KAAvB,gBAApB,qCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,uIAWL,iBAAQ,CACN,GAAM,0CADR,0CAGA,qEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6hBA+BL,gCAAe,0BAAYA,WAAW,KAAvB,gBAAf,4DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,gcAoBL,8BACE,iBAAGA,WAAW,cAAd,iBAA6C,0BAAYA,WAAW,KAAvB,QAA7C,KAAmG,0BAAYA,WAAW,KAAvB,iBAAnG,uBAAoL,0BAAYA,WAAW,KAAvB,sBAApL,6GAAgW,0BAAYA,WAAW,KAAvB,SAAhW,oHAAsgB,0BAAYA,WAAW,KAAvB,SAAtgB,MAEF,iBAAQ,CACN,GAAM,wBADR,wBAGA,gEAA+C,0BAAYA,WAAW,KAAvB,WAA/C,KACA,8BACE,iBAAGA,WAAW,cAAd,mR,0MAMNJ,EAAWK,gBAAiB","file":"component---manual-yarn-workspaces-in-yarn-md-ad4846541d149959cdaa.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"yarn-workspaces\"\n    }}>{`Yarn Workspaces`}</h1>\n    <p>{`Notes from this come from the official Yarn article `}<a parentName=\"p\" {...{\n        \"href\": \"https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/\"\n      }}>{`found here`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"tldr-key-commands\"\n    }}>{`tl;dr Key Commands`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Command`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Function`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`yarn config set workspaces-experimental true`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Initialises Workspaces`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Those who have tried splitting a project into multiple packages know how hard it is to make changes across multiple packages at one time. To make the process easier, some big projects adopted a monorepo approach, or multi-package repositories, which reduces the burden of writing code across packages.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"lerna\"\n    }}>{`Lerna`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`A tool to optimize workflow around managing multi-package repos.`}</li>\n      <li parentName=\"ul\">{`Being a wrapper of a package manager, Lerna can't manipulate contents of `}<inlineCode parentName=\"li\">{`node_modules`}</inlineCode>{` efficiently, hence Workspaces.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"workspaces\"\n    }}>{`Workspaces`}</h2>\n    <p>{`Yarn Workspaces is a feature that allows users to install dependencies from multiple package.json files in subfolders of a single root package.json file, all in one go.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Enables faster, lighter installation. Also creates symlinks between Workspaces that depend on each other, and will ensure the consistencvy and correcvtness of all directories.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example-jest-workspace\"\n    }}>{`Example: Jest Workspace`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`| jest/\n| ---- package.json\n| ---- packages/\n| -------- jest-matcher-utils/\n| ------------ package.json\n| -------- jest-diff/\n| ------------ package.json\n...\n`}</code></pre>\n    <p>{`Example root `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` file. Generally kept as private.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"private\": true,\n  \"name\": \"jest\",\n  \"devDependencies\": {\n    \"chalk\": \"^2.0.1\"\n  },\n  \"workspaces\": [\"packages/*\"]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"how-yarn-install-works-with-workspaces\"\n    }}>{`How yarn install works with workspaces`}</h2>\n    <p>{`Take the following two packages within Jest:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`// First package.json\n{\n  \"name\": \"jest-matcher-utils\",\n  \"description\": \"...\",\n  \"version\": \"20.0.3\",\n  \"license\": \"...\",\n  \"main\": \"...\",\n  \"browser\": \"...\",\n  \"dependencies\": {\n    \"chalk\": \"^1.1.3\",\n    \"pretty-format\": \"^20.0.3\"\n  }\n}\n\n// Second package.json\n{\n  \"name\": \"jest-diff\",\n  \"version\": \"20.0.3\",\n  \"license\": \"...\",\n  \"main\": \"...\",\n  \"browser\": \"...\",\n  \"dependencies\": {\n    \"chalk\": \"^1.1.3\",\n    \"diff\": \"^3.2.0\",\n    \"jest-matcher-utils\": \"^20.0.3\",\n    \"pretty-format\": \"^20.0.3\"\n  }\n}\n`}</code></pre>\n    <p>{`Running `}<inlineCode parentName=\"p\">{`yarn install`}</inlineCode>{` from anywhere within the projects yields the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`| jest/\n| ---- node_modules/\n| -------- chalk/\n| -------- diff/\n| -------- pretty-format/\n| -------- jest-matcher-utils/  (symlink) -> ../packages/jest-matcher-utils\n| ---- package.json\n| ---- packages/\n| -------- jest-matcher-utils/\n| ------------ node_modules/\n| ---------------- chalk/\n| ------------ package.json\n| -------- jest-diff/\n| ------------ node_modules/\n| ---------------- chalk/\n| ------------ package.json\n...\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Packages like `}<inlineCode parentName=\"p\">{`diff`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`pretty-format`}</inlineCode>{` and the symlink to `}<inlineCode parentName=\"p\">{`jest-matcher-utils`}</inlineCode>{` were hoisted to the root node_modules directory, making the installation faster and smaller. The package `}<inlineCode parentName=\"p\">{`chalk`}</inlineCode>{` however could not be moved to the root because the root already depends on a different, incompatible version of `}<inlineCode parentName=\"p\">{`chalk`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"managing-dependecies\"\n    }}>{`Managing Dependecies`}</h2>\n    <p>{`Run the installation within the desired `}<inlineCode parentName=\"p\">{`package`}</inlineCode>{`:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: that Workspaces don’t have their own yarn.lock files, and the root yarn.lock contains all the dependencies for all the Workspaces. When you want to change a dependency inside a Workspace, the root yarn.lock will be changed as well as the Workspace’s package.json.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}