{"version":3,"sources":["webpack:///../manual/Ruby/Ruby-Symbols.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,6MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gCADR,kCAGA,iBAAQ,CACN,GAAM,QADR,SAGA,+EACA,4LACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,uKAYL,iBAAQ,CACN,GAAM,aADR,aAGA,kGACA,sDACA,sBACE,kBAAIA,WAAW,MAAf,0EACA,kBAAIA,WAAW,MAAf,uFACA,kBAAIA,WAAW,MAAf,oFAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2mB,oMAqCTJ,EAAWK,gBAAiB","file":"component---manual-ruby-ruby-symbols-md-f6ea41115b4878bcbf8a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"ruby-symbols-colon-variables\"\n    }}>{`Ruby Symbols (Colon Variables)`}</h1>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`A ruby symbol is like an Enum constant in Java or C++.`}</p>\n    <p>{`Symbols are immutable. Their value remains constant during the entirety of the program. They never appear on the left side of an assignment. You'll never see this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`:myname = \"steve\"\n\n# Symbols ARE used like this:\nmystring = :steveT\nmystring = :steveT.to_s\nmyint = :steveT.to_i\nclass Example\n  attr_reader :steveT\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"more-info\"\n    }}>{`More info`}</h2>\n    <p>{`Colon variable refers to :abc type variables you might have seen in Ruby.`}</p>\n    <p>{`They are called Ruby symbols.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A Ruby symbol is not a variable because it cannot be assigned a value.`}</li>\n      <li parentName=\"ul\">{`It is not a reference to another variable nor is it a pointer to a memory location.`}</li>\n      <li parentName=\"ul\">{`Has a value and whenever the name of the symbol is same, its value is the same.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`# It is trivial to assign a value to a variable.\nabc = \"1\"\n=> \"1\"\n\n# But a symbol cannot be assigned any value.\n:a = \"1\"\n# SyntaxError: A symbol cannot be assigned a value\n\n# Can use a variable as a map-key (You know already)\nm = {abc => \"1\"}\n=> {\"1\"=>\"1\"}\n\n# Can use a string as a map-key (You know already)\nm = {\"def\" => \"1\"}\n=> {\"def\"=>\"1\"}\n\n# Can also use a symbol as a map-key (Most common use case)\nm = {:a => \"1\"}\n=> {:a=>\"1\"}\n\n# Can use same symbol as key in another map\nm2 = {:a => \"2\"}\n=> {:a=>\"2\"}\n\n# And it won't affect the previous map.\nm\n=> {:a=>\"1\"}\n\nm2\n=> {:a=>\"2\"}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}