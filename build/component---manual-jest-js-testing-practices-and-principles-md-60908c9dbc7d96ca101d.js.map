{"version":3,"sources":["webpack:///../manual/Jest/JS-Testing-Practices-And-Principles.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-jest-js-testing-practices-and-principles-md-60908c9dbc7d96ca101d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"js-testing-practices-and-principles\"\n    }}>{`JS-Testing-Practices-And-Principles`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/testing-practices-principles/jest-testing-framework/\"\n        }}>{`Online Course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://jestjs.io/docs/en/cli\"\n        }}>{`Jest CLI docs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/atlassian/jest-in-case\"\n        }}>{`Jest-in-case library`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/pure-modules/\"\n        }}>{`Why Pure Modules`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"jest-intro\"\n    }}>{`Jest Intro`}</h2>\n    <h3 {...{\n      \"id\": \"cli\"\n    }}>{`CLI`}</h3>\n    <p>{`Running `}<inlineCode parentName=\"p\">{`jest -o`}</inlineCode>{` will look for related files since last commit. When running, you can use shortcuts to run certain tests. Read the watch usage for more info.`}</p>\n    <h3 {...{\n      \"id\": \"commands\"\n    }}>{`Commands`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toBe`}</inlineCode>{` will compare memory allocation`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toEqual`}</inlineCode>{` will deep equal object values etc`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toMatchObject`}</inlineCode>{` checks if all expected object matches what is in the actual object`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toHaveBeenCalled`}</inlineCode>{` is used to help with mock functons`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toHaveBeenCalledTimes`}</inlineCode>{` is mock called how many times`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toHaveBeenCalledWith`}</inlineCode>{` to check what argument is passed`}</li>\n    </ul>\n    <p>{`With `}<inlineCode parentName=\"p\">{`toEqual`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`toMatchObject`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`toHaveBeenCalledWith`}</inlineCode>{` you can match a schema. Eg:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`test('example', () => {\n  const bday = {\n    day: 22,\n    month: 4,\n    year: 1992,\n    meta: { display: '22nd April 1992' },\n  };\n\n  const schema = {\n    day: expect.any(Number),\n    month: expect.any(Number),\n    year: expect.any(Number),\n    meta: {\n      display: expect.stringContaining('1992'),\n    },\n    // there's also expect.arrayContaining or expect.objectContaining\n  };\n  expect(birthday).toEqual(schema);\n});\n`}</code></pre>\n    <p>{`This is useful for generated data.`}</p>\n    <h2 {...{\n      \"id\": \"test-factories-and-colocating-tests-qa\"\n    }}>{`Test Factories and Colocating Tests Q&A`}</h2>\n    <p>{`Creating a test factory is a good approach to testing a pure function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`describe('isPasswordAllowed', () => {\n  const allowedPasswords = ['allowed'];\n  const disallowedPasswords = ['disallowed'];\n\n  allowedPasswords.forEach(pwd => {\n    test(\\`\"\\${pwd}\" should be allowed\\`, () => {\n      expect(isPasswordAllowed(pwd)).toBe(true);\n    });\n  });\n\n  disallowedPasswords.forEach(pwd => {\n    test(\\`\"\\${pwd}\" should be allowed\\`, () => {\n      expect(isPasswordAllowed(pwd)).toBe(false);\n    });\n  });\n});\n`}</code></pre>\n    <p>{`There was a reference here to Atlassian's `}<inlineCode parentName=\"p\">{`jest-in-case`}</inlineCode>{` library that you can see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/atlassian/jest-in-case\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`\"Colocating\" your tests essentially is the idea of putting your test in the same folder as where the source code is. Its a more relevant position for updates etc.`}</p>\n    <h2 {...{\n      \"id\": \"code-coverage\"\n    }}>{`Code coverage`}</h2>\n    <p>{`Istanbul is a standard coverage tool for JS testing.`}</p>\n    <p>{`The code coverage report helps you identify lines of code that haven't been covered during testing.`}</p>\n    <h2 {...{\n      \"id\": \"monkey-patch-a-mock\"\n    }}>{`Monkey Patch a mock`}</h2>\n    <p>{`Monkey patching is updating 3rd party software to fit our needs - in this case, changing a func.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\ntest('returns winner', () => {\n  utils.getWinner = (p1, p2) => p2;\n\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"assert-calling-a-mock\"\n    }}>{`Assert calling a mock`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\ntest('returns winner', () => {\n  const originalGetWinner = utils.getWinner;\n  utils.getWinner = (...args) => {\n    util.getWinner.mock.calls.push(args);\n    return args[1];\n  };\n  utils.getWinner.mock = { calls: [] };\n\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n  expect(utils.getWinner.mock.calls).toEqual([\n    ['Ken Wheeler', 'Kent C Dodds'],\n    ['Ken Wheeler', 'Kent C Dodds'],\n  ]);\n\n  utils.getWinner = originalGetWinner;\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"jest-spyon\"\n    }}>{`Jest spyOn`}</h2>\n    <p>{`When calling `}<inlineCode parentName=\"p\">{`spyOn`}</inlineCode>{`, it just wraps the function and \"spies\" on it with a mock function to allow it to keep running.`}</p>\n    <p>{`Once you do that, we can mock the implementation to enable the test to run our fake one:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\ntest('returns winner', () => {\n  jest.spyOn(utils, 'getWinner');\n  utils.getWinner.mockImplementation((p1, p2) => p2);\n\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n  expect(utils.getWinner.mock.calls).toEqual([\n    ['Ken Wheeler', 'Kent C Dodds'],\n    ['Ken Wheeler', 'Kent C Dodds'],\n  ]);\n\n  util.getWinner.mockRestore();\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"jest-mock\"\n    }}>{`Jest Mock`}</h2>\n    <p>{`Jest Mock prevents us running into the namespace issues that `}<inlineCode parentName=\"p\">{`spyOn`}</inlineCode>{` can give us which stops us from busting ES6 modules.`}</p>\n    <p>{`Jest will swap out whatever is in that file with a mock.`}</p>\n    <p>{`The callback allows you to mock specific functions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\njest.mock('../utils', () => {\n  // to mock the actual file\n  const actualUtils = require.requireActual('../utils');\n\n  return {\n    // if we want to keep base utils\n    ...actualUtils,\n    getWinner: jest.fn((p1, p2) => p2),\n  };\n});\n\nbeforeEach(() => {\n  // ensure mocks are cleared before each test\n  utils.getWinner.mockClear();\n});\n\ntest('returns winner', () => {\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n  expect(utils.getWinner.mock.calls).toEqual([\n    ['Ken Wheeler', 'Kent C Dodds'],\n    ['Ken Wheeler', 'Kent C Dodds'],\n  ]);\n\n  util.getWinner.mockRestore();\n});\n`}</code></pre>\n    <p>{`There is a convention by Jest to store mocks in a `}<inlineCode parentName=\"p\">{`__mocks__`}</inlineCode>{` folder which is also colocated with the file to mock.`}</p>\n    <p>{`If we don't provide a mock, it will go to the `}<inlineCode parentName=\"p\">{`__mocks__`}</inlineCode>{` folder to check if there is an implementation there.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\n// no implementation - go check '../__mocks__/utils'\njest.mock('../utils');\n\nbeforeEach(() => {\n  // ensure mocks are cleared before each test\n  utils.getWinner.mockClear();\n});\n\ntest('returns winner', () => {\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n  expect(utils.getWinner.mock.calls).toEqual([\n    ['Ken Wheeler', 'Kent C Dodds'],\n    ['Ken Wheeler', 'Kent C Dodds'],\n  ]);\n\n  util.getWinner.mockRestore();\n});\n`}</code></pre>\n    <p>{`To mock modules, you put a mock at the root dir (example has `}<inlineCode parentName=\"p\">{`src/__mocks__`}</inlineCode>{`) and Jest will pick those up automatically.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// checks for \\`src/__mocks__/axios.js\\`\nimport axiosMock from 'axios';\n\n// if we don't want to mock module\njest.unmock('axios');\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An interesting point here on pure modules is that Jest has a `}<inlineCode parentName=\"p\">{`resetModules`}</inlineCode>{` method that you can run after each test if there is impurity (ie variables declared at the top-level of the file).`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"using-a-__mocks__-directory\"\n    }}>{`Using a `}<inlineCode parentName=\"h2\">{`__mocks__`}</inlineCode>{` directory`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import * as usersController from '../users';\nimport { db, initDb } from 'db-utils';\n\nbeforeEach(() => {\n  // an example just initialising the db here\n  initDb();\n});\n\ntest('getUsers returns all users in the database', async () => {\n  const req = {};\n  const res = {\n    json: jest.fn(),\n  };\n\n  await usersController.getUsers(req, res);\n  expect(res.json).toHaveBeenCalledTimes(1);\n  console.log(res.json.mock.calls[0]); // passes back array called in func [{users:[]}]\n\n  // for testing\n  const actualUsers = await db.getUsers();\n  expect(users).toEqual(actualUsers.map(safeUser));\n});\n`}</code></pre>\n    <p>{`The example that Kent C Dodds users here is a util to generate random users.`}</p>\n    <h2 {...{\n      \"id\": \"test-factories\"\n    }}>{`Test Factories`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Something to note throughout the tests is that Kent uses a `}<inlineCode parentName=\"p\">{`setup`}</inlineCode>{` top-level function to get the data required during test runtime instead of initialising at the top-level.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function setup() {\n  const req = {};\n  const res = {};\n  Object.assign(res, {\n    status: jest.fn(\n      function status() {\n        return this;\n      }.bind(res),\n    ),\n    json: jest.fn(\n      function status() {\n        return this;\n      }.bind(res),\n    ),\n    send: jest.fn(\n      function status() {\n        return this;\n      }.bind(res),\n    ),\n  });\n  return { req, res };\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Doing cleanup ahead of tests can be useful instead of after. This helps inspect the database at the time of failure to help debug.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"conclusion\"\n    }}>{`Conclusion`}</h2>\n    <p>{`Kent mentions that you should use the `}<inlineCode parentName=\"p\">{`testing trophy`}</inlineCode>{`. He mentions that generally he focuses mainly on integration test over unit and e2e as they are more expensive time and money wise.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}