{"version":3,"sources":["webpack:///../manual/Programming-Languages/Creating-Your-Own-Language.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,4OAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,8BADR,8BAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAf,kDACA,kBAAIA,WAAW,MAAf,0CAEF,iBAAQ,CACN,GAAM,wBADR,wBAGA,sBACE,kBAAIA,WAAW,MAAf,wIACA,kBAAIA,WAAW,MAAf,6EACA,kBAAIA,WAAW,MAAf,2JAEF,iBAAQ,CACN,GAAM,sBADR,uBAGA,yGACA,iBAAQ,CACN,GAAM,kBADR,kBAGA,uGAAsF,0BAAYA,WAAW,KAAvB,YAAtF,KACA,sBACE,kBAAIA,WAAW,MAAf,qBACA,kBAAIA,WAAW,MAAf,0CAEF,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,+BAEL,iBAAQ,CACN,GAAM,yBADR,yBAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,kCADQ,kCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oDADQ,oDAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,2DADQ,4DAItB,iBAAQ,CACN,GAAM,wBADR,wBAGA,sBACE,kBAAIA,WAAW,MAAf,2EACA,kBAAIA,WAAW,MAAf,iGACA,kBAAIA,WAAW,MAAf,2FAEF,iBAAQ,CACN,GAAM,WADR,WAGA,oCAAmB,0BAAYA,WAAW,KAAvB,oBAAnB,QAAwF,0BAAYA,WAAW,KAAvB,sBAAxF,KACA,yDACA,4EAA2D,0BAAYA,WAAW,KAAvB,UAA3D,YAA0H,0BAAYA,WAAW,KAAvB,SAA1H,qCACA,gDACA,sBACE,kBAAIA,WAAW,MAAf,+BACA,kBAAIA,WAAW,MAAf,kDACA,kBAAIA,WAAW,MAAf,2BACA,kBAAIA,WAAW,MAAf,kEACA,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,iCAEF,iBAAQ,CACN,GAAM,iBADR,iBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0LAML,iBAAQ,CACN,GAAM,6BADR,6BAGA,yHAAwG,0BAAYA,WAAW,KAAvB,WAAxG,wBAAoL,0BAAYA,WAAW,KAAvB,yBAApL,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iO,mOAmBTJ,EAAWK,gBAAiB","file":"component---manual-programming-languages-creating-your-own-language-md-52245aba90a16e4d32a2.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"creating-your-own-language\"\n    }}>{`Creating Your Own Language`}</h1>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use Cases`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Domain-Specific Languages: Terraform, Gemfiles`}</li>\n      <li parentName=\"ol\">{`Templating languages: Handlebars, Pug`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"usecases-at-sendgrid\"\n    }}>{`Usecases at SendGrid`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Drag + Drop editor takes HTML, parses it into an abstract syntax tree (AST) and manipulates it before serializing it back into HTML.`}</li>\n      <li parentName=\"ul\">{`Using it for own bespoke templating language for dynamic email templates.`}</li>\n      <li parentName=\"ul\">{`Sync position in side-by-side editor by breaking HTML into an AST and rewriting the elements with information about their position in the text editor.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"what-is-a-compiler\"\n    }}>{`What is a compiler?`}</h2>\n    <p>{`Something that turns a higher-level language into a lower-level langauge`}{`*`}{`.`}</p>\n    <h2 {...{\n      \"id\": \"todays-example\"\n    }}>{`Todays example`}</h2>\n    <p>{`In this particular example, we will follow the course that builds the language `}<inlineCode parentName=\"p\">{`Dropbear`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Lisp-like langage`}</li>\n      <li parentName=\"ul\">{`Leverage existing JavaScript run-time`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`(add 1 2 (subtract 6 3))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"inspiration-resources\"\n    }}>{`Inspiration Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://norvig.com/lispy.html\"\n        }}>{`https://norvig.com/lispy.html`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://eloquentjavascript.net/12_language.html\"\n        }}>{`https://eloquentjavascript.net/12_language.html`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/jamiebuilds/the-super-tiny-compiler\"\n        }}>{`https://github.com/jamiebuilds/the-super-tiny-compiler`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"stages-of-a-compiler\"\n    }}>{`Stages of a Compiler`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Parsing: Take source code and turn it into representation of that code.`}</li>\n      <li parentName=\"ol\">{`Transformation: Take source code and transforms it to do whatever the compiler wants it to do`}</li>\n      <li parentName=\"ol\">{`Generation: Take the transformed representation and turns it into a new string of code`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"parsing\"\n    }}>{`Parsing`}</h2>\n    <p>{`Consists of `}<inlineCode parentName=\"p\">{`Lexical analysis`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Syntactic analysis`}</inlineCode>{`.`}</p>\n    <p>{`Note: Lexing = Lexical analysis.`}</p>\n    <p>{`Basically: take big string of code and turn it into `}<inlineCode parentName=\"p\">{`tokens`}</inlineCode>{` where a `}<inlineCode parentName=\"p\">{`token`}</inlineCode>{` is a small unit of the language.`}</p>\n    <p>{`How might a lexer work?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Accept input string of code`}</li>\n      <li parentName=\"ul\">{`Create var for tracking position (like cursor)`}</li>\n      <li parentName=\"ul\">{`Make an array of tokens`}</li>\n      <li parentName=\"ul\">{`Write a while loop that iterates through the source code input`}</li>\n      <li parentName=\"ul\">{`Check each token, see if matches type`}</li>\n      <li parentName=\"ul\">{`Add it to the array of token`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"using-helpers\"\n    }}>{`Using helpers`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const isWhitespace = character => /\\\\s/.test(character);\nconst isNumber = character => /[0-9]/.test(character);\nconst isOperator = character => /[\\\\+\\\\-\\\\*\\\\/]/.test(character);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"turning-strings-to-tokens\"\n    }}>{`Turning strings to tokens`}</h3>\n    <p>{`Note that based on our syntax, we may need to collect multiple characters into a single token ie `}<inlineCode parentName=\"p\">{`22 + 23`}</inlineCode>{` (which tokenizes as `}<inlineCode parentName=\"p\">{`['2','2','+','2','3']`}</inlineCode>{`)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const tokenize = input => {\n  let cursor = 0;\n  const tokens = [];\n\n  while (cursor < input.length) {\n    // Logic here\n    // Example for number helper\n    if (isNumber(character))\n  }\n\n  return tokens;\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}