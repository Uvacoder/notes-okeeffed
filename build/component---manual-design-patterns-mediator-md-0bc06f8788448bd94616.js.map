{"version":3,"sources":["webpack:///../manual/Design-Patterns/Mediator.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,YADR,YAGA,wIACA,sNACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIC,WAAW,MAAf,yDAA8E,0BAAYA,WAAW,MAAvB,aAA9E,aACA,kBAAIA,WAAW,MAAf,gCAAqD,0BAAYA,WAAW,MAAvB,YAArD,sBAAiI,0BAAYA,WAAW,MAAvB,cAAjI,2CACA,kBAAIA,WAAW,MAAf,6DAAkF,0BAAYA,WAAW,MAAvB,cAAlF,gBAA0J,0BAAYA,WAAW,MAAvB,YAA1J,KACA,kBAAIA,WAAW,MAAf,qCAA0D,0BAAYA,WAAW,MAAvB,aAA1D,8DAA+K,0BAAYA,WAAW,MAAvB,YAA/K,MAEF,iBAAQ,CACN,GAAM,WADR,WAGA,wDAAuC,0BAAYA,WAAW,KAAvB,oBAAvC,6BAAiI,0BAAYA,WAAW,KAAvB,gBAAjI,mCAA6N,0BAAYA,WAAW,KAAvB,eAA7N,gBAAqS,0BAAYA,WAAW,KAAvB,aAArS,KACA,kFAAiE,0BAAYA,WAAW,KAAvB,oBAAjE,2BAAyJ,0BAAYA,WAAW,KAAvB,oBAAzJ,QAA8N,0BAAYA,WAAW,KAAvB,qBAA9N,4BAAwT,0BAAYA,WAAW,KAAvB,qBAAxT,4BAAkZ,0BAAYA,WAAW,KAAvB,oBAAlZ,oBACA,qCAAoB,0BAAYA,WAAW,KAAvB,eAApB,iCAA6G,0BAAYA,WAAW,KAAvB,aAA7G,+BAAkM,0BAAYA,WAAW,KAAvB,qBAAlM,aACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8wDA4EL,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,+FADQ,qB,2MAQ1BJ,EAAWK,gBAAiB","file":"component---manual-design-patterns-mediator-md-0bc06f8788448bd94616.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mediator\"\n    }}>{`Mediator`}</h1>\n    <p>{`Mediator is a behavioural design pattern which helps when there are many objects communicating with each other.`}</p>\n    <p>{`The Mediator itself is an object that encapsulates how one or more objects interact with each other. It controls how these object communication and resticts dependencies required to manage.`}</p>\n    <h2 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Mediator: Defines interface for communication between `}<inlineCode parentName=\"li\">{`Colleague`}</inlineCode>{` objects.`}</li>\n      <li parentName=\"ul\">{`ConcreteMediator: Implements `}<inlineCode parentName=\"li\">{`Mediator`}</inlineCode>{`, has awareness of `}<inlineCode parentName=\"li\">{`colleagues`}</inlineCode>{` and facilitates communication between.`}</li>\n      <li parentName=\"ul\">{`Colleague: Defines interface for communication with other `}<inlineCode parentName=\"li\">{`Colleagues`}</inlineCode>{` through the `}<inlineCode parentName=\"li\">{`Mediator`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`ConcreteColleague: Implements the `}<inlineCode parentName=\"li\">{`Colleague`}</inlineCode>{` interface an communicates to other colleagues through its `}<inlineCode parentName=\"li\">{`Mediator`}</inlineCode>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`In this example, we will have a `}<inlineCode parentName=\"p\">{`ConcreteMediator`}</inlineCode>{` that will ensure certain `}<inlineCode parentName=\"p\">{`Participants`}</inlineCode>{` receive a message based on the `}<inlineCode parentName=\"p\">{`Participant`}</inlineCode>{` sending the `}<inlineCode parentName=\"p\">{`Broadcast`}</inlineCode>{`.`}</p>\n    <p>{`We will use the mediator to ensure messages sent from the `}<inlineCode parentName=\"p\">{`FirstParticipant`}</inlineCode>{` is broadcasted to both `}<inlineCode parentName=\"p\">{`FirstParticipant`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`SecondParticipant`}</inlineCode>{` while messages from the `}<inlineCode parentName=\"p\">{`SecondParticipant`}</inlineCode>{` are only reached by the `}<inlineCode parentName=\"p\">{`FirstPartiicpant`}</inlineCode>{` and not itself.`}</p>\n    <p>{`The abstract `}<inlineCode parentName=\"p\">{`Participant`}</inlineCode>{` class in this example is the `}<inlineCode parentName=\"p\">{`Colleague`}</inlineCode>{` and the subclasses are the `}<inlineCode parentName=\"p\">{`ConcreteColleague`}</inlineCode>{` classes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface Mediator {\n  broadcast(msg: String, sender: Participant): void;\n}\n\nclass ConcreteMediator implements Mediator {\n  public firstParticipant: Participant;\n  public secondParticipant: Participant;\n\n  broadcast(msg: String, sender: Participant): void {\n    if (sender === this.firstParticipant) {\n      this.firstParticipant.receiveMsg(msg);\n      this.secondParticipant.receiveMsg(msg);\n    }\n\n    if (sender === this.secondParticipant) {\n      this.firstParticipant.receiveMsg(msg);\n    }\n  }\n}\n\nabstract class Participant {\n  public mediator: Mediator;\n\n  constructor(mediator: Mediator) {\n    this.mediator = mediator;\n  }\n\n  broadcast(msg: String): void {\n    this.mediator.broadcast(msg, this);\n  }\n\n  receiveMsg(msg: String): void {\n    console.log('recieveMsg:', msg);\n  }\n}\n\nclass FirstParticipant extends Participant {\n  constructor(mediator: Mediator) {\n    super(mediator);\n  }\n\n  broadcast(msg: String) {\n    console.log('First participant customized logic');\n    super.broadcast(msg);\n  }\n}\n\nclass SecondParticipant extends Participant {\n  constructor(mediator: Mediator) {\n    super(mediator);\n  }\n\n  broadcast(msg: String) {\n    console.log('Second participant customized logic');\n    super.broadcast(msg);\n  }\n}\n\n(function main() {\n  const mediator = new ConcreteMediator();\n  const firstParticipant = new FirstParticipant(mediator);\n  const secondParticipant = new SecondParticipant(mediator);\n\n  mediator.firstParticipant = firstParticipant;\n  mediator.secondParticipant = secondParticipant;\n\n  firstParticipant.broadcast(\n    'FirstParticipant sends message to FirstParticipant, SecondParticipant'\n  );\n  secondParticipant.broadcast(\n    'SecondParticipant sends message to FirstParticipant'\n  );\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.infoworld.com/article/3204528/how-to-use-the-mediator-design-pattern-in-c.html\"\n        }}>{`Mediator in C#`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}