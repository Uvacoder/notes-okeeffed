{"version":3,"sources":["webpack:///../manual/Design-Patterns/Composite-Pattern.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,6NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,4BAAW,0BAAYC,WAAW,KAAvB,qBAAX,yFACA,sBACE,kBAAIA,WAAW,MAAf,4GACA,kBAAIA,WAAW,MAAf,mEAEF,2EACA,sBACE,kBAAIA,WAAW,MAAf,aAAkC,0BAAYA,WAAW,MAAvB,aAAlC,0EACA,kBAAIA,WAAW,MAAf,cAAmC,0BAAYA,WAAW,MAAvB,QAAnC,0BAA+G,0BAAYA,WAAW,MAAvB,aAA/G,4BAAkM,0BAAYA,WAAW,MAAvB,aAAlM,yDAEF,0DAAyC,0BAAYA,WAAW,KAAvB,aAAzC,uBAAsH,0BAAYA,WAAW,KAAvB,QAAtH,QAA+K,0BAAYA,WAAW,KAAvB,aAA/K,uBACA,qBAAG,0BAAYA,WAAW,KAAvB,QAAH,4CAAgG,0BAAYA,WAAW,KAAvB,aAAhG,4KACA,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,87DAmFL,iBAAQ,CACN,GAAM,wBADR,wBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,srDAkEL,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oDADQ,0B,oNAQ1BJ,EAAWK,gBAAiB","file":"component---manual-design-patterns-composite-pattern-md-b81fead56af03c54b7d3.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"composite-pattern\"\n    }}>{`Composite Pattern`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Composite Pattern`}</inlineCode>{` is a Gang Of Four structural Design Pattern that helps solve the following problems:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A part-whole hierarchy should be represented so that clients can treat part and whole objects uniformly.`}</li>\n      <li parentName=\"ol\">{`A part-whole hierarcy should be represented as tree structure.`}</li>\n    </ol>\n    <p>{`The Composite pattern will describe the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A unified `}<inlineCode parentName=\"li\">{`Component`}</inlineCode>{` interface for both part (Leaf) objects and whole (Composite) objects.`}</li>\n      <li parentName=\"ul\">{`Individual `}<inlineCode parentName=\"li\">{`Leaf`}</inlineCode>{` objects implement the `}<inlineCode parentName=\"li\">{`Component`}</inlineCode>{` interface directly, and `}<inlineCode parentName=\"li\">{`Composite`}</inlineCode>{` objects forward requests to their child components.`}</li>\n    </ul>\n    <p>{`Clients can then work through the `}<inlineCode parentName=\"p\">{`Component`}</inlineCode>{` interface to treat `}<inlineCode parentName=\"p\">{`Leaf`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Composite`}</inlineCode>{` objects uniformly.`}</p>\n    <p><inlineCode parentName=\"p\">{`Leaf`}</inlineCode>{` objects perform a request directly, and `}<inlineCode parentName=\"p\">{`Composite`}</inlineCode>{` objects forward the request to their child components recursively downwards the tree structure. This makes client classes easier to implement, change, test, and reuse.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface ArmyObject {\n  name: String;\n  operate(): void;\n}\n\nclass Team implements ArmyObject {\n  name: String;\n  private _soldiers: ArmyObject[];\n\n  constructor(name: String) {\n    this.name = name;\n    this._soldiers = [];\n  }\n\n  operate(): void {\n    console.log(\\`Team: \\${this.name} operates\\`);\n    this._soldiers.map((soldier: ArmyObject) => {\n      soldier.operate();\n    });\n  }\n\n  addSoldier(newSoldier: ArmyObject) {\n    const soldiers = this._soldiers.filter((soldier: ArmyObject, index) => {\n      return soldier.name === newSoldier.name;\n    });\n    if (soldiers.length < 1) {\n      console.log(\\`Soldier: \\${newSoldier.name} comes in \\${this.name}\\`);\n      this._soldiers.push(newSoldier);\n    } else {\n      console.log('The soldier is already in the team');\n    }\n  }\n\n  soldierGone(deadSoldier: ArmyObject) {\n    const deads = this._soldiers.map((soldier: ArmyObject, index) => {\n      if (soldier.name === deadSoldier.name) {\n        return index;\n      }\n    });\n    if (deads.length > 0) {\n      console.log(\\`Soldier: \\${deadSoldier.name} died in the fight\\`);\n      this._soldiers.slice(deads[0], 1);\n    } else {\n      console.log('No one dies');\n    }\n  }\n}\n\nclass Soldier implements ArmyObject {\n  name: String;\n\n  constructor(name: String) {\n    this.name = name;\n  }\n\n  operate() {\n    console.log(\\`Soldier: \\${this.name} soldier operates\\`);\n  }\n}\n\n(function main() {\n  const team = new Team('Seal Team 6');\n  const specialSquad = new Team('Seal Team 6 - Special Squad');\n\n  const soldierJoe = new Soldier('Joe');\n  const soldierJames = new Soldier('James');\n  const soldierRoy = new Soldier('Roy');\n  team.addSoldier(soldierJoe);\n  team.addSoldier(soldierJames);\n  team.addSoldier(soldierRoy);\n\n  const specialForceTommy = new Soldier('Tommy');\n\n  specialSquad.addSoldier(specialForceTommy);\n\n  team.operate();\n  specialSquad.operate();\n\n  team.soldierGone(soldierJames);\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"java-graphic-example\"\n    }}>{`Java Graphic Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import java.util.ArrayList;\n\n/** \"Component\" */\ninterface Graphic {\n    //Prints the graphic.\n    public void print();\n}\n\n/** \"Composite\" */\nclass CompositeGraphic implements Graphic {\n    //Collection of child graphics.\n    private final ArrayList<Graphic> childGraphics = new ArrayList<>();\n\n    //Adds the graphic to the composition.\n    public void add(Graphic graphic) {\n        childGraphics.add(graphic);\n    }\n\n    //Prints the graphic.\n    @Override\n    public void print() {\n        for (Graphic graphic : childGraphics) {\n            graphic.print();  //Delegation\n        }\n    }\n}\n\n/** \"Leaf\" */\nclass Ellipse implements Graphic {\n    //Prints the graphic.\n    @Override\n    public void print() {\n        System.out.println(\"Ellipse\");\n    }\n}\n\n/** Client */\npublic class CompositeDemo {\n    public static void main(String[] args) {\n        //Initialize four ellipses\n        Ellipse ellipse1 = new Ellipse();\n        Ellipse ellipse2 = new Ellipse();\n        Ellipse ellipse3 = new Ellipse();\n        Ellipse ellipse4 = new Ellipse();\n\n        //Creates two composites containing the ellipses\n        CompositeGraphic graphic2 = new CompositeGraphic();\n        graphic2.add(ellipse1);\n        graphic2.add(ellipse2);\n        graphic2.add(ellipse3);\n\n        CompositeGraphic graphic3 = new CompositeGraphic();\n        graphic3.add(ellipse4);\n\n        //Create another graphics that contains two graphics\n        CompositeGraphic graphic1 = new CompositeGraphic();\n        graphic1.add(graphic2);\n        graphic1.add(graphic3);\n\n        //Prints the complete graphic (Four times the string \"Ellipse\").\n        graphic1.print();\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Composite_pattern\"\n        }}>{`Composite Wikipedia`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}