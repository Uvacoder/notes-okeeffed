{"version":3,"sources":["webpack:///../manual/Principles/Typography.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,iNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,sHACA,iBAAQ,CACN,GAAM,eADR,eAGA,sLACA,4JACA,uEAAsD,mBAAGC,WAAW,KAAQ,CACxE,KAAQ,oFAD0C,kCAGtD,iBAAQ,CACN,GAAM,YADR,YAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,gBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,oBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,yBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,oCAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,+BAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,2CAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,6BAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,kCAMN,iBAAQ,CACN,GAAM,YADR,YAGA,kJACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,4iEAkCL,6EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,qlDAgDL,iBAAQ,CACN,GAAM,4BADR,4BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,m2BAsCL,iBAAQ,CACN,GAAM,8CADR,gDAGA,4EAA2D,0BAAYA,WAAW,KAAvB,gBAA3D,KACA,4LACA,qBAAG,mBAAGA,WAAW,KAAQ,CACrB,KAAQ,oFADT,mDAGH,iBAAQ,CACN,GAAM,6BADR,6BAGA,4EAA2D,0BAAYA,WAAW,KAAvB,gBAA3D,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mP,wMAkBTJ,EAAWK,gBAAiB","file":"component---manual-principles-typography-md-6cb2e642c39b31e90a30.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fonts-cli\"\n    }}>{`Fonts CLI`}</h1>\n    <p>{`This tool is a wrapper to help download/rename fonts to fit with the font naming conventions.`}</p>\n    <h2 {...{\n      \"id\": \"conventions\"\n    }}>{`Conventions`}</h2>\n    <p>{`For naming files, ensure that names are in lowercase format and that the numerals are replaced with common weight names (the renaming can be done with code).`}</p>\n    <p>{`We keep things lower case for purposes of serving on web, and replacing the numerals with the common font name is just an addition.`}</p>\n    <p>{`To see the conventional name for font weights, `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e\"\n      }}>{`Mozilla has a reference here.`}</a></p>\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Example name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`After renaming`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SourceSansPro-200.ttf`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`source-sans-pro-extra-light.ttf`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SourceSansPro-200italic.ttf`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`source-sans-pro-extra-light-italic.ttf`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SourceSansPro-regular.ttf`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`source-sans-pro-regular.ttf`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"renaming\"\n    }}>{`Renaming`}</h2>\n    <p>{`Running the rename function will find the path of the fonts and return it in the condition we require for the convention.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const oldNames = [\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-200.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-200italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-300.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-300italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-600.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-600italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-700.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-700italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-900.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-900italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-regular.ttf'\n];\n\n/*\n    // ! after renaming oldNames through function\n\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-extra-light.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-extra-light-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-light.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-light-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-semi-bold.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-semi-bold-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-bold.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-bold-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-black.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-black-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-regular.ttf\n*/\n`}</code></pre>\n    <p>{`You can use something like the following to do this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const fs = require('fs-extra');\nconst cwd = process.cwd();\nconst recursive = require('recursive-readdir');\nconst kebabCase = require('lodash.kebabcase');\n\n/**\n * Replace names of fonts found within directory\n * with naming convention.\n *\n */\nconst updateFontNames = async() => {\n    /**\n     * ! Replace numeral with comment name - hack job.\n     *\n     * @param {string} name Name of the font to update\n     */\n    const commentWeightName = name => {\n        name = name.replace('100', 'thin');\n        name = name.replace('200', 'extra-light');\n        name = name.replace('300', 'light');\n        name = name.replace('400', 'normal');\n        name = name.replace('500', 'medium');\n        name = name.replace('600', 'semi-bold');\n        name = name.replace('700', 'bold');\n        name = name.replace('800', 'extra-bold');\n        name = name.replace('900', 'black');\n        return name;\n    }\n\n    const fontFiles = await recursive(cwd, ['node_modules', '!*.ttf']);\n    for (const fontPath of fontFiles) {\n        try {\n            const fontDirArr = fontPath.split('/');\n            const fontNameFull = fontDirArr.pop();\n            const font = fontNameFull.replace('.ttf', '');\n            const fontDir = fontDirArr.join('/');\n            let kebabFontName = kebabCase(font);\n            const newFontName = commentWeightName(kebabFontName);\n            const outputFilePath = fontDir + '/' + newFontName + '.ttf';\n            fs.moveSync(fontPath, outputFilePath, {overwrite: true});\n        } catch (err) {\n            console.error(err);\n        }\n    }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"convention-usage-for-web\"\n    }}>{`Convention usage for Web`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`/* open sans - light */\n@font-face {\n    font-family: 'open-sans-regular';\n    font-style: normal;\n    font-weight: 300;\n    // local() just checks for local files first\n    src: local('OpenSans Regular'), local('OpenSans-Regular'),\n        url('/path/to/fonts/open-sans-regular.ttf') format('truetype'); /* Safari, Android, iOS */\n}\n\n// Font mixins\n@mixin f-opensans-regular {\n    font: {\n        family: 'open-sans-regular', sans-serif;\n    }\n}\n\n// optional - flexible usage\n@mixin f-primary-regular {\n    // option a)\n    @include f-opensans-regular;\n    // option b) - don't include the above mixin for this\n    font: {\n        family: 'open-sans-regular', sans-serif;\n    }\n}\n\n// usage for standard base class\np,\nli {\n    @include f-primary-regular;\n    font-size: 1.5rem;\n    line-height: 1.4;\n    margin-bottom: 10px;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"convention-usage-for-react-native-not-expo\"\n    }}>{`Convention usage for React Native (not Expo)`}</h2>\n    <p>{`For React Native, fonts MUST be kept at the root in `}<inlineCode parentName=\"p\">{`assets/fonts`}</inlineCode>{`.`}</p>\n    <p>{`Using the convention here can be a little different. You need to use the full name of the font which can be found on Font Book (even when refencing the font file).`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e\"\n      }}>{`Check here for more information on what to do.`}</a></p>\n    <h2 {...{\n      \"id\": \"convention-usage-for-expo\"\n    }}>{`Convention usage for Expo`}</h2>\n    <p>{`For React Native, fonts MUST be kept at the root in `}<inlineCode parentName=\"p\">{`assets/fonts`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Font } from 'expo';\n\nexport default class App extends React.Component {\n  componentDidMount() {\n    Font.loadAsync({\n      'open-sans-regular': require('./assets/fonts/open-sans-regular.ttf'),\n    });\n  }\n\n  // ...\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}