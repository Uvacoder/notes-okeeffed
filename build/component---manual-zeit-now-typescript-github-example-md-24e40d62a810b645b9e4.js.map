{"version":3,"sources":["webpack:///../manual/Zeit-Now/Typescript-Github-Example.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,8NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,8BADR,+BAGA,sJACA,iBAAQ,CACN,GAAM,cADR,cAGA,yDAAwC,0BAAYC,WAAW,KAAvB,gBAAxC,KACA,uCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,8OAWL,iBAAQ,CACN,GAAM,aADR,aAGA,6CAA4B,0BAAYA,WAAW,KAAvB,kBAA5B,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,23CAwDL,iBAAQ,CACN,GAAM,YADR,YAGA,8DAA6C,mBAAGA,WAAW,KAAQ,CAC/D,KAAQ,oFADiC,yBAA7C,MAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qYAmBL,iBAAQ,CACN,GAAM,cADR,cAGA,2FAA0E,0BAAYA,WAAW,KAAvB,cAA1E,UACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,0BAKL,iBAAQ,CACN,GAAM,UADR,UAGA,+BAAc,0BAAYA,WAAW,KAAvB,QAAd,2IACA,mDAAkC,mBAAGA,WAAW,KAAQ,CACpD,KAAQ,qHADsB,4CAAlC,KAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,+BAIL,iBAAQ,CACN,GAAM,WADR,YAGA,oCAAmB,0BAAYA,WAAW,KAAvB,YAAnB,uCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,6GAUL,iBAAQ,CACN,GAAM,aADR,aAGA,6DAA4C,0BAAYA,WAAW,KAAvB,aAA5C,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+BAML,iBAAQ,CACN,GAAM,qBADR,qBAGA,wDAAuC,0BAAYA,WAAW,KAAvB,WAAvC,2CACA,8DAA6C,0BAAYA,WAAW,KAAvB,qCAA7C,mEACA,oDAAmC,mBAAGA,WAAW,KAAQ,CACrD,KAAQ,gCADuB,UAAnC,gBAEoC,0BAAYA,WAAW,KAAvB,iFAFpC,wEAEsO,0BAAYA,WAAW,KAAvB,eAFtO,0BAEwT,0BAAYA,WAAW,KAAvB,aAFxT,8BAE4Y,0BAAYA,WAAW,KAAvB,cAF5Y,sBAGA,gCACA,iBAAQ,CACN,GAAM,cADR,cAGA,+DAA8C,0BAAYA,WAAW,KAAvB,OAA9C,KACA,iBAAQ,CACN,GAAM,kBADR,kBAGA,0I,qNAKJJ,EAAWK,gBAAiB","file":"component---manual-zeit-now-typescript-github-example-md-24e40d62a810b645b9e4.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"typescript--github-example\"\n    }}>{`TypeScript + Github Example`}</h1>\n    <p>{`In this example, we are going to create a Zeit Now project that we can use to update files on a repo based on what is passed.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up\"\n    }}>{`Setting up`}</h2>\n    <p>{`Initialise a project in a folder `}<inlineCode parentName=\"p\">{`yarn init -y`}</inlineCode>{`.`}</p>\n    <p>{`Prerequisites:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mkdir project\ncd project\nyarn init -y # or npm\nnpm i -g now # or yarn\nmkdir api\ntouch api/example.ts tsconfig.json now.json .env .gitignore test.json\nyarn add --dev @now/node @types/js-base64\nyarn add @octokit/rest js-base64\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api-setup\"\n    }}>{`API Setup`}</h2>\n    <p>{`Add the following to `}<inlineCode parentName=\"p\">{`api/example.ts`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { NowRequest, NowResponse } from '@now/node';\nimport Octokit from '@octokit/rest';\nimport { Base64 } from 'js-base64';\n\nconst gh = new Octokit({\n  auth: process.env.GITHUB_TOKEN,\n});\nconst owner = 'your_github_user_name';\n\n// some helper functions for creating a repo\n// and writing a file - we won't update in this example\nconst createOrUpdateFile = async (\n  repo: string,\n  content: string,\n  sha?: string,\n) => {\n  try {\n    return gh.repos.createOrUpdateFile({\n      owner,\n      repo,\n      sha,\n      path: 'hello.json',\n      message: 'Updating the Hello JSON file',\n      content: Base64.encode(JSON.stringify(content)),\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nconst createRepo = async (repo: string) => {\n  try {\n    await gh.repos.createForAuthenticatedUser({\n      name: repo,\n      private: true,\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nexport default async (_req: NowRequest, res: NowResponse) => {\n  const { repoName, content } = _req.body;\n  const repo = await fetchRepo(repoName);\n  await createRepo(repoName);\n  const sha = upFile ? upFile.data.sha : undefined;\n  const updatedJson = await createOrUpdateFile(repoName, content, sha);\n  res.status(200).send({ success: true });\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tsconfig\"\n    }}>{`TSConfig`}</h2>\n    <p>{`Add this is tsconfig.json (taken from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/zeit/now-examples/blob/master/gatsby-functions/tsconfig.json\"\n      }}>{`this Zeit Now example`}</a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"es2015\"],\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"strictBindCallApply\": true,\n    \"strictPropertyInitialization\": true,\n    \"noImplicitThis\": true,\n    \"alwaysStrict\": true,\n    \"esModuleInterop\": true\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"git-ignore\"\n    }}>{`Git Ignore`}</h2>\n    <p>{`Ignore npm modules + .env where we will store the local key in our `}<inlineCode parentName=\"p\">{`.gitignore`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`node_modules/\n.env\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dotenv\"\n    }}>{`Dotenv`}</h2>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file, add a personal GitHub token that we will use for authentication. This token is required for programmatic operations via the API.`}</p>\n    <p>{`If you need to create one, `}<a parentName=\"p\" {...{\n        \"href\": \"https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line\"\n      }}>{`follow this article from the GitHub site`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`GITHUB_TOKEN=TOKEN_VALUE\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nowjson\"\n    }}>{`Now.json`}</h2>\n    <p>{`We will use `}<inlineCode parentName=\"p\">{`now.json`}</inlineCode>{` to help define some env variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-github\"\n      }}>{`{\n  \"name\": \"project-name\",\n  \"version\": 2,\n  \"env\": {\n    \"GITHUB_TOKEN\": \"@github-token\"\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"test-json\"\n    }}>{`Test JSON`}</h2>\n    <p>{`For what we will upload, add this to `}<inlineCode parentName=\"p\">{`test.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"hello\": \"world\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"local-development\"\n    }}>{`Local Development`}</h2>\n    <p>{`Now we can develop locally. Run `}<inlineCode parentName=\"p\">{`now dev`}</inlineCode>{` to get localhost running on port 3000.`}</p>\n    <p>{`Once the port is running, we can ping `}<inlineCode parentName=\"p\">{`http://localhost:3000/api/example`}</inlineCode>{` and pass some params to generate a new repo and add some JSON.`}</p>\n    <p>{`In this example, I am using `}<a parentName=\"p\" {...{\n        \"href\": \"https://httpie.org/doc#json\"\n      }}>{`HTTPie`}</a>{` and running `}<inlineCode parentName=\"p\">{`http POST localhost:3000/api/example repoName=temp-zeit-a content:=@test.json`}</inlineCode>{` on the command line will lead to the creation of a new private repo `}<inlineCode parentName=\"p\">{`temp-zeit-a`}</inlineCode>{` with content from the `}<inlineCode parentName=\"p\">{`test.json`}</inlineCode>{` local file saved into the `}<inlineCode parentName=\"p\">{`hello.json`}</inlineCode>{` file on the repo.`}</p>\n    <p>{`Hooray!`}</p>\n    <h2 {...{\n      \"id\": \"production\"\n    }}>{`Production`}</h2>\n    <p>{`To deploy to production, we simply run `}<inlineCode parentName=\"p\">{`now`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"moving-forward\"\n    }}>{`Moving forward`}</h2>\n    <p>{`Updating the file on Github requires the SHA, so use the other Octokit methods to help with all of these issues.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}