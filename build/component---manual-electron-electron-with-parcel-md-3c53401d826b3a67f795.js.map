{"version":3,"sources":["webpack:///../manual/Electron/Electron-With-Parcel.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,yNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qCADR,sCAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mHADQ,gBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,yCADQ,sBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,+CADQ,2BAItB,iBAAQ,CACN,GAAM,QADR,SAGA,6CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oWAUL,uCAAsB,0BAAYA,WAAW,KAAvB,cAAtB,sBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,meAqBL,gDAA+B,0BAAYA,WAAW,KAAvB,OAA/B,YAA2F,0BAAYA,WAAW,KAAvB,YAA3F,MAAsJ,0BAAYA,WAAW,KAAvB,UAAtJ,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6XAwBL,+BAAc,0BAAYA,WAAW,KAAvB,YAAd,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iHAOL,uCAAsB,0BAAYA,WAAW,KAAvB,gBAAtB,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,m3BA+BL,4BAAW,0BAAYA,WAAW,KAAvB,eAAX,OAA0E,0BAAYA,WAAW,KAAvB,OAA1E,eACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,gvBAwCL,yEAAwD,0BAAYA,WAAW,KAAvB,iBAAxD,UACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,8EASL,6CAA4B,0BAAYA,WAAW,KAAvB,cAA5B,wBAA2G,0BAAYA,WAAW,KAAvB,cAA3G,M,gNAKJJ,EAAWK,gBAAiB","file":"component---manual-electron-electron-with-parcel-md-3c53401d826b3a67f795.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"production-ready-electron--parcel\"\n    }}>{`Production-Ready Electron + Parcel`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://medium.com/@yogeshkumarr/production-ready-electron-app-using-react-and-parcel-web-bundler-74dcda63f148\"\n        }}>{`Medium post`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://parceljs.org/typeScript.html\"\n        }}>{`Parcel TypeScript`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.electronjs.org/docs/api/dialog\"\n        }}>{`Electron - Dialog API`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`First, init project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`mkdir hello-parcel-electron\ncd hello-parcel-electron\nyarn init -y\nyarn add react react-dom electron-is-dev\nyarn add -D concurrently cross-env electron electron-builder parcel-bundler wait-on typescript\n# Babel\nyarn add -D babel-core babel-plugin-transform-object-rest-spread babel-plugin-transform-react-jsx babel-preset-env babel-preset-react\n`}</code></pre>\n    <p>{`Second, create `}<inlineCode parentName=\"p\">{`index.html`}</inlineCode>{` file in root dir:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Electron React Parcel</title>\n    <link\n      rel=\"shortcut icon\"\n      href=\"./src/assets/logo.ico\"\n      type=\"image/x-icon\"\n    />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script src=\"./src/index.js\"></script>\n  </body>\n</html>\n`}</code></pre>\n    <p>{`Third, create assets in `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{` dir for `}<inlineCode parentName=\"p\">{`index.js`}</inlineCode>{` + `}<inlineCode parentName=\"p\">{`App.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// App.js\n\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <WhateverYouWant />\n      </div>\n    );\n  }\n}\nexport default App;\n`}</code></pre>\n    <p>{`Create `}<inlineCode parentName=\"p\">{`.babelrc`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  \"presets\": [\"env\", \"react\"],\n  \"plugins\": [\"transform-object-rest-spread\", \"transform-react-jsx\"]\n}\n`}</code></pre>\n    <p>{`Add scripts to `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"homepage\": \"./\",\n  \"main\": \"src/electron.js\",\n  \"scripts\": {\n    \"react-start\": \"parcel -p 3000 index.html --out-dir build\",\n    \"react-build\": \"parcel build index.html --out-dir build --public-url ./\",\n    \"start\": \"concurrently \\\\\"cross-env BROWSER=none yarn react-start\\\\\" \\\\\"wait-on http://localhost:3000 && electron . \\\\\"\",\n    \"electron-build\": \"electron-builder -mwl\",\n    \"build\": \"yarn clean-build && yarn react-build && yarn electron-build\"\n  },\n  \"build\": {\n    \"appId\": \"com.dennisokeeffe\",\n    \"files\": [\"src/electron.js\", \"src/assets/*\", \"build/**/*\"],\n    \"mac\": {\n      \"target\": \"dmg\",\n      \"icon\": \"src/assets/logo.png\"\n    },\n    \"win\": {\n      \"target\": \"nsis\",\n      \"icon\": \"src/assets/logo.png\"\n    },\n    \"linux\": {\n      \"target\": \"deb\",\n      \"icon\": \"src/assets/logo.png\",\n      \"category\": \"Development\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Add `}<inlineCode parentName=\"p\">{`electron.js`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{` directory:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const electron = require('electron');\nconst app = electron.app;\n\nconst BrowserWindow = electron.BrowserWindow;\n\nconst path = require('path');\nconst isDev = require('electron-is-dev');\n\nlet mainWindow;\n\nfunction createWindow() {\n  mainWindow = new BrowserWindow({\n    width: 900,\n    height: 680,\n  });\n\n  mainWindow.loadURL(\n    isDev\n      ? 'http://localhost:3000'\n      : \\`file://\\${path.join(__dirname, '../build/index.html')}\\`,\n  );\n  mainWindow.on('closed', () => (mainWindow = null));\n}\n\napp.on('ready', createWindow);\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n`}</code></pre>\n    <p>{`In order to update to TypeScript, simply add the `}<inlineCode parentName=\"p\">{`tsconfig.json`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react\"\n  }\n}\n`}</code></pre>\n    <p>{`To start now, we run `}<inlineCode parentName=\"p\">{`yarn start`}</inlineCode>{` and to build we run `}<inlineCode parentName=\"p\">{`yarn build`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}