{"version":3,"sources":["webpack:///../manual/Kafka/Hello-Kafka.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,6MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8HADQ,+BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0CADQ,sBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iDADQ,kCAItB,iBAAQ,CACN,GAAM,+BADR,+BAGA,4BAAW,0BAAYA,WAAW,KAAvB,8DAAX,kCACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,qFACA,iBAAQ,CACN,GAAM,oBADR,oBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,iIASL,iBAAQ,CACN,GAAM,iDADR,kDAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,wwBAgBL,qCAAoB,0BAAYA,WAAW,KAAvB,kBAApB,oBAAmG,0BAAYA,WAAW,KAAvB,cAAnG,gCACA,6MACA,iBAAQ,CACN,GAAM,cADR,cAGA,oFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,uEAML,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+gBAoBL,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iRAaL,iBAAQ,CACN,GAAM,yBADR,yBAGA,mDAAkC,0BAAYA,WAAW,KAAvB,UAAlC,QAA6F,0BAAYA,WAAW,KAAvB,UAA7F,sCACA,iDAAgC,0BAAYA,WAAW,KAAvB,oBAAhC,4EAAyK,0BAAYA,WAAW,KAAvB,oBAAzK,oCACA,gG,oMAKJJ,EAAWK,gBAAiB","file":"component---manual-kafka-hello-kafka-md-3a733afc07323f01018a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"hello-kafka\"\n    }}>{`Hello Kafka`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://medium.com/big-data-engineering/hello-kafka-world-the-complete-guide-to-kafka-with-docker-and-python-f788e2588cfc\"\n        }}>{`Getting started with Kafka`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/SOHU-Co/kafka-node\"\n        }}>{`Kafka Node Github`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/wurstmeister/kafka-docker\"\n        }}>{`Original Kafka Docker Github`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"getting-started-with-nodejs\"\n    }}>{`Getting Started with Nodejs`}</h2>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`git clone https://github.com/wurstmeister/kafka-docker.git`}</inlineCode>{` to clone wurstmeister's repo.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`Make sure you have both Docker and Docker Compose installed.`}</p>\n    <h2 {...{\n      \"id\": \"docker-composing\"\n    }}>{`Docker Composing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker-compose up -d\ndocker-compose scale kafka=3\n# to see processes\ndocker-compose ps\n# teardown\ndocker-compose stop\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"consumeproducing-from-within-docker-container\"\n    }}>{`Consume/Producing from within Docker Container`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# from your terminal run:\ndocker exec -i -t -u root $(docker ps | grep docker_kafka | cut -d' ' -f1) /bin/bash\n# $(docker ps | grep docker_kafka | cut -d' ' -f1) - Will return the docker process ID of the Kafka Docker running so you can access it\n\n# create topic1 and topic2 for our examples\n$KAFKA_HOME/bin/kafka-topics.sh --create --partitions 4 --bootstrap-server localhost:9092 --topic topic1\n$KAFKA_HOME/bin/kafka-topics.sh --create --partitions 4 --bootstrap-server localhost:9092 --topic topic2\n\n# optional: create a consumer\n$KAFKA_HOME/bin/kafka-console-consumer.sh --from-beginning --bootstrap-server localhost:9092 --topic=topic1\n\n# optional: create a producer\n$KAFKA_HOME/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic=topic1\n`}</code></pre>\n    <p>{`Note: We use `}<inlineCode parentName=\"p\">{`localhost:9092`}</inlineCode>{` here instead of `}<inlineCode parentName=\"p\">{`kafka:9092`}</inlineCode>{` for our Node Kafka scripts.`}</p>\n    <p>{`When sending messages as a producer, note that we are latching onto particular partitions in the Node app and so only messages that head to a particular partition will be consumed.`}</p>\n    <h2 {...{\n      \"id\": \"node-kafka\"\n    }}>{`Node Kafka`}</h2>\n    <p>{`Start a new project and install and prep the files we need:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn init -y\nyarn add node-kafka\ntouch consumer.js producer.js\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"producer\"\n    }}>{`Producer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var kafka = require('kafka-node'),\n  Producer = kafka.Producer,\n  KeyedMessage = kafka.KeyedMessage,\n  client = new kafka.KafkaClient(),\n  producer = new Producer(client),\n  km = new KeyedMessage('key', 'message'),\n  payloads = [\n    { topic: 'topic1', messages: 'hi', partition: 0 },\n    { topic: 'topic2', messages: ['hello', 'world', km] },\n  ];\nproducer.on('ready', function() {\n  producer.send(payloads, function(err, data) {\n    console.log(data);\n  });\n});\n\nproducer.on('error', function(err) {});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"consumer\"\n    }}>{`Consumer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var kafka = require('kafka-node'),\n  Consumer = kafka.Consumer,\n  client = new kafka.KafkaClient(),\n  consumer = new Consumer(\n    client,\n    [{ topic: 'topic1', partition: 0 }, { topic: 'topic2', partition: 1 }],\n    {\n      autoCommit: false,\n    },\n  );\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"running-it-altogether\"\n    }}>{`Running it altogether`}</h2>\n    <p>{`Ensure that you've created `}<inlineCode parentName=\"p\">{`topic1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`topic2`}</inlineCode>{` from within the Docker container.`}</p>\n    <p>{`Once created, we can run `}<inlineCode parentName=\"p\">{`node consumer.js`}</inlineCode>{` in one terminal to listen for those topics on particular partitions and `}<inlineCode parentName=\"p\">{`node producer.js`}</inlineCode>{` to fire off some notifications.`}</p>\n    <p>{`All the received events on the consumer will then log to the terminal.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}