{"version":3,"sources":["webpack:///../manual/AWS/Lambda-Edge-CDK.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,+MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,kxCAoDL,uFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oVAeL,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,+CADQ,sC,sMAQ1BJ,EAAWK,gBAAiB","file":"component---manual-aws-lambda-edge-cdk-md-1cd7c51e74847ba2225b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lambda-edge-cdk\"\n    }}>{`Lambda Edge CDK`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// Origin request handler.\nconst myOriginRequestHandler = new lambdaNodejs.NodejsFunction(\n  this,\n  'OriginRequestHandler',\n  {\n    entry: 'src/lambda/myOriginRequestHandler.ts',\n    handler: 'myOriginRequestHandler',\n    runtime: lambda.Runtime.NODEJS_10_X,\n  },\n);\n\n// A numbered version to give to cloudfront\nconst myOriginRequestHandlerVersion = new lambda.Version(\n  this,\n  'OriginRequestHandlerVersion',\n  {\n    lambda: myOriginRequestHandler,\n  },\n);\n\n// A bucket to serve content from\nconst myBucket = new s3.Bucket(this, 'OriginBucket');\n\n// Origin access identity for cloudfront to access the bucket\nconst myCdnOai = new cloudfront.OriginAccessIdentity(this, 'CdnOai');\nmyBucket.grantRead(myCdnOai);\n\n// The CDN web distribution\nnew cloudfront.CloudFrontWebDistribution(this, 'Cdn', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: myBucket,\n        originAccessIdentity: myCdnOai,\n      },\n      behaviors: [\n        {\n          isDefaultBehavior: true,\n          lambdaFunctionAssociations: [\n            {\n              eventType: cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,\n              lambdaFunction: myOriginRequestHandlerVersion,\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n`}</code></pre>\n    <p>{`I believe you need to mix it in with this to get things going:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`new cdk.CfnOutput(this, 'DistributionId', {\n  value: distribution.distributionId,\n});\n\n// Route53 alias record for the CloudFront distribution\nnew route53.ARecord(this, 'SiteAliasRecord', {\n  recordName: siteDomain,\n  target: route53.RecordTarget.fromAlias(\n    new targets.CloudFrontTarget(distribution),\n  ),\n  zone,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/aws/aws-cdk/issues/6259\"\n        }}>{`AWS Issue - Docs on Lambda@edge`}</a></li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}