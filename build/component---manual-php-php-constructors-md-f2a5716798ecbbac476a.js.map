{"version":3,"sources":["webpack:///../manual/PHP/PHP-Constructors.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,oDAAmC,0BAAYC,WAAW,KAAvB,eAAnC,YACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mnC,uMAkETJ,EAAWK,gBAAiB","file":"component---manual-php-php-constructors-md-f2a5716798ecbbac476a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"php-constructors\"\n    }}>{`PHP Constructors`}</h1>\n    <p>{`The important method is the `}<inlineCode parentName=\"p\">{`__construct`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class LinkedList {\n    public $size = 0;\n    public $head;\n\n    function __construct($head = null) {\n        $this->head = $head;\n\n        if ($head != null) {\n            $this->size = 1;\n        } else {\n            $this->size = 0;\n        }\n    }\n\n    public function insertFirst($n) {\n        if ($this->head != null) {\n            $tmp = $this->head;\n            $this->head = $n;\n            $n->setNext($tmp);\n        } else {\n            $this->head = $n;\n        }\n        $this->size++;\n    }\n\n    public function getFirst() {\n        return $this->head;\n    }\n}\n\nclass Node {\n    private $data;\n    private $next;\n\n    function __construct($data = null) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n\n    public function setData($data) {\n        $this->data = $data;\n    }\n\n    public function getNext() {\n        return $this->next;\n    }\n\n    public function setNext($next) {\n        $this->next = $next;\n    }\n}\n\n$n1 = new Node(1);\n$n2 = new Node(2);\n$ll = new LinkedList($n1);\n$ll->insertFirst($n2);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}