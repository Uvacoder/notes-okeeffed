(window.webpackJsonp=window.webpackJsonp||[]).push([[370],{wbcD:function(n,e,t){"use strict";t.r(e),t.d(e,"_frontmatter",(function(){return l})),t.d(e,"default",(function(){return c}));t("1c7q"),t("abGl"),t("gZHo"),t("Fdmb"),t("Ir+3"),t("2mQt"),t("mXGw");var o=t("/FXl"),a=t("TjRS");t("aD51");function r(){return(r=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n}).apply(this,arguments)}var l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/PHP/PHP-Anon-Funcs.md"}});var s={_frontmatter:l},u=a.a;function c(n){var e=n.components,t=function(n,e){if(null==n)return{};var t,o,a={},r=Object.keys(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,["components"]);return Object(o.b)(u,r({},s,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"php-anonymous-functions"},"PHP Anonymous Functions"),Object(o.b)("p",null,"The basic gist is to use the keyword ",Object(o.b)("inlineCode",{parentName:"p"},"function()")," with a block scope."),Object(o.b)("p",null,"If you want to use variables declared by the direct parent scope, ensure you use the ",Object(o.b)("inlineCode",{parentName:"p"},"use()")," keyword. A simple example of this can be found below."),Object(o.b)("h2",{id:"simple-example"},"Simple Example"),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-php"}),"// anon.php\n\n<?php\n\nfunction helloWorld()\n{\n    $anon = function() {\n        return 'Hello, World!';\n    };\n\n    return $anon();\n}\n\nfunction sumTwoArgsPlusOne($a, $b)\n{\n    $c = 1;\n    $anon = function($a, $b) use ($c) {\n        return $a + $b + $c;\n    };\n\n    return $anon($a, $b);\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-php"}),"// anon_test.php\n\n<?php\n\nrequire \"anonymous.php\";\n\nclass AnonymousTest extends PHPUnit\\Framework\\TestCase\n{\n    public function testHelloWorld()\n    {\n        $this->assertEquals('Hello, World!', helloWorld());\n    }\n\n    public function testSum()\n    {\n        $this->assertEquals(4, sumTwoArgsPlusOne(1, 2));\n    }\n}\n")))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/PHP/PHP-Anon-Funcs.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-php-php-anon-funcs-md-684c71463bd6e951e715.js.map