{"version":3,"sources":["webpack:///../manual/Ruby/Ruby-Constructors.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,gEAA+C,0BAAYC,WAAW,KAAvB,cAA/C,YACA,iBAAQ,CACN,GAAM,QADR,SAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,22BAgEL,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sFAQL,iBAAQ,CACN,GAAM,uBADR,uBAGA,uDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kaAiCL,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0iBA8BL,iBAAQ,CACN,GAAM,uBADR,uBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,4xD,yMA0GTJ,EAAWK,gBAAiB","file":"component---manual-ruby-ruby-constructors-md-e4b07582ef2e25163da3.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"ruby-contructors\"\n    }}>{`Ruby Contructors`}</h1>\n    <p>{`The important constructor method is the `}<inlineCode parentName=\"p\">{`initialize`}</inlineCode>{` method.`}</p>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class Employee\n\n  # change scope to public\n  public\n\n  # static class variable\n  @@count = 0\n\n  # constructor\n  def initialize(name, designation, salary)\n    @name = name\n    @designation = designation\n    @salary = salary\n    @@count += 1\n  end\n\n  # class method\n  def self.count\n    @@count\n  end\n\n  # getters/setters for name, designation, and salary\n  def name\n    @name\n  end\n\n  def name=(name)\n    @name = name\n  end\n\n  def designation\n    @designation\n  end\n\n  def designation=(designation)\n    @designation = designation\n  end\n\n  def salary\n    @salary\n  end\n\n  def salary=(salary)\n    @salary = salary\n  end\n\n  # change scope to private\n  private\n\n  def organization\n    \"Hackers de Anonymous\"\n  end\n\n  # change scope to protected\n  protected\n\n  def owner\n    \"We never mention his name!\"\n  end\n\nend\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"inheritance\"\n    }}>{`Inheritance`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class SoftwareEngineer < Employee\n\n  # code for SoftwareEngineer class\n\nend\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"attribute-accessors\"\n    }}>{`Attribute accessors`}</h3>\n    <p>{`For what is readable/writable:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class Employee\n\n  attr_accessor :name, :designation, :salary\n\n  @@count = 0\n\n  def initialize(name, designation, salary)\n    @name = name\n    @designation = designation\n    @salary = salary\n    @@count += 1\n  end\n\n  def self.count\n    @@count\n  end\n\n  private\n\n  def organization\n    \"Hackers de Anonymous\"\n  end\n\n  protected\n\n  def owner\n    \"We never mention his name!\"\n  end\n\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"simple-example\"\n    }}>{`Simple Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`# Ruby program to initialize instance\n# variable using constructor\n\n#!/usr/bin/ruby\n\n# class name\nclass Geeks\n    # constructor\n    def initialize\n\n        # instance variable intialzation\n        @inst_1 = \"GeeksforGeeks\"\n        @inst_2 = \"Sudo Placement\"\n    end\n\n    # display method\n    def display\n        puts \"Value of First instance variable is: #{@inst_1}\"\n        puts \"Value of Second instance variable is: #{@inst_2}\"\n    end\nend\n\n# creating object\nobj1 = Geeks.new()\n\n# calling display method\nobj1.display()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"linked-list-example\"\n    }}>{`Linked List Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`\"\"\"\nBasic implementation without all methods\n\"\"\"\n\nclass LinkedList\n    def initialize(head=nil)\n        if head.nil?\n            @size = 0\n        else\n            @size = 1\n        end\n        @head = head\n    end\n\n    def getSize\n        @size\n    end\n\n    def insertFirst(n)\n        if @head.nil?\n            @head = n\n        else\n            tmp = @head\n            @head = n\n            n.setNext(tmp)\n        end\n        @size += 1\n    end\n\n    def clear\n        @head = nil\n        @size = 0\n    end\n\n    def getFirst\n        @head\n    end\nend\n\nclass Node\n    def initialize(data = nil)\n        @data = data\n        @next = nil\n    end\n\n    def getNext\n        @next\n    end\n\n    def setNext(n)\n        @next = n\n    end\nend\n\n# test Ruby file\nbegin\n  gem 'minitest', '>= 5.0.0'\n  require 'minitest/autorun'\n  require_relative 'linked_list'\nrescue Gem::LoadError => e\n  puts \"\\\\nMissing Dependency:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts 'Minitest 5.0 gem must be installed for the Ruby track.'\nrescue LoadError => e\n  puts \"\\\\nError:\\\\n#{e.backtrace.first} #{e.message}\"\n  puts DATA.read\n  exit 1\nend\n\n# Common test data version: 1.1.0 be3ae66\nclass LinkedListTest < Minitest::Test\n  def test_get_size\n    # skip\n    n1 = Node.new(1)\n    ll = LinkedList.new(n1)\n    assert_equal 1, ll.getSize()\n  end\n\n  def test_insert_first\n    # skip\n    n1 = Node.new(1)\n    n2 = Node.new(1)\n    ll = LinkedList.new(n1)\n    ll.insertFirst(n2)\n    assert_equal 2, ll.getSize()\n  end\n\n  def test_clear\n    # skip\n    n1 = Node.new(1)\n    n2 = Node.new(1)\n    ll = LinkedList.new(n1)\n    ll.insertFirst(n2)\n    ll.clear()\n    assert_equal 0, ll.getSize()\n    assert_nil nil, ll.getFirst()\n  end\nend\n\n__END__\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}