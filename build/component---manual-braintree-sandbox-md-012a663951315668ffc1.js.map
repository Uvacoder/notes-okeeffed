{"version":3,"sources":["webpack:///../manual/Braintree/Sandbox.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","isMDXComponent"],"mappings":"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","file":"component---manual-braintree-sandbox-md-012a663951315668ffc1.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"getting-started-with-the-braintree-sandbox\"\n    }}>{`Getting started with the Braintree Sandbox`}</h1>\n    <p>{`Published: October 5th 2018`}</p>\n    <p>{`Braintree is one of those methods to get started with payments.`}</p>\n    <p>{`I've been looking for alternatives to Stripe more for comparisons sake to see what would be easiest to implement and more relevant to what I am trying to achieve en masse down the road.`}</p>\n    <p>{`This is a small hello world into getting up and running with Braintree using Express on the serverside and React on the frontend.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`If you are following along, you should sign up for a Sandbox account.`}</p>\n    <p>{`This tutorial will use create-react-app and a user contributed npm module to abstract some of the time required for setup.`}</p>\n    <p>{`Another useful link comes from `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.braintreepayments.com/start/tutorial\"\n      }}>{`their website for Node.js and JS`}</a>{`. Although I will be deterring away from it, it is still a useful reference.`}</p>\n    <p>{`We are going to treat this project as a monorepo for now, so in the root directory we need to create a subdirectory for the frontend and a directory for the server.`}</p>\n    <h2 {...{\n      \"id\": \"building-the-express-server\"\n    }}>{`Building the Express server`}</h2>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`mkdir server\ncd server\nyarn init -y\nyarn add express body-parser morgan cors dotenv braintree\nmkdir routes\ntouch server.js .env .gitignore routes/index.js\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"gitignore\"\n    }}>{`.gitignore`}</h3>\n    <p>{`For the sake of doing things right, let's just quickly update our file to ignore `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`.env\nnode_modules/\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"env\"\n    }}>{`.env`}</h3>\n    <p>{`Here we need to update our file with the sandbox tokens given to us from the Braintree sandbox environment. The keys and configuration can be found on your Braintree dashboard:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`BRAINTREE_MERCHANT_ID=<use_your_merchant_id>\nBRAINTREE_PUBLIC_KEY=<use_your_public_key>\nBRAINTREE_PRIVATE_KEY=<use_your_private_key>\n`}</code></pre>\n    <p>{`Now we can use `}<inlineCode parentName=\"p\">{`dotenv`}</inlineCode>{` in our app to access the variables and keep them out of our git history.`}</p>\n    <h3 {...{\n      \"id\": \"serverjs\"\n    }}>{`server.js`}</h3>\n    <p>{`To set up the main server, update the server.js file to look like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Add variables from dotenv into process.env vars\nrequire('dotenv').config();\n\n// Main starting point of the application\nconst express = require('express');\nconst http = require('http');\nconst bodyParser = require('body-parser');\nconst morgan = require('morgan');\nconst app = express();\nconst cors = require('cors');\n\n// Routes Setup\nconst routes = require('./routes');\n\n// App Setup\nconst morganFormat = process.env.NODE_ENV === 'production' ? 'combined' : 'dev';\napp.use(morgan(morganFormat));\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Add routes after setting up middleware\nroutes(app);\n\n// Server Setup\nconst port = process.env.NODE_ENV == 'production' ? 80 : 5000;\nconst server = http.createServer(app);\nserver.listen(port);\nconsole.log('Server listening on:', port);\n`}</code></pre>\n    <p>{`This `}<inlineCode parentName=\"p\">{`server.js`}</inlineCode>{` file will load the `}<inlineCode parentName=\"p\">{`routes/index.js`}</inlineCode>{` file, which we will now update.`}</p>\n    <h3 {...{\n      \"id\": \"routesindexjs\"\n    }}>{`routes/index.js`}</h3>\n    <p>{`Let's now update our `}<inlineCode parentName=\"p\">{`routes/index.js`}</inlineCode>{` to take setup the gateway and setup three routes - one for a simple ping test, another for fetching a client token and a third for making a payment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const braintree = require('braintree');\n\nvar gateway = braintree.connect({\n  environment: braintree.Environment.Sandbox,\n  // Use your own credentials from the sandbox Control Panel here\n  merchantId: process.env.BRAINTREE_MERCHANT_ID,\n  publicKey: process.env.BRAINTREE_PUBLIC_KEY,\n  privateKey: process.env.BRAINTREE_PRIVATE_KEY\n});\n\nmodule.exports = function(app) {\n  app.get('/braintree', function(req, res) {\n    res.send('Braintree route is healthy');\n  });\n\n  app.get('/api/braintree/v1/getToken', async function(req, res) {\n    try {\n      gateway.clientToken.generate({}, function(err, response) {\n        if (err) {\n          res.status(500).send(err);\n        } else {\n          res.send(response);\n        }\n      });\n    } catch (err) {\n      res.status(500).send(err);\n    }\n  });\n\n  app.post('/api/braintree/v1/sandbox', async function(req, res) {\n    try {\n      // Use the payment method nonce here\n      var nonceFromTheClient = req.body.paymentMethodNonce;\n      // Create a new transaction for $10\n      var newTransaction = gateway.transaction.sale(\n        {\n          amount: '10.00',\n          paymentMethodNonce: nonceFromTheClient,\n          options: {\n            // This option requests the funds from the transaction once it has been\n            // authorized successfully\n            submitForSettlement: true\n          }\n        },\n        function(error, result) {\n          if (result) {\n            res.send(result);\n          } else {\n            res.status(500).send(error);\n          }\n        }\n      );\n    } catch (err) {\n      // Deal with an error\n      console.log(err);\n      res.send(err);\n    }\n  });\n};\n`}</code></pre>\n    <p>{`Now if we run `}<inlineCode parentName=\"p\">{`node server.js`}</inlineCode>{`, we should have our app up and running on port 5000!`}</p>\n    <p>{`We can run `}<inlineCode parentName=\"p\">{`curl http://localhost:5000/braintree`}</inlineCode>{` from another terminal to see our `}<inlineCode parentName=\"p\">{`Braintree route is healthy`}</inlineCode>{` response.`}</p>\n    <p>{`Now we need to set up the clientside.`}</p>\n    <h2 {...{\n      \"id\": \"building-the-react-frontend\"\n    }}>{`Building the React frontend`}</h2>\n    <h3 {...{\n      \"id\": \"react-installation\"\n    }}>{`React Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`create-react-app clientside\ncd clientside\nyarn add braintree-web braintree-web-drop-in-react axios\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"updating-the-app\"\n    }}>{`Updating the app`}</h3>\n    <p>{`Go to our App.js file and clean it out. Replace the file with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport './App.css';\nimport 'braintree-web';\nimport axios from 'axios';\nimport DropIn from 'braintree-web-drop-in-react';\n\nclass App extends Component {\n  instance;\n\n  state = {\n    clientToken: null\n  };\n\n  async componentDidMount() {\n    try {\n      // Get a client token for authorization from your server\n      const response = await axios.get(\n        'http://localhost:5000/api/braintree/v1/getToken'\n      );\n      const clientToken = response.data.clientToken;\n\n      this.setState({ clientToken });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  async buy() {\n    try {\n      // Send the nonce to your server\n      const { nonce } = await this.instance.requestPaymentMethod();\n      const response = await axios.post(\n        'http://localhost:5000/api/braintree/v1/sandbox',\n        nonce\n      );\n      console.log(response);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  render() {\n    if (!this.state.clientToken) {\n      return (\n        <div>\n          <h1>Loading...</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <DropIn\n            options={{\n              authorization: this.state.clientToken\n            }}\n            onInstance={(instance) => (this.instance = instance)}\n          />\n          <button onClick={this.buy.bind(this)}>Buy</button>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n`}</code></pre>\n    <p>{`This code is a variation of the intro code found on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/cretezy/braintree-web-drop-in-react\"\n      }}>{`Braintree Web Drop-in React Github intro`}</a>{`.`}</p>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`yarn start`}</inlineCode>{` we should load up the React app on locahost and you should be able to see the following:`}</p>\n    <p><img alt=\"React Frontend\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1538698065/samples/braintree-one.png\" /></p>\n    <p>{`If that is the case, perfect! We are ready to roll.`}</p>\n    <h3 {...{\n      \"id\": \"making-the-payment\"\n    }}>{`Making the payment`}</h3>\n    <p>{`The following comes directly from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.braintreepayments.com/start/tutorial\"\n      }}>{`Node.js quickstart for Braintree`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`Card number: 4111 1111 1111 1111\nExpiry: 09/20\nCVV: 400\nPostal Code: 40000\n`}</code></pre>\n    <p>{`If we insert both the card number and expiry, that should be enough for us to get to the end of the road! After inserting and making the payment, our front end should look like the following:`}</p>\n    <p><img alt=\"Payment made\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1538698064/samples/braintree-two.png\" /></p>\n    <p>{`Opening up `}<inlineCode parentName=\"p\">{`devtools`}</inlineCode>{`, we can even inspect the response object we are logging to see our great success!`}</p>\n    <p><img alt=\"Devtools\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1538698065/samples/braintree-three.png\" /></p>\n    <p>{`Bingo!`}</p>\n    <h3 {...{\n      \"id\": \"the-server-terminal\"\n    }}>{`The server terminal`}</h3>\n    <p>{`If we checkout the server terminal, we should be able to see how events went down thanks to Morgan doing our logging:`}</p>\n    <p><img alt=\"Express App\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1538698063/samples/braintree-four.png\" /></p>\n    <p>{`The image above can help us fully understand the process. When our frontend app loads, we make a `}<inlineCode parentName=\"p\">{`GET`}</inlineCode>{` request to fetch the token from `}<inlineCode parentName=\"p\">{`/api/braintree/v1/getToken`}</inlineCode>{`. This token is required for when that final payment request was made. The `}<inlineCode parentName=\"p\">{`OPTIONS`}</inlineCode>{` 204 request we see there secondly is a CORS preflight request made to ensure we are allowed to make the call and finally and `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{` 200 to `}<inlineCode parentName=\"p\">{`/api/braintree/v1/sandbox`}</inlineCode>{` is our success response after making the payment.`}</p>\n    <h2 {...{\n      \"id\": \"confirmation\"\n    }}>{`Confirmation`}</h2>\n    <p>{`If we now go back to our Sandbox dashboard, we can now see the successful transaction has been recorded!`}</p>\n    <p><img alt=\"Success\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1538698732/braintreedashboard.png\" /></p>\n    <p>{`Very cool. We just went from 0 to payment in a short amount of time.`}</p>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next steps`}</h2>\n    <p>{`What's next? Something I like about Braintree is UI extensibility. Although we used a frontend package on this occassion, try building out your own UI for taking payments!`}</p>\n    <p>{`Whether or not you are a fan of Braintree or Stripe really is up to you and your business needs at the end of the day. It is worth looking up both the pros and cons of the developer docs and the rates to decide what is best for your specific usecase (or any other payment platform for that case).`}</p>\n    <p>{`Original post: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.dennisokeeffe.com/blog/braintree-node-react\"\n      }}>{`https://www.dennisokeeffe.com/blog/braintree-node-react`}</a></p>\n    <p>{`Git repo: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/okeeffed/hello-braintree\"\n      }}>{`https://github.com/okeeffed/hello-braintree`}</a></p>\n    <p><em parentName=\"p\"><strong parentName=\"em\">{`Depth`}</strong>{` is a series that goes into more detail for projects than it's friendly counterpart series \"Hello\".`}</em></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}