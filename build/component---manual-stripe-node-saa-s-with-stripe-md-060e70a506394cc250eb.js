(window.webpackJsonp=window.webpackJsonp||[]).push([[496],{QAk3:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return o})),t.d(n,"default",(function(){return p}));t("1c7q"),t("abGl"),t("gZHo"),t("Fdmb"),t("Ir+3"),t("2mQt"),t("mXGw");var r=t("/FXl"),a=t("TjRS");t("aD51");function s(){return(s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/Stripe/Node-SaaS-With-Stripe.md"}});var i={_frontmatter:o},c=a.a;function p(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(r.b)(c,s({},i,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"nodejs-saas-with-stripe"},"Node.js SaaS with Stripe"),Object(r.b)("p",null,"The basics plan is to:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Create a test customer for the subscription."),Object(r.b)("li",{parentName:"ol"},"Create a product."),Object(r.b)("li",{parentName:"ol"},"Create a plan for that product."),Object(r.b)("li",{parentName:"ol"},"Create a subscription for that plan."),Object(r.b)("li",{parentName:"ol"},"Repeating for a few products."),Object(r.b)("li",{parentName:"ol"},"Writing a test script to do all this."),Object(r.b)("li",{parentName:"ol"},"Fetching back a list of subscriptions for that particular user."),Object(r.b)("li",{parentName:"ol"},"Writing out an example using Express servers.")),Object(r.b)("h2",{id:"building-out-the-base-functions-to-use-for-the-express-app"},"Building out the base functions to use for the Express app"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-javascript"}),"// controllers/stripe/index.js\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n\n/**\n * Create a new customer based off an email address.\n *\n * @param {string} email\n * @returns {Promise} Result of attempting to create a customer.\n */\nfunction customerCreate(email) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const customer = await stripe.customers.create({ email: email });\n      resolve(customer);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Register a new product.\n * @example\n * {\n * name: 'My SaaS Platform',\n * type: 'service'\n * }\n *\n * @param {Object} data Name and type of product\n * @returns {Promise} Request to create new product\n */\nfunction productCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.products.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Create a new plan with a product.\n * @example\n * {\n * currency: 'usd',\n * interval: 'month',\n * product: 'prod_id',\n * nickname: 'Pro Plan',\n * amount: 12\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction planCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.plans.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Create a new subscription for a user based on * a plan.\n * @example\n * {\n * customer: 'customer_id',\n * items: [\n *   {\n *     plan: 'plan_abc',\n *     quantity: 2\n *   }\n * ]\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction subscriptionCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.subscriptions.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Fetch the subscription list.\n * @example\n * {\n * { limit: 99 },\n * customer: 'cus_id'\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction subscriptionList(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.subscriptions.list(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n")))}p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/Stripe/Node-SaaS-With-Stripe.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-stripe-node-saa-s-with-stripe-md-060e70a506394cc250eb.js.map