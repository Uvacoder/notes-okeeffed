{"version":3,"sources":["webpack:///../manual/Go/Lambda-Go-Servers.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,yDACA,wEACA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,2CADQ,oBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oCADQ,iBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uDADQ,yBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oGADQ,cAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,kFADQ,0BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,2EADQ,wCAItB,iBAAQ,CACN,GAAM,kCADR,mCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,y4BAuCL,iBAAQ,CACN,GAAM,iCADR,kCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,85B,uMAsDTJ,EAAWK,gBAAiB","file":"component---manual-go-lambda-go-servers-md-55347e2531792812453d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lambda-go-servers\"\n    }}>{`Lambda Go Servers`}</h1>\n    <p>{`This following example uses Gin.`}</p>\n    <p>{`TODO: Add in the learnings from the local repo.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/appleboy/gin-lambda\"\n        }}>{`Gin + Lambda Go`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/apex/gateway\"\n        }}>{`Apex Gateway`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/awslabs/aws-lambda-go-api-proxy\"\n        }}>{`Gin + Lambda AWSLabs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.codeproject.com/Articles/5269904/Deploy-a-Typescript-Lambda-function-with-AWS-CDK-a\"\n        }}>{`TS Lambda`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.aws.amazon.com/cdk/api/latest/typescript/api/aws-apigateway.html\"\n        }}>{`AWS CDK - API Gateway`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.alexedwards.net/blog/serverless-api-with-go-and-aws-lambda\"\n        }}>{`AWS CDK - First Go Lambda Function`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"gin--lambda-with-awslabs-proxy\"\n    }}>{`Gin + Lambda with AWSLabs proxy`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"log\"\n    \"context\"\n\n    \"github.com/aws/aws-lambda-go/events\"\n    \"github.com/aws/aws-lambda-go/lambda\"\n    \"github.com/awslabs/aws-lambda-go-api-proxy/gin\"\n    \"github.com/gin-gonic/gin\"\n)\n\nvar ginLambda *ginadapter.GinLambda\n\nfunc init() {\n    // stdout and stderr are sent to AWS CloudWatch Logs\n    log.Printf(\"Gin cold start\")\n    r := gin.Default()\n    r.GET(\"/ping\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\": \"pong\",\n        })\n    })\n\n    ginLambda = ginadapter.New(r)\n}\n\n// Handler will deal with Gin working with Lambda\nfunc Handler(ctx context.Context, req events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n    // If no name is provided in the HTTP request body, throw an error\n    return ginLambda.ProxyWithContext(ctx, req)\n}\n\nfunc main() {\n    lambda.Start(Handler)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"gin--lambda-with-apex-gateway\"\n    }}>{`Gin + Lambda with Apex Gateway`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"log\"\n    \"net/http\"\n    \"os\"\n\n    \"github.com/apex/gateway\"\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc helloHandler(c *gin.Context) {\n    name := c.Param(\"name\")\n    c.String(http.StatusOK, \"Hello %s\", name)\n}\n\nfunc welcomeHandler(c *gin.Context) {\n    c.String(http.StatusOK, \"Hello World from Go\")\n}\n\nfunc rootHandler(c *gin.Context) {\n    c.JSON(http.StatusOK, gin.H{\n        \"text\": \"Welcome to gin lambda server.\",\n    })\n}\n\nfunc routerEngine() *gin.Engine {\n    // set server mode\n    gin.SetMode(gin.DebugMode)\n\n    r := gin.New()\n\n    // Global middleware\n    r.Use(gin.Logger())\n    r.Use(gin.Recovery())\n\n    r.GET(\"/welcome\", welcomeHandler)\n    r.GET(\"/user/:name\", helloHandler)\n    r.GET(\"/\", rootHandler)\n\n    return r\n}\n\nfunc main() {\n    addr := \":\" + os.Getenv(\"PORT\")\n    log.Fatal(gateway.ListenAndServe(addr, routerEngine()))\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}