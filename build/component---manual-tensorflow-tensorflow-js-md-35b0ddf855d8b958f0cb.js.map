{"version":3,"sources":["webpack:///../manual/Tensorflow/Tensorflow-JS.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,iBAGA,iBAAQ,CACN,GAAM,2BADR,2BAGA,sBACE,kBAAIC,WAAW,MAAf,wDACA,kBAAIA,WAAW,MAAf,0DACA,kBAAIA,WAAW,MAAf,mDACA,kBAAIA,WAAW,MAAf,qHACA,kBAAIA,WAAW,MAAf,0DAEF,iBAAQ,CACN,GAAM,0BADR,0BAGA,sHACA,yOACA,iBAAQ,CACN,GAAM,kBADR,kBAGA,mIACA,wFACA,sBACE,kBAAIA,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,mBACA,kBAAIA,WAAW,MAAf,cAEF,sH,2MAKJJ,EAAWK,gBAAiB","file":"component---manual-tensorflow-tensorflow-js-md-35b0ddf855d8b958f0cb.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tensorflowjs\"\n    }}>{`Tensorflow.js`}</h1>\n    <h2 {...{\n      \"id\": \"problem-solving-process\"\n    }}>{`Problem Solving Process`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Identify data relevant to problem (features, labels)`}</li>\n      <li parentName=\"ol\">{`Assemble a set of data related to problem to be solved`}</li>\n      <li parentName=\"ol\">{`Decide on the type of output you are predicting`}</li>\n      <li parentName=\"ol\">{`Based on type of output, pick an algorithm that will determine a correlation between your 'features' and 'labels'`}</li>\n      <li parentName=\"ol\">{`use model generated by algorithm to make a prediction`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"continuous-vs-discrete\"\n    }}>{`Continuous vs Discrete`}</h2>\n    <p>{`We can decide what application or technique we are going to used based on the type of output.`}</p>\n    <p>{`For example, if the output data itself is continuous, we know that we would apply regression. If in fact the output data is discrete in nature ie pass/fail, then we would consider options like classification.`}</p>\n    <h2 {...{\n      \"id\": \"plinko-example\"\n    }}>{`Plinko Example`}</h2>\n    <p>{`In the example of Plinko, we want to try figure out where a ball dropped into the Plinko grid will end up.`}</p>\n    <p>{`From the example, we can determine that we have these features:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Drop Position`}</li>\n      <li parentName=\"ol\">{`Ball Bounciness`}</li>\n      <li parentName=\"ol\">{`Ball Size`}</li>\n    </ol>\n    <p>{`From these pieces of data, we want to know the output label of which bucket a ball lands in.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}