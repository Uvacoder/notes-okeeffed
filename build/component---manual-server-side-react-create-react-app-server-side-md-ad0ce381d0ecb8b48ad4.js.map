{"version":3,"sources":["webpack:///../manual/Server-Side-React/Create-React-App-Server-Side.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,0OAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,8CADR,8CAGA,sBACE,kBAAIC,WAAW,MAAf,iBACA,kBAAIA,WAAW,MAAf,2BAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2JAWL,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,YAAiC,0BAAYA,WAAW,MAAvB,4BAAjC,UACA,kBAAIA,WAAW,MAAf,WAAgC,0BAAYA,WAAW,MAAvB,0BAAhC,MAEF,oDACA,qBAAG,kBAAIA,WAAW,KAAf,iFACH,qBAAG,kBAAIA,WAAW,KAAf,gNACH,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,w5B,iOAsCTJ,EAAWK,gBAAiB","file":"component---manual-server-side-react-create-react-app-server-side-md-ad0ce381d0ecb8b48ad4.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"create-react-app-server-side-bootstrapping\"\n    }}>{`create-react-app Server Side bootstrapping`}</h1>\n    <ol>\n      <li parentName=\"ol\">{`npm run eject`}</li>\n      <li parentName=\"ol\">{`Update config/paths.js`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// config/paths.js\n\nmodule.exports = {\n    ...\n    appServer: resolveApp('server'),\n    serverIndexJs: resolveApp('src/server.js'),\n    ...\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`Create a `}<inlineCode parentName=\"li\">{`webpack.config.server.js`}</inlineCode>{` file.`}</li>\n      <li parentName=\"ol\">{`Install `}<inlineCode parentName=\"li\">{`webpack-node-externals`}</inlineCode>{`.`}</li>\n    </ol>\n    <p>{`As described on the github:`}</p>\n    <p><em parentName=\"p\">{`Webpack allows you to define externals - modules that should not be bundled.`}</em></p>\n    <p><em parentName=\"p\">{`When bundling with Webpack for the backend - you usually don't want to bundle its node_modules dependencies. This library creates an externals function that ignores node_modules when bundling in Webpack.`}</em></p>\n    <pre><code parentName=\"pre\" {...{}}>{`const path = require('path');\nconst paths = require('./paths');\nconst webpackNodeExternals = require('webpack-node-externals');\n\nmodule.exports = {\n    // Target Nodehs\n    target: 'node',\n    // Looking for the root of server app\n    entry: paths.serverIndexJs,\n    output: {\n        // The build folder.\n        path: paths.appServer,\n        filename: 'server.js'\n    },\n    // Run Babel on every file\n    module: {\n        rules: [\n            {\n                test: /\\\\.js?$/,\n                loader: 'babel-loader',\n                exclude: /node_modules/,\n                options: {\n                    presets: [\n                        'react',\n                        'stage-0',\n                        ['env', { targets: { browsers: ['last 2 versions']}}]\n                    ]\n                }\n            }\n        ]\n    },\n    externals: [webpackNodeExternals()]\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}