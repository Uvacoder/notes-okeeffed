{"version":3,"sources":["webpack:///../manual/Angular/Angular2-Basics.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-angular-angular-2-basics-md-a15986c98d5881cc86ea.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"angular-2-basics\"\n    }}>{`Angular 2 Basics`}</h1>\n    <p>{`You can not just use Angular for web apps, but also iOS and Java using Native kit.`}</p>\n    <h2 {...{\n      \"id\": \"why-angular\"\n    }}>{`Why Angular?`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`it's Modular\n- in previous versions, you needed the entire Angular framework loaded`}</li>\n      <li parentName=\"ul\">{`uses TypeScript, it uses static typing`}</li>\n      <li parentName=\"ul\">{`Google has hundreds of internal applications using Angular `}</li>\n      <li parentName=\"ul\">{`large community of developers `}</li>\n    </ul>\n    <p>{`Angular JS refers to version 1, whereas Angular refers to version 2.`}</p>\n    <h2 {...{\n      \"id\": \"the-parts-and-pieces-of-an-angular-application\"\n    }}>{`The Parts and Pieces of an Angular Application`}</h2>\n    <p><strong parentName=\"p\">{`How does it work?`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`App requires one `}<inlineCode parentName=\"p\">{`root`}</inlineCode>{` component`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The app requires services, components and 3rd party modules\n- Services can be internal or part of 3rd party modules`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Services`}</inlineCode>{`: used to perform things like long running calcs or running web requests.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Components`}</inlineCode>{`: Broken down components/elements `}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`NgModule`}</inlineCode>{`: This is like a container for the application\n- `}<inlineCode parentName=\"p\">{`Ng`}</inlineCode>{` is the namespace Angular adopted`}</p>\n      </li>\n    </ul>\n    <p>{`You can use `}<inlineCode parentName=\"p\">{`Typescript`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Javascript`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Dart`}</inlineCode>{` with Angular2.`}</p>\n    <h2 {...{\n      \"id\": \"typescript\"\n    }}>{`Typescript`}</h2>\n    <p>{`Angular is the first large framework to adopt `}<inlineCode parentName=\"p\">{`Typescript`}</inlineCode>{`. The idea is to keep you in the editor.`}</p>\n    <p>{`We can use Typescript to help enforce static typing.`}</p>\n    <p><inlineCode parentName=\"p\">{`Intellisense`}</inlineCode>{` is also used as helping autocompletion intelligence when coding and certain styles of coding allow for this.`}</p>\n    <p>{`Eg. code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// example 1 \n\nclass Greeter{\n    greet(name: string) {\n        console.log(name);\n    }\n}\n\nconst greeter = new Greeter();\n\ngreeter.greet('Jim');\n\n// example 2\n\nfunction rollCall(students: any[], max?: number) {\n    max = max || students.length;\n    const attendance = students.slice(undefined, max);\n    console.log(attendence);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-first-angular-application\"\n    }}>{`The First Angular Application`}</h2>\n    <p>{`As you build out your `}<inlineCode parentName=\"p\">{`index.html`}</inlineCode>{` file you set a `}<inlineCode parentName=\"p\">{`<app-root>`}</inlineCode>{` component as the target for Angular2 entry point.`}</p>\n    <p>{`Within `}<inlineCode parentName=\"p\">{`src/app`}</inlineCode>{` create `}<inlineCode parentName=\"p\">{`app.module.ts`}</inlineCode>{` as the root module.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/* in app.modules.ts */\n\n// note the @ is to do with npm supporting namespace modules\n// this allows code to be shared between packages \nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\n// create the AppModule \n// export for use in main.ts \n// add the decorator to post-process it\n// the decorator is used by angular to compose the app \n// in the most efficient way possible\n@NgModule({\n    // using BrowserModule lets Angular know this is \n    // for web use\n    imports: [BrowserModule],\n    // for the target component \n    // before using it the first time - declare we are using it\n    // if not there will be a definition error\n    declarations: [AppComponent],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n    \n}\n\n/* in main.ts */\nimport './styles/main.css';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n`}</code></pre>\n    <p>{` In order for this to work, we need to create a component!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/* in app.component.ts */\n\nimport { Component } from '@angular/core';\n\n@Component({\n    // we should target app-root in the component \n    // best practise to prefix components with something related to app eg app or another namespace convention\n    selector: 'app-root',\n    template: \\`<h2>Hello World!</h2>\\`,\n    style: [\n        \\`\n        h2 {\n            color: blue;\n        }\n        \\`\n    ]\n})\nexport class AppComponent {\n    \n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-anatomy-of-the-component\"\n    }}>{`The Anatomy of the Component`}</h2>\n    <p>{`In Angular, a Component = Template + Class + Decorator.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Template: View or user interface for a component`}</li>\n      <li parentName=\"ul\">{`Class: Code that brings template to life `}</li>\n      <li parentName=\"ul\">{`Decorator: Metadata that wires up the class to the template, completing the component `}</li>\n    </ul>\n    <p>{`This will cover each section.`}</p>\n    <h2 {...{\n      \"id\": \"the-component-decorator\"\n    }}>{`The @Component decorator`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`selector`}</inlineCode>{`: name for the component HTML tag`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`template`}</inlineCode>{`: Base html `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`styles`}</inlineCode>{`: you can also do this with a file`}</li>\n    </ul>\n    <p>{`General all files (including the styling) will be placed in the same place as the component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// example component file \n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css']\n})\nexport class AppComponent {\n    example: string[];\n\n    constructor() {\n        this.example = [\"Hi\", \"ho\"];\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"data-binding\"\n    }}>{`Data Binding`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Class to Template `}</li>\n      <li parentName=\"ol\">{`Template to Class`}</li>\n      <li parentName=\"ol\">{`(Two-way) Between Class and Template`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`1`}</strong></p>\n    <p><inlineCode parentName=\"p\">{`<h1>{{ exp }}</h1>`}</inlineCode>{` view will update to changes to the expression.\n`}<inlineCode parentName=\"p\">{`<input [target]=\"expression\" />`}</inlineCode>{` is another form of binding`}</p>\n    <p><strong parentName=\"p\">{`2`}</strong>{`\n`}<inlineCode parentName=\"p\">{`<button (event)=\"expression\"></button>`}</inlineCode>{` for event listening`}</p>\n    <p><strong parentName=\"p\">{`3`}</strong>{`\n`}<inlineCode parentName=\"p\">{`<input [(target)]=\"expression\" />`}</inlineCode>{` - takes input and sends output`}</p>\n    <p>{`Given the example of 2 above...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// for the event handler \n\n...\nexport class AppComponent {\n    emojis = ['', '', ''];  // array of emojis\n    activeEmoji: string;\n\n    changeEmoji() {\n        this.activeEmoji = this.emoji[Math.floor(Math.random() * this.emoji.length)]\n    }\n}   \n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nesting-components\"\n    }}>{`Nesting Components`}</h2>\n    <p>{`Two new components: A list and a component with that list. `}<inlineCode parentName=\"p\">{`Entry`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Entry-list`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`entry-list`}</strong></p>\n    <p>{`After creation of this component, it should be imported to `}<inlineCode parentName=\"p\">{`app.module.ts`}</inlineCode>{` and added to the declarations property.`}</p>\n    <p>{`Because there will probably be many components, we will create a barrel to work as the middle man.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// index.ts\n\nexport * from './entry-list/entry-list.component'\n`}</code></pre>\n    <p>{`Now this entire folder can just be imported to the `}<inlineCode parentName=\"p\">{`app.module.ts`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// entry-list ts \nimport { Components } from '@angular/core';\n\n@Component({\n    selector: 'app-entry-list',\n    templateUrl: 'entry-list.component.html',\n    styleUrls: ['entry-list.component.css'] \n})\n\nexport class EntryListComponent {\n    \n}\n\n// in app.component.html \n<app-entry-list></app-entry-list>\n`}</code></pre>\n    <p><strong parentName=\"p\">{`entry`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`create the usual files`}</li>\n      <li parentName=\"ul\">{`add in the import from the barrel`}</li>\n      <li parentName=\"ul\">{`ALWAYS ADD CHILD COMPONENTS FIRST`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// entry-list ts \nimport { Components } from '@angular/core';\n\n@Component({\n    selector: 'app-entry',\n    templateUrl: 'entry.component.html',\n    styleUrls: ['entry.component.css']  \n})\n\nexport class EntryComponent {\n    \n}\n`}</code></pre>\n    <p>{`What we can now do in the `}<inlineCode parentName=\"p\">{`entry-list.component.html`}</inlineCode>{`, we can now add in the children.`}</p>\n    <h2 {...{\n      \"id\": \"structural-directives\"\n    }}>{`Structural Directives`}</h2>\n    <p>{`Directives let you...`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Control Visibility `}</li>\n      <li parentName=\"ul\">{`Apply Styling`}</li>\n      <li parentName=\"ul\">{`Loop over items`}</li>\n      <li parentName=\"ul\">{`Extend app with custom scripts`}</li>\n    </ul>\n    <p>{`There are things such as `}<inlineCode parentName=\"p\">{`structural directives`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`attribute directives`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// example for a click action\n// here we can add styles for liked give toggled class (attribute)\n<div class=\"actions\">\n    <button type=\"button\" (event)=\"isLiked = !isLiked\" [ngClass]=\"{liked: isLiked}\">Show if true</button>\n    <button type=\"button\" (event)=\"showComments = !showComments\">Comments ({{comments.length}})</button>\n</div>\n\n// *ngFor to iterate (structural)\n// using Angulars template engine\n<div class=\"comments\">\n    <div class=\"comment\" *ngFor=\"let comment of comments\">\n        <p>{{comment.comment}}<strong>{{comment.name}}</strong></p>\n    </div>\n</div>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}