{"version":3,"sources":["webpack:///../manual/Algorithms/Letter-Count.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,mNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0DADQ,4BAItB,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6nB,0MA6BTJ,EAAWK,gBAAiB","file":"component---manual-algorithms-letter-count-md-957ee7231979961d048a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"letter-count\"\n    }}>{`Letter Count`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.regular-expressions.info/lookaround2.html\"\n        }}>{`Look around regex blog`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function LetterCount(str) {\n  let maxLen = 0;\n  let letterCountIndex = 0;\n  const strArr = str.split(' ');\n  strArr.map((word, index) => {\n    const regex = /([a-z])(\\\\1?)(.?|.+)(\\\\1+)/gi;\n    const regMatches = word.toLowerCase().match(regex);\n    if (!regMatches) return;\n\n    for (match of regMatches) {\n      const repRegex = new RegExp(\\`[^\\${match[0]}]\\`, 'ig');\n      const updated = word.replace(repRegex, '');\n      if (updated.length > maxLen) {\n        maxLen = updated.length;\n        letterCountIndex = index;\n      }\n    }\n  });\n\n  if (maxLen === 0) return -1;\n  return strArr[letterCountIndex];\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}