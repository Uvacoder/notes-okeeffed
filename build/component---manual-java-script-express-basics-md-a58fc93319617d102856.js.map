{"version":3,"sources":["webpack:///../manual/JavaScript/Express-Basics.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-java-script-express-basics-md-a58fc93319617d102856.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"express-basics\"\n    }}>{`EXPRESS BASICS`}</h1>\n    {\n      /* TOC -->autoauto- [EXPRESS BASICS](#express-basics)auto    - [EXP-1: Getting Started with Express](#exp-1-getting-started-with-express)autoauto<!-- /TOC */\n    }\n    <h2 {...{\n      \"id\": \"exp-1-getting-started-with-express\"\n    }}>{`EXP-1: Getting Started with Express`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Installing express`}</li>\n    </ol>\n    <p>{`For this example...`}</p>\n    <p>{`git clone `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/hdngr/treehouse-express-basics.git\"\n      }}>{`https://github.com/hdngr/treehouse-express-basics.git`}</a></p>\n    <ol>\n      <li parentName=\"ol\">{`Your first Express App`}</li>\n    </ol>\n    <p>{`client: web browser\nroutes: urls for different pages`}</p>\n    <p>{`//in app.js`}</p>\n    <p>{`'use strict'; //throws error if you make one`}</p>\n    <p>{`var express = require('express'); //now can access all methods and properties of express through this.`}</p>\n    <p>{`var app = express();`}</p>\n    <p>{`//app variable will extended`}</p>\n    <p>{`//set up dev server`}</p>\n    <p>{`app.get('/', function(request, response) {\n});`}</p>\n    <p>{`app.listen(3000);`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`Improving your first app`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`some findal touches`}</li>\n        </ul></li>\n    </ol>\n    <p>{`Quick enhancements`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict'; //throws error if you make one\n\nvar express = require('express'); //now can access all methods and properties of express through this.\n\nvar app = express();\n\n//app variable will extended\n\n//set up dev server\n\napp.get('/', function(req, res) {\n  //req and res are convention\n  res.send('<h1>I Love Treehouse!<h1>');\n});\n\napp.listen(3000, function() {\n  console.log('The frontend server is running on port 3000!');\n});\n`}</code></pre>\n    <p>{`PART 2: DEVELOPING EXPRESS APPS LIKE A BOSS`}</p>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`Adding Routes to the App`}</li>\n    </ol>\n    <p>{`Routes are an important part of Express.`}</p>\n    <p>{`We make can make some dummy json data for testing...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"I like to run!\": {\n    \"title\": \"I like to run!\",\n    \"description\": \"Fanny pack vinyl put a bird on it, small\"\n  },\n  \"Crossfit is cool!\": {\n    \"title\": \"Crossfit is cool!\",\n    \"description\": \"Fanny pack vinyl put a bird on it, small\"\n  },\n  \"Swimming is great for the joints\": {\n    \"title\": \"Swimming is great for the joints\",\n    \"description\": \"Fanny pack vinyl put a bird on it, small\"\n  }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`//app.js\n\n'use strict'; //throws error if you make one\n\nvar express = require('express'); //now can access all methods and properties of express through this.\nvar post = require('./mock/posts.json');\n\nvar app = express();\n\n//app variable will extended\n\n//set up dev server\n\napp.get('/', function(req, res) {\n  //req and res are convention\n  res.send('<h1>I Love Treehouse!<h1>');\n});\n\napp.get('/blog', function(req, res) {\n  res.send(post);\n});\n\napp.listen(3000, function() {\n  console.log('The frontend server is running on port 3000!');\n});\n`}</code></pre>\n    <p>{`QUESTIONS`}</p>\n    <p>{`/////////////////`}</p>\n    <p>{`Create a get method for a /blog html extension.`}</p>\n    <p>{`Use the send method on the response object to return the posts object when the /blog route is requested.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`'use strict';\n\nvar express = require('express');\nvar posts = require('./mock/posts.json');\n\nvar app = express();\n\napp.get('/', function(req, res) {\n  res.send('<h1>I Love Treehouse!</h1>');\n});\n\napp.get('/blog', function(req, res) {\n  res.send(posts);\n});\n\napp.listen(3000, function() {\n  console.log('The frontend server is running on port 3000!');\n});\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`Easily Debug Express`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">{`Programming it iterative.`}</li>\n    </ul>\n    <p>{`Nodemon not needing to stop and restart the server.`}</p>\n    <p>{`Node-inspector is great for debugging.`}</p>\n    <p>{`nodemon is like a replacement for the keyword node!`}</p>\n    <p>{`nodemon src/app //this will start a node.js app which restarts when changes are made.`}</p>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`Interactive Debugging\nand explorative programming`}</li>\n    </ol>\n    <p>{`node-debug src/app.js`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`this launches node inspector in debug mode.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`select in the body of the route to set a breakpoint.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`access in the Chrome debugger`}</p>\n      </li>\n    </ul>\n    <p>{`To put node-debugger and nodemon together.`}</p>\n    <p>{`Do this:\nnode-inspector //run this by itself. Won't run the server.`}</p>\n    <p>{`//in a seperate tab\nnodemon --debug src/app`}</p>\n    <p>{`You can do the same thing with the regular node command - but with no server restart`}</p>\n    <p>{`node --debug src/app`}</p>\n    <p>{`Passing the breakpoint to the nodemon comment`}</p>\n    <p>{`nodemon --debug-brk src/app`}</p>\n    <ul>\n      <li parentName=\"ul\">{`this will hit the debugger; statement.`}</li>\n    </ul>\n    <p>{`QUESTIONS:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`When the debugger breaks in the application, you have access to all variables in the current application context in the browser’s console.`}</li>\n    </ol>\n    <p>{`A: True`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`What command will runs the node app in “debug” mode?`}</li>\n    </ol>\n    <p>{`A: nodemon --debug src`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`node-inspector`}</inlineCode>{` can be used to run node apps directly OR to debug node apps being run in debug mode`}</li>\n    </ol>\n    <p>{`A: True`}</p>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`A breakpoint in a JavaScript application can be set by clicking on the line of a file in the browser console, or writing the `}<strong parentName=\"li\">{`_`}</strong>{` statement directly into your code.`}</li>\n    </ol>\n    <p>{`A: debugger;`}</p>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">{`The following command will break the debugger on the first line`}</li>\n    </ol>\n    <p>{`A: nodemon --debug-brk src/app`}</p>\n    <p>{`/////////////////`}</p>\n    <p>{`PART 3: THE REQUEST AND RESPONSE OBJECTS IN EXPRESS`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`6.  Requests and the\n    request objects\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Every route processes a request`}</li>\n    </ul>\n    <p>{`So far, index AND blog route.`}</p>\n    <p>{`The server catches the http request, then sends back as a JS request object`}</p>\n    <p>{`In the debug mode:`}</p>\n    <p>{`req.param in debug currently empty. Can run the paramter through our routes!`}</p>\n    <p>{`eg.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`app.get('/blog/:id', function(req, res) {\n  res.send(post);\n});\n`}</code></pre>\n    <p>{`Visiting .../blog/1 will set the id param to \"1\" etc`}</p>\n    <p>{`You can change the parameter names to be things like \"title\" or whatever you want.`}</p>\n    <p>{`QUESTIONS`}</p>\n    <p>{`////////////////////////`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The request object gives you access to the “hostname” where the server is serving from.`}</li>\n    </ol>\n    <p>{`A: True`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Express route parameters allow you to request different data simply by changing the `}{`_`}{`_`}{`_`}{`_`}{`.`}</li>\n    </ol>\n    <p>{`A: URL`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`The request object is like a JavaScript bundle of the incoming `}<strong parentName=\"li\">{`_`}{`_`}</strong></li>\n    </ol>\n    <p>{`A: HTTP Request`}</p>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`The request object stores route parameters in the parameters object.`}</li>\n    </ol>\n    <p>{`A: False`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`7.  Responses and the\n    Response Object\n`}</code></pre>\n    <p>{`The server sends back the response.`}</p>\n    <p>{`This includes HTML and tons of behind the scenes info.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`status codes, response info etc.`}</li>\n    </ul>\n    <p>{`Using the debugger:`}</p>\n    <p>{`res //a lot going on`}</p>\n    <ul>\n      <li parentName=\"ul\">{`this gives a lot of return details`}</li>\n    </ul>\n    <p>{`Add a question mark makes the route param optional.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`app.get('/blog/:title?', function(req, res) {\n  //now we can access the blog page when it is empty\n  var title = req.params.title;\n  if (title === undefined) {\n    res.send('This page is under construction');\n  } else {\n    var post = posts[title];\n    res.send(post);\n  }\n});\n`}</code></pre>\n    <p>{`res.get`}</p>\n    <p>{`QUESTIONS`}</p>\n    <ol>\n      <li parentName=\"ol\">{`In express the `}{`_`}{`_`}{`_`}{` character at the end of a route parameter indicates that it is optional.`}</li>\n    </ol>\n    <p>{`A: ?`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Status codes can be set manually on the response object.`}</li>\n    </ol>\n    <p>{`A: True`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`The response object’s `}<strong parentName=\"li\">{`_`}</strong>{` method is used to turn templates into HTML.`}</li>\n    </ol>\n    <p>{`A: render`}</p>\n    <p>{`/////////////////`}</p>\n    <p>{`PART 4: USING TEMPLATES WITH EXPRESS`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`7.  What is Template\n    Rendering\n`}</code></pre>\n    <p>{`Templates and template rendering at the core of an internet application framework.`}</p>\n    <p>{`res.send can send things to the browser.`}</p>\n    <p>{`Can also send back html.`}</p>\n    <p>{`Basically a example.html that can dynamically injected`}</p>\n    <p>{`This templates are referred to as VIEWS.`}</p>\n    <p>{`Popular template languages:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Handlebars`}</li>\n      <li parentName=\"ul\">{`EJS (Embedded Javascript)`}</li>\n      <li parentName=\"ul\">{`JADE // the most popular`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`8.  What is Jade?\n`}</code></pre>\n    <p>{`Most popular template engines for Node and Express.`}</p>\n    <p>{`Why do they love it?`}</p>\n    <p>{`It quickly uses block indents for taggings.`}</p>\n    <p>{`Examples:`}</p>\n    <p>{`doctype html\nhtml\nhead\ntitle Express Basics\nbody\nh1 This is an awesome HTML page, generated with Jade.\np.class1.class2.another-class //used to make classes\np.(class=\"test\") Some content`}</p>\n    <ol {...{\n      \"start\": 9\n    }}>\n      <li parentName=\"ol\">{`Using Jade in your\nExpress App`}</li>\n    </ol>\n    <p>{`How to configure your template to use Jade.`}</p>\n    <p>{`//app.js`}</p>\n    <p>{`'use strict'; //throws error if you make one`}</p>\n    <p>{`var express = require('express'); //now can access all methods and properties of express through this.\nvar posts = require('./mock/posts.json');`}</p>\n    <p>{`var app = express();`}</p>\n    <p>{`//app variable will extended`}</p>\n    <p>{`//set up dev server`}</p>\n    <p>{`app.set('view engine', 'jade');\napp.set('views', `}<strong parentName=\"p\">{`dirname + '/templates'); //`}</strong>{`dirname important for different directories from where node starts`}</p>\n    <p>{`app.get('/', function(req, res) { //req and res are convention\nres.render('index');\n});`}</p>\n    <p>{`app.get('/blog/:title?', function(req, res) { //now we can access the blog page when it is empty\nvar title = req.params.title;\nif (title === undefined) {\nres.status(503); //good for bots to see this status codes\nres.send(\"This page is under construction\");\n} else {\nvar post = posts`}{`[title]`}{`;\nres.send(post);\n}\n});`}</p>\n    <p>{`app.listen(3000, function(){\nconsole.log(\"The frontend server is running on port 3000!\");\n});`}</p>\n    <p>{`QUESTIONS`}</p>\n    <ol>\n      <li parentName=\"ol\">{`In node.js, `}<inlineCode parentName=\"li\">{`__dirname`}</inlineCode>{` is a variable that gives you:`}</li>\n    </ol>\n    <p>{`A: The path to the current file`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Which of the following is NOT a conventional folder name for storing templates`}</li>\n    </ol>\n    <p>{`A: jade`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In Jade's syntax, which of the following is NOT a correct assignment of the class `}<inlineCode parentName=\"p\">{`nav`}</inlineCode>{` to a `}<inlineCode parentName=\"p\">{`div`}</inlineCode></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The response object's `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{` method takes the name of a template as its first parameter. The file extension (e.g. `}<inlineCode parentName=\"p\">{`.jade`}</inlineCode>{`) is required.`}</p>\n      </li>\n    </ol>\n    <p>{`A: False`}</p>\n    <ol {...{\n      \"start\": 10\n    }}>\n      <li parentName=\"ol\">{`The \"response.render\"\nMethod`}</li>\n    </ol>\n    <p>{`So far, still only been using static data.`}</p>\n    <p>{`doctype html\nhtml(lang=\"en\")\nhead\ntitle Post Page\nbody\nsection.post\n.container.text-right\na(href=\"\").text-faded view all\n.row\n.col-lg-8.col-lg-offset-2.text-center\nh2.section-heading I like to run!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`        hr.light\n\n        p.text-faded\n          | Fanny pack vinyl put a bird on it, small batch viral migas 8-bit meditation Shoreditch keytar health goth bespoke sustainable. Viral you probably haven't heard of them try-hard ennui, pug Thundercats selfies. Normcore cray health goth, umami ennui beard art party skateboard squid distillery.\n        .article\n          | Fanny pack vinyl put a bird on it, small batch viral migas 8-bit meditation Shoreditch keytar health goth bespoke sustainable. Viral you probably haven't heard of them try-hard ennui, pug Thundercats selfies. Normcore cray health goth, umami ennui beard art party skateboard squid distillery.\n`}</code></pre>\n    <p>{`//app.js`}</p>\n    <p>{`'use strict'; //throws error if you make one`}</p>\n    <p>{`var express = require('express'); //now can access all methods and properties of express through this.\nvar posts = require('./mock/posts.json');`}</p>\n    <p>{`var app = express();`}</p>\n    <p>{`//app variable will extended`}</p>\n    <p>{`//set up dev server`}</p>\n    <p>{`app.set('view engine', 'jade');\napp.set('views', `}<strong parentName=\"p\">{`dirname + '/templates'); //`}</strong>{`dirname important for different directories from where node starts`}</p>\n    <p>{`app.get('/', function(req, res) { //req and res are convention\nres.render('index');\n});`}</p>\n    <p>{`app.get('/blog/:title?', function(req, res) { //now we can access the blog page when it is empty\nvar title = req.params.title;\nif (title === undefined) {\nres.status(503); //good for bots to see this status codes\nres.send(\"This page is under construction\");\n} else {\nvar post = posts`}{`[title]`}{` || {};\nres.render('post', { post: post});\n}\n});`}</p>\n    <p>{`app.listen(3000, function(){\nconsole.log(\"The frontend server is running on port 3000!\");\n});`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`11. Scaffolding the\n    Templates\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Name your templates well`}</li>\n      <li parentName=\"ul\">{`Helps everyone for their team`}</li>\n    </ul>\n    <p>{`in the layout.jade`}</p>\n    <p>{`block content //add more renderhtml from here`}</p>\n    <p>{`To add the content from layout.jade:`}</p>\n    <p>{`extends ./layout.jade\nblock content //again`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`12. Adding Partials\n`}</code></pre>\n    <p>{`Too much code in the layout file with the nav etc.`}</p>\n    <p>{`Solve by moving everything in a partial called nav.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`make partials directors`}</li>\n    </ul>\n    <p>{`First file will be `}{`_`}{`nav.jade`}</p>\n    <p><em parentName=\"p\">{` - not used on its own! Sass usually uses this `}</em>{` naming convention before.`}</p>\n    <p>{`To use partial:\ninclude ./partials/`}{`_`}{`nav.jade`}</p>\n    <p>{`QUESTIONS:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Keeping your project's views/templates folder well organized is an important part of scaling your project.`}</li>\n    </ol>\n    <p>{`A: True`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Jade uses the `}<strong parentName=\"li\">{`_`}{`_`}</strong>{` keyword to break chunks of content up for use across different files, or to be changed dynamically.`}</li>\n    </ol>\n    <p>{`A: 'block' e.g. 'block content'`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`Partials are useful for including portions of a page like navbars and footers, that are the same, or almost the same across a number of pages.`}</li>\n    </ol>\n    <p>{`A: True`}</p>\n    <p>{`/////////////////`}</p>\n    <p>{`PART 5: SERVING STATIC FILES IN EXPRESS`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`        13. Setting Up the\nExpress Static Server\nin Development\n`}</code></pre>\n    <p>{`Static files: sent to client as is eg. images etc.`}</p>\n    <p>{`public dir:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Contains other folders:\ncss\njs\nimg etc.`}</li>\n    </ul>\n    <p>{`Middleware:`}</p>\n    <p>{`Middleware the logic on how to handle the a request in between when made by client but before it arrives at the route.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`included in Express.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`14. Add static to\n    the layout template\n`}</code></pre>\n    <p>{`Adding styles and js is easy.`}</p>\n    <p>{`In the head.jade template, punch through all of it.`}</p>\n    <p>{`link() in the head.jade`}</p>\n    <p>{`script() in the body.jade at the end`}</p>\n    <p>{`Notes:`}</p>\n    <p>{`Convention for static files is that they're stored in public.`}</p>\n    <p>{`/////////////////`}</p>\n    <p>{`PART 6: DOING MORE WITH EXPRESS`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`15. Marking Lists\n    in Jade Templates\n`}</code></pre>\n    <p>{`In the blog...`}</p>\n    <p>{`res.render('index')`}</p>\n    <p>{`We need files to be in an array from the .json file.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`eg.`}</li>\n    </ul>\n    <p>{`var postsLists = Object.keys(posts).map(function(value) {\nreturn posts`}{`[value]`}{`;\n});`}</p>\n    <ul>\n      <li parentName=\"ul\">{`map turns each array member into something that can have a callback function which can return the value.`}</li>\n    </ul>\n    <ol {...{\n      \"start\": 16\n    }}>\n      <li parentName=\"ol\">{`Using logic in Jade`}</li>\n    </ol>\n    <p>{`Powerful to just have one nav bar to edit and change.`}</p>\n    <p>{`So in Jade...`}</p>\n    <p>{`if path === '/'\n//indent everything to be here`}</p>\n    <p>{`If something doesn't fit and is undefined, then it is false.`}</p>\n    <p>{`in app.js\n//for the index`}</p>\n    <p>{`app.get('/', function(req, res) {\nvar path = req.path;\n//res.locals.path = path;\n//res.render('index');`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`//OR\n\nres.render('index', {path: path});\n`}</code></pre>\n    <p>{`});`}</p>\n    <p>{`QUESTIONS`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`res.locals`}</inlineCode>{` object stores`}</li>\n    </ol>\n    <p>{`A: Variables that will be accessible in the template`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`In the case of the Jade if block `}<inlineCode parentName=\"li\">{`if path === '/'`}</inlineCode>{`, the block's content would NOT be displayed in which of the following scenarios`}</li>\n    </ol>\n    <p>{`A: /blog`}</p>\n    <ol {...{\n      \"start\": 17\n    }}>\n      <li parentName=\"ol\">{`Use Express Generator`}</li>\n    </ol>\n    <p>{`We don't have to build an Express app from scratch`}</p>\n    <p>{`npm install -g express-generator`}</p>\n    <p>{`express `}<inlineCode parentName=\"p\">{`<appname>`}</inlineCode></p>\n    <p>{`npm start //this is a script`}</p>\n    <p>{`Instead of templates, it has views`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`18. REST APIs\n`}</code></pre>\n    <p>{`app.get('/posts', function(req,res) {\nif (req.query.raw) {\nres.json(posts);\n} else {\nres.json(postLists);\n}\n});`}</p>\n    <p>{`To allow to access as a hash:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`We can have /posts?raw=true`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}