{"version":3,"sources":["webpack:///../manual/Jest/Extending-Jest.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,+MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,wlGAqGL,0DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kX,sMAkBTJ,EAAWK,gBAAiB","file":"component---manual-jest-extending-jest-md-462fe61765e8d9830f3e.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"extending-jest\"\n    }}>{`Extending Jest`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// example file test/extensions.js\nimport { matcherHint, printReceived, printExpected } from 'jest-matcher-utils';\nimport chalk from 'chalk';\nimport 'jest-dom/extend-expect';\n\nconst extensions = {\n  toBeOn(toggleButton) {\n    const on = toggleButton.classList.contains('toggle-btn-on');\n    if (on) {\n      return {\n        message: () =>\n          [\n            \\`\\${matcherHint('.not.toBeOn', 'received', '')} \\${chalk.dim(\n              '// it does not have the toggle-btn-on class',\n            )}\\`,\n            \\`Expected the given element to not contain the class name:\\`,\n            \\`  \\${printExpected('toggle-btn-on')}\\`,\n            \\`Received element:\\`,\n            \\`  \\${printReceived(toggleButton)}\\`,\n            '',\n            \\`Because of this, \\${chalk.bold(\n              \\`the button is in an \\${chalk.underline('on')} state\\`,\n            )}\\`,\n            '',\n          ].join('\\\\n'),\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          [\n            \\`\\${matcherHint('.toBeOn', 'received', '')} \\${chalk.dim(\n              '// it has the toggle-btn-on class',\n            )}\\`,\n            '',\n            \\`Expected the given element to contain the class name:\\`,\n            \\`  \\${printExpected('toggle-btn-on')}\\`,\n            \\`Received element:\\`,\n            \\`  \\${printReceived(toggleButton)}\\`,\n            '',\n            \\`Because of this, \\${chalk.bold(\n              \\`the button is in an \\${chalk.underline('off')} state\\`,\n            )}\\`,\n            '',\n          ].join('\\\\n'),\n        pass: false,\n      };\n    }\n  },\n  toBeOff(toggleButton) {\n    const off = toggleButton.classList.contains('toggle-btn-off');\n    if (off) {\n      return {\n        message: () =>\n          [\n            \\`\\${matcherHint('.not.toBeOff', 'received', '')} \\${chalk.dim(\n              '// it does not have the toggle-btn-off class',\n            )}\\`,\n            \\`Expected the given element to not contain the class name:\\`,\n            \\`  \\${printExpected('toggle-btn-off')}\\`,\n            \\`Received element:\\`,\n            \\`  \\${printReceived(toggleButton)}\\`,\n            '',\n            \\`Because of this, \\${chalk.bold(\n              \\`the button is in an \\${chalk.underline('off')} state\\`,\n            )}\\`,\n            '',\n          ].join('\\\\n'),\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          [\n            \\`\\${matcherHint('.toBeOff', 'received', '')} \\${chalk.dim(\n              '// it has the toggle-btn-off class',\n            )}\\`,\n            '',\n            \\`Expected the given element to contain the class name:\\`,\n            \\`  \\${printExpected('toggle-btn-off')}\\`,\n            \\`Received element:\\`,\n            \\`  \\${printReceived(toggleButton)}\\`,\n            '',\n            \\`Because of this, \\${chalk.bold(\n              \\`the button is in an \\${chalk.underline('on')} state\\`,\n            )}\\`,\n            '',\n          ].join('\\\\n'),\n        pass: false,\n      };\n    }\n  },\n};\n\nexport { extensions };\n\n// helper func in \\`test/utils.js\\` that is used for startup\nexpect.extend(extensions);\n`}</code></pre>\n    <p>{`Then for an example of the usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`test('renders a toggle component', () => {\n  const handleToggle = jest.fn();\n  const { toggleButton, toggle } = renderToggle(\n    <Usage onToggle={handleToggle} />,\n  );\n  expect(toggleButton).toBeOff();\n  toggle();\n  expect(toggleButton).toBeOn();\n  expect(handleToggle).toHaveBeenCalledTimes(1);\n  expect(handleToggle).toHaveBeenCalledWith(true);\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}