{"version":3,"sources":["webpack:///../manual/JavaScript/JS-Unit-Testing-Mocha-Chai.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","href","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,iOAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,iBAAQ,CACN,GAAM,qBADR,qBAGA,iBAAGC,KAAK,YAAR,SATK,QAUJ,iBAAGA,KAAK,eAAR,SACD,uBACA,iBAAQ,CACN,GAAM,mBADR,mBAGA,4DACA,6FACA,uKACA,wDAAuC,sBAAQC,WAAW,KAAnB,QAAvC,cAA8F,0BAAYA,WAAW,KAAvB,QAA9F,kCAAiL,0BAAYA,WAAW,KAAvB,iBACjL,iBAAQ,CACN,GAAM,yBADR,yBAGA,+EAA8D,0BAAYA,WAAW,KAAvB,QAA9D,4CACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,0NAYL,0BAAS,0BAAYA,WAAW,KAAvB,QAAT,4BAAsF,0BAAYA,WAAW,KAAvB,SAAtF,2BACA,sBACE,kBAAIA,WAAW,MAAf,8CACA,kBAAIA,WAAW,MAAf,yDAEF,6FACA,yJACA,qEAAoD,0BAAYA,WAAW,KAAvB,aAApD,uGACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,4rCAgDL,kEACA,sEACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,+VAcL,2B,wNAKJL,EAAWM,gBAAiB","file":"component---manual-java-script-js-unit-testing-mocha-chai-md-b72af893bdefa974d893.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mocha-and-chai\"\n    }}>{`Mocha and Chai`}</h1>\n    <h2 {...{\n      \"id\": \"table-of-contents\"\n    }}>{`Table of Contents`}</h2>\n    <a href=\"#section\">title</a>\n---- <a href=\"#subsection\">title</a>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h2>\n    <p>{`BDD - Behaviour Driven Development `}</p>\n    <p>{`We want to put the test code in a file separate from the other code.`}</p>\n    <p>{`After install the dev dependency of mocha and chai, you can write a test.js file and then run \\`mocha test.js' and it will simply run the test!`}</p>\n    <p>{`To start making these tests, we `}<strong parentName=\"p\">{`NEED`}</strong>{` to make a `}<inlineCode parentName=\"p\">{`test`}</inlineCode>{` file in the same directory as `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"building-a-test-suite\"\n    }}>{`Building a test suite`}</h2>\n    <p>{`Write a test that will run the test using the npm task `}<inlineCode parentName=\"p\">{`test`}</inlineCode>{` and just reply an assertion to be true.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const expect = require('chai').expect;\n\n// Test suite\ndescribe('Mocha', () => {\n\n    // Test spec (unit test)\n    it('should run our test using npm', () => {\n        expect(true).to.be.ok;\n    });\n\n});\n`}</code></pre>\n    <p>{`A `}<inlineCode parentName=\"p\">{`spec`}</inlineCode>{` looks very similar to a `}<inlineCode parentName=\"p\">{`suite`}</inlineCode>{`. It takes 2 arguments.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A string describing the desired behaviour.`}</li>\n      <li parentName=\"ol\">{`A function that wraps all the expectations together.`}</li>\n    </ol>\n    <p>{`It's important to start guessing what the function might expect etc.`}</p>\n    <p>{`We do a lot of the guess work for setting the spec itself. It may feel awkward at the start, but it will help get some bearings.`}</p>\n    <p>{`Once the spec is written, if we actually get `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` returned, that is likely because the function hasn't been written and/or does not return anything.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`let expect = require('chai').expect;\n\ndescribe('checkForShip', () => {\n    const checkForShip = require('../path/to/src').checkForShip;\n    \n    // this is the test spec\n    it('should correctly report no ship at a given player's coordinate',  () => { \n\n        player = {\n            ships: [\n                {\n                    locations: [[0,0]]\n                }\n            ]\n        }\n\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n\n    it('should handle ships located at more than one coordinate',  () => { \n\n        player = {\n            ships: [\n                {\n                    locations: [[0,0], [0,1]]\n                }\n            ]\n        }\n\n        expect(checkForShip(player, [0, 1])).to.be.true;\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n\n    it('should handle ships located at more than one coordinate',  () => { \n\n        player = {\n            ships: [\n                {\n                    locations: [[0,0], [0,1]]\n                }\n            ]\n        }\n\n        expect(checkForShip(player, [0, 1])).to.be.true;\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n});\n`}</code></pre>\n    <p>{`// example in the /src/js/ship_methods.js`}</p>\n    <p>{`function checkForShip (player, coordinates) {`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`var shipPresent, ship;\n\nfor (var i = 0; i < player.ships.length; i++) {\n    ship = player.ships[i];\n\n    shipPresent = ship.locations.filter( (actualCoordinate) => {\n        return (actualCoordinate[0] === coordinates[0]) && (actualCoordinate[1] === coordinates[1]);\n    })[0];\n\n    if (!shipPresent) {\n        return false;\n    }\n}\n`}</code></pre>\n    <p>{`}`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}