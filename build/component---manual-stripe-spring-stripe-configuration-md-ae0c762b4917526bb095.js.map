{"version":3,"sources":["webpack:///../manual/Stripe/Spring-Stripe-Configuration.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,8NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oCADR,oCAGA,gGACA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,4DADQ,sBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8CADQ,kCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gCADQ,eAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uFADQ,uBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gDADQ,6BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,kHADQ,0BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,kFADQ,wCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,2DADQ,sCAItB,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,8QAQL,iBAAQ,CACN,GAAM,qBADR,sBAGA,+DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kxBAoCL,iBAAQ,CACN,GAAM,sBADR,sBAGA,iGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,yEAOL,iBAAQ,CACN,GAAM,mCADR,mCAGA,2BAAU,0BAAYA,WAAW,KAAvB,yCAAV,wBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,yTAeL,iBAAQ,CACN,GAAM,wBADR,wBAGA,2BAAU,0BAAYA,WAAW,KAAvB,0CAAV,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,m4BAoCL,iBAAQ,CACN,GAAM,6BADR,6BAGA,2BAAU,0BAAYA,WAAW,KAAvB,oDAAV,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0/CA2CL,iBAAQ,CACN,GAAM,sBADR,uBAGA,4BAAW,0BAAYA,WAAW,KAAvB,mBAAX,2BAAkG,0BAAYA,WAAW,KAAvB,qBAAlG,sBACA,iEAAgD,0BAAYA,WAAW,KAAvB,yFAAhD,6DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,oIASL,0DAAyC,0BAAYA,WAAW,KAAvB,sBAAzC,iE,qNAKJJ,EAAWK,gBAAiB","file":"component---manual-stripe-spring-stripe-configuration-md-ae0c762b4917526bb095.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"java-spring-stripe-configuration\"\n    }}>{`Java Spring Stripe Configuration`}</h1>\n    <p>{`In this short example, we are going to \"Hello, World!\" a Stripe charge!`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.dennisokeeffe.com/manual-java-gradle-intro\"\n        }}>{`Gradle Intro Docs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://spring.io/guides/gs/rest-service/\"\n        }}>{`Spring Guide to Rest Services`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/api\"\n        }}>{`Stripe API`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stackabuse.com/stripe-integration-with-java-spring-for-payment-processing/\"\n        }}>{`Stripe with Spring`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stripe/stripe-java#usage\"\n        }}>{`Stripe Github Java Usage`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html\"\n        }}>{`Spring ResponseEntity`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.tutorialspoint.com/spring_boot/spring_boot_service_components.htm\"\n        }}>{`Tutorials Point: Service Components`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://gist.github.com/fteychene/1e5c30fc86d7623084d0\"\n        }}>{`Basic Spring Boot Gitignore file`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"setup\"\n    }}>{`Setup`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mkdir hello-spring-stripe && cd hello-spring-stripe\nmkdir -p src/main/java/stripe\ntouch build.gradle src/main/java/stripe/StripeCharge.java src/main/java/stripe/StripeChageController.java src/main/java/stripe/Application.java .env\n# init gradle\ngradle wrapper\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setup-buildgradle\"\n    }}>{`Setup build.gradle`}</h2>\n    <p>{`Add the following for Stripe + Spring:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`buildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath(\"org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE\")\n    }\n}\n\napply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'idea'\napply plugin: 'org.springframework.boot'\napply plugin: 'io.spring.dependency-management'\n\nbootJar {\n    baseName = 'hello-spring-jar'\n    version =  '0.1.0'\n}\n\nrepositories {\n    mavenCentral()\n}\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\ndependencies {\n    compile(\"com.stripe:stripe-java:16.5.1\")\n    compile(\"org.springframework.boot:spring-boot-starter-web\")\n    compile(\"io.github.cdimascio:java-dotenv:5.1.3\")\n    testCompile('org.springframework.boot:spring-boot-starter-test')\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"set-up-dotenv-file\"\n    }}>{`Set up dotenv file`}</h2>\n    <p>{`We are using a local dotenv file for this \"Hello, World!\" level example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# required\nSK_TEST_KEY=sk_...\n# not required\nPK_TEST_KEY=pk_...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-the-main-application\"\n    }}>{`Setting up the main application`}</h2>\n    <p>{`In `}<inlineCode parentName=\"p\">{`src/main/java/stripe/Application.java`}</inlineCode>{`, add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package stripecharge;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\n  public static void main(String[] args) {\n    SpringApplication.run(Application.class, args);\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-the-model\"\n    }}>{`Setting up the model`}</h2>\n    <p>{`In `}<inlineCode parentName=\"p\">{`src/main/java/stripe/StripeCharge.java`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package stripecharge;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class StripeCharge {\n\n  private final long amount;\n  private final String receiptEmail;\n  private final String source;\n  private final String currency;\n\n  public StripeCharge(long amount, String receiptEmail) {\n    this.amount = amount;\n    this.source = \"tok_visa\";\n    this.currency = \"usd\";\n    this.receiptEmail = receiptEmail;\n  }\n\n  public Map<String, Object> getCharge() {\n    Map<String, Object> params = new HashMap<String, Object>();\n    params.put(\"amount\", this.amount);\n    params.put(\"currency\", this.currency);\n    // source should obtained with Stripe.js\n    params.put(\"source\", this.source);\n    params.put(\n      \"description\",\n      \"My First Test Charge (created for API docs)\"\n    );\n    params.put(\"receipt_email\",this.receiptEmail);\n    return params;\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-the-controller\"\n    }}>{`Setting up the controller`}</h2>\n    <p>{`In `}<inlineCode parentName=\"p\">{`src/main/java/stripe/StripeChargeController.java`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package stripecharge;\n\n// NOTE: RequestMapping + RequestParam not required for this demo\n// but kept in for reference purposes if wanted to play around later\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.RestController;\nimport io.github.cdimascio.dotenv.Dotenv;\nimport com.stripe.Stripe;\nimport com.stripe.exception.StripeException;\nimport com.stripe.model.Charge;\nimport com.stripe.net.RequestOptions;\n\n@RestController\n@RequestMapping(\"/api\")\npublic class StripeChargeController {\n\n  @PostMapping(\"/charge\")\n  public ResponseEntity<String> createCharge(@RequestBody StripeCharge stripeCharge) {\n    try {\n      // for demonstrations sake, using .env file\n      Dotenv dotenv = Dotenv.load();\n\n      // creating the charge\n      Stripe.apiKey = dotenv.get(\"SK_TEST_KEY\");\n      Charge charge = Charge.create(stripeCharge.getCharge());\n      System.out.println(charge);\n      return new ResponseEntity<String>(\"Success\", HttpStatus.CREATED);\n    } catch (StripeException e) {\n      e.printStackTrace();\n      return new ResponseEntity<String>(\"Failure\", HttpStatus.INTERNAL_SERVER_ERROR);\n\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"build-run-and-ping\"\n    }}>{`Build, Run and Ping`}</h2>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`./gradlew build`}</inlineCode>{` to build to project or `}<inlineCode parentName=\"p\">{`./gradlew bootRun`}</inlineCode>{` to build and run.`}</p>\n    <p>{`Once the project is running, we can ping `}<inlineCode parentName=\"p\">{`http POST http://localhost:8080/api/charge amount:=200 receiptEmail=hello@example.com`}</inlineCode>{` (using HTTPie) and we get a response like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`HTTP/1.1 201\nContent-Length: 7\nContent-Type: application/json;charset=UTF-8\nDate: Sun, 12 Jan 2020 03:33:10 GMT\n\nSuccess\n`}</code></pre>\n    <p>{`Check your Stripe Dashboard under `}<inlineCode parentName=\"p\">{`Developer > Events`}</inlineCode>{` and you'll see we have successfully made a payment! Hooray!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}