(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{"04SK":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return l})),t.d(n,"default",(function(){return i}));t("1c7q"),t("abGl"),t("gZHo"),t("Fdmb"),t("Ir+3"),t("2mQt"),t("mXGw");var r=t("/FXl"),s=t("TjRS");t("aD51");function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/Design-Patterns/Chain-Of-Responsibility.md"}});var c={_frontmatter:l},o=s.a;function i(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,["components"]);return Object(r.b)(o,a({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"chain-of-responsibility"},"Chain Of Responsibility"),Object(r.b)("p",null,"Purpose: Behavioural\nType: Object"),Object(r.b)("h2",{id:"about"},"About"),Object(r.b)("p",null,"Used to achieve loose coupling where a request from a client is passed to a chain of objects to process them. The object in the chain will decide whether the request moves onto the next object in the chain or not."),Object(r.b)("p",null,"Applicable when:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Decoupling request's sender and reciever"),Object(r.b)("li",{parentName:"ul"},"Multiple objects, determined at runtime, are candidates to handle a request"),Object(r.b)("li",{parentName:"ul"},"Don't want to specific handlers explicitly"),Object(r.b)("li",{parentName:"ul"},"Want to issue a request to one of several objects without explicitly specifying the reciever")),Object(r.b)("h2",{id:"components"},"Components"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Handler: An interface which will primarily recieve the request and dispatch that request to the chain of handlers."),Object(r.b)("li",{parentName:"ul"},"Concrete handlers: Handlers that actually handle the request chained in some sequential order."),Object(r.b)("li",{parentName:"ul"},"Client: Originator of request and will access handler to handle it.")),Object(r.b)("h2",{id:"proscons"},"Pros/Cons"),Object(r.b)("p",null,"Pros:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Reduce coupling degree."),Object(r.b)("li",{parentName:"ul"},"Flexible, simplified objct that does not need to know the chain structure."),Object(r.b)("li",{parentName:"ul"},"Convenient to increase request processing.")),Object(r.b)("p",null,"Cons:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"No guarantee for request recieved."),Object(r.b)("li",{parentName:"ul"},"Performance of system affected, but also code debugging may not be so easy and could by cyclical."),Object(r.b)("li",{parentName:"ul"},"Observability of operation characteristcs not so easy.")),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-typescript"}),'class Handler {\n  private _successor: Handler;\n\n  public set successor(successor: Handler) {\n    this._successor = successor;\n  }\n\n  public get successor() {\n    return this._successor;\n  }\n\n  public handleRequest(msg: Number): void {}\n}\n\nclass ConcreteHandlerA extends Handler {\n  handleRequest(req: Number): void {\n    if (req > 0) {\n      console.log(`Handler A process ${req}`);\n    } else {\n      this.successor.handleRequest(req);\n    }\n  }\n}\n\nclass ConcreteHandlerB extends Handler {\n  handleRequest(req: Number): void {\n    if (req < 0) {\n      console.log(`Handler B process ${req}`);\n    } else {\n      this.successor.handleRequest(req);\n    }\n  }\n}\n\nclass ConcreteHandlerC extends Handler {\n  handleRequest(req: Number): void {\n    if (req === 0) {\n      console.log(`Handler C process ${req}`);\n    } else {\n      this.successor.handleRequest(req);\n    }\n  }\n}\n\n(function main() {\n  const reqA = new ConcreteHandlerA();\n  const reqB = new ConcreteHandlerB();\n  const reqC = new ConcreteHandlerC();\n\n  // set the chain or responsibility\n  reqA.successor = reqB;\n  reqB.successor = reqC;\n\n  // handle the requests\n  reqA.handleRequest(0); // logs "Handler C process 0"\n  reqA.handleRequest(1); // logs "Handler A process 1"\n  reqA.handleRequest(-1); // logs "Handler B process -1"\n})();\n')),Object(r.b)("h2",{id:"resources"},"Resources"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",a({parentName:"li"},{href:"https://www.geeksforgeeks.org/chain-responsibility-design-pattern/"}),"C# Implementation"))))}i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/Design-Patterns/Chain-Of-Responsibility.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-design-patterns-chain-of-responsibility-md-2ceb8e1fcc627a77b18c.js.map