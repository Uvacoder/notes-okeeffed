{"version":3,"sources":["webpack:///../manual/Mock-Service-Worker/msw-with-React.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,8NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sEADQ,+BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mDADQ,uCAItB,iBAAQ,CACN,GAAM,cADR,cAGA,wDAAuC,0BAAYA,WAAW,KAAvB,wBAAvC,wBAAgI,0BAAYA,WAAW,KAAvB,UAAhI,eACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,0BAIL,iBAAQ,CACN,GAAM,8BADR,8BAGA,oCAAmB,0BAAYA,WAAW,KAAvB,0BACnB,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+eA6BL,iBAAQ,CACN,GAAM,8BADR,8BAGA,oCAAmB,0BAAYA,WAAW,KAAvB,yBACnB,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oIAOL,0EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4SAmBL,iBAAQ,CACN,GAAM,mCADR,qCAGA,oCAAmB,0BAAYA,WAAW,KAAvB,uBAAnB,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mMAQL,4FAA2E,0BAAYA,WAAW,KAAvB,qBAA3E,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4tBAoBL,wFAAuE,0BAAYA,WAAW,KAAvB,OAAvE,8BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mkBAsBL,kGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uqC,qNAuCTJ,EAAWK,gBAAiB","file":"component---manual-mock-service-worker-msw-with-react-md-19adcfd9eb5e805fbb10.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"msw-with-react\"\n    }}>{`msw with React`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mswjs/examples/tree/master/examples/rest-react\"\n        }}>{`React MSW Example - GitHub`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/stop-mocking-fetch\"\n        }}>{`Stop mocking fetch - Kent C Dodds`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"setting-up\"\n    }}>{`Setting up`}</h2>\n    <p>{`You need to have msw generate a `}<inlineCode parentName=\"p\">{`mockServiceWorker.js`}</inlineCode>{` file for you in the `}<inlineCode parentName=\"p\">{`public`}</inlineCode>{` directory.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`npx msw init public\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-you-mock-handlers\"\n    }}>{`Creating you mock handlers`}</h2>\n    <p>{`Create file `}<inlineCode parentName=\"p\">{`src/mocks/handlers.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { rest } from 'msw';\n\nexport const handlers = [\n  rest.get('/api/v1/todos', (_, res, ctx) => {\n    return res(\n      ctx.delay(1500),\n      ctx.json([\n        {\n          id: '1',\n          title: 'Mocked API',\n          done: false,\n        },\n        {\n          id: '2',\n          title: 'Task Two',\n          done: false,\n        },\n        {\n          id: '3',\n          title: 'Task Three',\n          done: false,\n        },\n      ]),\n    );\n  }),\n];\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-for-the-browser\"\n    }}>{`Setting up for the browser`}</h2>\n    <p>{`Create file `}<inlineCode parentName=\"p\">{`src/mocks/browser.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { setupWorker } from 'msw';\nimport { handlers } from './handlers';\n\nexport const worker = setupWorker(...handlers);\n`}</code></pre>\n    <p>{`Within your index file for the React application:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ...\n\n// Start the mocking conditionally.\nif (process.env.NODE_ENV === 'development') {\n  const { worker } = require('./mocks/browser');\n  worker.start();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// ...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-for-node-and-testing\"\n    }}>{`Setting up for Node (and testing)`}</h2>\n    <p>{`Create file `}<inlineCode parentName=\"p\">{`src/mocks/server.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { setupServer } from 'msw/node';\nimport { handlers } from './handlers';\n\n// Setup requests interception using the given handlers.\nexport const server = setupServer(...handlers);\n`}</code></pre>\n    <p>{`When setting up for tests, you'll need to setup some Jest config in `}<inlineCode parentName=\"p\">{`src/setupTests.ts`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// src/test/setup-env.js\n\n// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n// test/setup-env.js\n// add this to your setupFilesAfterEnv config in jest so it's imported for every test file\nimport { server } from './mocks/server.js';\n\nbeforeAll(() => server.listen());\n// if you need to add a handler after calling setupServer for some specific test\n// this will remove that handler for the rest of them\n// (which is important for test isolation):\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n`}</code></pre>\n    <p>{`An example test of running a lifecycle that is being stubbed by `}<inlineCode parentName=\"p\">{`msw`}</inlineCode>{` looks like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport App from './App';\n\ndescribe('rendering the App component', () => {\n  describe('rendering the Todo List', () => {\n    test('shows todo items on successful state cycle', async () => {\n      render(<App />);\n\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n      await waitForElementToBeRemoved(() => screen.getByText(/loading/i));\n      expect(screen.getByText(/mocked api/i)).toBeInTheDocument();\n    });\n  });\n});\n`}</code></pre>\n    <p>{`For overriding tests with a different response, we can inline the server:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport { render, screen, waitForElementToBeRemoved } from '../test/test-utils';\nimport { TodoList } from './App';\nimport { rest } from 'msw';\nimport { server } from './mocks/server';\n\ndescribe('rendering the App component', () => {\n  describe('rendering the Todo List', () => {\n    test('shows todo items on successful state cycle', async () => {\n      render(<TodoList />);\n\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n      await waitForElementToBeRemoved(() => screen.getByText(/loading/i));\n      expect(screen.getByText(/mocked api/i)).toBeInTheDocument();\n    });\n\n    test('shows a failed request message when server request fails', async () => {\n      server.use(\n        rest.get('/api/v1/todos', (_, res, ctx) => {\n          return res(ctx.status(500), ctx.json({ message: 'Internal error' }));\n        }),\n      );\n\n      render(<TodoList />);\n\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n      await waitForElementToBeRemoved(() => screen.getByText(/loading/i));\n      expect(screen.getByText(/request failed/i)).toBeInTheDocument();\n      screen.debug();\n    });\n  });\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}