{"version":3,"sources":["webpack:///../manual/npm/npm-cheat-sheet.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,+MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,iBAAQ,CACN,GAAM,4BADR,4BAGA,uBAAK,sBAAMC,WAAW,OAAU,IAA3B,kBAEL,iBAAQ,CACN,GAAM,2BADR,2BAGA,iBAAQ,CACN,GAAM,0CADR,0CAGA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,mGAKL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oIAQL,iBAAQ,CACN,GAAM,yCADR,yCAGA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,gCAEL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,soDAwDL,iBAAQ,CACN,GAAM,iEADR,iEAGA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,yCAEL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0VAeL,iBAAQ,CACN,GAAM,6DADR,6DAGA,8EACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,uCAEL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oQ,sMAmBTJ,EAAWK,gBAAiB","file":"component---manual-npm-npm-cheat-sheet-md-76ce6860e0decda49ef4.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"npm-help-sheet\"\n    }}>{`npm help sheet`}</h1>\n    <h2 {...{\n      \"id\": \"install-npm-dependencies\"\n    }}>{`install npm dependencies`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"useful-npm-dependencies\"\n    }}>{`USEFUL NPM DEPENDENCIES`}</h2>\n    <h4 {...{\n      \"id\": \"mongoose---database-helper-for-mongodb\"\n    }}>{`MONGOOSE - database helper for MongoDB`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install --save mongoose\n\nmongod // starts the daemon\nmongo // check out the documents\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n\n// in app.js\nvar User = require('../models/user');\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"bcrypt---used-for-hashing-and-salting\"\n    }}>{`BCRYPT - used for hashing and salting`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install --save bcrypt\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// in User.js\nvar bcrypt = require('bcrypt');\nUserSchema.pre('save', function(next) {\n    var user = this;\n    bcrypt.hash(user.password, 10, function(err, hash) {\n        if (err) {\n            return next(err);\n        }\n        user.password = hash;\n        next();\n    })\n});\n\nUserSchema.statics.authenticate = function(email, password, callback) {\n    User.findOne({ email: email })\n        .exec(function (error, user) {\n            if (error) {\n                return callback(error);\n            } else if (!user) {\n                var err = new Error('User not found.');\n                err.status = 401;\n                return callback(err);\n            }\n            bcrypt.compare(password, user.password, function (error, result) {\n                if (result === true) {\n                    return callback(null, user);\n                } else {\n                    return callback();\n                }\n            });\n        });\n}\n\n// Example in app.js for Express\n\nrouter.post('/login', function(req, res, next) {\n    if (req.body.email && req.body.password) {\n        User.authenticate(req.body.email, req.body.password, function (error, user) {\n            if (error || !user) {\n                var err = new Error('Wrong email or password.');\n                err.status = 401;\n                return next(err);\n            } else {\n                req.session.userId = user._id;\n                return res.redirect('/profile');\n            }\n        });\n    } else {\n        var err = new Error('Email and password are required.');\n        err.status = 401;\n        return next(err);\n    }\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"express-session---save-sessions-to-use-throughout-the-website\"\n    }}>{`EXPRESS SESSION - save sessions to use throughout the website`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install express-session --save\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// in app.js\n\nvar session = require('express-session');\n\n// use sessions for tracking logins - check more in the readme\napp.use(session({\n    secret: 'treehouse loves you',\n    resave: true,\n    saveUninitialized: false\n}));\n\n// not useful when in production. check https://github.com/expressjs/session#compatible-session-stores\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"connect-mongo---used-for-quick-middleware-access-to-mongo\"\n    }}>{`CONNECT-MONGO - used for quick middleware access to Mongo`}</h4>\n    <p>{`connect-mongo is a middleware already written for us!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install connect-mongo --save\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`require MongoStore = require('connect-mongo')(session);\n\n// in app.js\n\napp.use(session({\n    secret: 'treehouse loves you',\n    resave: true,\n    saveUninitialized: false\n    store: new MongoStore({\n        mongooseConnection: db\n    })\n}));\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}