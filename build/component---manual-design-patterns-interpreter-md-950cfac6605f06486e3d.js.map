{"version":3,"sources":["webpack:///../manual/Design-Patterns/Interpreter.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,8BADR,8BAGA,0DAEA,wGACA,0NACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,sBACE,kBAAIC,WAAW,MAAf,sEACA,kBAAIA,WAAW,MAAf,kEACA,kBAAIA,WAAW,MAAf,sHACA,kBAAIA,WAAW,MAAf,wCACA,kBAAIA,WAAW,MAAf,qHAEF,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2zBA2CL,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,2CADQ,kBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sDADQ,+B,8MAQ1BJ,EAAWK,gBAAiB","file":"component---manual-design-patterns-interpreter-md-950cfac6605f06486e3d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"interpreter-design-pattern\"\n    }}>{`Interpreter Design Pattern`}</h1>\n    <p>{`Purpose: Behavioural\nType: Class`}</p>\n    <p>{`The Interpreter Design Pattern specifies how to evaluate sentences in a string.`}</p>\n    <p>{`The idea is to have a class for each symbol. The syntax tree of a sentence in the language is an instance of the composite pattern and is used to evaluate (intrepret) the sentence for a client.`}</p>\n    <h2 {...{\n      \"id\": \"participants\"\n    }}>{`Participants`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`AbstractExpression (declares interpret method common to all nodes)`}</li>\n      <li parentName=\"ul\">{`TerminalExpression (interpret terminal symbols in the grammar)`}</li>\n      <li parentName=\"ul\">{`NonTerminalExpression (maintains instance variables of type AbstractExpression for nonterminal symbols in grammar)`}</li>\n      <li parentName=\"ul\">{`Context (info global to interpreter)`}</li>\n      <li parentName=\"ul\">{`Client (builds abstract syntax tree representing a particular sentence in the language that the grammar defines)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class Context {\n  private _input;\n\n  constructor(input) {\n    this._input = input;\n  }\n\n  public set input(value) {\n    this._input = value;\n  }\n}\n\ninterface Expression {\n  interpret(context: Context): void;\n}\n\nclass TerminalExpression implements Expression {\n  interpret(context: Context): void {\n    // process comma\n    console.log('interpret terminal');\n  }\n}\n\nclass NoneTerminalExpression implements Expression {\n  interpret(context: Context): void {\n    // process variable\n    console.log('interpret nonterminal');\n  }\n}\n\n(function main() {\n  const context: Context = new Context('1 bird can fly');\n  const list = [];\n  list.push(new TerminalExpression());\n  list.push(new NoneTerminalExpression());\n\n  list.map((exp: Expression) => {\n    exp.interpret(context);\n  });\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://ruslanspivak.com/lsbasi-part7/\"\n        }}>{`AST in action`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.baeldung.com/java-interpreter-pattern\"\n        }}>{`Java Interpreter for SQL`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}