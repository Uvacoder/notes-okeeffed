{"version":3,"sources":["webpack:///../manual/TypeScript/Production-TypeScript-Course.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,mOAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sCADR,sCAGA,kHACA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,+DADQ,wCAItB,iBAAQ,CACN,GAAM,yCADR,0CAGA,sJACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6EAIL,4CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8JAcL,iBAAQ,CACN,GAAM,gBADR,gBAGA,mCAAkB,0BAAYA,WAAW,KAAvB,wBAAlB,0EAA6J,sBAAQA,WAAW,KAAnB,oBAA7J,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iKAcL,4EAA2D,0BAAYA,WAAW,KAAvB,WAA3D,iBACA,iBAAQ,CACN,GAAM,uCADR,wCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4DAIL,wDAAuC,0BAAYA,WAAW,KAAvB,QAAvC,wCACA,iBAAQ,CACN,GAAM,wBADR,wBAGA,uCAAsB,sBAAQA,WAAW,KAAnB,wBAAtB,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0jBAuBL,iBAAQ,CACN,GAAM,+BADR,+BAGA,+EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oTAiBL,iBAAQ,CACN,GAAM,0BADR,0BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0DAIL,iBAAQ,CACN,GAAM,aADR,aAGA,qBAAG,0BAAYA,WAAW,KAAvB,oBAAH,4FACA,iBAAQ,CACN,GAAM,+BADR,+BAGA,uCAAsB,0BAAYA,WAAW,KAAvB,WAAtB,6BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2UAkBL,mDAAkC,sBAAQA,WAAW,KAAnB,yCAAlC,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ofAsBL,iBAAQ,CACN,GAAM,wCADR,yCAGA,gEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,mFASL,iBAAQ,CACN,GAAM,oBADR,oBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oH,0NAUTJ,EAAWK,gBAAiB","file":"component---manual-type-script-production-type-script-course-md-cc87ff7f3dc025d2f825.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"production-grade-typescript-course\"\n    }}>{`Production-Grade TypeScript Course`}</h1>\n    <p>{`This course goes over some of the features from early on as opposed to the entire course.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/production-typescript/\"\n        }}>{`Production-Grade TypeScript Course`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"optional-chaining--nullish-coalescing\"\n    }}>{`Optional Chaining & Nullish Coalescing`}</h2>\n    <p>{`Optional chaining which is used for early termination from object access. Note that this adds complexity to managin the code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const value = obj.levelOneKey?.value // levelOneKey may not be defined\n`}</code></pre>\n    <p>{`Nullish Coalescing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class Foo {\n  name;\n\n  constructor(rawName?: string) {\n    this.name = rawName ?? '(no name)'\n  }\n\n  log() {\n    console.log(this.name)\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"true-privacy\"\n    }}>{`True Privacy`}</h2>\n    <p>{`If you had `}<inlineCode parentName=\"p\">{`private name: string`}</inlineCode>{` in a class and someone runs a debugger, previously the variable would `}<strong parentName=\"p\">{`still be visible`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class Foo {\n  #name;\n\n  constructor(rawName?: string) {\n    this.#name = rawName ?? '(no name)'\n  }\n\n  log() {\n    console.log(this.#name)\n  }\n}\n`}</code></pre>\n    <p>{`At runtime, it won't be there anymore, whereas with `}<inlineCode parentName=\"p\">{`private`}</inlineCode>{` it would be!`}</p>\n    <h2 {...{\n      \"id\": \"tuple-types--recursive-type-aliases\"\n    }}>{`Tuple Types & Recursive Type Aliases`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type Foo<T extends any[]> = [boolean, ...T, boolean];\n`}</code></pre>\n    <p>{`Before TS 4, you could only put `}<inlineCode parentName=\"p\">{`...T`}</inlineCode>{` at the end, however now you do not.`}</p>\n    <h3 {...{\n      \"id\": \"labelled-tuple-types\"\n    }}>{`Labelled tuple types`}</h3>\n    <p>{`There are also `}<strong parentName=\"p\">{`labelled tuple types`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type Address = [number, string, number, string];\n\n// take everything from address in order\nfunction printAddress(...address: Address) {\n  // omitted\n}\n\n// we get a terrible typing experience that doesn't explain much\nprintAddress()\n\n// We can fix this with labelled tuple types!\ntype Address = [streetNumber: number, city: string, state: string, postal: number]\n\n// take everything from address in order\nfunction printAddress(...address: Address) {\n  // omitted\n}\n\n// Happier experience that gives more information for the tuple!\nprintAddress()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"type-aliases-and-interfaces\"\n    }}>{`Type aliases and interfaces`}</h3>\n    <p>{`A good example of this is now it can be used for JSON.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// old way from TS v3\ntype JSONValue = string | number | boolean | null | JSONArray | JSONObject;\ninterface JSONArray extends Array<JSONValues> {}\n\n// new way from TS v4\ntype JSONValue =\n  | string\n  | number\n  | boolean\n  | null\n  | JSONValue[]\n  | {\n      [k: string]: JSONValue;\n    };\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"template-type-literals\"\n    }}>{`Template type literals`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type Corner = \\`\\${'top'|'bottom'}-\\${'left'|'right'}\\`\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ts-errors\"\n    }}>{`TS Errors`}</h2>\n    <p><inlineCode parentName=\"p\">{`@ts-expect-error`}</inlineCode>{` helps suppress an error. That being said, if there IS no error, it will throw an error!`}</p>\n    <h2 {...{\n      \"id\": \"error-handling-with-unknown\"\n    }}>{`Error Handling with Unknown`}</h2>\n    <p>{`You SHOULD use `}<inlineCode parentName=\"p\">{`unknown`}</inlineCode>{` for throwing errors now.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function somethingRisky() {}\n\ntry {\n  somethingRisky();\n  // in case it removes itself, this should be \\`err: unknown\\`\n} catch (err) {\n  // DON'T forces us to handle the error type\n  console.log(err.stack);\n  // DO\n  if (err instanceof Error) {\n    console.log(err.stack);\n  } else {\n    console.log(err);\n  }\n}\n`}</code></pre>\n    <p>{`We can also add a function `}<strong parentName=\"p\">{`which should only be used for testing`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// before TS 3.7\nfunction isError(err: any): err is Error {\n  return err instanceof Error\n}\n\n// after - described as something that should be more in a test suite\nfunction assertIsError(err:any): asserts err is Error {\n  if (!(err instanceof Error)) throw new Error(\\`Not an error: \\${err}\\`)\n}\n\nfunction somethingRisky() {}\n\ntry {\n  somethingRisky();\n  // in case it removes itself, this should be \\`err: unknown\\`\n} catch (err) {\n  assertIsError(err)\n  console.log(err.stack);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"declaration-files--type-only-imports\"\n    }}>{`Declaration Files & Type-only imports`}</h2>\n    <p>{`You can now generate type files for JS.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"checkJs\": true\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"type-only-import\"\n    }}>{`type-only import`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import type { useAsyncDataEffect } from 'path/to/module'\n\n// now just uses their type \\`useAsyncDataEffect\\`\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}