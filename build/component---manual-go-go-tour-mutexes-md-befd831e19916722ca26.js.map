{"version":3,"sources":["webpack:///../manual/Go/Go-Tour-Mutexes.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,8MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,iBAAQ,CACN,GAAM,aADR,cAGA,8FACA,0KACA,6IACA,6EAA4D,0BAAYC,WAAW,KAAvB,cAA5D,yBACA,sBACE,kBAAIA,WAAW,MAAf,QACA,kBAAIA,WAAW,MAAf,WAEF,0HAAyG,0BAAYA,WAAW,KAAvB,QAAzG,QAAkK,0BAAYA,WAAW,KAAvB,UAAlK,gCACA,wCAAuB,0BAAYA,WAAW,KAAvB,SAAvB,mDAA4H,0BAAYA,WAAW,KAAvB,SAA5H,YACA,iBAAQ,CACN,GAAM,uBADR,uBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,+6B,qMAgDTJ,EAAWK,gBAAiB","file":"component---manual-go-go-tour-mutexes-md-befd831e19916722ca26.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"go-tour-mutexes\"\n    }}>{`Go Tour Mutexes`}</h1>\n    <h2 {...{\n      \"id\": \"syncmutex\"\n    }}>{`sync.Mutex`}</h2>\n    <p>{`We've seen how channels are great for communication among goroutines.`}</p>\n    <p>{`But what if we don't need communication? What if we just want to make sure only one goroutine can access a variable at a time to avoid conflicts?`}</p>\n    <p>{`This concept is called mutual exclusion, and the conventional name for the data structure that provides it is mutex.`}</p>\n    <p>{`Go's standard library provides mutual exclusion with `}<inlineCode parentName=\"p\">{`sync.Mutex`}</inlineCode>{` and its two methods:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Lock`}</li>\n      <li parentName=\"ul\">{`Unlock`}</li>\n    </ul>\n    <p>{`We can define a block of code to be executed in mutual exclusion by surrounding it with a call to `}<inlineCode parentName=\"p\">{`Lock`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Unlock`}</inlineCode>{` as shown on the Inc method.`}</p>\n    <p>{`We can also use `}<inlineCode parentName=\"p\">{`defer`}</inlineCode>{` to ensure the mutex will be unlocked as in the `}<inlineCode parentName=\"p\">{`Value`}</inlineCode>{` method.`}</p>\n    <h2 {...{\n      \"id\": \"basic-mutex-example\"\n    }}>{`Basic Mutex Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n\n// SafeCounter is safe to use concurrently.\ntype SafeCounter struct {\n    v   map[string]int\n    mux sync.Mutex\n}\n\n// Inc increments the counter for the given key.\nfunc (c *SafeCounter) Inc(key string) {\n    c.mux.Lock()\n    // Lock so only one goroutine at a time can access the map c.v.\n    c.v[key]++\n    c.mux.Unlock()\n}\n\n// Value returns the current value of the counter for the given key.\nfunc (c *SafeCounter) Value(key string) int {\n    c.mux.Lock()\n    // Lock so only one goroutine at a time can access the map c.v.\n    defer c.mux.Unlock()\n    return c.v[key]\n}\n\nfunc main() {\n    c := SafeCounter{v: make(map[string]int)}\n    fmt.Println(c.v) // map[]\n\n    for i := 0; i < 1000; i++ {\n        go c.Inc(\"somekey\")\n    }\n\n    time.Sleep(time.Second) // delay during async goroutine\n    fmt.Println(c.Value(\"somekey\")) // 1000\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}