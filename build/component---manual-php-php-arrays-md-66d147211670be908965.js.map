{"version":3,"sources":["webpack:///../manual/PHP/PHP-Arrays.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,0MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iCADR,iCAGA,oHACA,kGACA,iBAAQ,CACN,GAAM,QADR,QAGA,8BAAa,0BAAYC,WAAW,KAAvB,cAAb,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+KAOL,0CAAyB,0BAAYA,WAAW,KAAvB,UAAzB,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wOAWL,0CAAyB,0BAAYA,WAAW,KAAvB,kBAAzB,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mPAQL,iBAAQ,CACN,GAAM,OADR,OAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uLAOL,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yLAOL,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mLAOL,iBAAQ,CACN,GAAM,qCADR,sCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,ixCA2DL,iBAAQ,CACN,GAAM,4BADR,6BAGA,qBAAG,mBAAGA,WAAW,KAAQ,CACrB,KAAQ,kEADT,mE,iMAOPJ,EAAWK,gBAAiB","file":"component---manual-php-php-arrays-md-66d147211670be908965.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"php-array-method-applications\"\n    }}>{`PHP Array Method Applications`}</h1>\n    <p>{`This covers the basic actions of applying a push, pop, shift and unshift function with PHP.`}</p>\n    <p>{`These functions are incredibly useful for data structure implementations.`}</p>\n    <h2 {...{\n      \"id\": \"push\"\n    }}>{`Push`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`array_push`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// create our array with 1 element\n$arr = array(\"one\");\n// $count will be 3 and $arr will now be array(\"one\",\"two\",\"three\");\n$count = array_push($arr,\"two\",\"three\");\n`}</code></pre>\n    <p>{`Alternative using `}<inlineCode parentName=\"p\">{`$arr[]`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// create our array with 1 element\n$arr = array(\"one\");\n// $arr will now be array(\"one\",\"two\");\n$arr[] = \"two\";\n// $arr will now be array(\"one\",\"two\",\"three\");\n$arr[] = \"three\";\n// $count will be 3\n$count = count($arr)\n`}</code></pre>\n    <p>{`Alternative using `}<inlineCode parentName=\"p\">{`$array_merge()`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// create our array with 1 element\n$arr = array(\"one\");\n// alternate method using array_merge()\n$arr = array_merge($arr,array(\"two\",\"three\")); // $arr will now be array(\"one\",\"two\",\"three\");\n$count = count($arr); // $count will be 3\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pop\"\n    }}>{`Pop`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// create our array with 3 elements\n$arr = array(\"one\",\"two\",\"three\");\n// $value will be \"three\" and array's value will now be array(\"one\",\"two\");\n$value = array_pop($arr);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shift\"\n    }}>{`Shift`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// create our array with 3 elements\n$arr = array(\"one\",\"two\",\"three\");\n// $value will be \"one\" and array's value will now be array(\"two\",\"three\");\n$value = array_shift($arr);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"unshift\"\n    }}>{`Unshift`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// create our array with 3 elements\n$arr = array(\"three\",\"four\",\"five\");\n// $count will now be 5 and array will hold one - five\n$count = array_unshift($arr,\"one\",\"two\");\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example-basic-tree-implementation\"\n    }}>{`Example: Basic Tree Implementation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\nclass Tree {\n    function __construct($root = null) {\n        $this->root = $root;\n    }\n\n    public function bfs() {\n        // 1. shift val\n        // 2. if children, append to arr\n        // 3. append data to array to compare\n        if ($this->root == null) {\n            throw new Error(\"No tree root\");\n        }\n\n        $arr = array($this->root);\n        $res = [];\n\n        while (count($arr) > 0) {\n            $x = array_shift($arr);\n            if ($x->children != null) {\n                $arr = array_merge($arr, $x->children);\n            }\n\n            array_push($res, $x->data);\n        }\n        return $res;\n    }\n\n    public function dfs() {\n        // shift from arr\n        // if children exist, unshift array\n        // add data to res array\n\n        $res = [];\n        $arr = array($this->root);\n\n        while (count($arr) > 0) {\n            $x = array_shift($arr);\n            if ($x->children != null) {\n                $arr = array_merge($x->children, $arr);\n            }\n\n            array_push($res, $x->data);\n        }\n\n        return $res;\n    }\n}\n\nclass Node {\n    function __construct($data = null, $children = null) {\n        $this->data = $data;\n        $this->children = $children;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources--extra-reading\"\n    }}>{`Resources + Extra Reading`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://www.thecave.info/php-array-push-pop-shift-and-unshift/\"\n      }}>{`http://www.thecave.info/php-array-push-pop-shift-and-unshift/`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}