{"version":3,"sources":["webpack:///../manual/React/Testing-React-Applications.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-react-testing-react-applications-md-0623bf4dcde3a6638106.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"testing-react-applications\"\n    }}>{`Testing React Applications`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/testing-react/\"\n        }}>{`Frontend Masters course`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`The introduction takes us through testing without the help of extenal libraries using `}<inlineCode parentName=\"p\">{`React`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ReactDOM`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Component from '../Component';\n\ntest('renders \"no items\" when no items are given', () => {\n  const container = document.createElement('div');\n  ReactDOM.render(<Component />, container);\n\n  expect(container.textContent).toMatch('no items');\n});\n`}</code></pre>\n    <p>{`In tests, we actually look to lose fidelity in exchange for a better experience of checking the user experience.`}</p>\n    <h2 {...{\n      \"id\": \"jest-jsdom\"\n    }}>{`Jest JSDOM`}</h2>\n    <p>{`By default, Jest loads JSDOM. If we don't want to run JSDOM, we can add package.json config for Jest:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"jest\": {\n  \"testEnvironment\": \"node\" // doesn't use JSDOM\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"css-imports\"\n    }}>{`CSS Imports`}</h2>\n    <p>{`Node cannot import CSS, so we need to add more Jest configuration. Let's change our package.json config and abstract that to `}<inlineCode parentName=\"p\">{`jest.config.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`module.exports = {\n  moduleNameMapper: {\n    // make a file to map it to module.exports = {}\n    '\\\\\\\\.css$': require.resolve('./test/style-mock'),\n  },\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: JavaScript string regex `}<inlineCode parentName=\"p\">{`\\\\\\\\.css$`}</inlineCode>{` === `}<inlineCode parentName=\"p\">{`/\\\\.css$`}</inlineCode></p>\n    </blockquote>\n    <p>{`We can use `}<inlineCode parentName=\"p\">{`identity-module-proxy`}</inlineCode>{` with CSS to help with our mocked object. `}<inlineCode parentName=\"p\">{`yarn add identity-obj-proxy`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`module.exports = {\n  moduleNameMapper: {\n    '\\\\\\\\.module\\\\\\\\.css$': 'identity-obj-proxy',\n    // make a file to map it to module.exports = {}\n    '\\\\\\\\.css$': require.resolve('./test/style-mock'),\n  },\n};\n`}</code></pre>\n    <p>{`The module name mappers are useful for so much more too (GraphQL etc).`}</p>\n    <h2 {...{\n      \"id\": \"handling-dynamic-imports\"\n    }}>{`Handling Dynamic Imports`}</h2>\n    <p>{`Ensure you have the correct babel plugin added. Kent adds in a file that simulates the `}<inlineCode parentName=\"p\">{`localStorage`}</inlineCode>{` getItem/setItem etc.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`module.exports = {\n  moduleNameMapper: {\n    '\\\\\\\\.module\\\\\\\\.css$': 'identity-obj-proxy',\n    // make a file to map it to module.exports = {}\n    '\\\\\\\\.css$': require.resolve('./test/style-mock'),\n  },\n  setupTestFrameworkScriptFile: require.resolve('./test/setup-test-framework'),\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-coverage-reports\"\n    }}>{`Adding Coverage Reports`}</h2>\n    <p><inlineCode parentName=\"p\">{`jest --coverage`}</inlineCode>{` will give you a neat report on coverage.`}</p>\n    <p>{`To ensure that our coverage doesn't include supporting test files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`module.exports = {\n  moduleNameMapper: {\n    '\\\\\\\\.module\\\\\\\\.css$': 'identity-obj-proxy',\n    // make a file to map it to module.exports = {}\n    '\\\\\\\\.css$': require.resolve('./test/style-mock'),\n  },\n  setupTestFrameworkScriptFile: require.resolve('./test/setup-test-framework'),\n  // takes glob\n  collectCoverageFrom: ['**/src/**.js'],\n  // enforces code coverage\n  coverageThreshold: {\n    global: {\n      // based on lcov\n      statements: 18,\n      branches: 10,\n      functions: 19\n      lines: 18\n    }\n  }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"projects-key\"\n    }}>{`Projects Key`}</h2>\n    <p>{`You can run multiple projects in parallel with the `}<inlineCode parentName=\"p\">{`projects`}</inlineCode>{` key:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`module.exports = {\n  moduleNameMapper: {\n    '\\\\\\\\.module\\\\\\\\.css$': 'identity-obj-proxy',\n    // make a file to map it to module.exports = {}\n    '\\\\\\\\.css$': require.resolve('./test/style-mock'),\n  },\n  setupTestFrameworkScriptFile: require.resolve('./test/setup-test-framework'),\n  // takes glob\n  collectCoverageFrom: ['**/src/**.js'],\n  // enforces code coverage\n  coverageThreshold: {\n    global: {\n      // based on lcov\n      statements: 18,\n      branches: 10,\n      functions: 19\n      lines: 18\n    }\n  },\n  projects: ['./client', './server']\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"react-testing-library\"\n    }}>{`React Testing Library`}</h2>\n    <p>{`Interesting tips:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`await wait(() => getByTestId('greeting-text'));\n// snapshotting\nexpect(container.firstChild).toMatchSnapshot();\n// great for a11y\ngetByLabelText('a11y title');\n`}</code></pre>\n    <p>{`If it isn't reasonable to use specific queries, you should use `}<inlineCode parentName=\"p\">{`getByTestId`}</inlineCode>{`.`}</p>\n    <p>{`When it comes to data attributes, should we sanitised? To be honest, it will not be the bottleneck. There is also a Babel plugin `}<inlineCode parentName=\"p\">{`babel-plugin-react-remove-properties`}</inlineCode>{` where you could remove these properties from production.`}</p>\n    <h2 {...{\n      \"id\": \"component-testing-qa\"\n    }}>{`Component Testing Q&A`}</h2>\n    <p>{`A nice tidbit here was using `}<inlineCode parentName=\"p\">{`jest.useFakeTimers()`}</inlineCode>{` to ensure all timers runout. In the test, `}<inlineCode parentName=\"p\">{`jest.runAllTimers()`}</inlineCode>{` is used to do just this.`}</p>\n    <h2 {...{\n      \"id\": \"jest-snapshots\"\n    }}>{`Jest Snapshots`}</h2>\n    <p>{`Take a snapshot of an object at a particular time. Worth noting that `}<inlineCode parentName=\"p\">{`.toMatchSnapshot`}</inlineCode>{` does have to be used on components themselves - it is very handy for specific values etc too.`}</p>\n    <p>{`You can also use Jest's custom snapshot serializer to customise what you can do. In the config, this comes up `}<inlineCode parentName=\"p\">{`snapshotSerializers`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"cypress-setup\"\n    }}>{`Cypress Setup`}</h2>\n    <p>{`To use, `}<inlineCode parentName=\"p\">{`yarn add --dev cypress`}</inlineCode>{`. It installs an app and pops it in the node modules.`}</p>\n    <p>{`Then we can run `}<inlineCode parentName=\"p\">{`npx cypress open`}</inlineCode>{` and it will open up the chrome browsers and start running the tests.`}</p>\n    <h2 {...{\n      \"id\": \"cypress-configuration\"\n    }}>{`Cypress Configuration`}</h2>\n    <p>{`In `}<inlineCode parentName=\"p\">{`cypress.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  \"baseUrl\": \"http://localhost:8080/\"\n  \"integrationFolder\": \"cypress/e2e\"\n}\n`}</code></pre>\n    <p>{`Example then of a Cypress test:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// e2e/calculator.js\ndescribe('calculator', () => {\n  it('can visit the app', () => {\n    cy.visit('/')\n      .getByText(/^1$/)\n      .click()\n      .getByText(/^\\\\+$/)\n      .click()\n      .getByText(/^2$/)\n      .click()\n      .getByText(/^=$/)\n      .click()\n      .getByTestId('display');\n  });\n});\n`}</code></pre>\n    <p>{`To use the `}<inlineCode parentName=\"p\">{`getByText`}</inlineCode>{` etc we need to install `}<inlineCode parentName=\"p\">{`cypress-testing-library`}</inlineCode>{`. Then we can add this inside of the `}<inlineCode parentName=\"p\">{`support`}</inlineCode>{` folder.`}</p>\n    <p>{`Setting it up with scripts to run in our `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"test:e2e:dev\": \"npm-run-all --parallel dev cy:open\",\n\"cy:open\": \"cypress open\",\n\"test:e2e\": \"npm-run-all --parallel --race start cy:run\",\n\"cy:open\": \"cypress run\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"testing-trophy\"\n    }}>{`Testing Trophy`}</h2>\n    <p>{`Bottom should include `}<inlineCode parentName=\"p\">{`static`}</inlineCode>{` through typing etc, then unit and e2e should make a small part but integration should be the major part.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}