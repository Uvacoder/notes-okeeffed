{"version":3,"sources":["webpack:///../manual/Tailwind/Quickstart.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,+MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gDADR,kDAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,kFADQ,qBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8CADQ,4BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,2CADQ,oBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iDADQ,0BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uDADQ,gCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oDADQ,6BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8CADQ,uBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sDADQ,oCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,4CADQ,yBAItB,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,uHAOL,iBAAQ,CACN,GAAM,mBADR,mBAGA,sCAAqB,0BAAYA,WAAW,KAAvB,iBAArB,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uGAML,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6MAUL,iBAAQ,CACN,GAAM,yBADR,yBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,4CAIL,iBAAQ,CACN,GAAM,6CADR,8CAGA,+BAAc,0BAAYA,WAAW,KAAvB,aAAd,wBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,whBAoBL,+BAAc,0BAAYA,WAAW,KAAvB,WAAd,yBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+hBAyBL,oEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,ujBA0BL,iBAAQ,CACN,GAAM,kCADR,kCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0kB,sMA8BTJ,EAAWK,gBAAiB","file":"component---manual-tailwind-quickstart-md-b6998051d2aa660accb5.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"quickstart-with-tailwind--typescript--vscode\"\n    }}>{`Quickstart with Tailwind + TypeScript + VSCode`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\"\n        }}>{`VSCode extension`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://tailwindcss.com/docs/installation\"\n        }}>{`Tailwind - Installation`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://tailwindcss.com/docs/flex/#app\"\n        }}>{`Tailwind - Flex`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://tailwindcss.com/docs/text-color/#app\"\n        }}>{`Tailwind - Text Color`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://tailwindcss.com/docs/background-color/#app\"\n        }}>{`Tailwind - Background Color`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://tailwindcss.com/docs/border-radius/#app\"\n        }}>{`Tailwind - Border Radius`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://tailwindcss.com/docs/padding/#app\"\n        }}>{`Tailwind - Padding`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://daveceddia.com/tailwind-create-react-app/\"\n        }}>{`Tailwind with CRA - Dave Ceddia`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/JedWatson/classnames\"\n        }}>{`Classnames - GitHub`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`npx create-react-app hello-tailwind --template typescript\ncd hello-tailwind\n# Using Yarn\nyarn add tailwindcss\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"add-css-imports\"\n    }}>{`Add CSS imports`}</h2>\n    <p>{`At the top of `}<inlineCode parentName=\"p\">{`src/index.css`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@import 'tailwindcss/base';\n@import 'tailwindcss/components';\n@import 'tailwindcss/utilities';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-scripts\"\n    }}>{`Adding scripts`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"scripts\": {\n    \"build:tailwind\": \"tailwindcss build src/tailwind.css -o src/tailwind.output.css\",\n    \"prestart\": \"npm run build:tailwind\",\n    \"prebuild\": \"npm run build:tailwind\"\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage-with-classnames\"\n    }}>{`Usage with classnames`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`yarn add classnames @types/classnames\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"updating-apptsx-to-use-the-correct-styles\"\n    }}>{`Updating App.tsx to use the correct styles`}</h2>\n    <p>{`Update `}<inlineCode parentName=\"p\">{`index.tsx`}</inlineCode>{` with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.output.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n`}</code></pre>\n    <p>{`Update `}<inlineCode parentName=\"p\">{`App.jsx`}</inlineCode>{` to be the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport cx from 'classnames';\n\nfunction App() {\n  const [toggle, setToggle] = React.useState<boolean>(false);\n\n  return (\n    <div className=\"bg-gray-200 flex items-center justify-center h-screen\">\n      <button\n        className={cx('p-3 rounded-sm', {\n          'bg-blue-500 hover:bg-blue-700': !toggle,\n          'bg-red-500 hover:bg-red-500': toggle,\n        })}\n        onClick={() => setToggle(!toggle)}\n      >\n        Toggle\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n`}</code></pre>\n    <p>{`Alternatively, you could abstract this out:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport cx from 'classnames';\n\nfunction App() {\n  const [toggle, setToggle] = React.useState<boolean>(false);\n\n  const buttonClasses = cx({\n    'bg-blue-500 hover:bg-blue-700': !toggle,\n    'bg-red-500 hover:bg-red-500': toggle,\n  });\n  return (\n    <div className=\"bg-gray-200 flex items-center justify-center h-screen\">\n      <button\n        className={\\`p-3 rounded-sm \\${buttonClasses}\\`}\n        onClick={() => setToggle(!toggle)}\n      >\n        Toggle\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"alternative-without-classnames\"\n    }}>{`Alternative without classnames`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\n// import cx from 'classnames';\n\nfunction App() {\n  const [toggle, setToggle] = React.useState<boolean>(false);\n  console.log('toggle', toggle);\n\n  const buttonClasses = toggle\n    ? 'bg-red-500 hover:bg-red-500'\n    : 'bg-blue-500 hover:bg-blue-500';\n  return (\n    <div className=\"bg-gray-200 flex items-center justify-center h-screen\">\n      <button\n        className={\\`p-3 rounded-sm \\${buttonClasses}\\`}\n        onClick={() => setToggle(!toggle)}\n      >\n        Toggle\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}