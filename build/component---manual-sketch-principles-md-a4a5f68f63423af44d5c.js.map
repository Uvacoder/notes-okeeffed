{"version":3,"sources":["webpack:///../manual/Sketch/Principles.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,6MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,sBADR,sBAGA,2EACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,kFAAiE,0BAAYC,WAAW,KAAvB,wBAAjE,sGAAwO,0BAAYA,WAAW,KAAvB,KAAxO,iDACA,0CAAyB,0BAAYA,WAAW,KAAvB,KAAzB,8DACA,gGACA,iBAAQ,CACN,GAAM,wBADR,wBAGA,2LACA,yK,oMAKJJ,EAAWK,gBAAiB","file":"component---manual-sketch-principles-md-a4a5f68f63423af44d5c.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"principles\"\n    }}>{`Principles`}</h1>\n    <h2 {...{\n      \"id\": \"organising-symbols\"\n    }}>{`Organising symbols`}</h2>\n    <p>{`Use the symbol organiser to auto-organise symbols.`}</p>\n    <h2 {...{\n      \"id\": \"naming-conventions\"\n    }}>{`Naming conventions`}</h2>\n    <p>{`When it comes to naming principles, use the convention of `}<inlineCode parentName=\"p\">{`Button/Primary/Light`}</inlineCode>{` with aims that the first word can be parsed by sketch up for type and the following elements of a `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{` split array can be use to denote classnames.`}</p>\n    <p>{`Anything split by `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{` itself becomes a classname when converted using sketchup.`}</p>\n    <p>{`When naming pages and components, just use camel casing with no splits.`}</p>\n    <h2 {...{\n      \"id\": \"creating-new-symbols\"\n    }}>{`Creating new symbols`}</h2>\n    <p>{`For the sake of creating base components, just use the basic colours and treat it like a wireframe. These components can then take on the naming convention above.`}</p>\n    <p>{`When designing a new set of components, then detach the symbol in the page workflow. From here, you make create it as a new symbol as required.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}