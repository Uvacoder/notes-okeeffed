{"version":3,"sources":["webpack:///../manual/React/React-Testing-Library.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,yBADR,yBAGA,6DACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,guDAsDL,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6nC,8MAyCTJ,EAAWK,gBAAiB","file":"component---manual-react-react-testing-library-md-2c16effd2a7f5e0ee80f.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-testing-library\"\n    }}>{`React Testing Library`}</h1>\n    <p>{`An example of the library in action:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import * as React from 'react';\nimport { render, fireEvent } from '@testing-library/react';\nimport TeamDropdown from '../TeamDropdown';\n\nconst stubProps = {\n  isArchiveable: false,\n  editAction: jest.fn(),\n  archiveAction: jest.fn(),\n  deleteAction: jest.fn(),\n};\n\nconst Wrapper = (props: any = {}) => <TeamDropdown {...stubProps} {...props} />;\n\ndescribe('team dropdown state', () => {\n  test('should not be archivable when isArchiveable is false', () => {\n    const component = render(<Wrapper />);\n    fireEvent.click(component.getByText('Open menu'));\n\n    expect(component.queryByText('Archive')).toBeNull();\n  });\n\n  test('should be archivable when isArchiveable is true', () => {\n    const component = render(<Wrapper isArchiveable={true} />);\n    fireEvent.click(component.getByText('Open menu'));\n\n    expect(component.queryByText('Archive')).toBeTruthy();\n  });\n\n  test('should fire archive action', () => {\n    const component = render(<Wrapper isArchiveable={true} />);\n    fireEvent.click(component.getByText('Open menu'));\n    expect(component.queryByText('Archive')).toBeTruthy();\n\n    fireEvent.click(component.getByText('Archive'));\n    expect(stubProps.archiveAction).toBeCalled();\n  });\n\n  test('should fire edit action', () => {\n    const component = render(<Wrapper />);\n    fireEvent.click(component.getByText('Open menu'));\n    fireEvent.click(component.getByText('Edit'));\n    expect(stubProps.editAction).toBeCalled();\n  });\n\n  test('should fire delete action', () => {\n    const component = render(<Wrapper />);\n    fireEvent.click(component.getByText('Open menu'));\n    fireEvent.click(component.getByText('Delete'));\n    expect(stubProps.deleteAction).toBeCalled();\n  });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mocking\"\n    }}>{`Mocking`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Component.tsx\n// super basic example w/ no types\nimport useAPIHook from 'path/to/hook';\nconst Component = () => {\n  const { data, loading } = useAPIHook(); // whatever you are getting destructured from the hook\n\n  if (loading) return <p data-automation-id=\"example-loading\">Loading</p>;\n\n  return <p data-automation-id=\"example-data\">Doing cool stuff with {data}</p>;\n};\n\n// Component.test.tsx\nimport Component from 'path/to/component';\nimport useAPIHook from 'path/to/hook';\njest.mock('path/to/hook');\ndescribe('useful description', () => {\n  test('component does this when data available', async () => {\n    useAPIHook.mockImplementation(() => ({\n      data: 'mocks',\n      loading: false,\n    }));\n    const { getByTestId } = await render(<Component />);\n    expect(getByTestId('example-data')).toBeTruthy();\n  });\n\n  test('component shows loading when API loading', async () => {\n    useAPIHook.mockImplementation(() => ({\n      data: 'mocks',\n      loading: true,\n    }));\n    const { getByTestId } = await render(<Component />);\n    expect(getByTestId('example-loading')).toBeTruthy();\n  });\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}