{"version":3,"sources":["webpack:///../manual/Style/base-mixins.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,6MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,wBADR,0BAGA,6HACA,iBAAQ,CACN,GAAM,qBADR,qBAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,oZAsBL,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0KAWL,iBAAQ,CACN,GAAM,aADR,aAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+PAaL,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qIASL,iBAAQ,CACN,GAAM,mBADR,mBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mFAQL,iBAAQ,CACN,GAAM,iBADR,iBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yHAUL,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8IAUL,iBAAQ,CACN,GAAM,oBADR,oBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uLAOL,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+IAUL,iBAAQ,CACN,GAAM,aADR,aAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qGAQL,iBAAQ,CACN,GAAM,qBADR,wBAGA,wDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gOAUL,iBAAQ,CACN,GAAM,oBADR,oBAGA,iEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iVAgBL,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4R,oMAoBTJ,EAAWK,gBAAiB","file":"component---manual-style-base-mixins-md-ceb86b041d2d7eaa14e7.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"styles--base--mixins\"\n    }}>{`Styles > Base > Mixins`}</h1>\n    <p>{`The mixins file is the place to store all of the functional Sass mixins used throughout the project.`}</p>\n    <h2 {...{\n      \"id\": \"inline-block-list\"\n    }}>{`inline-block-list`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`// inline-block list\n@mixin inline-block-list($padding: false) {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    @include clearfix;\n\n    li {\n        list-style-type: none;\n        @include inline-block();\n        white-space: nowrap;\n        @if $padding {\n            padding: {\n                left: $padding;\n                right: $padding;\n            }\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"omega-reset\"\n    }}>{`omega-reset`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@mixin omega-reset($nth) {\n    &:nth-child(#{$nth}) {\n        margin-right: flex-gutter();\n    }\n    &:nth-child(#{$nth} + 1) {\n        clear: none;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"font-size\"\n    }}>{`font-size`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@mixin font-size($fontSize, $lineHeight: null) {\n    font-size: $fontSize;\n    font-size: rem($fontSize) / 0.625;\n\n    @if ($lineHeight) {\n        line-height: em($lineHeight, $fontSize);\n    } @else {\n        line-height: inherit;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"inline-block\"\n    }}>{`inline-block`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`// inline-block for old browsers\n@mixin inline-block() {\n    display: inline-block;\n    *zoom: 1;\n    *display: inline;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reset-box-model\"\n    }}>{`reset-box-model`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@mixin reset-box-model {\n    margin: 0;\n    padding: 0;\n    border: 0;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"absolute-fill\"\n    }}>{`absolute-fill`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@mixin absolute-fill {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"headings\"\n    }}>{`headings`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@mixin headings($from: 1, $to: 6) {\n    @for $i from $from through $to {\n        h#{$i} {\n            @content;\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"background-image\"\n    }}>{`background-image`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@mixin background-image($path) {\n    background-image: url(../img/#{$path}.png);\n    background-image: linear-gradient(transparent, transparent), url(../img/#{$path}.svg);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reset-ul\"\n    }}>{`reset-ul`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`/* Reset unordered list style */\n@mixin reset-ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    overflow: auto;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"hide-text\"\n    }}>{`hide-text`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@mixin hide-text {\n    overflow: hidden;\n    text-indent: 101%;\n    white-space: nowrap;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"_neat-parse-media\"\n    }}>{`_`}{`neat-parse-media`}</h2>\n    <p>{`Swaps neat 2.0 to desktop first`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@function _neat-parse-media($media) {\n    @if type-of($media) == number {\n        @return \"only screen and (max-width: #{$media})\";\n    } @else if type-of($media) == string {\n        @return \"#{$media}\";\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"background-color\"\n    }}>{`background-color`}</h2>\n    <p>{`Set default background-color transition.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@mixin background-color$color, $lighten: false) {\n    background-color: $color;\n    transition: background-color 600ms ease-in;\n\n    &:hover,\n    &:active {\n        @if $lighten {\n            background-color: lighten($color, 30%);\n        } @else {\n            background-color: darken($color, 30%);\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"color\"\n    }}>{`color`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@mixin color($color, $lighten: false) {\n    color: $color;\n    transition: color 600ms ease-in;\n\n    &:hover,\n    &:active {\n        @if $lighten {\n            color: lighten($color, 30%);\n        } @else {\n            color: darken($color, 30%);\n        }\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}