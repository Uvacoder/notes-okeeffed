{"version":3,"sources":["webpack:///../manual/Stripe/Stripe-Node-React.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,4BADR,6BAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,+DADQ,4BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qDADQ,oBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oEADQ,mBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,oDADQ,kCAItB,iBAAQ,CACN,GAAM,SADR,SAGA,iKACA,sBACE,kBAAIA,WAAW,MAAf,uBACA,kBAAIA,WAAW,MAAf,cAEF,iBAAQ,CACN,GAAM,WADR,WAGA,sBACE,kBAAIA,WAAW,MAAf,oCACA,kBAAIA,WAAW,MAAf,iCACA,kBAAIA,WAAW,MAAf,uBAA4C,0BAAYA,WAAW,MAAvB,sBAE9C,iBAAQ,CACN,GAAM,wBADR,yBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,oIAOL,oHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,6BAIL,+BAAc,0BAAYA,WAAW,KAAvB,YAAd,2BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6yCAoDL,wIACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,qRAML,iBAAQ,CACN,GAAM,uBADR,wBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,yEAML,wDAAuC,0BAAYA,WAAW,KAAvB,aAAvC,yCAAsI,0BAAYA,WAAW,KAAvB,kBAAtI,uCACA,+EACA,mDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,qgQ,2MA4STJ,EAAWK,gBAAiB","file":"component---manual-stripe-stripe-node-react-md-64f98c41bbccf842cdc1.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"using-stripe-with-nodejs\"\n    }}>{`Using Stripe with Node.js`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/payments/payment-intents/migration\"\n        }}>{`Payment Migration Guide`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/payments/payment-intents\"\n        }}>{`Payment Intents`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/js/payment_intents/confirm_card_payment\"\n        }}>{`Stripe.js Docs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stripe/react-stripe-elements\"\n        }}>{`React Stripe Elements GitHub`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"intro\"\n    }}>{`Intro`}</h2>\n    <p>{`This will show how to make payments without needing card details to hit the server using Payment Intents. There is two sections to this:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Node Express server`}</li>\n      <li parentName=\"ol\">{`React App`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"prereqs\"\n    }}>{`Prereqs`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Ensure you have a Stripe account`}</li>\n      <li parentName=\"ul\">{`Basic knowledge on Express.js`}</li>\n      <li parentName=\"ul\">{`Basic knowledge for `}<inlineCode parentName=\"li\">{`create-react-app`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"1-the-express-server\"\n    }}>{`1. The Express Server`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mkdir server\ncd server\nyarn init -y # skip yarn init with defaults for now\nyarn add express body-parser stripe cors morgan\n`}</code></pre>\n    <p>{`Configure the .env file to contain your Stripe key (we're only using the test key for now):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`SK_TEST_KEY=sk_test...\n`}</code></pre>\n    <p>{`Create `}<inlineCode parentName=\"p\">{`index.js`}</inlineCode>{` and add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`require('dotenv').config();\nconst cors = require('cors');\nconst express = require('express');\nconst stripe = require('stripe')(process.env.SK_TEST_KEY);\n\nconst app = express();\nconst port = 8080;\nconst bodyParser = require('body-parser');\nconst morgan = require('morgan');\n// parse application/json\napp.use(bodyParser.json());\napp.use(cors());\napp.use(morgan('combined'));\n\n\n// basic route create a payment intent\napp.post('/api/v1/create', async (req, res) => {\n  const intent = await stripe.paymentIntents.create({\n    amount: 1099,\n    currency: 'aud',\n    payment_method_types: ['card'],\n  });\n  res.json({ intent: intent.client_secret });\n});\n\napp.post('/api/v1/charge', async (req, res) => {\n  const charge = await stripe.charges.create({\n    amount: 1600,\n    currency: 'aud',\n  });\n  res.json(charge);\n})\n\n// basic route create a setup intent\napp.post('/api/v1/setup-intent', async (req, res) => {\n    payment_method_types: ['card'],\n  });\n  res.json({ intent: intent.client_secret });\n});\n\n// basic route to receive and log a webhook\napp.post('/api/v1/events/webhook', (req, res) => {\n  console.log('@ Webhook received', req.body);\n  res.json({ status: 'success' });\n});\n\napp.listen(port, () =>\n  console.log(\\`Stripe example app listening on port \\${port}!\\`),\n);\n`}</code></pre>\n    <p>{`For testing the webhook URL, we can use the Stripe CLI (unless you want to setup the webhook for your account):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`stripe listen --forward-to localhost:8080/hooks # listen for events and forward to local URL\nstripe trigger payment_intent.created # trigger a payment_intent.created event\nstripe payment_intents create --amount=100 --currency=usd # create a payment intent from the CLI\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"2-for-the-react-app\"\n    }}>{`2. For the React App`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`npx create-react-app react-stripe\ncd react-stripe\nyarn add axios\n`}</code></pre>\n    <p>{`As for the code, you can create `}<inlineCode parentName=\"p\">{`Stripe.js`}</inlineCode>{` in the main directory and change the `}<inlineCode parentName=\"p\">{`StripeProvider`}</inlineCode>{` publishable API key with your own.`}</p>\n    <p>{`We are using axios here to chat to the Express server.`}</p>\n    <p>{`The code looks as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  CardElement,\n  StripeProvider,\n  Elements,\n  injectStripe,\n} from 'react-stripe-elements';\nimport axios from 'axios';\n\nconst handleBlur = () => {\n  console.log('[blur]');\n};\nconst handleChange = change => {\n  console.log('[change]', change);\n};\nconst handleFocus = () => {\n  console.log('[focus]');\n};\nconst handleReady = () => {\n  console.log('[ready]');\n};\n\nconst createOptions = (fontSize: string, padding: ?string) => {\n  return {\n    style: {\n      base: {\n        fontSize,\n        color: '#424770',\n        letterSpacing: '0.025em',\n        fontFamily: 'Source Code Pro, monospace',\n        '::placeholder': {\n          color: '#aab7c4',\n        },\n        ...(padding ? { padding } : {}),\n      },\n      invalid: {\n        color: '#9e2146',\n      },\n    },\n  };\n};\n\nclass _CreatePaymentMethod extends React.Component {\n  state = {\n    error: null,\n    processing: false,\n    message: null,\n  };\n\n  handleSubmit = ev => {\n    ev.preventDefault();\n    if (this.props.stripe && this.props.elements) {\n      this.props.stripe\n        .createPaymentMethod({\n          type: 'card',\n          card: this.props.elements.getElement('card'),\n        })\n        .then(payload => {\n          if (payload.error) {\n            this.setState({\n              error: \\`Failed to create PaymentMethod: \\${payload.error.message}\\`,\n              processing: false,\n            });\n            console.log('[error]', payload.error);\n          } else {\n            this.setState({\n              message: \\`Created PaymentMethod: \\${payload.paymentMethod.id}\\`,\n              processing: false,\n            });\n            console.log('[paymentMethod]', payload.paymentMethod);\n          }\n        });\n      this.setState({ processing: true });\n    } else {\n      console.log(\"Stripe.js hasn't loaded yet.\");\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          stripe.createPaymentMethod\n          <CardElement\n            onBlur={handleBlur}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onReady={handleReady}\n            {...createOptions(this.props.fontSize)}\n          />\n        </label>\n        {this.state.error && <div className=\"error\">{this.state.error}</div>}\n        {this.state.message && (\n          <div className=\"message\">{this.state.message}</div>\n        )}\n        <button disabled={this.state.processing}>\n          {this.state.processing ? 'Processingâ€¦' : 'Create'}\n        </button>\n      </form>\n    );\n  }\n}\n\nconst CreatePaymentMethod = injectStripe(_CreatePaymentMethod);\n\nclass _HandleCardPayment extends React.Component {\n  state = {\n    clientSecret: null,\n    error: null,\n    disabled: false,\n    succeeded: false,\n    processing: false,\n    message: null,\n  };\n\n  handleSubmit = async ev => {\n    ev.preventDefault();\n    if (this.props.stripe && this.props.elements) {\n      const res = await axios.post('http://localhost:8080/api/v1/create');\n      this.props.stripe\n        .confirmCardPayment(res.data.intent, {\n          payment_method: {\n            card: this.props.elements.getElement('card'),\n          },\n        })\n        .then(payload => {\n          if (payload.error) {\n            this.setState({\n              error: \\`Charge failed: \\${payload.error.message}\\`,\n              disabled: false,\n            });\n            console.log('[error]', payload.error);\n          } else {\n            this.setState({\n              succeeded: true,\n              message: \\`Charge succeeded! PaymentIntent is in state: \\${payload.paymentIntent.status}\\`,\n            });\n            console.log('[PaymentIntent]', payload.paymentIntent);\n          }\n        });\n      this.setState({ disabled: true, processing: true });\n    } else {\n      console.log(\"Stripe.js hasn't loaded yet.\");\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          stripe.confirmCardPayment\n          <CardElement\n            onBlur={handleBlur}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onReady={handleReady}\n            {...createOptions(this.props.fontSize)}\n          />\n        </label>\n        {this.state.error && <div className=\"error\">{this.state.error}</div>}\n        {this.state.message && (\n          <div className=\"message\">{this.state.message}</div>\n        )}\n        {!this.state.succeeded && (\n          <button disabled={this.state.disabled}>\n            {this.state.processing ? 'Processingâ€¦' : 'Pay'}\n          </button>\n        )}\n      </form>\n    );\n  }\n}\n\nconst HandleCardPayment = injectStripe(_HandleCardPayment);\n\nclass _HandleCardSetup extends React.Component {\n  state = {\n    clientSecret: null,\n    error: null,\n    disabled: false,\n    succeeded: false,\n    processing: false,\n    message: null,\n  };\n\n  handleSubmit = async ev => {\n    ev.preventDefault();\n    if (this.props.stripe && this.props.elements) {\n      const res = await axios.post('http://localhost:8080/api/v1/setup-intent');\n      this.props.stripe\n        .confirmCardSetup(res.data.intent, {\n          payment_method: {\n            card: this.props.elements.getElement('card'),\n          },\n        })\n        .then(payload => {\n          if (payload.error) {\n            this.setState({\n              error: \\`Setup failed: \\${payload.error.message}\\`,\n              disabled: false,\n            });\n            console.log('[error]', payload.error);\n          } else {\n            this.setState({\n              succeeded: true,\n              message: \\`Setup succeeded! SetupIntent is in state: \\${payload.setupIntent.status}\\`,\n            });\n            console.log('[SetupIntent]', payload.setupIntent);\n          }\n        });\n      this.setState({ disabled: true, processing: true });\n    } else {\n      console.log(\"Stripe.js hasn't loaded yet.\");\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          stripe.confirmCardSetup\n          <CardElement\n            onBlur={handleBlur}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onReady={handleReady}\n            {...createOptions(this.props.fontSize)}\n          />\n        </label>\n        {this.state.error && <div className=\"error\">{this.state.error}</div>}\n        {this.state.message && (\n          <div className=\"message\">{this.state.message}</div>\n        )}\n        {!this.state.succeeded && (\n          <button disabled={this.state.disabled}>\n            {this.state.processing ? 'Processingâ€¦' : 'Setup'}\n          </button>\n        )}\n      </form>\n    );\n  }\n}\n\nconst HandleCardSetup = injectStripe(_HandleCardSetup);\n\nclass Checkout extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      elementFontSize: window.innerWidth < 450 ? '14px' : '18px',\n    };\n    window.addEventListener('resize', () => {\n      if (window.innerWidth < 450 && this.state.elementFontSize !== '14px') {\n        this.setState({ elementFontSize: '14px' });\n      } else if (\n        window.innerWidth >= 450 &&\n        this.state.elementFontSize !== '18px'\n      ) {\n        this.setState({ elementFontSize: '18px' });\n      }\n    });\n  }\n\n  render() {\n    const { elementFontSize } = this.state;\n    return (\n      <div className=\"Checkout\">\n        <h1>React Stripe Elements with PaymentIntents</h1>\n        <Elements>\n          <CreatePaymentMethod fontSize={elementFontSize} />\n        </Elements>\n        <Elements>\n          <HandleCardPayment fontSize={elementFontSize} />\n        </Elements>\n        <Elements>\n          <HandleCardSetup fontSize={elementFontSize} />\n        </Elements>\n      </div>\n    );\n  }\n}\n\nconst StripeApp = () => {\n  return (\n    <StripeProvider apiKey=\"pk_test_...\">\n      <Checkout />\n    </StripeProvider>\n  );\n};\n\nexport default StripeApp;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}