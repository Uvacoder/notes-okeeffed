{"version":3,"sources":["webpack:///../manual/Electron/Electron-FS.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,yBADR,yBAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,qDADQ,qCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,yFADQ,0BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,wFADQ,iDAItB,iBAAQ,CACN,GAAM,QADR,SAGA,oDAAmC,0BAAYA,WAAW,KAAvB,UAAnC,2CAAiI,mBAAGA,WAAW,KAAQ,CACnJ,KAAQ,wFADqH,WAAjI,mDAGA,sFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+/CA2DL,iBAAQ,CACN,GAAM,mBADR,mBAGA,qDAAoC,0BAAYA,WAAW,KAAvB,oCAApC,2DAA4K,0BAAYA,WAAW,KAAvB,iBAA5K,2CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mI,uMAcTJ,EAAWK,gBAAiB","file":"component---manual-electron-electron-fs-md-814e543693587af8b47c.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"electron-file-systems\"\n    }}>{`Electron File Systems`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/electron/electron/issues/7300\"\n        }}>{`window.require is not a function`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.electronjs.org/docs/api/dialog#dialogshowopendialogbrowserwindow-options\"\n        }}>{`Dialog.showOpenDialog`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://medium.com/@nornagon/electrons-remote-module-considered-harmful-70d69500f31\"\n        }}>{`Electron's remote module considered harmful`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`Warning: the following uses `}<inlineCode parentName=\"p\">{`remote`}</inlineCode>{` and is now considered harmful. See the `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@nornagon/electrons-remote-module-considered-harmful-70d69500f31\"\n      }}>{`article`}</a>{`. Do not use unless you are certain on the why.`}</p>\n    <p>{`Once the app is up, here is an example app for opening files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { useState } from 'react';\nconst fs = window.require('fs');\nconst electron = window.require('electron');\nconst { remote } = electron;\n\nconst App = () => {\n  const [filePath, setFilePath] = useState<string>();\n  const [fileJson, setFileJson] = useState<Record<string, any>>();\n  const [saved, setSaved] = useState<boolean>(false);\n\n  /**\n   * Look for any files called strings.json and grab the\n   * file path, read the data, update the data and set it\n   * to the \\`fileJson\\` variable.\n   *\n   */\n  const handleFileSelect = async () => {\n    const res = await remote.dialog.showOpenDialog({\n      properties: ['openFile'],\n      filters: [{ name: 'Base i18n file', extensions: ['strings.json'] }],\n    });\n\n    const [jsonPath] = res.filePaths;\n    if (jsonPath) {\n      const data = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));\n      setFilePath(jsonPath);\n      data.third = 'here';\n\n      setFileJson(data);\n    }\n  };\n\n  /**\n   * Write the file back and set the saved flag.\n   *\n   */\n  const handleSaveFile = () => {\n    if (filePath) {\n      fs.writeFileSync(filePath, JSON.stringify(fileJson), 'utf-8');\n      setSaved(true);\n    }\n  };\n\n  return (\n    <div>\n      {saved && <p>File saved!</p>}\n      <p>Open + save file</p>\n      <div>\n        <button onClick={handleFileSelect}>Open file</button>\n        <button onClick={handleSaveFile}>Save file</button>\n      </div>\n      <p>{JSON.stringify(fileJson)}</p>\n    </div>\n  );\n};\nexport default App;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"debugging-notes\"\n    }}>{`Debugging notes`}</h2>\n    <p>{`As for debugging, if you get `}<inlineCode parentName=\"p\">{`window.require is not a function`}</inlineCode>{`, then head to your Electron config file and update the `}<inlineCode parentName=\"p\">{`BrowserWindow`}</inlineCode>{` config to include the web preferences:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`mainWindow = new BrowserWindow({\n  width: 900,\n  height: 680,\n  webPreferences: {\n    nodeIntegration: true,\n  },\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}