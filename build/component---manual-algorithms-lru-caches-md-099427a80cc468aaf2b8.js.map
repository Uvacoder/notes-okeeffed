{"version":3,"sources":["webpack:///../manual/Algorithms/LRU-Caches.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,iNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,YADR,YAGA,uaACA,szBAQA,8PACA,uHACA,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,6X,wMAyBTJ,EAAWK,gBAAiB","file":"component---manual-algorithms-lru-caches-md-099427a80cc468aaf2b8.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lru-caches\"\n    }}>{`LRU Caches`}</h1>\n    <h2 {...{\n      \"id\": \"question\"\n    }}>{`Question`}</h2>\n    <p>{`Have the function LRUCache(strArr) take the array of characters stored in strArr, which will contain characters ranging from A to Z in some arbitrary order, and determine what elements still remain in a virtual cache that can hold up to 5 elements with an LRU cache algorithm implemented. For example: if strArr is `}{`[\"A\", \"B\", \"C\", \"D\", \"A\", \"E\", \"D\", \"Z\"]`}{`, then the following steps are taken:`}</p>\n    <p>{`(1) A does not exist in the cache, so access it and store it in the cache.\n(2) B does not exist in the cache, so access it and store it in the cache as well. So far the cache contains: `}{`[\"A\", \"B\"]`}{`.\n(3) Same goes for C, so the cache is now: `}{`[\"A\", \"B\", \"C\"]`}{`.\n(4) Same goes for D, so the cache is now: `}{`[\"A\", \"B\", \"C\", \"D\"]`}{`.\n(5) Now A is accessed again, but it exists in the cache already so it is brought to the front: `}{`[\"B\", \"C\", \"D\", \"A\"]`}{`.\n(6) E does not exist in the cache, so access it and store it in the cache: `}{`[\"B\", \"C\", \"D\", \"A\", \"E\"]`}{`.\n(7) D is accessed again so it is brought to the front: `}{`[\"B\", \"C\", \"A\", \"E\", \"D\"]`}{`.\n(8) Z does not exist in the cache so add it to the front and remove the least recently used element: `}{`[\"C\", \"A\", \"E\", \"D\", \"Z\"]`}{`.`}</p>\n    <p>{`Now the caching steps have been completed and your program should return the order of the cache with the elements joined into a string, separated by a hyphen. Therefore, for the example above your program should return C-A-E-D-Z.`}</p>\n    <p>{`Use the Parameter Testing feature in the box below to test your code with different arguments.`}</p>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function LRUCache(strArr) {\n  let cache = [];\n\n  for (let char of strArr) {\n    // handle exists in cache\n    if (cache.includes(char)) {\n      cache.splice(cache.indexOf(char), 1);\n    } else if (cache.length >= 5) {\n      // unshift first el and apped\n      cache.shift();\n    }\n\n    cache.push(char);\n  }\n\n  // code goes here\n  return cache.join('-');\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}