{"version":3,"sources":["webpack:///../manual/React-Notes/React-Context.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,qNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,iBAAQ,CACN,GAAM,sBADR,sBAGA,yBACE,qBAAOC,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,SAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iEAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,WAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,qEAMN,iBAAQ,CACN,GAAM,uBADR,uBAGA,sGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8NAYL,iBAAQ,CACN,GAAM,+BADR,+BAGA,sBACE,kBAAIA,WAAW,MAAf,uBACA,kBAAIA,WAAW,MAAf,+CACA,kBAAIA,WAAW,MAAf,6BACA,kBAAIA,WAAW,MAAf,gCAAqD,0BAAYA,WAAW,MAAvB,cAEvD,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,ydAmBL,sFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,yWAeL,iBAAQ,CACN,GAAM,0BADR,0BAGA,8GACA,iBAAQ,CACN,GAAM,kDADR,kDAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,4fAoBL,iBAAQ,CACN,GAAM,4BADR,4BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,goBAwBL,iBAAQ,CACN,GAAM,oBADR,oBAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,SAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,aAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,2BAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,0BAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,kCAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,kEAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,yCAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,Y,4MASrBJ,EAAWK,gBAAiB","file":"component---manual-react-notes-react-context-md-81d7b6a9b10d9f61d8f7.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-context\"\n    }}>{`React Context`}</h1>\n    <h2 {...{\n      \"id\": \"basic-introduction\"\n    }}>{`Basic Introduction`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`System`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Props`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Get data from a parent component to a direct child component`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Context`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Gets data from a parent omponent to any nested child component`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"an-app-with-context\"\n    }}>{`An App with Context`}</h2>\n    <p>{`A basic app where we want to pass context of things like language everywhere.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class App extends Component {\n    state = {langauge: 'english'};\n\n    onLanguageChange = language => this.setState({language});\n\n    render() {\n        // return elements with onClick to change state\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"getting-data-out-of-context\"\n    }}>{`Getting Data Out of Context`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Create context file`}</li>\n      <li parentName=\"ol\">{`Set contextType as static property to class`}</li>\n      <li parentName=\"ol\">{`Consume from this.context`}</li>\n      <li parentName=\"ol\">{`Update the context using the `}<inlineCode parentName=\"li\">{`Provider`}</inlineCode></li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// context/language/index.js\nimport React from 'react';\n\n// creating context with default 'english'\nexport default React.createContext('english');\n\n// inside of a component \nimport LanguageContext from 'path/to/file';\nexport default class Button extends React.Component {\n    static contextType = LanguageContext;\n\n    render() {\n        const text = this.context === 'english' ? 'Submit' : 'Voorleggen';\n        return <button>{text}</button>\n    }\n}\n`}</code></pre>\n    <p>{`To update the context, from a higher provider we could set...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class App extends Component {\n    state = {langauge: 'english'};\n\n    onLanguageChange = language => this.setState({language});\n\n    render() {\n        // return elements with onClick to change state\n        <LanguageContext.Provider value={this.state.language}>\n           <ChildThatContainsButton>\n        </LanguageContext.Provider>\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"gotchas-around-context\"\n    }}>{`Gotchas Around Context`}</h3>\n    <p>{`The big gotcha with the context is dealing with the value prop given to the provider.`}</p>\n    <h2 {...{\n      \"id\": \"alternative-consumption-of-data-with-consumers\"\n    }}>{`Alternative Consumption of Data with Consumers`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// context/language/index.js\nimport React from 'react';\n\n// creating context with default 'english'\nexport default React.createContext('english');\n\n// inside of a component \nimport LanguageContext from 'path/to/file';\nexport default class Button extends React.Component {\n    render() {\n        return <button>\n            <LanguageContext.Consumer>\n              {value => value === 'english' ? 'Submit' : 'Voorleggen'}\n           </LanguageContext.Consumer>\n        </button>\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"using-multiple-consumers\"\n    }}>{`Using Multiple Consumers`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// context/language/index.js\nimport React from 'react';\n\n// creating context with default 'english'\nexport default React.createContext('english');\n\n// inside of a component \nimport LanguageContext from 'path/to/file';\nexport default class Button extends React.Component {\n    render() {\n        return <button>\n            <ColorContext.Consumer>\n            {color => {\n                <LanguageContext.Consumer>\n                    {value => value === 'english' ? 'Submit' : 'Voorleggen'}\n                </LanguageContext.Consumer>  \n            }}\n           </ColorContext.Consumer>\n        </button>\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"context-vs-redux\"\n    }}>{`Context vs Redux`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Redux`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Context`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Excellent documentation`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No need for extra lib`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Well-known for design patterns`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Hard to build a 'store' component with cross cutting concerns`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tremendous amount of open source libs`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}