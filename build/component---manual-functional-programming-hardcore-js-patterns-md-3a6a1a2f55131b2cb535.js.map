{"version":3,"sources":["webpack:///../manual/Functional-Programming/Hardcore-JS-Patterns.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-functional-programming-hardcore-js-patterns-md-3a6a1a2f55131b2cb535.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"hardcore-js-patterns\"\n    }}>{`Hardcore JS Patterns`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The payoff of these patterns happens as our app scales.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/hardcore-js-patterns\"\n        }}>{`FE Masters Course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.google.com/presentation/d/1L5gxYQz2hyzbVJk5tkyNdDidf_cg4I1BlIGd_Y9jblU/edit#slide=id.g338d117be_040\"\n        }}>{`Course Slides`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://subscription.packtpub.com/book/application_development/9781785883880/8/ch08lvl1sec68/semigroup\"\n        }}>{`What is a semigroup?`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Set_(abstract_data_type)\"\n        }}>{`What is a Set?`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/hemanth/functional-programming-jargon#semigroup\"\n        }}>{`FP Jargon: Semigroup`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://codepen.io/joumanae/pen/XWbEdbR?editors=0010\"\n        }}>{`Monoid Codepen Exercises`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.intellecquity.com/what-does-mean-in-math\"\n        }}>{`What are these Math Symbols?`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://codepen.io/drboolean/pen/qeqpgB?editors=0010\"\n        }}>{`Function Modelling Codepen Exercises`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/fantasyland/fantasy-land/blob/master/figures/dependencies.png\"\n        }}>{`Fantasy-land figures`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://codepen.io/drboolean/pen/NQKByP?editors=0010\"\n        }}>{`Monad Transformer Exercises`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/fantasyland/daggy\"\n        }}>{`Daggy GitHub`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://wiki.haskell.org/Catamorphisms\"\n        }}>{`Catamorphisms`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"http://hackage.haskell.org/package/free-5.1.3/docs/Control-Monad-Free.html\"\n        }}>{`Haskell - Free Monads`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/gcanti/fp-ts\"\n        }}>{`FP-TS GitHub`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://gcanti.github.io/fp-ts/\"\n        }}>{`FP-TS Website`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`During the introduction, Brian refers to the Domain Driven Design book.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`First goal: Functions with defined contracts.`}</p>\n    </blockquote>\n    <p>{`Brian demostracts a \"composable contract for this generic function\" with the function being `}<inlineCode parentName=\"p\">{`joinWithSpace`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const user = { firstName: 'Bobby', lastName: 'Fischer' };\nconst joinWithSpace = (...args) => args.join(' ');\n\njoinWithSpace(user.firstName, user.lastName);\njoinWithSpace('a', 'b', 'c'); // 'a b c'\njoinWithSpace(joinWithSpace('a', 'b'), 'c'); // 'a b c'\njoinWithSpace('a', joinWithSpace('b', 'c')); // 'a b c'\n\n// becoming even more generic\njoinWithSpaces = joinable => joinable.join(' ');\njoinWithSpace([user.firstName, user.lastName]);\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The aim is that we want \"highly generalized functions\"`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"composition-architecture\"\n    }}>{`Composition Architecture`}</h2>\n    <p>{`When we use composition:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Satisfy use cases`}</li>\n      <li parentName=\"ul\">{`Simple, understandable pieces`}</li>\n      <li parentName=\"ul\">{`Reuse`}</li>\n      <li parentName=\"ul\">{`Harder to change implementation`}</li>\n      <li parentName=\"ul\">{`Harder for user to compose`}</li>\n    </ul>\n    <p>{`The opposite side when we are not using composition:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Flexibility in implementation changes`}</li>\n      <li parentName=\"ul\">{`Less use cases to support`}</li>\n      <li parentName=\"ul\">{`Flags, is/else`}</li>\n      <li parentName=\"ul\">{`Won't satisfy all cases`}</li>\n      <li parentName=\"ul\">{`Less reuse`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: There is a reason to use both.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"normalize-effect-types\"\n    }}>{`Normalize Effect Types`}</h2>\n    <p>{`Monads don't actually compose. Functors compose and monoids compose. We focus on normalizing everything into the one shape.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Normalize effect types throughout the app.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"semigroups\"\n    }}>{`Semigroups`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`In computer science, a Semigroup is an algebraic structure that has a set and a binary operation that takes two elements in the set and returns a Semigroup that has an associative operation. Note that the official definition of a Set is an abstract data type that can store unique values, without any particular order, although I believe Semigroups don't require a unique Set.`}</p>\n    </blockquote>\n    <p>{`Closed means that we are going to get the same data type back that we're operating on.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`1 + 2 + 6; // this is associative but also closed meaning we can only use the data type\n2 * 5 * 8; // again, closed under data type\n10 / 4 / 2; // neither closed nor associative\ntrue && true && false; // associative\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you are closed and associative, then you are also parallel. This means you could chuck smaller compositions into multiple servers, get the results back and combine and you'll be peaches.`}</p>\n    </blockquote>\n    <p>{`In addition to the official definition of semigroups, in programming a semigroup is an object that has a `}<inlineCode parentName=\"p\">{`concat`}</inlineCode>{` function that combines it with another object of the same type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`[1].concat([2]); // [1, 2]\n`}</code></pre>\n    <p>{`From the course:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// semigroups defined\nconst Sum = x => ({\n  x,\n  concat: other => Sum(x + other.x),\n});\n\nSum(3).concat(Sum(5)); // Sum(8)\n\nconst Product = x => ({\n  x,\n  concat: other => Product(x * other.x),\n});\n\nProduct(3).concat(Product(5)); // Product(15)\n\n// Any\nconst Any = x => ({\n  x,\n  concat: other => Any(x || other.x),\n});\n\nAny(true).concat(Any(false)); // Any(true)\n\n// String Concat\nconst String = x => ({\n  x,\n  concat: other => String(x + other.x),\n});\n\nString('hi').concat(String('!')); // String('hi!')\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"monoids\"\n    }}>{`Monoids`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Monoids are just a semigroup with an \"identity\"`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// monoids\nconst Sum = x => ({\n  x,\n  concat: other => Sum(x + other.x),\n});\n\nSum.empty = () => 0;\nSum(0).concat(Sum(5)); // Sum(5)\nSum.empty().concat(Sum(5)); // Sum(5)\n\nconst Product = x => ({\n  x,\n  concat: other => Product(x * other.x),\n});\n\nProduct.empty = () => Product(1);\n\nProduct(1).concat(Product(10)); // Product(10)\nProduct.empty().concat(Product(10)); // Product(10) - programming to an interface, not a specific value\n\n// Any\nconst Any = x => ({\n  x,\n  concat: other => Any(x || other.x),\n});\nAny.empty = () => false;\n\nAny.empty().concat(Any(false)); // Any(false)\nAny.empty().concat(Any(true)); // Any(true)\n`}</code></pre>\n    <p>{`So why does identity matter here? Null values.`}</p>\n    <p>{`In our day-to-day, if I was to run through a list and reduce it down, if you don't have a starting value you will get a `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`, but if you have a starting value then these two correspond to reduce.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const res1 = [1, 2, 3, 4, 5].map(Sum).reduce((acc, n) => acc.concat(n)); // 15\nconst res2 = [].map(Sum).reduce((acc, n) => acc.concat(n)); // uh oh! error\nconst res2 = [].map(Sum).reduce((acc, n) => acc.concat(n), Sum.empty()); // Ahhh safe! We got a zero.\n`}</code></pre>\n    <p>{`In practice, we don't need the whole `}<inlineCode parentName=\"p\">{`[1, 2, 3, 4, 5].map(Sum).reduce((acc, n) => acc.concat(n), Sum.empty())`}</inlineCode>{` line. If we used something like `}<inlineCode parentName=\"p\">{`List`}</inlineCode>{` from immutable JS that has a `}<inlineCode parentName=\"p\">{`foldMap`}</inlineCode>{` method, we could run `}<inlineCode parentName=\"p\">{`List([1, 2, 3, 4, 5]).foldMap(Sum, Sum.empty())`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"semigroups-vs-monoids\"\n    }}>{`Semigroups vs Monoids`}</h2>\n    <p>{`Here we show that you cannot promote a semigroup to a monoid with an identity.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Note: we cannot actually provide a identity for this.\nconst Intersection = x => ({\n  x,\n  // assume Lodash lib utility in\n  concat: other => Intersection(_.intersection(x, other.x)),\n});\n`}</code></pre>\n    <p>{`In the above case, we note that we cannot promote an `}<inlineCode parentName=\"p\">{`Intersection`}</inlineCode>{` from a semigroup into a monoid.`}</p>\n    <h2 {...{\n      \"id\": \"identity-functor\"\n    }}>{`Identity Functor`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// assume types defined elsewhere\nconst { Id, Task, Either } = require('../types');\nconst { Left, Right } = Either;\n\nconst res = Id.of(Sum(2)).concat(Id.of(Sum(5))); // Id(Sum(5))\nconsole.log(res.extract()); // the same as fold\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Id is a monoid if what it is holding is a monoid.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"concat-method\"\n    }}>{`Concat Method`}</h2>\n    <p>{`Here we look at what it looks like to concat a few functors together:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// assume types defined elsewhere\nconst { Id, Task, Either } = require('../types');\nconst { Left, Right } = Either;\n\nconst res1 = Right('hello ').concat(Right('world')); // Right('hello world')\nres.fold(console.log, console.log);\n\nconst res2 = Right('hello ').concat(Left('arrhhihiuh')); // Left('arrhhihiuh')\nres.fold(console.log, console.log);\n\nconst res3 = Task.of('hello ').concat(Task.of('cruel world')); // Task.of('hello cruel world')\nres.fork(console.log, console.log); // 'hello cruel world'\n\nconst res3 = Task.of(['hello']).concat(Task.of(['cruel world'])); // Task.of(['hello', 'cruel world'])\nres.fork(console.log, console.log); // ['hello', 'cruel world']\n\nconst res3 = Task.of(['hello']).concat(Task.rejected('error')); // Task.rejected('error')\nres.fork(console.log, console.log); // 'error'\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Whenever you concat, make sure you never fall out of the type ie always return the result wrapped in the type.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const Alternative = x => ({\n  x,\n  concat: other => Alternative(other.x.isLeft ? x : x.concat(other.x)),\n});\n\nconst res = Alternative(Right('hi')).concat(Alternative(Left('bye')));\nconsole.log(res.x.fold(id, id)); // 'hi'\n\nconst res = Alternative(Right('hi'))\n  .concat(Alternative(Right('!!!!!')))\n  .concat(Alternative(Left('bye')));\nconsole.log(res.x.fold(id, id)); // 'hi!!!!!'\n\n// reducing to be prettier\nconst res = List([Right('a'), Right('b'), Left('c')]).foldMap(\n  Alternative,\n  Alternative(Right('')),\n); // mapping into Alternative but also providing the starting point (could be identity)\nconsole.log(res.x.fold(id, id)); // 'ab'\n\nconst res = List([Right('a'), Left('b'), Right('c')]).foldMap(\n  Alternative,\n  Alternative(Right('')),\n); // mapping into Alternative but also providing the starting point (could be identity)\nconsole.log(res.x.fold(id, id)); // 'ac'\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You'll end up making your own monoids more than you'll end up making your own functors.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"monoid-use-casses\"\n    }}>{`Monoid Use Casses`}</h2>\n    <p>{`Using it to concat responses from multiple server calls.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// getting an array of Promises\nconst getAppAlerts = () => fetch('/alerts').then(x => x.json());\nconst getDirectMessages = () => fetch('/dm').then(x => x.json());\n\ngetAppAlerts().concat(getDirectMessages()); // Promise([{id: 1, msg: \"Policy update\"}, {id: 2, msg: 'hi from spain'}])\n\n// map is a way to define a semigroup\nconst getPost = () =>\n  fetch('/post')\n    .then(x => x.json())\n    .then(Map);\nconst getComments = () =>\n  fetch('/comments')\n    .then(x => x.json())\n    .then(comments => Map({ comments }));\n\n// thanks to concat, we can assign the comments to the blog post\ngetPost().concat(getComments()); // Promise(Map({id: 3, body: 'Redux is over', comments: []}))\n`}</code></pre>\n    <p>{`Concating from files`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const readFile = promisify(fs.readFile);\nconst filepaths = ['one.txt', 'two.txt', 'three.txt'];\nfilepaths.foldMap(readFile, Promise.resolve(''));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-a-validation-library\"\n    }}>{`Creating a Validation Library`}</h2>\n    <p>{`First, we go through a basic implementation using Either.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import List from 'immutable-ext'\nimport {Either} from '../types'\nconst {Left, Right} = Either\n\nconst isPresent = x => !!x\n\nconst validate = (spec, obj) => {\n  List.(Object.keys(spec)).foldMap(key => {\n    spec[key](obj[key]) ? Right(obj) : Left(\\`\\${key} bad\\`)\n  }, Either.of(obj))\n}\n\nconst validations = {name: isPresent, email: isPresent}\nconst obj = {name: 'brian', email: 'brian@brian.com'}\nconst res = validate(validations, obj) // obj | []\n\nres.fold(console.error, console.log)\n`}</code></pre>\n    <p>{`This doesn't really do what we want it to do, so let's make our own `}<inlineCode parentName=\"p\">{`Success`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Failure`}</inlineCode>{` types and these can be a \"subclass\" of a Validation type.`}</p>\n    <h2 {...{\n      \"id\": \"creating-success--fail-monoids\"\n    }}>{`Creating Success & Fail Monoids`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import List from 'immutable-ext'\nimport {Either} from '../types'\nconst {Left, Right} = Either\n\nconst isPresent = x => !!x\n\nconst Success = x => ({\n  x,\n  isFail: false,\n  fold: (f, g) => g(x),\n  concat: other => (other.isFail ? other : Success(x)),\n});\n\nconst Failure = x => ({\n  x,\n  isFail: true,\n  fold: (f, g) => f(x),\n  concat: other => (other.isFail ? Fail(x.concat(other.x)) : Fail(x)),\n});\n\nconst validate = (spec, obj) => {\n  List.(Object.keys(spec)).foldMap(key => {\n    spec[key](obj[key]) ? Success(obj) : Failure(\\`\\${key} bad\\`)\n  }, Success.of(obj))\n}\n\n// just check if both are present for now\nconst validations = {name: isPresent, email: isPresent}\nconst obj = {name: 'brian', email: 'brian@brian.com'}\nconst res = validate(validations, obj) // obj | []\n\nres.fold(console.error, console.log) // [{name: 'brian', email: 'brian@brian.com'}]\n\nconst obj2 = {name: 'brian', email: ''}\nconst res2 = validate(validations, obj2) // obj | []\nres2.fold(console.error, console.log) // ['email bad']\n\nconst obj3 = {name: '', email: ''}\nconst res3 = validate(validations, obj3) // obj | []\nres3.fold(console.error, console.log) // ['name bad', 'email bad']\n`}</code></pre>\n    <p>{`You can then start to weigh up your options about how you want to go about things.`}</p>\n    <h2 {...{\n      \"id\": \"creating-the-validation-monoid\"\n    }}>{`Creating the Validation Monoid`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// any alternative approach to \\`isPresent\\` but loses the key.\nconst isPresent = Validation(key, x => !!x ? Success(x) : Fail([\\`\\${key} needs to be present\\`]))\n\nconst isEmail = Validation(key, x => /@/.test(x) ? Success(x) : Fail([\\`\\${key} needs to be an email\\`]))\n\n// The validation super class we need\nconst Validation = run => ({\n  run,\n  concat: other => Validation((key, x) => run(key,x).concat(other.run(key.x)))\n})\n\nconst validate = (spec, obj) => {\n  List.(Object.keys(spec)).foldMap(key => {\n    spec[key].run(obj[key])\n  }, Success.of(obj))\n}\n\nconst validations = {name: isPresent, email: isPresent.concat(isEmail)}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"function-modelling\"\n    }}>{`Function Modelling`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// [1]\nconst { Either } = require('../types');\n\nconst toUpper = x => x.toUpperCase();\nconst exclaim = x => x.concat('!');\n\nconst Fn = run => ({\n  run,\n  map: f => Fn(x => f(run(x))),\n  concat: other => Fn(x => run(x).concat(other.run(x))),\n});\n\nconst res = Fn(toUpper)\n  .concat(Fn(exclaim))\n  .run('fp sux');\nconsole.log(res); // 'FP SUXfp sux!'\n\n// [2] After adding in the capability to chain and promote to a Monad.\n// Note: This is forming the basis of what is known as the Reader Monad.\nconst { Either } = require('../types');\n\nconst toUpper = x => x.toUpperCase();\nconst exclaim = x => x.concat('!');\n\nconst Fn = run => ({\n  run,\n  chain: f => Fn(x => f(run(x)).run(x)),\n  map: f => Fn(x => f(run(x))),\n  concat: other => Fn(x => run(x).concat(other.run(x))),\n});\n\nFn.of = x => Fn(() => x);\n\nconst res = Fn(toUpper)\n  // This is called a Reader because we can transform\n  // and still get back to the original\n  .chain(upper => Fn(x => [upper, exclaim(upper)]))\n  .run('hi');\nconsole.log(res); // ['HI', 'hi!']\n\nconst res = Fn('hello')\n  .map(toUpper)\n  .chain(upper => Fn(x => [upper, exclaim(upper)]))\n  .run('hi');\nconsole.log(res); // ['HELLO', 'hi!']\n\n// [3] Making the method more convenient - this becomes the Reader Monad!\nFn.ask = Fn(x => x);\n\nconst res = Fn(toUpper)\n  // This is called a Reader because we can transform\n  // and still get back to the original\n  .chain(upper => Fn(x => [upper, exclaim(upper)]))\n  .run('hi');\nconsole.log(res); // ['HI', 'hi!']\n\nconst res = Fn('hello')\n  .map(toUpper)\n  .chain(upper => Fn.ask.map(config => [upper, config]))\n  .run({ port: 3000 });\nconsole.log(res); // ['HELLO', {port: 3000}]\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The idea is that you can do dependency injection in here. You could pass in things like the db or strategy etc.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"the-endo-functor\"\n    }}>{`The Endo Functor`}</h2>\n    <p>{`What if we would rather (instead of combining functions by running both and combining the results) is create a composition as concatenation?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const toUpper = x => x.toUpperCase();\nconst exclaim = x => x.concat('!');\n\nconst Endo = run => ({\n  run,\n  concat: other => Endo(x => run(other.run(x))),\n});\n\n// this is using the identity function again so\n// we do not have to pass an arg to Endo.empty\nEndo.empty = () => Endo(x => x);\n\nList([(toUpper, exclaim)])\n  .foldMap(Endo, Endo.empty())\n  .run('hello');\n\nconsole.log(res); // Hello!\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`It's called `}<inlineCode parentName=\"p\">{`Endo`}</inlineCode>{` because it only works with `}<inlineCode parentName=\"p\">{`Endomorphisms`}</inlineCode>{` which means it can only go from type `}<inlineCode parentName=\"p\">{`a -> a`}</inlineCode>{` ie `}<inlineCode parentName=\"p\">{`String -> String`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"contramap\"\n    }}>{`Contramap`}</h2>\n    <p>{`These are useful for if there is a bunch of functions that you want to combine. Contramaps allow us to pull out values during the execution.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const Reducer = run => ({\n  run,\n  contramap: f => Reducer((acc, x) => run(acc, f(x))),\n});\n\n// Example\nReducer(login)\n  .contramap(pay => pay.user)\n  .concat(Reducer(changePage).contramap(payload => payload.currentPage))\n  .run(state, { user: {}, currentPage: {} });\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Contramap is called a `}<inlineCode parentName=\"p\">{`Contravariant Functor`}</inlineCode>{`. If you have a `}<inlineCode parentName=\"p\">{`map`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`contramap`}</inlineCode>{` where you can change the input AND the output it is called a `}<inlineCode parentName=\"p\">{`Profunctor`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"function-modelling-equivalences\"\n    }}>{`Function Modelling Equivalences`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const login = (state, payload) =>\n  payload.email\n    ? Object.assign({}, state, { loggedIn: checkCreds(payload.email, payload) })\n    : state;\n\nconst setPrefs = (state, payload) =>\n  payload.prefs ? Object.assign({}, state, { prefs: payload.prefs }) : state;\n\n// (acc, a) -> acc\n// (a, acc) -> acc\n// a -> (acc -> acc)\n// a -> Endo(acc -> acc)\n\n// Fn(a -> Endo(acc -> acc))\nconst Reducer = run => ({\n  run,\n  contramap: f => Reducer((acc, x) => run(acc, f(x))),\n  concat: (acc, x) => run(acc, f(x)),\n});\n\n// instead of this, we can use our knowledge of equivalences\n// mentioned above to rewrite this\nconst reducerNotIdeal = Reducer(login).concat(Reducer(setPrefs));\n\nconst state = { loggedIn: false, prefs: {} };\nconst payload = { email: 'admn', pass: 123, prefs: { bgColor: '#000' } };\n\nconsole.log(reducer.run(state, payload));\n\n// ... to this\nconst login = payload => Endo(state) =>\n  payload.email\n    ? Object.assign({}, state, { loggedIn: checkCreds(payload.email, payload) })\n    : state;\n\nconst setPrefs = payload => Endo(state) =>\n  payload.prefs ? Object.assign({}, state, { prefs: payload.prefs }) : state;\n\nconst reducer = Fn(login).concat(Fn(setPrefs));\n\n\nconst state = { loggedIn: false, prefs: {} };\nconst payload = { email: 'admn', pass: 123, prefs: { bgColor: '#000' } };\n\nconsole.log(reducer.run(payload).run(state));\n\n// or this\nconst login = payload => state =>\n  payload.email\n    ? Object.assign({}, state, { loggedIn: checkCreds(payload.email, payload) })\n    : state;\n\nconst setPrefs = payload => state =>\n  payload.prefs ? Object.assign({}, state, { prefs: payload.prefs }) : state;\nconst reducer = Fn(login).map(Endo)concat(Fn(setPrefs).map(Endo));\n`}</code></pre>\n    <p>{`Knowing these functional equivalences gives you the ability to model things based on what is available in the APIs as well as structuring your APIs.`}</p>\n    <h2 {...{\n      \"id\": \"composing-functors\"\n    }}>{`Composing Functors`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For those familiar with `}<inlineCode parentName=\"p\">{`fold`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`extract`}</inlineCode>{` does not take a function and pass it to the function, it just takes it out.`}</p>\n    </blockquote>\n    <p>{`The example given here is creating a function `}<inlineCode parentName=\"p\">{`TaskEither`}</inlineCode>{` by composition of functors `}<inlineCode parentName=\"p\">{`Task`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Either`}</inlineCode>{`.`}</p>\n    <p>{`Here we get an issue that we cannot write a `}<inlineCode parentName=\"p\">{`chain`}</inlineCode>{` method.`}</p>\n    <h2 {...{\n      \"id\": \"monad-transformers\"\n    }}>{`Monad Transformers`}</h2>\n    <p>{`Helps us around the chaining issue that came up from composing functors.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const users = []; // pretend an array of users\nconst following = []; // pretend an array of objects of user following user\nconst find = (table, query) =>\n  Task.of(Either.fromNullable(_.find(table, query)));\n\nconst app = () =>\n  find(users, { id: 1 }) // Task(Either(User))\n    .chain(eu =>\n      eu.fold(Task.rejected, u => find(following, { follow_id: u.id })),\n    )\n    .chain(eu => eu.fold(Task.rejected, fo => find(users, { id: fo.user_id })))\n    .fork(console.err, eu => eu.fold(console.error, console.log));\n\napp(); // returns User object ie {id: 2, name: 'Marc'}\n`}</code></pre>\n    <p>{`So we note this sucks, so we want to transform this into a `}<inlineCode parentName=\"p\">{`TaskEither`}</inlineCode>{` monad:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { TaskT, Task, Either } = require('../types');\nconst { Left, Right } = Either;\n\n// This thing knows how to \"chain\" chain\nconst TaskEither = TaskT(Either);\n// an interesting tidbit - Task = TaskT(Id);\n\nconst users = []; // pretend an array of users\nconst following = []; // pretend an array of objects of user following user\nconst find = (table, query) =>\n  TaskEither.lift(Either.fromNullable(_.find(table, query))); // gives Task(Either(x)) by lifting instead of Task(Either(Either(x)))\n\nconst app = () =>\n  find(users, { id: 1 }) // Task(Either(User))\n    .chain(u => find(following, { follow_id: u.id }))\n    .chain(fo => find(users, { id: fo.user_id }))\n    .fork(console.err, eu => eu.fold(console.error, console.log));\n\napp(); // returns User object ie {id: 2, name: 'Marc'}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"restructuring-with-monad-transformers\"\n    }}>{`Restructuring with Monad Transformers`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { FnT, TaskT, Task, Either, EitherT } = require('path/to/types');\n\nconst FnTask = FnT(Task);\nconst App = EitherT(FnTask); // App :: Either(Fn(Task))\n\n// the challenges come from when instead of map we start to\n// return eithers or functions or tasks within these things\n// if we chain - see below\nconst res = App.of(2).map(x => x + 1);\nconsole.log(res);\n\nres.fold(console.error, fn =>\n  fn.run({ myEnv: true }).fork(console.error, console.log),\n); // 3\n\n// Chaining\nconst res = App.of(2)\n  .chain(two => App.lift(TaskEither.of(two + two)))\n  .chain(two => App.lift(TaskEither.lift(Either.of(four))))\n  .chain(two => App.lift(Task.of(four).map(Either.of))) // mapping to keep Either(Fn(Task)) type\n  .run({})\n  .fork(console.error, fi => fi.fold(console.error, console.log));\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You get these stacks of transformers and you have to get things in the right spot.`}</p>\n    </blockquote>\n    <p>{`Brian here talks about how he does not love Monad transformers. Sometimes they're useful and they're around so it's good to know and can be useful if you keep it shallow.`}</p>\n    <h2 {...{\n      \"id\": \"defining-the-free-monad\"\n    }}>{`Defining the Free Monad`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Free Monads are usually not what you want. They solve a specific problem.`}</p>\n    </blockquote>\n    <p>{`The free monad is a way to take your functions and treat them like data types.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// [1] the base\nconst { liftF } = require('../lib/free');\nconst { Id } = require('../lib/types');\n\n// instead of doing this\nconst httpGet = url => Task();\n// we could hold a data type\nconst httpGet = url => HttpGet(url);\n// doing so enables us to do things like...\n// HttpGet(url).chain(contents => HttpPost('./analytics', contents));\n\n// [2] an interpreter to interpret the new structure\nconst {taggedSum} = require('daggy')\nconst Http = taggedSum('Http', Get: ['url'], Post: ['url', 'body'])\nconsole.log(Http.Get('/home')) // {url: '/home'}\n\n// enables us to do thingsl like this.\n// Get('/home').cata({\n//   Get: url => 'get',\n//   Post: (url, body) => 'post'\n// })\n\n// now we chan hange our httpGet\nconst httpGet = url => LiftF(Http.Get((url)));\nconst httpPost = (url, body) => LiftF(Http.Posts((url, body)));\n\nconst app = () => httpGet('/home').chain(contents => httpPost('/analytics'), contents)\n\n// normally want a target monad like Task for the following\nconst interpret = x => x.cata({\n  Get: url => Id(\\`contents for \\${url}\\`),\n  Post: (url, body) => Id(\\`posted \\${body} to \\${url}\\`)\n})\n\nconst res = app().foldMap(interpret, Id.of)\nconsole.log(res.extract()) // posted contents for /home to /analytics\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Brian normally stubs Id.of in before Task so he can get an idea of what is going on.`}</p>\n    </blockquote>\n    <p>{`The catamorphism is essentially being used as a bunch of ifs. JS doesn't give the tools out of the box, so that is what it is used for.`}</p>\n    <p>{`Free monads can be useful - Brian mentions one that he did for posted packages to Bower. It was a great solution to make sure you weren't accidentally posting to NPM everytime you used it.`}</p>\n    <h2 {...{\n      \"id\": \"lenses\"\n    }}>{`Lenses`}</h2>\n    <p>{`You can do anything with lenses. You could rewrite every app in just lenses.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { toUpper, view, over, lensProp, compose } = require('ramda');\n\nconst L = {\n  name: lensProp('name'),\n  street: lensProp('street'),\n  address: lensProp('address'),\n};\n\nconst user = { address: { street: { name: 'Maple' } } };\nconst res = view(\n  compose(\n    L.address,\n    L.street,\n  ),\n  user,\n); // allows us to compose\nconsole.log(res); // { name: 'Maple'}\n\n// allows us to set value\nconst res2 = over(\n  compose(\n    L.address,\n    L.street,\n    L.name\n  ),\n  toUpper\n  user,\n); // allows us to compose\nconsole.log(res); // { name: 'MAPLE'}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: Lenses are also immutable.`}</p>\n    </blockquote>\n    <p>{`If you had an `}<inlineCode parentName=\"p\">{`Either`}</inlineCode>{` of a property with everything inside a `}<inlineCode parentName=\"p\">{`Task`}</inlineCode>{`, we could jump deep inside of these properties, open things up, change it and then put it all back together.`}</p>\n    <p>{`It gets very powerful. It's like treating functors like properties.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Compose for lenses compose backwards and get from left to right.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"building-a-cli-app\"\n    }}>{`Building a CLI App`}</h2>\n    <p>{`Brian goes through an overview of how he build a CLI app.`}</p>\n    <p>{`Things that he goes through is to apply things that we've learned with catamorphisms, Free Monads etc to enable a CLI blog post.`}</p>\n    <p>{`He also uses an example of an interpreter test that uses its own version of testing the identity (done using `}<inlineCode parentName=\"p\">{`dbToId`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`consoleToId`}</inlineCode>{`).`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`\"The different between `}<inlineCode parentName=\"p\">{`Free`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Fix`}</inlineCode>{` is that `}<inlineCode parentName=\"p\">{`Free`}</inlineCode>{` is a `}<inlineCode parentName=\"p\">{`Fix`}</inlineCode>{` with an endpoint to it.\"`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"creating-a-redux-alternative\"\n    }}>{`Creating a Redux Alternative`}</h2>\n    <p>{`In this app, Brian uses lenses to overwrite and update state in the reducer.`}</p>\n    <p>{`Brian manages to remove the `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` from the function by using `}<inlineCode parentName=\"p\">{`ask`}</inlineCode>{` from the `}<inlineCode parentName=\"p\">{`Fn`}</inlineCode>{` type that Brian supplies to the course.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Brian eludes to the fact that TS doesn't love things like `}<inlineCode parentName=\"p\">{`Promise<Either<Task>>`}</inlineCode>{` as it is not built for that. There are some workarounds.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}