{"version":3,"sources":["webpack:///../manual/React-Notes/react-style-guide.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-react-notes-react-style-guide-md-a4b63fc0aa735b3af3cc.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-native-style-guide\"\n    }}>{`React-Native Style Guide`}</h1>\n    <h3 {...{\n      \"id\": \"react-native-style-guide-1\"\n    }}>{`React Native Style Guide`}</h3>\n    <h4 {...{\n      \"id\": \"general-guidelines\"\n    }}>{`General Guidelines`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Every component should be treated as an API.`}</li>\n      <li parentName=\"ul\">{`When in doubt, break up a component or function into smaller useful parts.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"es6-and-es7\"\n    }}>{`ES6 and ES7`}</h4>\n    <p>{`The flavor of JS we use is based on ES5 but with ES6 and ES7 transforms. This means, that a large part of the syntax is based on the current version of JS, but is flavored with capabilities that come with ES6 and ES7. For example:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Object destructing (ES6)`}</li>\n      <li parentName=\"ul\">{`Object spread (ES7)`}</li>\n      <li parentName=\"ul\">{`Rest and spread params (ES6)`}</li>\n      <li parentName=\"ul\">{`Promises (ES6)`}</li>\n      <li parentName=\"ul\">{`Arrow Functions (ES6)`}</li>\n      <li parentName=\"ul\">{`Object concise method (ES6)`}</li>\n      <li parentName=\"ul\">{`Object short notation (ES6)`}</li>\n      <li parentName=\"ul\">{`Classes (ES6)`}</li>\n    </ul>\n    <p>{`For more information see `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react-native/docs/javascript-environment.html#content\"\n      }}>{`React Native JavaScript Environment`}</a></p>\n    <h4 {...{\n      \"id\": \"component-creation\"\n    }}>{`Component Creation`}</h4>\n    <p>{`Components should be created using ES6 classes and Object Short Notation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n// Bad\n\nvar ChatBox = React.createClass({\n\n  getInitialState: function(){\n    return {toggle: 'on'};\n  },\n\n  render: function(){\n    return (\n      <Text> Example </Text>\n    );\n  }\n\n})\n\n// Good\n\nclass ChatBox extends React.Component{\n\n  constructor(){\n    this.state = {toggle: 'on'}\n  }\n\n  render(){\n    return (\n      <Text> Example </Text>\n    );\n  }\n\n}\n\n`}</code></pre>\n    <p>{`Component functions that are not life-cycle functions should be created with an underscore at the beginning of the function name.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n_fetchmessages(){\n  fetch(requestURL)\n    .then((response)=> response.json() )\n    .then((responseData)=> {\n      this.setState({messages: responseData})\n    })\n    .done();\n}\n\n_turnEditOn(){\n  this.setState({edit: true});\n}\n\n`}</code></pre>\n    <p>{`Keep life-cycle functions at the top of the object constructor in logical order.`}</p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`constructor`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentWillMount`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentDidMount`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentWillReceiveProps`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`render`}</inlineCode></li>\n    </ol>\n    <p>{`For more information see `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react/docs/component-specs.html\"\n      }}>{`Component Specs and Lifecycle`}</a></p>\n    <p>{`Every component function should be as parsimonious as possible. If you find yourself creating a function that is doing more than two things at once, then break up the function into smaller functions.`}</p>\n    <h4 {...{\n      \"id\": \"using-bind\"\n    }}>{`Using Bind`}</h4>\n    <p>{`When passing a function as prop to a child component, the use of bind is not necessary. React Native automatically binds `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` to that function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n// Bad\n\nrender(){\n  return(\n    <CameraButton\n      selectImage={this.selectImage.bind(this)}\n    />\n  );\n}\n\n// Good\n\nrender(){\n  return(\n    <CameraButton\n      selectImage={this.selectImage}\n    />\n  );\n}\n\n`}</code></pre>\n    <p>{`It necessary however to use bind, when passing a component function to an event prop. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n<ListView\n  renderRow={this.renderMessage.bind(this)}\n/>\n\n...\n\nrenderMessage(message) {\n  return (\n    <Message\n      message={message}\n      navigator={this.props.navigator}\n      fetchMessages={this.fetchMessages.bind}\n    />\n  );\n}\n\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"passing-props\"\n    }}>{`Passing Props`}</h4>\n    <p>{`Explicitly pass props if the number of props is small or if the prop is important enough that you want to be explicit about it.`}</p>\n    <p>{`If there are a large number of props, pass in the whole thing or use destructuring to break it apart and pass them correctly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n//Bad\n\n<MessageBody\n  content=this.props.message.content\n/>\n<MessageFooter\n  replies=this.props.message.replies\n  upvotes=this.props.message.upvotes\n  timestamp=this.props.message.timestamp\n  distance=this.props.message.distance\n/>\n\n// Good\n\nvar {content, ...footer} = this.props.message\n\n<MessageBody {content} />\n<MessageFooter {..footer} />\n\n`}</code></pre>\n    <p>{`Sometimes you want to combine objects and pass them as props. In that case use `}<inlineCode parentName=\"p\">{`Object.assign`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n_onPressMessage() {\n\n  var {message, ...props} = this.props;\n  var {votes, ...message} = this.props.message;\n  var fetchMessages = this._updateHearts;\n\n  this.props.navigator({\n    component: Comments,\n    passProps: Object.assign(\n      {..props},\n      {..message},\n      {fetchMessages}\n    ),\n  })\n}\n\n`}</code></pre>\n    <p>{`For more information on passing props, see React Native `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react/docs/transferring-props.html\"\n      }}>{`Transferring Props`}</a></p>\n    <h4 {...{\n      \"id\": \"state-and-props\"\n    }}>{`State and Props`}</h4>\n    <p>{`Props are immutable. Do not mutate them.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Bad\n\nvar component = <Component />;\ncomponent.props.foo = x;\ncomponent.props.bar = y;\n\n`}</code></pre>\n    <p>{`State is mutable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nconstructor(){\n  this.state = {messages:[]};\n}\n\n...\n\n_addMessages(data){\n  var messages = data.messages;\n  this.setState({\n    messages: this.state.messages.push(messages)\n  })\n}\n\n`}</code></pre>\n    <p>{`Props can be passed into state, but be explicit that they are only 'initial values'`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nconstructor(props){\n  var initialNum = this.props.numHearts;\n  this.state = {numHearts: initialNum};\n}\n\n...\n\n_handleClick(){\n  this.setState({numHearts: this.state.numHearts + 1});\n}\n\n`}</code></pre>\n    <p>{`Be sure to  make use of `}<inlineCode parentName=\"p\">{`componentWillReceiveProps`}</inlineCode>{` to sync state and props, if props are passed to state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\ncomponentWillReceiveProps(props){\n  this.setState({numHearts: props.numHearts});\n}\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"react-style-guide-cheet-sheet\"\n    }}>{`React Style Guide Cheet Sheet`}</h1>\n    <h2 {...{\n      \"id\": \"custom-classes\"\n    }}>{`Custom Classes`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`place custom functions above the render function.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`React.createClass({\n  displayName : '',\n  propTypes: {},\n  mixins : [],\n  getInitialState : function() {},\n  componentWillMount : function() {},\n  componentWillUnmount : function() {},\n  _onChange : function() {},\n  _onCreate : function() {},\n  render : function() {}\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"conditional-html\"\n    }}>{`Conditional html`}</h2>\n    <p>{`In JSX, anything in {} will be evaluated in JavaScript`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{this.state.show && 'This is Shown'}\n{this.state.on ? ‘On’ : ‘Off’}\n`}</code></pre>\n    <p>{`For anything more complicated, I have typically been creating a variable inside the render method, suffixed with ‘Html’:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var dinosaurHtml = '';\nif (this.state.showDinosaurs) {\n  dinosaurHtml = (\n    <section>\n      <DinosaurTable />\n      <DinosaurPager />\n    </section>\n  );\n}\n\nreturn (\n  <div>\n    ...\n    {dinosaurHtml}\n    ...\n  </div>\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"jsx-as-variable-or-return-value\"\n    }}>{`JSX as variable or return value`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var multilineJsx = (\n  <header>\n    <Logo />\n    <Nav />\n  </header>\n);\n\nvar singleLineJsx = <h1>Simple JSX</h1>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"self-closing-tags\"\n    }}>{`Self-closing tags`}</h2>\n    <p>{`Components without children should simply close themselves`}</p>\n    <p><strong parentName=\"p\">{` correct `}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<Logo />\n`}</code></pre>\n    <p><strong parentName=\"p\">{` bad practise `}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<Logo></Logo>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"list-iterations\"\n    }}>{`List Iterations`}</h2>\n    <p>{`List iterations are better done inline, especially if each list item will be rendered as a component. You may even be able to reduce to one line with fat arrows.`}</p>\n    <p><strong parentName=\"p\">{` Note `}</strong>{` This does require the harmony flag on JSX to be included, which will toggle certain ES6 features (fat arrows, template strings, destructuring, and rest parameters)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`render : function() {\n  return (\n    <ul>\n      {this.state.dinosaursList.map(dinosaur => <DinosaurItem item={dinosaur} />)}\n    </ul>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"forms\"\n    }}>{`Forms`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<form onChange={this.inputHandler}>\n  ...\n    <input type=\"text\" name=\"newDinosaurName\" value={this.state.newDinosaurName} />\n  ...\n</form>\n\n// input handler\n\nfunction(event) {\n  actions.propagateValue({\n    field : event.target.name,\n    value : event.target.value\n  });\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"formatting-attributes\"\n    }}>{`Formatting Attributes`}</h2>\n    <p>{`Preferable`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<input\n  type=\"text\"\n  value={this.state.newDinosaurName}\n  onChange={this.inputHandler.bind(this, 'newDinosaurName')} />\n`}</code></pre>\n    <p>{`Alternative`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<input type=\"text\"\n       value={this.state.newDinosaurName}\n       onChange={this.inputHandler.bind(this, 'newDinosaurName')} />\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}