{"version":3,"sources":["webpack:///../manual/Design-Patterns/Facade-Pattern.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,0NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,gDAA+B,0BAAYC,WAAW,KAAvB,cAA/B,8NACA,iBAAQ,CACN,GAAM,WADR,WAGA,2OACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,sBACE,kBAAIA,WAAW,MAAf,8BAAmD,kBAAIA,WAAW,MAC9D,kBAAIA,WAAW,MAAf,qEACA,kBAAIA,WAAW,MAAf,+EAEJ,kBAAIA,WAAW,MAAf,wEAA6F,kBAAIA,WAAW,MACxG,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,6CACA,kBAAIA,WAAW,MAAf,qDAGN,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0yB,iNAgDTJ,EAAWK,gBAAiB","file":"component---manual-design-patterns-facade-pattern-md-770a5abe5bf0d7999bad.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"facade-pattern\"\n    }}>{`Facade Pattern`}</h1>\n    <p>{`The Facade Pattern is a `}<inlineCode parentName=\"p\">{`structural`}</inlineCode>{` design pattern that is used to, according the the Gang Of Four book, \"Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.\"`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`In the example below, we will look at basic facade that takes the different operations required to start a running race of the basic phrase \"Get ready! Get set! Go!\" by breaking down each sentence into a phase.`}</p>\n    <h2 {...{\n      \"id\": \"participants\"\n    }}>{`Participants`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Facade: (RunningRaceFacade)`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`knows which subsystem classes are responsible for what operation.`}</li>\n          <li parentName=\"ul\">{`delegates parts of a client request to the appropriate subsystem objects.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Subsystem classes: (PhaseOneSystem, PhaseTwoSystem, PhaseThreeSystem)`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`contains functionality for subsystem.`}</li>\n          <li parentName=\"ul\">{`executes work delegated by Facade object.`}</li>\n          <li parentName=\"ul\">{`has no knowledge of facade or reference to it.`}</li>\n        </ul></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class PhaseOneSystem {\n  getReady() {\n    console.log('Get ready!');\n  }\n}\n\nclass PhaseTwoSystem {\n  getSet() {\n    console.log('Get set!');\n  }\n}\n\nclass PhaseThreeSystem {\n  go() {\n    console.log('Go!');\n  }\n}\n\nclass RunningRaceFacade {\n\n  private _phaseOne: PhaseOneSystem;\n  private _phaseTwo: PhaseTwoSystem;\n  private _phaseThree: PhaseThreeSystem;\n\n  constructor() {\n    this._phaseOne = new PhaseOneSystem();\n    this._phaseTwo = new PhaseTwoSystem();\n    this._phaseThree = new PhaseThreeSystem();\n  }\n\n  beginRace() {\n    this._phaseOne.getReady();\n    this._phaseTwo.getSet();\n    this._phaseThree.go();\n  }\n}\n\n(function main() {\n  const race = new RunningRaceFacade();\n  race.beginRace(); // logs out \"Get ready! Get Set! Go! on separate lines\n})();\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}