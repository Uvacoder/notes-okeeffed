(window.webpackJsonp=window.webpackJsonp||[]).push([[482],{"2z1u":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return c})),t.d(n,"default",(function(){return s}));t("1c7q"),t("abGl"),t("gZHo"),t("Fdmb"),t("Ir+3"),t("2mQt"),t("mXGw");var o=t("/FXl"),r=t("TjRS");t("aD51");function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/React/React-Testing-Library.md"}});var i={_frontmatter:c},p=r.a;function s(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(o.b)(p,a({},i,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"react-testing-library"},"React Testing Library"),Object(o.b)("p",null,"An example of the library in action:"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"import * as React from 'react';\nimport { render, fireEvent } from '@testing-library/react';\nimport TeamDropdown from '../TeamDropdown';\n\nconst stubProps = {\n  isArchiveable: false,\n  editAction: jest.fn(),\n  archiveAction: jest.fn(),\n  deleteAction: jest.fn(),\n};\n\nconst Wrapper = (props: any = {}) => <TeamDropdown {...stubProps} {...props} />;\n\ndescribe('team dropdown state', () => {\n  test('should not be archivable when isArchiveable is false', () => {\n    const component = render(<Wrapper />);\n    fireEvent.click(component.getByText('Open menu'));\n\n    expect(component.queryByText('Archive')).toBeNull();\n  });\n\n  test('should be archivable when isArchiveable is true', () => {\n    const component = render(<Wrapper isArchiveable={true} />);\n    fireEvent.click(component.getByText('Open menu'));\n\n    expect(component.queryByText('Archive')).toBeTruthy();\n  });\n\n  test('should fire archive action', () => {\n    const component = render(<Wrapper isArchiveable={true} />);\n    fireEvent.click(component.getByText('Open menu'));\n    expect(component.queryByText('Archive')).toBeTruthy();\n\n    fireEvent.click(component.getByText('Archive'));\n    expect(stubProps.archiveAction).toBeCalled();\n  });\n\n  test('should fire edit action', () => {\n    const component = render(<Wrapper />);\n    fireEvent.click(component.getByText('Open menu'));\n    fireEvent.click(component.getByText('Edit'));\n    expect(stubProps.editAction).toBeCalled();\n  });\n\n  test('should fire delete action', () => {\n    const component = render(<Wrapper />);\n    fireEvent.click(component.getByText('Open menu'));\n    fireEvent.click(component.getByText('Delete'));\n    expect(stubProps.deleteAction).toBeCalled();\n  });\n});\n")),Object(o.b)("h2",{id:"mocking"},"Mocking"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"// Component.tsx\n// super basic example w/ no types\nimport useAPIHook from 'path/to/hook';\nconst Component = () => {\n  const { data, loading } = useAPIHook(); // whatever you are getting destructured from the hook\n\n  if (loading) return <p data-automation-id=\"example-loading\">Loading</p>;\n\n  return <p data-automation-id=\"example-data\">Doing cool stuff with {data}</p>;\n};\n\n// Component.test.tsx\nimport Component from 'path/to/component';\nimport useAPIHook from 'path/to/hook';\njest.mock('path/to/hook');\ndescribe('useful description', () => {\n  test('component does this when data available', async () => {\n    useAPIHook.mockImplementation(() => ({\n      data: 'mocks',\n      loading: false,\n    }));\n    const { getByTestId } = await render(<Component />);\n    expect(getByTestId('example-data')).toBeTruthy();\n  });\n\n  test('component shows loading when API loading', async () => {\n    useAPIHook.mockImplementation(() => ({\n      data: 'mocks',\n      loading: true,\n    }));\n    const { getByTestId } = await render(<Component />);\n    expect(getByTestId('example-loading')).toBeTruthy();\n  });\n});\n")))}s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/React/React-Testing-Library.md"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-react-react-testing-library-md-8e90b124019fef892770.js.map