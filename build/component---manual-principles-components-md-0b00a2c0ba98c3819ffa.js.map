{"version":3,"sources":["webpack:///../manual/Principles/Components.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","isMDXComponent"],"mappings":"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","file":"component---manual-principles-components-md-0b00a2c0ba98c3819ffa.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#components\"\n        }}>{`Components`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#web-checklist\"\n            }}>{`Web Checklist`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#web-testing\"\n            }}>{`Web Testing`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#functional-testing-template\"\n                }}>{`Functional Testing Template`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#regression-testing-template\"\n                }}>{`Regression Testing Template`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#ui-testing-template\"\n                }}>{`UI Testing Template`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#web-accessibility\"\n            }}>{`Web Accessibility`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#component-rules\"\n            }}>{`Component rules`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#type-checking\"\n            }}>{`Type Checking`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#complex-example\"\n                }}>{`Complex example`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#using-decorators\"\n            }}>{`Using decorators`}</a></li>\n        </ul></li>\n    </ul>\n    <h1 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h1>\n    <h2 {...{\n      \"id\": \"web-checklist\"\n    }}>{`Web Checklist`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Web testing`}</li>\n      <li parentName=\"ol\">{`Web accessibility`}</li>\n      <li parentName=\"ol\">{`Component rules`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"web-testing\"\n    }}>{`Web Testing`}</h2>\n    <p>{`For the web, we want to ensure that we can run UI tests, regression tests and functional tests.`}</p>\n    <h3 {...{\n      \"id\": \"functional-testing-template\"\n    }}>{`Functional Testing Template`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Example function to test\nfunction add(x, y) {\n  return x + y;\n}\n\n// Test suite\ndescribe('JavaScript functionality for a file', () => {\n  // Test spec\n  it('expects true to be true', () => {\n    expect(true).to.be.true; // evaluates to true - test passes\n  });\n\n  // Test spec\n  it('expects 1 + 2 to equal 3', () => {\n    const result = add(1, 2);\n    expect(result).to.equal(3); // evaluates to true - test passes\n  });\n});\n`}</code></pre>\n    <p>{`For UI Tests, reference `}<inlineCode parentName=\"p\">{`manual/Testing/mocha-and-chai.md`}</inlineCode>{` for more information. It is best to run this using `}<inlineCode parentName=\"p\">{`mochacinno`}</inlineCode>{` and in watch mode. These are best use for anything found under the `}<inlineCode parentName=\"p\">{`js`}</inlineCode>{` controller module banner.`}</p>\n    <h3 {...{\n      \"id\": \"regression-testing-template\"\n    }}>{`Regression Testing Template`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Regression tests\n * @author Dennis O'Keeffe\n */\nrequire('babel-polyfill');\nconst expect = require('chai').expect;\nconst cwd = process.cwd();\nconst PixelDiff = require('controllers/pixeldiff');\nconst puppeteer = require('puppeteer');\n\nconsole.log(PixelDiff);\nconsole.log(cwd);\n\nconst screenshot = async (selector, savePath, location = '/') => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n\n  console.log('Opening browser');\n  await page.goto('http://localhost:3000');\n\n  const el = await page.$('.homeSplashFade');\n  await el.screenshot({ path: savePath });\n\n  console.log('Closing browser');\n  await browser.close();\n};\n\ndescribe('It works functionality', () => {\n  it('Expects true to be true', () => {\n    expect(true).to.be.true;\n  });\n});\n\ndescribe('Image regression testing', () => {\n  it('has no pixel difference', async () => {\n    console.log('Comparing images');\n    await screenshot('.homeSplashFade', cwd + '/regression/temp/test.png');\n\n    const res = await PixelDiff.diff({\n      imgOnePath: cwd + '/regression/src/test.png',\n      imgTwoPath: cwd + '/regression/temp/test.png',\n      dest: cwd + '/regression/diff/test.png',\n      output: true\n    });\n    expect(res).to.equal(0);\n  });\n});\n`}</code></pre>\n    <p>{`For more information, reference `}<inlineCode parentName=\"p\">{`manual/Testing/Regression-Testing.md`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"ui-testing-template\"\n    }}>{`UI Testing Template`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const puppeteer = require('puppeteer');\n\n// Test suite\ndescribe('PageHome functionality', () => {\n  // Test suite within another test suite - useful for subsectioning tests within a component/page\n  describe('Simple Puppeteer UI test for form elements', () => {\n    it('firstName and lastName from Puppeteer deep equal expected schema', async () => {\n      const expected = {\n        firstName: 'Hello',\n        lastName: 'World'\n      };\n\n      const browser = await puppeteer.launch({ headless: false });\n      const page = await browser.newPage();\n      await page.goto('http://localhost:3000');\n      await page.screenshot({ path: 'example.png' }); // create an example screenshot of current UI state\n      await page.type('input[name=\"firstName\"]', 'Hello');\n      const firstName = await page.$eval(\n        'input[name=\"firstName\"]',\n        (el) => el.value\n      );\n\n      await page.waitFor(500);\n      await page.click('#next');\n      await page.waitForSelector('input[name=\"lastName\"]');\n      await page.type('input[name=\"lastName\"]', 'World');\n      const lastName = await page.$eval(\n        'input[name=\"lastName\"]',\n        (el) => el.value\n      );\n\n      await page.waitFor(500);\n      const formData = {\n        firstName: firstName,\n        lastName: lastName\n      };\n\n      await browser.close();\n\n      expect(formData).to.deep.equal(expected); // evauates to true if form fields hold correct value\n    });\n  });\n});\n`}</code></pre>\n    <p>{`For more information, reference `}<inlineCode parentName=\"p\">{`manual/Testing/puppeteer.md`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"web-accessibility\"\n    }}>{`Web Accessibility`}</h2>\n    <p>{`Run the site through the accessibility checker and ensure that there are no errors.`}</p>\n    <p>{`Useful links:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://design-patterns.tink.uk/\"\n        }}>{`Tink Design Patterns`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"component-rules\"\n    }}>{`Component rules`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`We want reusability where possible`}</li>\n      <li parentName=\"ul\">{`UI elements should have no hardcoded text`}</li>\n      <li parentName=\"ul\">{`Where possible, use `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/reduxjs/reselect\"\n        }}>{`Reselect`}</a>{` when using Redux and having elements that require a change to only specific state elements`}</li>\n      <li parentName=\"ul\">{`Use a decorator over all objects`}</li>\n      <li parentName=\"ul\">{`Write all files in TypeScript`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"type-checking\"\n    }}>{`Type Checking`}</h2>\n    <p>{`Type checking is an integral part of the process to ensure that what we are providing is the correct type.`}</p>\n    <p>{`TypeScript with VSCode offers a great to do this from our doc blocks.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@trukrs/type-safe-javascript-with-jsdoc-7a2a63209b76\"\n      }}>{`This Medium article has a great into into it.`}</a></p>\n    <p>{`To get started on VSCode for .js files, head to settings and update the \"Check JS\" box.`}</p>\n    <p><img alt=\"Check JS\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1539053998/Screen_Shot_2018-10-09_at_1.36.08_pm.png\" /></p>\n    <p>{`Now we can get into type setting simply by using our doc blocks with the `}<inlineCode parentName=\"p\">{`@type`}</inlineCode>{` attribute!`}</p>\n    <p><img alt=\"Basic example\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1539053998/Screen_Shot_2018-10-09_at_1.43.22_pm.png\" /></p>\n    <p>{`The deep you delve into the type, the deeper the error outlines go.`}</p>\n    <p><img alt=\"More complex example\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1539053998/Screen_Shot_2018-10-09_at_1.47.28_pm.png\" /></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/docs/handbook/basic-types.html\"\n      }}>{`Checkout the Typescript page`}</a>{` to get more of an idea about what you can do.`}</p>\n    <h3 {...{\n      \"id\": \"complex-example\"\n    }}>{`Complex example`}</h3>\n    <p>{`Here is an example using @typedefs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport Config from 'src/app.json';\nimport Emitter from 'common/Emitter';\n/* user imports */\n\n/**\n * Render the ComponentALFooterOne component\n *\n * @class ComponentALFooterOne\n * @extends {Component}\n */\nclass ComponentALFooterOne extends Component {\n  /**\n   * @typedef {Object} Link Defines the main links\n   * @property {String} copy Copy string\n   * @property {String} link Link URL\n   */\n  /**\n   * @typedef {Object} Social Social links\n   * @property {String} type Type of social linke\n   * @property {String} link Link URL\n   */\n  /**\n   * @typedef {Object} State The state object\n   * @property {Link[]} linksTop Links that go on the top\n   * @property {Social[]} linksSocial Social links\n   * @property {Link[]} linksBottom Links that go to the bottom\n   */\n\n  /**\n   * @type {State} state\n   */\n  state = {\n    linksTop: [\n      {\n        copy: 'Link',\n        link: '/'\n      },\n      {\n        copy: 'Link',\n        link: '/'\n      },\n      {\n        copy: 'Link',\n        link: '/'\n      },\n      {\n        copy: 'Link',\n        link: '/'\n      }\n    ],\n    linksSocial: [\n      {\n        type: 'Link',\n        link: '/'\n      },\n      {\n        type: 'Link',\n        link: '/'\n      },\n      {\n        type: 'Link',\n        link: '/'\n      },\n      {\n        type: 'Link',\n        link: '/'\n      }\n    ],\n    linksBottom: [\n      {\n        copy: 'Link',\n        link: '/'\n      },\n      {\n        copy: 'Link',\n        link: '/'\n      },\n      {\n        copy: 'Link',\n        link: '/'\n      }\n    ]\n  };\n\n  handleLink(e, d) {\n    Emitter.emit('event', {\n      event: 'ComponentALFooterOne.handleLink',\n      e: e.target\n    });\n\n    if (d.href[0] === '/') {\n      e.preventDefault();\n      const { router } = this.props;\n      router.push(Config.baseUrl + d.href);\n    }\n  }\n\n  renderLinksTopLeft = () => {\n    const { linksTopLeft } = this.props.copy;\n    if (!linksTopLeft) {\n      return;\n    }\n\n    return linksTopLeft.map((d, i) => (\n      <a\n        key={i}\n        onClick={(e) => this.handleLink(e, d)}\n        href={d.href}\n        className=\"text f-primary link margin opaque animate\"\n      >\n        {d.name}\n      </a>\n    ));\n  };\n\n  renderLinksBottomLeft = () => {\n    const { linksBottomLeft } = this.props.copy;\n    if (!linksBottomLeft) {\n      return;\n    }\n\n    return linksBottomLeft.map((d, i) => (\n      <a\n        key={i}\n        onClick={(e) => this.handleLink(e, d)}\n        href={d.href}\n        className=\"text f-primary link social margin opaque animate\"\n      >\n        {d.name}\n      </a>\n    ));\n  };\n\n  renderLinksBottomRight = () => {\n    const { linksBottomRight } = this.props.copy;\n    if (!linksBottomRight) {\n      return;\n    }\n\n    return linksBottomRight.map((d, i) => (\n      <a\n        key={i}\n        onClick={(e) => this.handleLink(e, d)}\n        href={d.href}\n        className=\"text f-primary link social margin opaque animate\"\n      >\n        {d.name}\n      </a>\n    ));\n  };\n\n  /**\n   * Render ComponentALFooterOne component\n   * @memberof ComponentALFooterOne\n   * @var {function} render Render ComponentALFooterOne component\n   * @returns {Object} component\n   */\n  render() {\n    return (\n      <div className=\"component-al-footer-one\">\n        <div className=\"container content\">\n          <nav className=\"nav footer\">\n            <div className=\"block-main links\">{this.renderLinksTopLeft()}</div>\n            <div className=\"block-lower\">\n              <div className=\"block-social\">{this.renderLinksBottomLeft()}</div>\n\n              <div className=\"block-footer links\">\n                {this.renderLinksBottomRight()}\n              </div>\n            </div>\n          </nav>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ComponentALFooterOne;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-decorators\"\n    }}>{`Using decorators`}</h2>\n    <p>{`Decorators are a useful way to cut code and wrap classes. A good example is the usage with redux. Take note though: decorators are deprecated and may be removed.`}</p>\n    <p>{`The example of a decorator used for Redux:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { connect } from 'react-redux';\n\nconst DecoratorRedux = (component) => {\n  const mapStateToProps = (state) => {\n    return {\n      routing: state.routing,\n      copy: state.copy,\n      current: state.routing.locationBeforeTransitions.pathname\n    };\n  };\n\n  return connect(mapStateToProps)(component);\n};\n\nexport default DecoratorRedux;\n`}</code></pre>\n    <p>{`In use:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`@DecoratorRedux\nclass PageBlog extends Component {\n    /**\n     * Render PageBlog component\n     * @memberof PageBlog\n     * @var {function} render Render PageBlog component\n     * @returns {PageBlog} component\n     */\n    render() {\n      return (<div><p>Hello!</p></div>);\n    }\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}