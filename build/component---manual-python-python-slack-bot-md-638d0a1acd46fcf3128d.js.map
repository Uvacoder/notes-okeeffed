{"version":3,"sources":["webpack:///../manual/Python/Python-Slack-Bot.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","href","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,mNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,oBAGA,qDACA,iBAAQ,CACN,GAAM,qBADR,qBAGA,iBAAGC,KAAK,YAAR,SAVK,QAWJ,iBAAGA,KAAK,eAAR,SACD,uBACA,iBAAQ,CACN,GAAM,SADR,SAGA,gDAA+B,0BAAYC,WAAW,KAAvB,iBAA/B,cACA,iFAAgE,0BAAYA,WAAW,KAAvB,SAAhE,6CACA,8DAA6C,0BAAYA,WAAW,KAAvB,eAA7C,wCACA,iBAAQ,CACN,GAAM,oBADR,oBAGA,+BAAc,0BAAYA,WAAW,KAAvB,WAAd,4EAA8I,0BAAYA,WAAW,KAAvB,aAA9I,kDAAsP,0BAAYA,WAAW,KAAvB,gBAAtP,QAAuT,0BAAYA,WAAW,KAAvB,kBAAvT,sBACA,mEAAkD,0BAAYA,WAAW,KAAvB,+BAAlD,KACA,2EACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,+BAAc,0BAAYA,WAAW,KAAvB,WAAd,sBAAwF,0BAAYA,WAAW,KAAvB,cACxF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,+qB,0MA4BTL,EAAWM,gBAAiB","file":"component---manual-python-python-slack-bot-md-638d0a1acd46fcf3128d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-a-slack-bot\"\n    }}>{`Add a Slack Bot!`}</h1>\n    <p>{`// this needs to be finished`}</p>\n    <h2 {...{\n      \"id\": \"table-of-contents\"\n    }}>{`Table of Contents`}</h2>\n    <a href=\"#section\">title</a>\n---- <a href=\"#subsection\">title</a>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"intro\"\n    }}>{`Intro`}</h2>\n    <p>{`First of all, clone the `}<inlineCode parentName=\"p\">{`python_rtmbot`}</inlineCode>{` git repo.`}</p>\n    <p>{`Then, head to slack.com for your personal account, click `}<inlineCode parentName=\"p\">{`build`}</inlineCode>{` from the apps page and add a custom bot.`}</p>\n    <p>{`Grab the API token and copy it into a `}<inlineCode parentName=\"p\">{`rtmbot.conf`}</inlineCode>{` file at the root of your directory.`}</p>\n    <h2 {...{\n      \"id\": \"creating-plugins\"\n    }}>{`Creating plugins`}</h2>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`plugins`}</inlineCode>{` folder, create a folder with the name of the plugin and then within the `}<inlineCode parentName=\"p\">{`plugin.py`}</inlineCode>{` itself. Inside, you want to ensure you have a `}<inlineCode parentName=\"p\">{`outputs = []`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`crontable = []`}</inlineCode>{` list ready to go.`}</p>\n    <p>{`From here, you can define processes as so: `}<inlineCode parentName=\"p\">{`def process_namehere(data):`}</inlineCode>{`.`}</p>\n    <p>{`The data argument is the data recieved by the bot.`}</p>\n    <h2 {...{\n      \"id\": \"banana-plugin\"\n    }}>{`Banana Plugin`}</h2>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`plugins`}</inlineCode>{` directory, create `}<inlineCode parentName=\"p\">{`banana.py`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import random\n\nfrom nltk.tokenize import sent_tokenizem wordpunct_tokenize\nfrom noun_hound import NounHound\n\ncrontable = []\noutputs = []\n\nnh = NounHound()\n\ndef process_message(data):\n        messaage = data['text']\n        sentences = sent_tokenize(message)\n        sentences_num = random.randint(0, len(sentences) - 1)\n        setence = sentences[stence_num]\n        words = wordpunct_tokenize(sentence)\n        nouns = nh.process(sentence)\n        replacement = random.choice(nouns['nouns'])\n        words[words.index(replacement) = 'banana']\n        sentences[sentence_num] = ' '.join(words)\n        outputs.append([data[\"channel\"], ' '.join(sentences)])\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}