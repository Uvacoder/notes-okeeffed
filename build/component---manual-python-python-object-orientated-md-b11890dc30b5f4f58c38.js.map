{"version":3,"sources":["webpack:///../manual/Python/Python-Object-Orientated.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","href","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,2NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,4BADR,4BAMA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8BADQ,4BAEiB,kBAAIA,WAAW,MAChD,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uBADQ,sBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,aADQ,WAEA,kBAAIA,WAAW,MAC/B,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,6BADQ,4BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,wBADQ,uBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uBADQ,gBAEI,kBAAIA,WAAW,KAAf,UAFJ,YAIxB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,wBADQ,sBAEW,kBAAIA,WAAW,MAC1C,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,6BADQ,4BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sBADQ,gBAEI,kBAAIA,WAAW,KAAf,SAFJ,UAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,2BADQ,0BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iCADQ,qCAS9B,iBAAQ,CACN,GAAM,qBADR,qBAGA,iBAAGC,KAAK,YAAR,SArDK,QAsDJ,iBAAGA,KAAK,eAAR,SACD,uBACA,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,sBADR,sBAGA,uBAAK,sBAAMD,WAAW,OAAU,IAA3B,mXAuBL,iBAAQ,CACN,GAAM,iBADR,iBAGA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,wMAUL,uCACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,mJAOL,iBAAQ,CACN,GAAM,cADR,QAEa,kBAAIA,WAAW,MAAf,UAFb,SAGA,sDACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,+TASL,uBACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,oFACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,yqBA+BL,iBAAQ,CACN,GAAM,sBADR,sBAGA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,6UAoBL,kCACA,iLACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,2EAKL,iBAAQ,CACN,GAAM,aADR,QAEa,kBAAIA,WAAW,MAAf,SAFb,SAGA,4DACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,0PAUL,kCACA,uHACA,8BAAa,sBAAQA,WAAW,KAAnB,OAAb,0RAEA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,2JAQL,iBAAQ,CACN,GAAM,oBADR,oBAGA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,yeAmBL,kCACA,4RACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,qRAYL,iBAAQ,CACN,GAAM,0BADR,0BAGA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,iVAYL,uCACA,6IACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,yI,kNAYTJ,EAAWM,gBAAiB","file":"component---manual-python-python-object-orientated-md-b11890dc30b5f4f58c38.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"python-object-orientated\"\n    }}>{`Python Object Orientated`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#python-object-orientated\"\n        }}>{`Python Object Orientated`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#table-of-contents\"\n            }}>{`Table of Contents`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#objects\"\n            }}>{`Objects`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----creating-instances\"\n                }}>{`---- Creating Instances`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----class-methods\"\n                }}>{`---- Class Methods`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----_-_-init-_-_\"\n                }}>{`---- `}{`_`}{` `}<em parentName=\"a\">{` init `}</em>{` `}{`_`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#python-inheritance\"\n            }}>{`Python Inheritance`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----python-subclassing\"\n                }}>{`---- Python Subclassing`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----_-_-str-_-_\"\n                }}>{`---- `}{`_`}{` `}<em parentName=\"a\">{` str `}</em>{` `}{`_`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----instance-methods\"\n                }}>{`---- Instance Methods`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----overriding-inheritance\"\n                }}>{`---- Overriding Inheritance`}</a></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"table-of-contents\"\n    }}>{`Table of Contents`}</h2>\n    <a href=\"#section\">title</a>\n---- <a href=\"#subsection\">title</a>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"objects\"\n    }}>{`Objects`}</h2>\n    <h2 {...{\n      \"id\": \"creating-instances\"\n    }}>{`Creating Instances`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> class Monster:\n...     hit_points=1\n...     color=\"blue\"\n...     weapon=\"sword\"\n...\n>>> monster = Monster()\n>>> monster.hit_points\n1\n>>> monster.weapon\n'sword'\n>>> monster.color\n'blue'\n\n# jubjub instance\n>>> jubjub = Monster()\n>>> type(jubjub)\n<type 'instance'>\n>>> jubjub.hit_points\n1\n>>> jubjub.hit_points = 5\n>>> jubjub.hit_points\n5\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class-methods\"\n    }}>{`Class Methods`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> class Methods:\n...     a = 2\n...     sound=\"roar\"\n...     def battlecry(self):\n...             return self.sound.upper()\n...\n>>> general = Methods()\n>>> general.battlecry()\n'ROAR'\n`}</code></pre>\n    <p>{`Code Challenge`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`class Store:\n    open = 9\n    close = 18\n\n    def hours(self):\n        return \"We're open from {} to {}\".format(self.open, self.close)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"_--init--_\"\n    }}>{`_`}{` `}<em parentName=\"h2\">{` init `}</em>{` `}{`_`}</h2>\n    <p>{`Dealing with the dunder init!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`class Monster:\n    def __init__(self, **kwargs):\n        self.hit_points = kwargs.get('hit_points', 5)\n        self.weapon = kwargs.get('weapon', 'sword')\n        self.color = kwargs.get('color', 'yellow')\n        self.sound = kwargs.get('sound', 'yell')\n\nmonster = Monster(hit_points=22, color=\"green\")\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"python-inheritance\"\n    }}>{`Python Inheritance`}</h2>\n    <p>{`Building on from before, we're just making some defaults...`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`class Monster:\n    min_hp = 1\n    max_hp = 1\n    min_exp = 1\n    max_exp = 1\n    weapon = 'sword'\n    sound = 'roar'\n\n    def __init__(self, **kwargs):\n        self.hp = random.randint(self.min_hp, self.max_hp)\n        self.exp = random.randint(self.min_exp, self.max_exp)\n        self.color = random.choice(COLORS)\n\n        for key, value in kwargs.items():\n            setattr(self, key, value)\n\n    def battlecry(self):\n        return self.sound.upper()\n\nnew_mon = Monster()\nnew_mon.hp\n# 1\nnew_mon.color\n# 'blue'\n\nfresh = Monster(color='blue', sound='whistling', hp='500', adjective='manxsome')\nfresh.color\n# 'blue'\nfresh.adjective\n# manxsome\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"python-subclassing\"\n    }}>{`Python Subclassing`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`# building on from monster\n\nclass Goblin(Monster):\n    max_hp = 3\n    max_exp = 2\n    sound = 'squek'\n\ngolbin = Goblin()\ngoblin.hp\n# 2 - now isn't just 1 from the min/max set above!\ngoblin.color\n# 'blue'\n\nclass Troll(Monster):\n    min_hp = 3\n    max_hp = 5\n    min_exp = 2\n    max_exp = 6\n    sound = 'growl'\n`}</code></pre>\n    <p>{`Challenge`}</p>\n    <p>{`Create a new class named Dragon that extends the Monster class. Don't forget to import Monster from monster. Give your Dragon an integer size attribute.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`from monster import Monster\n\nclass Dragon(Monster):\n    size = 12\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"_--str--_\"\n    }}>{`_`}{` `}<em parentName=\"h2\">{` str `}</em>{` `}{`_`}</h2>\n    <p>{`This helps us when we print(object)`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`class Monster:\n    ...\n    def __str__(self):\n        return '{} {}, HP: {} ...'.format(self.color.title(), self.__class__.__name__, self.hp, self.exp)\n    ...\n\ndraco = Monster()\nprint(draco)\n# returns the details from the magic method\n`}</code></pre>\n    <p>{`Challenge`}</p>\n    <p>{`Import Game from game. Make a new class named GameScore that extends Game. Use pass if needed.`}</p>\n    <p>{`Add a `}<strong parentName=\"p\">{`str`}</strong>{` method to GameScore that returns the score in the string \"Player 1: 5; Player 2: 10\", using the correct values from self.score. self.score is a tuple with Player 1's score and Player 2's score like (5, 10).\nYou do not need to define self.score. It comes from the Game class.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`from game import Game\n\nclass GameScore(Game):\n    pass\n\n    def __str__(self):\n        return \"Player 1: {}; Player 2: {}\".format(*self.score)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"instance-methods\"\n    }}>{`Instance Methods`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`class Character:\n    exp = 0\n    hp = 10\n\n    def __init__(self, **kwargs):\n        self.name = input(\"Name: \")\n        self.weapon = self.get_weapon()\n        for k, v in kwargs.items():\n            setattr(self, k, v)\n\n    def get_weapon(self):\n        weapon_choice = input(\"Weapon: [S]word, [A]xe: \").lower()\n\n        if weapon_choice in 'sa':\n            if weapon_choice == 's':\n                return 'sword'\n            else\n                return 'axe'\n`}</code></pre>\n    <p>{`Challenge`}</p>\n    <p>{`Add a score method to Game that takes a player argument. The player argument will be either 1 or 2. Increase that player's value in self.current_score by 1. You'll need to adjust the index (i.e. player = 1 means self.current_score`}{`[0]`}{` needs to increase).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`class Game:\n  def __init__(self):\n    self.current_score = [0, 0]\n\n  def score(self, player):\n    if player in [1,2]:\n        if player == 1:\n            self.current_score[0] += 1\n        elif player == 2:\n            self.current_score[1] += 1\n        return\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"overriding-inheritance\"\n    }}>{`Overriding Inheritance`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`class Character(Combat):\n    attack_limit = 10\n\n    # pretend that we're overriding the Combat attack method)\n    def attack(self):\n        roll = random.randint(1, self.attack_limit)\n        if self.weapon == 'sword':\n            roll += 1\n        elif self.weapon == 'axe':\n            roll +=2\n        return roll > 4\n`}</code></pre>\n    <p>{`Code Challenge`}</p>\n    <p>{`Animal.noise() returns self.sound.lower(). Make Sheep.noise() return the uppercased version of the instance's sound.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`from animal import Animal\n\nclass Sheep(Animal):\n    sound = \"Bless\"\n\n    def noise(self):\n        return self.sound.upper()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}