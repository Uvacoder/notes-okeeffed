{"version":3,"sources":["webpack:///../manual/Machine-Learning/CL-Logistic-Regression.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,mOAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sCADR,uCAGA,gDAA+B,0BAAYC,WAAW,KAAvB,uBAA/B,uCAAsI,0BAAYA,WAAW,KAAvB,OAAtI,wLACA,mJACA,iBAAQ,CACN,GAAM,QADR,QAGA,qOACA,iBAAQ,CACN,GAAM,iCADR,iCAGA,iFAAgE,sBAAQA,WAAW,KAAnB,QAAhE,KACA,sCAAqB,0BAAYA,WAAW,KAAvB,qBAArB,KAAwF,0BAAYA,WAAW,KAAvB,8BAAxF,6BACA,yNACA,kZACA,iBAAQ,CACN,GAAM,2BADR,2BAGA,8CAA6B,0BAAYA,WAAW,KAAvB,qBAA7B,4CAAuI,0BAAYA,WAAW,KAAvB,4BAAvI,gCAA4O,0BAAYA,WAAW,KAAvB,+BAA5O,6FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,kDAKL,wHACA,+EAA8D,0BAAYA,WAAW,KAAvB,kBAA9D,oFAA+M,0BAAYA,WAAW,KAAvB,KAA/M,OAAoQ,0BAAYA,WAAW,KAAvB,KAApQ,6DAA+W,0BAAYA,WAAW,KAAvB,KAA/W,8CAA2c,0BAAYA,WAAW,KAAvB,kBAA3c,6BAAmiB,0BAAYA,WAAW,KAAvB,gBAAniB,KACA,mFACA,iBAAQ,CACN,GAAM,4BADR,4BAGA,yHAAwG,0BAAYA,WAAW,KAAvB,YAAxG,6BAA0L,0BAAYA,WAAW,KAAvB,OAA1L,QAAkP,0BAAYA,WAAW,KAAvB,UAAlP,KACA,4IACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,23BAgCL,iBAAQ,CACN,GAAM,6DADR,6DAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,wNAQL,qEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,8GAML,iBAAQ,CACN,GAAM,2DADR,2DAGA,+CAA8B,0BAAYA,WAAW,KAAvB,oBAA9B,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,2KAQL,iBAAQ,CACN,GAAM,kDADR,kDAGA,2EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,o4BAqBL,iBAAQ,CACN,GAAM,iCADR,kCAGA,yHACA,0FACA,0NACA,4IACA,iBAAQ,CACN,GAAM,wCADR,yCAGA,sHAAqG,0BAAYA,WAAW,KAAvB,sBAArG,sHACA,kFACA,uGACA,iBAAQ,CACN,GAAM,qDADR,qDAGA,+HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,y4B,0NA0BTJ,EAAWK,gBAAiB","file":"component---manual-machine-learning-cl-logistic-regression-md-ccf80cb3ecdfe32045b0.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"classification-logistic-regression\"\n    }}>{`Classification: Logistic Regression`}</h1>\n    <p>{`This is a basic look at `}<inlineCode parentName=\"p\">{`Logistic Regression`}</inlineCode>{` and implementing an example from a `}<inlineCode parentName=\"p\">{`csv`}</inlineCode>{` file. While the CSV file itself with the data is excluded, this basic look will show how to interpret the CSV in a particular way to give your dependent and independent variables.`}</p>\n    <p>{`The performance and reduction of these independent variables to improve the model are not included in this basic overview.`}</p>\n    <h2 {...{\n      \"id\": \"note\"\n    }}>{`Note`}</h2>\n    <p>{`The original text below includes mathmetical formulas that do not translate into their mathematical expressions on the blog. Some familiarity with Latex will be required to interpret the expressions used.`}</p>\n    <h2 {...{\n      \"id\": \"logistic-regression-intuition\"\n    }}>{`Logistic Regression Intuition`}</h2>\n    <p>{`This section can be quite difficult - there will be some `}<strong parentName=\"p\">{`math`}</strong>{`.`}</p>\n    <p>{`We know about `}<inlineCode parentName=\"p\">{`linear regression`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`multiple linear regression`}</inlineCode>{` etc. (DV on y, IV on x).`}</p>\n    <p>{`What happens if we classify things along a graph? Eg. 0 and 1 on the y axis and age on the x axis. This one is very black and white, but at the same time we can intuitive see some correlation.`}</p>\n    <p>{`In the example given above, we wouldn't use a linear model (as you could imagine). How about instead, you were able throw in probabilies between 0 and 1. The could be a probability between the x intercept and the y-intecept at x`}{`[hat]`}{`. You could interpret the above and below 100% and 0% respectively. This would be a VERY basic but sensicle attempt to describe the model.`}</p>\n    <h3 {...{\n      \"id\": \"the-scientific-approach\"\n    }}>{`The scientific approach`}</h3>\n    <p>{`If we take the linear `}<inlineCode parentName=\"p\">{`y = b[0] + b[1]*x`}</inlineCode>{` and take that into the sigmoid function `}<inlineCode parentName=\"p\">{`p = 1 / (1 + pow(e, -y))`}</inlineCode>{` and then we throw that into `}<inlineCode parentName=\"p\">{`ln(p/(1-p)) = b[0] + b[1]*x`}</inlineCode>{` then we can get the y. Therefore the last equation is the one for logistical regression.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# MAIN FORMULA\nln(p/(1-p)) = b[0] + b[1]*x\n`}</code></pre>\n    <p>{`Based on the above formula and plugging in the example data, we will get the best fitting line.`}</p>\n    <p>{`If we now take any particular ages along the x axis of `}<inlineCode parentName=\"p\">{`20, 30, 40, 50`}</inlineCode>{` etc, we can then find y`}{`[hat]`}{` to get the predicted value that it will be a `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` - the higher the probability, the higher the chance of a `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{`. Any probability that is less than 0.5 is `}<inlineCode parentName=\"p\">{`projected down`}</inlineCode>{` whereas anything else is `}<inlineCode parentName=\"p\">{`projected up`}</inlineCode>{`.`}</p>\n    <p>{`After applying to model, we can start drawing conclusions.`}</p>\n    <h2 {...{\n      \"id\": \"implementation-in-python\"\n    }}>{`Implementation in Python`}</h2>\n    <p>{`Using our standard setup, we want to predict whether or not we can get a correlation between the `}<inlineCode parentName=\"p\">{`purchase`}</inlineCode>{` of something using their `}<inlineCode parentName=\"p\">{`age`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`salary`}</inlineCode>{`.`}</p>\n    <p>{`For accurate predictions, we do use feature scaling and we will also create a classification test and training set.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Data Preprocessing Template\n\n# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Importing the dataset\ndataset = pd.read_csv('data/Social_Network_Ads.csv')\n# We jut want the estimate of purchase using the Age and Estimated Salary\nX = dataset.iloc[:, 2:4].values\ny = dataset.iloc[:, 4].values\n\n# If you wish to check to lists\n# print(X.tolist())\n# print(y.tolist())\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\n# we use this here for accurate predicition\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.fit_transform(X_test)\n\nprint(X_train.tolist())\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fitting-the-logistic-regression-model-to-the-training-set\"\n    }}>{`Fitting the logistic regression model to the Training Set`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Fitting Logistic Regression to the Training Set\n# Create the Regressor\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state=0)\nclassifier.fit(X_train, y_train)\n`}</code></pre>\n    <p>{`In order to make a prediction on the X_test:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# y_pred will be the vector of predictions\ny_pred = classifier.predict(X_test)\nprint(y_pred.tolist())\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"checking-the-fit-predictions-using-the-confusion-matrix\"\n    }}>{`Checking the fit predictions using the Confusion Matrix`}</h3>\n    <p>{`We do this by making a `}<inlineCode parentName=\"p\">{`Confusion Matrix`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Create the confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(\"\\\\nConfusion Matrix\")\nprint(cm.tolist())\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"visualising-the-predictive-power-using-a-graph\"\n    }}>{`Visualising the predictive power using a graph`}</h3>\n    <p>{`There is a lot of code required to visualise this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Visualising the Training Set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                    np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n            alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n            c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Logistical Regression Training Set')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\n# plt.savefig('logistical-regression.png')\nplt.show()\nplt.close()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"how-do-we-interpret-the-graph\"\n    }}>{`How do we interpret the graph?`}</h3>\n    <p>{`The red points are the training set observations for when the IV purchased = 0, and 1 for green.`}</p>\n    <p>{`In our example, red did not buy the SUV, green are those who did.`}</p>\n    <p>{`Given the x,y axis, those with the lower salary who also didn't have red are also those who didn't but the SUV. We can see those with the higher salaries are more likely to have bought the SUV.`}</p>\n    <p>{`Another observation is that the older above the average even with the lower salary were more likely to buy the SUV.`}</p>\n    <h3 {...{\n      \"id\": \"what-is-the-point-of-the-classifiers\"\n    }}>{`What is the point of the classifiers?`}</h3>\n    <p>{`The goal is to classify the right users into the right categories. We do this by plotting the `}<inlineCode parentName=\"p\">{`prediction regions`}</inlineCode>{` - in the case of the graph, it's the red prediction and the green region is where the classifier does by the SUV.`}</p>\n    <p>{`The data point is the result, the region is the estimate.`}</p>\n    <p>{`When we have a linear classifier, the boundary will always be a straight line.`}</p>\n    <h3 {...{\n      \"id\": \"checking-the-results-when-applied-to-the-test-set\"\n    }}>{`Checking the results when applied to the Test Set`}</h3>\n    <p>{`The results that we can see from this actually come from the same confusion matrix that we saw before.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Visualising the Test Set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_test, y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                    np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n            alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n            c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Logistical Regression Test Set')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\n# plt.savefig('logistical-regression.png')\nplt.legend()\nplt.show()\nplt.close()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}