{"version":3,"sources":["webpack:///../manual/Go/Go-Basic-Slices.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,8MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,yBADR,yBAGA,mEACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,sGAYL,iBAAQ,CACN,GAAM,QADR,QAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mZAqBL,iBAAQ,CACN,GAAM,OADR,OAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qjBA2BL,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+JASL,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qK,qMAcTJ,EAAWK,gBAAiB","file":"component---manual-go-go-basic-slices-md-ce1f0654113be0b4afaa.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"basic-slice-functions\"\n    }}>{`Basic Slice Functions`}</h1>\n    <p>{`Set up the folder with test and main file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// slices_test.go\npackage slices\n\nimport (\n    \"testing\"\n)\n\n// slices.go\npackage slices\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"push\"\n    }}>{`Push`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// slices_test.go\nfunc TestPushToIntSlice(t *testing.T) {\n    s := []int{1, 2, 3}\n    i := 4\n\n    exp := []int{1, 2, 3, 4}\n    res := Push(s, i)\n    for idx, val := range res {\n        if exp[idx] != val {\n            t.Fatalf(\"Expected %+v, got %+v\", exp, res)\n        }\n    }\n}\n\n// Push append int to end of int slice\nfunc Push(a []int, b int) []int {\n    return append(a, b)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pop\"\n    }}>{`Pop`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// slices_test.go\nfunc TestPopIntFromSliceSlice(t *testing.T) {\n    s := []int{1, 2, 3, 4}\n\n    expArr := []int{1, 2, 3}\n    exp := 4\n\n    res, resArr := Pop(s)\n    for idx, val := range resArr {\n        if expArr[idx] != val {\n            t.Fatalf(\"Expected %+v, got %+v\", exp, res)\n        }\n    }\n\n    if exp != res {\n        t.Fatalf(\"Popped integer not as expected\")\n    }\n}\n\n// Pop return an integer from an array + array without last index\nfunc Pop(a []int) (int, []int) {\n    x, b := a[len(a)-1], a[:len(a)-1]\n    return x, b\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"unshift\"\n    }}>{`Unshift`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// slices_test.go\n\n// Unshift append as first element and return new slice\nfunc Unshift(a []int, b int) []int {\n    return append([]int{b}, a...)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shift\"\n    }}>{`Shift`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// slices_test.go\n\n// Shift remove from front and return int and new slice\nfunc Shift(a []int) (int, []int) {\n    x, b := a[0], a[1:]\n    return x, b\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}