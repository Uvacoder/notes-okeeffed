{"version":3,"sources":["webpack:///../manual/Functional-Programming/Functional-Architecture-Patterns.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,mPAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oCADR,oCAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,2EADQ,wBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8FADQ,0BAItB,iBAAQ,CACN,GAAM,gBADR,gBAGA,8BACE,iBAAGA,WAAW,cAAd,sLAEF,+FACA,sBACE,kBAAIA,WAAW,MAAf,WACA,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,gBACA,kBAAIA,WAAW,MAAf,aAEF,iBAAQ,CACN,GAAM,6BADR,6BAGA,0HAAyG,0BAAYA,WAAW,KAAvB,wBAAzG,yDACA,iIACA,iBAAQ,CACN,GAAM,oBADR,oBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0NAWL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6D,0OAQTJ,EAAWK,gBAAiB","file":"component---manual-functional-programming-functional-architecture-patterns-md-01d5d05d8c7d0becf65c.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"functional-architecture-patterns\"\n    }}>{`Functional Architecture Patterns`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/workshops/functional-architecture-patterns\"\n        }}>{`FE Masters Workshop`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.amazon.com.au/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215\"\n        }}>{`Domain-Driven Design`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"architecture\"\n    }}>{`Architecture`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You can't teach it in a meaningful way with meaningful architectures... as there is a tension between realistics examples that show the benefits vs something easy to understand.`}</p>\n    </blockquote>\n    <p>{`Architecture is subjective, but tries to encompass or trade off to be:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Modular`}</li>\n      <li parentName=\"ol\">{`Extendable`}</li>\n      <li parentName=\"ol\">{`Performant`}</li>\n      <li parentName=\"ol\">{`Maintainable`}</li>\n      <li parentName=\"ol\">{`Readable`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"the-history-of-procedures\"\n    }}>{`The history of procedures`}</h3>\n    <p>{`In the beginning, there we procedures that we began to group and work on. There is a reference to `}<inlineCode parentName=\"p\">{`Domain-Driven Design`}</inlineCode>{`, which is reference as the path we start going down.`}</p>\n    <p>{`Having procedures groups that don't scale well make people wonder why we do abstracting the first place.`}</p>\n    <h2 {...{\n      \"id\": \"properties-of-fp\"\n    }}>{`Properties of FP`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// associative\nadd(add(1, 1), 4) === add(1, add(1, 4));\n// communitive\nadd(1, 4) === add(4, 1);\n// identity\nadd(n, 0) === n;\n// distributive\nmultiply(2, add(3, 4)) === add(multiply(2, 3), multiply(2, 4));\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const joinWithSpace = joinable => joinable.join(' ');\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}