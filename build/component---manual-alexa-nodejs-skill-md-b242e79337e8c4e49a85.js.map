{"version":3,"sources":["webpack:///../manual/Alexa/Nodejs-Skill.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,8MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,gFADQ,wBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,yFADQ,sBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sEADQ,2BAItB,iBAAQ,CACN,GAAM,QADR,SAGA,sBACE,kBAAIA,WAAW,MAAf,0BACA,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,mBAA5B,YACA,kBAAIA,WAAW,MAAf,iCACA,kBAAIA,WAAW,MAAf,0EAEF,iBAAQ,CACN,GAAM,SADR,SAGA,gDAA+B,0BAAYA,WAAW,KAAvB,WAA/B,qCACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,qBAAG,0BAAYA,WAAW,KAAvB,YAAH,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+5TAgTL,qBAAG,0BAAYA,WAAW,KAAvB,eACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+eAgBL,iBAAQ,CACN,GAAM,uBADR,wBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,iY,qMAwBTJ,EAAWK,gBAAiB","file":"component---manual-alexa-nodejs-skill-md-b242e79337e8c4e49a85.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"alexa-nodejs-skill\"\n    }}>{`Alexa NodeJS Skill`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/alexa/skill-sample-nodejs-howto/blob/master/instructions\"\n        }}>{`Sample NodeJS Howto`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-event-sources-readme.html\"\n        }}>{`CDK Event Sources`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.aws.amazon.com/lambda/latest/dg/lambda-services.html\"\n        }}>{`Lambdba Event Targets`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Create Lambda Function`}</li>\n      <li parentName=\"ol\">{`Add `}<inlineCode parentName=\"li\">{`Alexa Skillskit`}</inlineCode>{` trigger`}</li>\n      <li parentName=\"ol\">{`Add the code (examples) below`}</li>\n      <li parentName=\"ol\">{`Grab the ARN from the top-right and add it the Alexa developer portal`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"notes\"\n    }}>{`Notes`}</h2>\n    <p>{`You may need to add the `}<inlineCode parentName=\"p\">{`trigger`}</inlineCode>{` yourself to the Lambda function.`}</p>\n    <h2 {...{\n      \"id\": \"example-code\"\n    }}>{`Example code`}</h2>\n    <p><inlineCode parentName=\"p\">{`index.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* eslint-disable  func-names */\n/* eslint-disable  no-console */\n\nconst Alexa = require('ask-sdk-core');\nconst recipes = require('./recipes');\nconst i18n = require('i18next');\nconst sprintf = require('i18next-sprintf-postprocessor');\n\n/* INTENT HANDLERS */\nconst LaunchRequestHandler = {\n  canHandle(handlerInput) {\n    return handlerInput.requestEnvelope.request.type === 'LaunchRequest';\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    const item = requestAttributes.t(\n      getRandomItem(Object.keys(recipes.RECIPE_EN_US)),\n    );\n\n    const speakOutput = requestAttributes.t(\n      'WELCOME_MESSAGE',\n      requestAttributes.t('SKILL_NAME'),\n      item,\n    );\n    const repromptOutput = requestAttributes.t('WELCOME_REPROMPT');\n\n    handlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n\n    return handlerInput.responseBuilder\n      .speak(speakOutput)\n      .reprompt(repromptOutput)\n      .getResponse();\n  },\n};\n\nconst RecipeHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      handlerInput.requestEnvelope.request.intent.name === 'RecipeIntent'\n    );\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    const itemSlot = handlerInput.requestEnvelope.request.intent.slots.Item;\n    let itemName;\n    if (itemSlot && itemSlot.value) {\n      itemName = itemSlot.value.toLowerCase();\n    }\n\n    const cardTitle = requestAttributes.t(\n      'DISPLAY_CARD_TITLE',\n      requestAttributes.t('SKILL_NAME'),\n      itemName,\n    );\n    const myRecipes = requestAttributes.t('RECIPES');\n    const recipe = myRecipes[itemName];\n    let speakOutput = '';\n\n    if (recipe) {\n      sessionAttributes.speakOutput = recipe;\n      // uncomment the _2_ reprompt lines if you want to repeat the info\n      // and prompt for a subsequent action\n      // sessionAttributes.repromptSpeech = requestAttributes.t('RECIPE_REPEAT_MESSAGE');\n      handlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n\n      return (\n        handlerInput.responseBuilder\n          .speak(sessionAttributes.speakOutput)\n          // .reprompt(sessionAttributes.repromptSpeech)\n          .withSimpleCard(cardTitle, recipe)\n          .getResponse()\n      );\n    }\n    const repromptSpeech = requestAttributes.t('RECIPE_NOT_FOUND_REPROMPT');\n    if (itemName) {\n      speakOutput += requestAttributes.t(\n        'RECIPE_NOT_FOUND_WITH_ITEM_NAME',\n        itemName,\n      );\n    } else {\n      speakOutput += requestAttributes.t('RECIPE_NOT_FOUND_WITHOUT_ITEM_NAME');\n    }\n    speakOutput += repromptSpeech;\n\n    // save outputs to attributes, so we can use it to repeat\n    sessionAttributes.speakOutput = speakOutput;\n    sessionAttributes.repromptSpeech = repromptSpeech;\n\n    handlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n\n    return handlerInput.responseBuilder\n      .speak(sessionAttributes.speakOutput)\n      .reprompt(sessionAttributes.repromptSpeech)\n      .getResponse();\n  },\n};\n\nconst HelpHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      handlerInput.requestEnvelope.request.intent.name === 'AMAZON.HelpIntent'\n    );\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    const item = requestAttributes.t(\n      getRandomItem(Object.keys(recipes.RECIPE_EN_US)),\n    );\n\n    sessionAttributes.speakOutput = requestAttributes.t('HELP_MESSAGE', item);\n    sessionAttributes.repromptSpeech = requestAttributes.t(\n      'HELP_REPROMPT',\n      item,\n    );\n\n    return handlerInput.responseBuilder\n      .speak(sessionAttributes.speakOutput)\n      .reprompt(sessionAttributes.repromptSpeech)\n      .getResponse();\n  },\n};\n\nconst RepeatHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      handlerInput.requestEnvelope.request.intent.name === 'AMAZON.RepeatIntent'\n    );\n  },\n  handle(handlerInput) {\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    return handlerInput.responseBuilder\n      .speak(sessionAttributes.speakOutput)\n      .reprompt(sessionAttributes.repromptSpeech)\n      .getResponse();\n  },\n};\n\nconst ExitHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      (handlerInput.requestEnvelope.request.intent.name ===\n        'AMAZON.StopIntent' ||\n        handlerInput.requestEnvelope.request.intent.name ===\n          'AMAZON.CancelIntent')\n    );\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const speakOutput = requestAttributes.t(\n      'STOP_MESSAGE',\n      requestAttributes.t('SKILL_NAME'),\n    );\n\n    return handlerInput.responseBuilder.speak(speakOutput).getResponse();\n  },\n};\n\nconst SessionEndedRequestHandler = {\n  canHandle(handlerInput) {\n    console.log('Inside SessionEndedRequestHandler');\n    return handlerInput.requestEnvelope.request.type === 'SessionEndedRequest';\n  },\n  handle(handlerInput) {\n    console.log(\n      \\`Session ended with reason: \\${JSON.stringify(\n        handlerInput.requestEnvelope,\n      )}\\`,\n    );\n    return handlerInput.responseBuilder.getResponse();\n  },\n};\n\nconst ErrorHandler = {\n  canHandle() {\n    return true;\n  },\n  handle(handlerInput, error) {\n    console.log(\\`Error handled: \\${error.message}\\`);\n\n    return handlerInput.responseBuilder\n      .speak(\"Sorry, I can't understand the command. Please say again.\")\n      .reprompt(\"Sorry, I can't understand the command. Please say again.\")\n      .getResponse();\n  },\n};\n\n/* Helper Functions */\n\n// Finding the locale of the user\nconst LocalizationInterceptor = {\n  process(handlerInput) {\n    const localizationClient = i18n.use(sprintf).init({\n      lng: handlerInput.requestEnvelope.request.locale,\n      overloadTranslationOptionHandler:\n        sprintf.overloadTranslationOptionHandler,\n      resources: languageStrings,\n      returnObjects: true,\n    });\n\n    const attributes = handlerInput.attributesManager.getRequestAttributes();\n    attributes.t = function(...args) {\n      return localizationClient.t(...args);\n    };\n  },\n};\n\n// getRandomItem\nfunction getRandomItem(arrayOfItems) {\n  // the argument is an array [] of words or phrases\n  let i = 0;\n  i = Math.floor(Math.random() * arrayOfItems.length);\n  return arrayOfItems[i];\n}\n\n/* LAMBDA SETUP */\nconst skillBuilder = Alexa.SkillBuilders.custom();\nexports.handler = skillBuilder\n  .addRequestHandlers(\n    LaunchRequestHandler,\n    RecipeHandler,\n    HelpHandler,\n    RepeatHandler,\n    ExitHandler,\n    SessionEndedRequestHandler,\n  )\n  .addRequestInterceptors(LocalizationInterceptor)\n  .addErrorHandlers(ErrorHandler)\n  .lambda();\n\n// langauge strings for localization\n// TODO: The items below this comment need your attention\n\nconst languageStrings = {\n  en: {\n    translation: {\n      RECIPES: recipes.RECIPE_EN_US,\n      SKILL_NAME: 'Minecraft Helper',\n      WELCOME_MESSAGE:\n        \"Welcome to %s. You can ask a question like, what's the recipe for a %s? ... Now, what can I help you with?\",\n      WELCOME_REPROMPT:\n        'For instructions on what you can say, please say help me.',\n      DISPLAY_CARD_TITLE: '%s  - Recipe for %s.',\n      HELP_MESSAGE:\n        \"You can ask questions such as, what's the recipe for a %s, or, you can say exit...Now, what can I help you with?\",\n      HELP_REPROMPT:\n        \"You can say things like, what's the recipe for a %s, or you can say exit...Now, what can I help you with?\",\n      STOP_MESSAGE: 'Goodbye!',\n      RECIPE_REPEAT_MESSAGE: 'Try saying repeat.',\n      RECIPE_NOT_FOUND_WITH_ITEM_NAME:\n        \"I'm sorry, I currently do not know the recipe for %s. \",\n      RECIPE_NOT_FOUND_WITHOUT_ITEM_NAME:\n        \"I'm sorry, I currently do not know that recipe. \",\n      RECIPE_NOT_FOUND_REPROMPT: 'What else can I help with?',\n    },\n  },\n  'en-US': {\n    translation: {\n      RECIPES: recipes.RECIPE_EN_US,\n      SKILL_NAME: 'American Minecraft Helper',\n    },\n  },\n  'en-GB': {\n    translation: {\n      RECIPES: recipes.RECIPE_EN_GB,\n      SKILL_NAME: 'British Minecraft Helper',\n    },\n  },\n  de: {\n    translation: {\n      RECIPES: recipes.RECIPE_DE_DE,\n      SKILL_NAME: 'Assistent für Minecraft in Deutsch',\n      WELCOME_MESSAGE:\n        'Willkommen bei %s. Du kannst beispielsweise die Frage stellen: Welche Rezepte gibt es für eine %s? ... Nun, womit kann ich dir helfen?',\n      WELCOME_REPROMPT:\n        'Wenn du wissen möchtest, was du sagen kannst, sag einfach „Hilf mir“.',\n      DISPLAY_CARD_TITLE: '%s - Rezept für %s.',\n      HELP_MESSAGE:\n        'Du kannst beispielsweise Fragen stellen wie „Wie geht das Rezept für eine %s“ oder du kannst „Beenden“ sagen ... Wie kann ich dir helfen?',\n      HELP_REPROMPT:\n        'Du kannst beispielsweise Sachen sagen wie „Wie geht das Rezept für eine %s“ oder du kannst „Beenden“ sagen ... Wie kann ich dir helfen?',\n      STOP_MESSAGE: 'Auf Wiedersehen!',\n      RECIPE_REPEAT_MESSAGE: 'Sage einfach „Wiederholen“.',\n      RECIPE_NOT_FOUND_WITH_ITEM_NAME:\n        'Tut mir leid, ich kenne derzeit das Rezept für %s nicht. ',\n      RECIPE_NOT_FOUND_WITHOUT_ITEM_NAME:\n        'Tut mir leid, ich kenne derzeit dieses Rezept nicht. ',\n      RECIPE_NOT_FOUND_REPROMPT: 'Womit kann ich dir sonst helfen?',\n    },\n  },\n};\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`recipes.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* eslint-disable  func-names */\n/* eslint-disable max-len */\n/* eslint quote-props: ['error', 'consistent'] */\n// TODO: Replace this data with your own.\nmodule.exports = {\n  RECIPE_EN_GB: {\n    'snow golem':\n      'A snow golem can be created by placing a pumpkin on top of  two snow blocks on the ground.',\n    'pillar quartz block':\n      'A pillar of quartz can be obtained by placing a block of quartz on top of a block of quartz in mine craft.',\n    // ...omittd\n  },\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example-packagejson\"\n    }}>{`Example package.json`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"name\": \"how-to\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"ask-sdk-core\": \"^2.0.0\",\n    \"ask-sdk-model\": \"^1.0.0\",\n    \"i18next\": \"^10.5.0\",\n    \"i18next-sprintf-postprocessor\": \"^0.2.2\"\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}