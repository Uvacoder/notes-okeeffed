{"version":3,"sources":["webpack:///../manual/TypeScript/Duck-Typing.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,6BADR,6BAGA,4DACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,2sB,yMAmDTJ,EAAWK,gBAAiB","file":"component---manual-type-script-duck-typing-md-0364579ee9df689a0b96.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"duck-typing-in-typescript\"\n    }}>{`Duck Typing in TypeScript`}</h1>\n    <p>{`This is an example of typing in TS:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface Vehicle {\n  model: number;\n}\n\ninterface StrVehicle {\n  model: string;\n}\n\nclass Car {\n  model;\n\n  constructor(model) {\n    this.model = model;\n  }\n\n  getModel() {\n    return this.model;\n  }\n}\n\nconst otherCar: Vehicle = new Car(4);\notherCar.model;\n\nconst strCar: StrVehicle = new Car('mitsubishi');\nstrCar.model;\n\nclass StrictCar implements Vehicle {\n  model: number;\n\n  constructor(props) {\n    this.model = model;\n  }\n\n  getModel() {\n    return this.model;\n  }\n}\n\nconst otherCar2: Vehicle = new StrictCar(4);\notherCar.model;\n\n// Throws error: \\`StrVehicle not assignable to StrictCar\\`\nconst strCar2: StrVehicle = new StrictCar('mitsubishi');\nstrCar.model;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}