{"version":3,"sources":["webpack:///../manual/Haskell/Haskell-From-First-Principles.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","math","isMDXComponent"],"mappings":"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","file":"component---manual-haskell-haskell-from-first-principles-md-d0b9d7bc506a7fd3795e.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport 'katex/dist/katex.min.css';\nimport { BlockMath } from 'react-katex';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"haskell-from-first-principles\"\n    }}>{`Haskell From First Principles`}</h1>\n\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf\"\n        }}>{`A Tutorial Intro to Lambda Calculus`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"what-is-a-function\"\n    }}>{`What is a function`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`A set of possible inputs and a set of possible outputs`}</p>\n    </blockquote>\n    <BlockMath math=\"f(1) = A\" mdxType=\"BlockMath\" />\n    <BlockMath math=\"f(2) = B\" mdxType=\"BlockMath\" />\n    <BlockMath math=\"f(3) = C\" mdxType=\"BlockMath\" />\n    <p>{`The input set (domain) is `}<inlineCode parentName=\"p\">{`{1,2,3}`}</inlineCode>{` and the output set (codomain) is `}<inlineCode parentName=\"p\">{`{A,B,C}`}</inlineCode>{`.`}</p>\n    <p>{`In our function, an input of `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` will ALWAYS return `}<inlineCode parentName=\"p\">{`A`}</inlineCode>{`, no exceptions.`}</p>\n    <h2 {...{\n      \"id\": \"lambda-termd\"\n    }}>{`Lambda termd`}</h2>\n    <p>{`Lambda calculus has three basic components:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Expressions`}</li>\n      <li parentName=\"ol\">{`Variables`}</li>\n      <li parentName=\"ol\">{`Abstractions`}</li>\n    </ol>\n    <p>{`The word `}<inlineCode parentName=\"p\">{`expression`}</inlineCode>{` refers to a superset of those things. It can be a variable name, an abstraction or a combination of those things.`}</p>\n    <p>{`An `}<inlineCode parentName=\"p\">{`abstraction`}</inlineCode>{` is a function. It is a lambda term that has a head (a lambda) and a body and is applied to an argument. An `}<inlineCode parentName=\"p\">{`argument`}</inlineCode>{` is an input value.`}</p>\n    <p>{`Abstractions consist of the `}<inlineCode parentName=\"p\">{`head`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`body`}</inlineCode>{`. The head of the function is a lambda followed by a variable name. The body of the function is another expression.`}</p>\n    <p>{`A simple function might look like this:`}</p>\n    <BlockMath math=\"\\lambda x.x\" mdxType=\"BlockMath\" />\n    <p>{`The variable named in the head is the `}<inlineCode parentName=\"p\">{`parameter`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`binds`}</inlineCode>{` all instances of that same variable in the body of the function. In laymen terms, when we apply this function to an argument, each `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{` in the body of the function will have the value of that argument.`}</p>\n    <p>{`In the above, we were reference functions called `}<inlineCode parentName=\"p\">{`f`}</inlineCode>{`, but in the previous section the lambda astraction has no name and is an `}<inlineCode parentName=\"p\">{`anonymous function`}</inlineCode>{`.`}</p>\n    <p>{`A named function can be called by name by another function, a lambda cannot.`}</p>\n    <h3 {...{\n      \"id\": \"breakdown-of-the-lambda\"\n    }}>{`Breakdown of the lambda`}</h3>\n    <p>{`The extent of the lambda:`}</p>\n    <BlockMath math=\"\\lambda x.\" mdxType=\"BlockMath\" />\n    <p>{`The first `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{` is the single parameter of the function. This binds an variables:`}</p>\n    <p>{`The second `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{` is part of the body, the expression the lambda returns when applied. This is a bound variable.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`.`}</inlineCode>{` separates the parameters of the lambda from the function body.`}</p>\n    <h2 {...{\n      \"id\": \"alpha-equivalence\"\n    }}>{`Alpha Equivalence`}</h2>\n    <BlockMath math=\"\\lambda x.x\" mdxType=\"BlockMath\" />\n    <p>{`In the above expression, the variable `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{` is not semantically meaningful except in its role in that single expression. Because of this, there's a form of equivalence between lambda terms called `}<inlineCode parentName=\"p\">{`alpha equivalence`}</inlineCode>{`. This is a way of saying:`}</p>\n    <BlockMath math=\"\\lambda x.x = \\lambda d.d = \\lambda z.z\" mdxType=\"BlockMath\" />\n    <h2 {...{\n      \"id\": \"beta-reduction\"\n    }}>{`Beta reduction`}</h2>\n    <p>{`When we apply a function to an argument, we substitute the input expression for all instances of the bound variables within the body of the abstraction. You also eliminate the head of the abstraction, since its only purpose was to bind the variable. This is called `}<inlineCode parentName=\"p\">{`beta reduction`}</inlineCode>{`.`}</p>\n    <p>{`We can do one using a number. We apply the function above to `}<inlineCode parentName=\"p\">{`2`}</inlineCode>{`, substitude `}<inlineCode parentName=\"p\">{`2`}</inlineCode>{` for each bound variable in the body of the function and eliminate the head:`}</p>\n    <BlockMath math=\"( \\lambda x.x ) 2 = 2\" mdxType=\"BlockMath\" />\n    <p>{`The only bound variable is a single `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{`, so applying this function to 2 returns 2. This function is the `}<inlineCode parentName=\"p\">{`identity`}</inlineCode>{` function.`}</p>\n    <h2 {...{\n      \"id\": \"free-variables\"\n    }}>{`Free variables`}</h2>\n    <BlockMath math=\"\\lambda x.xy\" mdxType=\"BlockMath\" />\n    <p>{`In this example, `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{` is a bound variable, `}<inlineCode parentName=\"p\">{`y`}</inlineCode>{` is a free variable.`}</p>\n    <h2 {...{\n      \"id\": \"multiple-arguments\"\n    }}>{`Multiple arguments`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Each lambda can only bind one parameter and can only accept one argument. Functions that require multiple arguments have multiple, nested heads. When you apply it once and eliminate the first (leftmost) head, the next is applied and so on. It is know as `}<inlineCode parentName=\"p\">{`currying`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"evaluation-is-simplication\"\n    }}>{`Evaluation is simplication`}</h2>\n    <p>{`There are multiple normal forms in lambda calculus, but here when we refer to normal form we mean `}<inlineCode parentName=\"p\">{`beta normal form`}</inlineCode>{`. This corresponds to a fully evaluated expression (or a fully executed program). For example, do you say `}<inlineCode parentName=\"p\">{`2000/1000`}</inlineCode>{` or do you say 2? You say 2. The normal form of the evaluated expression is therefore 2.`}</p>\n    <p>{`Note: if we had function `}<inlineCode parentName=\"p\">{`(x,y) => x/y`}</inlineCode>{` and apply `}<inlineCode parentName=\"p\">{`x = 2000`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`y = 1000`}</inlineCode>{`, we call the the body with all arguments applied `}<inlineCode parentName=\"p\">{`saturated`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"combinators\"\n    }}>{`Combinators`}</h2>\n    <p>{`A `}<inlineCode parentName=\"p\">{`combinator`}</inlineCode>{` is a lambda term with no free variables. Combinators, as the name suggests, serve only to `}<inlineCode parentName=\"p\">{`combine`}</inlineCode>{` the arguments that they are given.`}</p>\n    <h2 {...{\n      \"id\": \"divergence\"\n    }}>{`Divergence`}</h2>\n    <p>{`Not all reducible lambda terms reduce neatly to a beta normal form. Reducing the following repeats itself:`}</p>\n    <BlockMath math=\"(\\lambda x.xx)(\\lambda x.xx)\" mdxType=\"BlockMath\" />\n    <BlockMath math=\"(x := \\lambda x.xx|xx)\" mdxType=\"BlockMath\" />\n    <BlockMath math=\"(\\lambda x.xx)(\\lambda x.xx)\" mdxType=\"BlockMath\" />\n    <h2 {...{\n      \"id\": \"hello-haskell\"\n    }}>{`Hello, Haskell!`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`-- Say Hello\nsayHello :: String -> IO ()\nsayHello x =\n  putStrLn (\"Hello, \" ++ x ++ \"!\")\n`}</code></pre>\n    <p>{`If in the `}<inlineCode parentName=\"p\">{`stack ghci`}</inlineCode>{` REPL, you can unload the file using `}<inlineCode parentName=\"p\">{`:m`}</inlineCode>{` and reload updated files using `}<inlineCode parentName=\"p\">{`:r`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"normal-form-reminder\"\n    }}>{`Normal Form Reminder`}</h3>\n    <p>{`Haskell reduces until we reach the normal form. Remember, `}<inlineCode parentName=\"p\">{`1 + 1`}</inlineCode>{` can be evaluated to `}<inlineCode parentName=\"p\">{`2`}</inlineCode>{`, thus Haskell returns the normal form.`}</p>\n    <h2 {...{\n      \"id\": \"redexes\"\n    }}>{`Redexes`}</h2>\n    <p>{`Reducibles expressions such as `}<inlineCode parentName=\"p\">{`1 + 1`}</inlineCode>{` are also known as `}<inlineCode parentName=\"p\">{`redexes`}</inlineCode>{`. While we generally refer to this process as evaluation or reduction, you may also hear of it as `}<inlineCode parentName=\"p\">{`normalizing`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`executing`}</inlineCode>{` an expression (though somewhat imprecise).`}</p>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <p>{`Functions are a specific type of expression. Functions in Haskell relate to functions in mathematics - they map an input or set of inputs to an output.`}</p>\n    <p>{`Because they are built purely of expressions, they will always evaluate to the same result when given the same values.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`As with Lambda Calculus, all functions in Haskell take one argument and return one result. Even when it seems we are passing multiple arguments, we are actually applying a series of nested functions (each to one argument). This is called `}<inlineCode parentName=\"p\">{`currying`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`-- in GHCi REPL\nlet triple x = x * 3\n-- in source file\ntriple :: Number -> Number\ntriple x = x * 3\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"evaluation\"\n    }}>{`Evaluation`}</h2>\n    <p>{`When we talk about evaluating an expression, we're talking about reducing the terms until it is in the simplest form. We say it is `}<inlineCode parentName=\"p\">{`irreducible`}</inlineCode>{` or finished evaluating.`}</p>\n    <p>{`Haskell uses `}<inlineCode parentName=\"p\">{`nonstrict evaluation`}</inlineCode>{` (sometimes called `}<inlineCode parentName=\"p\">{`lazy evaluation`}</inlineCode>{`) stategy which defers evaluations of terms until they're forced by other terms referring so them.`}</p>\n    <p>{`Here is the reduction of our `}<inlineCode parentName=\"p\">{`triple`}</inlineCode>{` function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`triple 2\n-- [triple x = x * 3; x:= 2]\n2 * 3\n6\n`}</code></pre>\n    <p>{`The above is reduced to its normal form, however Haskell only evalutes is weak head normal form (WHNF) but default. This means things are not always reduced to its irreducible form straight away.`}</p>\n    <p><inlineCode parentName=\"p\">{`(\\\\f -> (1, 2 + f)) 2`}</inlineCode>{` reduces to the following in WHNF `}<inlineCode parentName=\"p\">{`(1, 2 + 2)`}</inlineCode>{` before it is evaluated further.`}</p>\n    <h2 {...{\n      \"id\": \"infix-operators\"\n    }}>{`Infix Operators`}</h2>\n    <p>{`Functions in Haskell default to prefix syntax (like the `}<inlineCode parentName=\"p\">{`triple`}</inlineCode>{` func above).`}</p>\n    <p>{`Operators for example are functions that can be used in the infix style.`}</p>\n    <p>{`You can sometimes use functions infix style with a small change in syntax:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`10 \\`div\\` 4\ndiv 10 4\n(/) 10 4\n2.5\n`}</code></pre>\n    <p>{`If the function is alphanumeric, it is prefix by default. If it is a symbol, it is infix by default.`}</p>\n    <h2 {...{\n      \"id\": \"associativity-and-precedence\"\n    }}>{`Associativity and precedence`}</h2>\n    <p>{`This BODMAS (from Mathematics) for precedence.`}</p>\n    <p>{`We can use `}<inlineCode parentName=\"p\">{`:info`}</inlineCode>{` to get more info about an operator.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`Prelude> :i (/) (+) (-)\nclass Num a => Fractional a where\n  (/) :: a -> a -> a\n  ...\n        -- Defined in ‘GHC.Real’\ninfixl 7 /\nclass Num a where\n  (+) :: a -> a -> a\n  ...\n        -- Defined in ‘GHC.Num’\ninfixl 6 +\nclass Num a where\n  ...\n  (-) :: a -> a -> a\n  ...\n        -- Defined in ‘GHC.Num’\ninfixl 6 -\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`infixl`}</inlineCode>{` means infix operator and left associative`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`7|6`}</inlineCode>{` is the precendence - higher is applied first`}</li>\n      <li parentName=\"ul\">{`The last part is the function name (in this case the `}<inlineCode parentName=\"li\">{`/`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`+`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`-`}</inlineCode>{`)`}</li>\n    </ul>\n    <p>{`An example of a right-associative infix operator is the power operator `}<inlineCode parentName=\"p\">{`^`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"declaring-values\"\n    }}>{`Declaring values`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`-- in the REPL\nPrelude> let y = 10\nPrelude> let x = 10 * 5 + y\nPrelude> let myResult = x * 5\n-- in a file\n-- learn.hs\nmodule Learn where\nx = 10 * 5 + y\nmyResult = x * 5\ny = 10\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-operator\"\n    }}>{`\\$ Operator`}</h2>\n    <p>{`The (\\$) operator is a convenience for when you want to express something with fewer pairs of parentheses:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{` -- Remember ($)'s definition\nf $ a = f a\n-- in use\nPrelude> (2^) (2 + 2)\n16\n-- can replace those parentheses\n Prelude> (2^) $ 2 + 2\n16\n-- without either parentheses or $\n Prelude> (2^) 2 + 2\n 6\n`}</code></pre>\n    <p>{`The (\\$) will allow everything to the right of it to be evaluated first and can be used to delay function application.`}</p>\n    <h2 {...{\n      \"id\": \"let-and-where\"\n    }}>{`Let and where`}</h2>\n    <p>{`The contrast here is that let introduces an expression, so it can be used wherever you can have an expression, but where is a declaration and is bound to a surrounding syntactic construct.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`-- FunctionWithWhere.hs\nmodule FunctionWithWhere where\n\nprintInc n = print plusTwo\n  where plusTwo = n + 2\n\n\nprintInc2 n = let plusTwo = n + 2\n  in print plusTwo\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"strings\"\n    }}>{`Strings`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`Prelude> :type 'a'\n'a' :: Char\nPrelude> :type \"Hello!\"\n\"Hello!\" :: [Char]\n`}</code></pre>\n    <p>{`To print strings we can use `}<inlineCode parentName=\"p\">{`print`}</inlineCode>{` in the REPL or `}<inlineCode parentName=\"p\">{`putStrLn`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`putStr`}</inlineCode>{` for our Haskell modules.`}</p>\n    <p>{`Mutliline \"do\" can be done like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`-- print2.hs\nmodule Print2 where\nmain :: IO () main = do\n  putStrLn \"Count to four for me:\"\n  putStr   \"one, two\"\n  putStr   \", three, and\"\n  putStrLn \" four!\"\n`}</code></pre>\n    <p>{`String concatenation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`-- print3.hs\nmodule Print3 where\n\nmyGreeting :: String\nmyGreeting = \"hello\" ++ \" world!\" hello :: String\n\nhello = \"hello\" world :: String\nworld = \"world!\"\n\nmain :: IO () main = do\n  putStrLn myGreeting\n  putStrLn secondGreeting\n  where secondGreeting =\n    concat [hello, \" \", world]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"top-level-versus-local-definitions\"\n    }}>{`Top-level versus local definitions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`module TopOrLocal where\n\ntopLevelFunction :: Integer -> Integer topLevelFunction x =\n  x + woot + topLevelValue\n  where woot :: Integer\n        woot = 10\n\ntopLevelValue :: Integer\ntopLevelValue = 5\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"basic-datatypes\"\n    }}>{`Basic Datatypes`}</h2>\n    <p>{`The type constructor is the name of the type and is capitalized. When you are reading or writing type signatures (the type level of your code), the type names or type constructors are what you use.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}