{"version":3,"sources":["webpack:///../manual/Docker/MySQL-Development.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kCADR,kCAGA,sCAAqB,0BAAYC,WAAW,KAAvB,kCAArB,KACA,6BAAY,0BAAYA,WAAW,KAAvB,wGAAZ,iEACA,qFAAoE,0BAAYA,WAAW,KAAvB,iCAApE,uBAAqK,0BAAYA,WAAW,KAAvB,SAArK,wBACA,qBAAG,0BAAYA,WAAW,KAAvB,sHAAH,KACA,gCAAe,0BAAYA,WAAW,KAAvB,qFAAf,KACA,iBAAQ,CACN,GAAM,4CADR,4CAGA,kEAAiD,0BAAYA,WAAW,KAAvB,SAAjD,UAA6G,0BAAYA,WAAW,KAAvB,oBAA7G,4HAAsS,0BAAYA,WAAW,KAAvB,qDAAtS,QAA4Y,0BAAYA,WAAW,KAAvB,iEAA5Y,kBAAwgB,0BAAYA,WAAW,KAAvB,qBAAxgB,M,2MAKJJ,EAAWK,gBAAiB","file":"component---manual-docker-my-sql-development-md-aeb5ffff4280369a1aed.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mysql-development-using-docker\"\n    }}>{`MySQL Development using Docker`}</h1>\n    <p>{`Firstly, pull `}<inlineCode parentName=\"p\">{`docker pull mysql/mysql-server`}</inlineCode>{`.`}</p>\n    <p>{`Then `}<inlineCode parentName=\"p\">{`docker run --name sql-test -e MYSQL_ROOT_PASSWORD=password -p 6000:3306 -d mysql/mysql-server:latest`}</inlineCode>{`. If there a replacement or commited image, run that instead.`}</p>\n    <p>{`If you are running it on a network, first create the network `}<inlineCode parentName=\"p\">{`docker network create dev-env`}</inlineCode>{`, then run with the `}<inlineCode parentName=\"p\">{`--net`}</inlineCode>{` flag to hook it up.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker run --name sql-test -e MYSQL_ROOT_PASSWORD=password -p 6000:3306 --net dev-env -d mysql/mysql-server:latest`}</inlineCode>{`.`}</p>\n    <p>{`Linking `}<inlineCode parentName=\"p\">{`docker run -d -name app-container-name --link mysql-container-name app-image-name`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"updating-the-local-docker-mysql-instance\"\n    }}>{`Updating the local Docker MySQL instance`}</h2>\n    <p>{`Log into the container and first log into `}<inlineCode parentName=\"p\">{`mysql`}</inlineCode>{` using `}<inlineCode parentName=\"p\">{`mysql -u root -p`}</inlineCode>{`. This will prompt you for that password we created, so now type that in and enter the command line terminal. First, run `}<inlineCode parentName=\"p\">{`CREATE USER 'admin'@'%' IDENTIFIED BY 'password';`}</inlineCode>{` Run `}<inlineCode parentName=\"p\">{`GRANT ALL PRIVILEGES ON *.* TO 'admin'@'%' WITH GRANT OPTION;`}</inlineCode>{`. Finally, run `}<inlineCode parentName=\"p\">{`FLUSH PRIVILEGES;`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}