{"version":3,"sources":["webpack:///../manual/Elixir/Elixir-Debugging.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,mNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uBADR,uBAGA,iBAAQ,CACN,GAAM,QADR,SAGA,4BAAW,0BAAYC,WAAW,KAAvB,cAAX,OAAyE,0BAAYA,WAAW,KAAvB,WAAzE,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,sMAeL,iBAAQ,CACN,GAAM,mBADR,mBAGA,wDAAuC,mBAAGA,WAAW,KAAQ,CACzD,KAAQ,2DAD2B,2DAGvC,iBAAQ,CACN,GAAM,cADR,gBAGA,mCAAkB,0BAAYA,WAAW,KAAvB,kCAAlB,sIACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,8RAqBL,iCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,6IAcL,iBAAQ,CACN,GAAM,WADR,aAGA,0CAAyB,0BAAYA,WAAW,KAAvB,eAAzB,qCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,oBADZ,oE,0MAWTJ,EAAWK,gBAAiB","file":"component---manual-elixir-elixir-debugging-md-dbdfcf5ba37f0c4336a9.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"debugging-in-elixir\"\n    }}>{`Debugging In Elixir`}</h1>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`IO.inspect`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`IEx.pry`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`# inspect\n[1, 2, 3]\n|> IO.inspect(label: \"before\")\n|> Enum.map(&(&1 * 2))\n|> IO.inspect(label: \"after\")\n|> Enum.sum\n\n# pry\ndef some_fun(a, b, c) do\n  require IEx; IEx.pry\n  ...\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"other-resources\"\n    }}>{`Other Resources`}</h2>\n    <p>{`Other resources can be found at `}<a parentName=\"p\" {...{\n        \"href\": \"https://elixir-lang.org/getting-started/debugging.html\"\n      }}>{`https://elixir-lang.org/getting-started/debugging.html`}</a></p>\n    <h2 {...{\n      \"id\": \"ioinspect2\"\n    }}>{`IO.Inspect/2`}</h2>\n    <p>{`What makes `}<inlineCode parentName=\"p\">{`IO.inspect(item, opts \\\\\\\\ [])`}</inlineCode>{` really useful in debugging is that it returns the item argument passed to it without affecting the behavior of the original code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`(1..10)\n|> IO.inspect\n|> Enum.map(fn x -> x * 2 end)\n|> IO.inspect\n|> Enum.sum\n|> IO.inspect\n\n[1, 2, 3]\n|> IO.inspect(label: \"before\")\n|> Enum.map(&(&1 * 2))\n|> IO.inspect(label: \"after\")\n|> Enum.sum\n\n# 3\ndef some_fun(a, b, c) do\n  IO.inspect binding()\n  ...\nend\n`}</code></pre>\n    <p>{`Outputs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# 1\n1..10\n[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n110\n\n# 2\nbefore: [1, 2, 3]\nafter: [2, 4, 6]\n\n# 3\n[a: :foo, b: \"bar\", c: :baz]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iexpry0\"\n    }}>{`IEx.pry/0`}</h2>\n    <p>{`Similar to Ruby's `}<inlineCode parentName=\"p\">{`binding.pry`}</inlineCode>{`. Will open an interactive shell.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`def some_fun(a, b, c) do\n  require IEx; IEx.pry\n  ...\nend\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}