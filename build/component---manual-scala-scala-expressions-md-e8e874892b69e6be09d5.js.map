{"version":3,"sources":["webpack:///../manual/Scala/Scala-Expressions.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,mNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mCADR,mCAGA,yFAAwE,0BAAYC,WAAW,KAAvB,cAAxE,kEACA,iBAAQ,CACN,GAAM,aADR,aAGA,4EAA2D,0BAAYA,WAAW,KAAvB,QAA3D,oCAAgJ,0BAAYA,WAAW,KAAvB,QAAhJ,mFACA,iBAAQ,CACN,GAAM,eADR,eAGA,wHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,sIAYL,iBAAQ,CACN,GAAM,4CADR,4CAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,0PAsBL,iBAAQ,CACN,GAAM,aADR,aAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,yb,0MAqBTJ,EAAWK,gBAAiB","file":"component---manual-scala-scala-expressions-md-e8e874892b69e6be09d5.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"scala-expressions-and-functions\"\n    }}>{`Scala Expressions and Functions`}</h1>\n    <p>{`As opposed to instructions, everything in Scala is considered an `}<inlineCode parentName=\"p\">{`expression`}</inlineCode>{`. Even if/else statements themselves in Scala are expressions.`}</p>\n    <h2 {...{\n      \"id\": \"for-loops\"\n    }}>{`For Loops`}</h2>\n    <p>{`For loops are not recommended in Scala. They return `}<inlineCode parentName=\"p\">{`Unit`}</inlineCode>{` which in itself is equivalent to`}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`. This is the case for side effects - an intergral part of understanding Scala.`}</p>\n    <h2 {...{\n      \"id\": \"code-blocks\"\n    }}>{`Code Blocks`}</h2>\n    <p>{`Note that if you write a code block, the last value in the code block is returned as the value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`val codeBlock = {\n    val a = 1\n    val b = 2\n\n    if(a < b) \"hi\" else \"bye\"\n}\n\nprintln(codeBlock)\n// evaluates to \"hi\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples-of-expressions-and-side-effects\"\n    }}>{`Examples of Expressions and Side Effects`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`\"hello\" // type String\nprintln(\"hello\") // type Unit\n\n// type Boolean\nval a = {\n    2 < 3\n}\n\n// type Int value 10\nval b = {\n    if(a) 123 else 321\n    10\n}\n\n// c is of type Unit\nvar i = 0\nval c = while (i < 10) {\n    i += 1\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`object Functions extends App {\n    // this works because we know everything is an expression\n    def functionExample(a: String, b: Int): String = a + \" \" + b\n\n    def parameterlessFunc(): Int = 42\n    println(parameterlessFunc())\n    // also valid in Scala to call func\n    println(parameterlessFunc)\n\n    def repeterFunc(a: String, n: Int): String  = {\n        if (n == 1) a\n        else a + repeterFunc(a, n-1)\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}