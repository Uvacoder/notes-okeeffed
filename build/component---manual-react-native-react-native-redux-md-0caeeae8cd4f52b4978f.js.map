{"version":3,"sources":["webpack:///../manual/React-Native/React-Native-Redux.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-react-native-react-native-redux-md-0caeeae8cd4f52b4978f.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-native-with-redux\"\n    }}>{`React Native with Redux`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#react-native-with-redux\"\n        }}>{`React Native with Redux`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-1-intro\"\n        }}>{`RNREDUX-1: Intro`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-2-react-native-101\"\n        }}>{`RNREDUX-2: React Native 101`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-21-project-directoryscreen-content\"\n        }}>{`RNREDUX-2.1: Project Directory/Screen Content`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-22-react-vs-react-native\"\n        }}>{`RNREDUX-2.2: React vs React Native`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-4-http-requests-with-react-native\"\n        }}>{`RNREDUX-4: HTTP Requests with React Native`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-41-sourcing-album-data\"\n        }}>{`RNREDUX-4.1: Sourcing Album Data`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-42-functional-component-vs-class-component\"\n        }}>{`RNREDUX-4.2: Functional Component vs Class Component`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-43-fetching-data-with-lifecycle-methods\"\n        }}>{`RNREDUX-4.3: Fetching Data with Lifecycle Methods`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-44-rendering-a-list-of-components\"\n        }}>{`RNREDUX-4.4: Rendering a List of Components`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-45-creating-reusable-components\"\n        }}>{`RNREDUX-4.5: Creating Reusable Components`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-45-turn-a-component-into-sections\"\n        }}>{`RNREDUX-4.5: Turn a Component into Sections`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-5-handling-component-layout\"\n        }}>{`RNREDUX-5: Handling Component Layout`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-51-mastering-layout-with-flexbox\"\n        }}>{`RNREDUX-5.1: Mastering Layout with Flexbox`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-52-making-content-scrollable-and-handling-input\"\n        }}>{`RNREDUX-5.2: Making Content Scrollable and Handling Input`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-53-responding-to-user-input\"\n        }}>{`RNREDUX-5.3: Responding to User Input`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-8-redux-inside-of-react-native\"\n        }}>{`RNREDUX-8: Redux inside of React Native`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-81-redux-boilerplate\"\n        }}>{`RNREDUX-8.1: Redux Boilerplate`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#rnredux-82-reducer-and-state-design\"\n        }}>{`RNREDUX-8.2: Reducer and State Design`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#redux-thunk\"\n        }}>{`Redux Thunk`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#dealing-with-navigation\"\n        }}>{`Dealing with Navigation`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#navigation-in-the-router\"\n        }}>{`Navigation in the Router`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#navigating-between-routes\"\n        }}>{`Navigating between routes`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#grouping-scenes-with-buckets\"\n        }}>{`Grouping Scenes with 'Buckets'`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#actions-to-navigate-between-buckets\"\n        }}>{`Actions to navigate between buckets`}</a>{`\n- `}<a parentName=\"li\" {...{\n          \"href\": \"#form-updates-at-a-reducer-level--dynamic-property-updates\"\n        }}>{`Form updates at a reducer level / Dynamic Property updates`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"rnredux-1-intro\"\n    }}>{`RNREDUX-1: Intro`}</h2>\n    <p><strong parentName=\"p\">{`Roadmap`}</strong></p>\n    <p>{`Setting up RN for iOS and Android.`}</p>\n    <p><strong parentName=\"p\">{`Installing the Dependencies for OSX`}</strong></p>\n    <h2 {...{\n      \"id\": \"rnredux-2-react-native-101\"\n    }}>{`RNREDUX-2: React Native 101`}</h2>\n    <h2 {...{\n      \"id\": \"rnredux-21-project-directoryscreen-content\"\n    }}>{`RNREDUX-2.1: Project Directory/Screen Content`}</h2>\n    <p><strong parentName=\"p\">{`ios and android`}</strong></p>\n    <p>{`The project folders rarely need to be adjusted unless we want to work at a low-level.`}</p>\n    <p><strong parentName=\"p\">{`index.ios.js vs index.android.js`}</strong></p>\n    <p>{`Entry points for our applications. When Android or iOS run, these two files are the first platform entry points respectively.`}</p>\n    <p><strong parentName=\"p\">{`Steps for components`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Import a library to help create a component\n\nimport React from 'react';\n// destructuring\n// import ReactNative from 'react-native';\nimport { Text, AppRegistry } from 'react-native';\n\n// Create a component\n// if we are returning just one statement, we can get rid of the curly braces\n// and the return statement - not an error! ES lint issue.\n\nconst App => () => {\n    return (\n        <Text>Some Text</Text>\n    );\n}\n\n// ^ this will become...\n\nconst App => () => (\n    <Text>Some Text</Text>\n);\n\n// Render it to the device\n// name 'albums' must correlate to name of the project\n// also destructure ReactNative.AppRegistry.registerComponent('albums', () => App);\nAppRegistry.registerComponent('albums', () => App);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rnredux-22-react-vs-react-native\"\n    }}>{`RNREDUX-2.2: React vs React Native`}</h2>\n    <p>{`Both are distinct libraries. RN is essentially the handle to getting things onto a device!`}</p>\n    <p><inlineCode parentName=\"p\">{`import`}</inlineCode>{` is required to working with `}<inlineCode parentName=\"p\">{`outside code`}</inlineCode>{` eg. other libraries/modules.`}</p>\n    <p><strong parentName=\"p\">{`React`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Knows how a component should behave`}</li>\n      <li parentName=\"ul\">{`Knows how to take a bunch of components and make them work together`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`React Native`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Knows how to take the output from a component and place it on the screen`}</li>\n      <li parentName=\"ul\">{`Provides default core components (image, text)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"rnredux-4-http-requests-with-react-native\"\n    }}>{`RNREDUX-4: HTTP Requests with React Native`}</h2>\n    <h2 {...{\n      \"id\": \"rnredux-41-sourcing-album-data\"\n    }}>{`RNREDUX-4.1: Sourcing Album Data`}</h2>\n    <p>{`For the idea of creating is a label is to create two components.`}</p>\n    <p>{`a) The AlbumList\nb) The AlbumDetail`}</p>\n    <p><strong parentName=\"p\">{`AlbumList Component`}</strong></p>\n    <p>{`Note: If you are embedding more than one component, wrap around in `}<inlineCode parentName=\"p\">{`<View>`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// after importing from React, ReactNative\n\nconst AlbumView = () => {\n    return (\n        <View>\n            <Text>Album List!</Text>\n        </View>\n    );\n};\n\nexport default AlbumList;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rnredux-42-functional-component-vs-class-component\"\n    }}>{`RNREDUX-4.2: Functional Component vs Class Component`}</h2>\n    <p><strong parentName=\"p\">{`Functional Component`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Used for presenting static data`}</li>\n      <li parentName=\"ul\">{`Can't handle fetching data`}</li>\n      <li parentName=\"ul\">{`Easy to write`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Class Component`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Used for dynamic sources of data`}</li>\n      <li parentName=\"ul\">{`Handles any data that might change (fetching data, user events, etc)`}</li>\n      <li parentName=\"ul\">{`Knows when it gets rerendered to the device (useful for data fetching)`}</li>\n      <li parentName=\"ul\">{`More code to write`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// functional component\n\nconst Header = () => {\n  return <Text>Hi there!</Text>;\n};\n\n// class component\n\nclass Header extends Component {\n  render() {\n    return <Text>Hi there!</Text>;\n  }\n}\n`}</code></pre>\n    <p>{`So recreating our AlbumList...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { View, Text }, from 'react-native';\n\nclass AlbumView extends Component {\n    render() {\n        return (\n            <View>\n                <Text>Album List!</Text>\n            </View>\n        );\n    }\n};\n\nexport default AlbumList;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rnredux-43-fetching-data-with-lifecycle-methods\"\n    }}>{`RNREDUX-4.3: Fetching Data with Lifecycle Methods`}</h2>\n    <p>{`Class based components themselves KNOW when they're about to rendered.`}</p>\n    <p>{`Example Lifecycle Methods include `}<inlineCode parentName=\"p\">{`componentWillMount()`}</inlineCode></p>\n    <p><strong parentName=\"p\">{`Network Requests`}</strong></p>\n    <p>{`How do we make the HTTP request? It's quite straight forward.`}</p>\n    <p><inlineCode parentName=\"p\">{`npm install --save axios`}</inlineCode></p>\n    <p>{`Ensure you need to have some logic to rerender the components after the AJAX returns and the promise is fulfilled.`}</p>\n    <p><strong parentName=\"p\">{`Component Level State`}</strong></p>\n    <p>{`Components will already be on the screen before we can get our promise back. Our state so far will look like the following...`}</p>\n    <p>{`We need to use component level state for it all to rerender`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Set up a default state (class level property)`}</li>\n      <li parentName=\"ol\">{`Update the state (needs to use `}<inlineCode parentName=\"li\">{`this.setState`}</inlineCode>{`!)`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`Rules of State`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Definition of State: a plain JS object used to record and respond to 'user-triggered events'.`}</li>\n      <li parentName=\"ul\">{`When we need to update what a component shows, call `}<inlineCode parentName=\"li\">{`this.setState`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Only change state with 'setState' not this.state='something'.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`When do we use props?`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`props is for parent to child communication`}</li>\n      <li parentName=\"ul\">{`state is internal record keeping`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`// before\nstate = { albums: [] };\n\n// after fetching data\nstate = {\n    albums: [\n        {name: 'ashio'},\n        {name: 'aheure'}\n    ]\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { View, Text }, from 'react-native';\nimport axios from 'axios';\n\nclass AlbumView extends Component {\n    state = { albums: [] };\n\n\n    componentWillMount() {\n        // console.log('componentWillMount in console');\n        // debugger;\n        axios.get('https://theapilink.com')\n            .then(response => this.setState({ albums: response.data }));\n    }\n\n    render() {\n        // can use this when the render method continues to re-render\n        console.log(this.state);\n        debugger;\n\n        return (\n            <View>\n                <Text>Album List!</Text>\n            </View>\n        );\n    }\n};\n\nexport default AlbumList;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rnredux-44-rendering-a-list-of-components\"\n    }}>{`RNREDUX-4.4: Rendering a List of Components`}</h2>\n    <p>{`Only use state with class level components (not functional components)`}</p>\n    <p>{`For each album now, we want to create one component using `}<inlineCode parentName=\"p\">{`map`}</inlineCode>{`.`}</p>\n    <p>{`Ensure that each property has a unique key!`}</p>\n    <p><strong parentName=\"p\">{`AlbumList`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { View, Text }, from 'react-native';\nimport axios from 'axios';\n\nclass AlbumView extends Component {\n    state = { albums: [] };\n\n\n    componentWillMount() {\n        // console.log('componentWillMount in console');\n        // debugger;\n        axios.get('https://theapilink.com')\n            .then(response => this.setState({ albums: response.data }));\n    }\n\n    renderAlbums() {\n        return this.state.albums.map(album =>\n            // best to use for the key is an id if you have one\n            <Text key={album.title}>{album.title}</Text>\n        );\n    }\n\n    render() {\n        // can use this when the render method continues to re-render\n        console.log(this.state);\n        debugger;\n\n        return (\n            <View>\n                {this.renderAlbums()}\n            </View>\n        );\n    }\n};\n\nexport default AlbumList;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Creating an AlbumDetail`}</strong></p>\n    <p>{`Does it need to be a Class or Functional component?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { View, Text }, from 'react-native';\n\nconst AlbumDetail = (props) => {\n    return (\n        <View>\n            <Text>{props.album.title}</Text>\n        </View>\n    );\n};\n\nexport default AlbumDetail;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Final AlbumList`}</strong></p>\n    <p>{`Import AlbumDetail, reset the \"renderAlbums\" function to render the AlbumDetail and then use props to pass down from parent to child.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { View }, from 'react-native';\nimport axios from 'axios';\nimport AlbumDetail from './AlbumDetail'\n\nclass AlbumView extends Component {\n    state = { albums: [] };\n\n\n    componentWillMount() {\n        // console.log('componentWillMount in console');\n        // debugger;\n        axios.get('https://theapilink.com')\n            .then(response => this.setState({ albums: response.data }));\n    }\n\n    renderAlbums() {\n        return this.state.albums.map(album =>\n            // best to use for the key is an id if you have one\n            // prop name \"album\" can be named anything\n            <AlbumDetail key={album.title} album={album}/>\n        );\n    }\n\n    render() {\n        // can use this when the render method continues to re-render\n        console.log(this.state);\n        debugger;\n\n        return (\n            <View>\n                {this.renderAlbums()}\n            </View>\n        );\n    }\n};\n\nexport default AlbumList;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rnredux-45-creating-reusable-components\"\n    }}>{`RNREDUX-4.5: Creating Reusable Components`}</h2>\n    <p>{`For styling, it is sometimes useful to make components within components for layout purposes!`}</p>\n    <p><strong parentName=\"p\">{`Passing components as props`}</strong></p>\n    <p>{`We can pass `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` as a parameter and then use {props.children} to make a reference to it.`}</p>\n    <p><strong parentName=\"p\">{`Card.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`import React from 'react';\nimport { View } from 'react-native';\n\nconst Card = (props) => {\n    render (\n        <View style={styles.containerStyle}>\n            {props.children}\n        </View>\n    );\n}\n\nconst styles = {\n    containerStyle: {\n        borderWidth: 1,\n        borderRadius: 2,\n        borderColor: '#ddd',\n        borderBottomWidth: 0,\n        shadowColor: '#000',\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n        shadowRadius: 2,\n        elevation: 1,\n        marginLeft: 5,\n        marginRight: 5,\n        marginTop: 10\n    }\n};\n\nexport default Card;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`AlbumDetail`}</strong></p>\n    <p>{`We want to use this to pass down props for `}<inlineCode parentName=\"p\">{`Card`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { Text }, from 'react-native';\nimport Card from './Card';\n\nconst AlbumDetail = (props) => {\n    return (\n        <Card>\n            <Text>{props.album.title}</Text>\n        </Card>\n    );\n};\n\nexport default AlbumDetail;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rnredux-45-turn-a-component-into-sections\"\n    }}>{`RNREDUX-4.5: Turn a Component into Sections`}</h2>\n    <p><strong parentName=\"p\">{`CardSection.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport { View } from 'react-native';\n\nconst CardSection = props => {\n  render(<View style={styles.containerStyle}>{props.children}</View>);\n};\n\nconst styles = {\n  containerStyle: {\n    borderBottomWidth: 1,\n    padding: 5,\n    backgroundColor: '#fff',\n    justifyContent: 'flex-start',\n    flexDirection: 'row',\n    borderColor: '#ddd',\n    position: 'relative',\n  },\n};\n\nexport default CardSection;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`AlbumDetail`}</strong></p>\n    <p>{`We want to use this to pass down props for `}<inlineCode parentName=\"p\">{`Card`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { Text }, from 'react-native';\nimport Card from './Card';\nimport CardSection from './CardSection';\n\nconst AlbumDetail = (props) => {\n    return (\n        <Card>\n            <CardSection>\n                <Text>{props.album.title}</Text>\n            </CardSection>\n        </Card>\n    );\n};\n\nexport default AlbumDetail;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rnredux-5-handling-component-layout\"\n    }}>{`RNREDUX-5: Handling Component Layout`}</h2>\n    <h2 {...{\n      \"id\": \"rnredux-51-mastering-layout-with-flexbox\"\n    }}>{`RNREDUX-5.1: Mastering Layout with Flexbox`}</h2>\n    <p>{`Designing for web from personal experience is generally easier than React Native.`}</p>\n    <p>{`How about layout challenges? Keeping things on the left, and on the right? We use Flexbox to be our friend!`}</p>\n    <p>{`Imaging a layout like the following.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<Card>\n  <CardSection>\n    <Image />\n    <Text />\n    <Text />\n  </CardSection>\n</Card>\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Positioning of elements`}</strong></p>\n    <p>{`How do we want to apply flexbox to our particular layout? What we can do is use `}<inlineCode parentName=\"p\">{`<View>`}</inlineCode>{` to wrap the images - this is similar to using things like `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{`.`}</p>\n    <p>{`We can then use flex direction to style our views for column and what is within for rows.`}</p>\n    <p>{`Unless we define a height, it will just flex to have just enough height!`}</p>\n    <p><strong parentName=\"p\">{`Images with React Native`}</strong></p>\n    <p>{`We can import `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{` primitive from React Native!`}</p>\n    <p>{`However, images will not expand to fit by default. We need to manually add in a styling rule!`}</p>\n    <p><strong parentName=\"p\">{`Notes`}</strong></p>\n    <p>{`Destructure album objects if there is more than one.`}</p>\n    <p>{`If you wanted to, you can also dereference styles!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { thumbnailStyle, headerContentStyle } = styles;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// the album and const is for destructuring\n\nconst Card = ({ album }) => {\n  const { title, artist, thumbnail_image } = album;\n\n  return (\n    <Card>\n      <CardSection>\n        <View style={styles.thumbnailContainerStyle}>\n          // <Image source={{ uri: props.album.thumbnail_image }} />\n          //destructured\n          <Image\n            style={styles.thumbnailStyle}\n            source={{ uri: thumbnail_image }}\n          />\n        </View>\n        <View style={styles.headerContentStyle}>\n          //<Text>{props.album.title}</Text>\n          //<Text>{props.album.artist}</Text>\n          // Destructured\n          <Text style={styles.headerTextStyle}>{title}</Text>\n          <Text>{artist}</Text>\n        </View>\n      </CardSection>\n      <CardSection>\n        <Image style={style.imageStyle} source={{ uri: image }} />\n      </CardSection>\n    </Card>\n  );\n};\n\nconst styles = {\n  headerContentStyle: {\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n  },\n  headerTextStyle: {\n    fontSize: 18,\n  },\n  thumbnailStyle: {\n    height: 50,\n    width: 50,\n  },\n  thumbnailContainerStyle: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginLeft: 10,\n    marginRight: 10,\n  },\n  imageStyle: {\n    height: 300,\n    flex: 1,\n    width: null,\n  },\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rnredux-52-making-content-scrollable-and-handling-input\"\n    }}>{`RNREDUX-5.2: Making Content Scrollable and Handling Input`}</h2>\n    <p><strong parentName=\"p\">{`ScrollView`}</strong></p>\n    <p>{`Scrolling is definitely one of the differenes between React and React Native. To make them scrollable, we just import `}<inlineCode parentName=\"p\">{`ScrollView`}</inlineCode>{` and use that on the outside.`}</p>\n    <p>{`For this case, it is the renderAlbums.`}</p>\n    <p>{`We can just replace View with ScrollView.`}</p>\n    <p>{`You also MUST find the root view and set it to flex: 1.`}</p>\n    <p><strong parentName=\"p\">{`Handling Input`}</strong></p>\n    <p>{`Time to make a button.`}</p>\n    <p><strong parentName=\"p\">{`Button.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`import React from 'react';\nimport { Text } from 'react-native';\n\nconst Button = () = => {\n    return (\n        <Text>Click me!</Text>\n    );\n}\n\nexport default Button;\n`}</code></pre>\n    <p>{`Now when we use this, we can have a section to house a button.`}</p>\n    <p>{`We need to wrap the button but using `}<inlineCode parentName=\"p\">{`TouchableHighlight`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`TouchableOpacity`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`import React from 'react';\nimport { Text, TouchableOpacity } from 'react-native';\n\nconst Button = ({ onPress }) = => {\n\n    const { buttonStyle, textStyle } = styles;\n\n    return (\n        // from the parent, have the prop of onPress{() => function}\n        <TouchableOpacity style={buttonStyle} onPress={onPress}>\n            <Text style={textStyle}>\n                Click me!\n            </Text>\n        </TouchableOpacity>\n    );\n}\n\nconst styles = {\n    textStyle: {\n        alignSelf: 'center',\n        color: '#007aff',\n        fontSize: 16,\n        fontWeight: '600',\n        paddingTop: 10,\n        paddingBottom: 10\n    },\n    buttonStyle: {\n        flex: 1,\n        alignSelf: 'stretch',\n        backgroundColor: '#fff',\n        borderRadius: 5,\n        borderColor: '#007aff',\n    }\n}\n\nexport default Button;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rnredux-53-responding-to-user-input\"\n    }}>{`RNREDUX-5.3: Responding to User Input`}</h2>\n    <p><strong parentName=\"p\">{`Card.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// have your imports\n// the album and const is for destructuring\n\nconst Card = ({ album }) => {\n  const { title, artist, thumbnail_image, url } = album;\n\n  return (\n    <Card>\n      <CardSection>\n        <View style={styles.thumbnailContainerStyle}>\n          // <Image source={{ uri: props.album.thumbnail_image }} />\n          //destructured\n          <Image\n            style={styles.thumbnailStyle}\n            source={{ uri: thumbnail_image }}\n          />\n        </View>\n        <View style={styles.headerContentStyle}>\n          //<Text>{props.album.title}</Text>\n          //<Text>{props.album.artist}</Text>\n          // Destructured\n          <Text style={styles.headerTextStyle}>{title}</Text>\n          <Text>{artist}</Text>\n        </View>\n      </CardSection>\n      <CardSection>\n        <Image style={style.imageStyle} source={{ uri: image }} />\n      </CardSection>\n      <CardSection>\n        <Button onPress={() => openURL(album.url)}>Buy now</Button>\n      </CardSection>\n    </Card>\n  );\n};\n\nconst styles = {\n  headerContentStyle: {\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n  },\n  headerTextStyle: {\n    fontSize: 18,\n  },\n  thumbnailStyle: {\n    height: 50,\n    width: 50,\n  },\n  thumbnailContainerStyle: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginLeft: 10,\n    marginRight: 10,\n  },\n  imageStyle: {\n    height: 300,\n    flex: 1,\n    width: null,\n  },\n};\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Button.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport { Text, TouchableOpacity } from 'react-native';\n\nconst Button = ({ onPress, children }) = => {\n\n    const { buttonStyle, textStyle } = styles;\n\n    return (\n        // from the parent, have the prop of onPress{() => function}\n        <TouchableOpacity style={buttonStyle} onPress={onPress}>\n            <Text style={textStyle}>\n                { children }\n            </Text>\n        </TouchableOpacity>\n    );\n}\n\nconst styles = {\n    textStyle: {\n        alignSelf: 'center',\n        color: '#007aff',\n        fontSize: 16,\n        fontWeight: '600',\n        paddingTop: 10,\n        paddingBottom: 10\n    },\n    buttonStyle: {\n        flex: 1,\n        alignSelf: 'stretch',\n        backgroundColor: '#fff',\n        borderRadius: 5,\n        borderColor: '#007aff',\n    }\n}\n\nexport default Button;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rnredux-8-redux-inside-of-react-native\"\n    }}>{`RNREDUX-8: Redux inside of React Native`}</h2>\n    <h2 {...{\n      \"id\": \"rnredux-81-redux-boilerplate\"\n    }}>{`RNREDUX-8.1: Redux Boilerplate`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<Provider>`}</inlineCode>{` tag works together with the Store. The Store is what holds the Application State.`}</p>\n    <p>{`The Provider is the communication with React. `}<inlineCode parentName=\"p\">{`react-redux`}</inlineCode>{` is the glue for React and Redux.`}</p>\n    <p><strong parentName=\"p\">{`Steps`}</strong></p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`import { Provider } from 'react-redux'`}</inlineCode>{` + `}<inlineCode parentName=\"li\">{`import { createStore } from 'redux'`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Wrap app view in `}<inlineCode parentName=\"li\">{`<Provider store={createStore(reducers)} />`}</inlineCode></li>\n      <li parentName=\"ol\">{`Create reducers/index.js`}</li>\n      <li parentName=\"ol\">{`Import {combineReducers } from 'redux' in this new file and export default combineReducers with the reducers inside.`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`app.js for React-Native Redux`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport { View } from 'react-native';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducers from './reducers';\n\nconst App = () => {\n  return (\n    <Provider store={createStore(reducers)}>\n      <View />\n    </Provider>\n  );\n};\n\nexport default App;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`reducers/index.js`}</strong></p>\n    <p>{`Create `}<inlineCode parentName=\"p\">{`libraries`}</inlineCode>{` as basis to always return an array.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import {combineReducers } from 'redux';\n\nexport default combineReducers({\n    libraries: () => []\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rnredux-82-reducer-and-state-design\"\n    }}>{`RNREDUX-8.2: Reducer and State Design`}</h2>\n    <p>{`How can we tap on something and move to show more detail?`}</p>\n    <p>{`Let's create a file to specifically show library details. Making a data model. You need to be thinking about Reducers here. Reducers contains the App Data.`}</p>\n    <p>{`This builds on the `}<inlineCode parentName=\"p\">{`combineReducers`}</inlineCode>{` function we have above.`}</p>\n    <p>{`Let's have two separate pieces of state.`}</p>\n    <p>{`a) a list of libraries\nb) currently selected library`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Examples of what our reducers\n// could look like\n\n// Library Reducer\n\n[{ id: 1, name: 'React' }, { id: 2, name: 'Redux' }];\n\n// Selection Reducer\n\n1;\n`}</code></pre>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`Library list of data`}</strong></p>\n    <p><inlineCode parentName=\"p\">{`Connect`}</inlineCode>{` function: Used to connect up the reducers and state.`}</p>\n    <p><em parentName=\"p\">{`LibraryReducer.js`}</em></p>\n    <pre><code parentName=\"pre\" {...{}}>{`import data from './LibraryList.json';\n\nexport default () => data;\n`}</code></pre>\n    <p><em parentName=\"p\">{`LibraryReducer.json`}</em></p>\n    <p>{`This provides the data for above.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`[\n    {\n        'id': 0,\n        'title': 'ahid',\n        'description': 'iOhoieshoit'\n    },\n    ...\n]\n`}</code></pre>\n    <p><em parentName=\"p\">{`reducers.js`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { CombineReducers } from 'redux';\nimport LibraryReducer from './LibraryReducer';\n\nexport default combineReducers({\n  libraries: LibraryReducer,\n});\n`}</code></pre>\n    <p><em parentName=\"p\">{`LibraryList.js`}</em></p>\n    <p>{`Rendering the list to the user. mapStateToProps will grab the state from the connect function that is exported in `}<inlineCode parentName=\"p\">{`combineReducers`}</inlineCode>{` and any object returned from this `}<inlineCode parentName=\"p\">{`mapStateToProps`}</inlineCode>{` function will become available to our props.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass LibraryList extends Component {\n    render() {\n        // this will show what is available from\n        // the mapStateToProps func\n        // console.log(this.props)\n        return;\n    }\n}\n\nconst mapStateToProps = state => {\n    // console.log(state); // use to see current state\n    return {\n        // this will give a prop to our LibraryList\n        libraries: state.libraries;\n    }\n};\n\nexport default connect(mapStateToProps)(LibraryList);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"redux-thunk\"\n    }}>{`Redux Thunk`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`import { createStore, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\n\n...\n`}</code></pre>\n    <p>{`Now, inside fo the createStore, we adjust it to be like so...`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// the second arg is for initial states\nconst store = createStore(reducers, {}, applyMiddleware(ReduxThunk));\n\n<Provider store={store}>\n    <View style={{ flex: 1 }}>\n        <Header headerText={'Example'} />\n        <Table />\n    </View>\n</Provider>\n`}</code></pre>\n    <p>{`Now that ReduxThunk is set up, we can use it inside an action creator.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Action Creators\nexport const selectAction = ({ email, password }) => {\n    return (dispatch) -> {\n        firebase.auth().signInWithEmailAndPassword(email, password)\n            .then(user => console.log(user))\n    };\n};\n`}</code></pre>\n    <p>{`So, what is ReduxThunk doing for us?`}</p>\n    <p>{`Now that we have ReduxThunk, it will change how we call the action creator.`}</p>\n    <p>{`The Action Creator `}<inlineCode parentName=\"p\">{`WILL NOW RETURN A FUNCTION`}</inlineCode>{`. If ReduxThunk sees a function returned, it will send off an action with a dispatcher and immediately call that function.`}</p>\n    <p>{`This will then start our login request. The app will wait and the .then will automatically run and we will then dispatch our action.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Action Creators\nexport const selectAction = ({ email, password }) => {\n    return (dispatch) -> {\n        firebase.auth().signInWithEmailAndPassword(email, password)\n            .then(user => {\n                dispatch({ type: 'LOGIN_USER_SUCCESS', payload: user });\n            });\n    };\n};\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"dealing-with-navigation\"\n    }}>{`Dealing with Navigation`}</h2>\n    <p>{`As opposed to React with `}<inlineCode parentName=\"p\">{`React-Router`}</inlineCode>{`, React Native doesn't necessarily have one.`}</p>\n    <p>{`In this case, we'll be using the solution called `}<inlineCode parentName=\"p\">{`React-Native-Router-Flux`}</inlineCode>{` to help with navigation.`}</p>\n    <p>{`How does it work?`}</p>\n    <p>{`Imagine an app that requires authentication. We could then have another scene where the is a Master-Detail relationship.`}</p>\n    <p>{`We essentially define a `}<inlineCode parentName=\"p\">{`Scene`}</inlineCode>{` for each distinct screens. For example.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<Scene key=\"login\" component={LoginForm} />\n<Scene key=\"employeeList\" component={EmployeeList} />\n<Scene key=\"employeeDetail\" component={EmployeeDetail} />\n\n// All the props you can pass to the scene\n\n<Scene\n    key=\"login\"                 // call Actions.login() to show this screen\n    component={LoginForm}       // component to show\n    title=\"Login\"               // make nav bar and give it a title - this is built in\n    initial                     // define the first screen to show\n/>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"navigation-in-the-router\"\n    }}>{`Navigation in the Router`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// Create a router.js\n\nimport React from 'react';\nimport { Scene, Router } from 'react-native-router-flux';\n\n// scene-target\nimport ExampleComponent from './components/examplecomponent/ExampleComponent';\nimport Table from './components/table/Table';\n\nconst RouterComponent = () => {\n    return (\n        <Router>\n            <Scene key=\"example\" component={ExampleComponent} title=\"App\" />\n            <Scene key=\"table\" component={Table} title=\"Table\" initial />\n        </Router>\n    );\n};\n\nexport default RouterComponent;\n\n// in app.js\n\n...\nimport Router from './router';\n\nconst App = () => {\n\n    const store = createStore(reducers, {}, applyMiddleware(ReduxThunk));\n\n    return (\n        <Provider store={store}>\n            <Router />\n        </Provider>\n    );\n}\n\nexport default App;\n`}</code></pre>\n    <p>{`So how do we move between these scenes?`}</p>\n    <h2 {...{\n      \"id\": \"navigating-between-routes\"\n    }}>{`Navigating between routes`}</h2>\n    <p>{`Navigation will happen from an action.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// import actions\nimport { Actions } from 'react-native-router-flux';\n\n// Action Creators\nexport const loginUserSuccess = (dispatch, user) => {\n    dispatch({\n        type: LOGIN_USER_SUCCESS,\n        payload: user\n    });\n\n    Actions.employeeList(); // this method comes from the key property\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"grouping-scenes-with-buckets\"\n    }}>{`Grouping Scenes with 'Buckets'`}</h2>\n    <p>{`Making decisions on how the header should render.`}</p>\n    <p>{`We can do `}<inlineCode parentName=\"p\">{`scene nesting`}</inlineCode>{` to group these screens. There is one 'gotcha' though. Now for the actions, we need to actually use Actions.main().`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// router.js\n\nconst RouterComponent = () => {\n    return (\n        <Router>\n            <Scene key=\"auth\">\n                <Scene key=\"login\" component={Login} title=\"Login\" />\n            </Scene>\n            <Scene key=\"flow\">\n                <Scene key=\"example\" component={ExampleComponent} title=\"App\" />\n                <Scene\n                    // for action, you normally call Actions.key()\n                    onRight={() => console.log('right!!!')}\n                    rightTitle=\"Add\"\n                    key=\"table\"\n                    component={Table}\n                    title=\"Table\"\n                    initial\n                />\n            </Scene>\n        </Router>\n    );\n};\n`}</code></pre>\n    <p>{`We can use the `}<inlineCode parentName=\"p\">{`initial`}</inlineCode>{` prop within these `}<inlineCode parentName=\"p\">{`buckets`}</inlineCode>{` to let which component within a bucket to have an initial prop`}</p>\n    <h2 {...{\n      \"id\": \"actions-to-navigate-between-buckets\"\n    }}>{`Actions to navigate between buckets`}</h2>\n    <p>{`These actions can be added using`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import { Actions } from 'react-native-router-flux';\n\n// Action Creators - exammple thunk action creator\nconst loginUserSuccess = (dispatch, user) => {\n    dispatch({\n        type: LOGIN_USER_SUCCESS,\n        payload: user\n    });\n\n    Actions.employeeList();\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"form-updates-at-a-reducer-level--dynamic-property-updates\"\n    }}>{`Form updates at a reducer level / Dynamic Property updates`}</h2>\n    <p>{`Example reducer function with ES6 dynamic change.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`export default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case EMPLOYEE_UPDATE:\n            return {...state, [action.payload.prop]: action.payload.value};\n        default:\n            return state;\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}