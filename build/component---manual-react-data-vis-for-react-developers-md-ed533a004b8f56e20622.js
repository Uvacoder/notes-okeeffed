(window.webpackJsonp=window.webpackJsonp||[]).push([[473],{"/12O":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return l})),a.d(t,"default",(function(){return s}));a("1c7q"),a("abGl"),a("gZHo"),a("Fdmb"),a("Ir+3"),a("2mQt"),a("mXGw");var n=a("/FXl"),r=a("TjRS");a("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/React/Data-Vis-For-React-Developers.md"}});var o={_frontmatter:l},c=r.a;function s(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(n.b)(c,i({},o,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"data-vis-for-react-devs"},"Data Vis For React Devs"),Object(n.b)("h2",{id:"resources"},"Resources"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",i({parentName:"li"},{href:"https://observablehq.com/@d3"}),"Observable HQ @ d3")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",i({parentName:"li"},{href:"https://frontendmasters.com/courses/d3-js-react/"}),"FE Masters Course")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",i({parentName:"li"},{href:"https://academy.datawrapper.de/article/134-what-to-consider-when-creating-choropleth-maps"}),"Data Wrapper Academy - chloropleth maps")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",i({parentName:"li"},{href:"https://slides.com/shirleywu/deck-11"}),"Course Slides")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",i({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths"}),"MDN Path documentation")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",i({parentName:"li"},{href:"https://beta.observablehq.com/@sxywu/data-visualization-for-react-developers-starter"}),"SVG Explorations - Observable"))),Object(n.b)("h2",{id:"navigating-her-3-workshops"},"Navigating Her 3 Workshops"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Data Vis for React Devs"),Object(n.b)("li",{parentName:"ol"},"Intro to D3"),Object(n.b)("li",{parentName:"ol"},"Building Custom Data Visualations")),Object(n.b)("p",null,"[3]"," builds on top of ","[2]"," and these notes are based on ","[1]","."),Object(n.b)("p",null,"[3]"," will talk more about the Gestalt laws and how to design the visualisations."),Object(n.b)("h2",{id:"intro-to-different-data-types"},"Intro To Different Data Types"),Object(n.b)("p",null,"There are a number of data types:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Categorical (genres)"),Object(n.b)("li",{parentName:"ol"},"Ordinal (t-shirt sizes)"),Object(n.b)("li",{parentName:"ol"},"Quantitative (temperatures)"),Object(n.b)("li",{parentName:"ol"},"Temporal (dates)"),Object(n.b)("li",{parentName:"ol"},"Spatial (cities)")),Object(n.b)("p",null,"The basic charts and when to use them:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Bar chart: for categorial comparisons. The domain is categorial and the range is quantitative."),Object(n.b)("li",{parentName:"ol"},"Histogram: for categorial distributions. Domain is quantitative bins and range is the frequency of quantitative bin. Example: x-axis is movie scores and height is number of movies that fall into that score."),Object(n.b)("li",{parentName:"ol"},"Scatter plots: for correlation. 2 attributes and the relationship between their quantitative values."),Object(n.b)("li",{parentName:"ol"},"Line chart: for temporal trends. Domain is temporal and range is quantitative."),Object(n.b)("li",{parentName:"ol"},"Tree: For hierarchy, parent-child relationships, multiple tiers of category. Unidirectional."),Object(n.b)("li",{parentName:"ol"},"Node-link diagram: For connection. Shows the relationship between entities. Cyclical."),Object(n.b)("li",{parentName:"ol"},"Chlorodepth: For spatial trends. Domain: spatial regions. Range: Quantitative. Not good for subtle differences in data."),Object(n.b)("li",{parentName:"ol"},"Pie charts: used sparingly. For hierarchical part-to-whole. Best for: When values are around 25%, 30% or 75% (3 or 4 values). Not good for comparing fine differences and multiple totals.")),Object(n.b)("h2",{id:"intro-to-svg"},"Intro to SVG"),Object(n.b)("p",null,"SVG is really good at drawing shapes onto the sreen. The most used SVG elements are ",Object(n.b)("inlineCode",{parentName:"p"},"rect"),", ",Object(n.b)("inlineCode",{parentName:"p"},"circle"),", ",Object(n.b)("inlineCode",{parentName:"p"},"text")," and ",Object(n.b)("inlineCode",{parentName:"p"},"path"),"."),Object(n.b)("p",null,"The SVG co-ordinate starts with (0,0) at the top-left and the numbers in crease for X to the right or down when talking about Y."),Object(n.b)("p",null,"In the three charts the course makes (bar chart, line chart, radial chart), Susie explains that the bar chart uses ",Object(n.b)("inlineCode",{parentName:"p"},"<rect/>")," elements, the line chart uses ",Object(n.b)("inlineCode",{parentName:"p"},"<path/>")," elements and the radial chart uses ",Object(n.b)("inlineCode",{parentName:"p"},"<path/>")," elements."),Object(n.b)("h2",{id:"data-to-svg-shapes"},"Data to SVG Shapes"),Object(n.b)("p",null,"The work here is to look at how some elements are made through the ",Object(n.b)("a",i({parentName:"p"},{href:"https://beta.observablehq.com/@sxywu/data-visualization-for-react-developers-starter"}),"Observable notebook"),"."),Object(n.b)("p",null,"D3 is a tool that helps us take data to SVG without the difficulty."),Object(n.b)("p",null,"People can be intimidated by the size of the API. There is an API slide you can see ",Object(n.b)("a",i({parentName:"p"},{href:"https://slides.com/shirleywu/deck-11#/21/0/0"}),"here")," that breaks down the API modules."),Object(n.b)("h2",{id:"scales"},"Scales"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Mapping from data attributes (domain) to display (range).")),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"d3.linearScale()\n  .domain([min, max]) // input\n  .range([min, max]); // output\n")),Object(n.b)("p",null,"An example of taking the data and scaling by fetching min/max:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"var width = 800;\nvar height = 600;\nvar data = [\n  { date: new Date('01-01-2015'), temp: 0 },\n  { date: new Date('01-01-2017'), temp: 3 },\n];\n\nvar min = d3.min(data, d => d.date);\nvar max = d3.max(data, d => d.date);\n\n// or use extent, which gives back [min, max]\nconst [min, max] = d3.extent(data, d => d.date);\n\nvar xScale = d3\n  .scaleTime()\n  .domain([min, max])\n  .range([0, width]);\nvar yScale = d3\n  .scaleLinear()\n  .domain([min, max])\n  .range([height, 0]); // to account for 0,0 viewbox\n")),Object(n.b)("p",null,"Which scale to use and when:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",i({parentName:"tr"},{align:null}),"Type"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Domain"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Range"),Object(n.b)("th",i({parentName:"tr"},{align:null}),"Scale"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),"Quantitative"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"Continuous"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"Continuous"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"scaleLinear")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),"Quantitative"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"Continuous"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"Continuous"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"scaleLog")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),"Quantitative"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"Continuous"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"Continuous"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"scaleTime")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),"Quantitative"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"Continuous"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"Discrete"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"scaleQuantize")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),"Categorial"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"Discrete"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"Discrete"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"scaleOrdinal")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",i({parentName:"tr"},{align:null}),"Categorial"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"Discrete"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"Continuous"),Object(n.b)("td",i({parentName:"tr"},{align:null}),"scaleBand")))),Object(n.b)("h2",{id:"creating-bar-charts"},"Creating Bar Charts"),Object(n.b)("p",null,"You can do the example on ",Object(n.b)("a",i({parentName:"p"},{href:"https://observablehq.com/@sxywu/data-visualization-for-react-developers-starter"}),"2 of this Observable notebook"),"."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"const barChartData = () => {\n  const extent = d3.extent(data, d => d.date);\n  const xScale = d3\n    .scaleTime()\n    .domain(extent)\n    .range([0, width]);\n\n  const tempMax = d3.max(data, d => d.high);\n  const tempMin = d3.min(data, d => d.low);\n  const yScale = d3\n    .scaleLinear()\n    .domain([tempMin, tempMax])\n    .range([height, 0]);\n\n  return data.map(d => ({\n    x: xScale(d.date),\n    y: yScale(d.high),\n    height: yScale(d.low) - yScale(d.high),\n  }));\n};\n")),Object(n.b)("p",null,"Here we wanted to calculate the x-axis of time and y-axis of height and use these scales to calculate values for ",Object(n.b)("inlineCode",{parentName:"p"},"x"),", ",Object(n.b)("inlineCode",{parentName:"p"},"y")," and ",Object(n.b)("inlineCode",{parentName:"p"},"height"),"."),Object(n.b)("p",null,"We also used ",Object(n.b)("inlineCode",{parentName:"p"},"min")," and ",Object(n.b)("inlineCode",{parentName:"p"},"max")," functions for the temp as they were different keys in the data."),Object(n.b)("h3",{id:"adding-in-a-color-scale"},"Adding in a color scale"),Object(n.b)("p",null,"We add this in addition to the work in the section above."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"const barChartData = () => {\n  const extent = d3.extent(data, d => d.date);\n  const xScale = d3\n    .scaleTime()\n    .domain(extent)\n    .range([0, width]);\n\n  const tempMax = d3.max(data, d => d.high);\n  const tempMin = d3.min(data, d => d.low);\n  const yScale = d3\n    .scaleLinear()\n    .domain([tempMin, tempMax])\n    .range([height, 0]);\n\n  // the important part\n  const colorExtent = d3.extent(data, d => d.avg).reverse();\n  // scaleSequential allows you to use an interpolator to map\n  // to the range.\n  const colorScale = d3\n    .scaleSequential()\n    .domain(colorExtent)\n    .interpolator(d3.interpolateRdYlBu);\n\n  return data.map(d => ({\n    x: xScale(d.date),\n    y: yScale(d.high),\n    height: yScale(d.low) - yScale(d.high),\n    fill: colorScale(d.avg),\n  }));\n};\n")),Object(n.b)("h2",{id:"creating-line-charts"},"Creating Line Charts"),Object(n.b)("p",null,"The important part here is again understanding the ",Object(n.b)("inlineCode",{parentName:"p"},"line")," SVG and parts that go into it."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"const lineChartData = () => {\n  const extent = d3.extent(data, d => d.date);\n  const xScale = d3\n    .scaleTime()\n    .domain(extent)\n    .range([0, width]);\n\n  const tempMax = d3.max(data, d => d.high);\n  const tempMin = d3.min(data, d => d.low);\n  const yScale = d3\n    .scaleLinear()\n    .domain([tempMin, tempMax])\n    .range([height, 0]);\n\n  // you could also create two different lines and pass the .y func\n  const line = d3.line().x(d => xScale(d.date));\n\n  return [\n    { path: line.y(d => yScale(d.high))(data), fill: 'red' },\n    { path: line.y(d => yScale(d.low))(data), fill: 'blue' },\n  ];\n};\n")),Object(n.b)("h2",{id:"building-a-radial-chart"},"Building a Radial Chart"),Object(n.b)("p",null,"You use ",Object(n.b)("inlineCode",{parentName:"p"},"d3.arc")," which is similar to ",Object(n.b)("inlineCode",{parentName:"p"},"d3.line"),", but we give an object of one data point as opposed to an array."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"var pie = {\n  data: 1,\n  value: 1,\n  startAngle: 6.050474740247008,\n  endAngle: 6.166830023713296,\n};\n\nvar arc = d3\n  .arc()\n  .innerRadius(0)\n  .outerRadius(100)\n  .startAngle(d => d.startAngle)\n  .endAngle(d => d.endAngle);\n\narc(pie);\n\n// M-23.061587074244123,-97.30448705798236A100,100,0,0,1,-11.609291412523175,-99.32383577419428L0,0Z\n")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Commonly used for a pie chart.")),Object(n.b)("h3",{id:"creating-the-radial-chart"},"Creating the Radial Chart"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"const radialChartData = () => {\n  const radiusScale = d3\n    .scaleLinear()\n    .domain([d3.min(data, d => d.low), d3.max(data, d => d.high)])\n    .range([0, width / 2]);\n\n  // startAngle = i * perSliceAngle\n  // endAngle = (i+1) * perSliceAngle\n\n  const arcGenerator = d3.arc();\n  // get the angle for each slide\n  // 2PI / 365\n  const perSliceAngle = (2 * Math.PI) / data.length;\n\n  const colorExtent = d3.extent(data, d => d.avg).reverse();\n  const colorScale = d3\n    .scaleSequential()\n    .domain(colorExtent)\n    .interpolator(d3.interpolateRdYlBu);\n\n  return data.map((d, i) => {\n    const path = arcGenerator({\n      startAngle: i * perSliceAngle,\n      endAngle: (i + 1) * perSliceAngle,\n      innerRadius: radiusScale(d.low),\n      outerRadius: radiusScale(d.high),\n    });\n    return {\n      path,\n      fill: colorScale(d.avg),\n    };\n  });\n};\n")),Object(n.b)("h2",{id:"breaking-down-the-d3-api"},"Breaking Down the D3 API"),Object(n.b)("p",null,"Out of the sections for D3, there are a two sections that Susan breaks is down into."),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Data preparation: Some could be replaced by JS/Lodash etc. Chords, hierarchies and pies here are very useful."),Object(n.b)("li",{parentName:"ol"},"Layout calculation: Calulations that help for drawing out the SVG objects themselves. This includes things like geo, chord etc."),Object(n.b)("li",{parentName:"ol"},"DOM manipulation")),Object(n.b)("p",null,"...and..."),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Finishing touches: anyimations, color shemes, axes etc."),Object(n.b)("li",{parentName:"ol"},"Interactions: making the charts interactive")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Something interesting was replacing ",Object(n.b)("inlineCode",{parentName:"p"},"blocks.org")," with ",Object(n.b)("inlineCode",{parentName:"p"},"blockbuilder.org")," ie ",Object(n.b)("inlineCode",{parentName:"p"},"https://blockbuilder.org/mbostock/2e73ec84221cb9773f4c")," it will take you to an interactive editor.")),Object(n.b)("p",null,"For React, the important sections to probably note are ",Object(n.b)("inlineCode",{parentName:"p"},"selections")," from DOM manipulations (basically the enter, update, exit lifecycle) and Dispatches."),Object(n.b)("h3",{id:"bar-chart-exercise"},"Bar Chart Exercise"),Object(n.b)("p",null,"With React, we don't need to both with the ",Object(n.b)("inlineCode",{parentName:"p"},"enter, exit, update")," lifecycle as React can handle this for us just with state."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"// helper func\nconst barChartData = data => {\n  const extent = d3.extent(data, d => d.date);\n  const xScale = d3\n    .scaleTime()\n    .domain(extent)\n    .range([0, width]);\n\n  const tempMax = d3.max(data, d => d.high);\n  const tempMin = d3.min(data, d => d.low);\n  const yScale = d3\n    .scaleLinear()\n    .domain([tempMin, tempMax])\n    .range([height, 0]);\n\n  // the important part\n  const colorExtent = d3.extent(data, d => d.avg).reverse();\n  // scaleSequential allows you to use an interpolator to map\n  // to the range.\n  const colorScale = d3\n    .scaleSequential()\n    .domain(colorExtent)\n    .interpolator(d3.interpolateRdYlBu);\n\n  return data.map(d => ({\n    x: xScale(d.date),\n    y: yScale(d.high),\n    height: yScale(d.low) - yScale(d.high),\n    fill: colorScale(d.avg),\n  }));\n};\n\nconst Component = ({ data, width, height }) => {\n  const res = useCallback(() => barChartData(data));\n\n  return (\n    <svg width={width} height={height}>\n      {res.map(d => (\n        // she manually put <rect x={d.x} y={d.y} width={2} height={d.height} fill={d.fill}>\n        <rect {...d} />\n      ))}\n    </svg>\n  );\n};\n")),Object(n.b)("h2",{id:"arc-exercise"},"Arc Exercise"),Object(n.b)("p",null,"In this particular exercise, we need to actually shift the center from ",Object(n.b)("inlineCode",{parentName:"p"},"0,0")," using a transformation:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"const radialChartData = () => {\n  const radiusScale = d3\n    .scaleLinear()\n    .domain([d3.min(data, d => d.low), d3.max(data, d => d.high)])\n    .range([0, width / 2]);\n\n  // startAngle = i * perSliceAngle\n  // endAngle = (i+1) * perSliceAngle\n\n  const arcGenerator = d3.arc();\n  // get the angle for each slide\n  // 2PI / 365\n  const perSliceAngle = (2 * Math.PI) / data.length;\n\n  const colorExtent = d3.extent(data, d => d.avg).reverse();\n  const colorScale = d3\n    .scaleSequential()\n    .domain(colorExtent)\n    .interpolator(d3.interpolateRdYlBu);\n\n  return data.map((d, i) => {\n    const path = arcGenerator({\n      startAngle: i * perSliceAngle,\n      endAngle: (i + 1) * perSliceAngle,\n      innerRadius: radiusScale(d.low),\n      outerRadius: radiusScale(d.high),\n    });\n    return {\n      path,\n      fill: colorScale(d.avg),\n    };\n  });\n};\n\nconst Component = ({ data, width, height }) => {\n  const res = useCallback(() => radialChartData(data));\n\n  // <g /> used to transform the arc to where the center should be\n  return (\n    <svg width={width} height={height}>\n      <g transform={`translate(${width / 2}, ${height / 2})`}>\n        {res.map(d => (\n          // she manually put <path d={d.x=path} fill={d.fill}>\n          <path {...d} />\n        ))}\n      </g>\n    </svg>\n  );\n};\n")),Object(n.b)("h2",{id:"the-three-exceptions-to-react"},"The Three Exceptions to React"),Object(n.b)("p",null,"Axis, brush, translations and zoom don't always play well together between React and D3."),Object(n.b)("h3",{id:"axes-legends--annotations"},"Axes, Legends + Annotations"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),'// 1. Create axisLeft or axisBottom at beginning of lifecycle with corresponding scale\nconst yAxis = d3.axisLeft().scale(yScale);\n\n// 2. Create an SVG group element in `render`\n// parents omitted for brevity\nreturn <g ref="group" />;\n\n// 3. Call axis on the group element in componentDidUpdate\nd3.select(this.refs.group).call(yAxis);\n')),Object(n.b)("p",null,"In context:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"// helper func\nconst barChartData = data => {\n  const xAxis = d3.axisBottom();\n  const yAxis = d3.axisLeft();\n\n  const extent = d3.extent(data, d => d.date);\n  const xScale = d3\n    .scaleTime()\n    .domain(extent)\n    .range([0, width]);\n\n  const tempMax = d3.max(data, d => d.high);\n  const tempMin = d3.min(data, d => d.low);\n  const yScale = d3\n    .scaleLinear()\n    .domain([tempMin, tempMax])\n    .range([height, 0]);\n\n  // the important part\n  const colorExtent = d3.extent(data, d => d.avg).reverse();\n  // scaleSequential allows you to use an interpolator to map\n  // to the range.\n  const colorScale = d3\n    .scaleSequential()\n    .domain(colorExtent)\n    .interpolator(d3.interpolateRdYlBu);\n\n  return {\n    data: data.map(d => ({\n      x: xScale(d.date),\n      y: yScale(d.high),\n      height: yScale(d.low) - yScale(d.high),\n      fill: colorScale(d.avg),\n    })),\n    xAxis: xAxis.scale(xScale),\n    yAxis: yAxis.scale(yScale),\n  };\n};\n\nconst Component = ({ data, width, height }) => {\n  const { data, xAxis, yAxis } = useCallback(() => barChartData(data));\n  const xAxisRef = useRef('xAxis');\n  const yAxisRef = useRef('yAxis');\n\n  useEffect(() => {\n    d3.select(xAxisRef).call(xAxis);\n    d3.select(yAxisRef).call(yAxis);\n  }, [data]);\n\n  return (\n    <svg width={width} height={height}>\n      {data.map(d => (\n        // she manually put <rect x={d.x} y={d.y} width={2} height={d.height} fill={d.fill}>\n        <rect {...d} />\n      ))}\n      <g ref={xAxisRef} transform={`translate(0, ${height}`)} />\n      <g ref={yAxisRef} transform={`translate(${leftPadding}, 0)`)} />\n    </svg>\n  );\n};\n")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Note: You will want to update the functions to use margins to then add in the axis.")),Object(n.b)("h2",{id:"transitions"},"Transitions"),Object(n.b)("p",null,"In general, React recommeneds you ",Object(n.b)("inlineCode",{parentName:"p"},"setState")," for animations. For D3, the approach changes. Susan uses D3 or Greenstock."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"// in componentDidUpdate (or similar)\nd3.select(this.refs.bars)\n  .selectAll('rect')\n  .data(this.state.bars)\n  .transition()\n  .attr('y', d => d.y)\n  .attr('height', d => d.height)\n  .attr('fill', d => d.fill);\n\nreturn (\n  <g ref=\"bars\">\n    {this.state.bars.map((d, i) => (\n      <rect key={i} x={d.x} width=\"2\" />\n    ))}\n  </g>\n);\n")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Important: Make sure that the attributes that React does not manage is not placed in the SVG element.")),Object(n.b)("h2",{id:"brush"},"Brush"),Object(n.b)("p",null,"In ",Object(n.b)("inlineCode",{parentName:"p"},"componentDidMount"),":"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"Create brush instance"),Object(n.b)("li",{parentName:"ol"},"Define brushable area (extent)"),Object(n.b)("li",{parentName:"ol"},"Pass in a function to execute on every brush, or brush end.")),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"this.brush = d3.brush().extent([0,0], [width, height]).on('end', () => {\n  // end function\n})\n\nd3.select(this.refs.brush).call(this.brush)\n\n// in render\n<g ref=\"brush\" />\n")),Object(n.b)("p",null,"Once the d3 brush is in, you get the interactivity."),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Use ",Object(n.b)("inlineCode",{parentName:"p"},"useRef")," and ",Object(n.b)("inlineCode",{parentName:"p"},"useEffect")," for function components.")),Object(n.b)("p",null,"An example handler for the brush:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"this.brush = d3\n  .brushX()\n  .extent([0, 0], [width, height])\n  .on('end', () => {\n    // end function\n    console.log(d3.event.selection); // [leftValue, rightValue]\n    const [minX, maxX] = d3.event.selection;\n    const range = [\n      this.state.XScale.invert(minX) // denormalise values\n      this.state.XScale.invert(maxX)\n    ]\n    functionToUpdateRange(range)\n  });\n\n// handling coloring\nconst isColored = !range.length || range[0] < d.date && d.date < range[1]\n\nreturn {\n  //... other properties\n  fill: isColored ? colorScale(d.avg) : '#ccc' // grey\n}\n")),Object(n.b)("p",null,"There is also a ",Object(n.b)("inlineCode",{parentName:"p"},"brushX")," and ",Object(n.b)("inlineCode",{parentName:"p"},"brushY")," available."),Object(n.b)("h2",{id:"additional-resources"},"Additional Resources"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"d3-annotation")," and ",Object(n.b)("inlineCode",{parentName:"p"},"react-annotation")," was made by Susie and she has a library for that."),Object(n.b)("p",null,Object(n.b)("a",i({parentName:"p"},{href:"https://vx-demo.now.sh/"}),"vx")," is an example and ",Object(n.b)("a",i({parentName:"p"},{href:"https://semiotic.nteract.io/"}),"semiotic")," are resources from others."),Object(n.b)("h2",{id:"canvas"},"Canvas"),Object(n.b)("p",null,"If you need to have a few thousand SVG nodes on the screen, consider using Canvas."),Object(n.b)("p",null,"While interactivity is easier for SVG, ",Object(n.b)("inlineCode",{parentName:"p"},"canvas")," is more like a painting with no as much ability for interactivity."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"// in render\n<canvas\n  ref=\"canvas\"\n  style={{ width: `${width}px`, height: `${height}px` }}\n  width={2 * width}\n  height={2 * height}\n/>;\n\nctx = this.refs.canvas.getContext('2d');\n\n// some available commands\nctx.fillRect(x, y, width, height);\n\n// circle\nctx.beginPath();\nctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);\nctx.fill();\n\n// line\nctx.beginPath();\n// moveTo, lineTo, bezierCurveTo\nctx.fill();\n")))}s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/React/Data-Vis-For-React-Developers.md"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-react-data-vis-for-react-developers-md-ed533a004b8f56e20622.js.map