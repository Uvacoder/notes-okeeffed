{"version":3,"sources":["webpack:///../manual/React/Lead-Debouncing-With-Hooks.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,4NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,8BADR,8BAGA,sCAAqB,0BAAYC,WAAW,KAAvB,UAArB,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,o4D,mNA4ETJ,EAAWK,gBAAiB","file":"component---manual-react-lead-debouncing-with-hooks-md-784310b19f1903420377.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lead-debouncing-with-hooks\"\n    }}>{`Lead Debouncing with Hooks`}</h1>\n    <p>{`Example using `}<inlineCode parentName=\"p\">{`Lodash`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import * as React from \"react\"\nimport { useState, useEffect, useRef } from \"react\"\nimport { debounce } from \"lodash\"\n\nconst ExampleComponent = ({initTeam}) => {\n  const [selectedTeam, setSelectedTeam] = useState<Option | undefined>(initTeam)\n  \n  // this is to be used to set a default value\n  const updateSelect = (value: Option) => {\n    setSelectedTeam(value)\n    setFields(fields => ({\n      ...fields,\n      // @ts-ignore\n      teamId: value.value,\n      owners: initOwners\n    }))\n  }\n\n  // Fire immediate use of useEffect for initTeam\n  // but then push off any other effects for the next 5s.\n  // This prevents the deletion of an owner being overriden\n  // when initTeam fires again during inital component mounting.\n  const throttleSelectedTeam = useRef(\n    debounce(\n      (initTeam: Option) => {\n        updateSelect(initTeam)\n      },\n      5000,\n      { leading: true, trailing: false }\n    )\n  )\n\n  // the throttle will debounce changes through useEffect\n  useEffect(() => {\n    if (!disabled && initTeam) {\n      throttleSelectedTeam.current(initTeam)\n    }\n  }, [initTeam])\n\n  // the example component is really here to display what the end usecase was\n  return (<>\n    <UserSearchField\n      owners={owners}\n      disabled={selectedTeam === null ? true : false}\n      teamId={selectedTeam ? selectedTeam.value : \"\"}\n      setFields={(user: User) => {\n        setFields(fields => ({\n          ...fields,\n          owners: [...fields.owners, user]\n        }))\n      }}\n    />\n    <div>\n      {owners.map(user => (\n        <UserCard\n          key={user.id}\n          disabled={disabled}\n          user={user}\n          onRemove={evt => {\n            setFields(fields => ({\n              ...fields,\n              owners: fields.owners.filter(o => o.id !== user.id)\n            }))\n          }}\n        />\n      ))}\n    </div>\n  </>)\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}