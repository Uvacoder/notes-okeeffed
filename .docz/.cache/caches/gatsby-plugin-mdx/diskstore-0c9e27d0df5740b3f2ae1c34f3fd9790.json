{"expireTime":9007200867335893000,"key":"gatsby-plugin-mdx-entire-payload-bb8fd7588364042a9f1f987e11541038-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Production-Grade TypeScript Course","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":37,"offset":203},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":37,"offset":203},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This course goes over some of the features from early on as opposed to the entire course.","position":{"start":{"line":10,"column":1,"offset":205},"end":{"line":10,"column":90,"offset":294},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":205},"end":{"line":10,"column":90,"offset":294},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":12,"column":4,"offset":299},"end":{"line":12,"column":13,"offset":308},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":296},"end":{"line":12,"column":13,"offset":308},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://frontendmasters.com/courses/production-typescript/","children":[{"type":"text","value":"Production-Grade TypeScript Course","position":{"start":{"line":14,"column":5,"offset":314},"end":{"line":14,"column":39,"offset":348},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":313},"end":{"line":14,"column":100,"offset":409},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":313},"end":{"line":14,"column":100,"offset":409},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":310},"end":{"line":14,"column":100,"offset":409},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":310},"end":{"line":14,"column":100,"offset":409},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Optional Chaining & Nullish Coalescing","position":{"start":{"line":16,"column":4,"offset":414},"end":{"line":16,"column":42,"offset":452},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":411},"end":{"line":16,"column":42,"offset":452},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Optional chaining which is used for early termination from object access. Note that this adds complexity to managin the code.","position":{"start":{"line":18,"column":1,"offset":454},"end":{"line":18,"column":126,"offset":579},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":454},"end":{"line":18,"column":126,"offset":579},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"const value = obj.levelOneKey?.value // levelOneKey may not be defined","position":{"start":{"line":20,"column":1,"offset":581},"end":{"line":22,"column":4,"offset":661},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Nullish Coalescing:","position":{"start":{"line":24,"column":1,"offset":663},"end":{"line":24,"column":20,"offset":682},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":663},"end":{"line":24,"column":20,"offset":682},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"class Foo {\n  name;\n\n  constructor(rawName?: string) {\n    this.name = rawName ?? '(no name)'\n  }\n\n  log() {\n    console.log(this.name)\n  }\n}","position":{"start":{"line":26,"column":1,"offset":684},"end":{"line":38,"column":4,"offset":835},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"True Privacy","position":{"start":{"line":40,"column":4,"offset":840},"end":{"line":40,"column":16,"offset":852},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":837},"end":{"line":40,"column":16,"offset":852},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you had ","position":{"start":{"line":42,"column":1,"offset":854},"end":{"line":42,"column":12,"offset":865},"indent":[]}},{"type":"inlineCode","value":"private name: string","position":{"start":{"line":42,"column":12,"offset":865},"end":{"line":42,"column":34,"offset":887},"indent":[]}},{"type":"text","value":" in a class and someone runs a debugger, previously the variable would ","position":{"start":{"line":42,"column":34,"offset":887},"end":{"line":42,"column":105,"offset":958},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"still be visible","position":{"start":{"line":42,"column":107,"offset":960},"end":{"line":42,"column":123,"offset":976},"indent":[]}}],"position":{"start":{"line":42,"column":105,"offset":958},"end":{"line":42,"column":125,"offset":978},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":42,"column":125,"offset":978},"end":{"line":42,"column":126,"offset":979},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":854},"end":{"line":42,"column":126,"offset":979},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"class Foo {\n  #name;\n\n  constructor(rawName?: string) {\n    this.#name = rawName ?? '(no name)'\n  }\n\n  log() {\n    console.log(this.#name)\n  }\n}","position":{"start":{"line":44,"column":1,"offset":981},"end":{"line":56,"column":4,"offset":1135},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At runtime, it won't be there anymore, whereas with ","position":{"start":{"line":58,"column":1,"offset":1137},"end":{"line":58,"column":53,"offset":1189},"indent":[]}},{"type":"inlineCode","value":"private","position":{"start":{"line":58,"column":53,"offset":1189},"end":{"line":58,"column":62,"offset":1198},"indent":[]}},{"type":"text","value":" it would be!","position":{"start":{"line":58,"column":62,"offset":1198},"end":{"line":58,"column":75,"offset":1211},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1137},"end":{"line":58,"column":75,"offset":1211},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Tuple Types & Recursive Type Aliases","position":{"start":{"line":60,"column":4,"offset":1216},"end":{"line":60,"column":40,"offset":1252},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1213},"end":{"line":60,"column":40,"offset":1252},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"type Foo<T extends any[]> = [boolean, ...T, boolean];","position":{"start":{"line":62,"column":1,"offset":1254},"end":{"line":64,"column":4,"offset":1317},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Before TS 4, you could only put ","position":{"start":{"line":66,"column":1,"offset":1319},"end":{"line":66,"column":33,"offset":1351},"indent":[]}},{"type":"inlineCode","value":"...T","position":{"start":{"line":66,"column":33,"offset":1351},"end":{"line":66,"column":39,"offset":1357},"indent":[]}},{"type":"text","value":" at the end, however now you do not.","position":{"start":{"line":66,"column":39,"offset":1357},"end":{"line":66,"column":75,"offset":1393},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1319},"end":{"line":66,"column":75,"offset":1393},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Labelled tuple types","position":{"start":{"line":68,"column":5,"offset":1399},"end":{"line":68,"column":25,"offset":1419},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1395},"end":{"line":68,"column":25,"offset":1419},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are also ","position":{"start":{"line":70,"column":1,"offset":1421},"end":{"line":70,"column":16,"offset":1436},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"labelled tuple types","position":{"start":{"line":70,"column":18,"offset":1438},"end":{"line":70,"column":38,"offset":1458},"indent":[]}}],"position":{"start":{"line":70,"column":16,"offset":1436},"end":{"line":70,"column":40,"offset":1460},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":70,"column":40,"offset":1460},"end":{"line":70,"column":41,"offset":1461},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1421},"end":{"line":70,"column":41,"offset":1461},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"type Address = [number, string, number, string];\n\n// take everything from address in order\nfunction printAddress(...address: Address) {\n  // omitted\n}\n\n// we get a terrible typing experience that doesn't explain much\nprintAddress()\n\n// We can fix this with labelled tuple types!\ntype Address = [streetNumber: number, city: string, state: string, postal: number]\n\n// take everything from address in order\nfunction printAddress(...address: Address) {\n  // omitted\n}\n\n// Happier experience that gives more information for the tuple!\nprintAddress()","position":{"start":{"line":72,"column":1,"offset":1463},"end":{"line":93,"column":4,"offset":2017},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Type aliases and interfaces","position":{"start":{"line":95,"column":5,"offset":2023},"end":{"line":95,"column":32,"offset":2050},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2019},"end":{"line":95,"column":32,"offset":2050},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A good example of this is now it can be used for JSON.","position":{"start":{"line":97,"column":1,"offset":2052},"end":{"line":97,"column":55,"offset":2106},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2052},"end":{"line":97,"column":55,"offset":2106},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// old way from TS v3\ntype JSONValue = string | number | boolean | null | JSONArray | JSONObject;\ninterface JSONArray extends Array<JSONValues> {}\n\n// new way from TS v4\ntype JSONValue =\n  | string\n  | number\n  | boolean\n  | null\n  | JSONValue[]\n  | {\n      [k: string]: JSONValue;\n    };","position":{"start":{"line":99,"column":1,"offset":2108},"end":{"line":114,"column":4,"offset":2406},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Template type literals","position":{"start":{"line":116,"column":5,"offset":2412},"end":{"line":116,"column":27,"offset":2434},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":2408},"end":{"line":116,"column":27,"offset":2434},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"type Corner = `${'top'|'bottom'}-${'left'|'right'}`","position":{"start":{"line":118,"column":1,"offset":2436},"end":{"line":120,"column":4,"offset":2497},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"TS Errors","position":{"start":{"line":122,"column":4,"offset":2502},"end":{"line":122,"column":13,"offset":2511},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":2499},"end":{"line":122,"column":13,"offset":2511},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"@ts-expect-error","position":{"start":{"line":124,"column":1,"offset":2513},"end":{"line":124,"column":19,"offset":2531},"indent":[]}},{"type":"text","value":" helps suppress an error. That being said, if there IS no error, it will throw an error!","position":{"start":{"line":124,"column":19,"offset":2531},"end":{"line":124,"column":107,"offset":2619},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":2513},"end":{"line":124,"column":107,"offset":2619},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Error Handling with Unknown","position":{"start":{"line":126,"column":4,"offset":2624},"end":{"line":126,"column":31,"offset":2651},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":2621},"end":{"line":126,"column":31,"offset":2651},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You SHOULD use ","position":{"start":{"line":128,"column":1,"offset":2653},"end":{"line":128,"column":16,"offset":2668},"indent":[]}},{"type":"inlineCode","value":"unknown","position":{"start":{"line":128,"column":16,"offset":2668},"end":{"line":128,"column":25,"offset":2677},"indent":[]}},{"type":"text","value":" for throwing errors now.","position":{"start":{"line":128,"column":25,"offset":2677},"end":{"line":128,"column":50,"offset":2702},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":2653},"end":{"line":128,"column":50,"offset":2702},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"function somethingRisky() {}\n\ntry {\n  somethingRisky();\n  // in case it removes itself, this should be `err: unknown`\n} catch (err) {\n  // DON'T forces us to handle the error type\n  console.log(err.stack);\n  // DO\n  if (err instanceof Error) {\n    console.log(err.stack);\n  } else {\n    console.log(err);\n  }\n}","position":{"start":{"line":130,"column":1,"offset":2704},"end":{"line":146,"column":4,"offset":3024},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can also add a function ","position":{"start":{"line":148,"column":1,"offset":3026},"end":{"line":148,"column":28,"offset":3053},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"which should only be used for testing","position":{"start":{"line":148,"column":30,"offset":3055},"end":{"line":148,"column":67,"offset":3092},"indent":[]}}],"position":{"start":{"line":148,"column":28,"offset":3053},"end":{"line":148,"column":69,"offset":3094},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":148,"column":69,"offset":3094},"end":{"line":148,"column":70,"offset":3095},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":3026},"end":{"line":148,"column":70,"offset":3095},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// before TS 3.7\nfunction isError(err: any): err is Error {\n  return err instanceof Error\n}\n\n// after - described as something that should be more in a test suite\nfunction assertIsError(err:any): asserts err is Error {\n  if (!(err instanceof Error)) throw new Error(`Not an error: ${err}`)\n}\n\nfunction somethingRisky() {}\n\ntry {\n  somethingRisky();\n  // in case it removes itself, this should be `err: unknown`\n} catch (err) {\n  assertIsError(err)\n  console.log(err.stack);\n}","position":{"start":{"line":150,"column":1,"offset":3097},"end":{"line":170,"column":4,"offset":3582},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Declaration Files & Type-only imports","position":{"start":{"line":172,"column":4,"offset":3587},"end":{"line":172,"column":41,"offset":3624},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":3584},"end":{"line":172,"column":41,"offset":3624},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can now generate type files for JS.","position":{"start":{"line":174,"column":1,"offset":3626},"end":{"line":174,"column":40,"offset":3665},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":3626},"end":{"line":174,"column":40,"offset":3665},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"checkJs\": true\n  }\n}","position":{"start":{"line":176,"column":1,"offset":3667},"end":{"line":183,"column":4,"offset":3750},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"type-only import","position":{"start":{"line":185,"column":5,"offset":3756},"end":{"line":185,"column":21,"offset":3772},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":3752},"end":{"line":185,"column":21,"offset":3772},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import type { useAsyncDataEffect } from 'path/to/module'\n\n// now just uses their type `useAsyncDataEffect`","position":{"start":{"line":187,"column":1,"offset":3774},"end":{"line":191,"column":4,"offset":3890},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":194,"column":1,"offset":3893},"end":{"line":194,"column":31,"offset":3923},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":194,"column":31,"offset":3923}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"production-grade-typescript-course\"\n    }}>{`Production-Grade TypeScript Course`}</h1>\n    <p>{`This course goes over some of the features from early on as opposed to the entire course.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/production-typescript/\"\n        }}>{`Production-Grade TypeScript Course`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"optional-chaining--nullish-coalescing\"\n    }}>{`Optional Chaining & Nullish Coalescing`}</h2>\n    <p>{`Optional chaining which is used for early termination from object access. Note that this adds complexity to managin the code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const value = obj.levelOneKey?.value // levelOneKey may not be defined\n`}</code></pre>\n    <p>{`Nullish Coalescing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class Foo {\n  name;\n\n  constructor(rawName?: string) {\n    this.name = rawName ?? '(no name)'\n  }\n\n  log() {\n    console.log(this.name)\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"true-privacy\"\n    }}>{`True Privacy`}</h2>\n    <p>{`If you had `}<inlineCode parentName=\"p\">{`private name: string`}</inlineCode>{` in a class and someone runs a debugger, previously the variable would `}<strong parentName=\"p\">{`still be visible`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class Foo {\n  #name;\n\n  constructor(rawName?: string) {\n    this.#name = rawName ?? '(no name)'\n  }\n\n  log() {\n    console.log(this.#name)\n  }\n}\n`}</code></pre>\n    <p>{`At runtime, it won't be there anymore, whereas with `}<inlineCode parentName=\"p\">{`private`}</inlineCode>{` it would be!`}</p>\n    <h2 {...{\n      \"id\": \"tuple-types--recursive-type-aliases\"\n    }}>{`Tuple Types & Recursive Type Aliases`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type Foo<T extends any[]> = [boolean, ...T, boolean];\n`}</code></pre>\n    <p>{`Before TS 4, you could only put `}<inlineCode parentName=\"p\">{`...T`}</inlineCode>{` at the end, however now you do not.`}</p>\n    <h3 {...{\n      \"id\": \"labelled-tuple-types\"\n    }}>{`Labelled tuple types`}</h3>\n    <p>{`There are also `}<strong parentName=\"p\">{`labelled tuple types`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type Address = [number, string, number, string];\n\n// take everything from address in order\nfunction printAddress(...address: Address) {\n  // omitted\n}\n\n// we get a terrible typing experience that doesn't explain much\nprintAddress()\n\n// We can fix this with labelled tuple types!\ntype Address = [streetNumber: number, city: string, state: string, postal: number]\n\n// take everything from address in order\nfunction printAddress(...address: Address) {\n  // omitted\n}\n\n// Happier experience that gives more information for the tuple!\nprintAddress()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"type-aliases-and-interfaces\"\n    }}>{`Type aliases and interfaces`}</h3>\n    <p>{`A good example of this is now it can be used for JSON.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// old way from TS v3\ntype JSONValue = string | number | boolean | null | JSONArray | JSONObject;\ninterface JSONArray extends Array<JSONValues> {}\n\n// new way from TS v4\ntype JSONValue =\n  | string\n  | number\n  | boolean\n  | null\n  | JSONValue[]\n  | {\n      [k: string]: JSONValue;\n    };\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"template-type-literals\"\n    }}>{`Template type literals`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type Corner = \\`\\${'top'|'bottom'}-\\${'left'|'right'}\\`\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ts-errors\"\n    }}>{`TS Errors`}</h2>\n    <p><inlineCode parentName=\"p\">{`@ts-expect-error`}</inlineCode>{` helps suppress an error. That being said, if there IS no error, it will throw an error!`}</p>\n    <h2 {...{\n      \"id\": \"error-handling-with-unknown\"\n    }}>{`Error Handling with Unknown`}</h2>\n    <p>{`You SHOULD use `}<inlineCode parentName=\"p\">{`unknown`}</inlineCode>{` for throwing errors now.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function somethingRisky() {}\n\ntry {\n  somethingRisky();\n  // in case it removes itself, this should be \\`err: unknown\\`\n} catch (err) {\n  // DON'T forces us to handle the error type\n  console.log(err.stack);\n  // DO\n  if (err instanceof Error) {\n    console.log(err.stack);\n  } else {\n    console.log(err);\n  }\n}\n`}</code></pre>\n    <p>{`We can also add a function `}<strong parentName=\"p\">{`which should only be used for testing`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// before TS 3.7\nfunction isError(err: any): err is Error {\n  return err instanceof Error\n}\n\n// after - described as something that should be more in a test suite\nfunction assertIsError(err:any): asserts err is Error {\n  if (!(err instanceof Error)) throw new Error(\\`Not an error: \\${err}\\`)\n}\n\nfunction somethingRisky() {}\n\ntry {\n  somethingRisky();\n  // in case it removes itself, this should be \\`err: unknown\\`\n} catch (err) {\n  assertIsError(err)\n  console.log(err.stack);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"declaration-files--type-only-imports\"\n    }}>{`Declaration Files & Type-only imports`}</h2>\n    <p>{`You can now generate type files for JS.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"checkJs\": true\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"type-only-import\"\n    }}>{`type-only import`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import type { useAsyncDataEffect } from 'path/to/module'\n\n// now just uses their type \\`useAsyncDataEffect\\`\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}