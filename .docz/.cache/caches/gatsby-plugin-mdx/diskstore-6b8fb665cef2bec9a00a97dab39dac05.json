{"expireTime":9007200848610909000,"key":"gatsby-plugin-mdx-entire-payload-a4232a483cf5c53e624bbb7df1f67e32-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Go Language Overview","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":23,"offset":188},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":23,"offset":188},"indent":[]}},{"type":"jsx","value":"<!-- TOC -->","position":{"start":{"line":9,"column":1,"offset":190},"end":{"line":9,"column":13,"offset":202},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#go-language-overview","children":[{"type":"text","value":"Go Language Overview","position":{"start":{"line":11,"column":6,"offset":209},"end":{"line":11,"column":26,"offset":229},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":208},"end":{"line":11,"column":50,"offset":253},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":208},"end":{"line":11,"column":50,"offset":253},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#types","children":[{"type":"text","value":"Types","position":{"start":{"line":12,"column":10,"offset":263},"end":{"line":12,"column":15,"offset":268},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":262},"end":{"line":12,"column":24,"offset":277},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":262},"end":{"line":12,"column":24,"offset":277},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":258},"end":{"line":12,"column":24,"offset":277},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#packages---public-and-private-variables","children":[{"type":"text","value":"Packages - public and private variables","position":{"start":{"line":13,"column":10,"offset":287},"end":{"line":13,"column":49,"offset":326},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":286},"end":{"line":13,"column":92,"offset":369},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":286},"end":{"line":13,"column":92,"offset":369},"indent":[]}}],"position":{"start":{"line":13,"column":5,"offset":282},"end":{"line":13,"column":92,"offset":369},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#variables","children":[{"type":"text","value":"Variables","position":{"start":{"line":14,"column":10,"offset":379},"end":{"line":14,"column":19,"offset":388},"indent":[]}}],"position":{"start":{"line":14,"column":9,"offset":378},"end":{"line":14,"column":32,"offset":401},"indent":[]}}],"position":{"start":{"line":14,"column":9,"offset":378},"end":{"line":14,"column":32,"offset":401},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#variable-declarations-and-assigning","children":[{"type":"text","value":"Variable declarations and assigning","position":{"start":{"line":15,"column":14,"offset":415},"end":{"line":15,"column":49,"offset":450},"indent":[]}}],"position":{"start":{"line":15,"column":13,"offset":414},"end":{"line":15,"column":88,"offset":489},"indent":[]}}],"position":{"start":{"line":15,"column":13,"offset":414},"end":{"line":15,"column":88,"offset":489},"indent":[]}}],"position":{"start":{"line":15,"column":9,"offset":410},"end":{"line":15,"column":88,"offset":489},"indent":[]}}],"position":{"start":{"line":15,"column":9,"offset":410},"end":{"line":15,"column":88,"offset":489},"indent":[]}}],"position":{"start":{"line":14,"column":5,"offset":374},"end":{"line":15,"column":88,"offset":489},"indent":[5]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#functions","children":[{"type":"text","value":"Functions","position":{"start":{"line":16,"column":10,"offset":499},"end":{"line":16,"column":19,"offset":508},"indent":[]}}],"position":{"start":{"line":16,"column":9,"offset":498},"end":{"line":16,"column":32,"offset":521},"indent":[]}}],"position":{"start":{"line":16,"column":9,"offset":498},"end":{"line":16,"column":32,"offset":521},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#multiple-return-values","children":[{"type":"text","value":"Multiple return values","position":{"start":{"line":17,"column":14,"offset":535},"end":{"line":17,"column":36,"offset":557},"indent":[]}}],"position":{"start":{"line":17,"column":13,"offset":534},"end":{"line":17,"column":62,"offset":583},"indent":[]}}],"position":{"start":{"line":17,"column":13,"offset":534},"end":{"line":17,"column":62,"offset":583},"indent":[]}}],"position":{"start":{"line":17,"column":9,"offset":530},"end":{"line":17,"column":62,"offset":583},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#the-go-formatting-tool","children":[{"type":"text","value":"The Go Formatting Tool","position":{"start":{"line":18,"column":14,"offset":597},"end":{"line":18,"column":36,"offset":619},"indent":[]}}],"position":{"start":{"line":18,"column":13,"offset":596},"end":{"line":18,"column":62,"offset":645},"indent":[]}}],"position":{"start":{"line":18,"column":13,"offset":596},"end":{"line":18,"column":62,"offset":645},"indent":[]}}],"position":{"start":{"line":18,"column":9,"offset":592},"end":{"line":18,"column":62,"offset":645},"indent":[]}}],"position":{"start":{"line":17,"column":9,"offset":530},"end":{"line":18,"column":62,"offset":645},"indent":[9]}}],"position":{"start":{"line":16,"column":5,"offset":494},"end":{"line":18,"column":62,"offset":645},"indent":[5,5]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#control-structures","children":[{"type":"text","value":"Control Structures","position":{"start":{"line":19,"column":10,"offset":655},"end":{"line":19,"column":28,"offset":673},"indent":[]}}],"position":{"start":{"line":19,"column":9,"offset":654},"end":{"line":19,"column":50,"offset":695},"indent":[]}}],"position":{"start":{"line":19,"column":9,"offset":654},"end":{"line":19,"column":50,"offset":695},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#for-loops","children":[{"type":"text","value":"For loops","position":{"start":{"line":20,"column":14,"offset":709},"end":{"line":20,"column":23,"offset":718},"indent":[]}}],"position":{"start":{"line":20,"column":13,"offset":708},"end":{"line":20,"column":36,"offset":731},"indent":[]}}],"position":{"start":{"line":20,"column":13,"offset":708},"end":{"line":20,"column":36,"offset":731},"indent":[]}}],"position":{"start":{"line":20,"column":9,"offset":704},"end":{"line":20,"column":36,"offset":731},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#if-statements","children":[{"type":"text","value":"If statements","position":{"start":{"line":21,"column":14,"offset":745},"end":{"line":21,"column":27,"offset":758},"indent":[]}}],"position":{"start":{"line":21,"column":13,"offset":744},"end":{"line":21,"column":44,"offset":775},"indent":[]}}],"position":{"start":{"line":21,"column":13,"offset":744},"end":{"line":21,"column":44,"offset":775},"indent":[]}}],"position":{"start":{"line":21,"column":9,"offset":740},"end":{"line":21,"column":44,"offset":775},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#switch-statement","children":[{"type":"text","value":"Switch statement","position":{"start":{"line":22,"column":14,"offset":789},"end":{"line":22,"column":30,"offset":805},"indent":[]}}],"position":{"start":{"line":22,"column":13,"offset":788},"end":{"line":22,"column":50,"offset":825},"indent":[]}}],"position":{"start":{"line":22,"column":13,"offset":788},"end":{"line":22,"column":50,"offset":825},"indent":[]}}],"position":{"start":{"line":22,"column":9,"offset":784},"end":{"line":22,"column":50,"offset":825},"indent":[]}}],"position":{"start":{"line":20,"column":9,"offset":704},"end":{"line":22,"column":50,"offset":825},"indent":[9,9]}}],"position":{"start":{"line":19,"column":5,"offset":650},"end":{"line":22,"column":50,"offset":825},"indent":[5,5,5]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#data-structures","children":[{"type":"text","value":"Data Structures","position":{"start":{"line":23,"column":10,"offset":835},"end":{"line":23,"column":25,"offset":850},"indent":[]}}],"position":{"start":{"line":23,"column":9,"offset":834},"end":{"line":23,"column":44,"offset":869},"indent":[]}}],"position":{"start":{"line":23,"column":9,"offset":834},"end":{"line":23,"column":44,"offset":869},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#pointers","children":[{"type":"text","value":"Pointers","position":{"start":{"line":24,"column":14,"offset":883},"end":{"line":24,"column":22,"offset":891},"indent":[]}}],"position":{"start":{"line":24,"column":13,"offset":882},"end":{"line":24,"column":34,"offset":903},"indent":[]}}],"position":{"start":{"line":24,"column":13,"offset":882},"end":{"line":24,"column":34,"offset":903},"indent":[]}}],"position":{"start":{"line":24,"column":9,"offset":878},"end":{"line":24,"column":34,"offset":903},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#arrays","children":[{"type":"text","value":"Arrays","position":{"start":{"line":25,"column":14,"offset":917},"end":{"line":25,"column":20,"offset":923},"indent":[]}}],"position":{"start":{"line":25,"column":13,"offset":916},"end":{"line":25,"column":30,"offset":933},"indent":[]}}],"position":{"start":{"line":25,"column":13,"offset":916},"end":{"line":25,"column":30,"offset":933},"indent":[]}}],"position":{"start":{"line":25,"column":9,"offset":912},"end":{"line":25,"column":30,"offset":933},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#slices","children":[{"type":"text","value":"Slices","position":{"start":{"line":26,"column":14,"offset":947},"end":{"line":26,"column":20,"offset":953},"indent":[]}}],"position":{"start":{"line":26,"column":13,"offset":946},"end":{"line":26,"column":30,"offset":963},"indent":[]}}],"position":{"start":{"line":26,"column":13,"offset":946},"end":{"line":26,"column":30,"offset":963},"indent":[]}}],"position":{"start":{"line":26,"column":9,"offset":942},"end":{"line":26,"column":30,"offset":963},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#maps","children":[{"type":"text","value":"Maps","position":{"start":{"line":27,"column":14,"offset":977},"end":{"line":27,"column":18,"offset":981},"indent":[]}}],"position":{"start":{"line":27,"column":13,"offset":976},"end":{"line":27,"column":26,"offset":989},"indent":[]}}],"position":{"start":{"line":27,"column":13,"offset":976},"end":{"line":27,"column":26,"offset":989},"indent":[]}}],"position":{"start":{"line":27,"column":9,"offset":972},"end":{"line":27,"column":26,"offset":989},"indent":[]}}],"position":{"start":{"line":24,"column":9,"offset":878},"end":{"line":27,"column":26,"offset":989},"indent":[9,9,9]}}],"position":{"start":{"line":23,"column":5,"offset":830},"end":{"line":27,"column":26,"offset":989},"indent":[5,5,5,5]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#custom-types","children":[{"type":"text","value":"Custom Types","position":{"start":{"line":28,"column":10,"offset":999},"end":{"line":28,"column":22,"offset":1011},"indent":[]}}],"position":{"start":{"line":28,"column":9,"offset":998},"end":{"line":28,"column":38,"offset":1027},"indent":[]}}],"position":{"start":{"line":28,"column":9,"offset":998},"end":{"line":28,"column":38,"offset":1027},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#methods","children":[{"type":"text","value":"Methods","position":{"start":{"line":29,"column":14,"offset":1041},"end":{"line":29,"column":21,"offset":1048},"indent":[]}}],"position":{"start":{"line":29,"column":13,"offset":1040},"end":{"line":29,"column":32,"offset":1059},"indent":[]}}],"position":{"start":{"line":29,"column":13,"offset":1040},"end":{"line":29,"column":32,"offset":1059},"indent":[]}}],"position":{"start":{"line":29,"column":9,"offset":1036},"end":{"line":29,"column":32,"offset":1059},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#structs","children":[{"type":"text","value":"Structs","position":{"start":{"line":30,"column":14,"offset":1073},"end":{"line":30,"column":21,"offset":1080},"indent":[]}}],"position":{"start":{"line":30,"column":13,"offset":1072},"end":{"line":30,"column":32,"offset":1091},"indent":[]}}],"position":{"start":{"line":30,"column":13,"offset":1072},"end":{"line":30,"column":32,"offset":1091},"indent":[]}}],"position":{"start":{"line":30,"column":9,"offset":1068},"end":{"line":30,"column":32,"offset":1091},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#interfaces","children":[{"type":"text","value":"Interfaces","position":{"start":{"line":31,"column":14,"offset":1105},"end":{"line":31,"column":24,"offset":1115},"indent":[]}}],"position":{"start":{"line":31,"column":13,"offset":1104},"end":{"line":31,"column":38,"offset":1129},"indent":[]}}],"position":{"start":{"line":31,"column":13,"offset":1104},"end":{"line":31,"column":38,"offset":1129},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#challenge","children":[{"type":"text","value":"Challenge","position":{"start":{"line":32,"column":18,"offset":1147},"end":{"line":32,"column":27,"offset":1156},"indent":[]}}],"position":{"start":{"line":32,"column":17,"offset":1146},"end":{"line":32,"column":40,"offset":1169},"indent":[]}}],"position":{"start":{"line":32,"column":17,"offset":1146},"end":{"line":32,"column":40,"offset":1169},"indent":[]}}],"position":{"start":{"line":32,"column":13,"offset":1142},"end":{"line":32,"column":40,"offset":1169},"indent":[]}}],"position":{"start":{"line":32,"column":13,"offset":1142},"end":{"line":32,"column":40,"offset":1169},"indent":[]}}],"position":{"start":{"line":31,"column":9,"offset":1100},"end":{"line":32,"column":40,"offset":1169},"indent":[9]}}],"position":{"start":{"line":29,"column":9,"offset":1036},"end":{"line":32,"column":40,"offset":1169},"indent":[9,9,9]}}],"position":{"start":{"line":28,"column":5,"offset":994},"end":{"line":32,"column":40,"offset":1169},"indent":[5,5,5,5]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#concurrency","children":[{"type":"text","value":"Concurrency","position":{"start":{"line":33,"column":10,"offset":1179},"end":{"line":33,"column":21,"offset":1190},"indent":[]}}],"position":{"start":{"line":33,"column":9,"offset":1178},"end":{"line":33,"column":36,"offset":1205},"indent":[]}}],"position":{"start":{"line":33,"column":9,"offset":1178},"end":{"line":33,"column":36,"offset":1205},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#channels","children":[{"type":"text","value":"Channels","position":{"start":{"line":34,"column":14,"offset":1219},"end":{"line":34,"column":22,"offset":1227},"indent":[]}}],"position":{"start":{"line":34,"column":13,"offset":1218},"end":{"line":34,"column":34,"offset":1239},"indent":[]}}],"position":{"start":{"line":34,"column":13,"offset":1218},"end":{"line":34,"column":34,"offset":1239},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#challenge-1","children":[{"type":"text","value":"Challenge","position":{"start":{"line":35,"column":18,"offset":1257},"end":{"line":35,"column":27,"offset":1266},"indent":[]}}],"position":{"start":{"line":35,"column":17,"offset":1256},"end":{"line":35,"column":42,"offset":1281},"indent":[]}}],"position":{"start":{"line":35,"column":17,"offset":1256},"end":{"line":35,"column":42,"offset":1281},"indent":[]}}],"position":{"start":{"line":35,"column":13,"offset":1252},"end":{"line":35,"column":42,"offset":1281},"indent":[]}}],"position":{"start":{"line":35,"column":13,"offset":1252},"end":{"line":35,"column":42,"offset":1281},"indent":[]}}],"position":{"start":{"line":34,"column":9,"offset":1214},"end":{"line":35,"column":42,"offset":1281},"indent":[9]}}],"position":{"start":{"line":34,"column":9,"offset":1214},"end":{"line":35,"column":42,"offset":1281},"indent":[9]}}],"position":{"start":{"line":33,"column":5,"offset":1174},"end":{"line":35,"column":42,"offset":1281},"indent":[5,5]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#summary","children":[{"type":"text","value":"Summary","position":{"start":{"line":36,"column":10,"offset":1291},"end":{"line":36,"column":17,"offset":1298},"indent":[]}}],"position":{"start":{"line":36,"column":9,"offset":1290},"end":{"line":36,"column":28,"offset":1309},"indent":[]}}],"position":{"start":{"line":36,"column":9,"offset":1290},"end":{"line":36,"column":28,"offset":1309},"indent":[]}}],"position":{"start":{"line":36,"column":5,"offset":1286},"end":{"line":36,"column":28,"offset":1309},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":258},"end":{"line":36,"column":28,"offset":1309},"indent":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]}}],"position":{"start":{"line":11,"column":1,"offset":204},"end":{"line":36,"column":28,"offset":1309},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":11,"column":1,"offset":204},"end":{"line":36,"column":28,"offset":1309},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<!-- /TOC -->","position":{"start":{"line":38,"column":1,"offset":1311},"end":{"line":38,"column":14,"offset":1324},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Types","position":{"start":{"line":40,"column":4,"offset":1329},"end":{"line":40,"column":9,"offset":1334},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1326},"end":{"line":40,"column":9,"offset":1334},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"int, int8 etc","position":{"start":{"line":42,"column":5,"offset":1340},"end":{"line":42,"column":18,"offset":1353},"indent":[]}}],"position":{"start":{"line":42,"column":5,"offset":1340},"end":{"line":42,"column":18,"offset":1353},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1336},"end":{"line":42,"column":18,"offset":1353},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"bool","position":{"start":{"line":43,"column":5,"offset":1358},"end":{"line":43,"column":9,"offset":1362},"indent":[]}}],"position":{"start":{"line":43,"column":5,"offset":1358},"end":{"line":43,"column":9,"offset":1362},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1354},"end":{"line":43,"column":9,"offset":1362},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"string","position":{"start":{"line":44,"column":5,"offset":1367},"end":{"line":44,"column":11,"offset":1373},"indent":[]}}],"position":{"start":{"line":44,"column":5,"offset":1367},"end":{"line":44,"column":11,"offset":1373},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1363},"end":{"line":44,"column":11,"offset":1373},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"float32, float64 (64 by default)","position":{"start":{"line":45,"column":5,"offset":1378},"end":{"line":45,"column":37,"offset":1410},"indent":[]}}],"position":{"start":{"line":45,"column":5,"offset":1378},"end":{"line":45,"column":37,"offset":1410},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1374},"end":{"line":45,"column":37,"offset":1410},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1336},"end":{"line":45,"column":37,"offset":1410},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Packages - public and private variables","position":{"start":{"line":47,"column":4,"offset":1415},"end":{"line":47,"column":43,"offset":1454},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1412},"end":{"line":47,"column":43,"offset":1454},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When it comes to declaring variables, to have them available to other files when the package is imported, declare the variable with a capital letter.","position":{"start":{"line":49,"column":1,"offset":1456},"end":{"line":49,"column":150,"offset":1605},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1456},"end":{"line":49,"column":150,"offset":1605},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lowercase variables are private.","position":{"start":{"line":51,"column":1,"offset":1607},"end":{"line":51,"column":33,"offset":1639},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1607},"end":{"line":51,"column":33,"offset":1639},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Variables","position":{"start":{"line":53,"column":4,"offset":1644},"end":{"line":53,"column":13,"offset":1653},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1641},"end":{"line":53,"column":13,"offset":1653},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// outside of func\nvar greeting = \"hello\"\n\nfunc main() {\n\t// inside of func\n\tgreeting := \"Hello from Go\"\n\tfmt.Println(test)\n\tfmt.Println(greeting)\n}","position":{"start":{"line":55,"column":1,"offset":1655},"end":{"line":65,"column":4,"offset":1813},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Variable declarations and assigning","position":{"start":{"line":67,"column":5,"offset":1819},"end":{"line":67,"column":40,"offset":1854},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1815},"end":{"line":67,"column":40,"offset":1854},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func main() {\n\tvar a int\n\ta = 2\n\tvar b, c int\n\tb = 2\n\tc = 3\n\td := 5\t// same as var d = 5\n\tvar e = 10 // type is inferred\n\n\t// you'll need to use all the above variables\n\t// otherwise there will be a declaration err\n\t// thrown\n}","position":{"start":{"line":69,"column":1,"offset":1856},"end":{"line":83,"column":4,"offset":2093},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Variable names must start with a letter","position":{"start":{"line":85,"column":5,"offset":2099},"end":{"line":85,"column":44,"offset":2138},"indent":[]}}],"position":{"start":{"line":85,"column":5,"offset":2099},"end":{"line":85,"column":44,"offset":2138},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":2095},"end":{"line":85,"column":44,"offset":2138},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Uppercase variables and funcs can be used outside of the package","position":{"start":{"line":86,"column":5,"offset":2143},"end":{"line":86,"column":69,"offset":2207},"indent":[]}}],"position":{"start":{"line":86,"column":5,"offset":2143},"end":{"line":86,"column":69,"offset":2207},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":2139},"end":{"line":86,"column":69,"offset":2207},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Lowercase cannot","position":{"start":{"line":87,"column":5,"offset":2212},"end":{"line":87,"column":21,"offset":2228},"indent":[]}}],"position":{"start":{"line":87,"column":5,"offset":2212},"end":{"line":87,"column":21,"offset":2228},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2208},"end":{"line":87,"column":21,"offset":2228},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Declaring type can come after the variable name eg ","position":{"start":{"line":88,"column":5,"offset":2233},"end":{"line":88,"column":56,"offset":2284},"indent":[]}},{"type":"inlineCode","value":"var floating float64 = 1.4","position":{"start":{"line":88,"column":56,"offset":2284},"end":{"line":88,"column":84,"offset":2312},"indent":[]}}],"position":{"start":{"line":88,"column":5,"offset":2233},"end":{"line":88,"column":84,"offset":2312},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2229},"end":{"line":88,"column":84,"offset":2312},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Casting ","position":{"start":{"line":89,"column":5,"offset":2317},"end":{"line":89,"column":13,"offset":2325},"indent":[]}},{"type":"inlineCode","value":"float64(variable)","position":{"start":{"line":89,"column":13,"offset":2325},"end":{"line":89,"column":32,"offset":2344},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":2317},"end":{"line":89,"column":32,"offset":2344},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2313},"end":{"line":89,"column":32,"offset":2344},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Errors are thrown for mismatched types","position":{"start":{"line":90,"column":5,"offset":2349},"end":{"line":90,"column":43,"offset":2387},"indent":[]}}],"position":{"start":{"line":90,"column":5,"offset":2349},"end":{"line":90,"column":43,"offset":2387},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":2345},"end":{"line":90,"column":43,"offset":2387},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For scope, you are able to declare blocks by themselves - Each package is a implicit block","position":{"start":{"line":91,"column":5,"offset":2392},"end":{"line":91,"column":95,"offset":2482},"indent":[]}}],"position":{"start":{"line":91,"column":5,"offset":2392},"end":{"line":91,"column":95,"offset":2482},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2388},"end":{"line":91,"column":95,"offset":2482},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":2095},"end":{"line":91,"column":95,"offset":2482},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Functions","position":{"start":{"line":93,"column":4,"offset":2487},"end":{"line":93,"column":13,"offset":2496},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2484},"end":{"line":93,"column":13,"offset":2496},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// not available outside the package\nfunc main() {\n\tmyFunction()\n}\n\nfunc myFunction() {\n\tfmt.Println(\"Running myFunction\")\n}\n\nfunc MyPublicFunction() {\n\tfmt.Println(\"Running MyPublicFunction\")\n}","position":{"start":{"line":95,"column":1,"offset":2498},"end":{"line":108,"column":4,"offset":2702},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can enforce type safety for parameters by adding the type expected to the function ","position":{"start":{"line":110,"column":1,"offset":2704},"end":{"line":110,"column":88,"offset":2791},"indent":[]}},{"type":"inlineCode","value":"func myFunc(test string, number int) {}","position":{"start":{"line":110,"column":88,"offset":2791},"end":{"line":110,"column":129,"offset":2832},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":2704},"end":{"line":110,"column":129,"offset":2832},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Go doesn't allow default parameter values","position":{"start":{"line":112,"column":5,"offset":2838},"end":{"line":112,"column":46,"offset":2879},"indent":[]}}],"position":{"start":{"line":112,"column":5,"offset":2838},"end":{"line":112,"column":46,"offset":2879},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":2834},"end":{"line":112,"column":46,"offset":2879},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No named values","position":{"start":{"line":113,"column":5,"offset":2884},"end":{"line":113,"column":20,"offset":2899},"indent":[]}}],"position":{"start":{"line":113,"column":5,"offset":2884},"end":{"line":113,"column":20,"offset":2899},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":2880},"end":{"line":113,"column":20,"offset":2899},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No method overloading","position":{"start":{"line":114,"column":5,"offset":2904},"end":{"line":114,"column":26,"offset":2925},"indent":[]}}],"position":{"start":{"line":114,"column":5,"offset":2904},"end":{"line":114,"column":26,"offset":2925},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":2900},"end":{"line":114,"column":26,"offset":2925},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":2834},"end":{"line":114,"column":26,"offset":2925},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For returning a certain value, you can enfore this by the following","position":{"start":{"line":116,"column":1,"offset":2927},"end":{"line":116,"column":68,"offset":2994},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":2927},"end":{"line":116,"column":68,"offset":2994},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"func myFunc(test string, number int) int {}\nfunc myFuncTwo(numberOne int, number int) (sum int) {\n\treturn number + numberOne;\n}\nfunc myFuncThree(number int) (difference int) {\n\tdifference = number + 4;\n}","position":{"start":{"line":118,"column":1,"offset":2996},"end":{"line":126,"column":4,"offset":3207},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Multiple return values","position":{"start":{"line":128,"column":5,"offset":3213},"end":{"line":128,"column":27,"offset":3235},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":3209},"end":{"line":128,"column":27,"offset":3235},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n\t\"fmt\",\n\t\"math\",\n\t\"log\"\n)\n\nfunc main() {\n\tsquareRoot, err := squareRoot(-1)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(squareRoot)\n}\n\nfunc squareRoot(x float64) (float64, error) {\n\tx < 0 {\n\t\treturn 0, fmt.Errorf(\"Can't take a negative number\")\n\t}\n\treturn math.Sqrt(x), nil\n}","position":{"start":{"line":130,"column":1,"offset":3237},"end":{"line":153,"column":4,"offset":3551},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As for errors","position":{"start":{"line":155,"column":1,"offset":3553},"end":{"line":155,"column":14,"offset":3566},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":3553},"end":{"line":155,"column":14,"offset":3566},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n\t\"fmt\",\n\t\"os\"\n)\n\n// panic errors - no good!\nfunc mainBad() {\n\tfileInfo, _ := os.Stat(\"existent.txt\")\n\tfmt.Println(fileInfo.Size())\n\tfileInfo, _ := os.Stat(\"nonexistent.txt\")\n\tfmt.Println(fileInfo.Size())\n}\n\n// instead, do this\nfunc main() {\n\tfileInfo, error := os.Stat(\"existent.txt\")\n\tif error != nil {\n\t\tfmt.Println(error)\n\t} else {\n\t\tfmt.Println(fileInfo.Size())\n\t}\n\tfileInfo, error := os.Stat(\"nonexistent.txt\")\n\tif error != nil {\n\t\tfmt.Println(error)\n\t} else {\n\t\tfmt.Println(fileInfo.Size())\n\t}\n}","position":{"start":{"line":157,"column":1,"offset":3568},"end":{"line":188,"column":4,"offset":4102},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"The Go Formatting Tool","position":{"start":{"line":190,"column":5,"offset":4108},"end":{"line":190,"column":27,"offset":4130},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":4104},"end":{"line":190,"column":27,"offset":4130},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"go fmt <filename>","position":{"start":{"line":192,"column":1,"offset":4132},"end":{"line":192,"column":20,"offset":4151},"indent":[]}},{"type":"text","value":" will update the file itself and it will nicely format it.","position":{"start":{"line":192,"column":20,"offset":4151},"end":{"line":192,"column":78,"offset":4209},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":4132},"end":{"line":192,"column":78,"offset":4209},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Control Structures","position":{"start":{"line":194,"column":4,"offset":4214},"end":{"line":194,"column":22,"offset":4232},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":4211},"end":{"line":194,"column":22,"offset":4232},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"For loops","position":{"start":{"line":196,"column":5,"offset":4238},"end":{"line":196,"column":14,"offset":4247},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":4234},"end":{"line":196,"column":14,"offset":4247},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"for i := 1; i <= 3; i++ {\n\tfmt.Println(i)\n}","position":{"start":{"line":198,"column":1,"offset":4249},"end":{"line":202,"column":4,"offset":4302},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"If statements","position":{"start":{"line":204,"column":5,"offset":4308},"end":{"line":204,"column":18,"offset":4321},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":4304},"end":{"line":204,"column":18,"offset":4321},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"if true {\n\tfmt.Println(\"You'll come here\")\n} else if false {\n\t// ...\n} else {\n\t// ...\n}","position":{"start":{"line":206,"column":1,"offset":4323},"end":{"line":214,"column":4,"offset":4420},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Switch statement","position":{"start":{"line":216,"column":5,"offset":4426},"end":{"line":216,"column":21,"offset":4442},"indent":[]}}],"position":{"start":{"line":216,"column":1,"offset":4422},"end":{"line":216,"column":21,"offset":4442},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Switch statements look like they do not need a break.","position":{"start":{"line":218,"column":1,"offset":4444},"end":{"line":218,"column":54,"offset":4497},"indent":[]}}],"position":{"start":{"line":218,"column":1,"offset":4444},"end":{"line":218,"column":54,"offset":4497},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"switch doorNumber {\n\tcase 1:\n\t\tfmt.Println(\"new car \")\n\tcase 2:\n\t\t// ...\n\tdefault:\n\t\t// ...\n}","position":{"start":{"line":220,"column":1,"offset":4499},"end":{"line":229,"column":4,"offset":4602},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Data Structures","position":{"start":{"line":231,"column":4,"offset":4607},"end":{"line":231,"column":19,"offset":4622},"indent":[]}}],"position":{"start":{"line":231,"column":1,"offset":4604},"end":{"line":231,"column":19,"offset":4622},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Pointers","position":{"start":{"line":233,"column":5,"offset":4628},"end":{"line":233,"column":13,"offset":4636},"indent":[]}}],"position":{"start":{"line":233,"column":1,"offset":4624},"end":{"line":233,"column":13,"offset":4636},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can create a pointer to a variable too.","position":{"start":{"line":235,"column":1,"offset":4638},"end":{"line":235,"column":44,"offset":4681},"indent":[]}}],"position":{"start":{"line":235,"column":1,"offset":4638},"end":{"line":235,"column":44,"offset":4681},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar aValue float64 = 1.23\n\tvar aPointer *float64 = &aValue\n\tfmt.Println(\"aPointer\", aPointer)\n\tfmt.Println(\"*aPointer\", *aPointer)\n}\n\n/*\n\tPrints\n\taPointer 0xc42000a3b8\n\t*aPointer 1.23\n */","position":{"start":{"line":237,"column":1,"offset":4683},"end":{"line":254,"column":4,"offset":4923},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There are situations where the pointer is better to use than using a value directly.","position":{"start":{"line":256,"column":1,"offset":4925},"end":{"line":256,"column":85,"offset":5009},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":4925},"end":{"line":256,"column":85,"offset":5009},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Functions that need to affect their argument. Args in funcs are always passed by value. The function recieves a copy of the value.","position":{"start":{"line":258,"column":5,"offset":5015},"end":{"line":258,"column":135,"offset":5145},"indent":[]}}],"position":{"start":{"line":258,"column":5,"offset":5015},"end":{"line":258,"column":135,"offset":5145},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":5011},"end":{"line":258,"column":135,"offset":5145},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Passing a complex value to a function - example a complex struct","position":{"start":{"line":259,"column":5,"offset":5150},"end":{"line":259,"column":69,"offset":5214},"indent":[]}}],"position":{"start":{"line":259,"column":5,"offset":5150},"end":{"line":259,"column":69,"offset":5214},"indent":[]}}],"position":{"start":{"line":259,"column":1,"offset":5146},"end":{"line":259,"column":69,"offset":5214},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":5011},"end":{"line":259,"column":69,"offset":5214},"indent":[1]}},{"type":"code","lang":"go","meta":null,"value":"// Example\npackage main\n\nimport \"fmt\"\n\n// Not using the pointer\nfunc main() {\n\tnum := 8.2\n\thalve(num)\n\tfmt.Println(num)\n}\n\nfunc halve(number float64) {\n\tnumber = number / 2;\n\tfmt.Println(number)\n}\n\n// Using the pointer\npackage main\n\nimport \"fmt\"\n\n// Not using the pointer\nfunc main() {\n\tnum := 8.2\n\thalve(&num)\n\tfmt.Println(num)\n}\n\nfunc halve(number *float64) {\n\t*number = *number / 2\n\tfmt.Println(*number)\n}","position":{"start":{"line":261,"column":1,"offset":5216},"end":{"line":295,"column":4,"offset":5634},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Arrays","position":{"start":{"line":297,"column":5,"offset":5640},"end":{"line":297,"column":11,"offset":5646},"indent":[]}}],"position":{"start":{"line":297,"column":1,"offset":5636},"end":{"line":297,"column":11,"offset":5646},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Slices are used more commonly used than arrays, but given they are built on arrays, we'll explore arrays first.","position":{"start":{"line":299,"column":1,"offset":5648},"end":{"line":299,"column":112,"offset":5759},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":5648},"end":{"line":299,"column":112,"offset":5759},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func main() {\n\tvar months [3]string // array of three strings\n\tmonths[0] = \"Jan\"\n\tmonths[1] = \"Feb\"\n\tmonths[2] = \"Mar\"\n\tfmt.Println(months[0])\n\t// also could be months := [3]string{\"Jan\", \"Feb\", \"Mar\"}\n\n\tfor i := 0; i < len(months); i++ {\n\t\tfmt.Println(months[i])\n\t}\n\n\t// another way to loop through the array\n\tfor i, month := range months {\n\t\tfmt.Println(month)\n\t}\n\n\t// omit the index\n\tfor _, month := range months {\n\t\tfmt.Println(month)\n\t}\n}","position":{"start":{"line":301,"column":1,"offset":5761},"end":{"line":324,"column":4,"offset":6214},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The main limitation arrays are used are because you cannot assign values to an array larger than it's initial allocated memory size.","position":{"start":{"line":326,"column":1,"offset":6216},"end":{"line":326,"column":133,"offset":6348},"indent":[]}}],"position":{"start":{"line":326,"column":1,"offset":6216},"end":{"line":326,"column":133,"offset":6348},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Slices","position":{"start":{"line":328,"column":5,"offset":6354},"end":{"line":328,"column":11,"offset":6360},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":6350},"end":{"line":328,"column":11,"offset":6360},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Slices also represent an array. Slices are easier to work with.","position":{"start":{"line":330,"column":1,"offset":6362},"end":{"line":330,"column":64,"offset":6425},"indent":[]}}],"position":{"start":{"line":330,"column":1,"offset":6362},"end":{"line":330,"column":64,"offset":6425},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While ","position":{"start":{"line":332,"column":1,"offset":6427},"end":{"line":332,"column":7,"offset":6433},"indent":[]}},{"type":"inlineCode","value":"len","position":{"start":{"line":332,"column":7,"offset":6433},"end":{"line":332,"column":12,"offset":6438},"indent":[]}},{"type":"text","value":" shows the length, ","position":{"start":{"line":332,"column":12,"offset":6438},"end":{"line":332,"column":31,"offset":6457},"indent":[]}},{"type":"inlineCode","value":"cap","position":{"start":{"line":332,"column":31,"offset":6457},"end":{"line":332,"column":36,"offset":6462},"indent":[]}},{"type":"text","value":" shows the capacity of how it can grow.","position":{"start":{"line":332,"column":36,"offset":6462},"end":{"line":332,"column":75,"offset":6501},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":6427},"end":{"line":332,"column":75,"offset":6501},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"append","position":{"start":{"line":334,"column":1,"offset":6503},"end":{"line":334,"column":9,"offset":6511},"indent":[]}},{"type":"text","value":" can be used to append to a slice.","position":{"start":{"line":334,"column":9,"offset":6511},"end":{"line":334,"column":43,"offset":6545},"indent":[]}}],"position":{"start":{"line":334,"column":1,"offset":6503},"end":{"line":334,"column":43,"offset":6545},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport \"fmt\"\n\nfunc main() {\n\ta := [5]int{0,1,2,3,4}\n\ts1 := a[0:3]\n\ts2 := a[2:5]\n\tfmt.Println(a, s1, s2)\n\t// prints [0 1 2 3 4] [0 1 2] [2 3 4]\n\ta[2] = 88\n\tfmt.Println(a, s1, s2)\n\t// prints [0 1 88 3 4] [0 1 88] [2 3 88]\n\ts1 = s1[0:4]\n\tfmt.Println(a, s1, s2)\n\t// prints [0 1 88 3 4] [0 1 88 3] [88 3 4]\n\ts2 = s2[0:4] // throws an error\n\ts2 = append(s2, 5) // returns a new slice\n\tfmt.Println(a, s1, s2)\n\t// prints [0 1 88 3 4] [0 1 88 3] [88 3 4 5]\n\ts2[0] = 999\n\t// prints [0 1 88 3 4] [0 1 88 3] [999 3 4 5]\n\n\t// Declaring an array on its own\n\ts3 := []int{1, 2, 3}\n\tfmt.Println(s3) // prints [1 2 3]\n\ts3 = append(s3, 4, 5)\n\tfmt.Println(s3) // [1 2 3 4 5]\n}","position":{"start":{"line":336,"column":1,"offset":6547},"end":{"line":366,"column":4,"offset":7227},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Maps","position":{"start":{"line":368,"column":5,"offset":7233},"end":{"line":368,"column":9,"offset":7237},"indent":[]}}],"position":{"start":{"line":368,"column":1,"offset":7229},"end":{"line":368,"column":9,"offset":7237},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Slices are good for storing collections, but the only way to get elements back is by the index.","position":{"start":{"line":370,"column":1,"offset":7239},"end":{"line":370,"column":96,"offset":7334},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":7239},"end":{"line":370,"column":96,"offset":7334},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While in most collections you have dictionaries, hashes, hash maps, Go refers to these data structures as ","position":{"start":{"line":372,"column":1,"offset":7336},"end":{"line":372,"column":107,"offset":7442},"indent":[]}},{"type":"inlineCode","value":"Maps","position":{"start":{"line":372,"column":107,"offset":7442},"end":{"line":372,"column":113,"offset":7448},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":372,"column":113,"offset":7448},"end":{"line":372,"column":114,"offset":7449},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":7336},"end":{"line":372,"column":114,"offset":7449},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func main() {\n\tages := map[string]float64{}\n\tages[\"Alice\"] = 12\n\tages[\"Bob\"] = 9\n\tfmt.Println(ages) // prints map[Alice:12 Bob:9]\n}","position":{"start":{"line":374,"column":1,"offset":7451},"end":{"line":381,"column":4,"offset":7592},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Similar to arrays or slices, we can use a literal to prefill the values.","position":{"start":{"line":383,"column":1,"offset":7594},"end":{"line":383,"column":73,"offset":7666},"indent":[]}}],"position":{"start":{"line":383,"column":1,"offset":7594},"end":{"line":383,"column":73,"offset":7666},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func main() {\n\tages := map[string]float64{\"Alice\":12, \"Bob\":9}\n\tfmt.Println(ages) // prints map[Alice:12 Bob:9]\n\tfor name, age := range ages {\n\t\tfmt.Println(name, age)\n\t}\n\n\tfor _, age := range ages {\n\t\tfmt.Println(age)\n\t}\n\n\tfor name := range ages {\n\t\tfmt.Println(name)\n\t}\n}","position":{"start":{"line":385,"column":1,"offset":7668},"end":{"line":401,"column":4,"offset":7951},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Custom Types","position":{"start":{"line":403,"column":4,"offset":7956},"end":{"line":403,"column":16,"offset":7968},"indent":[]}}],"position":{"start":{"line":403,"column":1,"offset":7953},"end":{"line":403,"column":16,"offset":7968},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can use the ","position":{"start":{"line":405,"column":1,"offset":7970},"end":{"line":405,"column":16,"offset":7985},"indent":[]}},{"type":"inlineCode","value":"type","position":{"start":{"line":405,"column":16,"offset":7985},"end":{"line":405,"column":22,"offset":7991},"indent":[]}},{"type":"text","value":" keyword to define a type and it's underlying type.","position":{"start":{"line":405,"column":22,"offset":7991},"end":{"line":405,"column":73,"offset":8042},"indent":[]}}],"position":{"start":{"line":405,"column":1,"offset":7970},"end":{"line":405,"column":73,"offset":8042},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport \"fmt\"\n\ntype Minutes int\ntype Hours int\n\nfunc main() {\n\tminutes := Minutes(37)\n\thours := Hours(37)\n\n\tfmt.Println(minutes, hours)\n}","position":{"start":{"line":407,"column":1,"offset":8044},"end":{"line":421,"column":4,"offset":8204},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can also compare custom types to their underlying type. However two custom types with the same underlying type cannot be compared.","position":{"start":{"line":423,"column":1,"offset":8206},"end":{"line":423,"column":134,"offset":8339},"indent":[]}}],"position":{"start":{"line":423,"column":1,"offset":8206},"end":{"line":423,"column":134,"offset":8339},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The more commonly used aggregate type is a Struct which is how we can base custom types on them.","position":{"start":{"line":425,"column":1,"offset":8341},"end":{"line":425,"column":97,"offset":8437},"indent":[]}}],"position":{"start":{"line":425,"column":1,"offset":8341},"end":{"line":425,"column":97,"offset":8437},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Methods","position":{"start":{"line":427,"column":5,"offset":8443},"end":{"line":427,"column":12,"offset":8450},"indent":[]}}],"position":{"start":{"line":427,"column":1,"offset":8439},"end":{"line":427,"column":12,"offset":8450},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Define new behaviours for types.","position":{"start":{"line":429,"column":1,"offset":8452},"end":{"line":429,"column":33,"offset":8484},"indent":[]}}],"position":{"start":{"line":429,"column":1,"offset":8452},"end":{"line":429,"column":33,"offset":8484},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\ntype Title string\n\n// the following has an extra reciever arg t\nfunc (t Title) FixCase() string {\n\treturn strings.Title(string(t))\n}\n\nfunc main() {\n\tname := Title(\"the matrix\")\n\tfixed := name.FixCase()\n\tfmt.Println(fixed)\n}","position":{"start":{"line":431,"column":1,"offset":8486},"end":{"line":451,"column":4,"offset":8763},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n\t\"fmt\"\n)\n\ntype Hours int\n\nfunc (h *Hours) Increment() Hours {\n  *h = (*h + 1) % 24\n  return *h\n}\n\nfunc main() {\n  hours := Hours(23)\n  hours.Increment()\n  fmt.Println(hours) // Prints \"0\"\n}","position":{"start":{"line":453,"column":1,"offset":8765},"end":{"line":472,"column":4,"offset":8987},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Structs","position":{"start":{"line":474,"column":5,"offset":8993},"end":{"line":474,"column":12,"offset":9000},"indent":[]}}],"position":{"start":{"line":474,"column":1,"offset":8989},"end":{"line":474,"column":12,"offset":9000},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport \"fmt\"\n\ntype Monitor struct {\n\tResolution \tstring\n\tConnector \tstring\n\tValue \t\tfloat64 // fields with a name and a type\n}\n\nfunc main() {\n\tmonitor := Monitor{}\n\tmonitor.Resolution = \"1080p\"\n\tmonitor.Connector = \"HDMI\"\n\tmonitor.Value = 249.99\n\tfmt.Println(monitor.Resolution, monitor.Connector, monitor.Value)\n\n\t// could also go monitor := Monitor{\"1080p\", \"HDMI\", 249.99}\n}","position":{"start":{"line":476,"column":1,"offset":9002},"end":{"line":496,"column":4,"offset":9403},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you init and allocate a struct, it will initialise with some default values.","position":{"start":{"line":498,"column":1,"offset":9405},"end":{"line":498,"column":80,"offset":9484},"indent":[]}}],"position":{"start":{"line":498,"column":1,"offset":9405},"end":{"line":498,"column":80,"offset":9484},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can also add a \"exported\" get and set method to help enforce the concept of private variables.","position":{"start":{"line":500,"column":1,"offset":9486},"end":{"line":500,"column":99,"offset":9584},"indent":[]}}],"position":{"start":{"line":500,"column":1,"offset":9486},"end":{"line":500,"column":99,"offset":9584},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n\t\"fmt\"\n)\n\ntype Clock struct {\n  Hours int\n  Minutes int\n}\n\n// DEFINE A \"Noon\" FUNCTION HERE\nfunc Noon(hours int, min int) Clock {\n  c := Clock{}\n  c.Hours = 12\n  c.Minutes = 0\n\n  return c\n}\n\nfunc main() {\n  c := Noon(12, 10)\n  fmt.Println(c)\n}","position":{"start":{"line":502,"column":1,"offset":9586},"end":{"line":527,"column":4,"offset":9862},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Interfaces","position":{"start":{"line":529,"column":5,"offset":9868},"end":{"line":529,"column":15,"offset":9878},"indent":[]}}],"position":{"start":{"line":529,"column":1,"offset":9864},"end":{"line":529,"column":15,"offset":9878},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When you have a concrete type, you know what it is and what it can do. An interface is defining what something is but not what it can do.","position":{"start":{"line":531,"column":1,"offset":9880},"end":{"line":531,"column":138,"offset":10017},"indent":[]}}],"position":{"start":{"line":531,"column":1,"offset":9880},"end":{"line":531,"column":138,"offset":10017},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"type FourLegged interface {\n\tWalk()\n\tSit()\n}","position":{"start":{"line":533,"column":1,"offset":10019},"end":{"line":538,"column":4,"offset":10073},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Implementation in practise","position":{"start":{"line":540,"column":1,"offset":10075},"end":{"line":540,"column":27,"offset":10101},"indent":[]}}],"position":{"start":{"line":540,"column":1,"offset":10075},"end":{"line":540,"column":27,"offset":10101},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"type Part interface {\n\tSpecs() string\n\tPrice() string\n}\n\nfunc Summary(part Part) string {\n\treturn part.Specs() + \"/n\" + part.Price()\n}","position":{"start":{"line":542,"column":1,"offset":10103},"end":{"line":551,"column":4,"offset":10247},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we create slice with that type as well, then we can use that slice for anything that satisfies the interface. This could allow us to slice, append to the slice and use the range to iterate through.","position":{"start":{"line":553,"column":1,"offset":10249},"end":{"line":553,"column":201,"offset":10449},"indent":[]}}],"position":{"start":{"line":553,"column":1,"offset":10249},"end":{"line":553,"column":201,"offset":10449},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Challenge","position":{"start":{"line":555,"column":6,"offset":10456},"end":{"line":555,"column":15,"offset":10465},"indent":[]}}],"position":{"start":{"line":555,"column":1,"offset":10451},"end":{"line":555,"column":15,"offset":10465},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// calendar.go\npackage calendar\n\nimport \"fmt\"\n\ntype Calendar struct {\n  Year int\n  Month int\n  Day int\n}\n\nfunc (c Calendar) Display() {\n  fmt.Printf(\"%04d-%02d-%02d\", c.Year, c.Month, c.Day)\n}\n\n// clock.go\npackage clock\n\nimport \"fmt\"\n\ntype Clock struct {\n\tHours int\n\tMinutes int\n}\n\nfunc (c Clock) Display() {\n\tfmt.Printf(\"%02d:%02d\", c.Hours, c.Minutes)\n}\n\n// schedule.go\npackage schedule\n\n// DECLARE A Displayable INTERFACE HERE\ntype Displayable interface {\n\tDisplay()\n}\n// DECLARE A Print FUNCTION HERE\nfunc Print(display Displayable) {\n\tdisplay.Display()\n}","position":{"start":{"line":557,"column":1,"offset":10467},"end":{"line":598,"column":4,"offset":11036},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Concurrency","position":{"start":{"line":600,"column":4,"offset":11041},"end":{"line":600,"column":15,"offset":11052},"indent":[]}}],"position":{"start":{"line":600,"column":1,"offset":11038},"end":{"line":600,"column":15,"offset":11052},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc longTask() {\n\tfmt.Println(\"Starting long task\")\n\ttime.Sleep(3 * time.Second)\n\tfmt.Println(\"Long task finished\")\n}\n\nfunc main() {\n\tgo longTask()\n\tgo longTask()\n\tgo longTask()\n\ttime.Sleep(4 * time.Second) // just for show - we can use channels instead\n}","position":{"start":{"line":602,"column":1,"offset":11054},"end":{"line":622,"column":4,"offset":11361},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Channels","position":{"start":{"line":624,"column":5,"offset":11367},"end":{"line":624,"column":13,"offset":11375},"indent":[]}}],"position":{"start":{"line":624,"column":1,"offset":11363},"end":{"line":624,"column":13,"offset":11375},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can't simply try to use the time.Sleep with the keyword go given that the go routine doesn't give a value right away.","position":{"start":{"line":626,"column":1,"offset":11377},"end":{"line":626,"column":121,"offset":11497},"indent":[]}}],"position":{"start":{"line":626,"column":1,"offset":11377},"end":{"line":626,"column":121,"offset":11497},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)\n\nfunc longTask() int {\n    delay := rand.Intn(5)\n    fmt.Println(\"Starting long task\")\n    time.Sleep(time.Duration(delay) * time.Second)\n    fmt.Println(\"Long task finished\")\n    return delay\n}\n\nfunc main() {\n    rand.Seed(time.Now().Unix())\n    time := longTask()\n    fmt.Println(\"Took\", time, \"seconds\")\n}","position":{"start":{"line":628,"column":1,"offset":11499},"end":{"line":650,"column":4,"offset":11879},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"What we can do instead is use a channel to pass a message back to the main go routine.","position":{"start":{"line":652,"column":1,"offset":11881},"end":{"line":652,"column":87,"offset":11967},"indent":[]}}],"position":{"start":{"line":652,"column":1,"offset":11881},"end":{"line":652,"column":87,"offset":11967},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)\n\n// notice we get rid of the int return value\nfunc longTask(channel chan int) {\n    delay := rand.Intn(5)\n    fmt.Println(\"Starting long task\")\n    time.Sleep(time.Duration(delay) * time.Second)\n    fmt.Println(\"Long task finished\")\n    channel <- delay\n}\n\nfunc main() {\n    rand.Seed(time.Now().Unix())\n    channel := make(chan int)\n    for i := 1; i <= 3; i++ {\n   \t\tgo longTask(channel)\n\t}\n   \t// uses the arrow prefix\n   \tfor i := 1; i <= 3; i++ {\n    \tfmt.Println(\"Took\", <-channel, \"seconds\")\n\t}\n}","position":{"start":{"line":654,"column":1,"offset":11969},"end":{"line":683,"column":4,"offset":12544},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Challenge","position":{"start":{"line":685,"column":6,"offset":12551},"end":{"line":685,"column":15,"offset":12560},"indent":[]}}],"position":{"start":{"line":685,"column":1,"offset":12546},"end":{"line":685,"column":15,"offset":12560},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"package channels\n\nfunc readFromChannel() string {\n\t// CREATE A CHANNEL FOR string VALUES HERE\n\tchannel := make(chan string)\n\t// HERE, CALL writeToChannel AS A GOROUTINE, AND PASS IT YOUR CHANNEL\n\tgo writeToChannel(channel)\n\t// HERE, READ A STRING FROM YOUR CHANNEL AND RETURN IT\n\treturn <-channel\n}","position":{"start":{"line":687,"column":1,"offset":12562},"end":{"line":698,"column":4,"offset":12868},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Summary","position":{"start":{"line":700,"column":4,"offset":12873},"end":{"line":700,"column":11,"offset":12880},"indent":[]}}],"position":{"start":{"line":700,"column":1,"offset":12870},"end":{"line":700,"column":11,"offset":12880},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the course, we've looked at:","position":{"start":{"line":702,"column":1,"offset":12882},"end":{"line":702,"column":32,"offset":12913},"indent":[]}}],"position":{"start":{"line":702,"column":1,"offset":12882},"end":{"line":702,"column":32,"offset":12913},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Packages","position":{"start":{"line":704,"column":5,"offset":12919},"end":{"line":704,"column":13,"offset":12927},"indent":[]}}],"position":{"start":{"line":704,"column":5,"offset":12919},"end":{"line":704,"column":13,"offset":12927},"indent":[]}}],"position":{"start":{"line":704,"column":1,"offset":12915},"end":{"line":704,"column":13,"offset":12927},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Type","position":{"start":{"line":705,"column":5,"offset":12932},"end":{"line":705,"column":9,"offset":12936},"indent":[]}}],"position":{"start":{"line":705,"column":5,"offset":12932},"end":{"line":705,"column":9,"offset":12936},"indent":[]}}],"position":{"start":{"line":705,"column":1,"offset":12928},"end":{"line":705,"column":9,"offset":12936},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Functions","position":{"start":{"line":706,"column":5,"offset":12941},"end":{"line":706,"column":14,"offset":12950},"indent":[]}}],"position":{"start":{"line":706,"column":5,"offset":12941},"end":{"line":706,"column":14,"offset":12950},"indent":[]}}],"position":{"start":{"line":706,"column":1,"offset":12937},"end":{"line":706,"column":14,"offset":12950},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Go format tool","position":{"start":{"line":707,"column":5,"offset":12955},"end":{"line":707,"column":19,"offset":12969},"indent":[]}}],"position":{"start":{"line":707,"column":5,"offset":12955},"end":{"line":707,"column":19,"offset":12969},"indent":[]}}],"position":{"start":{"line":707,"column":1,"offset":12951},"end":{"line":707,"column":19,"offset":12969},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Arrays, Slices and Maps","position":{"start":{"line":708,"column":5,"offset":12974},"end":{"line":708,"column":28,"offset":12997},"indent":[]}}],"position":{"start":{"line":708,"column":5,"offset":12974},"end":{"line":708,"column":28,"offset":12997},"indent":[]}}],"position":{"start":{"line":708,"column":1,"offset":12970},"end":{"line":708,"column":28,"offset":12997},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Structs for field aggregation - Adding methods - Interfaces","position":{"start":{"line":709,"column":5,"offset":13002},"end":{"line":709,"column":64,"offset":13061},"indent":[]}}],"position":{"start":{"line":709,"column":5,"offset":13002},"end":{"line":709,"column":64,"offset":13061},"indent":[]}}],"position":{"start":{"line":709,"column":1,"offset":12998},"end":{"line":709,"column":64,"offset":13061},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Using Go routines and Channels","position":{"start":{"line":710,"column":5,"offset":13066},"end":{"line":710,"column":35,"offset":13096},"indent":[]}}],"position":{"start":{"line":710,"column":5,"offset":13066},"end":{"line":710,"column":35,"offset":13096},"indent":[]}}],"position":{"start":{"line":710,"column":1,"offset":13062},"end":{"line":710,"column":35,"offset":13096},"indent":[]}}],"position":{"start":{"line":704,"column":1,"offset":12915},"end":{"line":710,"column":35,"offset":13096},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":713,"column":1,"offset":13099},"end":{"line":713,"column":31,"offset":13129},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":713,"column":31,"offset":13129}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"go-language-overview\"\n    }}>{`Go Language Overview`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#go-language-overview\"\n        }}>{`Go Language Overview`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#types\"\n            }}>{`Types`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#packages---public-and-private-variables\"\n            }}>{`Packages - public and private variables`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#variables\"\n            }}>{`Variables`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#variable-declarations-and-assigning\"\n                }}>{`Variable declarations and assigning`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#functions\"\n            }}>{`Functions`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#multiple-return-values\"\n                }}>{`Multiple return values`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#the-go-formatting-tool\"\n                }}>{`The Go Formatting Tool`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#control-structures\"\n            }}>{`Control Structures`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#for-loops\"\n                }}>{`For loops`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#if-statements\"\n                }}>{`If statements`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#switch-statement\"\n                }}>{`Switch statement`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#data-structures\"\n            }}>{`Data Structures`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#pointers\"\n                }}>{`Pointers`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#arrays\"\n                }}>{`Arrays`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#slices\"\n                }}>{`Slices`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#maps\"\n                }}>{`Maps`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#custom-types\"\n            }}>{`Custom Types`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#methods\"\n                }}>{`Methods`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#structs\"\n                }}>{`Structs`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#interfaces\"\n                }}>{`Interfaces`}</a><ul parentName=\"li\">\n                  <li parentName=\"ul\"><a parentName=\"li\" {...{\n                      \"href\": \"#challenge\"\n                    }}>{`Challenge`}</a></li>\n                </ul></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#concurrency\"\n            }}>{`Concurrency`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#channels\"\n                }}>{`Channels`}</a><ul parentName=\"li\">\n                  <li parentName=\"ul\"><a parentName=\"li\" {...{\n                      \"href\": \"#challenge-1\"\n                    }}>{`Challenge`}</a></li>\n                </ul></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#summary\"\n            }}>{`Summary`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`int, int8 etc`}</li>\n      <li parentName=\"ul\">{`bool`}</li>\n      <li parentName=\"ul\">{`string`}</li>\n      <li parentName=\"ul\">{`float32, float64 (64 by default)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"packages---public-and-private-variables\"\n    }}>{`Packages - public and private variables`}</h2>\n    <p>{`When it comes to declaring variables, to have them available to other files when the package is imported, declare the variable with a capital letter.`}</p>\n    <p>{`Lowercase variables are private.`}</p>\n    <h2 {...{\n      \"id\": \"variables\"\n    }}>{`Variables`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// outside of func\nvar greeting = \"hello\"\n\nfunc main() {\n    // inside of func\n    greeting := \"Hello from Go\"\n    fmt.Println(test)\n    fmt.Println(greeting)\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"variable-declarations-and-assigning\"\n    }}>{`Variable declarations and assigning`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func main() {\n    var a int\n    a = 2\n    var b, c int\n    b = 2\n    c = 3\n    d := 5  // same as var d = 5\n    var e = 10 // type is inferred\n\n    // you'll need to use all the above variables\n    // otherwise there will be a declaration err\n    // thrown\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Variable names must start with a letter`}</li>\n      <li parentName=\"ul\">{`Uppercase variables and funcs can be used outside of the package`}</li>\n      <li parentName=\"ul\">{`Lowercase cannot`}</li>\n      <li parentName=\"ul\">{`Declaring type can come after the variable name eg `}<inlineCode parentName=\"li\">{`var floating float64 = 1.4`}</inlineCode></li>\n      <li parentName=\"ul\">{`Casting `}<inlineCode parentName=\"li\">{`float64(variable)`}</inlineCode></li>\n      <li parentName=\"ul\">{`Errors are thrown for mismatched types`}</li>\n      <li parentName=\"ul\">{`For scope, you are able to declare blocks by themselves - Each package is a implicit block`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// not available outside the package\nfunc main() {\n    myFunction()\n}\n\nfunc myFunction() {\n    fmt.Println(\"Running myFunction\")\n}\n\nfunc MyPublicFunction() {\n    fmt.Println(\"Running MyPublicFunction\")\n}\n`}</code></pre>\n    <p>{`You can enforce type safety for parameters by adding the type expected to the function `}<inlineCode parentName=\"p\">{`func myFunc(test string, number int) {}`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\">{`Go doesn't allow default parameter values`}</li>\n      <li parentName=\"ul\">{`No named values`}</li>\n      <li parentName=\"ul\">{`No method overloading`}</li>\n    </ul>\n    <p>{`For returning a certain value, you can enfore this by the following`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func myFunc(test string, number int) int {}\nfunc myFuncTwo(numberOne int, number int) (sum int) {\n    return number + numberOne;\n}\nfunc myFuncThree(number int) (difference int) {\n    difference = number + 4;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"multiple-return-values\"\n    }}>{`Multiple return values`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\",\n    \"math\",\n    \"log\"\n)\n\nfunc main() {\n    squareRoot, err := squareRoot(-1)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(squareRoot)\n}\n\nfunc squareRoot(x float64) (float64, error) {\n    x < 0 {\n        return 0, fmt.Errorf(\"Can't take a negative number\")\n    }\n    return math.Sqrt(x), nil\n}\n`}</code></pre>\n    <p>{`As for errors`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\",\n    \"os\"\n)\n\n// panic errors - no good!\nfunc mainBad() {\n    fileInfo, _ := os.Stat(\"existent.txt\")\n    fmt.Println(fileInfo.Size())\n    fileInfo, _ := os.Stat(\"nonexistent.txt\")\n    fmt.Println(fileInfo.Size())\n}\n\n// instead, do this\nfunc main() {\n    fileInfo, error := os.Stat(\"existent.txt\")\n    if error != nil {\n        fmt.Println(error)\n    } else {\n        fmt.Println(fileInfo.Size())\n    }\n    fileInfo, error := os.Stat(\"nonexistent.txt\")\n    if error != nil {\n        fmt.Println(error)\n    } else {\n        fmt.Println(fileInfo.Size())\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"the-go-formatting-tool\"\n    }}>{`The Go Formatting Tool`}</h3>\n    <p><inlineCode parentName=\"p\">{`go fmt <filename>`}</inlineCode>{` will update the file itself and it will nicely format it.`}</p>\n    <h2 {...{\n      \"id\": \"control-structures\"\n    }}>{`Control Structures`}</h2>\n    <h3 {...{\n      \"id\": \"for-loops\"\n    }}>{`For loops`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`for i := 1; i <= 3; i++ {\n    fmt.Println(i)\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"if-statements\"\n    }}>{`If statements`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`if true {\n    fmt.Println(\"You'll come here\")\n} else if false {\n    // ...\n} else {\n    // ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"switch-statement\"\n    }}>{`Switch statement`}</h3>\n    <p>{`Switch statements look like they do not need a break.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`switch doorNumber {\n    case 1:\n        fmt.Println(\"new car \")\n    case 2:\n        // ...\n    default:\n        // ...\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"data-structures\"\n    }}>{`Data Structures`}</h2>\n    <h3 {...{\n      \"id\": \"pointers\"\n    }}>{`Pointers`}</h3>\n    <p>{`You can create a pointer to a variable too.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n    var aValue float64 = 1.23\n    var aPointer *float64 = &aValue\n    fmt.Println(\"aPointer\", aPointer)\n    fmt.Println(\"*aPointer\", *aPointer)\n}\n\n/*\n    Prints\n    aPointer 0xc42000a3b8\n    *aPointer 1.23\n */\n`}</code></pre>\n    <p>{`There are situations where the pointer is better to use than using a value directly.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Functions that need to affect their argument. Args in funcs are always passed by value. The function recieves a copy of the value.`}</li>\n      <li parentName=\"ol\">{`Passing a complex value to a function - example a complex struct`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Example\npackage main\n\nimport \"fmt\"\n\n// Not using the pointer\nfunc main() {\n    num := 8.2\n    halve(num)\n    fmt.Println(num)\n}\n\nfunc halve(number float64) {\n    number = number / 2;\n    fmt.Println(number)\n}\n\n// Using the pointer\npackage main\n\nimport \"fmt\"\n\n// Not using the pointer\nfunc main() {\n    num := 8.2\n    halve(&num)\n    fmt.Println(num)\n}\n\nfunc halve(number *float64) {\n    *number = *number / 2\n    fmt.Println(*number)\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"arrays\"\n    }}>{`Arrays`}</h3>\n    <p>{`Slices are used more commonly used than arrays, but given they are built on arrays, we'll explore arrays first.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func main() {\n    var months [3]string // array of three strings\n    months[0] = \"Jan\"\n    months[1] = \"Feb\"\n    months[2] = \"Mar\"\n    fmt.Println(months[0])\n    // also could be months := [3]string{\"Jan\", \"Feb\", \"Mar\"}\n\n    for i := 0; i < len(months); i++ {\n        fmt.Println(months[i])\n    }\n\n    // another way to loop through the array\n    for i, month := range months {\n        fmt.Println(month)\n    }\n\n    // omit the index\n    for _, month := range months {\n        fmt.Println(month)\n    }\n}\n`}</code></pre>\n    <p>{`The main limitation arrays are used are because you cannot assign values to an array larger than it's initial allocated memory size.`}</p>\n    <h3 {...{\n      \"id\": \"slices\"\n    }}>{`Slices`}</h3>\n    <p>{`Slices also represent an array. Slices are easier to work with.`}</p>\n    <p>{`While `}<inlineCode parentName=\"p\">{`len`}</inlineCode>{` shows the length, `}<inlineCode parentName=\"p\">{`cap`}</inlineCode>{` shows the capacity of how it can grow.`}</p>\n    <p><inlineCode parentName=\"p\">{`append`}</inlineCode>{` can be used to append to a slice.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n    a := [5]int{0,1,2,3,4}\n    s1 := a[0:3]\n    s2 := a[2:5]\n    fmt.Println(a, s1, s2)\n    // prints [0 1 2 3 4] [0 1 2] [2 3 4]\n    a[2] = 88\n    fmt.Println(a, s1, s2)\n    // prints [0 1 88 3 4] [0 1 88] [2 3 88]\n    s1 = s1[0:4]\n    fmt.Println(a, s1, s2)\n    // prints [0 1 88 3 4] [0 1 88 3] [88 3 4]\n    s2 = s2[0:4] // throws an error\n    s2 = append(s2, 5) // returns a new slice\n    fmt.Println(a, s1, s2)\n    // prints [0 1 88 3 4] [0 1 88 3] [88 3 4 5]\n    s2[0] = 999\n    // prints [0 1 88 3 4] [0 1 88 3] [999 3 4 5]\n\n    // Declaring an array on its own\n    s3 := []int{1, 2, 3}\n    fmt.Println(s3) // prints [1 2 3]\n    s3 = append(s3, 4, 5)\n    fmt.Println(s3) // [1 2 3 4 5]\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"maps\"\n    }}>{`Maps`}</h3>\n    <p>{`Slices are good for storing collections, but the only way to get elements back is by the index.`}</p>\n    <p>{`While in most collections you have dictionaries, hashes, hash maps, Go refers to these data structures as `}<inlineCode parentName=\"p\">{`Maps`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func main() {\n    ages := map[string]float64{}\n    ages[\"Alice\"] = 12\n    ages[\"Bob\"] = 9\n    fmt.Println(ages) // prints map[Alice:12 Bob:9]\n}\n`}</code></pre>\n    <p>{`Similar to arrays or slices, we can use a literal to prefill the values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func main() {\n    ages := map[string]float64{\"Alice\":12, \"Bob\":9}\n    fmt.Println(ages) // prints map[Alice:12 Bob:9]\n    for name, age := range ages {\n        fmt.Println(name, age)\n    }\n\n    for _, age := range ages {\n        fmt.Println(age)\n    }\n\n    for name := range ages {\n        fmt.Println(name)\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-types\"\n    }}>{`Custom Types`}</h2>\n    <p>{`We can use the `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` keyword to define a type and it's underlying type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\ntype Minutes int\ntype Hours int\n\nfunc main() {\n    minutes := Minutes(37)\n    hours := Hours(37)\n\n    fmt.Println(minutes, hours)\n}\n`}</code></pre>\n    <p>{`We can also compare custom types to their underlying type. However two custom types with the same underlying type cannot be compared.`}</p>\n    <p>{`The more commonly used aggregate type is a Struct which is how we can base custom types on them.`}</p>\n    <h3 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h3>\n    <p>{`Define new behaviours for types.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\ntype Title string\n\n// the following has an extra reciever arg t\nfunc (t Title) FixCase() string {\n    return strings.Title(string(t))\n}\n\nfunc main() {\n    name := Title(\"the matrix\")\n    fixed := name.FixCase()\n    fmt.Println(fixed)\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n)\n\ntype Hours int\n\nfunc (h *Hours) Increment() Hours {\n  *h = (*h + 1) % 24\n  return *h\n}\n\nfunc main() {\n  hours := Hours(23)\n  hours.Increment()\n  fmt.Println(hours) // Prints \"0\"\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"structs\"\n    }}>{`Structs`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\ntype Monitor struct {\n    Resolution  string\n    Connector   string\n    Value       float64 // fields with a name and a type\n}\n\nfunc main() {\n    monitor := Monitor{}\n    monitor.Resolution = \"1080p\"\n    monitor.Connector = \"HDMI\"\n    monitor.Value = 249.99\n    fmt.Println(monitor.Resolution, monitor.Connector, monitor.Value)\n\n    // could also go monitor := Monitor{\"1080p\", \"HDMI\", 249.99}\n}\n`}</code></pre>\n    <p>{`If you init and allocate a struct, it will initialise with some default values.`}</p>\n    <p>{`You can also add a \"exported\" get and set method to help enforce the concept of private variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n)\n\ntype Clock struct {\n  Hours int\n  Minutes int\n}\n\n// DEFINE A \"Noon\" FUNCTION HERE\nfunc Noon(hours int, min int) Clock {\n  c := Clock{}\n  c.Hours = 12\n  c.Minutes = 0\n\n  return c\n}\n\nfunc main() {\n  c := Noon(12, 10)\n  fmt.Println(c)\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h3>\n    <p>{`When you have a concrete type, you know what it is and what it can do. An interface is defining what something is but not what it can do.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type FourLegged interface {\n    Walk()\n    Sit()\n}\n`}</code></pre>\n    <p>{`Implementation in practise`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type Part interface {\n    Specs() string\n    Price() string\n}\n\nfunc Summary(part Part) string {\n    return part.Specs() + \"/n\" + part.Price()\n}\n`}</code></pre>\n    <p>{`If we create slice with that type as well, then we can use that slice for anything that satisfies the interface. This could allow us to slice, append to the slice and use the range to iterate through.`}</p>\n    <h4 {...{\n      \"id\": \"challenge\"\n    }}>{`Challenge`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// calendar.go\npackage calendar\n\nimport \"fmt\"\n\ntype Calendar struct {\n  Year int\n  Month int\n  Day int\n}\n\nfunc (c Calendar) Display() {\n  fmt.Printf(\"%04d-%02d-%02d\", c.Year, c.Month, c.Day)\n}\n\n// clock.go\npackage clock\n\nimport \"fmt\"\n\ntype Clock struct {\n    Hours int\n    Minutes int\n}\n\nfunc (c Clock) Display() {\n    fmt.Printf(\"%02d:%02d\", c.Hours, c.Minutes)\n}\n\n// schedule.go\npackage schedule\n\n// DECLARE A Displayable INTERFACE HERE\ntype Displayable interface {\n    Display()\n}\n// DECLARE A Print FUNCTION HERE\nfunc Print(display Displayable) {\n    display.Display()\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"concurrency\"\n    }}>{`Concurrency`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc longTask() {\n    fmt.Println(\"Starting long task\")\n    time.Sleep(3 * time.Second)\n    fmt.Println(\"Long task finished\")\n}\n\nfunc main() {\n    go longTask()\n    go longTask()\n    go longTask()\n    time.Sleep(4 * time.Second) // just for show - we can use channels instead\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"channels\"\n    }}>{`Channels`}</h3>\n    <p>{`We can't simply try to use the time.Sleep with the keyword go given that the go routine doesn't give a value right away.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)\n\nfunc longTask() int {\n    delay := rand.Intn(5)\n    fmt.Println(\"Starting long task\")\n    time.Sleep(time.Duration(delay) * time.Second)\n    fmt.Println(\"Long task finished\")\n    return delay\n}\n\nfunc main() {\n    rand.Seed(time.Now().Unix())\n    time := longTask()\n    fmt.Println(\"Took\", time, \"seconds\")\n}\n`}</code></pre>\n    <p>{`What we can do instead is use a channel to pass a message back to the main go routine.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)\n\n// notice we get rid of the int return value\nfunc longTask(channel chan int) {\n    delay := rand.Intn(5)\n    fmt.Println(\"Starting long task\")\n    time.Sleep(time.Duration(delay) * time.Second)\n    fmt.Println(\"Long task finished\")\n    channel <- delay\n}\n\nfunc main() {\n    rand.Seed(time.Now().Unix())\n    channel := make(chan int)\n    for i := 1; i <= 3; i++ {\n        go longTask(channel)\n    }\n    // uses the arrow prefix\n    for i := 1; i <= 3; i++ {\n        fmt.Println(\"Took\", <-channel, \"seconds\")\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"challenge-1\"\n    }}>{`Challenge`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`package channels\n\nfunc readFromChannel() string {\n    // CREATE A CHANNEL FOR string VALUES HERE\n    channel := make(chan string)\n    // HERE, CALL writeToChannel AS A GOROUTINE, AND PASS IT YOUR CHANNEL\n    go writeToChannel(channel)\n    // HERE, READ A STRING FROM YOUR CHANNEL AND RETURN IT\n    return <-channel\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"summary\"\n    }}>{`Summary`}</h2>\n    <p>{`In the course, we've looked at:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Packages`}</li>\n      <li parentName=\"ul\">{`Type`}</li>\n      <li parentName=\"ul\">{`Functions`}</li>\n      <li parentName=\"ul\">{`Go format tool`}</li>\n      <li parentName=\"ul\">{`Arrays, Slices and Maps`}</li>\n      <li parentName=\"ul\">{`Structs for field aggregation - Adding methods - Interfaces`}</li>\n      <li parentName=\"ul\">{`Using Go routines and Channels`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}