{"expireTime":9007200867335921000,"key":"gatsby-plugin-mdx-entire-payload-7b788c6a37141714556e2d4be6d9098a-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Docker container with Nginx and Nodejs","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":41,"offset":206},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":41,"offset":206},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First create a directory for both ","position":{"start":{"line":9,"column":1,"offset":208},"end":{"line":9,"column":35,"offset":242},"indent":[]}},{"type":"inlineCode","value":"nginx","position":{"start":{"line":9,"column":35,"offset":242},"end":{"line":9,"column":42,"offset":249},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":9,"column":42,"offset":249},"end":{"line":9,"column":47,"offset":254},"indent":[]}},{"type":"inlineCode","value":"nodejs","position":{"start":{"line":9,"column":47,"offset":254},"end":{"line":9,"column":55,"offset":262},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":9,"column":55,"offset":262},"end":{"line":9,"column":56,"offset":263},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":208},"end":{"line":9,"column":56,"offset":263},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Within the Node folder, create a ","position":{"start":{"line":11,"column":1,"offset":265},"end":{"line":11,"column":34,"offset":298},"indent":[]}},{"type":"inlineCode","value":"Dockerfile","position":{"start":{"line":11,"column":34,"offset":298},"end":{"line":11,"column":46,"offset":310},"indent":[]}},{"type":"text","value":" that contains the following to expose an app running on a particular port:","position":{"start":{"line":11,"column":46,"offset":310},"end":{"line":11,"column":121,"offset":385},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":265},"end":{"line":11,"column":121,"offset":385},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"FROM mhart/alpine-node\n# Pretend to copy the node app entry\n# from current folder\nCOPY index.js .\n# Expose the port that it is running on\nEXPOSE 3000\n# Run node - chances are you want pm2 here\nCMD node index.js","position":{"start":{"line":13,"column":1,"offset":387},"end":{"line":22,"column":4,"offset":605},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then we can build with ","position":{"start":{"line":24,"column":1,"offset":607},"end":{"line":24,"column":24,"offset":630},"indent":[]}},{"type":"inlineCode","value":"docker built -t foo/node .","position":{"start":{"line":24,"column":24,"offset":630},"end":{"line":24,"column":52,"offset":658},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":607},"end":{"line":24,"column":52,"offset":658},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"After the build, run the container with port 3000 exposed using ","position":{"start":{"line":26,"column":1,"offset":660},"end":{"line":26,"column":65,"offset":724},"indent":[]}},{"type":"inlineCode","value":"docker run -d -p 3000:3000 --name node-app foo/node","position":{"start":{"line":26,"column":65,"offset":724},"end":{"line":26,"column":118,"offset":777},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":26,"column":118,"offset":777},"end":{"line":26,"column":119,"offset":778},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":660},"end":{"line":26,"column":119,"offset":778},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First, we can test the Nginx latest container container using ","position":{"start":{"line":28,"column":1,"offset":780},"end":{"line":28,"column":63,"offset":842},"indent":[]}},{"type":"inlineCode","value":"docker run --rm -p 8000:80 nginx","position":{"start":{"line":28,"column":63,"offset":842},"end":{"line":28,"column":97,"offset":876},"indent":[]}},{"type":"text","value":" to test out nginx:latest. This just removes the container after running.","position":{"start":{"line":28,"column":97,"offset":876},"end":{"line":28,"column":170,"offset":949},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":780},"end":{"line":28,"column":170,"offset":949},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the ","position":{"start":{"line":30,"column":1,"offset":951},"end":{"line":30,"column":8,"offset":958},"indent":[]}},{"type":"inlineCode","value":"nginx","position":{"start":{"line":30,"column":8,"offset":958},"end":{"line":30,"column":15,"offset":965},"indent":[]}},{"type":"text","value":" folder, we can create ","position":{"start":{"line":30,"column":15,"offset":965},"end":{"line":30,"column":38,"offset":988},"indent":[]}},{"type":"inlineCode","value":"default.conf","position":{"start":{"line":30,"column":38,"offset":988},"end":{"line":30,"column":52,"offset":1002},"indent":[]}},{"type":"text","value":" file to overwrite the initial one.","position":{"start":{"line":30,"column":52,"offset":1002},"end":{"line":30,"column":87,"offset":1037},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":951},"end":{"line":30,"column":87,"offset":1037},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If settings are not defined below, Nginx will use the default values.","position":{"start":{"line":32,"column":1,"offset":1039},"end":{"line":32,"column":70,"offset":1108},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1039},"end":{"line":32,"column":70,"offset":1108},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"# config\nserver {\n\tlocation / {\n\t\t# host name first\n\t\tproxy_set_header Host $host;\n\t\t# extra headers for host IP address\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\t# passing protocol used (http | https)\n\t\tproxy_set_header X-Forwarded-Proto $scheme;\n\t\t# where to proxy reqs to\n\t\tproxy_pass http://app:3000;\n\t}\n}","position":{"start":{"line":34,"column":1,"offset":1110},"end":{"line":49,"column":4,"offset":1493},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For the Docker file.","position":{"start":{"line":51,"column":1,"offset":1495},"end":{"line":51,"column":21,"offset":1515},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1495},"end":{"line":51,"column":21,"offset":1515},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"FROM nginx\nCOPY default.cong /etc/nginx/conf.d/","position":{"start":{"line":53,"column":1,"offset":1517},"end":{"line":56,"column":4,"offset":1572},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then build out this file using ","position":{"start":{"line":58,"column":1,"offset":1574},"end":{"line":58,"column":32,"offset":1605},"indent":[]}},{"type":"inlineCode","value":"docker built -t foo/nginx .","position":{"start":{"line":58,"column":32,"offset":1605},"end":{"line":58,"column":61,"offset":1634},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":58,"column":61,"offset":1634},"end":{"line":58,"column":62,"offset":1635},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1574},"end":{"line":58,"column":62,"offset":1635},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Running it: ","position":{"start":{"line":60,"column":1,"offset":1637},"end":{"line":60,"column":13,"offset":1649},"indent":[]}},{"type":"inlineCode","value":"docker run -p 8000:80 --link node-app:app --name nginx-proxy foo/nginx","position":{"start":{"line":60,"column":13,"offset":1649},"end":{"line":60,"column":85,"offset":1721},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1637},"end":{"line":60,"column":85,"offset":1721},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since we expose 3000 for the node-app, we do not need to redo that.","position":{"start":{"line":62,"column":1,"offset":1723},"end":{"line":62,"column":68,"offset":1790},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1723},"end":{"line":62,"column":68,"offset":1790},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":65,"column":1,"offset":1793},"end":{"line":65,"column":31,"offset":1823},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":65,"column":31,"offset":1823}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"docker-container-with-nginx-and-nodejs\"\n    }}>{`Docker container with Nginx and Nodejs`}</h1>\n    <p>{`First create a directory for both `}<inlineCode parentName=\"p\">{`nginx`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`nodejs`}</inlineCode>{`.`}</p>\n    <p>{`Within the Node folder, create a `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` that contains the following to expose an app running on a particular port:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`FROM mhart/alpine-node\n# Pretend to copy the node app entry\n# from current folder\nCOPY index.js .\n# Expose the port that it is running on\nEXPOSE 3000\n# Run node - chances are you want pm2 here\nCMD node index.js\n`}</code></pre>\n    <p>{`Then we can build with `}<inlineCode parentName=\"p\">{`docker built -t foo/node .`}</inlineCode></p>\n    <p>{`After the build, run the container with port 3000 exposed using `}<inlineCode parentName=\"p\">{`docker run -d -p 3000:3000 --name node-app foo/node`}</inlineCode>{`.`}</p>\n    <p>{`First, we can test the Nginx latest container container using `}<inlineCode parentName=\"p\">{`docker run --rm -p 8000:80 nginx`}</inlineCode>{` to test out nginx:latest. This just removes the container after running.`}</p>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`nginx`}</inlineCode>{` folder, we can create `}<inlineCode parentName=\"p\">{`default.conf`}</inlineCode>{` file to overwrite the initial one.`}</p>\n    <p>{`If settings are not defined below, Nginx will use the default values.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# config\nserver {\n    location / {\n        # host name first\n        proxy_set_header Host $host;\n        # extra headers for host IP address\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        # passing protocol used (http | https)\n        proxy_set_header X-Forwarded-Proto $scheme;\n        # where to proxy reqs to\n        proxy_pass http://app:3000;\n    }\n}\n`}</code></pre>\n    <p>{`For the Docker file.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`FROM nginx\nCOPY default.cong /etc/nginx/conf.d/\n`}</code></pre>\n    <p>{`Then build out this file using `}<inlineCode parentName=\"p\">{`docker built -t foo/nginx .`}</inlineCode>{`.`}</p>\n    <p>{`Running it: `}<inlineCode parentName=\"p\">{`docker run -p 8000:80 --link node-app:app --name nginx-proxy foo/nginx`}</inlineCode></p>\n    <p>{`Since we expose 3000 for the node-app, we do not need to redo that.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}