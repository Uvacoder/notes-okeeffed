{"expireTime":9007200848610881000,"key":"gatsby-plugin-mdx-entire-payload-29a07418035afee011dc15f6463b853b-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"PHP Anonymous Functions","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":26,"offset":192},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":26,"offset":192},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The basic gist is to use the keyword ","position":{"start":{"line":10,"column":1,"offset":194},"end":{"line":10,"column":38,"offset":231},"indent":[]}},{"type":"inlineCode","value":"function()","position":{"start":{"line":10,"column":38,"offset":231},"end":{"line":10,"column":50,"offset":243},"indent":[]}},{"type":"text","value":" with a block scope.","position":{"start":{"line":10,"column":50,"offset":243},"end":{"line":10,"column":70,"offset":263},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":194},"end":{"line":10,"column":70,"offset":263},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you want to use variables declared by the direct parent scope, ensure you use the ","position":{"start":{"line":12,"column":1,"offset":265},"end":{"line":12,"column":86,"offset":350},"indent":[]}},{"type":"inlineCode","value":"use()","position":{"start":{"line":12,"column":86,"offset":350},"end":{"line":12,"column":93,"offset":357},"indent":[]}},{"type":"text","value":" keyword. A simple example of this can be found below.","position":{"start":{"line":12,"column":93,"offset":357},"end":{"line":12,"column":147,"offset":411},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":265},"end":{"line":12,"column":147,"offset":411},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Simple Example","position":{"start":{"line":14,"column":4,"offset":416},"end":{"line":14,"column":18,"offset":430},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":413},"end":{"line":14,"column":18,"offset":430},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// anon.php\n\n<?php\n\nfunction helloWorld()\n{\n    $anon = function() {\n        return 'Hello, World!';\n    };\n\n    return $anon();\n}\n\nfunction sumTwoArgsPlusOne($a, $b)\n{\n    $c = 1;\n    $anon = function($a, $b) use ($c) {\n        return $a + $b + $c;\n    };\n\n    return $anon($a, $b);\n}","position":{"start":{"line":16,"column":1,"offset":432},"end":{"line":39,"column":4,"offset":728},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"php","meta":null,"value":"// anon_test.php\n\n<?php\n\nrequire \"anonymous.php\";\n\nclass AnonymousTest extends PHPUnit\\Framework\\TestCase\n{\n    public function testHelloWorld()\n    {\n        $this->assertEquals('Hello, World!', helloWorld());\n    }\n\n    public function testSum()\n    {\n        $this->assertEquals(4, sumTwoArgsPlusOne(1, 2));\n    }\n}","position":{"start":{"line":41,"column":1,"offset":730},"end":{"line":60,"column":4,"offset":1059},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":63,"column":1,"offset":1062},"end":{"line":63,"column":31,"offset":1092},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":63,"column":31,"offset":1092}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"php-anonymous-functions\"\n    }}>{`PHP Anonymous Functions`}</h1>\n    <p>{`The basic gist is to use the keyword `}<inlineCode parentName=\"p\">{`function()`}</inlineCode>{` with a block scope.`}</p>\n    <p>{`If you want to use variables declared by the direct parent scope, ensure you use the `}<inlineCode parentName=\"p\">{`use()`}</inlineCode>{` keyword. A simple example of this can be found below.`}</p>\n    <h2 {...{\n      \"id\": \"simple-example\"\n    }}>{`Simple Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// anon.php\n\n<?php\n\nfunction helloWorld()\n{\n    $anon = function() {\n        return 'Hello, World!';\n    };\n\n    return $anon();\n}\n\nfunction sumTwoArgsPlusOne($a, $b)\n{\n    $c = 1;\n    $anon = function($a, $b) use ($c) {\n        return $a + $b + $c;\n    };\n\n    return $anon($a, $b);\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// anon_test.php\n\n<?php\n\nrequire \"anonymous.php\";\n\nclass AnonymousTest extends PHPUnit\\\\Framework\\\\TestCase\n{\n    public function testHelloWorld()\n    {\n        $this->assertEquals('Hello, World!', helloWorld());\n    }\n\n    public function testSum()\n    {\n        $this->assertEquals(4, sumTwoArgsPlusOne(1, 2));\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}