{"expireTime":9007200848610856000,"key":"gatsby-plugin-mdx-entire-payload-3366a6d9b680e8108b643817994decc5-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Using Stripe with Node.js","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":28,"offset":194},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":28,"offset":194},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":199},"end":{"line":10,"column":13,"offset":208},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":196},"end":{"line":10,"column":13,"offset":208},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://stripe.com/docs/payments/payment-intents/migration","children":[{"type":"text","value":"Payment Migration Guide","position":{"start":{"line":12,"column":5,"offset":214},"end":{"line":12,"column":28,"offset":237},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":213},"end":{"line":12,"column":89,"offset":298},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":213},"end":{"line":12,"column":89,"offset":298},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":210},"end":{"line":12,"column":89,"offset":298},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://stripe.com/docs/payments/payment-intents","children":[{"type":"text","value":"Payment Intents","position":{"start":{"line":13,"column":5,"offset":303},"end":{"line":13,"column":20,"offset":318},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":302},"end":{"line":13,"column":71,"offset":369},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":302},"end":{"line":13,"column":71,"offset":369},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":299},"end":{"line":13,"column":71,"offset":369},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://stripe.com/docs/js/payment_intents/confirm_card_payment","children":[{"type":"text","value":"Stripe.js Docs","position":{"start":{"line":14,"column":5,"offset":374},"end":{"line":14,"column":19,"offset":388},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":373},"end":{"line":14,"column":85,"offset":454},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":373},"end":{"line":14,"column":85,"offset":454},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":370},"end":{"line":14,"column":85,"offset":454},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/stripe/react-stripe-elements","children":[{"type":"text","value":"React Stripe Elements GitHub","position":{"start":{"line":15,"column":5,"offset":459},"end":{"line":15,"column":33,"offset":487},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":458},"end":{"line":15,"column":83,"offset":537},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":458},"end":{"line":15,"column":83,"offset":537},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":455},"end":{"line":15,"column":83,"offset":537},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":210},"end":{"line":15,"column":83,"offset":537},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Intro","position":{"start":{"line":17,"column":4,"offset":542},"end":{"line":17,"column":9,"offset":547},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":539},"end":{"line":17,"column":9,"offset":547},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This will show how to make payments without needing card details to hit the server using Payment Intents. There is two sections to this:","position":{"start":{"line":19,"column":1,"offset":549},"end":{"line":19,"column":137,"offset":685},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":549},"end":{"line":19,"column":137,"offset":685},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Node Express server","position":{"start":{"line":21,"column":4,"offset":690},"end":{"line":21,"column":23,"offset":709},"indent":[]}}],"position":{"start":{"line":21,"column":4,"offset":690},"end":{"line":21,"column":23,"offset":709},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":687},"end":{"line":21,"column":23,"offset":709},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"React App","position":{"start":{"line":22,"column":4,"offset":713},"end":{"line":22,"column":13,"offset":722},"indent":[]}}],"position":{"start":{"line":22,"column":4,"offset":713},"end":{"line":22,"column":13,"offset":722},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":710},"end":{"line":22,"column":13,"offset":722},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":687},"end":{"line":22,"column":13,"offset":722},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Prereqs","position":{"start":{"line":24,"column":4,"offset":727},"end":{"line":24,"column":11,"offset":734},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":724},"end":{"line":24,"column":11,"offset":734},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Ensure you have a Stripe account","position":{"start":{"line":26,"column":3,"offset":738},"end":{"line":26,"column":35,"offset":770},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":738},"end":{"line":26,"column":35,"offset":770},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":736},"end":{"line":26,"column":35,"offset":770},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Basic knowledge on Express.js","position":{"start":{"line":27,"column":3,"offset":773},"end":{"line":27,"column":32,"offset":802},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":773},"end":{"line":27,"column":32,"offset":802},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":771},"end":{"line":27,"column":32,"offset":802},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Basic knowledge for ","position":{"start":{"line":28,"column":3,"offset":805},"end":{"line":28,"column":23,"offset":825},"indent":[]}},{"type":"inlineCode","value":"create-react-app","position":{"start":{"line":28,"column":23,"offset":825},"end":{"line":28,"column":41,"offset":843},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":805},"end":{"line":28,"column":41,"offset":843},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":803},"end":{"line":28,"column":41,"offset":843},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":736},"end":{"line":28,"column":41,"offset":843},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"1. The Express Server","position":{"start":{"line":30,"column":4,"offset":848},"end":{"line":30,"column":25,"offset":869},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":845},"end":{"line":30,"column":25,"offset":869},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"mkdir server\ncd server\nyarn init -y # skip yarn init with defaults for now\nyarn add express body-parser stripe cors morgan","position":{"start":{"line":32,"column":1,"offset":871},"end":{"line":37,"column":4,"offset":1006},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Configure the .env file to contain your Stripe key (we're only using the test key for now):","position":{"start":{"line":39,"column":1,"offset":1008},"end":{"line":39,"column":92,"offset":1099},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1008},"end":{"line":39,"column":92,"offset":1099},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"SK_TEST_KEY=sk_test...","position":{"start":{"line":41,"column":1,"offset":1101},"end":{"line":43,"column":4,"offset":1136},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Create ","position":{"start":{"line":45,"column":1,"offset":1138},"end":{"line":45,"column":8,"offset":1145},"indent":[]}},{"type":"inlineCode","value":"index.js","position":{"start":{"line":45,"column":8,"offset":1145},"end":{"line":45,"column":18,"offset":1155},"indent":[]}},{"type":"text","value":" and add the following:","position":{"start":{"line":45,"column":18,"offset":1155},"end":{"line":45,"column":41,"offset":1178},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1138},"end":{"line":45,"column":41,"offset":1178},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"require('dotenv').config();\nconst cors = require('cors');\nconst express = require('express');\nconst stripe = require('stripe')(process.env.SK_TEST_KEY);\n\nconst app = express();\nconst port = 8080;\nconst bodyParser = require('body-parser');\nconst morgan = require('morgan');\n// parse application/json\napp.use(bodyParser.json());\napp.use(cors());\napp.use(morgan('combined'));\n\n\n// basic route create a payment intent\napp.post('/api/v1/create', async (req, res) => {\n  const intent = await stripe.paymentIntents.create({\n    amount: 1099,\n    currency: 'aud',\n    payment_method_types: ['card'],\n  });\n  res.json({ intent: intent.client_secret });\n});\n\napp.post('/api/v1/charge', async (req, res) => {\n  const charge = await stripe.charges.create({\n    amount: 1600,\n    currency: 'aud',\n  });\n  res.json(charge);\n})\n\n// basic route create a setup intent\napp.post('/api/v1/setup-intent', async (req, res) => {\n    payment_method_types: ['card'],\n  });\n  res.json({ intent: intent.client_secret });\n});\n\n// basic route to receive and log a webhook\napp.post('/api/v1/events/webhook', (req, res) => {\n  console.log('@ Webhook received', req.body);\n  res.json({ status: 'success' });\n});\n\napp.listen(port, () =>\n  console.log(`Stripe example app listening on port ${port}!`),\n);","position":{"start":{"line":47,"column":1,"offset":1180},"end":{"line":97,"column":4,"offset":2468},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For testing the webhook URL, we can use the Stripe CLI (unless you want to setup the webhook for your account):","position":{"start":{"line":99,"column":1,"offset":2470},"end":{"line":99,"column":112,"offset":2581},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":2470},"end":{"line":99,"column":112,"offset":2581},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"stripe listen --forward-to localhost:8080/hooks # listen for events and forward to local URL\nstripe trigger payment_intent.created # trigger a payment_intent.created event\nstripe payment_intents create --amount=100 --currency=usd # create a payment intent from the CLI","position":{"start":{"line":101,"column":1,"offset":2583},"end":{"line":105,"column":4,"offset":2864},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"2. For the React App","position":{"start":{"line":107,"column":4,"offset":2869},"end":{"line":107,"column":24,"offset":2889},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":2866},"end":{"line":107,"column":24,"offset":2889},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"npx create-react-app react-stripe\ncd react-stripe\nyarn add axios","position":{"start":{"line":109,"column":1,"offset":2891},"end":{"line":113,"column":4,"offset":2968},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As for the code, you can create ","position":{"start":{"line":115,"column":1,"offset":2970},"end":{"line":115,"column":33,"offset":3002},"indent":[]}},{"type":"inlineCode","value":"Stripe.js","position":{"start":{"line":115,"column":33,"offset":3002},"end":{"line":115,"column":44,"offset":3013},"indent":[]}},{"type":"text","value":" in the main directory and change the ","position":{"start":{"line":115,"column":44,"offset":3013},"end":{"line":115,"column":82,"offset":3051},"indent":[]}},{"type":"inlineCode","value":"StripeProvider","position":{"start":{"line":115,"column":82,"offset":3051},"end":{"line":115,"column":98,"offset":3067},"indent":[]}},{"type":"text","value":" publishable API key with your own.","position":{"start":{"line":115,"column":98,"offset":3067},"end":{"line":115,"column":133,"offset":3102},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":2970},"end":{"line":115,"column":133,"offset":3102},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We are using axios here to chat to the Express server.","position":{"start":{"line":117,"column":1,"offset":3104},"end":{"line":117,"column":55,"offset":3158},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":3104},"end":{"line":117,"column":55,"offset":3158},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The code looks as follows:","position":{"start":{"line":119,"column":1,"offset":3160},"end":{"line":119,"column":27,"offset":3186},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":3160},"end":{"line":119,"column":27,"offset":3186},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  CardElement,\n  StripeProvider,\n  Elements,\n  injectStripe,\n} from 'react-stripe-elements';\nimport axios from 'axios';\n\nconst handleBlur = () => {\n  console.log('[blur]');\n};\nconst handleChange = change => {\n  console.log('[change]', change);\n};\nconst handleFocus = () => {\n  console.log('[focus]');\n};\nconst handleReady = () => {\n  console.log('[ready]');\n};\n\nconst createOptions = (fontSize: string, padding: ?string) => {\n  return {\n    style: {\n      base: {\n        fontSize,\n        color: '#424770',\n        letterSpacing: '0.025em',\n        fontFamily: 'Source Code Pro, monospace',\n        '::placeholder': {\n          color: '#aab7c4',\n        },\n        ...(padding ? { padding } : {}),\n      },\n      invalid: {\n        color: '#9e2146',\n      },\n    },\n  };\n};\n\nclass _CreatePaymentMethod extends React.Component {\n  state = {\n    error: null,\n    processing: false,\n    message: null,\n  };\n\n  handleSubmit = ev => {\n    ev.preventDefault();\n    if (this.props.stripe && this.props.elements) {\n      this.props.stripe\n        .createPaymentMethod({\n          type: 'card',\n          card: this.props.elements.getElement('card'),\n        })\n        .then(payload => {\n          if (payload.error) {\n            this.setState({\n              error: `Failed to create PaymentMethod: ${payload.error.message}`,\n              processing: false,\n            });\n            console.log('[error]', payload.error);\n          } else {\n            this.setState({\n              message: `Created PaymentMethod: ${payload.paymentMethod.id}`,\n              processing: false,\n            });\n            console.log('[paymentMethod]', payload.paymentMethod);\n          }\n        });\n      this.setState({ processing: true });\n    } else {\n      console.log(\"Stripe.js hasn't loaded yet.\");\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          stripe.createPaymentMethod\n          <CardElement\n            onBlur={handleBlur}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onReady={handleReady}\n            {...createOptions(this.props.fontSize)}\n          />\n        </label>\n        {this.state.error && <div className=\"error\">{this.state.error}</div>}\n        {this.state.message && (\n          <div className=\"message\">{this.state.message}</div>\n        )}\n        <button disabled={this.state.processing}>\n          {this.state.processing ? 'Processing…' : 'Create'}\n        </button>\n      </form>\n    );\n  }\n}\n\nconst CreatePaymentMethod = injectStripe(_CreatePaymentMethod);\n\nclass _HandleCardPayment extends React.Component {\n  state = {\n    clientSecret: null,\n    error: null,\n    disabled: false,\n    succeeded: false,\n    processing: false,\n    message: null,\n  };\n\n  handleSubmit = async ev => {\n    ev.preventDefault();\n    if (this.props.stripe && this.props.elements) {\n      const res = await axios.post('http://localhost:8080/api/v1/create');\n      this.props.stripe\n        .confirmCardPayment(res.data.intent, {\n          payment_method: {\n            card: this.props.elements.getElement('card'),\n          },\n        })\n        .then(payload => {\n          if (payload.error) {\n            this.setState({\n              error: `Charge failed: ${payload.error.message}`,\n              disabled: false,\n            });\n            console.log('[error]', payload.error);\n          } else {\n            this.setState({\n              succeeded: true,\n              message: `Charge succeeded! PaymentIntent is in state: ${payload.paymentIntent.status}`,\n            });\n            console.log('[PaymentIntent]', payload.paymentIntent);\n          }\n        });\n      this.setState({ disabled: true, processing: true });\n    } else {\n      console.log(\"Stripe.js hasn't loaded yet.\");\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          stripe.confirmCardPayment\n          <CardElement\n            onBlur={handleBlur}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onReady={handleReady}\n            {...createOptions(this.props.fontSize)}\n          />\n        </label>\n        {this.state.error && <div className=\"error\">{this.state.error}</div>}\n        {this.state.message && (\n          <div className=\"message\">{this.state.message}</div>\n        )}\n        {!this.state.succeeded && (\n          <button disabled={this.state.disabled}>\n            {this.state.processing ? 'Processing…' : 'Pay'}\n          </button>\n        )}\n      </form>\n    );\n  }\n}\n\nconst HandleCardPayment = injectStripe(_HandleCardPayment);\n\nclass _HandleCardSetup extends React.Component {\n  state = {\n    clientSecret: null,\n    error: null,\n    disabled: false,\n    succeeded: false,\n    processing: false,\n    message: null,\n  };\n\n  handleSubmit = async ev => {\n    ev.preventDefault();\n    if (this.props.stripe && this.props.elements) {\n      const res = await axios.post('http://localhost:8080/api/v1/setup-intent');\n      this.props.stripe\n        .confirmCardSetup(res.data.intent, {\n          payment_method: {\n            card: this.props.elements.getElement('card'),\n          },\n        })\n        .then(payload => {\n          if (payload.error) {\n            this.setState({\n              error: `Setup failed: ${payload.error.message}`,\n              disabled: false,\n            });\n            console.log('[error]', payload.error);\n          } else {\n            this.setState({\n              succeeded: true,\n              message: `Setup succeeded! SetupIntent is in state: ${payload.setupIntent.status}`,\n            });\n            console.log('[SetupIntent]', payload.setupIntent);\n          }\n        });\n      this.setState({ disabled: true, processing: true });\n    } else {\n      console.log(\"Stripe.js hasn't loaded yet.\");\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          stripe.confirmCardSetup\n          <CardElement\n            onBlur={handleBlur}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onReady={handleReady}\n            {...createOptions(this.props.fontSize)}\n          />\n        </label>\n        {this.state.error && <div className=\"error\">{this.state.error}</div>}\n        {this.state.message && (\n          <div className=\"message\">{this.state.message}</div>\n        )}\n        {!this.state.succeeded && (\n          <button disabled={this.state.disabled}>\n            {this.state.processing ? 'Processing…' : 'Setup'}\n          </button>\n        )}\n      </form>\n    );\n  }\n}\n\nconst HandleCardSetup = injectStripe(_HandleCardSetup);\n\nclass Checkout extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      elementFontSize: window.innerWidth < 450 ? '14px' : '18px',\n    };\n    window.addEventListener('resize', () => {\n      if (window.innerWidth < 450 && this.state.elementFontSize !== '14px') {\n        this.setState({ elementFontSize: '14px' });\n      } else if (\n        window.innerWidth >= 450 &&\n        this.state.elementFontSize !== '18px'\n      ) {\n        this.setState({ elementFontSize: '18px' });\n      }\n    });\n  }\n\n  render() {\n    const { elementFontSize } = this.state;\n    return (\n      <div className=\"Checkout\">\n        <h1>React Stripe Elements with PaymentIntents</h1>\n        <Elements>\n          <CreatePaymentMethod fontSize={elementFontSize} />\n        </Elements>\n        <Elements>\n          <HandleCardPayment fontSize={elementFontSize} />\n        </Elements>\n        <Elements>\n          <HandleCardSetup fontSize={elementFontSize} />\n        </Elements>\n      </div>\n    );\n  }\n}\n\nconst StripeApp = () => {\n  return (\n    <StripeProvider apiKey=\"pk_test_...\">\n      <Checkout />\n    </StripeProvider>\n  );\n};\n\nexport default StripeApp;","position":{"start":{"line":121,"column":1,"offset":3188},"end":{"line":415,"column":4,"offset":11081},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":418,"column":1,"offset":11084},"end":{"line":418,"column":31,"offset":11114},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":418,"column":31,"offset":11114}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"using-stripe-with-nodejs\"\n    }}>{`Using Stripe with Node.js`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/payments/payment-intents/migration\"\n        }}>{`Payment Migration Guide`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/payments/payment-intents\"\n        }}>{`Payment Intents`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/js/payment_intents/confirm_card_payment\"\n        }}>{`Stripe.js Docs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stripe/react-stripe-elements\"\n        }}>{`React Stripe Elements GitHub`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"intro\"\n    }}>{`Intro`}</h2>\n    <p>{`This will show how to make payments without needing card details to hit the server using Payment Intents. There is two sections to this:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Node Express server`}</li>\n      <li parentName=\"ol\">{`React App`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"prereqs\"\n    }}>{`Prereqs`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Ensure you have a Stripe account`}</li>\n      <li parentName=\"ul\">{`Basic knowledge on Express.js`}</li>\n      <li parentName=\"ul\">{`Basic knowledge for `}<inlineCode parentName=\"li\">{`create-react-app`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"1-the-express-server\"\n    }}>{`1. The Express Server`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mkdir server\ncd server\nyarn init -y # skip yarn init with defaults for now\nyarn add express body-parser stripe cors morgan\n`}</code></pre>\n    <p>{`Configure the .env file to contain your Stripe key (we're only using the test key for now):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`SK_TEST_KEY=sk_test...\n`}</code></pre>\n    <p>{`Create `}<inlineCode parentName=\"p\">{`index.js`}</inlineCode>{` and add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`require('dotenv').config();\nconst cors = require('cors');\nconst express = require('express');\nconst stripe = require('stripe')(process.env.SK_TEST_KEY);\n\nconst app = express();\nconst port = 8080;\nconst bodyParser = require('body-parser');\nconst morgan = require('morgan');\n// parse application/json\napp.use(bodyParser.json());\napp.use(cors());\napp.use(morgan('combined'));\n\n\n// basic route create a payment intent\napp.post('/api/v1/create', async (req, res) => {\n  const intent = await stripe.paymentIntents.create({\n    amount: 1099,\n    currency: 'aud',\n    payment_method_types: ['card'],\n  });\n  res.json({ intent: intent.client_secret });\n});\n\napp.post('/api/v1/charge', async (req, res) => {\n  const charge = await stripe.charges.create({\n    amount: 1600,\n    currency: 'aud',\n  });\n  res.json(charge);\n})\n\n// basic route create a setup intent\napp.post('/api/v1/setup-intent', async (req, res) => {\n    payment_method_types: ['card'],\n  });\n  res.json({ intent: intent.client_secret });\n});\n\n// basic route to receive and log a webhook\napp.post('/api/v1/events/webhook', (req, res) => {\n  console.log('@ Webhook received', req.body);\n  res.json({ status: 'success' });\n});\n\napp.listen(port, () =>\n  console.log(\\`Stripe example app listening on port \\${port}!\\`),\n);\n`}</code></pre>\n    <p>{`For testing the webhook URL, we can use the Stripe CLI (unless you want to setup the webhook for your account):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`stripe listen --forward-to localhost:8080/hooks # listen for events and forward to local URL\nstripe trigger payment_intent.created # trigger a payment_intent.created event\nstripe payment_intents create --amount=100 --currency=usd # create a payment intent from the CLI\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"2-for-the-react-app\"\n    }}>{`2. For the React App`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`npx create-react-app react-stripe\ncd react-stripe\nyarn add axios\n`}</code></pre>\n    <p>{`As for the code, you can create `}<inlineCode parentName=\"p\">{`Stripe.js`}</inlineCode>{` in the main directory and change the `}<inlineCode parentName=\"p\">{`StripeProvider`}</inlineCode>{` publishable API key with your own.`}</p>\n    <p>{`We are using axios here to chat to the Express server.`}</p>\n    <p>{`The code looks as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  CardElement,\n  StripeProvider,\n  Elements,\n  injectStripe,\n} from 'react-stripe-elements';\nimport axios from 'axios';\n\nconst handleBlur = () => {\n  console.log('[blur]');\n};\nconst handleChange = change => {\n  console.log('[change]', change);\n};\nconst handleFocus = () => {\n  console.log('[focus]');\n};\nconst handleReady = () => {\n  console.log('[ready]');\n};\n\nconst createOptions = (fontSize: string, padding: ?string) => {\n  return {\n    style: {\n      base: {\n        fontSize,\n        color: '#424770',\n        letterSpacing: '0.025em',\n        fontFamily: 'Source Code Pro, monospace',\n        '::placeholder': {\n          color: '#aab7c4',\n        },\n        ...(padding ? { padding } : {}),\n      },\n      invalid: {\n        color: '#9e2146',\n      },\n    },\n  };\n};\n\nclass _CreatePaymentMethod extends React.Component {\n  state = {\n    error: null,\n    processing: false,\n    message: null,\n  };\n\n  handleSubmit = ev => {\n    ev.preventDefault();\n    if (this.props.stripe && this.props.elements) {\n      this.props.stripe\n        .createPaymentMethod({\n          type: 'card',\n          card: this.props.elements.getElement('card'),\n        })\n        .then(payload => {\n          if (payload.error) {\n            this.setState({\n              error: \\`Failed to create PaymentMethod: \\${payload.error.message}\\`,\n              processing: false,\n            });\n            console.log('[error]', payload.error);\n          } else {\n            this.setState({\n              message: \\`Created PaymentMethod: \\${payload.paymentMethod.id}\\`,\n              processing: false,\n            });\n            console.log('[paymentMethod]', payload.paymentMethod);\n          }\n        });\n      this.setState({ processing: true });\n    } else {\n      console.log(\"Stripe.js hasn't loaded yet.\");\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          stripe.createPaymentMethod\n          <CardElement\n            onBlur={handleBlur}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onReady={handleReady}\n            {...createOptions(this.props.fontSize)}\n          />\n        </label>\n        {this.state.error && <div className=\"error\">{this.state.error}</div>}\n        {this.state.message && (\n          <div className=\"message\">{this.state.message}</div>\n        )}\n        <button disabled={this.state.processing}>\n          {this.state.processing ? 'Processing…' : 'Create'}\n        </button>\n      </form>\n    );\n  }\n}\n\nconst CreatePaymentMethod = injectStripe(_CreatePaymentMethod);\n\nclass _HandleCardPayment extends React.Component {\n  state = {\n    clientSecret: null,\n    error: null,\n    disabled: false,\n    succeeded: false,\n    processing: false,\n    message: null,\n  };\n\n  handleSubmit = async ev => {\n    ev.preventDefault();\n    if (this.props.stripe && this.props.elements) {\n      const res = await axios.post('http://localhost:8080/api/v1/create');\n      this.props.stripe\n        .confirmCardPayment(res.data.intent, {\n          payment_method: {\n            card: this.props.elements.getElement('card'),\n          },\n        })\n        .then(payload => {\n          if (payload.error) {\n            this.setState({\n              error: \\`Charge failed: \\${payload.error.message}\\`,\n              disabled: false,\n            });\n            console.log('[error]', payload.error);\n          } else {\n            this.setState({\n              succeeded: true,\n              message: \\`Charge succeeded! PaymentIntent is in state: \\${payload.paymentIntent.status}\\`,\n            });\n            console.log('[PaymentIntent]', payload.paymentIntent);\n          }\n        });\n      this.setState({ disabled: true, processing: true });\n    } else {\n      console.log(\"Stripe.js hasn't loaded yet.\");\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          stripe.confirmCardPayment\n          <CardElement\n            onBlur={handleBlur}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onReady={handleReady}\n            {...createOptions(this.props.fontSize)}\n          />\n        </label>\n        {this.state.error && <div className=\"error\">{this.state.error}</div>}\n        {this.state.message && (\n          <div className=\"message\">{this.state.message}</div>\n        )}\n        {!this.state.succeeded && (\n          <button disabled={this.state.disabled}>\n            {this.state.processing ? 'Processing…' : 'Pay'}\n          </button>\n        )}\n      </form>\n    );\n  }\n}\n\nconst HandleCardPayment = injectStripe(_HandleCardPayment);\n\nclass _HandleCardSetup extends React.Component {\n  state = {\n    clientSecret: null,\n    error: null,\n    disabled: false,\n    succeeded: false,\n    processing: false,\n    message: null,\n  };\n\n  handleSubmit = async ev => {\n    ev.preventDefault();\n    if (this.props.stripe && this.props.elements) {\n      const res = await axios.post('http://localhost:8080/api/v1/setup-intent');\n      this.props.stripe\n        .confirmCardSetup(res.data.intent, {\n          payment_method: {\n            card: this.props.elements.getElement('card'),\n          },\n        })\n        .then(payload => {\n          if (payload.error) {\n            this.setState({\n              error: \\`Setup failed: \\${payload.error.message}\\`,\n              disabled: false,\n            });\n            console.log('[error]', payload.error);\n          } else {\n            this.setState({\n              succeeded: true,\n              message: \\`Setup succeeded! SetupIntent is in state: \\${payload.setupIntent.status}\\`,\n            });\n            console.log('[SetupIntent]', payload.setupIntent);\n          }\n        });\n      this.setState({ disabled: true, processing: true });\n    } else {\n      console.log(\"Stripe.js hasn't loaded yet.\");\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          stripe.confirmCardSetup\n          <CardElement\n            onBlur={handleBlur}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onReady={handleReady}\n            {...createOptions(this.props.fontSize)}\n          />\n        </label>\n        {this.state.error && <div className=\"error\">{this.state.error}</div>}\n        {this.state.message && (\n          <div className=\"message\">{this.state.message}</div>\n        )}\n        {!this.state.succeeded && (\n          <button disabled={this.state.disabled}>\n            {this.state.processing ? 'Processing…' : 'Setup'}\n          </button>\n        )}\n      </form>\n    );\n  }\n}\n\nconst HandleCardSetup = injectStripe(_HandleCardSetup);\n\nclass Checkout extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      elementFontSize: window.innerWidth < 450 ? '14px' : '18px',\n    };\n    window.addEventListener('resize', () => {\n      if (window.innerWidth < 450 && this.state.elementFontSize !== '14px') {\n        this.setState({ elementFontSize: '14px' });\n      } else if (\n        window.innerWidth >= 450 &&\n        this.state.elementFontSize !== '18px'\n      ) {\n        this.setState({ elementFontSize: '18px' });\n      }\n    });\n  }\n\n  render() {\n    const { elementFontSize } = this.state;\n    return (\n      <div className=\"Checkout\">\n        <h1>React Stripe Elements with PaymentIntents</h1>\n        <Elements>\n          <CreatePaymentMethod fontSize={elementFontSize} />\n        </Elements>\n        <Elements>\n          <HandleCardPayment fontSize={elementFontSize} />\n        </Elements>\n        <Elements>\n          <HandleCardSetup fontSize={elementFontSize} />\n        </Elements>\n      </div>\n    );\n  }\n}\n\nconst StripeApp = () => {\n  return (\n    <StripeProvider apiKey=\"pk_test_...\">\n      <Checkout />\n    </StripeProvider>\n  );\n};\n\nexport default StripeApp;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}