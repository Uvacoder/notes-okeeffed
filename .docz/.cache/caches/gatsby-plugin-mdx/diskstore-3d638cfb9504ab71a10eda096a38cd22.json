{"expireTime":9007200849425581000,"key":"gatsby-plugin-mdx-entire-payload-1c0858e5ea7812303929983ae9a13248-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Composite Pattern","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":20,"offset":186},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":20,"offset":186},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":5,"offset":192},"indent":[]}},{"type":"inlineCode","value":"Composite Pattern","position":{"start":{"line":10,"column":5,"offset":192},"end":{"line":10,"column":24,"offset":211},"indent":[]}},{"type":"text","value":" is a Gang Of Four structural Design Pattern that helps solve the following problems:","position":{"start":{"line":10,"column":24,"offset":211},"end":{"line":10,"column":109,"offset":296},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":109,"offset":296},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A part-whole hierarchy should be represented so that clients can treat part and whole objects uniformly.","position":{"start":{"line":12,"column":4,"offset":301},"end":{"line":12,"column":108,"offset":405},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":301},"end":{"line":12,"column":108,"offset":405},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":298},"end":{"line":12,"column":108,"offset":405},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A part-whole hierarcy should be represented as tree structure.","position":{"start":{"line":13,"column":4,"offset":409},"end":{"line":13,"column":66,"offset":471},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":409},"end":{"line":13,"column":66,"offset":471},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":406},"end":{"line":13,"column":66,"offset":471},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":298},"end":{"line":13,"column":66,"offset":471},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The Composite pattern will describe the following:","position":{"start":{"line":15,"column":1,"offset":473},"end":{"line":15,"column":51,"offset":523},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":473},"end":{"line":15,"column":51,"offset":523},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A unified ","position":{"start":{"line":17,"column":3,"offset":527},"end":{"line":17,"column":13,"offset":537},"indent":[]}},{"type":"inlineCode","value":"Component","position":{"start":{"line":17,"column":13,"offset":537},"end":{"line":17,"column":24,"offset":548},"indent":[]}},{"type":"text","value":" interface for both part (Leaf) objects and whole (Composite) objects.","position":{"start":{"line":17,"column":24,"offset":548},"end":{"line":17,"column":94,"offset":618},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":527},"end":{"line":17,"column":94,"offset":618},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":525},"end":{"line":17,"column":94,"offset":618},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Individual ","position":{"start":{"line":18,"column":3,"offset":621},"end":{"line":18,"column":14,"offset":632},"indent":[]}},{"type":"inlineCode","value":"Leaf","position":{"start":{"line":18,"column":14,"offset":632},"end":{"line":18,"column":20,"offset":638},"indent":[]}},{"type":"text","value":" objects implement the ","position":{"start":{"line":18,"column":20,"offset":638},"end":{"line":18,"column":43,"offset":661},"indent":[]}},{"type":"inlineCode","value":"Component","position":{"start":{"line":18,"column":43,"offset":661},"end":{"line":18,"column":54,"offset":672},"indent":[]}},{"type":"text","value":" interface directly, and ","position":{"start":{"line":18,"column":54,"offset":672},"end":{"line":18,"column":79,"offset":697},"indent":[]}},{"type":"inlineCode","value":"Composite","position":{"start":{"line":18,"column":79,"offset":697},"end":{"line":18,"column":90,"offset":708},"indent":[]}},{"type":"text","value":" objects forward requests to their child components.","position":{"start":{"line":18,"column":90,"offset":708},"end":{"line":18,"column":142,"offset":760},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":621},"end":{"line":18,"column":142,"offset":760},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":619},"end":{"line":18,"column":142,"offset":760},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":525},"end":{"line":18,"column":142,"offset":760},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Clients can then work through the ","position":{"start":{"line":20,"column":1,"offset":762},"end":{"line":20,"column":35,"offset":796},"indent":[]}},{"type":"inlineCode","value":"Component","position":{"start":{"line":20,"column":35,"offset":796},"end":{"line":20,"column":46,"offset":807},"indent":[]}},{"type":"text","value":" interface to treat ","position":{"start":{"line":20,"column":46,"offset":807},"end":{"line":20,"column":66,"offset":827},"indent":[]}},{"type":"inlineCode","value":"Leaf","position":{"start":{"line":20,"column":66,"offset":827},"end":{"line":20,"column":72,"offset":833},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":20,"column":72,"offset":833},"end":{"line":20,"column":77,"offset":838},"indent":[]}},{"type":"inlineCode","value":"Composite","position":{"start":{"line":20,"column":77,"offset":838},"end":{"line":20,"column":88,"offset":849},"indent":[]}},{"type":"text","value":" objects uniformly.","position":{"start":{"line":20,"column":88,"offset":849},"end":{"line":20,"column":107,"offset":868},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":762},"end":{"line":20,"column":107,"offset":868},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Leaf","position":{"start":{"line":22,"column":1,"offset":870},"end":{"line":22,"column":7,"offset":876},"indent":[]}},{"type":"text","value":" objects perform a request directly, and ","position":{"start":{"line":22,"column":7,"offset":876},"end":{"line":22,"column":48,"offset":917},"indent":[]}},{"type":"inlineCode","value":"Composite","position":{"start":{"line":22,"column":48,"offset":917},"end":{"line":22,"column":59,"offset":928},"indent":[]}},{"type":"text","value":" objects forward the request to their child components recursively downwards the tree structure. This makes client classes easier to implement, change, test, and reuse.","position":{"start":{"line":22,"column":59,"offset":928},"end":{"line":22,"column":227,"offset":1096},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":870},"end":{"line":22,"column":227,"offset":1096},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":24,"column":4,"offset":1101},"end":{"line":24,"column":11,"offset":1108},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1098},"end":{"line":24,"column":11,"offset":1108},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"interface ArmyObject {\n  name: String;\n  operate(): void;\n}\n\nclass Team implements ArmyObject {\n  name: String;\n  private _soldiers: ArmyObject[];\n\n  constructor(name: String) {\n    this.name = name;\n    this._soldiers = [];\n  }\n\n  operate(): void {\n    console.log(`Team: ${this.name} operates`);\n    this._soldiers.map((soldier: ArmyObject) => {\n      soldier.operate();\n    });\n  }\n\n  addSoldier(newSoldier: ArmyObject) {\n    const soldiers = this._soldiers.filter((soldier: ArmyObject, index) => {\n      return soldier.name === newSoldier.name;\n    });\n    if (soldiers.length < 1) {\n      console.log(`Soldier: ${newSoldier.name} comes in ${this.name}`);\n      this._soldiers.push(newSoldier);\n    } else {\n      console.log('The soldier is already in the team');\n    }\n  }\n\n  soldierGone(deadSoldier: ArmyObject) {\n    const deads = this._soldiers.map((soldier: ArmyObject, index) => {\n      if (soldier.name === deadSoldier.name) {\n        return index;\n      }\n    });\n    if (deads.length > 0) {\n      console.log(`Soldier: ${deadSoldier.name} died in the fight`);\n      this._soldiers.slice(deads[0], 1);\n    } else {\n      console.log('No one dies');\n    }\n  }\n}\n\nclass Soldier implements ArmyObject {\n  name: String;\n\n  constructor(name: String) {\n    this.name = name;\n  }\n\n  operate() {\n    console.log(`Soldier: ${this.name} soldier operates`);\n  }\n}\n\n(function main() {\n  const team = new Team('Seal Team 6');\n  const specialSquad = new Team('Seal Team 6 - Special Squad');\n\n  const soldierJoe = new Soldier('Joe');\n  const soldierJames = new Soldier('James');\n  const soldierRoy = new Soldier('Roy');\n  team.addSoldier(soldierJoe);\n  team.addSoldier(soldierJames);\n  team.addSoldier(soldierRoy);\n\n  const specialForceTommy = new Soldier('Tommy');\n\n  specialSquad.addSoldier(specialForceTommy);\n\n  team.operate();\n  specialSquad.operate();\n\n  team.soldierGone(soldierJames);\n})();","position":{"start":{"line":26,"column":1,"offset":1110},"end":{"line":107,"column":4,"offset":3024},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Java Graphic Example","position":{"start":{"line":109,"column":4,"offset":3029},"end":{"line":109,"column":24,"offset":3049},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":3026},"end":{"line":109,"column":24,"offset":3049},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"import java.util.ArrayList;\n\n/** \"Component\" */\ninterface Graphic {\n    //Prints the graphic.\n    public void print();\n}\n\n/** \"Composite\" */\nclass CompositeGraphic implements Graphic {\n    //Collection of child graphics.\n    private final ArrayList<Graphic> childGraphics = new ArrayList<>();\n\n    //Adds the graphic to the composition.\n    public void add(Graphic graphic) {\n        childGraphics.add(graphic);\n    }\n\n    //Prints the graphic.\n    @Override\n    public void print() {\n        for (Graphic graphic : childGraphics) {\n            graphic.print();  //Delegation\n        }\n    }\n}\n\n/** \"Leaf\" */\nclass Ellipse implements Graphic {\n    //Prints the graphic.\n    @Override\n    public void print() {\n        System.out.println(\"Ellipse\");\n    }\n}\n\n/** Client */\npublic class CompositeDemo {\n    public static void main(String[] args) {\n        //Initialize four ellipses\n        Ellipse ellipse1 = new Ellipse();\n        Ellipse ellipse2 = new Ellipse();\n        Ellipse ellipse3 = new Ellipse();\n        Ellipse ellipse4 = new Ellipse();\n\n        //Creates two composites containing the ellipses\n        CompositeGraphic graphic2 = new CompositeGraphic();\n        graphic2.add(ellipse1);\n        graphic2.add(ellipse2);\n        graphic2.add(ellipse3);\n\n        CompositeGraphic graphic3 = new CompositeGraphic();\n        graphic3.add(ellipse4);\n\n        //Create another graphics that contains two graphics\n        CompositeGraphic graphic1 = new CompositeGraphic();\n        graphic1.add(graphic2);\n        graphic1.add(graphic3);\n\n        //Prints the complete graphic (Four times the string \"Ellipse\").\n        graphic1.print();\n    }\n}","position":{"start":{"line":111,"column":1,"offset":3051},"end":{"line":175,"column":4,"offset":4712},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":177,"column":4,"offset":4717},"end":{"line":177,"column":13,"offset":4726},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":4714},"end":{"line":177,"column":13,"offset":4726},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Composite_pattern","children":[{"type":"text","value":"Composite Wikipedia","position":{"start":{"line":179,"column":4,"offset":4731},"end":{"line":179,"column":23,"offset":4750},"indent":[]}}],"position":{"start":{"line":179,"column":3,"offset":4730},"end":{"line":179,"column":73,"offset":4800},"indent":[]}}],"position":{"start":{"line":179,"column":3,"offset":4730},"end":{"line":179,"column":73,"offset":4800},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":4728},"end":{"line":179,"column":73,"offset":4800},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":4728},"end":{"line":179,"column":73,"offset":4800},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":182,"column":1,"offset":4803},"end":{"line":182,"column":31,"offset":4833},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":182,"column":31,"offset":4833}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"composite-pattern\"\n    }}>{`Composite Pattern`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Composite Pattern`}</inlineCode>{` is a Gang Of Four structural Design Pattern that helps solve the following problems:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A part-whole hierarchy should be represented so that clients can treat part and whole objects uniformly.`}</li>\n      <li parentName=\"ol\">{`A part-whole hierarcy should be represented as tree structure.`}</li>\n    </ol>\n    <p>{`The Composite pattern will describe the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A unified `}<inlineCode parentName=\"li\">{`Component`}</inlineCode>{` interface for both part (Leaf) objects and whole (Composite) objects.`}</li>\n      <li parentName=\"ul\">{`Individual `}<inlineCode parentName=\"li\">{`Leaf`}</inlineCode>{` objects implement the `}<inlineCode parentName=\"li\">{`Component`}</inlineCode>{` interface directly, and `}<inlineCode parentName=\"li\">{`Composite`}</inlineCode>{` objects forward requests to their child components.`}</li>\n    </ul>\n    <p>{`Clients can then work through the `}<inlineCode parentName=\"p\">{`Component`}</inlineCode>{` interface to treat `}<inlineCode parentName=\"p\">{`Leaf`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Composite`}</inlineCode>{` objects uniformly.`}</p>\n    <p><inlineCode parentName=\"p\">{`Leaf`}</inlineCode>{` objects perform a request directly, and `}<inlineCode parentName=\"p\">{`Composite`}</inlineCode>{` objects forward the request to their child components recursively downwards the tree structure. This makes client classes easier to implement, change, test, and reuse.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface ArmyObject {\n  name: String;\n  operate(): void;\n}\n\nclass Team implements ArmyObject {\n  name: String;\n  private _soldiers: ArmyObject[];\n\n  constructor(name: String) {\n    this.name = name;\n    this._soldiers = [];\n  }\n\n  operate(): void {\n    console.log(\\`Team: \\${this.name} operates\\`);\n    this._soldiers.map((soldier: ArmyObject) => {\n      soldier.operate();\n    });\n  }\n\n  addSoldier(newSoldier: ArmyObject) {\n    const soldiers = this._soldiers.filter((soldier: ArmyObject, index) => {\n      return soldier.name === newSoldier.name;\n    });\n    if (soldiers.length < 1) {\n      console.log(\\`Soldier: \\${newSoldier.name} comes in \\${this.name}\\`);\n      this._soldiers.push(newSoldier);\n    } else {\n      console.log('The soldier is already in the team');\n    }\n  }\n\n  soldierGone(deadSoldier: ArmyObject) {\n    const deads = this._soldiers.map((soldier: ArmyObject, index) => {\n      if (soldier.name === deadSoldier.name) {\n        return index;\n      }\n    });\n    if (deads.length > 0) {\n      console.log(\\`Soldier: \\${deadSoldier.name} died in the fight\\`);\n      this._soldiers.slice(deads[0], 1);\n    } else {\n      console.log('No one dies');\n    }\n  }\n}\n\nclass Soldier implements ArmyObject {\n  name: String;\n\n  constructor(name: String) {\n    this.name = name;\n  }\n\n  operate() {\n    console.log(\\`Soldier: \\${this.name} soldier operates\\`);\n  }\n}\n\n(function main() {\n  const team = new Team('Seal Team 6');\n  const specialSquad = new Team('Seal Team 6 - Special Squad');\n\n  const soldierJoe = new Soldier('Joe');\n  const soldierJames = new Soldier('James');\n  const soldierRoy = new Soldier('Roy');\n  team.addSoldier(soldierJoe);\n  team.addSoldier(soldierJames);\n  team.addSoldier(soldierRoy);\n\n  const specialForceTommy = new Soldier('Tommy');\n\n  specialSquad.addSoldier(specialForceTommy);\n\n  team.operate();\n  specialSquad.operate();\n\n  team.soldierGone(soldierJames);\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"java-graphic-example\"\n    }}>{`Java Graphic Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import java.util.ArrayList;\n\n/** \"Component\" */\ninterface Graphic {\n    //Prints the graphic.\n    public void print();\n}\n\n/** \"Composite\" */\nclass CompositeGraphic implements Graphic {\n    //Collection of child graphics.\n    private final ArrayList<Graphic> childGraphics = new ArrayList<>();\n\n    //Adds the graphic to the composition.\n    public void add(Graphic graphic) {\n        childGraphics.add(graphic);\n    }\n\n    //Prints the graphic.\n    @Override\n    public void print() {\n        for (Graphic graphic : childGraphics) {\n            graphic.print();  //Delegation\n        }\n    }\n}\n\n/** \"Leaf\" */\nclass Ellipse implements Graphic {\n    //Prints the graphic.\n    @Override\n    public void print() {\n        System.out.println(\"Ellipse\");\n    }\n}\n\n/** Client */\npublic class CompositeDemo {\n    public static void main(String[] args) {\n        //Initialize four ellipses\n        Ellipse ellipse1 = new Ellipse();\n        Ellipse ellipse2 = new Ellipse();\n        Ellipse ellipse3 = new Ellipse();\n        Ellipse ellipse4 = new Ellipse();\n\n        //Creates two composites containing the ellipses\n        CompositeGraphic graphic2 = new CompositeGraphic();\n        graphic2.add(ellipse1);\n        graphic2.add(ellipse2);\n        graphic2.add(ellipse3);\n\n        CompositeGraphic graphic3 = new CompositeGraphic();\n        graphic3.add(ellipse4);\n\n        //Create another graphics that contains two graphics\n        CompositeGraphic graphic1 = new CompositeGraphic();\n        graphic1.add(graphic2);\n        graphic1.add(graphic3);\n\n        //Prints the complete graphic (Four times the string \"Ellipse\").\n        graphic1.print();\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Composite_pattern\"\n        }}>{`Composite Wikipedia`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}