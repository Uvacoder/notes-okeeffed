{"expireTime":9007200867335930000,"key":"gatsby-plugin-mdx-entire-payload-ea762df190fa09b54631955579179789-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Kotlin Examples","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":18,"offset":184},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":18,"offset":184},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Plus Minus","position":{"start":{"line":10,"column":4,"offset":189},"end":{"line":10,"column":14,"offset":199},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":186},"end":{"line":10,"column":14,"offset":199},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Input:","position":{"start":{"line":12,"column":1,"offset":201},"end":{"line":12,"column":7,"offset":207},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":201},"end":{"line":12,"column":7,"offset":207},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"6\n-4 3 -9 0 4 1","position":{"start":{"line":14,"column":1,"offset":209},"end":{"line":17,"column":4,"offset":237},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Output:","position":{"start":{"line":19,"column":1,"offset":239},"end":{"line":19,"column":8,"offset":246},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":239},"end":{"line":19,"column":8,"offset":246},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"0.500000\n0.333333\n0.166667","position":{"start":{"line":21,"column":1,"offset":248},"end":{"line":25,"column":4,"offset":287},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Prints positive, negative and zeroes.","position":{"start":{"line":27,"column":1,"offset":289},"end":{"line":27,"column":38,"offset":326},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":289},"end":{"line":27,"column":38,"offset":326},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"fun plusMinus(arr: Array<Int>): Unit {\n    var positive = 0\n    var negative = 0\n    var zeroes = 0\n\n    for (i in arr) {\n        when {\n            i > 0 -> positive++\n            i < 0 -> negative++\n            else -> zeroes++\n        }\n    }\n\n    println(1.0 / arr.size * positive)\n    println(1.0 / arr.size * negative)\n    println(1.0 / arr.size * zeroes)\n}","position":{"start":{"line":29,"column":1,"offset":328},"end":{"line":47,"column":4,"offset":705},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Nullable Types","position":{"start":{"line":49,"column":4,"offset":710},"end":{"line":49,"column":18,"offset":724},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":707},"end":{"line":49,"column":18,"offset":724},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"var errorCode: Int?\n\nerrorCode = 100\n// or for null\nerrorCode = null","position":{"start":{"line":51,"column":1,"offset":726},"end":{"line":57,"column":4,"offset":808},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note that treating nullable types from non-nullable types will have unusual repercussions:","position":{"start":{"line":59,"column":1,"offset":810},"end":{"line":59,"column":91,"offset":900},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":810},"end":{"line":59,"column":91,"offset":900},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"var result: Int? = 30\nprintln(result) // 30\n\nprintln(result + 1) // throws error \"Operator call corresponds to a dot-qualified call 'result.plus(1)' which is not allowed on a nullable receiver 'result'.\"","position":{"start":{"line":61,"column":1,"offset":902},"end":{"line":66,"column":4,"offset":1119},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Unwrapping nullable values","position":{"start":{"line":68,"column":5,"offset":1125},"end":{"line":68,"column":31,"offset":1151},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1121},"end":{"line":68,"column":31,"offset":1151},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are two different methods you can use to remove these nullables from the box. The first is using the not-null assertion operator !! (use these sparingly):","position":{"start":{"line":70,"column":1,"offset":1153},"end":{"line":70,"column":161,"offset":1313},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1153},"end":{"line":70,"column":161,"offset":1313},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val ageAfterBirthday = authorAge!! + 1\nprintln(\"After their next birthday, author will bne $ageAfterBirthday\") // prints as expected","position":{"start":{"line":72,"column":1,"offset":1315},"end":{"line":75,"column":4,"offset":1461},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Smart Casts","position":{"start":{"line":77,"column":5,"offset":1467},"end":{"line":77,"column":16,"offset":1478},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":1463},"end":{"line":77,"column":16,"offset":1478},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is the second way to go about it.","position":{"start":{"line":79,"column":1,"offset":1480},"end":{"line":79,"column":39,"offset":1518},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":1480},"end":{"line":79,"column":39,"offset":1518},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"var nonNullableAuthor: String\nvar nullableAuthor: String?\nif (authorName != null) {\n  nonNullableAuthor = authorName\n} else {\n  nullableAuthor = authorName\n}","position":{"start":{"line":81,"column":1,"offset":1520},"end":{"line":89,"column":4,"offset":1691},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Safe Calls","position":{"start":{"line":91,"column":5,"offset":1697},"end":{"line":91,"column":15,"offset":1707},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":1693},"end":{"line":91,"column":15,"offset":1707},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using the ","position":{"start":{"line":93,"column":1,"offset":1709},"end":{"line":93,"column":11,"offset":1719},"indent":[]}},{"type":"inlineCode","value":"?.","position":{"start":{"line":93,"column":11,"offset":1719},"end":{"line":93,"column":15,"offset":1723},"indent":[]}},{"type":"text","value":" operator:","position":{"start":{"line":93,"column":15,"offset":1723},"end":{"line":93,"column":25,"offset":1733},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":1709},"end":{"line":93,"column":25,"offset":1733},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val nameLength = authorName?.length\nprintln(\"Author's name has length $nameLength.\")\n// > Author's name has length 10.","position":{"start":{"line":95,"column":1,"offset":1735},"end":{"line":99,"column":4,"offset":1867},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"let() function","position":{"start":{"line":101,"column":5,"offset":1873},"end":{"line":101,"column":19,"offset":1887},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":1869},"end":{"line":101,"column":19,"offset":1887},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"authorName?.let {\n  nonNullableAuthor = authorName\n}","position":{"start":{"line":103,"column":1,"offset":1889},"end":{"line":107,"column":4,"offset":1955},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Elvis Operator","position":{"start":{"line":109,"column":5,"offset":1961},"end":{"line":109,"column":19,"offset":1975},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":1957},"end":{"line":109,"column":19,"offset":1975},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"var nullableInt: Int? = 10\nvar mustHaveResult = nullableInt ?: 0","position":{"start":{"line":111,"column":1,"offset":1977},"end":{"line":114,"column":4,"offset":2055},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The following is equivalent:","position":{"start":{"line":116,"column":1,"offset":2057},"end":{"line":116,"column":29,"offset":2085},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":2057},"end":{"line":116,"column":29,"offset":2085},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"// this...\nvar nullableInt: Int? = 10\nvar mustHaveResult = if (nullableInt != null) nullableInt else 0\n\n// ...is the same as this\nnullableInt = null\nmustHaveResult = nullableInt ?: 0","position":{"start":{"line":118,"column":1,"offset":2087},"end":{"line":126,"column":4,"offset":2283},"indent":[1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":129,"column":1,"offset":2286},"end":{"line":129,"column":31,"offset":2316},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":129,"column":31,"offset":2316}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"kotlin-examples\"\n    }}>{`Kotlin Examples`}</h1>\n    <h2 {...{\n      \"id\": \"plus-minus\"\n    }}>{`Plus Minus`}</h2>\n    <p>{`Input:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`6\n-4 3 -9 0 4 1\n`}</code></pre>\n    <p>{`Output:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`0.500000\n0.333333\n0.166667\n`}</code></pre>\n    <p>{`Prints positive, negative and zeroes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun plusMinus(arr: Array<Int>): Unit {\n    var positive = 0\n    var negative = 0\n    var zeroes = 0\n\n    for (i in arr) {\n        when {\n            i > 0 -> positive++\n            i < 0 -> negative++\n            else -> zeroes++\n        }\n    }\n\n    println(1.0 / arr.size * positive)\n    println(1.0 / arr.size * negative)\n    println(1.0 / arr.size * zeroes)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nullable-types\"\n    }}>{`Nullable Types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var errorCode: Int?\n\nerrorCode = 100\n// or for null\nerrorCode = null\n`}</code></pre>\n    <p>{`Note that treating nullable types from non-nullable types will have unusual repercussions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var result: Int? = 30\nprintln(result) // 30\n\nprintln(result + 1) // throws error \"Operator call corresponds to a dot-qualified call 'result.plus(1)' which is not allowed on a nullable receiver 'result'.\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"unwrapping-nullable-values\"\n    }}>{`Unwrapping nullable values`}</h3>\n    <p>{`There are two different methods you can use to remove these nullables from the box. The first is using the not-null assertion operator !! (use these sparingly):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val ageAfterBirthday = authorAge!! + 1\nprintln(\"After their next birthday, author will bne $ageAfterBirthday\") // prints as expected\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"smart-casts\"\n    }}>{`Smart Casts`}</h3>\n    <p>{`This is the second way to go about it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var nonNullableAuthor: String\nvar nullableAuthor: String?\nif (authorName != null) {\n  nonNullableAuthor = authorName\n} else {\n  nullableAuthor = authorName\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"safe-calls\"\n    }}>{`Safe Calls`}</h3>\n    <p>{`Using the `}<inlineCode parentName=\"p\">{`?.`}</inlineCode>{` operator:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val nameLength = authorName?.length\nprintln(\"Author's name has length $nameLength.\")\n// > Author's name has length 10.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"let-function\"\n    }}>{`let() function`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`authorName?.let {\n  nonNullableAuthor = authorName\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"elvis-operator\"\n    }}>{`Elvis Operator`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var nullableInt: Int? = 10\nvar mustHaveResult = nullableInt ?: 0\n`}</code></pre>\n    <p>{`The following is equivalent:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// this...\nvar nullableInt: Int? = 10\nvar mustHaveResult = if (nullableInt != null) nullableInt else 0\n\n// ...is the same as this\nnullableInt = null\nmustHaveResult = nullableInt ?: 0\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}