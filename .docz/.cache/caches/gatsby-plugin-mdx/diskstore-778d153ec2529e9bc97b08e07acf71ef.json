{"expireTime":9007200867335939000,"key":"gatsby-plugin-mdx-entire-payload-86b9ab25857bc80c1dbec9b07a24fbf1-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"State Machines in JavaScript with XState","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":43,"offset":209},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":43,"offset":209},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This comes from the State Machines course on Frontend Master. Please support the course.","position":{"start":{"line":10,"column":1,"offset":211},"end":{"line":10,"column":89,"offset":299},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":211},"end":{"line":10,"column":89,"offset":299},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":12,"column":4,"offset":304},"end":{"line":12,"column":13,"offset":313},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":301},"end":{"line":12,"column":13,"offset":313},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://frontendmasters.com/courses/xstate/introduction/","children":[{"type":"text","value":"State Machines course","position":{"start":{"line":14,"column":5,"offset":319},"end":{"line":14,"column":26,"offset":340},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":318},"end":{"line":14,"column":85,"offset":399},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":318},"end":{"line":14,"column":85,"offset":399},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":315},"end":{"line":14,"column":85,"offset":399},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/davidkpiano/frontend-masters-xstate-workshop","children":[{"type":"text","value":"Course repo","position":{"start":{"line":15,"column":5,"offset":404},"end":{"line":15,"column":16,"offset":415},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":403},"end":{"line":15,"column":82,"offset":481},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":403},"end":{"line":15,"column":82,"offset":481},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":400},"end":{"line":15,"column":82,"offset":481},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://static.frontendmasters.com/resources/2020-05-14-state-machines-xstate/state-machine-xstate.pdf","children":[{"type":"text","value":"Slides","position":{"start":{"line":16,"column":5,"offset":486},"end":{"line":16,"column":11,"offset":492},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":485},"end":{"line":16,"column":116,"offset":597},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":485},"end":{"line":16,"column":116,"offset":597},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":482},"end":{"line":16,"column":116,"offset":597},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":315},"end":{"line":16,"column":116,"offset":597},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of this workshop is to understand state machines with no libraries before moving on.","position":{"start":{"line":18,"column":1,"offset":599},"end":{"line":18,"column":93,"offset":691},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":599},"end":{"line":18,"column":93,"offset":691},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Bottom Up Code","position":{"start":{"line":20,"column":4,"offset":696},"end":{"line":20,"column":18,"offset":710},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":693},"end":{"line":20,"column":18,"offset":710},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The example here has a button with an event listener added. This is generally how we work: we put all of our application logic inside of the event handlers themselves.","position":{"start":{"line":22,"column":1,"offset":712},"end":{"line":22,"column":168,"offset":879},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":712},"end":{"line":22,"column":168,"offset":879},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The issue with the event handler mentioned is that multiple clicks run, we could continually be refetching data.","position":{"start":{"line":24,"column":1,"offset":881},"end":{"line":24,"column":113,"offset":993},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":881},"end":{"line":24,"column":113,"offset":993},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now the application lives inside the applicatin handlers, which is not what we want. This style of coding to \"just get it done\" is considered ","position":{"start":{"line":26,"column":1,"offset":995},"end":{"line":26,"column":143,"offset":1137},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"bottom up","position":{"start":{"line":26,"column":145,"offset":1139},"end":{"line":26,"column":154,"offset":1148},"indent":[]}}],"position":{"start":{"line":26,"column":143,"offset":1137},"end":{"line":26,"column":156,"offset":1150},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":26,"column":156,"offset":1150},"end":{"line":26,"column":157,"offset":1151},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":995},"end":{"line":26,"column":157,"offset":1151},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It makes it:","position":{"start":{"line":28,"column":1,"offset":1153},"end":{"line":28,"column":13,"offset":1165},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1153},"end":{"line":28,"column":13,"offset":1165},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Difficult to test.","position":{"start":{"line":30,"column":3,"offset":1169},"end":{"line":30,"column":21,"offset":1187},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1169},"end":{"line":30,"column":21,"offset":1187},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1167},"end":{"line":30,"column":21,"offset":1187},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Difficult to understand.","position":{"start":{"line":31,"column":3,"offset":1190},"end":{"line":31,"column":27,"offset":1214},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":1190},"end":{"line":31,"column":27,"offset":1214},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1188},"end":{"line":31,"column":27,"offset":1214},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Will contain bugs.","position":{"start":{"line":32,"column":3,"offset":1217},"end":{"line":32,"column":21,"offset":1235},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":1217},"end":{"line":32,"column":21,"offset":1235},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1215},"end":{"line":32,"column":21,"offset":1235},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Difficult to enhance.","position":{"start":{"line":33,"column":3,"offset":1238},"end":{"line":33,"column":24,"offset":1259},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":1238},"end":{"line":33,"column":24,"offset":1259},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1236},"end":{"line":33,"column":24,"offset":1259},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Features make it worse.","position":{"start":{"line":34,"column":3,"offset":1262},"end":{"line":34,"column":26,"offset":1285},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":1262},"end":{"line":34,"column":26,"offset":1285},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1260},"end":{"line":34,"column":26,"offset":1285},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1167},"end":{"line":34,"column":26,"offset":1285},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Why use state machines and statecharts?","position":{"start":{"line":36,"column":4,"offset":1290},"end":{"line":36,"column":43,"offset":1329},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1287},"end":{"line":36,"column":43,"offset":1329},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Visualized modelling","position":{"start":{"line":38,"column":4,"offset":1334},"end":{"line":38,"column":24,"offset":1354},"indent":[]}}],"position":{"start":{"line":38,"column":4,"offset":1334},"end":{"line":38,"column":24,"offset":1354},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1331},"end":{"line":38,"column":24,"offset":1354},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Precise diagrams","position":{"start":{"line":39,"column":4,"offset":1358},"end":{"line":39,"column":20,"offset":1374},"indent":[]}}],"position":{"start":{"line":39,"column":4,"offset":1358},"end":{"line":39,"column":20,"offset":1374},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1355},"end":{"line":39,"column":20,"offset":1374},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Automatic code generation","position":{"start":{"line":40,"column":4,"offset":1378},"end":{"line":40,"column":29,"offset":1403},"indent":[]}}],"position":{"start":{"line":40,"column":4,"offset":1378},"end":{"line":40,"column":29,"offset":1403},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1375},"end":{"line":40,"column":29,"offset":1403},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Comprehensive test coverage","position":{"start":{"line":41,"column":4,"offset":1407},"end":{"line":41,"column":31,"offset":1434},"indent":[]}}],"position":{"start":{"line":41,"column":4,"offset":1407},"end":{"line":41,"column":31,"offset":1434},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1404},"end":{"line":41,"column":31,"offset":1434},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Accomodation of late-breaking requirements changes","position":{"start":{"line":42,"column":4,"offset":1438},"end":{"line":42,"column":54,"offset":1488},"indent":[]}}],"position":{"start":{"line":42,"column":4,"offset":1438},"end":{"line":42,"column":54,"offset":1488},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1435},"end":{"line":42,"column":54,"offset":1488},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1331},"end":{"line":42,"column":54,"offset":1488},"indent":[1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The benefit of the diagrams gives the logic in completeness. This is great for those who are seeing this without a technical background.","position":{"start":{"line":44,"column":3,"offset":1492},"end":{"line":44,"column":139,"offset":1628},"indent":[]}}],"position":{"start":{"line":44,"column":3,"offset":1492},"end":{"line":44,"column":139,"offset":1628},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1490},"end":{"line":44,"column":139,"offset":1628},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Graphs","position":{"start":{"line":46,"column":4,"offset":1633},"end":{"line":46,"column":10,"offset":1639},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1630},"end":{"line":46,"column":10,"offset":1639},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This section speaks to graph theory.","position":{"start":{"line":48,"column":1,"offset":1641},"end":{"line":48,"column":37,"offset":1677},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1641},"end":{"line":48,"column":37,"offset":1677},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The part on directed graphs speaks on the terms of \"source\", \"transfer\" and \"sink\" nodes.","position":{"start":{"line":50,"column":1,"offset":1679},"end":{"line":50,"column":90,"offset":1768},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1679},"end":{"line":50,"column":90,"offset":1768},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Finite State Machines","position":{"start":{"line":52,"column":4,"offset":1773},"end":{"line":52,"column":25,"offset":1794},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1770},"end":{"line":52,"column":25,"offset":1794},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A kind of directed graph consider a quintuple (five important parts).","position":{"start":{"line":54,"column":1,"offset":1796},"end":{"line":54,"column":70,"offset":1865},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1796},"end":{"line":54,"column":70,"offset":1865},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There is an example of going through the lifecycle of a JavaScript Promise. It speaks to the transition states.","position":{"start":{"line":56,"column":1,"offset":1867},"end":{"line":56,"column":112,"offset":1978},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1867},"end":{"line":56,"column":112,"offset":1978},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The parts of the state machine:","position":{"start":{"line":58,"column":1,"offset":1980},"end":{"line":58,"column":32,"offset":2011},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1980},"end":{"line":58,"column":32,"offset":2011},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Finite states","position":{"start":{"line":60,"column":4,"offset":2016},"end":{"line":60,"column":17,"offset":2029},"indent":[]}}],"position":{"start":{"line":60,"column":4,"offset":2016},"end":{"line":60,"column":17,"offset":2029},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2013},"end":{"line":60,"column":17,"offset":2029},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Transitions","position":{"start":{"line":61,"column":4,"offset":2033},"end":{"line":61,"column":15,"offset":2044},"indent":[]}}],"position":{"start":{"line":61,"column":4,"offset":2033},"end":{"line":61,"column":15,"offset":2044},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":2030},"end":{"line":61,"column":15,"offset":2044},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Events (labelled on edges/transitions)","position":{"start":{"line":62,"column":4,"offset":2048},"end":{"line":62,"column":42,"offset":2086},"indent":[]}}],"position":{"start":{"line":62,"column":4,"offset":2048},"end":{"line":62,"column":42,"offset":2086},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2045},"end":{"line":62,"column":42,"offset":2086},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Initial state (all FSMs start with this) - there is a dot to represent a \"pseudo-transition\" in the graphs.","position":{"start":{"line":63,"column":4,"offset":2090},"end":{"line":63,"column":111,"offset":2197},"indent":[]}}],"position":{"start":{"line":63,"column":4,"offset":2090},"end":{"line":63,"column":111,"offset":2197},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":2087},"end":{"line":63,"column":111,"offset":2197},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Final states (not to be covered too much)","position":{"start":{"line":64,"column":4,"offset":2201},"end":{"line":64,"column":45,"offset":2242},"indent":[]}}],"position":{"start":{"line":64,"column":4,"offset":2201},"end":{"line":64,"column":45,"offset":2242},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2198},"end":{"line":64,"column":45,"offset":2242},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2013},"end":{"line":64,"column":45,"offset":2242},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"An entry example","position":{"start":{"line":66,"column":4,"offset":2247},"end":{"line":66,"column":20,"offset":2263},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2244},"end":{"line":66,"column":20,"offset":2263},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To model the states, the example uses a function for ","position":{"start":{"line":68,"column":1,"offset":2265},"end":{"line":68,"column":54,"offset":2318},"indent":[]}},{"type":"inlineCode","value":"transition","position":{"start":{"line":68,"column":54,"offset":2318},"end":{"line":68,"column":66,"offset":2330},"indent":[]}},{"type":"text","value":" to model the Promise with a switch statement that switches on the ","position":{"start":{"line":68,"column":66,"offset":2330},"end":{"line":68,"column":133,"offset":2397},"indent":[]}},{"type":"inlineCode","value":"state","position":{"start":{"line":68,"column":133,"offset":2397},"end":{"line":68,"column":140,"offset":2404},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":68,"column":140,"offset":2404},"end":{"line":68,"column":141,"offset":2405},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2265},"end":{"line":68,"column":141,"offset":2405},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It has switches within switches in this example, and some odd representations, but the idea is that it always covered all possible states.","position":{"start":{"line":70,"column":1,"offset":2407},"end":{"line":70,"column":139,"offset":2545},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2407},"end":{"line":70,"column":139,"offset":2545},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As for using an object instead of a switch:","position":{"start":{"line":72,"column":1,"offset":2547},"end":{"line":72,"column":44,"offset":2590},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":2547},"end":{"line":72,"column":44,"offset":2590},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const machine = {\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        FETCH: 'pending'\n      }\n    },\n    pending: {\n      on: {\n        RESOLVE: 'resolved',\n        REJECT: 'reject'\n      }\n    }\n    resolved: {},\n    rejected: {}\n  }\n}\n\nfunction transition(state,event) {\n  return machine\n    .states[state]?\n    .on?.[event]\n    || state\n}","position":{"start":{"line":74,"column":1,"offset":2592},"end":{"line":100,"column":4,"offset":2955},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Interpreting state machines:","position":{"start":{"line":102,"column":1,"offset":2957},"end":{"line":102,"column":29,"offset":2985},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":2957},"end":{"line":102,"column":29,"offset":2985},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// keep track of state\nlet currentState = machine.initial;\n\n// receive events\nfunction send(event) {\n  // Determine the next state\n  const nextState = transition(currentState, event);\n\n  // Update the current state\n  currentState = nextState;\n}\n\n// Send some event\nsend('CLICK');","position":{"start":{"line":104,"column":1,"offset":2987},"end":{"line":119,"column":4,"offset":3276},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"XState","position":{"start":{"line":121,"column":4,"offset":3281},"end":{"line":121,"column":10,"offset":3287},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":3278},"end":{"line":121,"column":10,"offset":3287},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Simplifies the issues with adding/cleaning up listeners + far more.","position":{"start":{"line":123,"column":1,"offset":3289},"end":{"line":123,"column":68,"offset":3356},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3289},"end":{"line":123,"column":68,"offset":3356},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"npm i xstate","position":{"start":{"line":125,"column":1,"offset":3358},"end":{"line":127,"column":4,"offset":3379},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using it in the file:","position":{"start":{"line":129,"column":1,"offset":3381},"end":{"line":129,"column":22,"offset":3402},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":3381},"end":{"line":129,"column":22,"offset":3402},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import { createMachine } from 'xstate';\n\nconst feedbackMachine = createMachine({\n  initial: 'question',\n  states: {\n    question: {\n      // transitions:\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n      },\n    },\n    form: {\n      // transitions\n      on: {\n        SUBMIT: {\n          target: 'thanks',\n        },\n      },\n    },\n    thanks: {\n      // ...\n      on: {\n        CLOSE: 'closed',\n      },\n    },\n    closed: {\n      // Setting final node\n      type: 'final',\n    },\n  },\n});\n\n// Note, the following is long-hand\nconst feedbackMachine = createMachine({\n  states: {\n    on: {\n      SUBMIT: {\n        target: 'thanks',\n      },\n    },\n  },\n});\n// ... for ...\ncreateMachine({\n  states: {\n    on: {\n      SUBMIT: 'thanks',\n    },\n  },\n});\n\n// initial state\nconst initialState = feedbackMachine.initialState;\n\n// An `event` is an object with a `type`\nconst clickGoodEvent = {\n  type: 'CLICK_GOOD',\n};\n\n// An event object with payload\nconst submitEvent = {\n  type: 'SUBMIT',\n  feedback: 'Very good, thank you',\n};\n\nconst nextState = feedbackMachine.transition(\n  feedbackMachine.initialState,\n  clickGoodEvent,\n);","position":{"start":{"line":131,"column":1,"offset":3404},"end":{"line":202,"column":4,"offset":4561},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Events are objects so we can pass in custom payloads.","position":{"start":{"line":204,"column":1,"offset":4563},"end":{"line":204,"column":54,"offset":4616},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":4563},"end":{"line":204,"column":54,"offset":4616},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Interpret function","position":{"start":{"line":206,"column":4,"offset":4621},"end":{"line":206,"column":22,"offset":4639},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":4618},"end":{"line":206,"column":22,"offset":4639},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Creates a service: a running instance of a machine.","position":{"start":{"line":208,"column":1,"offset":4641},"end":{"line":208,"column":52,"offset":4692},"indent":[]}}],"position":{"start":{"line":208,"column":1,"offset":4641},"end":{"line":208,"column":52,"offset":4692},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import { createMachine, interpet } from 'xstate';\n\n// omitted set up feedbackMachine\n\nconst feedbackService = interpret(feedbackMachine);\n\nfeedbackService.onTransitin(state => {\n  console.log(state);\n});\n\nfeedbackService.start();\n\n// when you're done for clanup\nfeedbackService.stop();","position":{"start":{"line":210,"column":1,"offset":4694},"end":{"line":225,"column":4,"offset":4989},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Visualize","position":{"start":{"line":227,"column":4,"offset":4994},"end":{"line":227,"column":13,"offset":5003},"indent":[]}}],"position":{"start":{"line":227,"column":1,"offset":4991},"end":{"line":227,"column":13,"offset":5003},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One of the benefits of XState is that you can visualize the machine!","position":{"start":{"line":229,"column":1,"offset":5005},"end":{"line":229,"column":69,"offset":5073},"indent":[]}}],"position":{"start":{"line":229,"column":1,"offset":5005},"end":{"line":229,"column":69,"offset":5073},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"XState Actions","position":{"start":{"line":231,"column":4,"offset":5078},"end":{"line":231,"column":18,"offset":5092},"indent":[]}}],"position":{"start":{"line":231,"column":1,"offset":5075},"end":{"line":231,"column":18,"offset":5092},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://xstate.js.org/docs/guides/actions.html","children":[{"type":"text","value":"Action docs","position":{"start":{"line":233,"column":2,"offset":5095},"end":{"line":233,"column":13,"offset":5106},"indent":[]}}],"position":{"start":{"line":233,"column":1,"offset":5094},"end":{"line":233,"column":62,"offset":5155},"indent":[]}}],"position":{"start":{"line":233,"column":1,"offset":5094},"end":{"line":233,"column":62,"offset":5155},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Transition actions: Moving between states","position":{"start":{"line":235,"column":4,"offset":5160},"end":{"line":235,"column":45,"offset":5201},"indent":[]}}],"position":{"start":{"line":235,"column":4,"offset":5160},"end":{"line":235,"column":45,"offset":5201},"indent":[]}}],"position":{"start":{"line":235,"column":1,"offset":5157},"end":{"line":235,"column":45,"offset":5201},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Entry actions: Entering into state","position":{"start":{"line":236,"column":4,"offset":5205},"end":{"line":236,"column":38,"offset":5239},"indent":[]}}],"position":{"start":{"line":236,"column":4,"offset":5205},"end":{"line":236,"column":38,"offset":5239},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":5202},"end":{"line":236,"column":38,"offset":5239},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Exit actions: Exiting state","position":{"start":{"line":237,"column":4,"offset":5243},"end":{"line":237,"column":31,"offset":5270},"indent":[]}}],"position":{"start":{"line":237,"column":4,"offset":5243},"end":{"line":237,"column":31,"offset":5270},"indent":[]}}],"position":{"start":{"line":237,"column":1,"offset":5240},"end":{"line":237,"column":31,"offset":5270},"indent":[]}}],"position":{"start":{"line":235,"column":1,"offset":5157},"end":{"line":237,"column":31,"offset":5270},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":239,"column":1,"offset":5272},"end":{"line":239,"column":5,"offset":5276},"indent":[]}},{"type":"inlineCode","value":"Action order","position":{"start":{"line":239,"column":5,"offset":5276},"end":{"line":239,"column":19,"offset":5290},"indent":[]}},{"type":"text","value":" will go ","position":{"start":{"line":239,"column":19,"offset":5290},"end":{"line":239,"column":28,"offset":5299},"indent":[]}},{"type":"inlineCode","value":"exit","position":{"start":{"line":239,"column":28,"offset":5299},"end":{"line":239,"column":34,"offset":5305},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":239,"column":34,"offset":5305},"end":{"line":239,"column":36,"offset":5307},"indent":[]}},{"type":"inlineCode","value":"transition","position":{"start":{"line":239,"column":36,"offset":5307},"end":{"line":239,"column":48,"offset":5319},"indent":[]}},{"type":"text","value":", then ","position":{"start":{"line":239,"column":48,"offset":5319},"end":{"line":239,"column":55,"offset":5326},"indent":[]}},{"type":"inlineCode","value":"entry","position":{"start":{"line":239,"column":55,"offset":5326},"end":{"line":239,"column":62,"offset":5333},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":239,"column":62,"offset":5333},"end":{"line":239,"column":64,"offset":5335},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"We do not want to rely on action order too much.","position":{"start":{"line":239,"column":66,"offset":5337},"end":{"line":239,"column":114,"offset":5385},"indent":[]}}],"position":{"start":{"line":239,"column":64,"offset":5335},"end":{"line":239,"column":116,"offset":5387},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":5272},"end":{"line":239,"column":116,"offset":5387},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These actions when added could look like this:","position":{"start":{"line":241,"column":1,"offset":5389},"end":{"line":241,"column":47,"offset":5435},"indent":[]}}],"position":{"start":{"line":241,"column":1,"offset":5389},"end":{"line":241,"column":47,"offset":5435},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const enterActive = () => console.log('Enter')\n\nconst transitionActive = () => console.log('Transition')\n\nconst exitActive = () => console.log('Exit')\n\nconst enterInctive = () => console.log('Enter inactive')\n\nconst feedbackMachine = createMachine({\n  states: {\n    entry: enterActive\n    on: {\n      CLICK: {\n        target: 'thanks',\n        action: transitionActive\n      },\n    },\n    exit: exitActive\n  },\n});","position":{"start":{"line":243,"column":1,"offset":5437},"end":{"line":264,"column":4,"offset":5861},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You could pass multiple actions as an ","position":{"start":{"line":266,"column":1,"offset":5863},"end":{"line":266,"column":39,"offset":5901},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"array","position":{"start":{"line":266,"column":41,"offset":5903},"end":{"line":266,"column":46,"offset":5908},"indent":[]}}],"position":{"start":{"line":266,"column":39,"offset":5901},"end":{"line":266,"column":48,"offset":5910},"indent":[]}},{"type":"text","value":". Remember: ","position":{"start":{"line":266,"column":48,"offset":5910},"end":{"line":266,"column":60,"offset":5922},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"do not rely on order","position":{"start":{"line":266,"column":62,"offset":5924},"end":{"line":266,"column":82,"offset":5944},"indent":[]}}],"position":{"start":{"line":266,"column":60,"offset":5922},"end":{"line":266,"column":84,"offset":5946},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":266,"column":84,"offset":5946},"end":{"line":266,"column":85,"offset":5947},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":5863},"end":{"line":266,"column":85,"offset":5947},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can also pass the actions in the second argument to ","position":{"start":{"line":268,"column":1,"offset":5949},"end":{"line":268,"column":56,"offset":6004},"indent":[]}},{"type":"inlineCode","value":"createMachine","position":{"start":{"line":268,"column":56,"offset":6004},"end":{"line":268,"column":71,"offset":6019},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":268,"column":71,"offset":6019},"end":{"line":268,"column":72,"offset":6020},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":5949},"end":{"line":268,"column":72,"offset":6020},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const feedbackMachine = createMachine(\n  {\n    states: {\n      entry: ['enterActive', 'sendTelemetry'],\n      on: {\n        CLICK: {\n          target: 'thanks',\n          action: 'transitionActive',\n        },\n      },\n      exit: 'exitActive',\n    },\n  },\n  {\n    actions: {\n      enterActive: () => console.log('Enter'),\n      sendTelemetry: () => console.log('sendTelemetry'),\n      transitionActive: () => console.log('Transition'),\n      exitActive: () => console.log('Exit'),\n      enterInctive: () => console.log('Enter inactive'),\n    },\n  },\n);","position":{"start":{"line":270,"column":1,"offset":6022},"end":{"line":294,"column":4,"offset":6585},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Context + Assignment","position":{"start":{"line":296,"column":5,"offset":6591},"end":{"line":296,"column":25,"offset":6611},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":6587},"end":{"line":296,"column":25,"offset":6611},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import {createMachine, assign} from 'xstate'\n\nconst feedbackMachine = createMachine(\n  {\n    initial: 'entry',\n    context: {\n      count: 0\n    }\n    states: {\n      // prefer this object syntax\n      // to wholesale function syntax\n      entry: assign({\n        count: (context, event) => {\n          return context.count + 1\n        }\n      })\n      on: {\n        CLICK: {\n          target: 'thanks',\n          action: 'transitionActive',\n        },\n      },\n      exit: 'exitActive',\n    },\n  },\n)","position":{"start":{"line":298,"column":1,"offset":6613},"end":{"line":325,"column":4,"offset":7124},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Transitions","position":{"start":{"line":327,"column":4,"offset":7129},"end":{"line":327,"column":15,"offset":7140},"indent":[]}}],"position":{"start":{"line":327,"column":1,"offset":7126},"end":{"line":327,"column":15,"offset":7140},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://xstate.js.org/docs/guides/guards.html","children":[{"type":"text","value":"Guarded Transition docs","position":{"start":{"line":329,"column":2,"offset":7143},"end":{"line":329,"column":25,"offset":7166},"indent":[]}}],"position":{"start":{"line":329,"column":1,"offset":7142},"end":{"line":329,"column":73,"offset":7214},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":329,"column":73,"offset":7214},"end":{"line":329,"column":74,"offset":7215},"indent":[]}}],"position":{"start":{"line":329,"column":1,"offset":7142},"end":{"line":329,"column":74,"offset":7215},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Conditional Predicates","position":{"start":{"line":331,"column":5,"offset":7221},"end":{"line":331,"column":27,"offset":7243},"indent":[]}}],"position":{"start":{"line":331,"column":1,"offset":7217},"end":{"line":331,"column":27,"offset":7243},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example here used for retries:","position":{"start":{"line":333,"column":1,"offset":7245},"end":{"line":333,"column":31,"offset":7275},"indent":[]}}],"position":{"start":{"line":333,"column":1,"offset":7245},"end":{"line":333,"column":31,"offset":7275},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import {createMachine, assign} from 'xstate'\n\nconst feedbackMachine = createMachine(\n  {\n    initial: 'entry',\n    context: {\n      count: 0\n    }\n    states: {\n      failure: {\n        on: {\n          RETRY: {\n            target: 'loading',\n            actions: assign({\n              retries: (context, event) => context.retries + 1\n            })\n            // HERE is the conditional\n            cond: 'noExceededRetries'\n          }\n        }\n      }\n    },\n  },\n  {\n    // guard for conditional\n    guards: {\n      noExceededRetries: (context, event) => {\n        return context.retries < 5\n      }\n    }\n  }\n)","position":{"start":{"line":335,"column":1,"offset":7277},"end":{"line":368,"column":4,"offset":7904},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Transient Transitions","position":{"start":{"line":370,"column":5,"offset":7910},"end":{"line":370,"column":26,"offset":7931},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":7906},"end":{"line":370,"column":26,"offset":7931},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://xstate.js.org/docs/guides/transitions.html#transient-transitions","children":[{"type":"text","value":"Transient docs","position":{"start":{"line":372,"column":2,"offset":7934},"end":{"line":372,"column":16,"offset":7948},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":7933},"end":{"line":372,"column":91,"offset":8023},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":7933},"end":{"line":372,"column":91,"offset":8023},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Happen on \"null\" events. Most useful with conditionals.","position":{"start":{"line":374,"column":1,"offset":8025},"end":{"line":374,"column":56,"offset":8080},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":8025},"end":{"line":374,"column":56,"offset":8080},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const gameMachine = Machine(\n  {\n    id: 'game',\n    initial: 'playing',\n    context: {\n      points: 0,\n    },\n    states: {\n      playing: {\n        on: {\n          // Transient transition\n          // Will transition to either 'win' or 'lose' immediately upon\n          // (re)entering 'playing' state if the condition is met.\n          '': [\n            { target: 'win', cond: 'didPlayerWin' },\n            { target: 'lose', cond: 'didPlayerLose' },\n          ],\n          // Self-transition\n          AWARD_POINTS: {\n            actions: assign({\n              points: 100,\n            }),\n          },\n        },\n      },\n      win: { type: 'final' },\n      lose: { type: 'final' },\n    },\n  },\n  {\n    guards: {\n      didPlayerWin: (context, event) => {\n        // check if player won\n        return context.points > 99;\n      },\n      didPlayerLose: (context, event) => {\n        // check if player lost\n        return context.points < 0;\n      },\n    },\n  },\n);\n\nconst gameService = interpret(gameMachine)\n  .onTransition(state => console.log(state.value))\n  .start();\n\n// Still in 'playing' state because no conditions of\n// transient transition were met\n// => 'playing'\n\n// When 'AWARD_POINTS' is sent, a self-transition to 'PLAYING' occurs.\n// The transient transition to 'win' is taken because the 'didPlayerWin'\n// condition is satisfied.\ngameService.send('AWARD_POINTS');\n// => 'win'","position":{"start":{"line":376,"column":1,"offset":8082},"end":{"line":433,"column":4,"offset":9490},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Delayed Transitions","position":{"start":{"line":435,"column":5,"offset":9496},"end":{"line":435,"column":24,"offset":9515},"indent":[]}}],"position":{"start":{"line":435,"column":1,"offset":9492},"end":{"line":435,"column":24,"offset":9515},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://xstate.js.org/docs/guides/delays.html#delayed-transitions","children":[{"type":"text","value":"Delayed Events and Transitions","position":{"start":{"line":437,"column":2,"offset":9518},"end":{"line":437,"column":32,"offset":9548},"indent":[]}}],"position":{"start":{"line":437,"column":1,"offset":9517},"end":{"line":437,"column":100,"offset":9616},"indent":[]}}],"position":{"start":{"line":437,"column":1,"offset":9517},"end":{"line":437,"column":100,"offset":9616},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Transition states happen in zero time. They are never asynchronous. State machines are never async.","position":{"start":{"line":439,"column":1,"offset":9618},"end":{"line":439,"column":100,"offset":9717},"indent":[]}}],"position":{"start":{"line":439,"column":1,"offset":9618},"end":{"line":439,"column":100,"offset":9717},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can use delayed transitions with some trickery.","position":{"start":{"line":441,"column":1,"offset":9719},"end":{"line":441,"column":52,"offset":9770},"indent":[]}}],"position":{"start":{"line":441,"column":1,"offset":9719},"end":{"line":441,"column":52,"offset":9770},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const lightDelayMachine = Machine(\n  {\n    id: 'lightDelay',\n    initial: 'green',\n    context: {\n      trafficLevel: 'low',\n    },\n    states: {\n      green: {\n        after: {\n          // after 1 second, transition to yellow\n          LIGHT_DELAY: 'yellow',\n        },\n      },\n      yellow: {\n        after: {\n          YELLOW_LIGHT_DELAY: 'red',\n        },\n      },\n      // ...\n    },\n  },\n  {\n    // String delays configured here\n    delays: {\n      LIGHT_DELAY: (context, event) => {\n        return context.trafficLevel === 'low' ? 1000 : 3000;\n      },\n      YELLOW_LIGHT_DELAY: 500, // static value\n    },\n  },\n);","position":{"start":{"line":443,"column":1,"offset":9772},"end":{"line":476,"column":4,"offset":10405},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":479,"column":1,"offset":10408},"end":{"line":479,"column":31,"offset":10438},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":479,"column":31,"offset":10438}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"state-machines-in-javascript-with-xstate\"\n    }}>{`State Machines in JavaScript with XState`}</h1>\n    <p>{`This comes from the State Machines course on Frontend Master. Please support the course.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/xstate/introduction/\"\n        }}>{`State Machines course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/davidkpiano/frontend-masters-xstate-workshop\"\n        }}>{`Course repo`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://static.frontendmasters.com/resources/2020-05-14-state-machines-xstate/state-machine-xstate.pdf\"\n        }}>{`Slides`}</a></li>\n    </ol>\n    <p>{`The aim of this workshop is to understand state machines with no libraries before moving on.`}</p>\n    <h2 {...{\n      \"id\": \"bottom-up-code\"\n    }}>{`Bottom Up Code`}</h2>\n    <p>{`The example here has a button with an event listener added. This is generally how we work: we put all of our application logic inside of the event handlers themselves.`}</p>\n    <p>{`The issue with the event handler mentioned is that multiple clicks run, we could continually be refetching data.`}</p>\n    <p>{`Now the application lives inside the applicatin handlers, which is not what we want. This style of coding to \"just get it done\" is considered `}<strong parentName=\"p\">{`bottom up`}</strong>{`.`}</p>\n    <p>{`It makes it:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Difficult to test.`}</li>\n      <li parentName=\"ul\">{`Difficult to understand.`}</li>\n      <li parentName=\"ul\">{`Will contain bugs.`}</li>\n      <li parentName=\"ul\">{`Difficult to enhance.`}</li>\n      <li parentName=\"ul\">{`Features make it worse.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"why-use-state-machines-and-statecharts\"\n    }}>{`Why use state machines and statecharts?`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Visualized modelling`}</li>\n      <li parentName=\"ol\">{`Precise diagrams`}</li>\n      <li parentName=\"ol\">{`Automatic code generation`}</li>\n      <li parentName=\"ol\">{`Comprehensive test coverage`}</li>\n      <li parentName=\"ol\">{`Accomodation of late-breaking requirements changes`}</li>\n    </ol>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The benefit of the diagrams gives the logic in completeness. This is great for those who are seeing this without a technical background.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"graphs\"\n    }}>{`Graphs`}</h2>\n    <p>{`This section speaks to graph theory.`}</p>\n    <p>{`The part on directed graphs speaks on the terms of \"source\", \"transfer\" and \"sink\" nodes.`}</p>\n    <h2 {...{\n      \"id\": \"finite-state-machines\"\n    }}>{`Finite State Machines`}</h2>\n    <p>{`A kind of directed graph consider a quintuple (five important parts).`}</p>\n    <p>{`There is an example of going through the lifecycle of a JavaScript Promise. It speaks to the transition states.`}</p>\n    <p>{`The parts of the state machine:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Finite states`}</li>\n      <li parentName=\"ol\">{`Transitions`}</li>\n      <li parentName=\"ol\">{`Events (labelled on edges/transitions)`}</li>\n      <li parentName=\"ol\">{`Initial state (all FSMs start with this) - there is a dot to represent a \"pseudo-transition\" in the graphs.`}</li>\n      <li parentName=\"ol\">{`Final states (not to be covered too much)`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"an-entry-example\"\n    }}>{`An entry example`}</h2>\n    <p>{`To model the states, the example uses a function for `}<inlineCode parentName=\"p\">{`transition`}</inlineCode>{` to model the Promise with a switch statement that switches on the `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`.`}</p>\n    <p>{`It has switches within switches in this example, and some odd representations, but the idea is that it always covered all possible states.`}</p>\n    <p>{`As for using an object instead of a switch:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const machine = {\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        FETCH: 'pending'\n      }\n    },\n    pending: {\n      on: {\n        RESOLVE: 'resolved',\n        REJECT: 'reject'\n      }\n    }\n    resolved: {},\n    rejected: {}\n  }\n}\n\nfunction transition(state,event) {\n  return machine\n    .states[state]?\n    .on?.[event]\n    || state\n}\n`}</code></pre>\n    <p>{`Interpreting state machines:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// keep track of state\nlet currentState = machine.initial;\n\n// receive events\nfunction send(event) {\n  // Determine the next state\n  const nextState = transition(currentState, event);\n\n  // Update the current state\n  currentState = nextState;\n}\n\n// Send some event\nsend('CLICK');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"xstate\"\n    }}>{`XState`}</h2>\n    <p>{`Simplifies the issues with adding/cleaning up listeners + far more.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`npm i xstate\n`}</code></pre>\n    <p>{`Using it in the file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { createMachine } from 'xstate';\n\nconst feedbackMachine = createMachine({\n  initial: 'question',\n  states: {\n    question: {\n      // transitions:\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n      },\n    },\n    form: {\n      // transitions\n      on: {\n        SUBMIT: {\n          target: 'thanks',\n        },\n      },\n    },\n    thanks: {\n      // ...\n      on: {\n        CLOSE: 'closed',\n      },\n    },\n    closed: {\n      // Setting final node\n      type: 'final',\n    },\n  },\n});\n\n// Note, the following is long-hand\nconst feedbackMachine = createMachine({\n  states: {\n    on: {\n      SUBMIT: {\n        target: 'thanks',\n      },\n    },\n  },\n});\n// ... for ...\ncreateMachine({\n  states: {\n    on: {\n      SUBMIT: 'thanks',\n    },\n  },\n});\n\n// initial state\nconst initialState = feedbackMachine.initialState;\n\n// An \\`event\\` is an object with a \\`type\\`\nconst clickGoodEvent = {\n  type: 'CLICK_GOOD',\n};\n\n// An event object with payload\nconst submitEvent = {\n  type: 'SUBMIT',\n  feedback: 'Very good, thank you',\n};\n\nconst nextState = feedbackMachine.transition(\n  feedbackMachine.initialState,\n  clickGoodEvent,\n);\n`}</code></pre>\n    <p>{`Events are objects so we can pass in custom payloads.`}</p>\n    <h2 {...{\n      \"id\": \"interpret-function\"\n    }}>{`Interpret function`}</h2>\n    <p>{`Creates a service: a running instance of a machine.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { createMachine, interpet } from 'xstate';\n\n// omitted set up feedbackMachine\n\nconst feedbackService = interpret(feedbackMachine);\n\nfeedbackService.onTransitin(state => {\n  console.log(state);\n});\n\nfeedbackService.start();\n\n// when you're done for clanup\nfeedbackService.stop();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"visualize\"\n    }}>{`Visualize`}</h2>\n    <p>{`One of the benefits of XState is that you can visualize the machine!`}</p>\n    <h2 {...{\n      \"id\": \"xstate-actions\"\n    }}>{`XState Actions`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://xstate.js.org/docs/guides/actions.html\"\n      }}>{`Action docs`}</a></p>\n    <ol>\n      <li parentName=\"ol\">{`Transition actions: Moving between states`}</li>\n      <li parentName=\"ol\">{`Entry actions: Entering into state`}</li>\n      <li parentName=\"ol\">{`Exit actions: Exiting state`}</li>\n    </ol>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Action order`}</inlineCode>{` will go `}<inlineCode parentName=\"p\">{`exit`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`transition`}</inlineCode>{`, then `}<inlineCode parentName=\"p\">{`entry`}</inlineCode>{`. `}<strong parentName=\"p\">{`We do not want to rely on action order too much.`}</strong></p>\n    <p>{`These actions when added could look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const enterActive = () => console.log('Enter')\n\nconst transitionActive = () => console.log('Transition')\n\nconst exitActive = () => console.log('Exit')\n\nconst enterInctive = () => console.log('Enter inactive')\n\nconst feedbackMachine = createMachine({\n  states: {\n    entry: enterActive\n    on: {\n      CLICK: {\n        target: 'thanks',\n        action: transitionActive\n      },\n    },\n    exit: exitActive\n  },\n});\n`}</code></pre>\n    <p>{`You could pass multiple actions as an `}<strong parentName=\"p\">{`array`}</strong>{`. Remember: `}<strong parentName=\"p\">{`do not rely on order`}</strong>{`.`}</p>\n    <p>{`We can also pass the actions in the second argument to `}<inlineCode parentName=\"p\">{`createMachine`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const feedbackMachine = createMachine(\n  {\n    states: {\n      entry: ['enterActive', 'sendTelemetry'],\n      on: {\n        CLICK: {\n          target: 'thanks',\n          action: 'transitionActive',\n        },\n      },\n      exit: 'exitActive',\n    },\n  },\n  {\n    actions: {\n      enterActive: () => console.log('Enter'),\n      sendTelemetry: () => console.log('sendTelemetry'),\n      transitionActive: () => console.log('Transition'),\n      exitActive: () => console.log('Exit'),\n      enterInctive: () => console.log('Enter inactive'),\n    },\n  },\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"context--assignment\"\n    }}>{`Context + Assignment`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {createMachine, assign} from 'xstate'\n\nconst feedbackMachine = createMachine(\n  {\n    initial: 'entry',\n    context: {\n      count: 0\n    }\n    states: {\n      // prefer this object syntax\n      // to wholesale function syntax\n      entry: assign({\n        count: (context, event) => {\n          return context.count + 1\n        }\n      })\n      on: {\n        CLICK: {\n          target: 'thanks',\n          action: 'transitionActive',\n        },\n      },\n      exit: 'exitActive',\n    },\n  },\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"transitions\"\n    }}>{`Transitions`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://xstate.js.org/docs/guides/guards.html\"\n      }}>{`Guarded Transition docs`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"conditional-predicates\"\n    }}>{`Conditional Predicates`}</h3>\n    <p>{`Example here used for retries:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import {createMachine, assign} from 'xstate'\n\nconst feedbackMachine = createMachine(\n  {\n    initial: 'entry',\n    context: {\n      count: 0\n    }\n    states: {\n      failure: {\n        on: {\n          RETRY: {\n            target: 'loading',\n            actions: assign({\n              retries: (context, event) => context.retries + 1\n            })\n            // HERE is the conditional\n            cond: 'noExceededRetries'\n          }\n        }\n      }\n    },\n  },\n  {\n    // guard for conditional\n    guards: {\n      noExceededRetries: (context, event) => {\n        return context.retries < 5\n      }\n    }\n  }\n)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"transient-transitions\"\n    }}>{`Transient Transitions`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://xstate.js.org/docs/guides/transitions.html#transient-transitions\"\n      }}>{`Transient docs`}</a></p>\n    <p>{`Happen on \"null\" events. Most useful with conditionals.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const gameMachine = Machine(\n  {\n    id: 'game',\n    initial: 'playing',\n    context: {\n      points: 0,\n    },\n    states: {\n      playing: {\n        on: {\n          // Transient transition\n          // Will transition to either 'win' or 'lose' immediately upon\n          // (re)entering 'playing' state if the condition is met.\n          '': [\n            { target: 'win', cond: 'didPlayerWin' },\n            { target: 'lose', cond: 'didPlayerLose' },\n          ],\n          // Self-transition\n          AWARD_POINTS: {\n            actions: assign({\n              points: 100,\n            }),\n          },\n        },\n      },\n      win: { type: 'final' },\n      lose: { type: 'final' },\n    },\n  },\n  {\n    guards: {\n      didPlayerWin: (context, event) => {\n        // check if player won\n        return context.points > 99;\n      },\n      didPlayerLose: (context, event) => {\n        // check if player lost\n        return context.points < 0;\n      },\n    },\n  },\n);\n\nconst gameService = interpret(gameMachine)\n  .onTransition(state => console.log(state.value))\n  .start();\n\n// Still in 'playing' state because no conditions of\n// transient transition were met\n// => 'playing'\n\n// When 'AWARD_POINTS' is sent, a self-transition to 'PLAYING' occurs.\n// The transient transition to 'win' is taken because the 'didPlayerWin'\n// condition is satisfied.\ngameService.send('AWARD_POINTS');\n// => 'win'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delayed-transitions\"\n    }}>{`Delayed Transitions`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://xstate.js.org/docs/guides/delays.html#delayed-transitions\"\n      }}>{`Delayed Events and Transitions`}</a></p>\n    <p>{`Transition states happen in zero time. They are never asynchronous. State machines are never async.`}</p>\n    <p>{`You can use delayed transitions with some trickery.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const lightDelayMachine = Machine(\n  {\n    id: 'lightDelay',\n    initial: 'green',\n    context: {\n      trafficLevel: 'low',\n    },\n    states: {\n      green: {\n        after: {\n          // after 1 second, transition to yellow\n          LIGHT_DELAY: 'yellow',\n        },\n      },\n      yellow: {\n        after: {\n          YELLOW_LIGHT_DELAY: 'red',\n        },\n      },\n      // ...\n    },\n  },\n  {\n    // String delays configured here\n    delays: {\n      LIGHT_DELAY: (context, event) => {\n        return context.trafficLevel === 'low' ? 1000 : 3000;\n      },\n      YELLOW_LIGHT_DELAY: 500, // static value\n    },\n  },\n);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}