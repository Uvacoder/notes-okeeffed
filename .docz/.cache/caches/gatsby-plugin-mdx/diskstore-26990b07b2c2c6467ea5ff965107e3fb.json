{"expireTime":9007200867335953000,"key":"gatsby-plugin-mdx-entire-payload-cea14895c7491815969012f88a09acca-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Go Tour Mutexes","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":18,"offset":184},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":18,"offset":184},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"sync.Mutex","position":{"start":{"line":10,"column":4,"offset":189},"end":{"line":10,"column":14,"offset":199},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":186},"end":{"line":10,"column":14,"offset":199},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We've seen how channels are great for communication among goroutines.","position":{"start":{"line":12,"column":1,"offset":201},"end":{"line":12,"column":70,"offset":270},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":201},"end":{"line":12,"column":70,"offset":270},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"But what if we don't need communication? What if we just want to make sure only one goroutine can access a variable at a time to avoid conflicts?","position":{"start":{"line":14,"column":1,"offset":272},"end":{"line":14,"column":146,"offset":417},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":272},"end":{"line":14,"column":146,"offset":417},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This concept is called mutual exclusion, and the conventional name for the data structure that provides it is mutex.","position":{"start":{"line":16,"column":1,"offset":419},"end":{"line":16,"column":117,"offset":535},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":419},"end":{"line":16,"column":117,"offset":535},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Go's standard library provides mutual exclusion with ","position":{"start":{"line":18,"column":1,"offset":537},"end":{"line":18,"column":54,"offset":590},"indent":[]}},{"type":"inlineCode","value":"sync.Mutex","position":{"start":{"line":18,"column":54,"offset":590},"end":{"line":18,"column":66,"offset":602},"indent":[]}},{"type":"text","value":" and its two methods:","position":{"start":{"line":18,"column":66,"offset":602},"end":{"line":18,"column":87,"offset":623},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":537},"end":{"line":18,"column":87,"offset":623},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Lock","position":{"start":{"line":20,"column":3,"offset":627},"end":{"line":20,"column":7,"offset":631},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":627},"end":{"line":20,"column":7,"offset":631},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":625},"end":{"line":20,"column":7,"offset":631},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Unlock","position":{"start":{"line":21,"column":3,"offset":634},"end":{"line":21,"column":9,"offset":640},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":634},"end":{"line":21,"column":9,"offset":640},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":632},"end":{"line":21,"column":9,"offset":640},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":625},"end":{"line":21,"column":9,"offset":640},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"We can define a block of code to be executed in mutual exclusion by surrounding it with a call to ","position":{"start":{"line":23,"column":1,"offset":642},"end":{"line":23,"column":99,"offset":740},"indent":[]}},{"type":"inlineCode","value":"Lock","position":{"start":{"line":23,"column":99,"offset":740},"end":{"line":23,"column":105,"offset":746},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":23,"column":105,"offset":746},"end":{"line":23,"column":110,"offset":751},"indent":[]}},{"type":"inlineCode","value":"Unlock","position":{"start":{"line":23,"column":110,"offset":751},"end":{"line":23,"column":118,"offset":759},"indent":[]}},{"type":"text","value":" as shown on the Inc method.","position":{"start":{"line":23,"column":118,"offset":759},"end":{"line":23,"column":146,"offset":787},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":642},"end":{"line":23,"column":146,"offset":787},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can also use ","position":{"start":{"line":25,"column":1,"offset":789},"end":{"line":25,"column":17,"offset":805},"indent":[]}},{"type":"inlineCode","value":"defer","position":{"start":{"line":25,"column":17,"offset":805},"end":{"line":25,"column":24,"offset":812},"indent":[]}},{"type":"text","value":" to ensure the mutex will be unlocked as in the ","position":{"start":{"line":25,"column":24,"offset":812},"end":{"line":25,"column":72,"offset":860},"indent":[]}},{"type":"inlineCode","value":"Value","position":{"start":{"line":25,"column":72,"offset":860},"end":{"line":25,"column":79,"offset":867},"indent":[]}},{"type":"text","value":" method.","position":{"start":{"line":25,"column":79,"offset":867},"end":{"line":25,"column":87,"offset":875},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":789},"end":{"line":25,"column":87,"offset":875},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Basic Mutex Example","position":{"start":{"line":27,"column":4,"offset":880},"end":{"line":27,"column":23,"offset":899},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":877},"end":{"line":27,"column":23,"offset":899},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\n// SafeCounter is safe to use concurrently.\ntype SafeCounter struct {\n\tv   map[string]int\n\tmux sync.Mutex\n}\n\n// Inc increments the counter for the given key.\nfunc (c *SafeCounter) Inc(key string) {\n\tc.mux.Lock()\n\t// Lock so only one goroutine at a time can access the map c.v.\n\tc.v[key]++\n\tc.mux.Unlock()\n}\n\n// Value returns the current value of the counter for the given key.\nfunc (c *SafeCounter) Value(key string) int {\n\tc.mux.Lock()\n\t// Lock so only one goroutine at a time can access the map c.v.\n\tdefer c.mux.Unlock()\n\treturn c.v[key]\n}\n\nfunc main() {\n\tc := SafeCounter{v: make(map[string]int)}\n\tfmt.Println(c.v) // map[]\n\n\tfor i := 0; i < 1000; i++ {\n\t\tgo c.Inc(\"somekey\")\n\t}\n\n\ttime.Sleep(time.Second) // delay during async goroutine\n\tfmt.Println(c.Value(\"somekey\")) // 1000\n}","position":{"start":{"line":29,"column":1,"offset":901},"end":{"line":71,"column":4,"offset":1747},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":74,"column":1,"offset":1750},"end":{"line":74,"column":31,"offset":1780},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":74,"column":31,"offset":1780}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"go-tour-mutexes\"\n    }}>{`Go Tour Mutexes`}</h1>\n    <h2 {...{\n      \"id\": \"syncmutex\"\n    }}>{`sync.Mutex`}</h2>\n    <p>{`We've seen how channels are great for communication among goroutines.`}</p>\n    <p>{`But what if we don't need communication? What if we just want to make sure only one goroutine can access a variable at a time to avoid conflicts?`}</p>\n    <p>{`This concept is called mutual exclusion, and the conventional name for the data structure that provides it is mutex.`}</p>\n    <p>{`Go's standard library provides mutual exclusion with `}<inlineCode parentName=\"p\">{`sync.Mutex`}</inlineCode>{` and its two methods:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Lock`}</li>\n      <li parentName=\"ul\">{`Unlock`}</li>\n    </ul>\n    <p>{`We can define a block of code to be executed in mutual exclusion by surrounding it with a call to `}<inlineCode parentName=\"p\">{`Lock`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Unlock`}</inlineCode>{` as shown on the Inc method.`}</p>\n    <p>{`We can also use `}<inlineCode parentName=\"p\">{`defer`}</inlineCode>{` to ensure the mutex will be unlocked as in the `}<inlineCode parentName=\"p\">{`Value`}</inlineCode>{` method.`}</p>\n    <h2 {...{\n      \"id\": \"basic-mutex-example\"\n    }}>{`Basic Mutex Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n\n// SafeCounter is safe to use concurrently.\ntype SafeCounter struct {\n    v   map[string]int\n    mux sync.Mutex\n}\n\n// Inc increments the counter for the given key.\nfunc (c *SafeCounter) Inc(key string) {\n    c.mux.Lock()\n    // Lock so only one goroutine at a time can access the map c.v.\n    c.v[key]++\n    c.mux.Unlock()\n}\n\n// Value returns the current value of the counter for the given key.\nfunc (c *SafeCounter) Value(key string) int {\n    c.mux.Lock()\n    // Lock so only one goroutine at a time can access the map c.v.\n    defer c.mux.Unlock()\n    return c.v[key]\n}\n\nfunc main() {\n    c := SafeCounter{v: make(map[string]int)}\n    fmt.Println(c.v) // map[]\n\n    for i := 0; i < 1000; i++ {\n        go c.Inc(\"somekey\")\n    }\n\n    time.Sleep(time.Second) // delay during async goroutine\n    fmt.Println(c.Value(\"somekey\")) // 1000\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}