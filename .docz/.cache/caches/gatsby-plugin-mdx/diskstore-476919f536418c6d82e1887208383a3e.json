{"expireTime":9007200867335903000,"key":"gatsby-plugin-mdx-entire-payload-a09f73ced53c2b4d9359b75d2d52a344-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Intro to Scala","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":17,"offset":182},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":17,"offset":182},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Builds on top of the JVC. Scala also does things like treating functions as first class citizens. You define functions without names and as closures.","position":{"start":{"line":9,"column":1,"offset":184},"end":{"line":9,"column":150,"offset":333},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":184},"end":{"line":9,"column":150,"offset":333},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The adoption of Scala use it for a variety of projects.","position":{"start":{"line":11,"column":1,"offset":335},"end":{"line":11,"column":56,"offset":390},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":335},"end":{"line":11,"column":56,"offset":390},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Apache Spark is also written in Scala.","position":{"start":{"line":13,"column":1,"offset":392},"end":{"line":13,"column":39,"offset":430},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":392},"end":{"line":13,"column":39,"offset":430},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are two ways to create variables: ","position":{"start":{"line":15,"column":1,"offset":432},"end":{"line":15,"column":41,"offset":472},"indent":[]}},{"type":"inlineCode","value":"val","position":{"start":{"line":15,"column":41,"offset":472},"end":{"line":15,"column":46,"offset":477},"indent":[]}},{"type":"text","value":" (constant) and ","position":{"start":{"line":15,"column":46,"offset":477},"end":{"line":15,"column":62,"offset":493},"indent":[]}},{"type":"inlineCode","value":"var","position":{"start":{"line":15,"column":62,"offset":493},"end":{"line":15,"column":67,"offset":498},"indent":[]}},{"type":"text","value":" (mutable).","position":{"start":{"line":15,"column":67,"offset":498},"end":{"line":15,"column":78,"offset":509},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":432},"end":{"line":15,"column":78,"offset":509},"indent":[]}},{"type":"code","lang":"scala","meta":null,"value":"scala> val greeting = \"Hello World!\"\ngreeting: String = Hello World!\n\nscala> greeting = \"Allo\"\n<console>:12: error: reassignment to val\n       greeting = \"Allo\"\n                ^\n\nscala> var mes = \"Hello!\"\nmes: String = Hello!\n\nscala> mes\nres0: String = Hello!\n\nscala> mes = \"Hello World!\"\nmes: String = Hello World!\n\nscala> mes\nres1: String = Hello World!","position":{"start":{"line":17,"column":1,"offset":511},"end":{"line":37,"column":4,"offset":880},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can always provide type information or the semi-colon if we wanted to, although not recommended (interesting they would say this...).","position":{"start":{"line":39,"column":1,"offset":882},"end":{"line":39,"column":137,"offset":1018},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":882},"end":{"line":39,"column":137,"offset":1018},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Function Declarations","position":{"start":{"line":41,"column":4,"offset":1023},"end":{"line":41,"column":25,"offset":1044},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1020},"end":{"line":41,"column":26,"offset":1045},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Last evaluation implicitly returned.","position":{"start":{"line":43,"column":1,"offset":1047},"end":{"line":43,"column":37,"offset":1083},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1047},"end":{"line":43,"column":37,"offset":1083},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You must declare return type for a recursive function though.","position":{"start":{"line":45,"column":1,"offset":1085},"end":{"line":45,"column":62,"offset":1146},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1085},"end":{"line":45,"column":62,"offset":1146},"indent":[]}},{"type":"code","lang":"scala","meta":null,"value":"def multipliedByTwo(x: Int) = (x == 0) x else x*2\n\ndef multipliedByTen(x: Double = 10, y: Double): Double {\n\tx * y\n}","position":{"start":{"line":47,"column":1,"offset":1148},"end":{"line":53,"column":4,"offset":1277},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":55,"column":1,"offset":1279},"end":{"line":55,"column":31,"offset":1309},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":55,"column":31,"offset":1309}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"intro-to-scala\"\n    }}>{`Intro to Scala`}</h1>\n    <p>{`Builds on top of the JVC. Scala also does things like treating functions as first class citizens. You define functions without names and as closures.`}</p>\n    <p>{`The adoption of Scala use it for a variety of projects.`}</p>\n    <p>{`Apache Spark is also written in Scala.`}</p>\n    <p>{`There are two ways to create variables: `}<inlineCode parentName=\"p\">{`val`}</inlineCode>{` (constant) and `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{` (mutable).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`scala> val greeting = \"Hello World!\"\ngreeting: String = Hello World!\n\nscala> greeting = \"Allo\"\n<console>:12: error: reassignment to val\n       greeting = \"Allo\"\n                ^\n\nscala> var mes = \"Hello!\"\nmes: String = Hello!\n\nscala> mes\nres0: String = Hello!\n\nscala> mes = \"Hello World!\"\nmes: String = Hello World!\n\nscala> mes\nres1: String = Hello World!\n`}</code></pre>\n    <p>{`We can always provide type information or the semi-colon if we wanted to, although not recommended (interesting they would say this...).`}</p>\n    <h2 {...{\n      \"id\": \"function-declarations\"\n    }}>{`Function Declarations`}</h2>\n    <p>{`Last evaluation implicitly returned.`}</p>\n    <p>{`You must declare return type for a recursive function though.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`def multipliedByTwo(x: Int) = (x == 0) x else x*2\n\ndef multipliedByTen(x: Double = 10, y: Double): Double {\n    x * y\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}