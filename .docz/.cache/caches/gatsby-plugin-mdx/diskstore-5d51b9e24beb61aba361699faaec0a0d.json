{"expireTime":9007200867335910000,"key":"gatsby-plugin-mdx-entire-payload-45325157b907afeab8c2f14a6c973374-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Getting Started With React Query","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":35,"offset":201},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":35,"offset":201},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":206},"end":{"line":10,"column":13,"offset":215},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":203},"end":{"line":10,"column":13,"offset":215},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://react-query.tanstack.com/","children":[{"type":"text","value":"React Query","position":{"start":{"line":12,"column":5,"offset":221},"end":{"line":12,"column":16,"offset":232},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":220},"end":{"line":12,"column":52,"offset":268},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":220},"end":{"line":12,"column":52,"offset":268},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":217},"end":{"line":12,"column":52,"offset":268},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"(https://react-query.tanstack.com/guides/query-functions#handling-and-throwing-errors)","children":[{"type":"text","value":"Handling Errors","position":{"start":{"line":13,"column":5,"offset":273},"end":{"line":13,"column":20,"offset":288},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":272},"end":{"line":13,"column":111,"offset":379},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":272},"end":{"line":13,"column":111,"offset":379},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":269},"end":{"line":13,"column":111,"offset":379},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":217},"end":{"line":13,"column":111,"offset":379},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Handling and throwing errors","position":{"start":{"line":15,"column":4,"offset":384},"end":{"line":15,"column":32,"offset":412},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":381},"end":{"line":15,"column":32,"offset":412},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check the ","position":{"start":{"line":17,"column":1,"offset":414},"end":{"line":17,"column":11,"offset":424},"indent":[]}},{"type":"link","title":null,"url":"https://react-query.tanstack.com/guides/query-functions#handling-and-throwing-errors","children":[{"type":"text","value":"docs","position":{"start":{"line":17,"column":12,"offset":425},"end":{"line":17,"column":16,"offset":429},"indent":[]}}],"position":{"start":{"line":17,"column":11,"offset":424},"end":{"line":17,"column":103,"offset":516},"indent":[]}},{"type":"text","value":" for more information.","position":{"start":{"line":17,"column":103,"offset":516},"end":{"line":17,"column":125,"offset":538},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":414},"end":{"line":17,"column":125,"offset":538},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The tl;dr is that you want to return a promise or throw an error.","position":{"start":{"line":19,"column":1,"offset":540},"end":{"line":19,"column":66,"offset":605},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":540},"end":{"line":19,"column":66,"offset":605},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const { isLoading, error, data } = useQuery('todoListData', async () => {\n  const result = await fetch('/api/v1/todos');\n\n  if (!result.ok) {\n    throw new Error(result.statusText);\n  }\n  return result.json();\n});","position":{"start":{"line":21,"column":1,"offset":607},"end":{"line":30,"column":4,"offset":830},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting up a new project","position":{"start":{"line":32,"column":4,"offset":835},"end":{"line":32,"column":28,"offset":859},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":832},"end":{"line":32,"column":28,"offset":859},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import React, { useEffect } from 'react';\nimport { ErrorBoundary, FallbackProps } from 'react-error-boundary';\nimport { QueryClient, QueryClientProvider, useQuery } from 'react-query';\nimport './App.css';\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppChildren />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","position":{"start":{"line":34,"column":1,"offset":861},"end":{"line":51,"column":4,"offset":1268},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting up for testing","position":{"start":{"line":53,"column":4,"offset":1273},"end":{"line":53,"column":26,"offset":1295},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1270},"end":{"line":53,"column":26,"offset":1295},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If using with a library such as React Testing Library, be sure to create a custom render util:","position":{"start":{"line":55,"column":1,"offset":1297},"end":{"line":55,"column":95,"offset":1391},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1297},"end":{"line":55,"column":95,"offset":1391},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"// test/test-utils.tsx\nimport React, { ReactElement } from 'react';\nimport { render } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    // Force the cache to clear to ensure responses\n    // are as expected for each test.\n    queries: {\n      cacheTime: 0,\n      retry: false,\n    },\n  },\n});\n\nconst AllTheProviders: React.FC = ({ children }) => {\n  return (\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n  );\n};\n\nconst customRender = (ui: ReactElement, options?: any) =>\n  render(ui, { wrapper: AllTheProviders, ...options });\n\n// re-export everything\nexport * from '@testing-library/react';\n\n// override render method\nexport { customRender as render };","position":{"start":{"line":57,"column":1,"offset":1393},"end":{"line":88,"column":4,"offset":2199},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Custom hooks","position":{"start":{"line":90,"column":4,"offset":2204},"end":{"line":90,"column":16,"offset":2216},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":2201},"end":{"line":90,"column":16,"offset":2216},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To abstract logic, it would be recommended to abstract the hook:","position":{"start":{"line":92,"column":1,"offset":2218},"end":{"line":92,"column":65,"offset":2282},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2218},"end":{"line":92,"column":65,"offset":2282},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"function useTodoList() {\n  const [status, setStatus] = React.useState<Status>(Status.pending);\n  const { isLoading, error, data } = useQuery('todoListData', async () => {\n    const result = await fetch('/api/v1/todos');\n\n    if (!result.ok) {\n      throw new Error(result.statusText);\n    }\n    return result.json();\n  });\n\n  useEffect(() => {\n    if (isLoading) {\n      setStatus(Status.pending);\n    }\n\n    if (error) {\n      // handle error reporting ... Sentry.sendErr(error)\n      setStatus(Status.failed);\n    } else if (data) {\n      setStatus(Status.success);\n    }\n  }, [isLoading, error, data]);\n\n  return { status, data };\n}","position":{"start":{"line":94,"column":1,"offset":2284},"end":{"line":121,"column":4,"offset":2929},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":124,"column":1,"offset":2932},"end":{"line":124,"column":31,"offset":2962},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":124,"column":31,"offset":2962}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"getting-started-with-react-query\"\n    }}>{`Getting Started With React Query`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://react-query.tanstack.com/\"\n        }}>{`React Query`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"(https://react-query.tanstack.com/guides/query-functions#handling-and-throwing-errors)\"\n        }}>{`Handling Errors`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"handling-and-throwing-errors\"\n    }}>{`Handling and throwing errors`}</h2>\n    <p>{`Check the `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-query.tanstack.com/guides/query-functions#handling-and-throwing-errors\"\n      }}>{`docs`}</a>{` for more information.`}</p>\n    <p>{`The tl;dr is that you want to return a promise or throw an error.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { isLoading, error, data } = useQuery('todoListData', async () => {\n  const result = await fetch('/api/v1/todos');\n\n  if (!result.ok) {\n    throw new Error(result.statusText);\n  }\n  return result.json();\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-a-new-project\"\n    }}>{`Setting up a new project`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React, { useEffect } from 'react';\nimport { ErrorBoundary, FallbackProps } from 'react-error-boundary';\nimport { QueryClient, QueryClientProvider, useQuery } from 'react-query';\nimport './App.css';\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppChildren />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-for-testing\"\n    }}>{`Setting up for testing`}</h2>\n    <p>{`If using with a library such as React Testing Library, be sure to create a custom render util:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// test/test-utils.tsx\nimport React, { ReactElement } from 'react';\nimport { render } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    // Force the cache to clear to ensure responses\n    // are as expected for each test.\n    queries: {\n      cacheTime: 0,\n      retry: false,\n    },\n  },\n});\n\nconst AllTheProviders: React.FC = ({ children }) => {\n  return (\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n  );\n};\n\nconst customRender = (ui: ReactElement, options?: any) =>\n  render(ui, { wrapper: AllTheProviders, ...options });\n\n// re-export everything\nexport * from '@testing-library/react';\n\n// override render method\nexport { customRender as render };\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-hooks\"\n    }}>{`Custom hooks`}</h2>\n    <p>{`To abstract logic, it would be recommended to abstract the hook:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function useTodoList() {\n  const [status, setStatus] = React.useState<Status>(Status.pending);\n  const { isLoading, error, data } = useQuery('todoListData', async () => {\n    const result = await fetch('/api/v1/todos');\n\n    if (!result.ok) {\n      throw new Error(result.statusText);\n    }\n    return result.json();\n  });\n\n  useEffect(() => {\n    if (isLoading) {\n      setStatus(Status.pending);\n    }\n\n    if (error) {\n      // handle error reporting ... Sentry.sendErr(error)\n      setStatus(Status.failed);\n    } else if (data) {\n      setStatus(Status.success);\n    }\n  }, [isLoading, error, data]);\n\n  return { status, data };\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}