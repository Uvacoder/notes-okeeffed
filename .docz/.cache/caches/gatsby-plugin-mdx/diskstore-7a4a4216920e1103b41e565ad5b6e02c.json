{"expireTime":9007200867335953000,"key":"gatsby-plugin-mdx-entire-payload-0f99623cded11fe3291d23b2b7fbcf08-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Go Tour - Goroutines","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":23,"offset":189},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":23,"offset":189},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":10,"column":1,"offset":191},"end":{"line":10,"column":3,"offset":193},"indent":[]}},{"type":"inlineCode","value":"goroutine","position":{"start":{"line":10,"column":3,"offset":193},"end":{"line":10,"column":14,"offset":204},"indent":[]}},{"type":"text","value":" is a lightweight thread managed by the Go runtime.","position":{"start":{"line":10,"column":14,"offset":204},"end":{"line":10,"column":65,"offset":255},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":191},"end":{"line":10,"column":65,"offset":255},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"go f(x, y, z)","position":{"start":{"line":12,"column":1,"offset":257},"end":{"line":14,"column":4,"offset":284},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"...starts a new goroutine running","position":{"start":{"line":16,"column":1,"offset":286},"end":{"line":16,"column":34,"offset":319},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":286},"end":{"line":16,"column":34,"offset":319},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"f(x, y, z)","position":{"start":{"line":18,"column":1,"offset":321},"end":{"line":20,"column":4,"offset":345},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The evaluation of f, x, y, and z happens in the current goroutine and the execution of f happens in the new goroutine.","position":{"start":{"line":22,"column":1,"offset":347},"end":{"line":22,"column":119,"offset":465},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":347},"end":{"line":22,"column":119,"offset":465},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Goroutines run in the same address space, so access to shared memory must be synchronized. The sync package provides useful primitives, although you won't need them much in Go as there are other primitives. (See the next slide.)","position":{"start":{"line":24,"column":1,"offset":467},"end":{"line":24,"column":229,"offset":695},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":467},"end":{"line":24,"column":229,"offset":695},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":26,"column":4,"offset":700},"end":{"line":26,"column":11,"offset":707},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":697},"end":{"line":26,"column":11,"offset":707},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc say(s string) {\n\tfor i := 0; i < 5; i++ {\n\t\ttime.Sleep(100 * time.Millisecond)\n\t\tfmt.Println(s)\n\t}\n}\n\nfunc main() {\n\tgo say(\"world\")\n\tsay(\"hello\")\n}","position":{"start":{"line":28,"column":1,"offset":709},"end":{"line":47,"column":4,"offset":917},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Output:","position":{"start":{"line":49,"column":1,"offset":919},"end":{"line":49,"column":8,"offset":926},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":919},"end":{"line":49,"column":8,"offset":926},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"world\nhello\nhello\nworld\nworld\nhello\nhello\nworld\nworld\nhello","position":{"start":{"line":51,"column":1,"offset":928},"end":{"line":62,"column":4,"offset":1000},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note that what enables the ","position":{"start":{"line":64,"column":1,"offset":1002},"end":{"line":64,"column":28,"offset":1029},"indent":[]}},{"type":"inlineCode","value":"goroutine","position":{"start":{"line":64,"column":28,"offset":1029},"end":{"line":64,"column":39,"offset":1040},"indent":[]}},{"type":"text","value":" in the above function to run is the ","position":{"start":{"line":64,"column":39,"offset":1040},"end":{"line":64,"column":76,"offset":1077},"indent":[]}},{"type":"inlineCode","value":"time.Sleep","position":{"start":{"line":64,"column":76,"offset":1077},"end":{"line":64,"column":88,"offset":1089},"indent":[]}},{"type":"text","value":" function. Without it, the main go routine executes ","position":{"start":{"line":64,"column":88,"offset":1089},"end":{"line":64,"column":140,"offset":1141},"indent":[]}},{"type":"inlineCode","value":"say('hello')","position":{"start":{"line":64,"column":140,"offset":1141},"end":{"line":64,"column":154,"offset":1155},"indent":[]}},{"type":"text","value":" and exits before the ","position":{"start":{"line":64,"column":154,"offset":1155},"end":{"line":64,"column":176,"offset":1177},"indent":[]}},{"type":"inlineCode","value":"go say('world')","position":{"start":{"line":64,"column":176,"offset":1177},"end":{"line":64,"column":193,"offset":1194},"indent":[]}},{"type":"text","value":" runs.","position":{"start":{"line":64,"column":193,"offset":1194},"end":{"line":64,"column":199,"offset":1200},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":1002},"end":{"line":64,"column":199,"offset":1200},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":67,"column":1,"offset":1203},"end":{"line":67,"column":31,"offset":1233},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":67,"column":31,"offset":1233}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"go-tour---goroutines\"\n    }}>{`Go Tour - Goroutines`}</h1>\n    <p>{`A `}<inlineCode parentName=\"p\">{`goroutine`}</inlineCode>{` is a lightweight thread managed by the Go runtime.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`go f(x, y, z)\n`}</code></pre>\n    <p>{`...starts a new goroutine running`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`f(x, y, z)\n`}</code></pre>\n    <p>{`The evaluation of f, x, y, and z happens in the current goroutine and the execution of f happens in the new goroutine.`}</p>\n    <p>{`Goroutines run in the same address space, so access to shared memory must be synchronized. The sync package provides useful primitives, although you won't need them much in Go as there are other primitives. (See the next slide.)`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc say(s string) {\n    for i := 0; i < 5; i++ {\n        time.Sleep(100 * time.Millisecond)\n        fmt.Println(s)\n    }\n}\n\nfunc main() {\n    go say(\"world\")\n    say(\"hello\")\n}\n`}</code></pre>\n    <p>{`Output:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`world\nhello\nhello\nworld\nworld\nhello\nhello\nworld\nworld\nhello\n`}</code></pre>\n    <p>{`Note that what enables the `}<inlineCode parentName=\"p\">{`goroutine`}</inlineCode>{` in the above function to run is the `}<inlineCode parentName=\"p\">{`time.Sleep`}</inlineCode>{` function. Without it, the main go routine executes `}<inlineCode parentName=\"p\">{`say('hello')`}</inlineCode>{` and exits before the `}<inlineCode parentName=\"p\">{`go say('world')`}</inlineCode>{` runs.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}