{"expireTime":9007200852878358000,"key":"gatsby-plugin-mdx-entire-payload-a208a4ea3c7f6ec03b01203f11ab2ff9-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Swift 3 Extensions","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":21,"offset":186},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":21,"offset":186},"indent":[]}},{"type":"jsx","value":"<!-- TOC -->","position":{"start":{"line":9,"column":1,"offset":188},"end":{"line":9,"column":13,"offset":200},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#swift-3-extensions","children":[{"type":"text","value":"Swift 3 Extensions","position":{"start":{"line":11,"column":6,"offset":207},"end":{"line":11,"column":24,"offset":225},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":206},"end":{"line":11,"column":46,"offset":247},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":206},"end":{"line":11,"column":46,"offset":247},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#extensions","children":[{"type":"text","value":"Extensions","position":{"start":{"line":12,"column":10,"offset":257},"end":{"line":12,"column":20,"offset":267},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":256},"end":{"line":12,"column":34,"offset":281},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":256},"end":{"line":12,"column":34,"offset":281},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----computed-properties","children":[{"type":"text","value":"---- Computed Properties","position":{"start":{"line":13,"column":14,"offset":295},"end":{"line":13,"column":38,"offset":319},"indent":[]}}],"position":{"start":{"line":13,"column":13,"offset":294},"end":{"line":13,"column":66,"offset":347},"indent":[]}}],"position":{"start":{"line":13,"column":13,"offset":294},"end":{"line":13,"column":66,"offset":347},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":290},"end":{"line":13,"column":66,"offset":347},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----mutating-instance-methods","children":[{"type":"text","value":"---- Mutating Instance Methods","position":{"start":{"line":14,"column":14,"offset":361},"end":{"line":14,"column":44,"offset":391},"indent":[]}}],"position":{"start":{"line":14,"column":13,"offset":360},"end":{"line":14,"column":78,"offset":425},"indent":[]}}],"position":{"start":{"line":14,"column":13,"offset":360},"end":{"line":14,"column":78,"offset":425},"indent":[]}}],"position":{"start":{"line":14,"column":9,"offset":356},"end":{"line":14,"column":78,"offset":425},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----subscripts","children":[{"type":"text","value":"---- Subscripts","position":{"start":{"line":15,"column":14,"offset":439},"end":{"line":15,"column":29,"offset":454},"indent":[]}}],"position":{"start":{"line":15,"column":13,"offset":438},"end":{"line":15,"column":48,"offset":473},"indent":[]}}],"position":{"start":{"line":15,"column":13,"offset":438},"end":{"line":15,"column":48,"offset":473},"indent":[]}}],"position":{"start":{"line":15,"column":9,"offset":434},"end":{"line":15,"column":48,"offset":473},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----nested-types","children":[{"type":"text","value":"---- Nested Types","position":{"start":{"line":16,"column":14,"offset":487},"end":{"line":16,"column":31,"offset":504},"indent":[]}}],"position":{"start":{"line":16,"column":13,"offset":486},"end":{"line":16,"column":52,"offset":525},"indent":[]}}],"position":{"start":{"line":16,"column":13,"offset":486},"end":{"line":16,"column":52,"offset":525},"indent":[]}}],"position":{"start":{"line":16,"column":9,"offset":482},"end":{"line":16,"column":52,"offset":525},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":290},"end":{"line":16,"column":52,"offset":525},"indent":[9,9,9]}}],"position":{"start":{"line":12,"column":5,"offset":252},"end":{"line":16,"column":52,"offset":525},"indent":[5,5,5,5]}}],"position":{"start":{"line":12,"column":5,"offset":252},"end":{"line":16,"column":52,"offset":525},"indent":[5,5,5,5]}}],"position":{"start":{"line":11,"column":1,"offset":202},"end":{"line":16,"column":52,"offset":525},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":11,"column":1,"offset":202},"end":{"line":16,"column":52,"offset":525},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"<!-- /TOC -->","position":{"start":{"line":18,"column":1,"offset":527},"end":{"line":18,"column":14,"offset":540},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":20,"column":1,"offset":542},"end":{"line":20,"column":4,"offset":545},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Extensions","position":{"start":{"line":22,"column":4,"offset":550},"end":{"line":22,"column":14,"offset":560},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":547},"end":{"line":22,"column":14,"offset":560},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Extensions add new functionality to an existing class, structure, enumeration, or protocol type.","position":{"start":{"line":24,"column":1,"offset":562},"end":{"line":24,"column":97,"offset":658},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":562},"end":{"line":24,"column":97,"offset":658},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This includes the ability to extend types for which you do not have access to the original source code (known as retroactive modeling). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions do not have names.)","position":{"start":{"line":26,"column":1,"offset":660},"end":{"line":26,"column":258,"offset":917},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":660},"end":{"line":26,"column":258,"offset":917},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Extensions in Swift can:","position":{"start":{"line":28,"column":1,"offset":919},"end":{"line":28,"column":25,"offset":943},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":919},"end":{"line":28,"column":25,"offset":943},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add computed instance properties and computed type properties","position":{"start":{"line":30,"column":5,"offset":949},"end":{"line":30,"column":66,"offset":1010},"indent":[]}}],"position":{"start":{"line":30,"column":5,"offset":949},"end":{"line":30,"column":66,"offset":1010},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":945},"end":{"line":30,"column":66,"offset":1010},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Define instance methods and type methods","position":{"start":{"line":31,"column":5,"offset":1015},"end":{"line":31,"column":45,"offset":1055},"indent":[]}}],"position":{"start":{"line":31,"column":5,"offset":1015},"end":{"line":31,"column":45,"offset":1055},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1011},"end":{"line":31,"column":45,"offset":1055},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Provide new initializers","position":{"start":{"line":32,"column":5,"offset":1060},"end":{"line":32,"column":29,"offset":1084},"indent":[]}}],"position":{"start":{"line":32,"column":5,"offset":1060},"end":{"line":32,"column":29,"offset":1084},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1056},"end":{"line":32,"column":29,"offset":1084},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Define subscripts","position":{"start":{"line":33,"column":5,"offset":1089},"end":{"line":33,"column":22,"offset":1106},"indent":[]}}],"position":{"start":{"line":33,"column":5,"offset":1089},"end":{"line":33,"column":22,"offset":1106},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1085},"end":{"line":33,"column":22,"offset":1106},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Define and use new nested types","position":{"start":{"line":34,"column":5,"offset":1111},"end":{"line":34,"column":36,"offset":1142},"indent":[]}}],"position":{"start":{"line":34,"column":5,"offset":1111},"end":{"line":34,"column":36,"offset":1142},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1107},"end":{"line":34,"column":36,"offset":1142},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Make an existing type conform to a protocol","position":{"start":{"line":35,"column":5,"offset":1147},"end":{"line":35,"column":48,"offset":1190},"indent":[]}}],"position":{"start":{"line":35,"column":5,"offset":1147},"end":{"line":35,"column":48,"offset":1190},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1143},"end":{"line":35,"column":48,"offset":1190},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":945},"end":{"line":35,"column":48,"offset":1190},"indent":[1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"extension SomeType: SomeProtocol, AnotherProtocol {\n    // implementation of protocol requirements goes here\n}","position":{"start":{"line":37,"column":1,"offset":1192},"end":{"line":41,"column":4,"offset":1310},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Computed Properties","position":{"start":{"line":45,"column":4,"offset":1317},"end":{"line":45,"column":23,"offset":1336},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1314},"end":{"line":45,"column":23,"offset":1336},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"struct Size {\n    var width = 0.0, height = 0.0\n}\nstruct Point {\n    var x = 0.0, y = 0.0\n}\nstruct Rect {\n    var origin = Point()\n    var size = Size()\n}\n\nlet defaultRect = Rect()\nlet memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0), size: Size(width: 5.0, height: 5.0))\n\nextension Rect {\n    init(center: Point, size: Size) {\n        let originX = center.x - (size.width / 2)\n        let originY = center.y - (size.height / 2)\n        self.init(origin: Point(x: originX, y: originY), size: size)\n    }\n}\n\nlet centerRect = Rect(center: Point(x: 4.0, y: 4.0),\n                      size: Size(width: 3.0, height: 3.0))\n// centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)","position":{"start":{"line":47,"column":1,"offset":1338},"end":{"line":73,"column":4,"offset":2031},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Extensions can add new instance methods and type methods to existing types. The following example adds a new instance method called repetitions to the Int type:","position":{"start":{"line":75,"column":1,"offset":2033},"end":{"line":75,"column":161,"offset":2193},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":2033},"end":{"line":75,"column":161,"offset":2193},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"extension Int {\n    func repetitions(task: () -> Void) {\n        for _ in 0..<self {\n            task()\n        }\n    }\n}\n\n3.repetitions {\n    print(\"Hello!\")\n}\n// Hello!\n// Hello!\n// Hello!","position":{"start":{"line":77,"column":1,"offset":2195},"end":{"line":92,"column":4,"offset":2393},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Mutating Instance Methods","position":{"start":{"line":96,"column":4,"offset":2400},"end":{"line":96,"column":29,"offset":2425},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":2397},"end":{"line":96,"column":29,"offset":2425},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"extension Int {\n    mutating func square() {\n        self = self * self\n    }\n}\nvar someInt = 3\nsomeInt.square()\n// someInt is now 9","position":{"start":{"line":98,"column":1,"offset":2427},"end":{"line":107,"column":4,"offset":2567},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Subscripts","position":{"start":{"line":109,"column":4,"offset":2572},"end":{"line":109,"column":14,"offset":2582},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":2569},"end":{"line":109,"column":14,"offset":2582},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Extensions can add new subscripts to an existing type. This example adds an integer subscript to Swift’s built-in Int type. This subscript ","position":{"start":{"line":111,"column":1,"offset":2584},"end":{"line":111,"column":140,"offset":2723},"indent":[]}},{"type":"linkReference","identifier":"n","label":"n","referenceType":"shortcut","children":[{"type":"text","value":"n","position":{"start":{"line":111,"column":141,"offset":2724},"end":{"line":111,"column":142,"offset":2725},"indent":[]}}],"position":{"start":{"line":111,"column":140,"offset":2723},"end":{"line":111,"column":143,"offset":2726},"indent":[]}},{"type":"text","value":" returns the decimal digit n places in from the right of the number:","position":{"start":{"line":111,"column":143,"offset":2726},"end":{"line":111,"column":211,"offset":2794},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":2584},"end":{"line":111,"column":211,"offset":2794},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"123456789[0] returns 9\n123456789[1] returns 8","position":{"start":{"line":113,"column":1,"offset":2796},"end":{"line":116,"column":4,"offset":2849},"indent":[1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"extension Int {\n    subscript(digitIndex: Int) -> Int {\n        var decimalBase = 1\n        for _ in 0..<digitIndex {\n            decimalBase *= 10\n        }\n        return (self / decimalBase) % 10\n    }\n}\n746381295[0]\n// returns 5\n746381295[1]\n// returns 9\n746381295[2]\n// returns 2\n746381295[8]\n// returns 7\n\n746381295[9]\n// returns 0, as if you had requested:\n0746381295[9]","position":{"start":{"line":118,"column":1,"offset":2851},"end":{"line":140,"column":4,"offset":3236},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Nested Types","position":{"start":{"line":142,"column":4,"offset":3241},"end":{"line":142,"column":16,"offset":3253},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":3238},"end":{"line":142,"column":16,"offset":3253},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Extensions can add new nested types to existing classes, structures, and enumerations:","position":{"start":{"line":144,"column":1,"offset":3255},"end":{"line":144,"column":87,"offset":3341},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":3255},"end":{"line":144,"column":87,"offset":3341},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"extension Int {\n    enum Kind {\n        case negative, zero, positive\n    }\n    var kind: Kind {\n        switch self {\n        case 0:\n            return .zero\n        case let x where x > 0:\n            return .positive\n        default:\n            return .negative\n        }\n    }\n}\n\n// The nested enumeration can now be used with any Int value:\n\nfunc printIntegerKinds(_ numbers: [Int]) {\n    for number in numbers {\n        switch number.kind {\n        case .negative:\n            print(\"- \", terminator: \"\")\n        case .zero:\n            print(\"0 \", terminator: \"\")\n        case .positive:\n            print(\"+ \", terminator: \"\")\n        }\n    }\n    print(\"\")\n}\nprintIntegerKinds([3, 19, -27, 0, -6, 0, 7])\n// Prints \"+ + - 0 - 0 + \"","position":{"start":{"line":146,"column":1,"offset":3343},"end":{"line":180,"column":4,"offset":4091},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":183,"column":1,"offset":4094},"end":{"line":183,"column":31,"offset":4124},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":183,"column":31,"offset":4124}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"swift-3-extensions\"\n    }}>{`Swift 3 Extensions`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#swift-3-extensions\"\n        }}>{`Swift 3 Extensions`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#extensions\"\n            }}>{`Extensions`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----computed-properties\"\n                }}>{`---- Computed Properties`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----mutating-instance-methods\"\n                }}>{`---- Mutating Instance Methods`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----subscripts\"\n                }}>{`---- Subscripts`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----nested-types\"\n                }}>{`---- Nested Types`}</a></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"extensions\"\n    }}>{`Extensions`}</h2>\n    <p>{`Extensions add new functionality to an existing class, structure, enumeration, or protocol type.`}</p>\n    <p>{`This includes the ability to extend types for which you do not have access to the original source code (known as retroactive modeling). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions do not have names.)`}</p>\n    <p>{`Extensions in Swift can:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Add computed instance properties and computed type properties`}</li>\n      <li parentName=\"ul\">{`Define instance methods and type methods`}</li>\n      <li parentName=\"ul\">{`Provide new initializers`}</li>\n      <li parentName=\"ul\">{`Define subscripts`}</li>\n      <li parentName=\"ul\">{`Define and use new nested types`}</li>\n      <li parentName=\"ul\">{`Make an existing type conform to a protocol`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`extension SomeType: SomeProtocol, AnotherProtocol {\n    // implementation of protocol requirements goes here\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"computed-properties\"\n    }}>{`Computed Properties`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`struct Size {\n    var width = 0.0, height = 0.0\n}\nstruct Point {\n    var x = 0.0, y = 0.0\n}\nstruct Rect {\n    var origin = Point()\n    var size = Size()\n}\n\nlet defaultRect = Rect()\nlet memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0), size: Size(width: 5.0, height: 5.0))\n\nextension Rect {\n    init(center: Point, size: Size) {\n        let originX = center.x - (size.width / 2)\n        let originY = center.y - (size.height / 2)\n        self.init(origin: Point(x: originX, y: originY), size: size)\n    }\n}\n\nlet centerRect = Rect(center: Point(x: 4.0, y: 4.0),\n                      size: Size(width: 3.0, height: 3.0))\n// centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)\n`}</code></pre>\n    <p>{`Extensions can add new instance methods and type methods to existing types. The following example adds a new instance method called repetitions to the Int type:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`extension Int {\n    func repetitions(task: () -> Void) {\n        for _ in 0..<self {\n            task()\n        }\n    }\n}\n\n3.repetitions {\n    print(\"Hello!\")\n}\n// Hello!\n// Hello!\n// Hello!\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mutating-instance-methods\"\n    }}>{`Mutating Instance Methods`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`extension Int {\n    mutating func square() {\n        self = self * self\n    }\n}\nvar someInt = 3\nsomeInt.square()\n// someInt is now 9\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"subscripts\"\n    }}>{`Subscripts`}</h2>\n    <p>{`Extensions can add new subscripts to an existing type. This example adds an integer subscript to Swift’s built-in Int type. This subscript `}{`[n]`}{` returns the decimal digit n places in from the right of the number:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`123456789[0] returns 9\n123456789[1] returns 8\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`extension Int {\n    subscript(digitIndex: Int) -> Int {\n        var decimalBase = 1\n        for _ in 0..<digitIndex {\n            decimalBase *= 10\n        }\n        return (self / decimalBase) % 10\n    }\n}\n746381295[0]\n// returns 5\n746381295[1]\n// returns 9\n746381295[2]\n// returns 2\n746381295[8]\n// returns 7\n\n746381295[9]\n// returns 0, as if you had requested:\n0746381295[9]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nested-types\"\n    }}>{`Nested Types`}</h2>\n    <p>{`Extensions can add new nested types to existing classes, structures, and enumerations:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`extension Int {\n    enum Kind {\n        case negative, zero, positive\n    }\n    var kind: Kind {\n        switch self {\n        case 0:\n            return .zero\n        case let x where x > 0:\n            return .positive\n        default:\n            return .negative\n        }\n    }\n}\n\n// The nested enumeration can now be used with any Int value:\n\nfunc printIntegerKinds(_ numbers: [Int]) {\n    for number in numbers {\n        switch number.kind {\n        case .negative:\n            print(\"- \", terminator: \"\")\n        case .zero:\n            print(\"0 \", terminator: \"\")\n        case .positive:\n            print(\"+ \", terminator: \"\")\n        }\n    }\n    print(\"\")\n}\nprintIntegerKinds([3, 19, -27, 0, -6, 0, 7])\n// Prints \"+ + - 0 - 0 + \"\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}