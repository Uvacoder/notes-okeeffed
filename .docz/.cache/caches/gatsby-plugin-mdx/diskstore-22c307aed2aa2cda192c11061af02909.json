{"expireTime":9007200848610914000,"key":"gatsby-plugin-mdx-entire-payload-c1b4383a8cfe4fca9c5c617f5f4f688d-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Elm Rendering Examples","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":25,"offset":191},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":25,"offset":191},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Rendering via anonymous function","position":{"start":{"line":10,"column":4,"offset":196},"end":{"line":10,"column":36,"offset":228},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":193},"end":{"line":10,"column":36,"offset":228},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"view model =\n    div [ class \"content\" ]\n        [ h1 [] [ text \"Photo Groove\" ]\n        , div [ id \"thumbnails\" ]\n            -- anonymous function mapping photos\n            (List.map (\\photo -> viewThumbnail model.selectedUrl photo)\n                model.photos\n            )\n        , img                 #A\n            [ class \"large\"   #A\n            , src (urlPrefix ++ \"large/\" ++ model.selectedUrl)\n            ]\n            []\n        ]","position":{"start":{"line":12,"column":1,"offset":230},"end":{"line":27,"column":4,"offset":687},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Anon function with partial application","position":{"start":{"line":29,"column":5,"offset":693},"end":{"line":29,"column":43,"offset":731},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":689},"end":{"line":29,"column":43,"offset":731},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"Before: List.map (\\photo -> viewThumbnail model.selectedUrl photo) model.photos \n# Partial application is known as curried in Elm\nAfter: List.map (viewThumbnail model.selectedUrl) model.photos","position":{"start":{"line":31,"column":1,"offset":733},"end":{"line":35,"column":4,"offset":937},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All Elm functions are curried.","position":{"start":{"line":37,"column":1,"offset":939},"end":{"line":37,"column":31,"offset":969},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":939},"end":{"line":37,"column":31,"offset":969},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Update function","position":{"start":{"line":39,"column":4,"offset":974},"end":{"line":39,"column":19,"offset":989},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":971},"end":{"line":39,"column":19,"offset":989},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To update the model, we need to have the appropriate ","position":{"start":{"line":41,"column":1,"offset":991},"end":{"line":41,"column":54,"offset":1044},"indent":[]}},{"type":"inlineCode","value":"update","position":{"start":{"line":41,"column":54,"offset":1044},"end":{"line":41,"column":62,"offset":1052},"indent":[]}},{"type":"text","value":" function and expose the correct ","position":{"start":{"line":41,"column":62,"offset":1052},"end":{"line":41,"column":95,"offset":1085},"indent":[]}},{"type":"inlineCode","value":"Html.Events","position":{"start":{"line":41,"column":95,"offset":1085},"end":{"line":41,"column":108,"offset":1098},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":41,"column":108,"offset":1098},"end":{"line":41,"column":109,"offset":1099},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":991},"end":{"line":41,"column":109,"offset":1099},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"import Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (onClick)\n\nupdate msg model =\n    if msg.description == \"ClickedPhoto\" then\n        { model | selectedUrl = msg.data }\n    else model\n\nviewThumbnail selectedUrl thumb =\n    img\n        [ src (urlPrefix ++ thumb.url)\n        , classList [ ( \"selected\", selectedUrl == thumbnail.url ) ]\n        , onClick { description = \"ClickedPhoto\", data = thumb.url } ]\n        []","position":{"start":{"line":43,"column":1,"offset":1101},"end":{"line":59,"column":4,"offset":1569},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Implementing the Model-View-Update Loop","position":{"start":{"line":61,"column":4,"offset":1574},"end":{"line":61,"column":43,"offset":1613},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1571},"end":{"line":61,"column":43,"offset":1613},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"import Browser\n\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , view = view\n        , update = update\n        }","position":{"start":{"line":63,"column":1,"offset":1615},"end":{"line":72,"column":4,"offset":1756},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Multi-Argument Function Annotations","position":{"start":{"line":74,"column":4,"offset":1761},"end":{"line":74,"column":39,"offset":1796},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1758},"end":{"line":74,"column":39,"offset":1796},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"> String.padLeft\n<function:padLeft> : Int -> Char -> String -> String\n> String.padLeft 9\n<function> : Char -> String -> String\n> String.padLeft 9 '.' <function> : String -> String\n> String.padLeft 9 '.' \"not!\" \".....not!\" : String","position":{"start":{"line":76,"column":1,"offset":1798},"end":{"line":83,"column":4,"offset":2041},"indent":[1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":87,"column":1,"offset":2045},"end":{"line":87,"column":31,"offset":2075},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":87,"column":31,"offset":2075}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"elm-rendering-examples\"\n    }}>{`Elm Rendering Examples`}</h1>\n    <h2 {...{\n      \"id\": \"rendering-via-anonymous-function\"\n    }}>{`Rendering via anonymous function`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`view model =\n    div [ class \"content\" ]\n        [ h1 [] [ text \"Photo Groove\" ]\n        , div [ id \"thumbnails\" ]\n            -- anonymous function mapping photos\n            (List.map (\\\\photo -> viewThumbnail model.selectedUrl photo)\n                model.photos\n            )\n        , img                 #A\n            [ class \"large\"   #A\n            , src (urlPrefix ++ \"large/\" ++ model.selectedUrl)\n            ]\n            []\n        ]\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"anon-function-with-partial-application\"\n    }}>{`Anon function with partial application`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`Before: List.map (\\\\photo -> viewThumbnail model.selectedUrl photo) model.photos \n# Partial application is known as curried in Elm\nAfter: List.map (viewThumbnail model.selectedUrl) model.photos\n`}</code></pre>\n    <p>{`All Elm functions are curried.`}</p>\n    <h2 {...{\n      \"id\": \"update-function\"\n    }}>{`Update function`}</h2>\n    <p>{`To update the model, we need to have the appropriate `}<inlineCode parentName=\"p\">{`update`}</inlineCode>{` function and expose the correct `}<inlineCode parentName=\"p\">{`Html.Events`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`import Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (onClick)\n\nupdate msg model =\n    if msg.description == \"ClickedPhoto\" then\n        { model | selectedUrl = msg.data }\n    else model\n\nviewThumbnail selectedUrl thumb =\n    img\n        [ src (urlPrefix ++ thumb.url)\n        , classList [ ( \"selected\", selectedUrl == thumbnail.url ) ]\n        , onClick { description = \"ClickedPhoto\", data = thumb.url } ]\n        []\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"implementing-the-model-view-update-loop\"\n    }}>{`Implementing the Model-View-Update Loop`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`import Browser\n\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , view = view\n        , update = update\n        }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"multi-argument-function-annotations\"\n    }}>{`Multi-Argument Function Annotations`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`> String.padLeft\n<function:padLeft> : Int -> Char -> String -> String\n> String.padLeft 9\n<function> : Char -> String -> String\n> String.padLeft 9 '.' <function> : String -> String\n> String.padLeft 9 '.' \"not!\" \".....not!\" : String\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}