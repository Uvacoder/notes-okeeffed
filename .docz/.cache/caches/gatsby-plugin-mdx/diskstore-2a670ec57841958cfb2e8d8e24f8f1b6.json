{"expireTime":9007200867335978000,"key":"gatsby-plugin-mdx-entire-payload-4a48cba42cf604e366e03119421fc684-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Singleton","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":12,"offset":178},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":12,"offset":178},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Another creational design pattern used to ensure there is only ever one instance in use.","position":{"start":{"line":10,"column":1,"offset":180},"end":{"line":10,"column":89,"offset":268},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":180},"end":{"line":10,"column":89,"offset":268},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"class Singleton {\n  private static instance: Singleton;\n  public value: number = 4;\n\n  private constructor() {}\n\n  static getSharedInstance() {\n    if (!Singleton.instance) {\n      Singleton.instance = new Singleton();\n    }\n\n    return Singleton.instance;\n  }\n}\n\nconst singletonOne = Singleton.getSharedInstance();\nsingletonOne.value = 12;\nconsole.log('S1 value:', singletonOne.value); // 12\n\nconst singletonTwo = Singleton.getSharedInstance();\nsingletonTwo.value = 21;\nconsole.log('S2 value:', singletonTwo.value); // 21\nconsole.log('S1 value:', singletonOne.value); // 21","position":{"start":{"line":12,"column":1,"offset":270},"end":{"line":36,"column":4,"offset":862},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":39,"column":1,"offset":865},"end":{"line":39,"column":31,"offset":895},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":39,"column":31,"offset":895}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"singleton\"\n    }}>{`Singleton`}</h1>\n    <p>{`Another creational design pattern used to ensure there is only ever one instance in use.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Singleton {\n  private static instance: Singleton;\n  public value: number = 4;\n\n  private constructor() {}\n\n  static getSharedInstance() {\n    if (!Singleton.instance) {\n      Singleton.instance = new Singleton();\n    }\n\n    return Singleton.instance;\n  }\n}\n\nconst singletonOne = Singleton.getSharedInstance();\nsingletonOne.value = 12;\nconsole.log('S1 value:', singletonOne.value); // 12\n\nconst singletonTwo = Singleton.getSharedInstance();\nsingletonTwo.value = 21;\nconsole.log('S2 value:', singletonTwo.value); // 21\nconsole.log('S1 value:', singletonOne.value); // 21\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}