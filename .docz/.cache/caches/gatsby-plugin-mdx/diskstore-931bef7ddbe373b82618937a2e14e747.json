{"expireTime":9007200849425531000,"key":"gatsby-plugin-mdx-entire-payload-932df9b9d6ff129a113f166f14ff4886-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Enhancing Nodejs Performance","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":31,"offset":197},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":31,"offset":197},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We're going to look at two ways to improve performance:","position":{"start":{"line":10,"column":1,"offset":199},"end":{"line":10,"column":56,"offset":254},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":199},"end":{"line":10,"column":56,"offset":254},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Using Node in 'Cluster' Mode","position":{"start":{"line":12,"column":4,"offset":259},"end":{"line":12,"column":32,"offset":287},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":259},"end":{"line":12,"column":32,"offset":287},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":256},"end":{"line":12,"column":32,"offset":287},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Using Worker Threads","position":{"start":{"line":13,"column":4,"offset":291},"end":{"line":13,"column":24,"offset":311},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":291},"end":{"line":13,"column":24,"offset":311},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":288},"end":{"line":13,"column":24,"offset":311},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":256},"end":{"line":13,"column":24,"offset":311},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The recommended approach would be using ","position":{"start":{"line":15,"column":1,"offset":313},"end":{"line":15,"column":41,"offset":353},"indent":[]}},{"type":"inlineCode","value":"cluster","position":{"start":{"line":15,"column":41,"offset":353},"end":{"line":15,"column":50,"offset":362},"indent":[]}},{"type":"text","value":" mode, whereas worker threads are way more experimental.","position":{"start":{"line":15,"column":50,"offset":362},"end":{"line":15,"column":106,"offset":418},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":313},"end":{"line":15,"column":106,"offset":418},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Test App","position":{"start":{"line":17,"column":4,"offset":423},"end":{"line":17,"column":12,"offset":431},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":420},"end":{"line":17,"column":12,"offset":431},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We'll use a tiny express server for playing around.","position":{"start":{"line":19,"column":1,"offset":433},"end":{"line":19,"column":52,"offset":484},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":433},"end":{"line":19,"column":52,"offset":484},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// app.js\nconst express = require('express');\nconst app = express();\n\nfunction doWork(duration) {\n  const start = new Date.now();\n  while (Date.now() - start < duration) {\n    // do nothing else\n  }\n}\n\napp.get('/', (req, res) => {\n  doWork(5000);\n  res.send('Hello');\n});\n\napp.listen(3000);","position":{"start":{"line":21,"column":1,"offset":486},"end":{"line":39,"column":4,"offset":794},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This app will be continually updated to show the performance updates.","position":{"start":{"line":41,"column":1,"offset":796},"end":{"line":41,"column":70,"offset":865},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":796},"end":{"line":41,"column":70,"offset":865},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Blocking the Event Loop","position":{"start":{"line":43,"column":4,"offset":870},"end":{"line":43,"column":27,"offset":893},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":867},"end":{"line":43,"column":27,"offset":893},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Keep in mind:","position":{"start":{"line":45,"column":1,"offset":895},"end":{"line":45,"column":14,"offset":908},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":895},"end":{"line":45,"column":14,"offset":908},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"[Single Thread]\nRequest => Node Server => Response","position":{"start":{"line":47,"column":1,"offset":910},"end":{"line":50,"column":4,"offset":973},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We start to run into issues here when our request requires a lot of processing power (in the example app, this will be the function ","position":{"start":{"line":52,"column":1,"offset":975},"end":{"line":52,"column":133,"offset":1107},"indent":[]}},{"type":"inlineCode","value":"doWork","position":{"start":{"line":52,"column":133,"offset":1107},"end":{"line":52,"column":141,"offset":1115},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":52,"column":141,"offset":1115},"end":{"line":52,"column":143,"offset":1117},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":975},"end":{"line":52,"column":143,"offset":1117},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note that with the ","position":{"start":{"line":54,"column":1,"offset":1119},"end":{"line":54,"column":20,"offset":1138},"indent":[]}},{"type":"inlineCode","value":"doWork","position":{"start":{"line":54,"column":20,"offset":1138},"end":{"line":54,"column":28,"offset":1146},"indent":[]}},{"type":"text","value":" function call, we are blocking the entire event loop. ","position":{"start":{"line":54,"column":28,"offset":1146},"end":{"line":54,"column":83,"offset":1201},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"This blocks the entire server from handling other requests.","position":{"start":{"line":54,"column":85,"offset":1203},"end":{"line":54,"column":144,"offset":1262},"indent":[]}}],"position":{"start":{"line":54,"column":83,"offset":1201},"end":{"line":54,"column":146,"offset":1264},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1119},"end":{"line":54,"column":146,"offset":1264},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Clustering in Theory","position":{"start":{"line":56,"column":4,"offset":1269},"end":{"line":56,"column":24,"offset":1289},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1266},"end":{"line":56,"column":24,"offset":1289},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"Cluster Manager\n  => Single Threaded Node Server\n  => Single Threaded Node Server\n  => Single Threaded Node Server","position":{"start":{"line":58,"column":1,"offset":1291},"end":{"line":63,"column":4,"offset":1418},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":65,"column":1,"offset":1420},"end":{"line":65,"column":5,"offset":1424},"indent":[]}},{"type":"inlineCode","value":"cluster manager","position":{"start":{"line":65,"column":5,"offset":1424},"end":{"line":65,"column":22,"offset":1441},"indent":[]}},{"type":"text","value":" is only responsible for monitoring the health of individual ","position":{"start":{"line":65,"column":22,"offset":1441},"end":{"line":65,"column":83,"offset":1502},"indent":[]}},{"type":"inlineCode","value":"node server","position":{"start":{"line":65,"column":83,"offset":1502},"end":{"line":65,"column":96,"offset":1515},"indent":[]}},{"type":"text","value":" instances. It will still be up to the instances to handle the request handling and processing.","position":{"start":{"line":65,"column":96,"offset":1515},"end":{"line":65,"column":191,"offset":1610},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1420},"end":{"line":65,"column":191,"offset":1610},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"# RUN node app.js\n└── app.js  ===================> Worker Instance\n    └──  Cluster Manager\n        └── cluster.fork() # forks app.js","position":{"start":{"line":67,"column":1,"offset":1612},"end":{"line":72,"column":4,"offset":1758},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Forking Children With Cluster","position":{"start":{"line":74,"column":4,"offset":1763},"end":{"line":74,"column":33,"offset":1792},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1760},"end":{"line":74,"column":33,"offset":1792},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When running the manager, note that Node will first run all the JavaScript code in the file and then startup the ","position":{"start":{"line":76,"column":1,"offset":1794},"end":{"line":76,"column":114,"offset":1907},"indent":[]}},{"type":"inlineCode","value":"Cluster Manager","position":{"start":{"line":76,"column":114,"offset":1907},"end":{"line":76,"column":131,"offset":1924},"indent":[]}},{"type":"text","value":". We want to ensure there is at least one scenario with the forked app running as expected.","position":{"start":{"line":76,"column":131,"offset":1924},"end":{"line":76,"column":222,"offset":2015},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":1794},"end":{"line":76,"column":222,"offset":2015},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// app.js\nconst cluster = require('cluster');\n// Is file executed in the master mode?\nif (cluster.isMaster) {\n  // Cause app.js to be executed again but in child mode\n  cluster.fork();\n} else {\n  // Child - operate as normal server\n  const express = require('express');\n  const app = express();\n\n  function doWork(duration) {\n    const start = new Date.now();\n    while (Date.now() - start < duration) {\n      // do nothing else\n    }\n  }\n\n  app.get('/', (req, res) => {\n    doWork(5000);\n    res.send('Hello');\n  });\n\n  app.listen(3000);\n};","position":{"start":{"line":78,"column":1,"offset":2017},"end":{"line":104,"column":4,"offset":2576},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we add multiple ","position":{"start":{"line":106,"column":1,"offset":2578},"end":{"line":106,"column":20,"offset":2597},"indent":[]}},{"type":"inlineCode","value":"cluster.fork()","position":{"start":{"line":106,"column":20,"offset":2597},"end":{"line":106,"column":36,"offset":2613},"indent":[]}},{"type":"text","value":" calls, we can have multiple instances of the server ready to run.","position":{"start":{"line":106,"column":36,"offset":2613},"end":{"line":106,"column":102,"offset":2679},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":2578},"end":{"line":106,"column":102,"offset":2679},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Benchmarking Server Performance","position":{"start":{"line":108,"column":4,"offset":2684},"end":{"line":108,"column":35,"offset":2715},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":2681},"end":{"line":108,"column":35,"offset":2715},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For benchmarking, we will use a program called ","position":{"start":{"line":110,"column":1,"offset":2717},"end":{"line":110,"column":48,"offset":2764},"indent":[]}},{"type":"inlineCode","value":"ab","position":{"start":{"line":110,"column":48,"offset":2764},"end":{"line":110,"column":52,"offset":2768},"indent":[]}},{"type":"text","value":". (Available for MacOS)","position":{"start":{"line":110,"column":52,"offset":2768},"end":{"line":110,"column":75,"offset":2791},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":2717},"end":{"line":110,"column":75,"offset":2791},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Usage: ","position":{"start":{"line":112,"column":1,"offset":2793},"end":{"line":112,"column":8,"offset":2800},"indent":[]}},{"type":"inlineCode","value":"ab -c 50 -n 500 localhost:3000/fast","position":{"start":{"line":112,"column":8,"offset":2800},"end":{"line":112,"column":45,"offset":2837},"indent":[]}},{"type":"text","value":" where ","position":{"start":{"line":112,"column":45,"offset":2837},"end":{"line":112,"column":52,"offset":2844},"indent":[]}},{"type":"inlineCode","value":"-c","position":{"start":{"line":112,"column":52,"offset":2844},"end":{"line":112,"column":56,"offset":2848},"indent":[]}},{"type":"text","value":" is 50 concurrent requests and ","position":{"start":{"line":112,"column":56,"offset":2848},"end":{"line":112,"column":87,"offset":2879},"indent":[]}},{"type":"inlineCode","value":"-n","position":{"start":{"line":112,"column":87,"offset":2879},"end":{"line":112,"column":91,"offset":2883},"indent":[]}},{"type":"text","value":" indicates 500 requests.","position":{"start":{"line":112,"column":91,"offset":2883},"end":{"line":112,"column":115,"offset":2907},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":2793},"end":{"line":112,"column":115,"offset":2907},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the bottom code, we're going show how you can get diminishing returns by adding more children. It is important that we keep a threadpool size of ","position":{"start":{"line":114,"column":1,"offset":2909},"end":{"line":114,"column":149,"offset":3057},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":114,"column":149,"offset":3057},"end":{"line":114,"column":152,"offset":3060},"indent":[]}},{"type":"text","value":" for this example.","position":{"start":{"line":114,"column":152,"offset":3060},"end":{"line":114,"column":170,"offset":3078},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":2909},"end":{"line":114,"column":170,"offset":3078},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// app.js\nprocess.env.UV_THREADPOOL_SIZE = 1; // just for benchmarking purposes\nconst cluster = require('cluster');\n// Is file executed in the master mode?\nif (cluster.isMaster) {\n  // Cause app.js to be executed again but in child mode\n  cluster.fork();\n} else {\n  // Child - operate as normal server\n  const crypto = require('crypto');\n  const express = require('express');\n  const app = express();\n  \n  app.get('/', (req, res) => {\n    crypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n      res.send('Hello');\n    })\n});\n\n  app.listen(3000);\n};","position":{"start":{"line":116,"column":1,"offset":3080},"end":{"line":138,"column":4,"offset":3651},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we run ","position":{"start":{"line":140,"column":1,"offset":3653},"end":{"line":140,"column":11,"offset":3663},"indent":[]}},{"type":"inlineCode","value":"ab -c 1 -n 1 localhost:3000/","position":{"start":{"line":140,"column":11,"offset":3663},"end":{"line":140,"column":41,"offset":3693},"indent":[]}},{"type":"text","value":" we will see that we get a ","position":{"start":{"line":140,"column":41,"offset":3693},"end":{"line":140,"column":68,"offset":3720},"indent":[]}},{"type":"inlineCode","value":"Time taken for tests","position":{"start":{"line":140,"column":68,"offset":3720},"end":{"line":140,"column":90,"offset":3742},"indent":[]}},{"type":"text","value":" to be ~1000ms.","position":{"start":{"line":140,"column":90,"offset":3742},"end":{"line":140,"column":105,"offset":3757},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":3653},"end":{"line":140,"column":105,"offset":3757},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can see the timing of this is similar to the example for ","position":{"start":{"line":142,"column":1,"offset":3759},"end":{"line":142,"column":61,"offset":3819},"indent":[]}},{"type":"inlineCode","value":"crypto","position":{"start":{"line":142,"column":61,"offset":3819},"end":{"line":142,"column":69,"offset":3827},"indent":[]}},{"type":"text","value":" we had in ","position":{"start":{"line":142,"column":69,"offset":3827},"end":{"line":142,"column":80,"offset":3838},"indent":[]}},{"type":"inlineCode","value":"Nodejs/Node Interals","position":{"start":{"line":142,"column":80,"offset":3838},"end":{"line":142,"column":102,"offset":3860},"indent":[]}},{"type":"text","value":" when demoing the ","position":{"start":{"line":142,"column":102,"offset":3860},"end":{"line":142,"column":120,"offset":3878},"indent":[]}},{"type":"inlineCode","value":"crypto","position":{"start":{"line":142,"column":120,"offset":3878},"end":{"line":142,"column":128,"offset":3886},"indent":[]}},{"type":"text","value":" module.","position":{"start":{"line":142,"column":128,"offset":3886},"end":{"line":142,"column":136,"offset":3894},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":3759},"end":{"line":142,"column":136,"offset":3894},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we run ","position":{"start":{"line":144,"column":1,"offset":3896},"end":{"line":144,"column":11,"offset":3906},"indent":[]}},{"type":"inlineCode","value":"ab -c 2 -n 2 localhost:3000/","position":{"start":{"line":144,"column":11,"offset":3906},"end":{"line":144,"column":41,"offset":3936},"indent":[]}},{"type":"text","value":", we see that one requests took 1s, while the other took 2s. This is similar to what we saw in ","position":{"start":{"line":144,"column":41,"offset":3936},"end":{"line":144,"column":136,"offset":4031},"indent":[]}},{"type":"inlineCode","value":"Node Internals","position":{"start":{"line":144,"column":136,"offset":4031},"end":{"line":144,"column":152,"offset":4047},"indent":[]}},{"type":"text","value":". Given the one thread, we see that the second request needs to wait for the first request to be released from the threadpool.","position":{"start":{"line":144,"column":152,"offset":4047},"end":{"line":144,"column":278,"offset":4173},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":3896},"end":{"line":144,"column":278,"offset":4173},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we update our code to add another child process using ","position":{"start":{"line":146,"column":1,"offset":4175},"end":{"line":146,"column":58,"offset":4232},"indent":[]}},{"type":"inlineCode","value":"cluster.fork();","position":{"start":{"line":146,"column":58,"offset":4232},"end":{"line":146,"column":75,"offset":4249},"indent":[]}},{"type":"text","value":", we will notice that both the requests now get processed in the two child processes (STILL USING ONE THREAD) and have come back with the expected time ~1000ms.","position":{"start":{"line":146,"column":75,"offset":4249},"end":{"line":146,"column":235,"offset":4409},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":4175},"end":{"line":146,"column":235,"offset":4409},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"What happens with too many children?","position":{"start":{"line":148,"column":5,"offset":4415},"end":{"line":148,"column":41,"offset":4451},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":4411},"end":{"line":148,"column":41,"offset":4451},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we forked six processes and ran ","position":{"start":{"line":150,"column":1,"offset":4453},"end":{"line":150,"column":36,"offset":4488},"indent":[]}},{"type":"inlineCode","value":"ab -c 6 -n 6 localhost:3000/","position":{"start":{"line":150,"column":36,"offset":4488},"end":{"line":150,"column":66,"offset":4518},"indent":[]}},{"type":"text","value":" we will see that for some reason, we are now taking 3.5 seconds for each of the 6 requests across the board.","position":{"start":{"line":150,"column":66,"offset":4518},"end":{"line":150,"column":175,"offset":4627},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":4453},"end":{"line":150,"column":175,"offset":4627},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Why is this? It depends on the kind of computer that you have. Note that for the example above, it was run on a dual-core CPU. That's because the CPU is now trying to do a little bit of work on all 6 threads. So although we could now process the children in parallel, we have overallocated our resources.","position":{"start":{"line":152,"column":1,"offset":4629},"end":{"line":152,"column":305,"offset":4933},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":4629},"end":{"line":152,"column":305,"offset":4933},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we now reduced the forked processes to 2 and still ran ","position":{"start":{"line":154,"column":1,"offset":4935},"end":{"line":154,"column":59,"offset":4993},"indent":[]}},{"type":"inlineCode","value":"ab -c 6 -n 6 localhost:3000/","position":{"start":{"line":154,"column":59,"offset":4993},"end":{"line":154,"column":89,"offset":5023},"indent":[]}},{"type":"text","value":", we will notice that the slowest request is still around 3.4s, while our fastest request is now ~1s. This is because at a cluster with two children, we know that we can at most handle two requests at the same time. ","position":{"start":{"line":154,"column":89,"offset":5023},"end":{"line":154,"column":305,"offset":5239},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":4935},"end":{"line":154,"column":305,"offset":5239},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Essentially, the first two requests are processed in the first second, the next two in the second, the last two in the third - this makes perfect sense. This means that we have ended with a far better performance profile.","position":{"start":{"line":156,"column":1,"offset":5241},"end":{"line":156,"column":222,"offset":5462},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":5241},"end":{"line":156,"column":222,"offset":5462},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PM2 Configuration","position":{"start":{"line":158,"column":4,"offset":5467},"end":{"line":158,"column":21,"offset":5484},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":5464},"end":{"line":158,"column":21,"offset":5484},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"PM2 can supercharge our clustering setup. PM2 makes cluster management super easy for Nodejs. It can be installed through ","position":{"start":{"line":160,"column":1,"offset":5486},"end":{"line":160,"column":123,"offset":5608},"indent":[]}},{"type":"inlineCode","value":"npm","position":{"start":{"line":160,"column":123,"offset":5608},"end":{"line":160,"column":128,"offset":5613},"indent":[]}},{"type":"text","value":" globally using ","position":{"start":{"line":160,"column":128,"offset":5613},"end":{"line":160,"column":144,"offset":5629},"indent":[]}},{"type":"inlineCode","value":"npm i -g pm2","position":{"start":{"line":160,"column":144,"offset":5629},"end":{"line":160,"column":158,"offset":5643},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":160,"column":158,"offset":5643},"end":{"line":160,"column":159,"offset":5644},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":5486},"end":{"line":160,"column":159,"offset":5644},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To run the script in ","position":{"start":{"line":162,"column":1,"offset":5646},"end":{"line":162,"column":22,"offset":5667},"indent":[]}},{"type":"inlineCode","value":"pm2","position":{"start":{"line":162,"column":22,"offset":5667},"end":{"line":162,"column":27,"offset":5672},"indent":[]}},{"type":"text","value":", we need to update our app once again.","position":{"start":{"line":162,"column":27,"offset":5672},"end":{"line":162,"column":66,"offset":5711},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":5646},"end":{"line":162,"column":66,"offset":5711},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// app.js\n\n// Child - operate as normal server\nconst crypto = require('crypto');\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n crypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n   res.send('Hello');\n })\n});\n\napp.listen(3000);","position":{"start":{"line":164,"column":1,"offset":5713},"end":{"line":179,"column":4,"offset":6005},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"pm2 start index.js -i 0","position":{"start":{"line":181,"column":1,"offset":6007},"end":{"line":181,"column":26,"offset":6032},"indent":[]}},{"type":"text","value":" will tell pm2 to auto-configure how many instances to setup based on the amount of logical cores (physical * virtual cores) are available.","position":{"start":{"line":181,"column":26,"offset":6032},"end":{"line":181,"column":165,"offset":6171},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":6007},"end":{"line":181,"column":165,"offset":6171},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Call","position":{"start":{"line":183,"column":3,"offset":6175},"end":{"line":183,"column":7,"offset":6179},"indent":[]}}],"position":{"start":{"line":183,"column":3,"offset":6175},"end":{"line":183,"column":26,"offset":6198},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Definition","position":{"start":{"line":183,"column":29,"offset":6201},"end":{"line":183,"column":39,"offset":6211},"indent":[]}}],"position":{"start":{"line":183,"column":29,"offset":6201},"end":{"line":183,"column":74,"offset":6246},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":6173},"end":{"line":183,"column":76,"offset":6248},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"pm2 monit","position":{"start":{"line":185,"column":3,"offset":6327},"end":{"line":185,"column":12,"offset":6336},"indent":[]}}],"position":{"start":{"line":185,"column":3,"offset":6327},"end":{"line":185,"column":26,"offset":6350},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Show pm2 monitor","position":{"start":{"line":185,"column":29,"offset":6353},"end":{"line":185,"column":45,"offset":6369},"indent":[]}}],"position":{"start":{"line":185,"column":29,"offset":6353},"end":{"line":185,"column":74,"offset":6398},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":6325},"end":{"line":185,"column":76,"offset":6400},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"pm2 list","position":{"start":{"line":186,"column":3,"offset":6403},"end":{"line":186,"column":11,"offset":6411},"indent":[]}}],"position":{"start":{"line":186,"column":3,"offset":6403},"end":{"line":186,"column":26,"offset":6426},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"List all pm2 processes","position":{"start":{"line":186,"column":29,"offset":6429},"end":{"line":186,"column":51,"offset":6451},"indent":[]}}],"position":{"start":{"line":186,"column":29,"offset":6429},"end":{"line":186,"column":74,"offset":6474},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":6401},"end":{"line":186,"column":76,"offset":6476},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"pm2 start index.js -i 0","position":{"start":{"line":187,"column":3,"offset":6479},"end":{"line":187,"column":26,"offset":6502},"indent":[]}}],"position":{"start":{"line":187,"column":3,"offset":6479},"end":{"line":187,"column":26,"offset":6502},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Start index.js with auto-configured instances","position":{"start":{"line":187,"column":29,"offset":6505},"end":{"line":187,"column":74,"offset":6550},"indent":[]}}],"position":{"start":{"line":187,"column":29,"offset":6505},"end":{"line":187,"column":74,"offset":6550},"indent":[]}}],"position":{"start":{"line":187,"column":1,"offset":6477},"end":{"line":187,"column":76,"offset":6552},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"pm2 delete index","position":{"start":{"line":188,"column":3,"offset":6555},"end":{"line":188,"column":19,"offset":6571},"indent":[]}}],"position":{"start":{"line":188,"column":3,"offset":6555},"end":{"line":188,"column":26,"offset":6578},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Delete all index children","position":{"start":{"line":188,"column":29,"offset":6581},"end":{"line":188,"column":54,"offset":6606},"indent":[]}}],"position":{"start":{"line":188,"column":29,"offset":6581},"end":{"line":188,"column":74,"offset":6626},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":6553},"end":{"line":188,"column":76,"offset":6628},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":6173},"end":{"line":188,"column":76,"offset":6628},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"pm2","position":{"start":{"line":190,"column":1,"offset":6630},"end":{"line":190,"column":6,"offset":6635},"indent":[]}},{"type":"text","value":" is generally used in production environments only.","position":{"start":{"line":190,"column":6,"offset":6635},"end":{"line":190,"column":57,"offset":6686},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":6630},"end":{"line":190,"column":57,"offset":6686},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Web Worker Threads","position":{"start":{"line":192,"column":4,"offset":6691},"end":{"line":192,"column":22,"offset":6709},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":6688},"end":{"line":192,"column":22,"offset":6709},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At the time of writing - these were in experimental phase.","position":{"start":{"line":194,"column":1,"offset":6711},"end":{"line":194,"column":59,"offset":6769},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":6711},"end":{"line":194,"column":59,"offset":6769},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, we are using the module ","position":{"start":{"line":196,"column":1,"offset":6771},"end":{"line":196,"column":42,"offset":6812},"indent":[]}},{"type":"inlineCode","value":"webworker-threads","position":{"start":{"line":196,"column":42,"offset":6812},"end":{"line":196,"column":61,"offset":6831},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":196,"column":61,"offset":6831},"end":{"line":196,"column":62,"offset":6832},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":6771},"end":{"line":196,"column":62,"offset":6832},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"Our App\n└── Worker Interface (communicates with Worker)\n    └── postMessage <===> onmessage (Worker)\n    └── onmessage <===> postMessage (Worker)","position":{"start":{"line":198,"column":1,"offset":6834},"end":{"line":203,"column":4,"offset":6992},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":205,"column":1,"offset":6994},"end":{"line":205,"column":5,"offset":6998},"indent":[]}},{"type":"inlineCode","value":"Worker","position":{"start":{"line":205,"column":5,"offset":6998},"end":{"line":205,"column":13,"offset":7006},"indent":[]}},{"type":"text","value":" itself is working on its own thread. Remember: a lot of the Nodejs standard lib functions ALREADY work on their own thread. You only really want to use it for your own heavy-duty business logic.","position":{"start":{"line":205,"column":13,"offset":7006},"end":{"line":205,"column":208,"offset":7201},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":6994},"end":{"line":205,"column":208,"offset":7201},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note: any function passed to the worker cannot access the parent scoped variables. It is also important to use the function keyword on purpose.","position":{"start":{"line":207,"column":1,"offset":7203},"end":{"line":207,"column":144,"offset":7346},"indent":[]}}],"position":{"start":{"line":207,"column":1,"offset":7203},"end":{"line":207,"column":144,"offset":7346},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// app.js\nconst Worker = require('webworker-threads').Worker;\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const worker = new Worker(function() {\n    this.onmessage = function() {\n      // emulate heavy work\n      let counter = 0;\n      whilte (counter < 1e9) {\n        counter++;\n      }\n\n      postMessage(counter);\n    }\n  });\n\n  worker.onmessage = function(counter) {\n    console.log(counter);\n    res.send('' + message.data); // casting as send requires string\n  }\n\n  worker.postMessage();\n});\n\napp.listen(3000);","position":{"start":{"line":209,"column":1,"offset":7348},"end":{"line":237,"column":4,"offset":7929},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For benchmarking these workers, we can again use ","position":{"start":{"line":239,"column":1,"offset":7931},"end":{"line":239,"column":50,"offset":7980},"indent":[]}},{"type":"inlineCode","value":"ab","position":{"start":{"line":239,"column":50,"offset":7980},"end":{"line":239,"column":54,"offset":7984},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":239,"column":54,"offset":7984},"end":{"line":239,"column":56,"offset":7986},"indent":[]}},{"type":"inlineCode","value":"ab -c 1 -n 1 localhost:3000/","position":{"start":{"line":239,"column":56,"offset":7986},"end":{"line":239,"column":86,"offset":8016},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":239,"column":86,"offset":8016},"end":{"line":239,"column":91,"offset":8021},"indent":[]}},{"type":"inlineCode","value":"ab -c 2 -n 2 localhost:3000/","position":{"start":{"line":239,"column":91,"offset":8021},"end":{"line":239,"column":121,"offset":8051},"indent":[]}},{"type":"text","value":" should run with similar results on a dual-core Mac. ","position":{"start":{"line":239,"column":121,"offset":8051},"end":{"line":239,"column":174,"offset":8104},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":7931},"end":{"line":239,"column":174,"offset":8104},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":241,"column":1,"offset":8106},"end":{"line":241,"column":31,"offset":8136},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":241,"column":31,"offset":8136}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"enhancing-nodejs-performance\"\n    }}>{`Enhancing Nodejs Performance`}</h1>\n    <p>{`We're going to look at two ways to improve performance:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Using Node in 'Cluster' Mode`}</li>\n      <li parentName=\"ol\">{`Using Worker Threads`}</li>\n    </ol>\n    <p>{`The recommended approach would be using `}<inlineCode parentName=\"p\">{`cluster`}</inlineCode>{` mode, whereas worker threads are way more experimental.`}</p>\n    <h2 {...{\n      \"id\": \"test-app\"\n    }}>{`Test App`}</h2>\n    <p>{`We'll use a tiny express server for playing around.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nconst express = require('express');\nconst app = express();\n\nfunction doWork(duration) {\n  const start = new Date.now();\n  while (Date.now() - start < duration) {\n    // do nothing else\n  }\n}\n\napp.get('/', (req, res) => {\n  doWork(5000);\n  res.send('Hello');\n});\n\napp.listen(3000);\n`}</code></pre>\n    <p>{`This app will be continually updated to show the performance updates.`}</p>\n    <h2 {...{\n      \"id\": \"blocking-the-event-loop\"\n    }}>{`Blocking the Event Loop`}</h2>\n    <p>{`Keep in mind:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`[Single Thread]\nRequest => Node Server => Response\n`}</code></pre>\n    <p>{`We start to run into issues here when our request requires a lot of processing power (in the example app, this will be the function `}<inlineCode parentName=\"p\">{`doWork`}</inlineCode>{`).`}</p>\n    <p>{`Note that with the `}<inlineCode parentName=\"p\">{`doWork`}</inlineCode>{` function call, we are blocking the entire event loop. `}<strong parentName=\"p\">{`This blocks the entire server from handling other requests.`}</strong></p>\n    <h2 {...{\n      \"id\": \"clustering-in-theory\"\n    }}>{`Clustering in Theory`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Cluster Manager\n  => Single Threaded Node Server\n  => Single Threaded Node Server\n  => Single Threaded Node Server\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`cluster manager`}</inlineCode>{` is only responsible for monitoring the health of individual `}<inlineCode parentName=\"p\">{`node server`}</inlineCode>{` instances. It will still be up to the instances to handle the request handling and processing.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# RUN node app.js\n└── app.js  ===================> Worker Instance\n    └──  Cluster Manager\n        └── cluster.fork() # forks app.js\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"forking-children-with-cluster\"\n    }}>{`Forking Children With Cluster`}</h2>\n    <p>{`When running the manager, note that Node will first run all the JavaScript code in the file and then startup the `}<inlineCode parentName=\"p\">{`Cluster Manager`}</inlineCode>{`. We want to ensure there is at least one scenario with the forked app running as expected.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nconst cluster = require('cluster');\n// Is file executed in the master mode?\nif (cluster.isMaster) {\n  // Cause app.js to be executed again but in child mode\n  cluster.fork();\n} else {\n  // Child - operate as normal server\n  const express = require('express');\n  const app = express();\n\n  function doWork(duration) {\n    const start = new Date.now();\n    while (Date.now() - start < duration) {\n      // do nothing else\n    }\n  }\n\n  app.get('/', (req, res) => {\n    doWork(5000);\n    res.send('Hello');\n  });\n\n  app.listen(3000);\n};\n`}</code></pre>\n    <p>{`If we add multiple `}<inlineCode parentName=\"p\">{`cluster.fork()`}</inlineCode>{` calls, we can have multiple instances of the server ready to run.`}</p>\n    <h2 {...{\n      \"id\": \"benchmarking-server-performance\"\n    }}>{`Benchmarking Server Performance`}</h2>\n    <p>{`For benchmarking, we will use a program called `}<inlineCode parentName=\"p\">{`ab`}</inlineCode>{`. (Available for MacOS)`}</p>\n    <p>{`Usage: `}<inlineCode parentName=\"p\">{`ab -c 50 -n 500 localhost:3000/fast`}</inlineCode>{` where `}<inlineCode parentName=\"p\">{`-c`}</inlineCode>{` is 50 concurrent requests and `}<inlineCode parentName=\"p\">{`-n`}</inlineCode>{` indicates 500 requests.`}</p>\n    <p>{`In the bottom code, we're going show how you can get diminishing returns by adding more children. It is important that we keep a threadpool size of `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` for this example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nprocess.env.UV_THREADPOOL_SIZE = 1; // just for benchmarking purposes\nconst cluster = require('cluster');\n// Is file executed in the master mode?\nif (cluster.isMaster) {\n  // Cause app.js to be executed again but in child mode\n  cluster.fork();\n} else {\n  // Child - operate as normal server\n  const crypto = require('crypto');\n  const express = require('express');\n  const app = express();\n  \n  app.get('/', (req, res) => {\n    crypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n      res.send('Hello');\n    })\n});\n\n  app.listen(3000);\n};\n`}</code></pre>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`ab -c 1 -n 1 localhost:3000/`}</inlineCode>{` we will see that we get a `}<inlineCode parentName=\"p\">{`Time taken for tests`}</inlineCode>{` to be ~1000ms.`}</p>\n    <p>{`We can see the timing of this is similar to the example for `}<inlineCode parentName=\"p\">{`crypto`}</inlineCode>{` we had in `}<inlineCode parentName=\"p\">{`Nodejs/Node Interals`}</inlineCode>{` when demoing the `}<inlineCode parentName=\"p\">{`crypto`}</inlineCode>{` module.`}</p>\n    <p>{`If we run `}<inlineCode parentName=\"p\">{`ab -c 2 -n 2 localhost:3000/`}</inlineCode>{`, we see that one requests took 1s, while the other took 2s. This is similar to what we saw in `}<inlineCode parentName=\"p\">{`Node Internals`}</inlineCode>{`. Given the one thread, we see that the second request needs to wait for the first request to be released from the threadpool.`}</p>\n    <p>{`If we update our code to add another child process using `}<inlineCode parentName=\"p\">{`cluster.fork();`}</inlineCode>{`, we will notice that both the requests now get processed in the two child processes (STILL USING ONE THREAD) and have come back with the expected time ~1000ms.`}</p>\n    <h3 {...{\n      \"id\": \"what-happens-with-too-many-children\"\n    }}>{`What happens with too many children?`}</h3>\n    <p>{`If we forked six processes and ran `}<inlineCode parentName=\"p\">{`ab -c 6 -n 6 localhost:3000/`}</inlineCode>{` we will see that for some reason, we are now taking 3.5 seconds for each of the 6 requests across the board.`}</p>\n    <p>{`Why is this? It depends on the kind of computer that you have. Note that for the example above, it was run on a dual-core CPU. That's because the CPU is now trying to do a little bit of work on all 6 threads. So although we could now process the children in parallel, we have overallocated our resources.`}</p>\n    <p>{`If we now reduced the forked processes to 2 and still ran `}<inlineCode parentName=\"p\">{`ab -c 6 -n 6 localhost:3000/`}</inlineCode>{`, we will notice that the slowest request is still around 3.4s, while our fastest request is now ~1s. This is because at a cluster with two children, we know that we can at most handle two requests at the same time. `}</p>\n    <p>{`Essentially, the first two requests are processed in the first second, the next two in the second, the last two in the third - this makes perfect sense. This means that we have ended with a far better performance profile.`}</p>\n    <h2 {...{\n      \"id\": \"pm2-configuration\"\n    }}>{`PM2 Configuration`}</h2>\n    <p>{`PM2 can supercharge our clustering setup. PM2 makes cluster management super easy for Nodejs. It can be installed through `}<inlineCode parentName=\"p\">{`npm`}</inlineCode>{` globally using `}<inlineCode parentName=\"p\">{`npm i -g pm2`}</inlineCode>{`.`}</p>\n    <p>{`To run the script in `}<inlineCode parentName=\"p\">{`pm2`}</inlineCode>{`, we need to update our app once again.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\n\n// Child - operate as normal server\nconst crypto = require('crypto');\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n crypto.pbkdf2('a', 'b', 100000, 512, 'sha512', () => {\n   res.send('Hello');\n })\n});\n\napp.listen(3000);\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`pm2 start index.js -i 0`}</inlineCode>{` will tell pm2 to auto-configure how many instances to setup based on the amount of logical cores (physical * virtual cores) are available.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Call`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 monit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Show pm2 monitor`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 list`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`List all pm2 processes`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 start index.js -i 0`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Start index.js with auto-configured instances`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pm2 delete index`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Delete all index children`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><inlineCode parentName=\"p\">{`pm2`}</inlineCode>{` is generally used in production environments only.`}</p>\n    <h2 {...{\n      \"id\": \"web-worker-threads\"\n    }}>{`Web Worker Threads`}</h2>\n    <p>{`At the time of writing - these were in experimental phase.`}</p>\n    <p>{`In this example, we are using the module `}<inlineCode parentName=\"p\">{`webworker-threads`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Our App\n└── Worker Interface (communicates with Worker)\n    └── postMessage <===> onmessage (Worker)\n    └── onmessage <===> postMessage (Worker)\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Worker`}</inlineCode>{` itself is working on its own thread. Remember: a lot of the Nodejs standard lib functions ALREADY work on their own thread. You only really want to use it for your own heavy-duty business logic.`}</p>\n    <p>{`Note: any function passed to the worker cannot access the parent scoped variables. It is also important to use the function keyword on purpose.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// app.js\nconst Worker = require('webworker-threads').Worker;\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  const worker = new Worker(function() {\n    this.onmessage = function() {\n      // emulate heavy work\n      let counter = 0;\n      whilte (counter < 1e9) {\n        counter++;\n      }\n\n      postMessage(counter);\n    }\n  });\n\n  worker.onmessage = function(counter) {\n    console.log(counter);\n    res.send('' + message.data); // casting as send requires string\n  }\n\n  worker.postMessage();\n});\n\napp.listen(3000);\n`}</code></pre>\n    <p>{`For benchmarking these workers, we can again use `}<inlineCode parentName=\"p\">{`ab`}</inlineCode>{`. `}<inlineCode parentName=\"p\">{`ab -c 1 -n 1 localhost:3000/`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ab -c 2 -n 2 localhost:3000/`}</inlineCode>{` should run with similar results on a dual-core Mac. `}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}