{"expireTime":9007200848610892000,"key":"gatsby-plugin-mdx-entire-payload-f4da1e398c831e59fad79f60e663dc49-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Kotlin Study Group","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":21,"offset":187},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":21,"offset":187},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Shortcuts","position":{"start":{"line":10,"column":4,"offset":192},"end":{"line":10,"column":13,"offset":201},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":189},"end":{"line":10,"column":13,"offset":201},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Shortcut","position":{"start":{"line":12,"column":3,"offset":205},"end":{"line":12,"column":11,"offset":213},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":205},"end":{"line":12,"column":61,"offset":263},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Action","position":{"start":{"line":12,"column":64,"offset":266},"end":{"line":12,"column":70,"offset":272},"indent":[]}}],"position":{"start":{"line":12,"column":64,"offset":266},"end":{"line":12,"column":104,"offset":306},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":203},"end":{"line":12,"column":106,"offset":308},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"shift ","position":{"start":{"line":14,"column":3,"offset":417},"end":{"line":14,"column":9,"offset":423},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":14,"column":9,"offset":423},"end":{"line":14,"column":11,"offset":425},"indent":[]}},{"type":"text","value":" 3","position":{"start":{"line":14,"column":11,"offset":425},"end":{"line":14,"column":13,"offset":427},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":417},"end":{"line":14,"column":61,"offset":475},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Search for shortcuts","position":{"start":{"line":14,"column":64,"offset":478},"end":{"line":14,"column":84,"offset":498},"indent":[]}}],"position":{"start":{"line":14,"column":64,"offset":478},"end":{"line":14,"column":104,"offset":518},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":415},"end":{"line":14,"column":106,"offset":520},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"ctrl + mousewheel","position":{"start":{"line":15,"column":3,"offset":523},"end":{"line":15,"column":20,"offset":540},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":523},"end":{"line":15,"column":61,"offset":581},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Zoom. Option must be enabled.","position":{"start":{"line":15,"column":64,"offset":584},"end":{"line":15,"column":93,"offset":613},"indent":[]}}],"position":{"start":{"line":15,"column":64,"offset":584},"end":{"line":15,"column":104,"offset":624},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":521},"end":{"line":15,"column":106,"offset":626},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"ctrl + option + h","position":{"start":{"line":16,"column":3,"offset":629},"end":{"line":16,"column":20,"offset":646},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":629},"end":{"line":16,"column":61,"offset":687},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Tree of calls","position":{"start":{"line":16,"column":64,"offset":690},"end":{"line":16,"column":77,"offset":703},"indent":[]}}],"position":{"start":{"line":16,"column":64,"offset":690},"end":{"line":16,"column":104,"offset":730},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":627},"end":{"line":16,"column":106,"offset":732},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"ctrl + h","position":{"start":{"line":17,"column":3,"offset":735},"end":{"line":17,"column":11,"offset":743},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":735},"end":{"line":17,"column":61,"offset":793},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Creation hierarchy","position":{"start":{"line":17,"column":64,"offset":796},"end":{"line":17,"column":82,"offset":814},"indent":[]}}],"position":{"start":{"line":17,"column":64,"offset":796},"end":{"line":17,"column":104,"offset":836},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":733},"end":{"line":17,"column":106,"offset":838},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"option + up","position":{"start":{"line":18,"column":3,"offset":841},"end":{"line":18,"column":14,"offset":852},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":841},"end":{"line":18,"column":61,"offset":899},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Extend selection","position":{"start":{"line":18,"column":64,"offset":902},"end":{"line":18,"column":80,"offset":918},"indent":[]}}],"position":{"start":{"line":18,"column":64,"offset":902},"end":{"line":18,"column":104,"offset":942},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":839},"end":{"line":18,"column":106,"offset":944},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"cmd + backspace","position":{"start":{"line":19,"column":3,"offset":947},"end":{"line":19,"column":18,"offset":962},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":947},"end":{"line":19,"column":61,"offset":1005},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Destroy line","position":{"start":{"line":19,"column":64,"offset":1008},"end":{"line":19,"column":76,"offset":1020},"indent":[]}}],"position":{"start":{"line":19,"column":64,"offset":1008},"end":{"line":19,"column":104,"offset":1048},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":945},"end":{"line":19,"column":106,"offset":1050},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"cmd + shift + p","position":{"start":{"line":20,"column":3,"offset":1053},"end":{"line":20,"column":18,"offset":1068},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":1053},"end":{"line":20,"column":61,"offset":1111},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Shows you what highlighted text is","position":{"start":{"line":20,"column":64,"offset":1114},"end":{"line":20,"column":98,"offset":1148},"indent":[]}}],"position":{"start":{"line":20,"column":64,"offset":1114},"end":{"line":20,"column":104,"offset":1154},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1051},"end":{"line":20,"column":106,"offset":1156},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"shift ","position":{"start":{"line":21,"column":3,"offset":1159},"end":{"line":21,"column":9,"offset":1165},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":21,"column":9,"offset":1165},"end":{"line":21,"column":11,"offset":1167},"indent":[]}},{"type":"text","value":"3 > \"Add inferred type arguments","position":{"start":{"line":21,"column":11,"offset":1167},"end":{"line":21,"column":43,"offset":1199},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":1159},"end":{"line":21,"column":61,"offset":1217},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Types inferred","position":{"start":{"line":21,"column":64,"offset":1220},"end":{"line":21,"column":78,"offset":1234},"indent":[]}}],"position":{"start":{"line":21,"column":64,"offset":1220},"end":{"line":21,"column":104,"offset":1260},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1157},"end":{"line":21,"column":106,"offset":1262},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"cmd + f12","position":{"start":{"line":22,"column":3,"offset":1265},"end":{"line":22,"column":12,"offset":1274},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1265},"end":{"line":22,"column":61,"offset":1323},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"All methods defined","position":{"start":{"line":22,"column":64,"offset":1326},"end":{"line":22,"column":83,"offset":1345},"indent":[]}}],"position":{"start":{"line":22,"column":64,"offset":1326},"end":{"line":22,"column":104,"offset":1366},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1263},"end":{"line":22,"column":106,"offset":1368},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"ctrl + space (maybe + shift)","position":{"start":{"line":23,"column":3,"offset":1371},"end":{"line":23,"column":31,"offset":1399},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":1371},"end":{"line":23,"column":61,"offset":1429},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Code completion","position":{"start":{"line":23,"column":64,"offset":1432},"end":{"line":23,"column":79,"offset":1447},"indent":[]}}],"position":{"start":{"line":23,"column":64,"offset":1432},"end":{"line":23,"column":104,"offset":1472},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1369},"end":{"line":23,"column":106,"offset":1474},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"cmd + p","position":{"start":{"line":24,"column":3,"offset":1477},"end":{"line":24,"column":10,"offset":1484},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":1477},"end":{"line":24,"column":61,"offset":1535},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Arguments required","position":{"start":{"line":24,"column":64,"offset":1538},"end":{"line":24,"column":82,"offset":1556},"indent":[]}}],"position":{"start":{"line":24,"column":64,"offset":1538},"end":{"line":24,"column":104,"offset":1578},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1475},"end":{"line":24,"column":106,"offset":1580},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"ctrl + space + up","position":{"start":{"line":25,"column":3,"offset":1583},"end":{"line":25,"column":20,"offset":1600},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":1583},"end":{"line":25,"column":61,"offset":1641},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Suggestions through codebase","position":{"start":{"line":25,"column":64,"offset":1644},"end":{"line":25,"column":92,"offset":1672},"indent":[]}}],"position":{"start":{"line":25,"column":64,"offset":1644},"end":{"line":25,"column":104,"offset":1684},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1581},"end":{"line":25,"column":106,"offset":1686},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"cmd + shift + enter","position":{"start":{"line":26,"column":3,"offset":1689},"end":{"line":26,"column":22,"offset":1708},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":1689},"end":{"line":26,"column":61,"offset":1747},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Finish line, put me on next one","position":{"start":{"line":26,"column":64,"offset":1750},"end":{"line":26,"column":95,"offset":1781},"indent":[]}}],"position":{"start":{"line":26,"column":64,"offset":1750},"end":{"line":26,"column":104,"offset":1790},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1687},"end":{"line":26,"column":106,"offset":1792},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"option + enter (on classes with interface implementations)","position":{"start":{"line":27,"column":3,"offset":1795},"end":{"line":27,"column":61,"offset":1853},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":1795},"end":{"line":27,"column":61,"offset":1853},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Interface member inference","position":{"start":{"line":27,"column":64,"offset":1856},"end":{"line":27,"column":90,"offset":1882},"indent":[]}}],"position":{"start":{"line":27,"column":64,"offset":1856},"end":{"line":27,"column":104,"offset":1896},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1793},"end":{"line":27,"column":106,"offset":1898},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"cmd + click","position":{"start":{"line":28,"column":3,"offset":1901},"end":{"line":28,"column":14,"offset":1912},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1901},"end":{"line":28,"column":61,"offset":1959},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Navigate to definition","position":{"start":{"line":28,"column":64,"offset":1962},"end":{"line":28,"column":86,"offset":1984},"indent":[]}}],"position":{"start":{"line":28,"column":64,"offset":1962},"end":{"line":28,"column":104,"offset":2002},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1899},"end":{"line":28,"column":106,"offset":2004},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"option + f6","position":{"start":{"line":29,"column":3,"offset":2007},"end":{"line":29,"column":14,"offset":2018},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":2007},"end":{"line":29,"column":61,"offset":2065},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Rename","position":{"start":{"line":29,"column":64,"offset":2068},"end":{"line":29,"column":70,"offset":2074},"indent":[]}}],"position":{"start":{"line":29,"column":64,"offset":2068},"end":{"line":29,"column":104,"offset":2108},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2005},"end":{"line":29,"column":106,"offset":2110},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"cmd + d","position":{"start":{"line":30,"column":3,"offset":2113},"end":{"line":30,"column":10,"offset":2120},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":2113},"end":{"line":30,"column":61,"offset":2171},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Diff window","position":{"start":{"line":30,"column":64,"offset":2174},"end":{"line":30,"column":75,"offset":2185},"indent":[]}}],"position":{"start":{"line":30,"column":64,"offset":2174},"end":{"line":30,"column":104,"offset":2214},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":2111},"end":{"line":30,"column":106,"offset":2216},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"cmd + f6","position":{"start":{"line":31,"column":3,"offset":2219},"end":{"line":31,"column":11,"offset":2227},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":2219},"end":{"line":31,"column":61,"offset":2277},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Refactor functions","position":{"start":{"line":31,"column":64,"offset":2280},"end":{"line":31,"column":82,"offset":2298},"indent":[]}}],"position":{"start":{"line":31,"column":64,"offset":2280},"end":{"line":31,"column":104,"offset":2320},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2217},"end":{"line":31,"column":106,"offset":2322},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"TODO: extract to parameter","position":{"start":{"line":32,"column":3,"offset":2325},"end":{"line":32,"column":29,"offset":2351},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":2325},"end":{"line":32,"column":61,"offset":2383},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Extract to function param","position":{"start":{"line":32,"column":64,"offset":2386},"end":{"line":32,"column":89,"offset":2411},"indent":[]}}],"position":{"start":{"line":32,"column":64,"offset":2386},"end":{"line":32,"column":104,"offset":2426},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2323},"end":{"line":32,"column":106,"offset":2428},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"cmd + shift + t","position":{"start":{"line":33,"column":3,"offset":2431},"end":{"line":33,"column":18,"offset":2446},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":2431},"end":{"line":33,"column":61,"offset":2489},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Go to spec (may need Kotlin test plugin)","position":{"start":{"line":33,"column":64,"offset":2492},"end":{"line":33,"column":104,"offset":2532},"indent":[]}}],"position":{"start":{"line":33,"column":64,"offset":2492},"end":{"line":33,"column":104,"offset":2532},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":2429},"end":{"line":33,"column":106,"offset":2534},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"ctrl + shift + j","position":{"start":{"line":34,"column":3,"offset":2537},"end":{"line":34,"column":19,"offset":2553},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":2537},"end":{"line":34,"column":61,"offset":2595},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Refactor lines","position":{"start":{"line":34,"column":64,"offset":2598},"end":{"line":34,"column":78,"offset":2612},"indent":[]}}],"position":{"start":{"line":34,"column":64,"offset":2598},"end":{"line":34,"column":104,"offset":2638},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2535},"end":{"line":34,"column":106,"offset":2640},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":203},"end":{"line":34,"column":106,"offset":2640},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Toy Robot notes","position":{"start":{"line":36,"column":4,"offset":2645},"end":{"line":36,"column":19,"offset":2660},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2642},"end":{"line":36,"column":19,"offset":2660},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Robot on infinite plane.","position":{"start":{"line":38,"column":1,"offset":2662},"end":{"line":38,"column":25,"offset":2686},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2662},"end":{"line":38,"column":25,"offset":2686},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"import kotlin.math.absoluteValue\nfun main() {\n    val instructions = \"R3L2R7L4\"\n    val distance = robotDistance(instructions)\n    println(\"hello world $distance\")\n}\nenum class Direction {\n    NORTH {\n        override fun right() = EAST\n        override fun left() = WEST\n    },\n    SOUTH {\n        override fun right() = WEST\n        override fun left() = EAST\n    },\n    EAST {\n        override fun right() = SOUTH\n        override fun left() = NORTH\n    },\n    WEST {\n        override fun right() = NORTH\n        override fun left() = SOUTH\n    };\n    abstract fun right(): Direction\n    abstract fun left(): Direction\n}\ndata class RobotState(val x: Int = 0, val y: Int = 0, val direction: Direction = Direction.NORTH) {\n    fun right(): RobotState = this.copy(direction = direction.right())\n    fun left(): RobotState = this.copy(direction = direction.left())\n    fun move(distance: Int) = when(direction) {\n        Direction.NORTH -> copy(y = y + distance)\n        Direction.EAST -> copy(x = x + distance)\n        Direction.SOUTH -> copy(y = y - distance)\n        Direction.WEST -> copy(x = x - distance)\n    }\n}\nfun robotDistance(instructions: String): Int {\n    val regex = Regex(\"(R|L|\\\\d+)\")\n    val tokens = regex.findAll(instructions).map { it.groupValues[1] }\n    val finalState = tokens.fold(RobotState()) { acc: RobotState, token: String ->\n        when (token) {\n            \"R\" -> acc.right()\n            \"L\" -> acc.left()\n            else -> acc.move(token.toInt())\n        }\n    }\n    return finalState.x.absoluteValue + finalState.y.absoluteValue\n}","position":{"start":{"line":40,"column":1,"offset":2688},"end":{"line":89,"column":4,"offset":4269},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Preferences","position":{"start":{"line":91,"column":4,"offset":4274},"end":{"line":91,"column":15,"offset":4285},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":4271},"end":{"line":91,"column":15,"offset":4285},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can update to show definition on hover","position":{"start":{"line":93,"column":3,"offset":4289},"end":{"line":93,"column":41,"offset":4327},"indent":[]}}],"position":{"start":{"line":93,"column":3,"offset":4289},"end":{"line":93,"column":41,"offset":4327},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":4287},"end":{"line":93,"column":41,"offset":4327},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":4287},"end":{"line":93,"column":41,"offset":4327},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":96,"column":1,"offset":4330},"end":{"line":96,"column":31,"offset":4360},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":96,"column":31,"offset":4360}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"kotlin-study-group\"\n    }}>{`Kotlin Study Group`}</h1>\n    <h2 {...{\n      \"id\": \"shortcuts\"\n    }}>{`Shortcuts`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Shortcut`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Action`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`shift `}{`*`}{` 3`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Search for shortcuts`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ctrl + mousewheel`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Zoom. Option must be enabled.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ctrl + option + h`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tree of calls`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ctrl + h`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Creation hierarchy`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`option + up`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Extend selection`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`cmd + backspace`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Destroy line`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`cmd + shift + p`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Shows you what highlighted text is`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`shift `}{`*`}{`3 > \"Add inferred type arguments`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Types inferred`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`cmd + f12`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All methods defined`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ctrl + space (maybe + shift)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Code completion`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`cmd + p`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Arguments required`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ctrl + space + up`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Suggestions through codebase`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`cmd + shift + enter`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Finish line, put me on next one`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`option + enter (on classes with interface implementations)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Interface member inference`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`cmd + click`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Navigate to definition`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`option + f6`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Rename`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`cmd + d`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Diff window`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`cmd + f6`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Refactor functions`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`TODO: extract to parameter`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Extract to function param`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`cmd + shift + t`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Go to spec (may need Kotlin test plugin)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ctrl + shift + j`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Refactor lines`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"toy-robot-notes\"\n    }}>{`Toy Robot notes`}</h2>\n    <p>{`Robot on infinite plane.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import kotlin.math.absoluteValue\nfun main() {\n    val instructions = \"R3L2R7L4\"\n    val distance = robotDistance(instructions)\n    println(\"hello world $distance\")\n}\nenum class Direction {\n    NORTH {\n        override fun right() = EAST\n        override fun left() = WEST\n    },\n    SOUTH {\n        override fun right() = WEST\n        override fun left() = EAST\n    },\n    EAST {\n        override fun right() = SOUTH\n        override fun left() = NORTH\n    },\n    WEST {\n        override fun right() = NORTH\n        override fun left() = SOUTH\n    };\n    abstract fun right(): Direction\n    abstract fun left(): Direction\n}\ndata class RobotState(val x: Int = 0, val y: Int = 0, val direction: Direction = Direction.NORTH) {\n    fun right(): RobotState = this.copy(direction = direction.right())\n    fun left(): RobotState = this.copy(direction = direction.left())\n    fun move(distance: Int) = when(direction) {\n        Direction.NORTH -> copy(y = y + distance)\n        Direction.EAST -> copy(x = x + distance)\n        Direction.SOUTH -> copy(y = y - distance)\n        Direction.WEST -> copy(x = x - distance)\n    }\n}\nfun robotDistance(instructions: String): Int {\n    val regex = Regex(\"(R|L|\\\\\\\\d+)\")\n    val tokens = regex.findAll(instructions).map { it.groupValues[1] }\n    val finalState = tokens.fold(RobotState()) { acc: RobotState, token: String ->\n        when (token) {\n            \"R\" -> acc.right()\n            \"L\" -> acc.left()\n            else -> acc.move(token.toInt())\n        }\n    }\n    return finalState.x.absoluteValue + finalState.y.absoluteValue\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"preferences\"\n    }}>{`Preferences`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Can update to show definition on hover`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}