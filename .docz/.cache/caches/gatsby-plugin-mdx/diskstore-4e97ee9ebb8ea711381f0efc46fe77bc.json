{"expireTime":9007200852878369000,"key":"gatsby-plugin-mdx-entire-payload-3232169952dcb4849acb6147fe3bcc87-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Metaprogramming Ruby 2","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":25,"offset":191},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":25,"offset":191},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":196},"end":{"line":10,"column":13,"offset":205},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":193},"end":{"line":10,"column":13,"offset":205},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.rubyguides.com/2018/10/method-visibility/","children":[{"type":"text","value":"Access Modifiers in Ruby","position":{"start":{"line":12,"column":5,"offset":211},"end":{"line":12,"column":29,"offset":235},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":210},"end":{"line":12,"column":85,"offset":291},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":210},"end":{"line":12,"column":85,"offset":291},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":207},"end":{"line":12,"column":85,"offset":291},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Classes","children":[{"type":"text","value":"Ruby vs Java Access Modifiers","position":{"start":{"line":13,"column":5,"offset":296},"end":{"line":13,"column":34,"offset":325},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":295},"end":{"line":13,"column":98,"offset":389},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":295},"end":{"line":13,"column":98,"offset":389},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":292},"end":{"line":13,"column":98,"offset":389},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":207},"end":{"line":13,"column":98,"offset":389},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The Object Model","position":{"start":{"line":15,"column":4,"offset":394},"end":{"line":15,"column":20,"offset":410},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":391},"end":{"line":15,"column":20,"offset":410},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Everytime you write the same class in the same namespace, it is more of an extension to an existing class (or new class if called for first time).","position":{"start":{"line":17,"column":3,"offset":414},"end":{"line":17,"column":149,"offset":560},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":414},"end":{"line":17,"column":149,"offset":560},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":412},"end":{"line":17,"column":149,"offset":560},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":412},"end":{"line":17,"column":149,"offset":560},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Modules & Look ups","position":{"start":{"line":19,"column":5,"offset":566},"end":{"line":19,"column":23,"offset":584},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":562},"end":{"line":19,"column":23,"offset":584},"indent":[]}},{"type":"code","lang":"ruby","meta":null,"value":"module M1\n  def my_method\n    # M1#my_method()\n  end\nend\n\nclass C\n  include M1\nend\n\nclass D < C; end\n\nD.ancestors # => [D, C, M1, Object, Kernel, BasicObject]","position":{"start":{"line":21,"column":1,"offset":586},"end":{"line":35,"column":4,"offset":756},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In Ruby 2, you can insert a module BELOW the including class rather than above:","position":{"start":{"line":37,"column":1,"offset":758},"end":{"line":37,"column":80,"offset":837},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":758},"end":{"line":37,"column":80,"offset":837},"indent":[]}},{"type":"code","lang":"ruby","meta":null,"value":"class C2\n  prepend M2\nend\n\nclass D2 < C2; end\n\nD2.ancestors # => [D, M2, C, Object, Kernel, BasicObject]","position":{"start":{"line":39,"column":1,"offset":839},"end":{"line":47,"column":4,"offset":955},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So for multiple inclusions...","position":{"start":{"line":49,"column":1,"offset":957},"end":{"line":49,"column":30,"offset":986},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":957},"end":{"line":49,"column":30,"offset":986},"indent":[]}},{"type":"code","lang":"ruby","meta":null,"value":"module M1; end\n\nmodule M2\n  include M1\nend\n\nmodule M3\n  prepend M1\n  include M2\nend\n\nM3.ancestors # => [M1, M3, M2]","position":{"start":{"line":51,"column":1,"offset":988},"end":{"line":64,"column":4,"offset":1115},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"The Kernel","position":{"start":{"line":66,"column":5,"offset":1121},"end":{"line":66,"column":15,"offset":1131},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1117},"end":{"line":66,"column":15,"offset":1131},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Soe methods such as ","position":{"start":{"line":68,"column":1,"offset":1133},"end":{"line":68,"column":21,"offset":1153},"indent":[]}},{"type":"inlineCode","value":"print","position":{"start":{"line":68,"column":21,"offset":1153},"end":{"line":68,"column":28,"offset":1160},"indent":[]}},{"type":"text","value":" can be called from anywhere. Every object has the ","position":{"start":{"line":68,"column":28,"offset":1160},"end":{"line":68,"column":79,"offset":1211},"indent":[]}},{"type":"inlineCode","value":"print","position":{"start":{"line":68,"column":79,"offset":1211},"end":{"line":68,"column":86,"offset":1218},"indent":[]}},{"type":"text","value":" method. These are private instance methods of the module ","position":{"start":{"line":68,"column":86,"offset":1218},"end":{"line":68,"column":144,"offset":1276},"indent":[]}},{"type":"inlineCode","value":"Kernel","position":{"start":{"line":68,"column":144,"offset":1276},"end":{"line":68,"column":152,"offset":1284},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":68,"column":152,"offset":1284},"end":{"line":68,"column":153,"offset":1285},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1133},"end":{"line":68,"column":153,"offset":1285},"indent":[]}},{"type":"code","lang":"ruby","meta":null,"value":"Kernel.private_instance_methods.grep(/^pr/) # => [:printf, :print, :proc]","position":{"start":{"line":70,"column":1,"offset":1287},"end":{"line":72,"column":4,"offset":1372},"indent":[1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Here is an interesting aside about access modifiers in Ruby:","position":{"start":{"line":74,"column":3,"offset":1376},"end":{"line":74,"column":63,"offset":1436},"indent":[]}}],"position":{"start":{"line":74,"column":3,"offset":1376},"end":{"line":74,"column":63,"offset":1436},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now, \"protected\" deserves more discussion. Those of you coming from Java or C++ have learned that in those languages, if a method is “private”, its visibility is restricted to the declaring class, and if the method is “protected”, it will be accessible to children of the class (classes that inherit from parent) or other classes in that package.","position":{"start":{"line":76,"column":3,"offset":1441},"end":{"line":76,"column":349,"offset":1787},"indent":[]}}],"position":{"start":{"line":76,"column":3,"offset":1441},"end":{"line":76,"column":349,"offset":1787},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In Ruby, \"private\" visibility is similar to what \"protected\" is in Java. Private methods in Ruby are accessible from children. You can’t have truly private methods in Ruby; you can’t completely hide a method.","position":{"start":{"line":78,"column":3,"offset":1792},"end":{"line":78,"column":211,"offset":2000},"indent":[]}}],"position":{"start":{"line":78,"column":3,"offset":1792},"end":{"line":78,"column":211,"offset":2000},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The difference between protected and private is subtle. If a method is protected, it may be called by any instance of the defining class or its subclasses. If a method is private, it may be called only within the context of the calling object---it is never possible to access another object instance's private methods directly, even if the object is of the same class as the caller. For protected methods, they are accessible from objects of the same class (or children).","position":{"start":{"line":80,"column":3,"offset":2005},"end":{"line":80,"column":474,"offset":2476},"indent":[]}}],"position":{"start":{"line":80,"column":3,"offset":2005},"end":{"line":80,"column":474,"offset":2476},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1374},"end":{"line":80,"column":474,"offset":2476},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Self","position":{"start":{"line":82,"column":5,"offset":2482},"end":{"line":82,"column":9,"offset":2486},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2478},"end":{"line":82,"column":9,"offset":2486},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can return ","position":{"start":{"line":84,"column":1,"offset":2488},"end":{"line":84,"column":16,"offset":2503},"indent":[]}},{"type":"inlineCode","value":"self","position":{"start":{"line":84,"column":16,"offset":2503},"end":{"line":84,"column":22,"offset":2509},"indent":[]}},{"type":"text","value":" for the class instance. I believe this means that you can make classes chainable.","position":{"start":{"line":84,"column":22,"offset":2509},"end":{"line":84,"column":104,"offset":2591},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2488},"end":{"line":84,"column":104,"offset":2591},"indent":[]}},{"type":"code","lang":"ruby","meta":null,"value":"class A\n  def my_method\n    self\n  end\nend","position":{"start":{"line":86,"column":1,"offset":2593},"end":{"line":92,"column":4,"offset":2647},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":95,"column":1,"offset":2650},"end":{"line":95,"column":31,"offset":2680},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":95,"column":31,"offset":2680}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"metaprogramming-ruby-2\"\n    }}>{`Metaprogramming Ruby 2`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.rubyguides.com/2018/10/method-visibility/\"\n        }}>{`Access Modifiers in Ruby`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Classes\"\n        }}>{`Ruby vs Java Access Modifiers`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"the-object-model\"\n    }}>{`The Object Model`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Everytime you write the same class in the same namespace, it is more of an extension to an existing class (or new class if called for first time).`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"modules--look-ups\"\n    }}>{`Modules & Look ups`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`module M1\n  def my_method\n    # M1#my_method()\n  end\nend\n\nclass C\n  include M1\nend\n\nclass D < C; end\n\nD.ancestors # => [D, C, M1, Object, Kernel, BasicObject]\n`}</code></pre>\n    <p>{`In Ruby 2, you can insert a module BELOW the including class rather than above:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class C2\n  prepend M2\nend\n\nclass D2 < C2; end\n\nD2.ancestors # => [D, M2, C, Object, Kernel, BasicObject]\n`}</code></pre>\n    <p>{`So for multiple inclusions...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`module M1; end\n\nmodule M2\n  include M1\nend\n\nmodule M3\n  prepend M1\n  include M2\nend\n\nM3.ancestors # => [M1, M3, M2]\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"the-kernel\"\n    }}>{`The Kernel`}</h3>\n    <p>{`Soe methods such as `}<inlineCode parentName=\"p\">{`print`}</inlineCode>{` can be called from anywhere. Every object has the `}<inlineCode parentName=\"p\">{`print`}</inlineCode>{` method. These are private instance methods of the module `}<inlineCode parentName=\"p\">{`Kernel`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`Kernel.private_instance_methods.grep(/^pr/) # => [:printf, :print, :proc]\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Here is an interesting aside about access modifiers in Ruby:`}</p>\n      <p parentName=\"blockquote\">{`Now, \"protected\" deserves more discussion. Those of you coming from Java or C++ have learned that in those languages, if a method is “private”, its visibility is restricted to the declaring class, and if the method is “protected”, it will be accessible to children of the class (classes that inherit from parent) or other classes in that package.`}</p>\n      <p parentName=\"blockquote\">{`In Ruby, \"private\" visibility is similar to what \"protected\" is in Java. Private methods in Ruby are accessible from children. You can’t have truly private methods in Ruby; you can’t completely hide a method.`}</p>\n      <p parentName=\"blockquote\">{`The difference between protected and private is subtle. If a method is protected, it may be called by any instance of the defining class or its subclasses. If a method is private, it may be called only within the context of the calling object---it is never possible to access another object instance's private methods directly, even if the object is of the same class as the caller. For protected methods, they are accessible from objects of the same class (or children).`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"self\"\n    }}>{`Self`}</h3>\n    <p>{`You can return `}<inlineCode parentName=\"p\">{`self`}</inlineCode>{` for the class instance. I believe this means that you can make classes chainable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`class A\n  def my_method\n    self\n  end\nend\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}