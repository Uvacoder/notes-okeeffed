{"expireTime":9007200849425508000,"key":"gatsby-plugin-mdx-entire-payload-ddd0d954e0921329032abd80f946cec7-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Redis queues and forking with Kue","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":36,"offset":202},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":36,"offset":202},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Reference these links:","position":{"start":{"line":10,"column":1,"offset":204},"end":{"line":10,"column":23,"offset":226},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":204},"end":{"line":10,"column":23,"offset":226},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://medium.com/@NorbertdeLangen/communicating-between-nodejs-processes-4e68be42b917","children":[{"type":"text","value":"https://medium.com/@NorbertdeLangen/communicating-between-nodejs-processes-4e68be42b917","position":{"start":{"line":12,"column":1,"offset":228},"end":{"line":12,"column":88,"offset":315},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":228},"end":{"line":12,"column":88,"offset":315},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":12,"column":88,"offset":315},"end":{"line":13,"column":1,"offset":316},"indent":[1]}},{"type":"link","title":null,"url":"https://medium.com/@niratattri/workers-and-node-kue-it-up-1c1215d9bddf","children":[{"type":"text","value":"https://medium.com/@niratattri/workers-and-node-kue-it-up-1c1215d9bddf","position":{"start":{"line":13,"column":1,"offset":316},"end":{"line":13,"column":71,"offset":386},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":316},"end":{"line":13,"column":71,"offset":386},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":13,"column":71,"offset":386},"end":{"line":14,"column":1,"offset":387},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/Automattic/kue","children":[{"type":"text","value":"https://github.com/Automattic/kue","position":{"start":{"line":14,"column":1,"offset":387},"end":{"line":14,"column":34,"offset":420},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":387},"end":{"line":14,"column":34,"offset":420},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":228},"end":{"line":14,"column":34,"offset":420},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"tl;dr","position":{"start":{"line":16,"column":4,"offset":425},"end":{"line":16,"column":9,"offset":430},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":422},"end":{"line":16,"column":9,"offset":430},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const { fork } = require('child_process');\n\nconst kue = require('kue');\nkue.app.listen(3050);\nconst port = process.env.REDIS_PORT ? process.env.REDIS_PORT : '6379';\nconst host = process.env.REDIS_HOST ? process.env.REDIS_HOST : '127.0.0.1';\n\nlet queue = kue.createQueue({\n  redis: {\n    host: host,\n    port: port\n  }\n});\n\nqueue.process('build', 1, (job, done) => {\n  run(job, done);\n});\n\nconst run = async (job, done) => {\n  try {\n    const { data } = job.data;\n    // process is a forked process\n    const compute = fork('./processes/buildWeb.js');\n    compute.send(data);\n\n    compute.on('message', (_) => {\n      return done();\n    });\n  } catch (err) {\n    console.error(err);\n    return done(new Error(JSON.stringify(err)));\n  }\n};\n\nmodule.exports = (app) => {\n  app.post('/', async function(req, res) {\n    try {\n      // Create a fork for a process\n      const buildJob = queue\n        .create('build', {\n          // Job Type\n          project: project, // Job Data\n          data: req.body\n        })\n        .removeOnComplete(true) // REMOVE THE JOB FROM THE QUEUE ONCE IT'S COMPLETED\n        .attempts(5) // The maximum number of retries you want the job to have\n        .backoff({ delay: 60 * 1000, type: 'exponential' }) // Time between retries. Read docs.\n        .save(); // PERSIST THE DAMN JOB LOL\n\n      buildJob.on('failed', function(errorMessage) {\n        console.log('Job failed');\n        let error = JSON.parse(errorMessage);\n        // error now contains the object passed from the worker when the job failed\n        console.log(error); // Check it out for yourself\n        // call pagerduty or whatever jazz you wanna do in case of failure\n      });\n\n      res.status(200).send('Building ' + project);\n    } catch (err) {\n      return res.status(500).send('Failed');\n    }\n  });\n};\n\n// buildWeb.js\nconst run = async (data) => {\n  try {\n    setTimeout(() => {\n      process.send('Done');\n    }, 3000);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nprocess.on('message', (data) => {\n  run(data);\n});","position":{"start":{"line":18,"column":1,"offset":432},"end":{"line":97,"column":4,"offset":2478},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":100,"column":1,"offset":2481},"end":{"line":100,"column":31,"offset":2511},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":100,"column":31,"offset":2511}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"redis-queues-and-forking-with-kue\"\n    }}>{`Redis queues and forking with Kue`}</h1>\n    <p>{`Reference these links:`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@NorbertdeLangen/communicating-between-nodejs-processes-4e68be42b917\"\n      }}>{`https://medium.com/@NorbertdeLangen/communicating-between-nodejs-processes-4e68be42b917`}</a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@niratattri/workers-and-node-kue-it-up-1c1215d9bddf\"\n      }}>{`https://medium.com/@niratattri/workers-and-node-kue-it-up-1c1215d9bddf`}</a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Automattic/kue\"\n      }}>{`https://github.com/Automattic/kue`}</a></p>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { fork } = require('child_process');\n\nconst kue = require('kue');\nkue.app.listen(3050);\nconst port = process.env.REDIS_PORT ? process.env.REDIS_PORT : '6379';\nconst host = process.env.REDIS_HOST ? process.env.REDIS_HOST : '127.0.0.1';\n\nlet queue = kue.createQueue({\n  redis: {\n    host: host,\n    port: port\n  }\n});\n\nqueue.process('build', 1, (job, done) => {\n  run(job, done);\n});\n\nconst run = async (job, done) => {\n  try {\n    const { data } = job.data;\n    // process is a forked process\n    const compute = fork('./processes/buildWeb.js');\n    compute.send(data);\n\n    compute.on('message', (_) => {\n      return done();\n    });\n  } catch (err) {\n    console.error(err);\n    return done(new Error(JSON.stringify(err)));\n  }\n};\n\nmodule.exports = (app) => {\n  app.post('/', async function(req, res) {\n    try {\n      // Create a fork for a process\n      const buildJob = queue\n        .create('build', {\n          // Job Type\n          project: project, // Job Data\n          data: req.body\n        })\n        .removeOnComplete(true) // REMOVE THE JOB FROM THE QUEUE ONCE IT'S COMPLETED\n        .attempts(5) // The maximum number of retries you want the job to have\n        .backoff({ delay: 60 * 1000, type: 'exponential' }) // Time between retries. Read docs.\n        .save(); // PERSIST THE DAMN JOB LOL\n\n      buildJob.on('failed', function(errorMessage) {\n        console.log('Job failed');\n        let error = JSON.parse(errorMessage);\n        // error now contains the object passed from the worker when the job failed\n        console.log(error); // Check it out for yourself\n        // call pagerduty or whatever jazz you wanna do in case of failure\n      });\n\n      res.status(200).send('Building ' + project);\n    } catch (err) {\n      return res.status(500).send('Failed');\n    }\n  });\n};\n\n// buildWeb.js\nconst run = async (data) => {\n  try {\n    setTimeout(() => {\n      process.send('Done');\n    }, 3000);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nprocess.on('message', (data) => {\n  run(data);\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}