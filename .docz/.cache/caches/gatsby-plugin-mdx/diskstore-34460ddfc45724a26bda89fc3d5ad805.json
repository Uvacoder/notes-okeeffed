{"expireTime":9007200848610874000,"key":"gatsby-plugin-mdx-entire-payload-c29fae941710663d0c5bd65f45de9eea-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Python Object Orientated","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":27,"offset":192},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":27,"offset":192},"indent":[]}},{"type":"jsx","value":"<!-- TOC -->","position":{"start":{"line":9,"column":1,"offset":194},"end":{"line":9,"column":13,"offset":206},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#python-object-orientated","children":[{"type":"text","value":"Python Object Orientated","position":{"start":{"line":11,"column":6,"offset":213},"end":{"line":11,"column":30,"offset":237},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":212},"end":{"line":11,"column":58,"offset":265},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":212},"end":{"line":11,"column":58,"offset":265},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#table-of-contents","children":[{"type":"text","value":"Table of Contents","position":{"start":{"line":12,"column":10,"offset":275},"end":{"line":12,"column":27,"offset":292},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":274},"end":{"line":12,"column":48,"offset":313},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":274},"end":{"line":12,"column":48,"offset":313},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":270},"end":{"line":12,"column":48,"offset":313},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#objects","children":[{"type":"text","value":"Objects","position":{"start":{"line":13,"column":10,"offset":323},"end":{"line":13,"column":17,"offset":330},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":322},"end":{"line":13,"column":28,"offset":341},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":322},"end":{"line":13,"column":28,"offset":341},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----creating-instances","children":[{"type":"text","value":"---- Creating Instances","position":{"start":{"line":14,"column":14,"offset":355},"end":{"line":14,"column":37,"offset":378},"indent":[]}}],"position":{"start":{"line":14,"column":13,"offset":354},"end":{"line":14,"column":64,"offset":405},"indent":[]}}],"position":{"start":{"line":14,"column":13,"offset":354},"end":{"line":14,"column":64,"offset":405},"indent":[]}}],"position":{"start":{"line":14,"column":9,"offset":350},"end":{"line":14,"column":64,"offset":405},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----class-methods","children":[{"type":"text","value":"---- Class Methods","position":{"start":{"line":15,"column":14,"offset":419},"end":{"line":15,"column":32,"offset":437},"indent":[]}}],"position":{"start":{"line":15,"column":13,"offset":418},"end":{"line":15,"column":54,"offset":459},"indent":[]}}],"position":{"start":{"line":15,"column":13,"offset":418},"end":{"line":15,"column":54,"offset":459},"indent":[]}}],"position":{"start":{"line":15,"column":9,"offset":414},"end":{"line":15,"column":54,"offset":459},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----_-_-init-_-_","children":[{"type":"text","value":"---- ","position":{"start":{"line":16,"column":14,"offset":473},"end":{"line":16,"column":19,"offset":478},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":16,"column":19,"offset":478},"end":{"line":16,"column":21,"offset":480},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":16,"column":21,"offset":480},"end":{"line":16,"column":22,"offset":481},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":" init ","position":{"start":{"line":16,"column":23,"offset":482},"end":{"line":16,"column":29,"offset":488},"indent":[]}}],"position":{"start":{"line":16,"column":22,"offset":481},"end":{"line":16,"column":30,"offset":489},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":16,"column":30,"offset":489},"end":{"line":16,"column":31,"offset":490},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":16,"column":31,"offset":490},"end":{"line":16,"column":33,"offset":492},"indent":[]}}],"position":{"start":{"line":16,"column":13,"offset":472},"end":{"line":16,"column":54,"offset":513},"indent":[]}}],"position":{"start":{"line":16,"column":13,"offset":472},"end":{"line":16,"column":54,"offset":513},"indent":[]}}],"position":{"start":{"line":16,"column":9,"offset":468},"end":{"line":16,"column":54,"offset":513},"indent":[]}}],"position":{"start":{"line":14,"column":9,"offset":350},"end":{"line":16,"column":54,"offset":513},"indent":[9,9]}}],"position":{"start":{"line":13,"column":5,"offset":318},"end":{"line":16,"column":54,"offset":513},"indent":[5,5,5]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#python-inheritance","children":[{"type":"text","value":"Python Inheritance","position":{"start":{"line":17,"column":10,"offset":523},"end":{"line":17,"column":28,"offset":541},"indent":[]}}],"position":{"start":{"line":17,"column":9,"offset":522},"end":{"line":17,"column":50,"offset":563},"indent":[]}}],"position":{"start":{"line":17,"column":9,"offset":522},"end":{"line":17,"column":50,"offset":563},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----python-subclassing","children":[{"type":"text","value":"---- Python Subclassing","position":{"start":{"line":18,"column":14,"offset":577},"end":{"line":18,"column":37,"offset":600},"indent":[]}}],"position":{"start":{"line":18,"column":13,"offset":576},"end":{"line":18,"column":64,"offset":627},"indent":[]}}],"position":{"start":{"line":18,"column":13,"offset":576},"end":{"line":18,"column":64,"offset":627},"indent":[]}}],"position":{"start":{"line":18,"column":9,"offset":572},"end":{"line":18,"column":64,"offset":627},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----_-_-str-_-_","children":[{"type":"text","value":"---- ","position":{"start":{"line":19,"column":14,"offset":641},"end":{"line":19,"column":19,"offset":646},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":19,"column":19,"offset":646},"end":{"line":19,"column":21,"offset":648},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":19,"column":21,"offset":648},"end":{"line":19,"column":22,"offset":649},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":" str ","position":{"start":{"line":19,"column":23,"offset":650},"end":{"line":19,"column":28,"offset":655},"indent":[]}}],"position":{"start":{"line":19,"column":22,"offset":649},"end":{"line":19,"column":29,"offset":656},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":19,"column":29,"offset":656},"end":{"line":19,"column":30,"offset":657},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":19,"column":30,"offset":657},"end":{"line":19,"column":32,"offset":659},"indent":[]}}],"position":{"start":{"line":19,"column":13,"offset":640},"end":{"line":19,"column":52,"offset":679},"indent":[]}}],"position":{"start":{"line":19,"column":13,"offset":640},"end":{"line":19,"column":52,"offset":679},"indent":[]}}],"position":{"start":{"line":19,"column":9,"offset":636},"end":{"line":19,"column":52,"offset":679},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----instance-methods","children":[{"type":"text","value":"---- Instance Methods","position":{"start":{"line":20,"column":14,"offset":693},"end":{"line":20,"column":35,"offset":714},"indent":[]}}],"position":{"start":{"line":20,"column":13,"offset":692},"end":{"line":20,"column":60,"offset":739},"indent":[]}}],"position":{"start":{"line":20,"column":13,"offset":692},"end":{"line":20,"column":60,"offset":739},"indent":[]}}],"position":{"start":{"line":20,"column":9,"offset":688},"end":{"line":20,"column":60,"offset":739},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----overriding-inheritance","children":[{"type":"text","value":"---- Overriding Inheritance","position":{"start":{"line":21,"column":14,"offset":753},"end":{"line":21,"column":41,"offset":780},"indent":[]}}],"position":{"start":{"line":21,"column":13,"offset":752},"end":{"line":21,"column":72,"offset":811},"indent":[]}}],"position":{"start":{"line":21,"column":13,"offset":752},"end":{"line":21,"column":72,"offset":811},"indent":[]}}],"position":{"start":{"line":21,"column":9,"offset":748},"end":{"line":21,"column":72,"offset":811},"indent":[]}}],"position":{"start":{"line":18,"column":9,"offset":572},"end":{"line":21,"column":72,"offset":811},"indent":[9,9,9]}}],"position":{"start":{"line":17,"column":5,"offset":518},"end":{"line":21,"column":72,"offset":811},"indent":[5,5,5,5]}}],"position":{"start":{"line":12,"column":5,"offset":270},"end":{"line":21,"column":72,"offset":811},"indent":[5,5,5,5,5,5,5,5,5]}}],"position":{"start":{"line":11,"column":1,"offset":208},"end":{"line":21,"column":72,"offset":811},"indent":[1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":11,"column":1,"offset":208},"end":{"line":21,"column":72,"offset":811},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<!-- /TOC -->","position":{"start":{"line":23,"column":1,"offset":813},"end":{"line":23,"column":14,"offset":826},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Table of Contents","position":{"start":{"line":25,"column":4,"offset":831},"end":{"line":25,"column":21,"offset":848},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":828},"end":{"line":25,"column":21,"offset":848},"indent":[]}},{"type":"jsx","value":"<a href=\"#section\">title</a>\n---- <a href=\"#subsection\">title</a>","position":{"start":{"line":27,"column":1,"offset":850},"end":{"line":28,"column":37,"offset":915},"indent":[1]}},{"type":"thematicBreak","position":{"start":{"line":32,"column":1,"offset":919},"end":{"line":32,"column":4,"offset":922},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Objects","position":{"start":{"line":34,"column":4,"offset":927},"end":{"line":34,"column":11,"offset":934},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":924},"end":{"line":34,"column":11,"offset":934},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Creating Instances","position":{"start":{"line":38,"column":4,"offset":941},"end":{"line":38,"column":22,"offset":959},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":938},"end":{"line":38,"column":22,"offset":959},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":">>> class Monster:\n...     hit_points=1\n...     color=\"blue\"\n...     weapon=\"sword\"\n...\n>>> monster = Monster()\n>>> monster.hit_points\n1\n>>> monster.weapon\n'sword'\n>>> monster.color\n'blue'\n\n# jubjub instance\n>>> jubjub = Monster()\n>>> type(jubjub)\n<type 'instance'>\n>>> jubjub.hit_points\n1\n>>> jubjub.hit_points = 5\n>>> jubjub.hit_points\n5","position":{"start":{"line":40,"column":1,"offset":961},"end":{"line":63,"column":4,"offset":1308},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Class Methods","position":{"start":{"line":67,"column":4,"offset":1315},"end":{"line":67,"column":17,"offset":1328},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1312},"end":{"line":67,"column":17,"offset":1328},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":">>> class Methods:\n...     a = 2\n...     sound=\"roar\"\n...     def battlecry(self):\n...             return self.sound.upper()\n...\n>>> general = Methods()\n>>> general.battlecry()\n'ROAR'","position":{"start":{"line":69,"column":1,"offset":1330},"end":{"line":79,"column":4,"offset":1521},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Code Challenge","position":{"start":{"line":81,"column":1,"offset":1523},"end":{"line":81,"column":15,"offset":1537},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":1523},"end":{"line":81,"column":15,"offset":1537},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"class Store:\n    open = 9\n    close = 18\n\n    def hours(self):\n        return \"We're open from {} to {}\".format(self.open, self.close)","position":{"start":{"line":83,"column":1,"offset":1539},"end":{"line":90,"column":4,"offset":1681},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"_","position":{"start":{"line":94,"column":4,"offset":1688},"end":{"line":94,"column":6,"offset":1690},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":94,"column":6,"offset":1690},"end":{"line":94,"column":7,"offset":1691},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":" init ","position":{"start":{"line":94,"column":8,"offset":1692},"end":{"line":94,"column":14,"offset":1698},"indent":[]}}],"position":{"start":{"line":94,"column":7,"offset":1691},"end":{"line":94,"column":15,"offset":1699},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":94,"column":15,"offset":1699},"end":{"line":94,"column":16,"offset":1700},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":94,"column":16,"offset":1700},"end":{"line":94,"column":18,"offset":1702},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":1685},"end":{"line":94,"column":18,"offset":1702},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Dealing with the dunder init!","position":{"start":{"line":96,"column":1,"offset":1704},"end":{"line":96,"column":30,"offset":1733},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":1704},"end":{"line":96,"column":30,"offset":1733},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"class Monster:\n\tdef __init__(self, **kwargs):\n\t\tself.hit_points = kwargs.get('hit_points', 5)\n\t\tself.weapon = kwargs.get('weapon', 'sword')\n\t\tself.color = kwargs.get('color', 'yellow')\n\t\tself.sound = kwargs.get('sound', 'yell')\n\nmonster = Monster(hit_points=22, color=\"green\")","position":{"start":{"line":98,"column":1,"offset":1735},"end":{"line":107,"column":4,"offset":2019},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":111,"column":1,"offset":2023},"end":{"line":111,"column":4,"offset":2026},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Python Inheritance","position":{"start":{"line":113,"column":4,"offset":2031},"end":{"line":113,"column":22,"offset":2049},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":2028},"end":{"line":113,"column":22,"offset":2049},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Building on from before, we're just making some defaults...","position":{"start":{"line":115,"column":1,"offset":2051},"end":{"line":115,"column":60,"offset":2110},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":2051},"end":{"line":115,"column":60,"offset":2110},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"class Monster:\n\tmin_hp = 1\n\tmax_hp = 1\n\tmin_exp = 1\n\tmax_exp = 1\n\tweapon = 'sword'\n\tsound = 'roar'\n\n\tdef __init__(self, **kwargs):\n\t\tself.hp = random.randint(self.min_hp, self.max_hp)\n\t\tself.exp = random.randint(self.min_exp, self.max_exp)\n\t\tself.color = random.choice(COLORS)\n\n\t\tfor key, value in kwargs.items():\n\t\t\tsetattr(self, key, value)\n\n\tdef battlecry(self):\n\t\treturn self.sound.upper()\n\nnew_mon = Monster()\nnew_mon.hp\n# 1\nnew_mon.color\n# 'blue'\n\nfresh = Monster(color='blue', sound='whistling', hp='500', adjective='manxsome')\nfresh.color\n# 'blue'\nfresh.adjective\n# manxsome","position":{"start":{"line":117,"column":1,"offset":2112},"end":{"line":148,"column":4,"offset":2702},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Python Subclassing","position":{"start":{"line":152,"column":4,"offset":2709},"end":{"line":152,"column":22,"offset":2727},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":2706},"end":{"line":152,"column":22,"offset":2727},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"# building on from monster\n\nclass Goblin(Monster):\n\tmax_hp = 3\n\tmax_exp = 2\n\tsound = 'squek'\n\ngolbin = Goblin()\ngoblin.hp\n# 2 - now isn't just 1 from the min/max set above!\ngoblin.color\n# 'blue'\n\nclass Troll(Monster):\n\tmin_hp = 3\n\tmax_hp = 5\n\tmin_exp = 2\n\tmax_exp = 6\n\tsound = 'growl'","position":{"start":{"line":154,"column":1,"offset":2729},"end":{"line":174,"column":4,"offset":3021},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Challenge","position":{"start":{"line":176,"column":1,"offset":3023},"end":{"line":176,"column":10,"offset":3032},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":3023},"end":{"line":176,"column":10,"offset":3032},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create a new class named Dragon that extends the Monster class. Don't forget to import Monster from monster. Give your Dragon an integer size attribute.","position":{"start":{"line":178,"column":1,"offset":3034},"end":{"line":178,"column":153,"offset":3186},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":3034},"end":{"line":178,"column":153,"offset":3186},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"from monster import Monster\n\nclass Dragon(Monster):\n    size = 12","position":{"start":{"line":180,"column":1,"offset":3188},"end":{"line":185,"column":4,"offset":3261},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"_","position":{"start":{"line":189,"column":4,"offset":3268},"end":{"line":189,"column":6,"offset":3270},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":189,"column":6,"offset":3270},"end":{"line":189,"column":7,"offset":3271},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":" str ","position":{"start":{"line":189,"column":8,"offset":3272},"end":{"line":189,"column":13,"offset":3277},"indent":[]}}],"position":{"start":{"line":189,"column":7,"offset":3271},"end":{"line":189,"column":14,"offset":3278},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":189,"column":14,"offset":3278},"end":{"line":189,"column":15,"offset":3279},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":189,"column":15,"offset":3279},"end":{"line":189,"column":17,"offset":3281},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":3265},"end":{"line":189,"column":17,"offset":3281},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This helps us when we print(object)","position":{"start":{"line":191,"column":1,"offset":3283},"end":{"line":191,"column":36,"offset":3318},"indent":[]}}],"position":{"start":{"line":191,"column":1,"offset":3283},"end":{"line":191,"column":36,"offset":3318},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"class Monster:\n\t...\n\tdef __str__(self):\n\t\treturn '{} {}, HP: {} ...'.format(self.color.title(), self.__class__.__name__, self.hp, self.exp)\n\t...\n\ndraco = Monster()\nprint(draco)\n# returns the details from the magic method","position":{"start":{"line":193,"column":1,"offset":3320},"end":{"line":203,"column":4,"offset":3548},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Challenge","position":{"start":{"line":205,"column":1,"offset":3550},"end":{"line":205,"column":10,"offset":3559},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":3550},"end":{"line":205,"column":10,"offset":3559},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Import Game from game. Make a new class named GameScore that extends Game. Use pass if needed.","position":{"start":{"line":207,"column":1,"offset":3561},"end":{"line":207,"column":95,"offset":3655},"indent":[]}}],"position":{"start":{"line":207,"column":1,"offset":3561},"end":{"line":207,"column":95,"offset":3655},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Add a ","position":{"start":{"line":209,"column":1,"offset":3657},"end":{"line":209,"column":7,"offset":3663},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"str","position":{"start":{"line":209,"column":9,"offset":3665},"end":{"line":209,"column":12,"offset":3668},"indent":[]}}],"position":{"start":{"line":209,"column":7,"offset":3663},"end":{"line":209,"column":14,"offset":3670},"indent":[]}},{"type":"text","value":" method to GameScore that returns the score in the string \"Player 1: 5; Player 2: 10\", using the correct values from self.score. self.score is a tuple with Player 1's score and Player 2's score like (5, 10).\nYou do not need to define self.score. It comes from the Game class.","position":{"start":{"line":209,"column":14,"offset":3670},"end":{"line":210,"column":68,"offset":3945},"indent":[1]}}],"position":{"start":{"line":209,"column":1,"offset":3657},"end":{"line":210,"column":68,"offset":3945},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"from game import Game\n\nclass GameScore(Game):\n    pass\n\n    def __str__(self):\n        return \"Player 1: {}; Player 2: {}\".format(*self.score)","position":{"start":{"line":212,"column":1,"offset":3947},"end":{"line":220,"column":4,"offset":4097},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Instance Methods","position":{"start":{"line":224,"column":4,"offset":4104},"end":{"line":224,"column":20,"offset":4120},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":4101},"end":{"line":224,"column":20,"offset":4120},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"class Character:\n\texp = 0\n\thp = 10\n\n\tdef __init__(self, **kwargs):\n\t\tself.name = input(\"Name: \")\n\t\tself.weapon = self.get_weapon()\n\t\tfor k, v in kwargs.items():\n\t\t\tsetattr(self, k, v)\n\n\tdef get_weapon(self):\n\t\tweapon_choice = input(\"Weapon: [S]word, [A]xe: \").lower()\n\n\t\tif weapon_choice in 'sa':\n\t\t\tif weapon_choice == 's':\n\t\t\t\treturn 'sword'\n\t\t\telse\n\t\t\t\treturn 'axe'","position":{"start":{"line":226,"column":1,"offset":4122},"end":{"line":245,"column":4,"offset":4498},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Challenge","position":{"start":{"line":247,"column":1,"offset":4500},"end":{"line":247,"column":10,"offset":4509},"indent":[]}}],"position":{"start":{"line":247,"column":1,"offset":4500},"end":{"line":247,"column":10,"offset":4509},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Add a score method to Game that takes a player argument. The player argument will be either 1 or 2. Increase that player's value in self.current_score by 1. You'll need to adjust the index (i.e. player = 1 means self.current_score","position":{"start":{"line":249,"column":1,"offset":4511},"end":{"line":249,"column":231,"offset":4741},"indent":[]}},{"type":"linkReference","identifier":"0","label":"0","referenceType":"shortcut","children":[{"type":"text","value":"0","position":{"start":{"line":249,"column":232,"offset":4742},"end":{"line":249,"column":233,"offset":4743},"indent":[]}}],"position":{"start":{"line":249,"column":231,"offset":4741},"end":{"line":249,"column":234,"offset":4744},"indent":[]}},{"type":"text","value":" needs to increase).","position":{"start":{"line":249,"column":234,"offset":4744},"end":{"line":249,"column":254,"offset":4764},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":4511},"end":{"line":249,"column":254,"offset":4764},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"class Game:\n  def __init__(self):\n    self.current_score = [0, 0]\n\n  def score(self, player):\n    if player in [1,2]:\n        if player == 1:\n            self.current_score[0] += 1\n        elif player == 2:\n            self.current_score[1] += 1\n        return","position":{"start":{"line":251,"column":1,"offset":4766},"end":{"line":263,"column":4,"offset":5034},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Overriding Inheritance","position":{"start":{"line":267,"column":4,"offset":5041},"end":{"line":267,"column":26,"offset":5063},"indent":[]}}],"position":{"start":{"line":267,"column":1,"offset":5038},"end":{"line":267,"column":26,"offset":5063},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"class Character(Combat):\n\tattack_limit = 10\n\n\t# pretend that we're overriding the Combat attack method)\n\tdef attack(self):\n\t\troll = random.randint(1, self.attack_limit)\n\t\tif self.weapon == 'sword':\n\t\t\troll += 1\n\t\telif self.weapon == 'axe':\n\t\t\troll +=2\n\t\treturn roll > 4","position":{"start":{"line":269,"column":1,"offset":5065},"end":{"line":281,"column":4,"offset":5342},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Code Challenge","position":{"start":{"line":283,"column":1,"offset":5344},"end":{"line":283,"column":15,"offset":5358},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":5344},"end":{"line":283,"column":15,"offset":5358},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Animal.noise() returns self.sound.lower(). Make Sheep.noise() return the uppercased version of the instance's sound.","position":{"start":{"line":285,"column":1,"offset":5360},"end":{"line":285,"column":117,"offset":5476},"indent":[]}}],"position":{"start":{"line":285,"column":1,"offset":5360},"end":{"line":285,"column":117,"offset":5476},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"from animal import Animal\n\nclass Sheep(Animal):\n    sound = \"Bless\"\n\n    def noise(self):\n        return self.sound.upper()","position":{"start":{"line":287,"column":1,"offset":5478},"end":{"line":295,"column":4,"offset":5609},"indent":[1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":298,"column":1,"offset":5612},"end":{"line":298,"column":31,"offset":5642},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":298,"column":31,"offset":5642}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"python-object-orientated\"\n    }}>{`Python Object Orientated`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#python-object-orientated\"\n        }}>{`Python Object Orientated`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#table-of-contents\"\n            }}>{`Table of Contents`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#objects\"\n            }}>{`Objects`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----creating-instances\"\n                }}>{`---- Creating Instances`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----class-methods\"\n                }}>{`---- Class Methods`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----_-_-init-_-_\"\n                }}>{`---- `}{`_`}{` `}<em parentName=\"a\">{` init `}</em>{` `}{`_`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#python-inheritance\"\n            }}>{`Python Inheritance`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----python-subclassing\"\n                }}>{`---- Python Subclassing`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----_-_-str-_-_\"\n                }}>{`---- `}{`_`}{` `}<em parentName=\"a\">{` str `}</em>{` `}{`_`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----instance-methods\"\n                }}>{`---- Instance Methods`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----overriding-inheritance\"\n                }}>{`---- Overriding Inheritance`}</a></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"table-of-contents\"\n    }}>{`Table of Contents`}</h2>\n    <a href=\"#section\">title</a>\n---- <a href=\"#subsection\">title</a>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"objects\"\n    }}>{`Objects`}</h2>\n    <h2 {...{\n      \"id\": \"creating-instances\"\n    }}>{`Creating Instances`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> class Monster:\n...     hit_points=1\n...     color=\"blue\"\n...     weapon=\"sword\"\n...\n>>> monster = Monster()\n>>> monster.hit_points\n1\n>>> monster.weapon\n'sword'\n>>> monster.color\n'blue'\n\n# jubjub instance\n>>> jubjub = Monster()\n>>> type(jubjub)\n<type 'instance'>\n>>> jubjub.hit_points\n1\n>>> jubjub.hit_points = 5\n>>> jubjub.hit_points\n5\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class-methods\"\n    }}>{`Class Methods`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> class Methods:\n...     a = 2\n...     sound=\"roar\"\n...     def battlecry(self):\n...             return self.sound.upper()\n...\n>>> general = Methods()\n>>> general.battlecry()\n'ROAR'\n`}</code></pre>\n    <p>{`Code Challenge`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`class Store:\n    open = 9\n    close = 18\n\n    def hours(self):\n        return \"We're open from {} to {}\".format(self.open, self.close)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"_--init--_\"\n    }}>{`_`}{` `}<em parentName=\"h2\">{` init `}</em>{` `}{`_`}</h2>\n    <p>{`Dealing with the dunder init!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`class Monster:\n    def __init__(self, **kwargs):\n        self.hit_points = kwargs.get('hit_points', 5)\n        self.weapon = kwargs.get('weapon', 'sword')\n        self.color = kwargs.get('color', 'yellow')\n        self.sound = kwargs.get('sound', 'yell')\n\nmonster = Monster(hit_points=22, color=\"green\")\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"python-inheritance\"\n    }}>{`Python Inheritance`}</h2>\n    <p>{`Building on from before, we're just making some defaults...`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`class Monster:\n    min_hp = 1\n    max_hp = 1\n    min_exp = 1\n    max_exp = 1\n    weapon = 'sword'\n    sound = 'roar'\n\n    def __init__(self, **kwargs):\n        self.hp = random.randint(self.min_hp, self.max_hp)\n        self.exp = random.randint(self.min_exp, self.max_exp)\n        self.color = random.choice(COLORS)\n\n        for key, value in kwargs.items():\n            setattr(self, key, value)\n\n    def battlecry(self):\n        return self.sound.upper()\n\nnew_mon = Monster()\nnew_mon.hp\n# 1\nnew_mon.color\n# 'blue'\n\nfresh = Monster(color='blue', sound='whistling', hp='500', adjective='manxsome')\nfresh.color\n# 'blue'\nfresh.adjective\n# manxsome\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"python-subclassing\"\n    }}>{`Python Subclassing`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`# building on from monster\n\nclass Goblin(Monster):\n    max_hp = 3\n    max_exp = 2\n    sound = 'squek'\n\ngolbin = Goblin()\ngoblin.hp\n# 2 - now isn't just 1 from the min/max set above!\ngoblin.color\n# 'blue'\n\nclass Troll(Monster):\n    min_hp = 3\n    max_hp = 5\n    min_exp = 2\n    max_exp = 6\n    sound = 'growl'\n`}</code></pre>\n    <p>{`Challenge`}</p>\n    <p>{`Create a new class named Dragon that extends the Monster class. Don't forget to import Monster from monster. Give your Dragon an integer size attribute.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`from monster import Monster\n\nclass Dragon(Monster):\n    size = 12\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"_--str--_\"\n    }}>{`_`}{` `}<em parentName=\"h2\">{` str `}</em>{` `}{`_`}</h2>\n    <p>{`This helps us when we print(object)`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`class Monster:\n    ...\n    def __str__(self):\n        return '{} {}, HP: {} ...'.format(self.color.title(), self.__class__.__name__, self.hp, self.exp)\n    ...\n\ndraco = Monster()\nprint(draco)\n# returns the details from the magic method\n`}</code></pre>\n    <p>{`Challenge`}</p>\n    <p>{`Import Game from game. Make a new class named GameScore that extends Game. Use pass if needed.`}</p>\n    <p>{`Add a `}<strong parentName=\"p\">{`str`}</strong>{` method to GameScore that returns the score in the string \"Player 1: 5; Player 2: 10\", using the correct values from self.score. self.score is a tuple with Player 1's score and Player 2's score like (5, 10).\nYou do not need to define self.score. It comes from the Game class.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`from game import Game\n\nclass GameScore(Game):\n    pass\n\n    def __str__(self):\n        return \"Player 1: {}; Player 2: {}\".format(*self.score)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"instance-methods\"\n    }}>{`Instance Methods`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`class Character:\n    exp = 0\n    hp = 10\n\n    def __init__(self, **kwargs):\n        self.name = input(\"Name: \")\n        self.weapon = self.get_weapon()\n        for k, v in kwargs.items():\n            setattr(self, k, v)\n\n    def get_weapon(self):\n        weapon_choice = input(\"Weapon: [S]word, [A]xe: \").lower()\n\n        if weapon_choice in 'sa':\n            if weapon_choice == 's':\n                return 'sword'\n            else\n                return 'axe'\n`}</code></pre>\n    <p>{`Challenge`}</p>\n    <p>{`Add a score method to Game that takes a player argument. The player argument will be either 1 or 2. Increase that player's value in self.current_score by 1. You'll need to adjust the index (i.e. player = 1 means self.current_score`}{`[0]`}{` needs to increase).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`class Game:\n  def __init__(self):\n    self.current_score = [0, 0]\n\n  def score(self, player):\n    if player in [1,2]:\n        if player == 1:\n            self.current_score[0] += 1\n        elif player == 2:\n            self.current_score[1] += 1\n        return\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"overriding-inheritance\"\n    }}>{`Overriding Inheritance`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`class Character(Combat):\n    attack_limit = 10\n\n    # pretend that we're overriding the Combat attack method)\n    def attack(self):\n        roll = random.randint(1, self.attack_limit)\n        if self.weapon == 'sword':\n            roll += 1\n        elif self.weapon == 'axe':\n            roll +=2\n        return roll > 4\n`}</code></pre>\n    <p>{`Code Challenge`}</p>\n    <p>{`Animal.noise() returns self.sound.lower(). Make Sheep.noise() return the uppercased version of the instance's sound.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`from animal import Animal\n\nclass Sheep(Animal):\n    sound = \"Bless\"\n\n    def noise(self):\n        return self.sound.upper()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}