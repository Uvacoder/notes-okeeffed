{"expireTime":9007200848610861000,"key":"gatsby-plugin-mdx-entire-payload-52faf0d0f4c7fac5cc27c02934f1bbbd-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Configuring Stripe for .NET","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":30,"offset":196},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":30,"offset":196},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":201},"end":{"line":10,"column":13,"offset":210},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":198},"end":{"line":10,"column":13,"offset":210},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://codebrains.io/integrate-stripe-api-with-asp-net-core-creating-customers/","children":[{"type":"text","value":"Setting up Stripe API for Dotnet","position":{"start":{"line":12,"column":5,"offset":216},"end":{"line":12,"column":37,"offset":248},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":215},"end":{"line":12,"column":120,"offset":331},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":215},"end":{"line":12,"column":120,"offset":331},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":212},"end":{"line":12,"column":120,"offset":331},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://stripe.com/docs/api?lang=dotnet","children":[{"type":"text","value":"Stripe Dotnet API Docs","position":{"start":{"line":13,"column":5,"offset":336},"end":{"line":13,"column":27,"offset":358},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":335},"end":{"line":13,"column":69,"offset":400},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":335},"end":{"line":13,"column":69,"offset":400},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":332},"end":{"line":13,"column":69,"offset":400},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-3.1&tabs=visual-studio-mac","children":[{"type":"text","value":"First Dotnet API","position":{"start":{"line":14,"column":5,"offset":405},"end":{"line":14,"column":21,"offset":421},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":404},"end":{"line":14,"column":135,"offset":535},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":404},"end":{"line":14,"column":135,"offset":535},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":401},"end":{"line":14,"column":135,"offset":535},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-3.1&tabs=linux","children":[{"type":"text","value":"Setting secrets for a Dotnet project","position":{"start":{"line":15,"column":5,"offset":540},"end":{"line":15,"column":41,"offset":576},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":539},"end":{"line":15,"column":140,"offset":675},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":539},"end":{"line":15,"column":140,"offset":675},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":536},"end":{"line":15,"column":140,"offset":675},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface","children":[{"type":"text","value":"Interfaces in C#","position":{"start":{"line":16,"column":5,"offset":680},"end":{"line":16,"column":21,"offset":696},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":679},"end":{"line":16,"column":108,"offset":783},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":679},"end":{"line":16,"column":108,"offset":783},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":676},"end":{"line":16,"column":108,"offset":783},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://stormpath.com/blog/build-api-service-dotnet-core-twilio-stripe","children":[{"type":"text","value":"ASP.NET Core API Service with Twilio, Stripe and Stormpath","position":{"start":{"line":17,"column":5,"offset":788},"end":{"line":17,"column":63,"offset":846},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":787},"end":{"line":17,"column":136,"offset":919},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":787},"end":{"line":17,"column":136,"offset":919},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":784},"end":{"line":17,"column":136,"offset":919},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://cmatskas.com/processing-payments-and-being-pci-compliant-with-stripe-js/?utm_content=buffer55d56&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer","children":[{"type":"text","value":"Process Payments with Dotnet","position":{"start":{"line":18,"column":5,"offset":924},"end":{"line":18,"column":33,"offset":952},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":923},"end":{"line":18,"column":201,"offset":1120},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":923},"end":{"line":18,"column":201,"offset":1120},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":920},"end":{"line":18,"column":201,"offset":1120},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/cmatskas/StripeSample/tree/master/StripeSample","children":[{"type":"text","value":"Process Payments with Dotnet Github","position":{"start":{"line":19,"column":5,"offset":1125},"end":{"line":19,"column":40,"offset":1160},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":1124},"end":{"line":19,"column":108,"offset":1228},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":1124},"end":{"line":19,"column":108,"offset":1228},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1121},"end":{"line":19,"column":108,"offset":1228},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://stripe.com/docs/development#create-charge","children":[{"type":"text","value":"Stripe Development Docs","position":{"start":{"line":20,"column":5,"offset":1233},"end":{"line":20,"column":28,"offset":1256},"indent":[]}}],"position":{"start":{"line":20,"column":4,"offset":1232},"end":{"line":20,"column":80,"offset":1308},"indent":[]}}],"position":{"start":{"line":20,"column":4,"offset":1232},"end":{"line":20,"column":80,"offset":1308},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1229},"end":{"line":20,"column":80,"offset":1308},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.toptal.com/asp-dot-net/asp-net-web-api-tutorial","children":[{"type":"text","value":"Toptal ASP.NET WebAPI","position":{"start":{"line":21,"column":6,"offset":1314},"end":{"line":21,"column":27,"offset":1335},"indent":[]}}],"position":{"start":{"line":21,"column":5,"offset":1313},"end":{"line":21,"column":89,"offset":1397},"indent":[]}}],"position":{"start":{"line":21,"column":5,"offset":1313},"end":{"line":21,"column":89,"offset":1397},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1309},"end":{"line":21,"column":89,"offset":1397},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://dev.to/integerman/creating-a-net-core-api-3n6d","children":[{"type":"text","value":"Dev.To tutorial","position":{"start":{"line":22,"column":6,"offset":1403},"end":{"line":22,"column":21,"offset":1418},"indent":[]}}],"position":{"start":{"line":22,"column":5,"offset":1402},"end":{"line":22,"column":78,"offset":1475},"indent":[]}}],"position":{"start":{"line":22,"column":5,"offset":1402},"end":{"line":22,"column":78,"offset":1475},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1398},"end":{"line":22,"column":78,"offset":1475},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://httpie.org/doc#default-behaviour","children":[{"type":"text","value":"HTTPie JSON","position":{"start":{"line":23,"column":6,"offset":1481},"end":{"line":23,"column":17,"offset":1492},"indent":[]}}],"position":{"start":{"line":23,"column":5,"offset":1480},"end":{"line":23,"column":60,"offset":1535},"indent":[]}}],"position":{"start":{"line":23,"column":5,"offset":1480},"end":{"line":23,"column":60,"offset":1535},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1476},"end":{"line":23,"column":60,"offset":1535},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":212},"end":{"line":23,"column":60,"offset":1535},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding the library","position":{"start":{"line":25,"column":4,"offset":1540},"end":{"line":25,"column":22,"offset":1558},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1537},"end":{"line":25,"column":22,"offset":1558},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"# install stripe\ndotnet add package Stripe.net\n# for reading local env file\n# NOT REQUIRED unless you want to read from .env\ndotnet add package DotNetEnv\n# install required code generation code\nMicrosoft.VisualStudio.Web.CodeGeneration.Design\n# global install scaffolding tool\ndotnet tool install --global dotnet-aspnet-codegenerator","position":{"start":{"line":27,"column":1,"offset":1560},"end":{"line":37,"column":4,"offset":1906},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding a Dotenv file","position":{"start":{"line":39,"column":4,"offset":1911},"end":{"line":39,"column":24,"offset":1931},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1908},"end":{"line":39,"column":24,"offset":1931},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"touch .env","position":{"start":{"line":41,"column":1,"offset":1933},"end":{"line":43,"column":4,"offset":1956},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Within the Dotenv file, we need to add your test keys from Stripe's website.","position":{"start":{"line":45,"column":1,"offset":1958},"end":{"line":45,"column":77,"offset":2034},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1958},"end":{"line":45,"column":77,"offset":2034},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"SK_TEST_KEY= sk_test...\nPK_TEST_KEY=pk_test...","position":{"start":{"line":47,"column":1,"offset":2036},"end":{"line":50,"column":4,"offset":2095},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Updating your settings file","position":{"start":{"line":52,"column":4,"offset":2100},"end":{"line":52,"column":31,"offset":2127},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2097},"end":{"line":52,"column":31,"offset":2127},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you are going to use another method to fetch the variables (ie secrets etc), you could add the following to your ","position":{"start":{"line":54,"column":1,"offset":2129},"end":{"line":54,"column":117,"offset":2245},"indent":[]}},{"type":"inlineCode","value":"appsettings.json","position":{"start":{"line":54,"column":117,"offset":2245},"end":{"line":54,"column":135,"offset":2263},"indent":[]}},{"type":"text","value":" file:","position":{"start":{"line":54,"column":135,"offset":2263},"end":{"line":54,"column":141,"offset":2269},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2129},"end":{"line":54,"column":141,"offset":2269},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"{\n  // previous key/values omitted for brevity\n  \"Stripe\": {\n    \"SecretKey\": \"SK_TEST_KEY\", // this will eval to sk_test_... .env\n    \"PublishableKey\": \"PK_TEST_KEY\" // this will eval to sk_test_... from .env\n  }\n}","position":{"start":{"line":56,"column":1,"offset":2271},"end":{"line":64,"column":4,"offset":2498},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Make sure to check the ","position":{"start":{"line":66,"column":1,"offset":2500},"end":{"line":66,"column":24,"offset":2523},"indent":[]}},{"type":"link","title":null,"url":"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/passing-parameters","children":[{"type":"text","value":"docs on passing parameters","position":{"start":{"line":66,"column":25,"offset":2524},"end":{"line":66,"column":51,"offset":2550},"indent":[]}}],"position":{"start":{"line":66,"column":24,"offset":2523},"end":{"line":66,"column":157,"offset":2656},"indent":[]}},{"type":"text","value":" to understand how this works.","position":{"start":{"line":66,"column":157,"offset":2656},"end":{"line":66,"column":187,"offset":2686},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2500},"end":{"line":66,"column":187,"offset":2686},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Add Stripe config to Startup.cs","position":{"start":{"line":68,"column":4,"offset":2691},"end":{"line":68,"column":35,"offset":2722},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2688},"end":{"line":68,"column":35,"offset":2722},"indent":[]}},{"type":"code","lang":"csharp","meta":null,"value":"using Stripe;\nusing DotNetEnv;\n\n// ... code omitted for brevity\n\npublic Startup(IConfiguration configuration)\n{\n    Configuration = configuration;\n    // load .env file\n    DotNetEnv.Env.Load();\n    // set config using env var\n    StripeConfiguration.ApiKey = System.Environment.GetEnvironmentVariable(\"SK_TEST_KEY\");\n}","position":{"start":{"line":70,"column":1,"offset":2724},"end":{"line":84,"column":4,"offset":3057},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Create the Model","position":{"start":{"line":86,"column":4,"offset":3062},"end":{"line":86,"column":20,"offset":3078},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":3059},"end":{"line":86,"column":20,"offset":3078},"indent":[]}},{"type":"code","lang":"cs","meta":null,"value":"// in Models/StripeCharge.cs\nnamespace ChargeApi.Models\n{\n    public class StripeCharge\n    {\n        public long Amount { get; set; }\n        public string Currency { get; set; }\n        public string Source { get; set; }\n        public string ReceiptEmail { get; set; }\n    }\n}","position":{"start":{"line":88,"column":1,"offset":3080},"end":{"line":100,"column":4,"offset":3369},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Create the Controller","position":{"start":{"line":102,"column":4,"offset":3374},"end":{"line":102,"column":25,"offset":3395},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":3371},"end":{"line":102,"column":25,"offset":3395},"indent":[]}},{"type":"code","lang":"cs","meta":null,"value":"// Controllers/Charge.cs\nusing System.Collections.Generic;\nusing Microsoft.AspNetCore.Mvc;\nusing Stripe;\nusing ChargeApi.Models;\n\nnamespace dotnet_stripe.Controllers\n{\n    [ApiController]\n    [Route(\"api/charges\")]\n    public class ChargesController : Controller\n    {\n        [HttpPost]\n        public Stripe.Charge CreateCharge([FromBody] StripeCharge createOptions)\n        {\n            var options = new ChargeCreateOptions\n            {\n                Amount = createOptions.Amount,\n                Currency = \"usd\",\n                Source = \"tok_visa\",\n                ReceiptEmail = \"tim.apple@example.com\",\n            };\n            var service = new ChargeService();\n            var charge = service.Create(options);\n            return charge;\n        }\n    }\n}","position":{"start":{"line":104,"column":1,"offset":3397},"end":{"line":133,"column":4,"offset":4180},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Sending the request on HTTPie","position":{"start":{"line":135,"column":4,"offset":4185},"end":{"line":135,"column":33,"offset":4214},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":4182},"end":{"line":135,"column":33,"offset":4214},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since we are sending back the response from the ","position":{"start":{"line":137,"column":1,"offset":4216},"end":{"line":137,"column":49,"offset":4264},"indent":[]}},{"type":"inlineCode","value":"Stripe.Charge","position":{"start":{"line":137,"column":49,"offset":4264},"end":{"line":137,"column":64,"offset":4279},"indent":[]}},{"type":"text","value":" object, it will be very verbose and not what you want to do in reality for the API.","position":{"start":{"line":137,"column":64,"offset":4279},"end":{"line":137,"column":148,"offset":4363},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":4216},"end":{"line":137,"column":148,"offset":4363},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using HTTPie (check resource ","position":{"start":{"line":139,"column":1,"offset":4365},"end":{"line":139,"column":30,"offset":4394},"indent":[]}},{"type":"linkReference","identifier":"12","label":"12","referenceType":"shortcut","children":[{"type":"text","value":"12","position":{"start":{"line":139,"column":31,"offset":4395},"end":{"line":139,"column":33,"offset":4397},"indent":[]}}],"position":{"start":{"line":139,"column":30,"offset":4394},"end":{"line":139,"column":34,"offset":4398},"indent":[]}},{"type":"text","value":"), we can check for our 200 response with the full JSON body returned by Stripe by calling ","position":{"start":{"line":139,"column":34,"offset":4398},"end":{"line":139,"column":125,"offset":4489},"indent":[]}},{"type":"inlineCode","value":"http POST http://localhost:5000/api/charges Amount:=200","position":{"start":{"line":139,"column":125,"offset":4489},"end":{"line":139,"column":182,"offset":4546},"indent":[]}},{"type":"text","value":" in our console.","position":{"start":{"line":139,"column":182,"offset":4546},"end":{"line":139,"column":198,"offset":4562},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":4365},"end":{"line":139,"column":198,"offset":4562},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Check the Stripe developer console","position":{"start":{"line":141,"column":4,"offset":4567},"end":{"line":141,"column":38,"offset":4601},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":4564},"end":{"line":141,"column":38,"offset":4601},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Heading to our Stripe dashboard and checking under ","position":{"start":{"line":143,"column":1,"offset":4603},"end":{"line":143,"column":52,"offset":4654},"indent":[]}},{"type":"inlineCode","value":"Developers > Events","position":{"start":{"line":143,"column":52,"offset":4654},"end":{"line":143,"column":73,"offset":4675},"indent":[]}},{"type":"text","value":", one can see our payment made for ","position":{"start":{"line":143,"column":73,"offset":4675},"end":{"line":143,"column":108,"offset":4710},"indent":[]}},{"type":"inlineCode","value":"US$2.00","position":{"start":{"line":143,"column":108,"offset":4710},"end":{"line":143,"column":117,"offset":4719},"indent":[]}},{"type":"text","value":" by ","position":{"start":{"line":143,"column":117,"offset":4719},"end":{"line":143,"column":121,"offset":4723},"indent":[]}},{"type":"inlineCode","value":"\"tim.apple@example.com\"","position":{"start":{"line":143,"column":121,"offset":4723},"end":{"line":143,"column":146,"offset":4748},"indent":[]}},{"type":"text","value":". Great success!","position":{"start":{"line":143,"column":146,"offset":4748},"end":{"line":143,"column":162,"offset":4764},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":4603},"end":{"line":143,"column":162,"offset":4764},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Of course, all those values are coded and not exactly what we want in the real world... but we are connected.","position":{"start":{"line":145,"column":1,"offset":4766},"end":{"line":145,"column":110,"offset":4875},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":4766},"end":{"line":145,"column":110,"offset":4875},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":148,"column":1,"offset":4878},"end":{"line":148,"column":31,"offset":4908},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":148,"column":31,"offset":4908}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"configuring-stripe-for-net\"\n    }}>{`Configuring Stripe for .NET`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://codebrains.io/integrate-stripe-api-with-asp-net-core-creating-customers/\"\n        }}>{`Setting up Stripe API for Dotnet`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/api?lang=dotnet\"\n        }}>{`Stripe Dotnet API Docs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-3.1&tabs=visual-studio-mac\"\n        }}>{`First Dotnet API`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-3.1&tabs=linux\"\n        }}>{`Setting secrets for a Dotnet project`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface\"\n        }}>{`Interfaces in C#`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stormpath.com/blog/build-api-service-dotnet-core-twilio-stripe\"\n        }}>{`ASP.NET Core API Service with Twilio, Stripe and Stormpath`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://cmatskas.com/processing-payments-and-being-pci-compliant-with-stripe-js/?utm_content=buffer55d56&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer\"\n        }}>{`Process Payments with Dotnet`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/cmatskas/StripeSample/tree/master/StripeSample\"\n        }}>{`Process Payments with Dotnet Github`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/development#create-charge\"\n        }}>{`Stripe Development Docs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.toptal.com/asp-dot-net/asp-net-web-api-tutorial\"\n        }}>{`Toptal ASP.NET WebAPI`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://dev.to/integerman/creating-a-net-core-api-3n6d\"\n        }}>{`Dev.To tutorial`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://httpie.org/doc#default-behaviour\"\n        }}>{`HTTPie JSON`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"adding-the-library\"\n    }}>{`Adding the library`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# install stripe\ndotnet add package Stripe.net\n# for reading local env file\n# NOT REQUIRED unless you want to read from .env\ndotnet add package DotNetEnv\n# install required code generation code\nMicrosoft.VisualStudio.Web.CodeGeneration.Design\n# global install scaffolding tool\ndotnet tool install --global dotnet-aspnet-codegenerator\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-a-dotenv-file\"\n    }}>{`Adding a Dotenv file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`touch .env\n`}</code></pre>\n    <p>{`Within the Dotenv file, we need to add your test keys from Stripe's website.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`SK_TEST_KEY= sk_test...\nPK_TEST_KEY=pk_test...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"updating-your-settings-file\"\n    }}>{`Updating your settings file`}</h2>\n    <p>{`If you are going to use another method to fetch the variables (ie secrets etc), you could add the following to your `}<inlineCode parentName=\"p\">{`appsettings.json`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  // previous key/values omitted for brevity\n  \"Stripe\": {\n    \"SecretKey\": \"SK_TEST_KEY\", // this will eval to sk_test_... .env\n    \"PublishableKey\": \"PK_TEST_KEY\" // this will eval to sk_test_... from .env\n  }\n}\n`}</code></pre>\n    <p>{`Make sure to check the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/passing-parameters\"\n      }}>{`docs on passing parameters`}</a>{` to understand how this works.`}</p>\n    <h2 {...{\n      \"id\": \"add-stripe-config-to-startupcs\"\n    }}>{`Add Stripe config to Startup.cs`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using Stripe;\nusing DotNetEnv;\n\n// ... code omitted for brevity\n\npublic Startup(IConfiguration configuration)\n{\n    Configuration = configuration;\n    // load .env file\n    DotNetEnv.Env.Load();\n    // set config using env var\n    StripeConfiguration.ApiKey = System.Environment.GetEnvironmentVariable(\"SK_TEST_KEY\");\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-the-model\"\n    }}>{`Create the Model`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cs\"\n      }}>{`// in Models/StripeCharge.cs\nnamespace ChargeApi.Models\n{\n    public class StripeCharge\n    {\n        public long Amount { get; set; }\n        public string Currency { get; set; }\n        public string Source { get; set; }\n        public string ReceiptEmail { get; set; }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-the-controller\"\n    }}>{`Create the Controller`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cs\"\n      }}>{`// Controllers/Charge.cs\nusing System.Collections.Generic;\nusing Microsoft.AspNetCore.Mvc;\nusing Stripe;\nusing ChargeApi.Models;\n\nnamespace dotnet_stripe.Controllers\n{\n    [ApiController]\n    [Route(\"api/charges\")]\n    public class ChargesController : Controller\n    {\n        [HttpPost]\n        public Stripe.Charge CreateCharge([FromBody] StripeCharge createOptions)\n        {\n            var options = new ChargeCreateOptions\n            {\n                Amount = createOptions.Amount,\n                Currency = \"usd\",\n                Source = \"tok_visa\",\n                ReceiptEmail = \"tim.apple@example.com\",\n            };\n            var service = new ChargeService();\n            var charge = service.Create(options);\n            return charge;\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sending-the-request-on-httpie\"\n    }}>{`Sending the request on HTTPie`}</h2>\n    <p>{`Since we are sending back the response from the `}<inlineCode parentName=\"p\">{`Stripe.Charge`}</inlineCode>{` object, it will be very verbose and not what you want to do in reality for the API.`}</p>\n    <p>{`Using HTTPie (check resource `}{`[12]`}{`), we can check for our 200 response with the full JSON body returned by Stripe by calling `}<inlineCode parentName=\"p\">{`http POST http://localhost:5000/api/charges Amount:=200`}</inlineCode>{` in our console.`}</p>\n    <h2 {...{\n      \"id\": \"check-the-stripe-developer-console\"\n    }}>{`Check the Stripe developer console`}</h2>\n    <p>{`Heading to our Stripe dashboard and checking under `}<inlineCode parentName=\"p\">{`Developers > Events`}</inlineCode>{`, one can see our payment made for `}<inlineCode parentName=\"p\">{`US$2.00`}</inlineCode>{` by `}<inlineCode parentName=\"p\">{`\"tim.apple@example.com\"`}</inlineCode>{`. Great success!`}</p>\n    <p>{`Of course, all those values are coded and not exactly what we want in the real world... but we are connected.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}