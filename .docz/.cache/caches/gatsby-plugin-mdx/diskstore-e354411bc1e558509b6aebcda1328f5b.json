{"expireTime":9007200849425562000,"key":"gatsby-plugin-mdx-entire-payload-8533e965fd5bee3252af9f772894c86d-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"WTF Go","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":9,"offset":175},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":9,"offset":175},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":180},"end":{"line":10,"column":13,"offset":189},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":177},"end":{"line":10,"column":13,"offset":189},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/","children":[{"type":"text","value":"Gotchas and common mistakes in Go","position":{"start":{"line":12,"column":5,"offset":195},"end":{"line":12,"column":38,"offset":228},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":194},"end":{"line":12,"column":112,"offset":302},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":194},"end":{"line":12,"column":112,"offset":302},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":191},"end":{"line":12,"column":112,"offset":302},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/golang/go/wiki/CommonMistakes","children":[{"type":"text","value":"Common Mistakes - Golang GitHub","position":{"start":{"line":13,"column":5,"offset":307},"end":{"line":13,"column":36,"offset":338},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":306},"end":{"line":13,"column":87,"offset":389},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":306},"end":{"line":13,"column":87,"offset":389},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":303},"end":{"line":13,"column":87,"offset":389},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":191},"end":{"line":13,"column":87,"offset":389},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Can't Use \"nil\" to Initialize a Variable Without an Explicit Type","position":{"start":{"line":15,"column":4,"offset":394},"end":{"line":15,"column":69,"offset":459},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":391},"end":{"line":15,"column":69,"offset":459},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Fails:","position":{"start":{"line":17,"column":1,"offset":461},"end":{"line":17,"column":7,"offset":467},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":461},"end":{"line":17,"column":7,"offset":467},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nfunc main() {\n    var x = nil //error\n\n    _ = x\n}","position":{"start":{"line":19,"column":1,"offset":469},"end":{"line":27,"column":4,"offset":547},"indent":[1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"/tmp/sandbox188239583/main.go:4: use of untyped nil","position":{"start":{"line":29,"column":3,"offset":551},"end":{"line":29,"column":54,"offset":602},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":551},"end":{"line":29,"column":54,"offset":602},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":549},"end":{"line":29,"column":54,"offset":602},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Works:","position":{"start":{"line":31,"column":1,"offset":604},"end":{"line":31,"column":7,"offset":610},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":604},"end":{"line":31,"column":7,"offset":610},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nfunc main() {\n    var x interface{} = nil\n\n    _ = x\n}","position":{"start":{"line":33,"column":1,"offset":612},"end":{"line":41,"column":4,"offset":694},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using \"nil\" Slices and Maps","position":{"start":{"line":43,"column":4,"offset":699},"end":{"line":43,"column":31,"offset":726},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":696},"end":{"line":43,"column":31,"offset":726},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It's OK to add items to a \"nil\" slice, but doing the same with a map will produce a runtime panic.","position":{"start":{"line":45,"column":1,"offset":728},"end":{"line":45,"column":99,"offset":826},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":728},"end":{"line":45,"column":99,"offset":826},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Fails:","position":{"start":{"line":47,"column":1,"offset":828},"end":{"line":47,"column":7,"offset":834},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":828},"end":{"line":47,"column":7,"offset":834},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nfunc main() {\n    var m map[string]int\n    m[\"one\"] = 1 //error\n}","position":{"start":{"line":49,"column":1,"offset":836},"end":{"line":56,"column":4,"offset":929},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Works:","position":{"start":{"line":58,"column":1,"offset":931},"end":{"line":58,"column":7,"offset":937},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":931},"end":{"line":58,"column":7,"offset":937},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nfunc main() {\n    var s []int\n    s = append(s,1)\n}","position":{"start":{"line":60,"column":1,"offset":939},"end":{"line":67,"column":4,"offset":1018},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Map Capacity","position":{"start":{"line":69,"column":4,"offset":1023},"end":{"line":69,"column":16,"offset":1035},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":1020},"end":{"line":69,"column":16,"offset":1035},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can specify map capacity when created, but you can't use the ","position":{"start":{"line":71,"column":1,"offset":1037},"end":{"line":71,"column":66,"offset":1102},"indent":[]}},{"type":"inlineCode","value":"cap()","position":{"start":{"line":71,"column":66,"offset":1102},"end":{"line":71,"column":73,"offset":1109},"indent":[]}},{"type":"text","value":" function on maps.","position":{"start":{"line":71,"column":73,"offset":1109},"end":{"line":71,"column":91,"offset":1127},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":1037},"end":{"line":71,"column":91,"offset":1127},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nimport (\n   \"fmt\"\n)\n\nfunc main() {\n   a := make([]int, 99)\n   fmt.Println(cap(a)) // 99\n\n   b := make(map[string]int, 99)\n   fmt.Println(len(b)) // 0\n   fmt.Println(cap(b)) // error: ./prog.go:12:17: invalid argument b (type map[string]int) for cap\n}","position":{"start":{"line":73,"column":1,"offset":1129},"end":{"line":88,"column":4,"offset":1407},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"String can't be nil","position":{"start":{"line":90,"column":4,"offset":1412},"end":{"line":90,"column":23,"offset":1431},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":1409},"end":{"line":90,"column":23,"offset":1431},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Fails:","position":{"start":{"line":92,"column":1,"offset":1433},"end":{"line":92,"column":7,"offset":1439},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":1433},"end":{"line":92,"column":7,"offset":1439},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nfunc main() {\n    var x string = nil //error\n\n    if x == nil { //error\n        x = \"default\"\n    }\n}","position":{"start":{"line":94,"column":1,"offset":1441},"end":{"line":104,"column":4,"offset":1570},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"/tmp/sandbox630560459/main.go:4: cannot use nil as type string in assignment\n/tmp/sandbox630560459/main.go:6: invalid operation: x == nil (mismatched types string and nil)","position":{"start":{"line":106,"column":3,"offset":1574},"end":{"line":107,"column":97,"offset":1747},"indent":[3]}}],"position":{"start":{"line":106,"column":3,"offset":1574},"end":{"line":107,"column":97,"offset":1747},"indent":[3]}}],"position":{"start":{"line":106,"column":1,"offset":1572},"end":{"line":107,"column":97,"offset":1747},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Works:","position":{"start":{"line":109,"column":1,"offset":1749},"end":{"line":109,"column":7,"offset":1755},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":1749},"end":{"line":109,"column":7,"offset":1755},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nfunc main() {\n    var x string //defaults to \"\" (zero value)\n\n    if x == \"\" {\n        x = \"default\"\n    }\n}","position":{"start":{"line":111,"column":1,"offset":1757},"end":{"line":121,"column":4,"offset":1893},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Array Func Args","position":{"start":{"line":123,"column":4,"offset":1898},"end":{"line":123,"column":19,"offset":1913},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":1895},"end":{"line":123,"column":19,"offset":1913},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you are a C or C++ developer arrays for you are pointers. When you pass arrays to functions the functions reference the same memory location, so they can update the original data. Arrays in Go are values, so when you pass arrays to functions the functions get a copy of the original array data. This can be a problem if you are trying to update the array data.","position":{"start":{"line":125,"column":1,"offset":1915},"end":{"line":125,"column":364,"offset":2278},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":1915},"end":{"line":125,"column":364,"offset":2278},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Fails:","position":{"start":{"line":127,"column":1,"offset":2280},"end":{"line":127,"column":7,"offset":2286},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":2280},"end":{"line":127,"column":7,"offset":2286},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nimport \"fmt\"\n\nfunc main() {\n    x := [3]int{1,2,3}\n\n    func(arr [3]int) {\n        arr[0] = 7\n        fmt.Println(arr) //prints [7 2 3]\n    }(x)\n\n    fmt.Println(x) //prints [1 2 3] (not ok if you need [7 2 3])\n}","position":{"start":{"line":129,"column":1,"offset":2288},"end":{"line":144,"column":4,"offset":2528},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Works:","position":{"start":{"line":146,"column":1,"offset":2530},"end":{"line":146,"column":7,"offset":2536},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":2530},"end":{"line":146,"column":7,"offset":2536},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nimport \"fmt\"\n\nfunc main() {\n    x := [3]int{1,2,3}\n\n    func(arr *[3]int) {\n        (*arr)[0] = 7\n        fmt.Println(arr) //prints &[7 2 3]\n    }(&x)\n\n    fmt.Println(x) //prints [7 2 3]\n}","position":{"start":{"line":148,"column":1,"offset":2538},"end":{"line":163,"column":4,"offset":2755},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Another option is to use slices. Even though your function gets a copy of the slice variable it still references the original data.","position":{"start":{"line":165,"column":1,"offset":2757},"end":{"line":165,"column":132,"offset":2888},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":2757},"end":{"line":165,"column":132,"offset":2888},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nimport \"fmt\"\n\nfunc main() {\n    x := []int{1,2,3}\n\n    func(arr []int) {\n        arr[0] = 7\n        fmt.Println(arr) //prints [7 2 3]\n    }(x)\n\n    fmt.Println(x) //prints [7 2 3]\n}","position":{"start":{"line":167,"column":1,"offset":2890},"end":{"line":182,"column":4,"offset":3099},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Unexpected Values in Slice and Array \"range\" Clauses","position":{"start":{"line":184,"column":4,"offset":3104},"end":{"line":184,"column":56,"offset":3156},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":3101},"end":{"line":184,"column":56,"offset":3156},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/","children":[{"type":"text","value":"Continue","position":{"start":{"line":186,"column":2,"offset":3159},"end":{"line":186,"column":10,"offset":3167},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":3158},"end":{"line":186,"column":84,"offset":3241},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":3158},"end":{"line":186,"column":84,"offset":3241},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Strings Are Immutable","position":{"start":{"line":188,"column":4,"offset":3246},"end":{"line":188,"column":25,"offset":3267},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":3243},"end":{"line":188,"column":25,"offset":3267},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Fails:","position":{"start":{"line":190,"column":1,"offset":3269},"end":{"line":190,"column":7,"offset":3275},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":3269},"end":{"line":190,"column":7,"offset":3275},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nimport \"fmt\"\n\nfunc main() {\n    x := \"text\"\n    x[0] = 'T'\n\n    fmt.Println(x)\n}","position":{"start":{"line":192,"column":1,"offset":3277},"end":{"line":203,"column":4,"offset":3385},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"/tmp/sandbox305565531/main.go:7: cannot assign to x","position":{"start":{"line":205,"column":3,"offset":3389},"end":{"line":205,"column":54,"offset":3440},"indent":[]}},{"type":"linkReference","identifier":"0","label":"0","referenceType":"shortcut","children":[{"type":"text","value":"0","position":{"start":{"line":205,"column":55,"offset":3441},"end":{"line":205,"column":56,"offset":3442},"indent":[]}}],"position":{"start":{"line":205,"column":54,"offset":3440},"end":{"line":205,"column":57,"offset":3443},"indent":[]}}],"position":{"start":{"line":205,"column":3,"offset":3389},"end":{"line":205,"column":57,"offset":3443},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":3387},"end":{"line":205,"column":57,"offset":3443},"indent":[]}},{"type":"code","lang":"golang","meta":null,"value":"package main\n\nimport \"fmt\"\n\nfunc main() {\n    x := \"text\"\n    xbytes := []byte(x)\n    xbytes[0] = 'T'\n\n    fmt.Println(string(xbytes)) //prints Text\n}","position":{"start":{"line":207,"column":1,"offset":3445},"end":{"line":219,"column":4,"offset":3609},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":222,"column":1,"offset":3612},"end":{"line":222,"column":31,"offset":3642},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":222,"column":31,"offset":3642}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"wtf-go\"\n    }}>{`WTF Go`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/\"\n        }}>{`Gotchas and common mistakes in Go`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/golang/go/wiki/CommonMistakes\"\n        }}>{`Common Mistakes - Golang GitHub`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"cant-use-nil-to-initialize-a-variable-without-an-explicit-type\"\n    }}>{`Can't Use \"nil\" to Initialize a Variable Without an Explicit Type`}</h2>\n    <p>{`Fails:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nfunc main() {\n    var x = nil //error\n\n    _ = x\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`/tmp/sandbox188239583/main.go:4: use of untyped nil`}</p>\n    </blockquote>\n    <p>{`Works:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nfunc main() {\n    var x interface{} = nil\n\n    _ = x\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-nil-slices-and-maps\"\n    }}>{`Using \"nil\" Slices and Maps`}</h2>\n    <p>{`It's OK to add items to a \"nil\" slice, but doing the same with a map will produce a runtime panic.`}</p>\n    <p>{`Fails:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nfunc main() {\n    var m map[string]int\n    m[\"one\"] = 1 //error\n}\n`}</code></pre>\n    <p>{`Works:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nfunc main() {\n    var s []int\n    s = append(s,1)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"map-capacity\"\n    }}>{`Map Capacity`}</h2>\n    <p>{`You can specify map capacity when created, but you can't use the `}<inlineCode parentName=\"p\">{`cap()`}</inlineCode>{` function on maps.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport (\n   \"fmt\"\n)\n\nfunc main() {\n   a := make([]int, 99)\n   fmt.Println(cap(a)) // 99\n\n   b := make(map[string]int, 99)\n   fmt.Println(len(b)) // 0\n   fmt.Println(cap(b)) // error: ./prog.go:12:17: invalid argument b (type map[string]int) for cap\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"string-cant-be-nil\"\n    }}>{`String can't be nil`}</h2>\n    <p>{`Fails:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nfunc main() {\n    var x string = nil //error\n\n    if x == nil { //error\n        x = \"default\"\n    }\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`/tmp/sandbox630560459/main.go:4: cannot use nil as type string in assignment\n/tmp/sandbox630560459/main.go:6: invalid operation: x == nil (mismatched types string and nil)`}</p>\n    </blockquote>\n    <p>{`Works:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nfunc main() {\n    var x string //defaults to \"\" (zero value)\n\n    if x == \"\" {\n        x = \"default\"\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"array-func-args\"\n    }}>{`Array Func Args`}</h2>\n    <p>{`If you are a C or C++ developer arrays for you are pointers. When you pass arrays to functions the functions reference the same memory location, so they can update the original data. Arrays in Go are values, so when you pass arrays to functions the functions get a copy of the original array data. This can be a problem if you are trying to update the array data.`}</p>\n    <p>{`Fails:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n    x := [3]int{1,2,3}\n\n    func(arr [3]int) {\n        arr[0] = 7\n        fmt.Println(arr) //prints [7 2 3]\n    }(x)\n\n    fmt.Println(x) //prints [1 2 3] (not ok if you need [7 2 3])\n}\n`}</code></pre>\n    <p>{`Works:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n    x := [3]int{1,2,3}\n\n    func(arr *[3]int) {\n        (*arr)[0] = 7\n        fmt.Println(arr) //prints &[7 2 3]\n    }(&x)\n\n    fmt.Println(x) //prints [7 2 3]\n}\n`}</code></pre>\n    <p>{`Another option is to use slices. Even though your function gets a copy of the slice variable it still references the original data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n    x := []int{1,2,3}\n\n    func(arr []int) {\n        arr[0] = 7\n        fmt.Println(arr) //prints [7 2 3]\n    }(x)\n\n    fmt.Println(x) //prints [7 2 3]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"unexpected-values-in-slice-and-array-range-clauses\"\n    }}>{`Unexpected Values in Slice and Array \"range\" Clauses`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/\"\n      }}>{`Continue`}</a></p>\n    <h2 {...{\n      \"id\": \"strings-are-immutable\"\n    }}>{`Strings Are Immutable`}</h2>\n    <p>{`Fails:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n    x := \"text\"\n    x[0] = 'T'\n\n    fmt.Println(x)\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`/tmp/sandbox305565531/main.go:7: cannot assign to x`}{`[0]`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-golang\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n    x := \"text\"\n    xbytes := []byte(x)\n    xbytes[0] = 'T'\n\n    fmt.Println(string(xbytes)) //prints Text\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}