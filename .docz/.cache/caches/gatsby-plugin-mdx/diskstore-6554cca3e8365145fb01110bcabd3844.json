{"expireTime":9007200852878472000,"key":"gatsby-plugin-mdx-entire-payload-2cb82f10ee5edac0b537be0a9ecf3da3-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Polynomial Expression","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":24,"offset":190},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":24,"offset":190},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Answer","position":{"start":{"line":10,"column":4,"offset":195},"end":{"line":10,"column":10,"offset":201},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":10,"column":10,"offset":201},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Not the answer:","position":{"start":{"line":12,"column":1,"offset":203},"end":{"line":12,"column":16,"offset":218},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":203},"end":{"line":12,"column":16,"offset":218},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function PolynomialExpansion(str) {\n  // multiply to polynomial expressions\n  const multiply = (a, b) => {\n    const variableA = a.match(/[a-zA-Z]\\^/i);\n    const [coefficientA, exponentA] = a.split(/[a-zA-Z]\\^/i);\n    const [coefficientB, exponentB] = b.split(/[a-zA-Z]\\^/i);\n\n    let newCoefficient;\n    if (coefficientA !== '' && coefficientB !== '') {\n      newCoefficient = parseInt(coefficientA) * parseInt(coefficientB);\n    } else if (coefficientA !== '') {\n      newCoefficient = parseInt(coefficientA);\n    } else {\n      newCoefficient = parseInt(coefficientB);\n    }\n\n    let newExponent;\n    if (exponentA !== '' && exponentB !== '') {\n      newExponent = parseInt(exponentA) + parseInt(exponentB);\n    } else if (exponentA !== '') {\n      newExponent = parseInt(exponentA);\n    } else {\n      newExponent = parseInt(exponentB);\n    }\n\n    return `${newCoefficient}${variableA ? variableA[0] : ''}${newExponent}`;\n  };\n\n  const matches = str.match(/\\(.*?\\)/gi);\n  if (!matches) {\n    return;\n  }\n\n  const [a, b] = matches.map(el => el.replace('(', '').replace(')', ''));\n  let firstEl = a.split(/[+-]/gi);\n  let secondEl = b.split(/[+-]/gi);\n\n  let resArr = [];\n  for (let i = 0; i < firstEl.length; i++) {\n    for (let j = 0; j < secondEl.length; j++) {\n      resArr.push(multiply(firstEl[i], secondEl[j]));\n    }\n  }\n\n  console.log(resArr);\n  // code goes here\n  return str;\n}\n\n// keep this function call here d\nconsole.log(PolynomialExpansion(readline()));","position":{"start":{"line":14,"column":1,"offset":220},"end":{"line":66,"column":4,"offset":1710},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":69,"column":1,"offset":1713},"end":{"line":69,"column":31,"offset":1743},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":69,"column":31,"offset":1743}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"polynomial-expression\"\n    }}>{`Polynomial Expression`}</h1>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <p>{`Not the answer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function PolynomialExpansion(str) {\n  // multiply to polynomial expressions\n  const multiply = (a, b) => {\n    const variableA = a.match(/[a-zA-Z]\\\\^/i);\n    const [coefficientA, exponentA] = a.split(/[a-zA-Z]\\\\^/i);\n    const [coefficientB, exponentB] = b.split(/[a-zA-Z]\\\\^/i);\n\n    let newCoefficient;\n    if (coefficientA !== '' && coefficientB !== '') {\n      newCoefficient = parseInt(coefficientA) * parseInt(coefficientB);\n    } else if (coefficientA !== '') {\n      newCoefficient = parseInt(coefficientA);\n    } else {\n      newCoefficient = parseInt(coefficientB);\n    }\n\n    let newExponent;\n    if (exponentA !== '' && exponentB !== '') {\n      newExponent = parseInt(exponentA) + parseInt(exponentB);\n    } else if (exponentA !== '') {\n      newExponent = parseInt(exponentA);\n    } else {\n      newExponent = parseInt(exponentB);\n    }\n\n    return \\`\\${newCoefficient}\\${variableA ? variableA[0] : ''}\\${newExponent}\\`;\n  };\n\n  const matches = str.match(/\\\\(.*?\\\\)/gi);\n  if (!matches) {\n    return;\n  }\n\n  const [a, b] = matches.map(el => el.replace('(', '').replace(')', ''));\n  let firstEl = a.split(/[+-]/gi);\n  let secondEl = b.split(/[+-]/gi);\n\n  let resArr = [];\n  for (let i = 0; i < firstEl.length; i++) {\n    for (let j = 0; j < secondEl.length; j++) {\n      resArr.push(multiply(firstEl[i], secondEl[j]));\n    }\n  }\n\n  console.log(resArr);\n  // code goes here\n  return str;\n}\n\n// keep this function call here d\nconsole.log(PolynomialExpansion(readline()));\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}