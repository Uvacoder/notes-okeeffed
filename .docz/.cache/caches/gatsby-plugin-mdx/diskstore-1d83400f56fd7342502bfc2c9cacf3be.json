{"expireTime":9007200867335903000,"key":"gatsby-plugin-mdx-entire-payload-b70a3daf2b00b7aa08b22c1ee6a861f9-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Redirection in Rust","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":22,"offset":188},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":22,"offset":188},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":193},"end":{"line":10,"column":13,"offset":202},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":190},"end":{"line":10,"column":13,"offset":202},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://docs.rs/nix/0.10.0/nix/unistd/fn.dup2.html","children":[{"type":"text","value":"nix::std","position":{"start":{"line":12,"column":5,"offset":208},"end":{"line":12,"column":13,"offset":216},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":207},"end":{"line":12,"column":66,"offset":269},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":207},"end":{"line":12,"column":66,"offset":269},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":204},"end":{"line":12,"column":66,"offset":269},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://multiformats.github.io/rust-multiaddr/libc/constant.STDIN_FILENO.html","children":[{"type":"text","value":"libc::STDIN_FILENO","position":{"start":{"line":13,"column":5,"offset":274},"end":{"line":13,"column":23,"offset":292},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":273},"end":{"line":13,"column":102,"offset":371},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":273},"end":{"line":13,"column":102,"offset":371},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":270},"end":{"line":13,"column":102,"offset":371},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":204},"end":{"line":13,"column":102,"offset":371},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Getting started","position":{"start":{"line":15,"column":4,"offset":376},"end":{"line":15,"column":19,"offset":391},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":373},"end":{"line":15,"column":19,"offset":391},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"cargo new rust-redirection\ncd rust-redirection","position":{"start":{"line":17,"column":1,"offset":393},"end":{"line":20,"column":4,"offset":448},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Reading a simple file","position":{"start":{"line":22,"column":4,"offset":453},"end":{"line":22,"column":25,"offset":474},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":450},"end":{"line":22,"column":25,"offset":474},"indent":[]}},{"type":"code","lang":"rust","meta":null,"value":"use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\nuse std::io::BufReader;\n\nfn main() -> io::Result<()> {\n    let file = File::open(\"foobar.txt\")?;\n    let mut buf_reader = BufReader::new(file);\n    let mut contents = String::new();\n    buf_reader.read_to_string(&mut contents)?;\n    assert_eq!(contents, \"foobar test\");\n    Ok(())\n}","position":{"start":{"line":24,"column":1,"offset":476},"end":{"line":38,"column":4,"offset":827},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using redirection","position":{"start":{"line":40,"column":4,"offset":832},"end":{"line":40,"column":21,"offset":849},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":829},"end":{"line":40,"column":21,"offset":849},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Converting fd from ","position":{"start":{"line":42,"column":1,"offset":851},"end":{"line":42,"column":20,"offset":870},"indent":[]}},{"type":"inlineCode","value":"usize","position":{"start":{"line":42,"column":20,"offset":870},"end":{"line":42,"column":27,"offset":877},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":42,"column":27,"offset":877},"end":{"line":42,"column":31,"offset":881},"indent":[]}},{"type":"inlineCode","value":"i32","position":{"start":{"line":42,"column":31,"offset":881},"end":{"line":42,"column":36,"offset":886},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":42,"column":36,"offset":886},"end":{"line":42,"column":37,"offset":887},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":851},"end":{"line":42,"column":37,"offset":887},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"cargo run\n   Compiling rust v0.1.0 (/Users/dennis.okeeffe/Project-Imposter/blog-repos/redirection/rust)\nerror[E0308]: mismatched types\n  --> src/main.rs:26:10\n   |\n26 |     dup2(fd, libc::STDIN_FILENO);\n   |          ^^ expected `i32`, found `usize`\n   |\nhelp: you can convert an `usize` to `i32` and panic if the converted value wouldn't fit\n   |\n26 |     dup2(fd.try_into().unwrap(), libc::STDIN_FILENO);","position":{"start":{"line":44,"column":1,"offset":889},"end":{"line":56,"column":4,"offset":1304},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":59,"column":1,"offset":1307},"end":{"line":59,"column":31,"offset":1337},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":59,"column":31,"offset":1337}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"redirection-in-rust\"\n    }}>{`Redirection in Rust`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.rs/nix/0.10.0/nix/unistd/fn.dup2.html\"\n        }}>{`nix::std`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"http://multiformats.github.io/rust-multiaddr/libc/constant.STDIN_FILENO.html\"\n        }}>{`libc::STDIN_FILENO`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting started`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`cargo new rust-redirection\ncd rust-redirection\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reading-a-simple-file\"\n    }}>{`Reading a simple file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\nuse std::io::BufReader;\n\nfn main() -> io::Result<()> {\n    let file = File::open(\"foobar.txt\")?;\n    let mut buf_reader = BufReader::new(file);\n    let mut contents = String::new();\n    buf_reader.read_to_string(&mut contents)?;\n    assert_eq!(contents, \"foobar test\");\n    Ok(())\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-redirection\"\n    }}>{`Using redirection`}</h2>\n    <p>{`Converting fd from `}<inlineCode parentName=\"p\">{`usize`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`i32`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`cargo run\n   Compiling rust v0.1.0 (/Users/dennis.okeeffe/Project-Imposter/blog-repos/redirection/rust)\nerror[E0308]: mismatched types\n  --> src/main.rs:26:10\n   |\n26 |     dup2(fd, libc::STDIN_FILENO);\n   |          ^^ expected \\`i32\\`, found \\`usize\\`\n   |\nhelp: you can convert an \\`usize\\` to \\`i32\\` and panic if the converted value wouldn't fit\n   |\n26 |     dup2(fd.try_into().unwrap(), libc::STDIN_FILENO);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}