{"expireTime":9007200852878464000,"key":"gatsby-plugin-mdx-entire-payload-e57f9ba2083ed55027eb4d91f52c603e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Lists and Adapters in Android","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":32,"offset":197},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":32,"offset":197},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"What is an adapter?","position":{"start":{"line":9,"column":3,"offset":201},"end":{"line":9,"column":22,"offset":220},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":199},"end":{"line":9,"column":24,"offset":222},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":199},"end":{"line":9,"column":24,"offset":222},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we have our data and a list view, we can then use an adapter to adapt data for the view.","position":{"start":{"line":11,"column":1,"offset":224},"end":{"line":11,"column":92,"offset":315},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":224},"end":{"line":11,"column":92,"offset":315},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Android provides a number of different adapters.","position":{"start":{"line":13,"column":1,"offset":317},"end":{"line":13,"column":49,"offset":365},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":317},"end":{"line":13,"column":49,"offset":365},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example with the ","position":{"start":{"line":15,"column":1,"offset":367},"end":{"line":15,"column":18,"offset":384},"indent":[]}},{"type":"inlineCode","value":"ArrayAdapter","position":{"start":{"line":15,"column":18,"offset":384},"end":{"line":15,"column":32,"offset":398},"indent":[]}},{"type":"text","value":", it is an extension of the ","position":{"start":{"line":15,"column":32,"offset":398},"end":{"line":15,"column":60,"offset":426},"indent":[]}},{"type":"inlineCode","value":"BaseAdapter","position":{"start":{"line":15,"column":60,"offset":426},"end":{"line":15,"column":73,"offset":439},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":15,"column":73,"offset":439},"end":{"line":15,"column":74,"offset":440},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":367},"end":{"line":15,"column":74,"offset":440},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Declaring a string adapter would be ","position":{"start":{"line":17,"column":1,"offset":442},"end":{"line":17,"column":37,"offset":478},"indent":[]}},{"type":"inlineCode","value":"ArrayAdapter<String>","position":{"start":{"line":17,"column":37,"offset":478},"end":{"line":17,"column":59,"offset":500},"indent":[]}},{"type":"text","value":" that can deal with generic types. We specify the type within the angle brackets.","position":{"start":{"line":17,"column":59,"offset":500},"end":{"line":17,"column":140,"offset":581},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":442},"end":{"line":17,"column":140,"offset":581},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"package teamtreehouse.com.stormy.ui;\n\nimport ...\n\nstatic class DailyForecastActivity extends ListActivity {\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_daily_forecast);\n\n\t\tString[] daysOfTheWeek = {\n\t\t\t\"Sunday\",\n\t\t\t\"Monday\",\n\t\t\t...\n\t\t}\n\t\tArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1,\n\t\t\tdaysOfTheWeek);\n\n\t\tsetListAdapter(adapter);\n\t}\n}","position":{"start":{"line":19,"column":1,"offset":583},"end":{"line":41,"column":4,"offset":1077},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":44,"column":1,"offset":1080},"end":{"line":44,"column":31,"offset":1110},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":44,"column":31,"offset":1110}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lists-and-adapters-in-android\"\n    }}>{`Lists and Adapters in Android`}</h1>\n    <p><strong parentName=\"p\">{`What is an adapter?`}</strong></p>\n    <p>{`If we have our data and a list view, we can then use an adapter to adapt data for the view.`}</p>\n    <p>{`Android provides a number of different adapters.`}</p>\n    <p>{`Example with the `}<inlineCode parentName=\"p\">{`ArrayAdapter`}</inlineCode>{`, it is an extension of the `}<inlineCode parentName=\"p\">{`BaseAdapter`}</inlineCode>{`.`}</p>\n    <p>{`Declaring a string adapter would be `}<inlineCode parentName=\"p\">{`ArrayAdapter<String>`}</inlineCode>{` that can deal with generic types. We specify the type within the angle brackets.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`package teamtreehouse.com.stormy.ui;\n\nimport ...\n\nstatic class DailyForecastActivity extends ListActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_daily_forecast);\n\n        String[] daysOfTheWeek = {\n            \"Sunday\",\n            \"Monday\",\n            ...\n        }\n        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1,\n            daysOfTheWeek);\n\n        setListAdapter(adapter);\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}