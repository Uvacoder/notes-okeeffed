{"expireTime":9007200852878444000,"key":"gatsby-plugin-mdx-entire-payload-bb825133630f6cbd14c318a3b02f337a-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Electron File Systems","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":24,"offset":190},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":24,"offset":190},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":195},"end":{"line":10,"column":13,"offset":204},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":10,"column":13,"offset":204},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/electron/electron/issues/7300","children":[{"type":"text","value":"window.require is not a function","position":{"start":{"line":12,"column":5,"offset":210},"end":{"line":12,"column":37,"offset":242},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":209},"end":{"line":12,"column":88,"offset":293},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":209},"end":{"line":12,"column":88,"offset":293},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":206},"end":{"line":12,"column":88,"offset":293},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.electronjs.org/docs/api/dialog#dialogshowopendialogbrowserwindow-options","children":[{"type":"text","value":"Dialog.showOpenDialog","position":{"start":{"line":13,"column":5,"offset":298},"end":{"line":13,"column":26,"offset":319},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":297},"end":{"line":13,"column":113,"offset":406},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":297},"end":{"line":13,"column":113,"offset":406},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":294},"end":{"line":13,"column":113,"offset":406},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://medium.com/@nornagon/electrons-remote-module-considered-harmful-70d69500f31","children":[{"type":"text","value":"Electron's remote module considered harmful","position":{"start":{"line":14,"column":5,"offset":411},"end":{"line":14,"column":48,"offset":454},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":410},"end":{"line":14,"column":134,"offset":540},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":410},"end":{"line":14,"column":134,"offset":540},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":407},"end":{"line":14,"column":134,"offset":540},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":206},"end":{"line":14,"column":134,"offset":540},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"tl;dr","position":{"start":{"line":16,"column":4,"offset":545},"end":{"line":16,"column":9,"offset":550},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":542},"end":{"line":16,"column":9,"offset":550},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Warning: the following uses ","position":{"start":{"line":18,"column":1,"offset":552},"end":{"line":18,"column":29,"offset":580},"indent":[]}},{"type":"inlineCode","value":"remote","position":{"start":{"line":18,"column":29,"offset":580},"end":{"line":18,"column":37,"offset":588},"indent":[]}},{"type":"text","value":" and is now considered harmful. See the ","position":{"start":{"line":18,"column":37,"offset":588},"end":{"line":18,"column":77,"offset":628},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@nornagon/electrons-remote-module-considered-harmful-70d69500f31","children":[{"type":"text","value":"article","position":{"start":{"line":18,"column":78,"offset":629},"end":{"line":18,"column":85,"offset":636},"indent":[]}}],"position":{"start":{"line":18,"column":77,"offset":628},"end":{"line":18,"column":171,"offset":722},"indent":[]}},{"type":"text","value":". Do not use unless you are certain on the why.","position":{"start":{"line":18,"column":171,"offset":722},"end":{"line":18,"column":218,"offset":769},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":552},"end":{"line":18,"column":218,"offset":769},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once the app is up, here is an example app for opening files:","position":{"start":{"line":20,"column":1,"offset":771},"end":{"line":20,"column":62,"offset":832},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":771},"end":{"line":20,"column":62,"offset":832},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import React, { useState } from 'react';\nconst fs = window.require('fs');\nconst electron = window.require('electron');\nconst { remote } = electron;\n\nconst App = () => {\n  const [filePath, setFilePath] = useState<string>();\n  const [fileJson, setFileJson] = useState<Record<string, any>>();\n  const [saved, setSaved] = useState<boolean>(false);\n\n  /**\n   * Look for any files called strings.json and grab the\n   * file path, read the data, update the data and set it\n   * to the `fileJson` variable.\n   *\n   */\n  const handleFileSelect = async () => {\n    const res = await remote.dialog.showOpenDialog({\n      properties: ['openFile'],\n      filters: [{ name: 'Base i18n file', extensions: ['strings.json'] }],\n    });\n\n    const [jsonPath] = res.filePaths;\n    if (jsonPath) {\n      const data = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));\n      setFilePath(jsonPath);\n      data.third = 'here';\n\n      setFileJson(data);\n    }\n  };\n\n  /**\n   * Write the file back and set the saved flag.\n   *\n   */\n  const handleSaveFile = () => {\n    if (filePath) {\n      fs.writeFileSync(filePath, JSON.stringify(fileJson), 'utf-8');\n      setSaved(true);\n    }\n  };\n\n  return (\n    <div>\n      {saved && <p>File saved!</p>}\n      <p>Open + save file</p>\n      <div>\n        <button onClick={handleFileSelect}>Open file</button>\n        <button onClick={handleSaveFile}>Save file</button>\n      </div>\n      <p>{JSON.stringify(fileJson)}</p>\n    </div>\n  );\n};\nexport default App;","position":{"start":{"line":22,"column":1,"offset":834},"end":{"line":79,"column":4,"offset":2325},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Debugging notes","position":{"start":{"line":81,"column":4,"offset":2330},"end":{"line":81,"column":19,"offset":2345},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2327},"end":{"line":81,"column":19,"offset":2345},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As for debugging, if you get ","position":{"start":{"line":83,"column":1,"offset":2347},"end":{"line":83,"column":30,"offset":2376},"indent":[]}},{"type":"inlineCode","value":"window.require is not a function","position":{"start":{"line":83,"column":30,"offset":2376},"end":{"line":83,"column":64,"offset":2410},"indent":[]}},{"type":"text","value":", then head to your Electron config file and update the ","position":{"start":{"line":83,"column":64,"offset":2410},"end":{"line":83,"column":120,"offset":2466},"indent":[]}},{"type":"inlineCode","value":"BrowserWindow","position":{"start":{"line":83,"column":120,"offset":2466},"end":{"line":83,"column":135,"offset":2481},"indent":[]}},{"type":"text","value":" config to include the web preferences:","position":{"start":{"line":83,"column":135,"offset":2481},"end":{"line":83,"column":174,"offset":2520},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2347},"end":{"line":83,"column":174,"offset":2520},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"mainWindow = new BrowserWindow({\n  width: 900,\n  height: 680,\n  webPreferences: {\n    nodeIntegration: true,\n  },\n});","position":{"start":{"line":85,"column":1,"offset":2522},"end":{"line":93,"column":4,"offset":2657},"indent":[1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":96,"column":1,"offset":2660},"end":{"line":96,"column":31,"offset":2690},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":96,"column":31,"offset":2690}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"electron-file-systems\"\n    }}>{`Electron File Systems`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/electron/electron/issues/7300\"\n        }}>{`window.require is not a function`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.electronjs.org/docs/api/dialog#dialogshowopendialogbrowserwindow-options\"\n        }}>{`Dialog.showOpenDialog`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://medium.com/@nornagon/electrons-remote-module-considered-harmful-70d69500f31\"\n        }}>{`Electron's remote module considered harmful`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`Warning: the following uses `}<inlineCode parentName=\"p\">{`remote`}</inlineCode>{` and is now considered harmful. See the `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@nornagon/electrons-remote-module-considered-harmful-70d69500f31\"\n      }}>{`article`}</a>{`. Do not use unless you are certain on the why.`}</p>\n    <p>{`Once the app is up, here is an example app for opening files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { useState } from 'react';\nconst fs = window.require('fs');\nconst electron = window.require('electron');\nconst { remote } = electron;\n\nconst App = () => {\n  const [filePath, setFilePath] = useState<string>();\n  const [fileJson, setFileJson] = useState<Record<string, any>>();\n  const [saved, setSaved] = useState<boolean>(false);\n\n  /**\n   * Look for any files called strings.json and grab the\n   * file path, read the data, update the data and set it\n   * to the \\`fileJson\\` variable.\n   *\n   */\n  const handleFileSelect = async () => {\n    const res = await remote.dialog.showOpenDialog({\n      properties: ['openFile'],\n      filters: [{ name: 'Base i18n file', extensions: ['strings.json'] }],\n    });\n\n    const [jsonPath] = res.filePaths;\n    if (jsonPath) {\n      const data = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));\n      setFilePath(jsonPath);\n      data.third = 'here';\n\n      setFileJson(data);\n    }\n  };\n\n  /**\n   * Write the file back and set the saved flag.\n   *\n   */\n  const handleSaveFile = () => {\n    if (filePath) {\n      fs.writeFileSync(filePath, JSON.stringify(fileJson), 'utf-8');\n      setSaved(true);\n    }\n  };\n\n  return (\n    <div>\n      {saved && <p>File saved!</p>}\n      <p>Open + save file</p>\n      <div>\n        <button onClick={handleFileSelect}>Open file</button>\n        <button onClick={handleSaveFile}>Save file</button>\n      </div>\n      <p>{JSON.stringify(fileJson)}</p>\n    </div>\n  );\n};\nexport default App;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"debugging-notes\"\n    }}>{`Debugging notes`}</h2>\n    <p>{`As for debugging, if you get `}<inlineCode parentName=\"p\">{`window.require is not a function`}</inlineCode>{`, then head to your Electron config file and update the `}<inlineCode parentName=\"p\">{`BrowserWindow`}</inlineCode>{` config to include the web preferences:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`mainWindow = new BrowserWindow({\n  width: 900,\n  height: 680,\n  webPreferences: {\n    nodeIntegration: true,\n  },\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}