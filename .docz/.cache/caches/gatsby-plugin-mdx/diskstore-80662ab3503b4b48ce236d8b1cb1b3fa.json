{"expireTime":9007200848610903000,"key":"gatsby-plugin-mdx-entire-payload-e3d6aab0076dd4277b41ab978318ed9b-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Testing with Enzyme","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":22,"offset":187},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":22,"offset":187},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"React components allow unit tests in JS to be much easier.","position":{"start":{"line":9,"column":1,"offset":189},"end":{"line":9,"column":59,"offset":247},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":189},"end":{"line":9,"column":59,"offset":247},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These exampes require ","position":{"start":{"line":11,"column":1,"offset":249},"end":{"line":11,"column":23,"offset":271},"indent":[]}},{"type":"inlineCode","value":"sinonjs","position":{"start":{"line":11,"column":23,"offset":271},"end":{"line":11,"column":32,"offset":280},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":11,"column":32,"offset":280},"end":{"line":11,"column":34,"offset":282},"indent":[]}},{"type":"inlineCode","value":"jsdom","position":{"start":{"line":11,"column":34,"offset":282},"end":{"line":11,"column":41,"offset":289},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":11,"column":41,"offset":289},"end":{"line":11,"column":43,"offset":291},"indent":[]}},{"type":"inlineCode","value":"enzyme","position":{"start":{"line":11,"column":43,"offset":291},"end":{"line":11,"column":51,"offset":299},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":11,"column":51,"offset":299},"end":{"line":11,"column":53,"offset":301},"indent":[]}},{"type":"inlineCode","value":"mocha","position":{"start":{"line":11,"column":53,"offset":301},"end":{"line":11,"column":60,"offset":308},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":11,"column":60,"offset":308},"end":{"line":11,"column":62,"offset":310},"indent":[]}},{"type":"inlineCode","value":"chai","position":{"start":{"line":11,"column":62,"offset":310},"end":{"line":11,"column":68,"offset":316},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":249},"end":{"line":11,"column":68,"offset":316},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These are examples of the three APIs that you get with Enzyme. Remember, that a majority of the test cases will need ","position":{"start":{"line":13,"column":1,"offset":318},"end":{"line":13,"column":118,"offset":435},"indent":[]}},{"type":"inlineCode","value":"shallow","position":{"start":{"line":13,"column":118,"offset":435},"end":{"line":13,"column":127,"offset":444},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":13,"column":127,"offset":444},"end":{"line":13,"column":128,"offset":445},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":318},"end":{"line":13,"column":128,"offset":445},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Testing lifecycle events, use ","position":{"start":{"line":15,"column":1,"offset":447},"end":{"line":15,"column":31,"offset":477},"indent":[]}},{"type":"inlineCode","value":"mount","position":{"start":{"line":15,"column":31,"offset":477},"end":{"line":15,"column":38,"offset":484},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":15,"column":38,"offset":484},"end":{"line":15,"column":39,"offset":485},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":447},"end":{"line":15,"column":39,"offset":485},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you need to test a component that gets rendered or returns just HTML, you can use ","position":{"start":{"line":17,"column":1,"offset":487},"end":{"line":17,"column":86,"offset":572},"indent":[]}},{"type":"inlineCode","value":"render","position":{"start":{"line":17,"column":86,"offset":572},"end":{"line":17,"column":94,"offset":580},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":17,"column":94,"offset":580},"end":{"line":17,"column":95,"offset":581},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":487},"end":{"line":17,"column":95,"offset":581},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"File structure","position":{"start":{"line":19,"column":2,"offset":584},"end":{"line":19,"column":16,"offset":598},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":583},"end":{"line":19,"column":17,"offset":599},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":583},"end":{"line":19,"column":17,"offset":599},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"test\n\t\t- repository_test.spec.js\n\t\t- github_widget.spec.js\n\t\t- user_image.spec.js","position":{"start":{"line":21,"column":3,"offset":603},"end":{"line":24,"column":22,"offset":681},"indent":[0,0,0]}}],"position":{"start":{"line":21,"column":3,"offset":603},"end":{"line":24,"column":22,"offset":681},"indent":[0,0,0]}}],"position":{"start":{"line":21,"column":1,"offset":601},"end":{"line":24,"column":22,"offset":681},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"scripts\n\t\t- mocha_runner.js","position":{"start":{"line":25,"column":3,"offset":684},"end":{"line":26,"column":19,"offset":710},"indent":[0]}}],"position":{"start":{"line":25,"column":3,"offset":684},"end":{"line":26,"column":19,"offset":710},"indent":[0]}}],"position":{"start":{"line":25,"column":1,"offset":682},"end":{"line":26,"column":19,"offset":710},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"package.json","position":{"start":{"line":27,"column":3,"offset":713},"end":{"line":27,"column":15,"offset":725},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":713},"end":{"line":27,"column":15,"offset":725},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":711},"end":{"line":27,"column":15,"offset":725},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"src\n\t\t- components\n\t\t\t- repositories.js","position":{"start":{"line":28,"column":3,"offset":728},"end":{"line":30,"column":20,"offset":765},"indent":[0,0]}}],"position":{"start":{"line":28,"column":3,"offset":728},"end":{"line":30,"column":20,"offset":765},"indent":[0,0]}}],"position":{"start":{"line":28,"column":1,"offset":726},"end":{"line":30,"column":20,"offset":765},"indent":[1,1]}}],"position":{"start":{"line":21,"column":1,"offset":601},"end":{"line":30,"column":20,"offset":765},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"ENZ-1: Testing with \"Shallow\"","position":{"start":{"line":32,"column":4,"offset":770},"end":{"line":32,"column":33,"offset":799},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":767},"end":{"line":32,"column":33,"offset":799},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// package.json\n...\n\nNote: the --debug flag allows us to use the debugger statements and interact with the debugger through the command line\n\nNote: There is also a `node-intercept` that allows you to tap into Chrome Dev tools\n\n\"scripts\": {\n\t...\n\t\"test\": \"mocha --debug --require scripts/mocha_runner.js ./test/**/*.spec.js\",\n\t...\n}\n...\n","position":{"start":{"line":34,"column":1,"offset":801},"end":{"line":49,"column":4,"offset":1145},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"// reposity_test.js\nimport React from 'react-native';\nimport { shallow } from 'enzyme';\nimport { expect } from 'chai';\n\n// import a component\nimport Repositories from '../src/components/repositories';\n\ndescribe('<Repositories />', () => {\n\tit('should render one number of repos specified by top prop', () => {\n\t\tconst wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\t\texpect(wrapper.find(Repository)).to.have.length(2);\n\t});\n\n\tit('should display repos ordered by stargazers' () => {\n\t\tconst sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n\t\tconst wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n\t\t// find each child <Repository /> with <Repositories />\n\t\tconst topRepos = wrapper.find(Repository);\n\n\t\t// for each <Repository /> found, test out correct values\n\t\ttopRepos.forEach((repo, index) => {\n\t\t\texpect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n\t\t\texpect(repo.prop('name')).to.equal(sortedTestData[index].name);\n\t\t\texpect(repo.prop('language')).to.equal(sortedTestData[index].language);\n\t\t\texpect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n\t\t});\n\t});\n});","position":{"start":{"line":51,"column":1,"offset":1147},"end":{"line":82,"column":4,"offset":2311},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"ENZ-2: Testing with \"Mount\"","position":{"start":{"line":84,"column":4,"offset":2316},"end":{"line":84,"column":31,"offset":2343},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2313},"end":{"line":84,"column":31,"offset":2343},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This requires use of ","position":{"start":{"line":86,"column":1,"offset":2345},"end":{"line":86,"column":22,"offset":2366},"indent":[]}},{"type":"inlineCode","value":"js-dom","position":{"start":{"line":86,"column":22,"offset":2366},"end":{"line":86,"column":30,"offset":2374},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":2345},"end":{"line":86,"column":30,"offset":2374},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// mocha_runner.js\n\nvar jsdom = require('jsdom').jsdom;\n\nvar exposedProperties = ['window', 'navigator', 'document'];\n\nglobal.document = jsdom('');\nglobal.window = document.defaultView;\nObject.keys(document.defaultView).forEach((property) => {\n\tif (typeof global[property] === 'undefined') {\n\t\texposedProperties.push(property);\n\t\tglobal[property] = document.defaultView[property];\n\t}\n});\n\nglobal.navigator = {\n\tuserAgent: 'node.js'\n};\n\ndocumentRef = document;\n\nrequire('babel-core/register');","position":{"start":{"line":88,"column":1,"offset":2376},"end":{"line":111,"column":4,"offset":2876},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"// github_widget.spec.js\nimport React from 'react-native';\nimport { mount } from 'enzyme';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\n// js dom has also been used as an example for these headless browser testing\n\n// import a component\nimport GithubWidget from '../src/components/GithubWidget';\nimport UserDetails from ...\n// import all the other components\n// found in the expect below\n...\n\ndescribe('<GithubWidget />', () => {\n\tit('should render all sub-components', () => {\n\t\tconst wrapper = mount(<GithubWidget username=\"test\" />);\n\t\t\n\t\texpect(wrapper.containsAllMatchingElements([\n\t\t\t<UserDetails />,\n\t\t\t<UserStats />,\n\t\t\t<hr />,\n\t\t\t<Repositories />,\n\t\t\t<Footer />\n\t\t])).to.equal(true);\n\t});\n\n\tit('should display repos ordered by stargazers' () => {\n\t\tconst sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n\t\tconst wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n\t\t// find each child <Repository /> with <Repositories />\n\t\tconst topRepos = wrapper.find(Repository);\n\n\t\t// for each <Repository /> found, test out correct values\n\t\ttopRepos.forEach((repo, index) => {\n\t\t\texpect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n\t\t\texpect(repo.prop('name')).to.equal(sortedTestData[index].name);\n\t\t\texpect(repo.prop('language')).to.equal(sortedTestData[index].language);\n\t\t\texpect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n\t\t});\n\t});\n\n\tit('should call componentDidMount once' () => {\n\t\t// create a spy\n\t\tsinon.spy(GithubWidget.prototype, 'componentDidMount');\n\t\tmount(<GithubWidget username =\"test />\");\n\t\texpect(GithubWidget.prototype.componentDidMount.calledOnce).to.equal(true);\n\t});\n});","position":{"start":{"line":113,"column":1,"offset":2878},"end":{"line":165,"column":4,"offset":4564},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"ENZ-3: Testing with \"Render\"","position":{"start":{"line":167,"column":4,"offset":4569},"end":{"line":167,"column":32,"offset":4597},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":4566},"end":{"line":167,"column":32,"offset":4597},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// user_image.spec.js\nimport React from 'react-native';\nimport { render } from 'enzyme';\nimport { expect } from 'chai';\n\n// Component\nimport UserImage from './UserImage';\n\ndescribe('<UserImage />', () => {\n\tit('should have a <div /> element with .gh-widget-photo class', () => {\n\t\tconst wrapper = render(<UserImage />);\n\t\texpect(wrapper.find('div').attr('class')).to.equal('gh-widget-photo');\n\t});\n});","position":{"start":{"line":169,"column":1,"offset":4599},"end":{"line":184,"column":4,"offset":5008},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":186,"column":1,"offset":5010},"end":{"line":186,"column":31,"offset":5040},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":186,"column":31,"offset":5040}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"testing-with-enzyme\"\n    }}>{`Testing with Enzyme`}</h1>\n    <p>{`React components allow unit tests in JS to be much easier.`}</p>\n    <p>{`These exampes require `}<inlineCode parentName=\"p\">{`sinonjs`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`jsdom`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`enzyme`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`mocha`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`chai`}</inlineCode></p>\n    <p>{`These are examples of the three APIs that you get with Enzyme. Remember, that a majority of the test cases will need `}<inlineCode parentName=\"p\">{`shallow`}</inlineCode>{`.`}</p>\n    <p>{`Testing lifecycle events, use `}<inlineCode parentName=\"p\">{`mount`}</inlineCode>{`.`}</p>\n    <p>{`If you need to test a component that gets rendered or returns just HTML, you can use `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{`.`}</p>\n    <p><em parentName=\"p\">{`File structure`}</em></p>\n    <ul>\n      <li parentName=\"ul\">{`test\n- repository_test.spec.js\n- github_widget.spec.js\n- user_image.spec.js`}</li>\n      <li parentName=\"ul\">{`scripts\n- mocha_runner.js`}</li>\n      <li parentName=\"ul\">{`package.json`}</li>\n      <li parentName=\"ul\">{`src\n- components\n- repositories.js`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"enz-1-testing-with-shallow\"\n    }}>{`ENZ-1: Testing with \"Shallow\"`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// package.json\n...\n\nNote: the --debug flag allows us to use the debugger statements and interact with the debugger through the command line\n\nNote: There is also a \\`node-intercept\\` that allows you to tap into Chrome Dev tools\n\n\"scripts\": {\n    ...\n    \"test\": \"mocha --debug --require scripts/mocha_runner.js ./test/**/*.spec.js\",\n    ...\n}\n...\n\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`// reposity_test.js\nimport React from 'react-native';\nimport { shallow } from 'enzyme';\nimport { expect } from 'chai';\n\n// import a component\nimport Repositories from '../src/components/repositories';\n\ndescribe('<Repositories />', () => {\n    it('should render one number of repos specified by top prop', () => {\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n        expect(wrapper.find(Repository)).to.have.length(2);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enz-2-testing-with-mount\"\n    }}>{`ENZ-2: Testing with \"Mount\"`}</h2>\n    <p>{`This requires use of `}<inlineCode parentName=\"p\">{`js-dom`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`// mocha_runner.js\n\nvar jsdom = require('jsdom').jsdom;\n\nvar exposedProperties = ['window', 'navigator', 'document'];\n\nglobal.document = jsdom('');\nglobal.window = document.defaultView;\nObject.keys(document.defaultView).forEach((property) => {\n    if (typeof global[property] === 'undefined') {\n        exposedProperties.push(property);\n        global[property] = document.defaultView[property];\n    }\n});\n\nglobal.navigator = {\n    userAgent: 'node.js'\n};\n\ndocumentRef = document;\n\nrequire('babel-core/register');\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`// github_widget.spec.js\nimport React from 'react-native';\nimport { mount } from 'enzyme';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\n// js dom has also been used as an example for these headless browser testing\n\n// import a component\nimport GithubWidget from '../src/components/GithubWidget';\nimport UserDetails from ...\n// import all the other components\n// found in the expect below\n...\n\ndescribe('<GithubWidget />', () => {\n    it('should render all sub-components', () => {\n        const wrapper = mount(<GithubWidget username=\"test\" />);\n        \n        expect(wrapper.containsAllMatchingElements([\n            <UserDetails />,\n            <UserStats />,\n            <hr />,\n            <Repositories />,\n            <Footer />\n        ])).to.equal(true);\n    });\n\n    it('should display repos ordered by stargazers' () => {\n        const sortedTestData = repos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n        const wrapper = shallow(<Repositories repositories={repos} top={2} />);\n\n        // find each child <Repository /> with <Repositories />\n        const topRepos = wrapper.find(Repository);\n\n        // for each <Repository /> found, test out correct values\n        topRepos.forEach((repo, index) => {\n            expect(repo.prop('url')).to.equal(sortedTestData[index.url]);\n            expect(repo.prop('name')).to.equal(sortedTestData[index].name);\n            expect(repo.prop('language')).to.equal(sortedTestData[index].language);\n            expect(repo.prop('stars')).to.equal(sortedTestData[index].stars);\n        });\n    });\n\n    it('should call componentDidMount once' () => {\n        // create a spy\n        sinon.spy(GithubWidget.prototype, 'componentDidMount');\n        mount(<GithubWidget username =\"test />\");\n        expect(GithubWidget.prototype.componentDidMount.calledOnce).to.equal(true);\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enz-3-testing-with-render\"\n    }}>{`ENZ-3: Testing with \"Render\"`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// user_image.spec.js\nimport React from 'react-native';\nimport { render } from 'enzyme';\nimport { expect } from 'chai';\n\n// Component\nimport UserImage from './UserImage';\n\ndescribe('<UserImage />', () => {\n    it('should have a <div /> element with .gh-widget-photo class', () => {\n        const wrapper = render(<UserImage />);\n        expect(wrapper.find('div').attr('class')).to.equal('gh-widget-photo');\n    });\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}