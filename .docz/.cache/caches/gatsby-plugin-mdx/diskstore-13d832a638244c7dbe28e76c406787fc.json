{"expireTime":9007200849425486000,"key":"gatsby-plugin-mdx-entire-payload-3a233f7c81af8ec3939953c4a424a78e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"npm help sheet","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":17,"offset":182},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":17,"offset":182},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"install npm dependencies","position":{"start":{"line":9,"column":4,"offset":187},"end":{"line":9,"column":28,"offset":211},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":184},"end":{"line":9,"column":28,"offset":211},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"npm install","position":{"start":{"line":11,"column":1,"offset":213},"end":{"line":13,"column":4,"offset":232},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"USEFUL NPM DEPENDENCIES","position":{"start":{"line":15,"column":4,"offset":237},"end":{"line":15,"column":27,"offset":260},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":234},"end":{"line":15,"column":27,"offset":260},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"MONGOOSE - database helper for MongoDB","position":{"start":{"line":17,"column":6,"offset":267},"end":{"line":17,"column":44,"offset":305},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":262},"end":{"line":17,"column":44,"offset":305},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"npm install --save mongoose\n\nmongod // starts the daemon\nmongo // check out the documents","position":{"start":{"line":19,"column":1,"offset":307},"end":{"line":24,"column":4,"offset":404},"indent":[1,1,1,1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"var User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n\n// in app.js\nvar User = require('../models/user');","position":{"start":{"line":27,"column":1,"offset":407},"end":{"line":33,"column":4,"offset":546},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"BCRYPT - used for hashing and salting","position":{"start":{"line":35,"column":6,"offset":553},"end":{"line":35,"column":43,"offset":590},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":548},"end":{"line":35,"column":43,"offset":590},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"npm install --save bcrypt","position":{"start":{"line":37,"column":1,"offset":592},"end":{"line":39,"column":4,"offset":625},"indent":[1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"// in User.js\nvar bcrypt = require('bcrypt');\nUserSchema.pre('save', function(next) {\n\tvar user = this;\n\tbcrypt.hash(user.password, 10, function(err, hash) {\n\t\tif (err) {\n\t\t\treturn next(err);\n\t\t}\n\t\tuser.password = hash;\n\t\tnext();\n\t})\n});\n\nUserSchema.statics.authenticate = function(email, password, callback) {\n\tUser.findOne({ email: email })\n\t\t.exec(function (error, user) {\n\t\t\tif (error) {\n\t\t\t\treturn callback(error);\n\t\t\t} else if (!user) {\n\t\t\t\tvar err = new Error('User not found.');\n\t\t\t\terr.status = 401;\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t\tbcrypt.compare(password, user.password, function (error, result) {\n\t\t\t\tif (result === true) {\n\t\t\t\t\treturn callback(null, user);\n\t\t\t\t} else {\n\t\t\t\t\treturn callback();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n}\n\n// Example in app.js for Express\n\nrouter.post('/login', function(req, res, next) {\n\tif (req.body.email && req.body.password) {\n\t\tUser.authenticate(req.body.email, req.body.password, function (error, user) {\n\t\t\tif (error || !user) {\n\t\t\t\tvar err = new Error('Wrong email or password.');\n\t\t\t\terr.status = 401;\n\t\t\t\treturn next(err);\n\t\t\t} else {\n\t\t\t\treq.session.userId = user._id;\n\t\t\t\treturn res.redirect('/profile');\n\t\t\t}\n\t\t});\n\t} else {\n\t\tvar err = new Error('Email and password are required.');\n\t\terr.status = 401;\n\t\treturn next(err);\n\t}\n});","position":{"start":{"line":41,"column":1,"offset":627},"end":{"line":95,"column":4,"offset":1914},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"EXPRESS SESSION - save sessions to use throughout the website","position":{"start":{"line":98,"column":6,"offset":1922},"end":{"line":98,"column":67,"offset":1983},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":1917},"end":{"line":98,"column":67,"offset":1983},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"npm install express-session --save","position":{"start":{"line":100,"column":1,"offset":1985},"end":{"line":102,"column":4,"offset":2027},"indent":[1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"// in app.js\n\nvar session = require('express-session');\n\n// use sessions for tracking logins - check more in the readme\napp.use(session({\n\tsecret: 'treehouse loves you',\n\tresave: true,\n\tsaveUninitialized: false\n}));\n\n// not useful when in production. check https://github.com/expressjs/session#compatible-session-stores","position":{"start":{"line":104,"column":1,"offset":2029},"end":{"line":117,"column":4,"offset":2366},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"CONNECT-MONGO - used for quick middleware access to Mongo","position":{"start":{"line":119,"column":6,"offset":2373},"end":{"line":119,"column":63,"offset":2430},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":2368},"end":{"line":119,"column":63,"offset":2430},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"connect-mongo is a middleware already written for us!","position":{"start":{"line":121,"column":1,"offset":2432},"end":{"line":121,"column":54,"offset":2485},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2432},"end":{"line":121,"column":54,"offset":2485},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"npm install connect-mongo --save","position":{"start":{"line":123,"column":1,"offset":2487},"end":{"line":125,"column":4,"offset":2527},"indent":[1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"require MongoStore = require('connect-mongo')(session);\n\n// in app.js\n\napp.use(session({\n\tsecret: 'treehouse loves you',\n\tresave: true,\n\tsaveUninitialized: false\n\tstore: new MongoStore({\n\t\tmongooseConnection: db\n\t})\n}));","position":{"start":{"line":127,"column":1,"offset":2529},"end":{"line":140,"column":4,"offset":2767},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":143,"column":1,"offset":2770},"end":{"line":143,"column":31,"offset":2800},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":143,"column":31,"offset":2800}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"npm-help-sheet\"\n    }}>{`npm help sheet`}</h1>\n    <h2 {...{\n      \"id\": \"install-npm-dependencies\"\n    }}>{`install npm dependencies`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"useful-npm-dependencies\"\n    }}>{`USEFUL NPM DEPENDENCIES`}</h2>\n    <h4 {...{\n      \"id\": \"mongoose---database-helper-for-mongodb\"\n    }}>{`MONGOOSE - database helper for MongoDB`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install --save mongoose\n\nmongod // starts the daemon\nmongo // check out the documents\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n\n// in app.js\nvar User = require('../models/user');\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"bcrypt---used-for-hashing-and-salting\"\n    }}>{`BCRYPT - used for hashing and salting`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install --save bcrypt\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// in User.js\nvar bcrypt = require('bcrypt');\nUserSchema.pre('save', function(next) {\n    var user = this;\n    bcrypt.hash(user.password, 10, function(err, hash) {\n        if (err) {\n            return next(err);\n        }\n        user.password = hash;\n        next();\n    })\n});\n\nUserSchema.statics.authenticate = function(email, password, callback) {\n    User.findOne({ email: email })\n        .exec(function (error, user) {\n            if (error) {\n                return callback(error);\n            } else if (!user) {\n                var err = new Error('User not found.');\n                err.status = 401;\n                return callback(err);\n            }\n            bcrypt.compare(password, user.password, function (error, result) {\n                if (result === true) {\n                    return callback(null, user);\n                } else {\n                    return callback();\n                }\n            });\n        });\n}\n\n// Example in app.js for Express\n\nrouter.post('/login', function(req, res, next) {\n    if (req.body.email && req.body.password) {\n        User.authenticate(req.body.email, req.body.password, function (error, user) {\n            if (error || !user) {\n                var err = new Error('Wrong email or password.');\n                err.status = 401;\n                return next(err);\n            } else {\n                req.session.userId = user._id;\n                return res.redirect('/profile');\n            }\n        });\n    } else {\n        var err = new Error('Email and password are required.');\n        err.status = 401;\n        return next(err);\n    }\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"express-session---save-sessions-to-use-throughout-the-website\"\n    }}>{`EXPRESS SESSION - save sessions to use throughout the website`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install express-session --save\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// in app.js\n\nvar session = require('express-session');\n\n// use sessions for tracking logins - check more in the readme\napp.use(session({\n    secret: 'treehouse loves you',\n    resave: true,\n    saveUninitialized: false\n}));\n\n// not useful when in production. check https://github.com/expressjs/session#compatible-session-stores\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"connect-mongo---used-for-quick-middleware-access-to-mongo\"\n    }}>{`CONNECT-MONGO - used for quick middleware access to Mongo`}</h4>\n    <p>{`connect-mongo is a middleware already written for us!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install connect-mongo --save\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`require MongoStore = require('connect-mongo')(session);\n\n// in app.js\n\napp.use(session({\n    secret: 'treehouse loves you',\n    resave: true,\n    saveUninitialized: false\n    store: new MongoStore({\n        mongooseConnection: db\n    })\n}));\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}