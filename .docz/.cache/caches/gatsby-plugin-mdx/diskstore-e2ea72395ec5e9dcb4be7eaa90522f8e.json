{"expireTime":9007200849425599000,"key":"gatsby-plugin-mdx-entire-payload-f8ffcf569b3c4d6975c8482fee87ad1a-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"ANZ Algo","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":11,"offset":177},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":11,"offset":177},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Answer","position":{"start":{"line":10,"column":4,"offset":182},"end":{"line":10,"column":10,"offset":188},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":179},"end":{"line":10,"column":10,"offset":188},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"/*\n * Complete the 'frequencyCount' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts STRING s as parameter.\n */\n\nfunction frequencyCount(s) {\n  // Write your code here\n  // set final hashmap\n  let finalArray = new Array(26).fill(0);\n  // simple alphabet for final arr\n  // let alpha = 'abcdefghijklmnopqrstuvwxyz'\n\n  // iterate through encoded string and regex test\n  // the follow letters to understand what encoding is\n  // but be careful not to follow through with full length\n  // based on encoding rules\n\n  while (s.length > 0) {\n    let curSlice = '';\n    let encoding = 0;\n\n    // check encoding type\n    if (\n      s.length > 2 &&\n      s[0] === '2' &&\n      /[0123456]/gi.test(s[1]) &&\n      /&/gi.test(s[2])\n    ) {\n      // check amp option\n      curSlice = `${s[0]}${s[1]}${s[2]}`;\n      s = s.slice(3);\n      encoding = 2;\n    } else if (s.length > 1 && /#/gi.test(s[1])) {\n      // handle hash option\n      curSlice = `${s[0]}${s[1]}`;\n      s = s.slice(2);\n      encoding = 1;\n    } else if (/[0-9]/gi.test(s[0])) {\n      // check base number\n      curSlice = s[0];\n      s = s.slice(1);\n    } else {\n      // log for debugging\n      console.log('This case should not happen', s[0]);\n      s.slice(1);\n    }\n\n    // check if repeated\n    let multi = '';\n    if (s[0] === '[') {\n      // base remove [\n      s = s.slice(1);\n      // find matching ]\n      let found = false;\n      let i = 1;\n      while (!found) {\n        if (s.length === 0) {\n          // safety\n          found = true;\n        } else if (s[0] !== ']') {\n          // keep adding numbers until ] found\n          multi += s[0];\n          s = s.slice(1);\n        } else {\n          found = true;\n          s = s.slice(1);\n        }\n      }\n    }\n\n    // handle multi case\n    if (multi !== '') {\n      multi = parseInt(multi);\n    } else {\n      multi = 1;\n    }\n\n    // find letter and push to map\n    switch (encoding) {\n      case 0:\n        const baseIndex = parseInt(curSlice);\n        finalArray[baseIndex - 1] += multi;\n        break;\n      case 1:\n        const hashIndex = parseInt(curSlice[0]) + 10;\n        finalArray[hashIndex - 1] += multi;\n        break;\n      case 2:\n        const ampIndex = parseInt(`${curSlice[0]}${curSlice[1]}`);\n        finalArray[ampIndex - 1] += multi;\n        break;\n      default:\n        console.error('Encoder failed to handle cases');\n    }\n  }\n\n  return finalArray;\n}","position":{"start":{"line":12,"column":1,"offset":190},"end":{"line":113,"column":4,"offset":2651},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":116,"column":1,"offset":2654},"end":{"line":116,"column":31,"offset":2684},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":116,"column":31,"offset":2684}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"anz-algo\"\n    }}>{`ANZ Algo`}</h1>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/*\n * Complete the 'frequencyCount' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts STRING s as parameter.\n */\n\nfunction frequencyCount(s) {\n  // Write your code here\n  // set final hashmap\n  let finalArray = new Array(26).fill(0);\n  // simple alphabet for final arr\n  // let alpha = 'abcdefghijklmnopqrstuvwxyz'\n\n  // iterate through encoded string and regex test\n  // the follow letters to understand what encoding is\n  // but be careful not to follow through with full length\n  // based on encoding rules\n\n  while (s.length > 0) {\n    let curSlice = '';\n    let encoding = 0;\n\n    // check encoding type\n    if (\n      s.length > 2 &&\n      s[0] === '2' &&\n      /[0123456]/gi.test(s[1]) &&\n      /&/gi.test(s[2])\n    ) {\n      // check amp option\n      curSlice = \\`\\${s[0]}\\${s[1]}\\${s[2]}\\`;\n      s = s.slice(3);\n      encoding = 2;\n    } else if (s.length > 1 && /#/gi.test(s[1])) {\n      // handle hash option\n      curSlice = \\`\\${s[0]}\\${s[1]}\\`;\n      s = s.slice(2);\n      encoding = 1;\n    } else if (/[0-9]/gi.test(s[0])) {\n      // check base number\n      curSlice = s[0];\n      s = s.slice(1);\n    } else {\n      // log for debugging\n      console.log('This case should not happen', s[0]);\n      s.slice(1);\n    }\n\n    // check if repeated\n    let multi = '';\n    if (s[0] === '[') {\n      // base remove [\n      s = s.slice(1);\n      // find matching ]\n      let found = false;\n      let i = 1;\n      while (!found) {\n        if (s.length === 0) {\n          // safety\n          found = true;\n        } else if (s[0] !== ']') {\n          // keep adding numbers until ] found\n          multi += s[0];\n          s = s.slice(1);\n        } else {\n          found = true;\n          s = s.slice(1);\n        }\n      }\n    }\n\n    // handle multi case\n    if (multi !== '') {\n      multi = parseInt(multi);\n    } else {\n      multi = 1;\n    }\n\n    // find letter and push to map\n    switch (encoding) {\n      case 0:\n        const baseIndex = parseInt(curSlice);\n        finalArray[baseIndex - 1] += multi;\n        break;\n      case 1:\n        const hashIndex = parseInt(curSlice[0]) + 10;\n        finalArray[hashIndex - 1] += multi;\n        break;\n      case 2:\n        const ampIndex = parseInt(\\`\\${curSlice[0]}\\${curSlice[1]}\\`);\n        finalArray[ampIndex - 1] += multi;\n        break;\n      default:\n        console.error('Encoder failed to handle cases');\n    }\n  }\n\n  return finalArray;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}