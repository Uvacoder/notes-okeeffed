{"expireTime":9007200852878358000,"key":"gatsby-plugin-mdx-entire-payload-1228699ff1cb4402d04439774b7071c1-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Swift 3 Protocols","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":20,"offset":185},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":20,"offset":185},"indent":[]}},{"type":"jsx","value":"<!-- TOC -->","position":{"start":{"line":9,"column":1,"offset":187},"end":{"line":9,"column":13,"offset":199},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#swift-3-protocols","children":[{"type":"text","value":"Swift 3 Protocols","position":{"start":{"line":11,"column":6,"offset":206},"end":{"line":11,"column":23,"offset":223},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":205},"end":{"line":11,"column":44,"offset":244},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":205},"end":{"line":11,"column":44,"offset":244},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#protocols","children":[{"type":"text","value":"Protocols","position":{"start":{"line":12,"column":10,"offset":254},"end":{"line":12,"column":19,"offset":263},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":253},"end":{"line":12,"column":32,"offset":276},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":253},"end":{"line":12,"column":32,"offset":276},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----protocol-functions","children":[{"type":"text","value":"---- Protocol functions","position":{"start":{"line":13,"column":14,"offset":290},"end":{"line":13,"column":37,"offset":313},"indent":[]}}],"position":{"start":{"line":13,"column":13,"offset":289},"end":{"line":13,"column":64,"offset":340},"indent":[]}}],"position":{"start":{"line":13,"column":13,"offset":289},"end":{"line":13,"column":64,"offset":340},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":285},"end":{"line":13,"column":64,"offset":340},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----initialiser-requirements","children":[{"type":"text","value":"---- Initialiser Requirements","position":{"start":{"line":14,"column":14,"offset":354},"end":{"line":14,"column":43,"offset":383},"indent":[]}}],"position":{"start":{"line":14,"column":13,"offset":353},"end":{"line":14,"column":76,"offset":416},"indent":[]}}],"position":{"start":{"line":14,"column":13,"offset":353},"end":{"line":14,"column":76,"offset":416},"indent":[]}}],"position":{"start":{"line":14,"column":9,"offset":349},"end":{"line":14,"column":76,"offset":416},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----protocol-delegation","children":[{"type":"text","value":"---- Protocol Delegation","position":{"start":{"line":15,"column":14,"offset":430},"end":{"line":15,"column":38,"offset":454},"indent":[]}}],"position":{"start":{"line":15,"column":13,"offset":429},"end":{"line":15,"column":66,"offset":482},"indent":[]}}],"position":{"start":{"line":15,"column":13,"offset":429},"end":{"line":15,"column":66,"offset":482},"indent":[]}}],"position":{"start":{"line":15,"column":9,"offset":425},"end":{"line":15,"column":66,"offset":482},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----protocol-conformance","children":[{"type":"text","value":"---- Protocol Conformance","position":{"start":{"line":16,"column":14,"offset":496},"end":{"line":16,"column":39,"offset":521},"indent":[]}}],"position":{"start":{"line":16,"column":13,"offset":495},"end":{"line":16,"column":68,"offset":550},"indent":[]}}],"position":{"start":{"line":16,"column":13,"offset":495},"end":{"line":16,"column":68,"offset":550},"indent":[]}}],"position":{"start":{"line":16,"column":9,"offset":491},"end":{"line":16,"column":68,"offset":550},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----protocol-inheritance","children":[{"type":"text","value":"---- Protocol Inheritance","position":{"start":{"line":17,"column":14,"offset":564},"end":{"line":17,"column":39,"offset":589},"indent":[]}}],"position":{"start":{"line":17,"column":13,"offset":563},"end":{"line":17,"column":68,"offset":618},"indent":[]}}],"position":{"start":{"line":17,"column":13,"offset":563},"end":{"line":17,"column":68,"offset":618},"indent":[]}}],"position":{"start":{"line":17,"column":9,"offset":559},"end":{"line":17,"column":68,"offset":618},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----protocol-composition","children":[{"type":"text","value":"---- Protocol Composition","position":{"start":{"line":18,"column":14,"offset":632},"end":{"line":18,"column":39,"offset":657},"indent":[]}}],"position":{"start":{"line":18,"column":13,"offset":631},"end":{"line":18,"column":68,"offset":686},"indent":[]}}],"position":{"start":{"line":18,"column":13,"offset":631},"end":{"line":18,"column":68,"offset":686},"indent":[]}}],"position":{"start":{"line":18,"column":9,"offset":627},"end":{"line":18,"column":68,"offset":686},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----protocol-conformance-1","children":[{"type":"text","value":"---- Protocol Conformance","position":{"start":{"line":19,"column":14,"offset":700},"end":{"line":19,"column":39,"offset":725},"indent":[]}}],"position":{"start":{"line":19,"column":13,"offset":699},"end":{"line":19,"column":70,"offset":756},"indent":[]}}],"position":{"start":{"line":19,"column":13,"offset":699},"end":{"line":19,"column":70,"offset":756},"indent":[]}}],"position":{"start":{"line":19,"column":9,"offset":695},"end":{"line":19,"column":70,"offset":756},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":285},"end":{"line":19,"column":70,"offset":756},"indent":[9,9,9,9,9,9]}}],"position":{"start":{"line":12,"column":5,"offset":249},"end":{"line":19,"column":70,"offset":756},"indent":[5,5,5,5,5,5,5]}}],"position":{"start":{"line":12,"column":5,"offset":249},"end":{"line":19,"column":70,"offset":756},"indent":[5,5,5,5,5,5,5]}}],"position":{"start":{"line":11,"column":1,"offset":201},"end":{"line":19,"column":70,"offset":756},"indent":[1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":11,"column":1,"offset":201},"end":{"line":19,"column":70,"offset":756},"indent":[1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<!-- /TOC -->","position":{"start":{"line":21,"column":1,"offset":758},"end":{"line":21,"column":14,"offset":771},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":23,"column":1,"offset":773},"end":{"line":23,"column":4,"offset":776},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Protocols","position":{"start":{"line":25,"column":4,"offset":781},"end":{"line":25,"column":13,"offset":790},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":778},"end":{"line":25,"column":13,"offset":790},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"protocol FullyNamed {\n    var fullName: String { get }\n}\n\nstruct Person: FullyNamed {\n    var fullName: String\n}\nlet john = Person(fullName: \"John Appleseed\")\n// john.fullName is \"John Appleseed\"\n\nclass Starship: FullyNamed {\n    var prefix: String?\n    var name: String\n    init(name: String, prefix: String? = nil) {\n        self.name = name\n        self.prefix = prefix\n    }\n    var fullName: String {\n        return (prefix != nil ? prefix! + \" \" : \"\") + name\n    }\n}\nvar ncc1701 = Starship(name: \"Enterprise\", prefix: \"USS\")\n// ncc1701.fullName is \"USS Enterprise\"","position":{"start":{"line":27,"column":1,"offset":792},"end":{"line":51,"column":4,"offset":1375},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Protocol functions","position":{"start":{"line":55,"column":4,"offset":1382},"end":{"line":55,"column":22,"offset":1400},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1379},"end":{"line":55,"column":22,"offset":1400},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"protocol RandomNumberGenerator {\n    func random() -> Double\n}\n\nprotocol Togglable {\n    mutating func toggle()\n}\n\nenum OnOffSwitch: Togglable {\n    case off, on\n    mutating func toggle() {\n        switch self {\n        case .off:\n            self = .on\n        case .on:\n            self = .off\n        }\n    }\n}\nvar lightSwitch = OnOffSwitch.off\nlightSwitch.toggle()\n// lightSwitch is now equal to .on","position":{"start":{"line":57,"column":1,"offset":1402},"end":{"line":80,"column":4,"offset":1814},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Initialiser Requirements","position":{"start":{"line":84,"column":4,"offset":1821},"end":{"line":84,"column":28,"offset":1845},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":1818},"end":{"line":84,"column":28,"offset":1845},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"protocol SomeProtocol {\n    init(someParameter: Int)\n}\n\nclass SomeClass: SomeProtocol {\n    required init(someParameter: Int) {\n        // initializer implementation goes here\n    }\n}","position":{"start":{"line":86,"column":1,"offset":1847},"end":{"line":96,"column":4,"offset":2038},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There are also required overrides.","position":{"start":{"line":98,"column":1,"offset":2040},"end":{"line":98,"column":35,"offset":2074},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2040},"end":{"line":98,"column":35,"offset":2074},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"protocol SomeProtocol {\n    init()\n}\n\nclass SomeSuperClass {\n    init() {\n        // initializer implementation goes here\n    }\n}\n\nclass SomeSubClass: SomeSuperClass, SomeProtocol {\n    // \"required\" from SomeProtocol conformance; \"override\" from SomeSuperClass\n    required override init() {\n        // initializer implementation goes here\n    }\n}","position":{"start":{"line":100,"column":1,"offset":2076},"end":{"line":117,"column":4,"offset":2432},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Protocol Delegation","position":{"start":{"line":121,"column":4,"offset":2439},"end":{"line":121,"column":23,"offset":2458},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2436},"end":{"line":121,"column":23,"offset":2458},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"protocol DiceGame {\n    var dice: Dice { get }\n    func play()\n}\n\nprotocol DiceGameDelegate {\n    func gameDidStart(_ game: DiceGame)\n    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)\n    func gameDidEnd(_ game: DiceGame)\n}\n\nclass SnakesAndLadders: DiceGame {\n    let finalSquare = 25\n    let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())\n    var square = 0\n    var board: [Int]\n    init() {\n        board = Array(repeating: 0, count: finalSquare + 1)\n        board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02\n        board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08\n    }\n    var delegate: DiceGameDelegate?\n    func play() {\n        square = 0\n        delegate?.gameDidStart(self)\n        gameLoop: while square != finalSquare {\n            let diceRoll = dice.roll()\n            delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)\n            switch square + diceRoll {\n            case finalSquare:\n                break gameLoop\n            case let newSquare where newSquare > finalSquare:\n                continue gameLoop\n            default:\n                square += diceRoll\n                square += board[square]\n            }\n        }\n        delegate?.gameDidEnd(self)\n    }\n}\n\nclass DiceGameTracker: DiceGameDelegate {\n    var numberOfTurns = 0\n    func gameDidStart(_ game: DiceGame) {\n        numberOfTurns = 0\n        if game is SnakesAndLadders {\n            print(\"Started a new game of Snakes and Ladders\")\n        }\n        print(\"The game is using a \\(game.dice.sides)-sided dice\")\n    }\n    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) {\n        numberOfTurns += 1\n        print(\"Rolled a \\(diceRoll)\")\n    }\n    func gameDidEnd(_ game: DiceGame) {\n        print(\"The game lasted for \\(numberOfTurns) turns\")\n    }\n}\n\nlet tracker = DiceGameTracker()\nlet game = SnakesAndLadders()\ngame.delegate = tracker\ngame.play()\n// Started a new game of Snakes and Ladders\n// The game is using a 6-sided dice\n// Rolled a 3\n// Rolled a 5\n// Rolled a 4\n// Rolled a 5\n// The game lasted for 4 turns","position":{"start":{"line":123,"column":1,"offset":2460},"end":{"line":195,"column":4,"offset":4588},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Protocol Conformance","position":{"start":{"line":199,"column":4,"offset":4595},"end":{"line":199,"column":24,"offset":4615},"indent":[]}}],"position":{"start":{"line":199,"column":1,"offset":4592},"end":{"line":199,"column":24,"offset":4615},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"protocol TextRepresentable {\n    var textualDescription: String { get }\n}\n\nextension Dice: TextRepresentable {\n    var textualDescription: String {\n        return \"A \\(sides)-sided dice\"\n    }\n}","position":{"start":{"line":201,"column":1,"offset":4617},"end":{"line":211,"column":4,"offset":4819},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Declaring Protocol Adoption with an Extension","position":{"start":{"line":213,"column":3,"offset":4823},"end":{"line":213,"column":48,"offset":4868},"indent":[]}}],"position":{"start":{"line":213,"column":1,"offset":4821},"end":{"line":213,"column":50,"offset":4870},"indent":[]}}],"position":{"start":{"line":213,"column":1,"offset":4821},"end":{"line":213,"column":50,"offset":4870},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If a type already conforms to all of the requirements of a protocol, but has not yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:","position":{"start":{"line":215,"column":1,"offset":4872},"end":{"line":215,"column":182,"offset":5053},"indent":[]}}],"position":{"start":{"line":215,"column":1,"offset":4872},"end":{"line":215,"column":182,"offset":5053},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"struct Hamster {\n    var name: String\n    var textualDescription: String {\n        return \"A hamster named \\(name)\"\n    }\n}\nextension Hamster: TextRepresentable {}\n\n// Instances of Hamster can now be used wherever TextRepresentable is the required type:\n\nlet simonTheHamster = Hamster(name: \"Simon\")\nlet somethingTextRepresentable: TextRepresentable = simonTheHamster\nprint(somethingTextRepresentable.textualDescription)\n// Prints \"A hamster named Simon\"","position":{"start":{"line":217,"column":1,"offset":5055},"end":{"line":232,"column":4,"offset":5517},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can also create Collections of Protocol Types:","position":{"start":{"line":234,"column":1,"offset":5519},"end":{"line":234,"column":51,"offset":5569},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":5519},"end":{"line":234,"column":51,"offset":5569},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let things: [TextRepresentable] = [game, d12, simonTheHamster]\n\nfor thing in things {\n    print(thing.textualDescription)\n}\n// A game of Snakes and Ladders with 25 squares\n// A 12-sided dice\n// A hamster named Simon","position":{"start":{"line":236,"column":1,"offset":5571},"end":{"line":245,"column":4,"offset":5794},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Protocol Inheritance","position":{"start":{"line":249,"column":4,"offset":5801},"end":{"line":249,"column":24,"offset":5821},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":5798},"end":{"line":249,"column":24,"offset":5821},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A protocol can inherit one or more other protocols and can add further requirements on top of the requirements it inherits. The syntax for protocol inheritance is similar to the syntax for class inheritance, but with the option to list multiple inherited protocols, separated by commas:","position":{"start":{"line":251,"column":1,"offset":5823},"end":{"line":251,"column":287,"offset":6109},"indent":[]}}],"position":{"start":{"line":251,"column":1,"offset":5823},"end":{"line":251,"column":287,"offset":6109},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"protocol InheritingProtocol: SomeProtocol, AnotherProtocol {\n    // protocol definition goes here\n}\n\nprotocol PrettyTextRepresentable: TextRepresentable {\n    var prettyTextualDescription: String { get }\n}","position":{"start":{"line":253,"column":1,"offset":6111},"end":{"line":261,"column":4,"offset":6324},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Protocol Composition","position":{"start":{"line":265,"column":4,"offset":6331},"end":{"line":265,"column":24,"offset":6351},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":6328},"end":{"line":265,"column":24,"offset":6351},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"protocol Named {\n    var name: String { get }\n}\nprotocol Aged {\n    var age: Int { get }\n}\nstruct Person: Named, Aged {\n    var name: String\n    var age: Int\n}\nfunc wishHappyBirthday(to celebrator: Named & Aged) {\n    print(\"Happy birthday, \\(celebrator.name), you're \\(celebrator.age)!\")\n}\nlet birthdayPerson = Person(name: \"Malcolm\", age: 21)\nwishHappyBirthday(to: birthdayPerson)\n// Prints \"Happy birthday, Malcolm, you're 21!\"","position":{"start":{"line":267,"column":1,"offset":6353},"end":{"line":284,"column":4,"offset":6791},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Protocol Conformance","position":{"start":{"line":288,"column":4,"offset":6798},"end":{"line":288,"column":24,"offset":6818},"indent":[]}}],"position":{"start":{"line":288,"column":1,"offset":6795},"end":{"line":288,"column":24,"offset":6818},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"How to check if a class conforms?","position":{"start":{"line":290,"column":1,"offset":6820},"end":{"line":290,"column":34,"offset":6853},"indent":[]}}],"position":{"start":{"line":290,"column":1,"offset":6820},"end":{"line":290,"column":34,"offset":6853},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"protocol HasArea {\n    var area: Double { get }\n}\n\nclass Circle: HasArea {\n    let pi = 3.1415927\n    var radius: Double\n    var area: Double { return pi * radius * radius }\n    init(radius: Double) { self.radius = radius }\n}\nclass Country: HasArea {\n    var area: Double\n    init(area: Double) { self.area = area }\n}\n\nclass Animal {\n    var legs: Int\n    init(legs: Int) { self.legs = legs }\n}\n\nlet objects: [AnyObject] = [\n    Circle(radius: 2.0),\n    Country(area: 243_610),\n    Animal(legs: 4)\n]\n\nfor object in objects {\n    if let objectWithArea = object as? HasArea {\n        print(\"Area is \\(objectWithArea.area)\")\n    } else {\n        print(\"Something that doesn't have an area\")\n    }\n}\n// Area is 12.5663708\n// Area is 243610.0\n// Something that doesn't have an area","position":{"start":{"line":292,"column":1,"offset":6855},"end":{"line":329,"column":4,"offset":7639},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":332,"column":1,"offset":7642},"end":{"line":332,"column":31,"offset":7672},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":332,"column":31,"offset":7672}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"swift-3-protocols\"\n    }}>{`Swift 3 Protocols`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#swift-3-protocols\"\n        }}>{`Swift 3 Protocols`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#protocols\"\n            }}>{`Protocols`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----protocol-functions\"\n                }}>{`---- Protocol functions`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----initialiser-requirements\"\n                }}>{`---- Initialiser Requirements`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----protocol-delegation\"\n                }}>{`---- Protocol Delegation`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----protocol-conformance\"\n                }}>{`---- Protocol Conformance`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----protocol-inheritance\"\n                }}>{`---- Protocol Inheritance`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----protocol-composition\"\n                }}>{`---- Protocol Composition`}</a></li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----protocol-conformance-1\"\n                }}>{`---- Protocol Conformance`}</a></li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"protocols\"\n    }}>{`Protocols`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`protocol FullyNamed {\n    var fullName: String { get }\n}\n\nstruct Person: FullyNamed {\n    var fullName: String\n}\nlet john = Person(fullName: \"John Appleseed\")\n// john.fullName is \"John Appleseed\"\n\nclass Starship: FullyNamed {\n    var prefix: String?\n    var name: String\n    init(name: String, prefix: String? = nil) {\n        self.name = name\n        self.prefix = prefix\n    }\n    var fullName: String {\n        return (prefix != nil ? prefix! + \" \" : \"\") + name\n    }\n}\nvar ncc1701 = Starship(name: \"Enterprise\", prefix: \"USS\")\n// ncc1701.fullName is \"USS Enterprise\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"protocol-functions\"\n    }}>{`Protocol functions`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol RandomNumberGenerator {\n    func random() -> Double\n}\n\nprotocol Togglable {\n    mutating func toggle()\n}\n\nenum OnOffSwitch: Togglable {\n    case off, on\n    mutating func toggle() {\n        switch self {\n        case .off:\n            self = .on\n        case .on:\n            self = .off\n        }\n    }\n}\nvar lightSwitch = OnOffSwitch.off\nlightSwitch.toggle()\n// lightSwitch is now equal to .on\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"initialiser-requirements\"\n    }}>{`Initialiser Requirements`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol SomeProtocol {\n    init(someParameter: Int)\n}\n\nclass SomeClass: SomeProtocol {\n    required init(someParameter: Int) {\n        // initializer implementation goes here\n    }\n}\n`}</code></pre>\n    <p>{`There are also required overrides.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol SomeProtocol {\n    init()\n}\n\nclass SomeSuperClass {\n    init() {\n        // initializer implementation goes here\n    }\n}\n\nclass SomeSubClass: SomeSuperClass, SomeProtocol {\n    // \"required\" from SomeProtocol conformance; \"override\" from SomeSuperClass\n    required override init() {\n        // initializer implementation goes here\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"protocol-delegation\"\n    }}>{`Protocol Delegation`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol DiceGame {\n    var dice: Dice { get }\n    func play()\n}\n\nprotocol DiceGameDelegate {\n    func gameDidStart(_ game: DiceGame)\n    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)\n    func gameDidEnd(_ game: DiceGame)\n}\n\nclass SnakesAndLadders: DiceGame {\n    let finalSquare = 25\n    let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())\n    var square = 0\n    var board: [Int]\n    init() {\n        board = Array(repeating: 0, count: finalSquare + 1)\n        board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02\n        board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08\n    }\n    var delegate: DiceGameDelegate?\n    func play() {\n        square = 0\n        delegate?.gameDidStart(self)\n        gameLoop: while square != finalSquare {\n            let diceRoll = dice.roll()\n            delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)\n            switch square + diceRoll {\n            case finalSquare:\n                break gameLoop\n            case let newSquare where newSquare > finalSquare:\n                continue gameLoop\n            default:\n                square += diceRoll\n                square += board[square]\n            }\n        }\n        delegate?.gameDidEnd(self)\n    }\n}\n\nclass DiceGameTracker: DiceGameDelegate {\n    var numberOfTurns = 0\n    func gameDidStart(_ game: DiceGame) {\n        numberOfTurns = 0\n        if game is SnakesAndLadders {\n            print(\"Started a new game of Snakes and Ladders\")\n        }\n        print(\"The game is using a \\\\(game.dice.sides)-sided dice\")\n    }\n    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) {\n        numberOfTurns += 1\n        print(\"Rolled a \\\\(diceRoll)\")\n    }\n    func gameDidEnd(_ game: DiceGame) {\n        print(\"The game lasted for \\\\(numberOfTurns) turns\")\n    }\n}\n\nlet tracker = DiceGameTracker()\nlet game = SnakesAndLadders()\ngame.delegate = tracker\ngame.play()\n// Started a new game of Snakes and Ladders\n// The game is using a 6-sided dice\n// Rolled a 3\n// Rolled a 5\n// Rolled a 4\n// Rolled a 5\n// The game lasted for 4 turns\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"protocol-conformance\"\n    }}>{`Protocol Conformance`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol TextRepresentable {\n    var textualDescription: String { get }\n}\n\nextension Dice: TextRepresentable {\n    var textualDescription: String {\n        return \"A \\\\(sides)-sided dice\"\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Declaring Protocol Adoption with an Extension`}</strong></p>\n    <p>{`If a type already conforms to all of the requirements of a protocol, but has not yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`struct Hamster {\n    var name: String\n    var textualDescription: String {\n        return \"A hamster named \\\\(name)\"\n    }\n}\nextension Hamster: TextRepresentable {}\n\n// Instances of Hamster can now be used wherever TextRepresentable is the required type:\n\nlet simonTheHamster = Hamster(name: \"Simon\")\nlet somethingTextRepresentable: TextRepresentable = simonTheHamster\nprint(somethingTextRepresentable.textualDescription)\n// Prints \"A hamster named Simon\"\n`}</code></pre>\n    <p>{`You can also create Collections of Protocol Types:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`let things: [TextRepresentable] = [game, d12, simonTheHamster]\n\nfor thing in things {\n    print(thing.textualDescription)\n}\n// A game of Snakes and Ladders with 25 squares\n// A 12-sided dice\n// A hamster named Simon\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"protocol-inheritance\"\n    }}>{`Protocol Inheritance`}</h2>\n    <p>{`A protocol can inherit one or more other protocols and can add further requirements on top of the requirements it inherits. The syntax for protocol inheritance is similar to the syntax for class inheritance, but with the option to list multiple inherited protocols, separated by commas:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol InheritingProtocol: SomeProtocol, AnotherProtocol {\n    // protocol definition goes here\n}\n\nprotocol PrettyTextRepresentable: TextRepresentable {\n    var prettyTextualDescription: String { get }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"protocol-composition\"\n    }}>{`Protocol Composition`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol Named {\n    var name: String { get }\n}\nprotocol Aged {\n    var age: Int { get }\n}\nstruct Person: Named, Aged {\n    var name: String\n    var age: Int\n}\nfunc wishHappyBirthday(to celebrator: Named & Aged) {\n    print(\"Happy birthday, \\\\(celebrator.name), you're \\\\(celebrator.age)!\")\n}\nlet birthdayPerson = Person(name: \"Malcolm\", age: 21)\nwishHappyBirthday(to: birthdayPerson)\n// Prints \"Happy birthday, Malcolm, you're 21!\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"protocol-conformance-1\"\n    }}>{`Protocol Conformance`}</h2>\n    <p>{`How to check if a class conforms?`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`protocol HasArea {\n    var area: Double { get }\n}\n\nclass Circle: HasArea {\n    let pi = 3.1415927\n    var radius: Double\n    var area: Double { return pi * radius * radius }\n    init(radius: Double) { self.radius = radius }\n}\nclass Country: HasArea {\n    var area: Double\n    init(area: Double) { self.area = area }\n}\n\nclass Animal {\n    var legs: Int\n    init(legs: Int) { self.legs = legs }\n}\n\nlet objects: [AnyObject] = [\n    Circle(radius: 2.0),\n    Country(area: 243_610),\n    Animal(legs: 4)\n]\n\nfor object in objects {\n    if let objectWithArea = object as? HasArea {\n        print(\"Area is \\\\(objectWithArea.area)\")\n    } else {\n        print(\"Something that doesn't have an area\")\n    }\n}\n// Area is 12.5663708\n// Area is 243610.0\n// Something that doesn't have an area\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}