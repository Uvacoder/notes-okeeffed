{"expireTime":9007200867335955000,"key":"gatsby-plugin-mdx-entire-payload-defa1d51f418510949069593b7793f69-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The Complete Go Developer Guide","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":34,"offset":200},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":34,"offset":200},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Intro to the Go CLI","position":{"start":{"line":10,"column":4,"offset":205},"end":{"line":10,"column":23,"offset":224},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":202},"end":{"line":10,"column":23,"offset":224},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Command","position":{"start":{"line":12,"column":3,"offset":228},"end":{"line":12,"column":10,"offset":235},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":228},"end":{"line":12,"column":13,"offset":238},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Action","position":{"start":{"line":12,"column":16,"offset":241},"end":{"line":12,"column":22,"offset":247},"indent":[]}}],"position":{"start":{"line":12,"column":16,"offset":241},"end":{"line":12,"column":71,"offset":296},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":226},"end":{"line":12,"column":73,"offset":298},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"go build","position":{"start":{"line":14,"column":3,"offset":374},"end":{"line":14,"column":11,"offset":382},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":374},"end":{"line":14,"column":13,"offset":384},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Compiles go source files","position":{"start":{"line":14,"column":16,"offset":387},"end":{"line":14,"column":40,"offset":411},"indent":[]}}],"position":{"start":{"line":14,"column":16,"offset":387},"end":{"line":14,"column":71,"offset":442},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":372},"end":{"line":14,"column":73,"offset":444},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"go run","position":{"start":{"line":15,"column":3,"offset":447},"end":{"line":15,"column":9,"offset":453},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":447},"end":{"line":15,"column":13,"offset":457},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Compiles and executes one or two files","position":{"start":{"line":15,"column":16,"offset":460},"end":{"line":15,"column":54,"offset":498},"indent":[]}}],"position":{"start":{"line":15,"column":16,"offset":460},"end":{"line":15,"column":71,"offset":515},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":445},"end":{"line":15,"column":73,"offset":517},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"go fmt","position":{"start":{"line":16,"column":3,"offset":520},"end":{"line":16,"column":9,"offset":526},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":520},"end":{"line":16,"column":13,"offset":530},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Formats all go code in current directory","position":{"start":{"line":16,"column":16,"offset":533},"end":{"line":16,"column":56,"offset":573},"indent":[]}}],"position":{"start":{"line":16,"column":16,"offset":533},"end":{"line":16,"column":71,"offset":588},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":518},"end":{"line":16,"column":73,"offset":590},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"go install","position":{"start":{"line":17,"column":3,"offset":593},"end":{"line":17,"column":13,"offset":603},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":593},"end":{"line":17,"column":13,"offset":603},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Compiles and \"installs\" a package","position":{"start":{"line":17,"column":16,"offset":606},"end":{"line":17,"column":49,"offset":639},"indent":[]}}],"position":{"start":{"line":17,"column":16,"offset":606},"end":{"line":17,"column":71,"offset":661},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":591},"end":{"line":17,"column":73,"offset":663},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"go get","position":{"start":{"line":18,"column":3,"offset":666},"end":{"line":18,"column":9,"offset":672},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":666},"end":{"line":18,"column":13,"offset":676},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Downloads the raw source code of someone else's pacakge","position":{"start":{"line":18,"column":16,"offset":679},"end":{"line":18,"column":71,"offset":734},"indent":[]}}],"position":{"start":{"line":18,"column":16,"offset":679},"end":{"line":18,"column":71,"offset":734},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":664},"end":{"line":18,"column":73,"offset":736},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"go test","position":{"start":{"line":19,"column":3,"offset":739},"end":{"line":19,"column":10,"offset":746},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":739},"end":{"line":19,"column":13,"offset":749},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Runs any tests associated with the current project","position":{"start":{"line":19,"column":16,"offset":752},"end":{"line":19,"column":66,"offset":802},"indent":[]}}],"position":{"start":{"line":19,"column":16,"offset":752},"end":{"line":19,"column":71,"offset":807},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":737},"end":{"line":19,"column":73,"offset":809},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":226},"end":{"line":19,"column":73,"offset":809},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Hello World","position":{"start":{"line":21,"column":4,"offset":814},"end":{"line":21,"column":15,"offset":825},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":811},"end":{"line":21,"column":15,"offset":825},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using the Go CLI, we can run a simple hello world as so.","position":{"start":{"line":23,"column":1,"offset":827},"end":{"line":23,"column":57,"offset":883},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":827},"end":{"line":23,"column":57,"offset":883},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport \"fmt\"\n\n/**\n * Basic hello world.\n * Run using go -o\n */\nfunc main() {\n  fmt.Println(\"Hi there!\")\n}","position":{"start":{"line":25,"column":1,"offset":885},"end":{"line":37,"column":4,"offset":1014},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Go Packages","position":{"start":{"line":39,"column":4,"offset":1019},"end":{"line":39,"column":15,"offset":1030},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1016},"end":{"line":39,"column":15,"offset":1030},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When you see lines like ","position":{"start":{"line":41,"column":1,"offset":1032},"end":{"line":41,"column":25,"offset":1056},"indent":[]}},{"type":"inlineCode","value":"package main","position":{"start":{"line":41,"column":25,"offset":1056},"end":{"line":41,"column":39,"offset":1070},"indent":[]}},{"type":"text","value":", that's like a workspace. ","position":{"start":{"line":41,"column":39,"offset":1070},"end":{"line":41,"column":66,"offset":1097},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1032},"end":{"line":41,"column":66,"offset":1097},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are two types of packages in Golang: ","position":{"start":{"line":43,"column":1,"offset":1099},"end":{"line":43,"column":44,"offset":1142},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1099},"end":{"line":43,"column":44,"offset":1142},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Executable: Generates a file that we can run.","position":{"start":{"line":45,"column":4,"offset":1147},"end":{"line":45,"column":49,"offset":1192},"indent":[]}}],"position":{"start":{"line":45,"column":4,"offset":1147},"end":{"line":45,"column":49,"offset":1192},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1144},"end":{"line":45,"column":49,"offset":1192},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Reuseable: Code used as \"helpers\" -- a good place to put reusable login.","position":{"start":{"line":46,"column":4,"offset":1196},"end":{"line":46,"column":76,"offset":1268},"indent":[]}}],"position":{"start":{"line":46,"column":4,"offset":1196},"end":{"line":46,"column":76,"offset":1268},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1193},"end":{"line":46,"column":76,"offset":1268},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1144},"end":{"line":46,"column":76,"offset":1268},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Take for example three files:","position":{"start":{"line":48,"column":1,"offset":1270},"end":{"line":48,"column":30,"offset":1299},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1270},"end":{"line":48,"column":30,"offset":1299},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// main.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"Hi there!\")\n}\n\n// support.go\npackage main\n\nfunc support() {\n  fmt.Println(\"Hi support!\")\n}\n\n// helper.go\npackage main\n\nfunc helper() {\n  fmt.Println(\"Hi helper!\")\n}","position":{"start":{"line":50,"column":1,"offset":1301},"end":{"line":73,"column":4,"offset":1543},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"How can we tell the difference between whether we are creating a ","position":{"start":{"line":75,"column":1,"offset":1545},"end":{"line":75,"column":66,"offset":1610},"indent":[]}},{"type":"inlineCode","value":"executable","position":{"start":{"line":75,"column":66,"offset":1610},"end":{"line":75,"column":78,"offset":1622},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":75,"column":78,"offset":1622},"end":{"line":75,"column":82,"offset":1626},"indent":[]}},{"type":"inlineCode","value":"reuseable","position":{"start":{"line":75,"column":82,"offset":1626},"end":{"line":75,"column":93,"offset":1637},"indent":[]}},{"type":"text","value":" type of package? It actually depends on whether you use the name ","position":{"start":{"line":75,"column":93,"offset":1637},"end":{"line":75,"column":159,"offset":1703},"indent":[]}},{"type":"inlineCode","value":"package main","position":{"start":{"line":75,"column":159,"offset":1703},"end":{"line":75,"column":173,"offset":1717},"indent":[]}},{"type":"text","value":". If you ran ","position":{"start":{"line":75,"column":173,"offset":1717},"end":{"line":75,"column":186,"offset":1730},"indent":[]}},{"type":"inlineCode","value":"go build","position":{"start":{"line":75,"column":186,"offset":1730},"end":{"line":75,"column":196,"offset":1740},"indent":[]}},{"type":"text","value":" and you did not use ","position":{"start":{"line":75,"column":196,"offset":1740},"end":{"line":75,"column":217,"offset":1761},"indent":[]}},{"type":"inlineCode","value":"package main","position":{"start":{"line":75,"column":217,"offset":1761},"end":{"line":75,"column":231,"offset":1775},"indent":[]}},{"type":"text","value":", it will not spit out an executable file.","position":{"start":{"line":75,"column":231,"offset":1775},"end":{"line":75,"column":273,"offset":1817},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":1545},"end":{"line":75,"column":273,"offset":1817},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Any executable package also needs a func called ","position":{"start":{"line":77,"column":1,"offset":1819},"end":{"line":77,"column":49,"offset":1867},"indent":[]}},{"type":"inlineCode","value":"main","position":{"start":{"line":77,"column":49,"offset":1867},"end":{"line":77,"column":55,"offset":1873},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":77,"column":55,"offset":1873},"end":{"line":77,"column":56,"offset":1874},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":1819},"end":{"line":77,"column":56,"offset":1874},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Variable Declarations","position":{"start":{"line":79,"column":4,"offset":1879},"end":{"line":79,"column":25,"offset":1900},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":1876},"end":{"line":79,"column":25,"offset":1900},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Variables in Go can generally be inferred from the right hand side. Linters will generally help you out with this.","position":{"start":{"line":81,"column":1,"offset":1902},"end":{"line":81,"column":115,"offset":2016},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":1902},"end":{"line":81,"column":115,"offset":2016},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Shorthand declarations with initialisation can be done with ","position":{"start":{"line":83,"column":1,"offset":2018},"end":{"line":83,"column":61,"offset":2078},"indent":[]}},{"type":"inlineCode","value":":=","position":{"start":{"line":83,"column":61,"offset":2078},"end":{"line":83,"column":65,"offset":2082},"indent":[]}},{"type":"text","value":", although it should be noted you can omit the ","position":{"start":{"line":83,"column":65,"offset":2082},"end":{"line":83,"column":112,"offset":2129},"indent":[]}},{"type":"inlineCode","value":":","position":{"start":{"line":83,"column":112,"offset":2129},"end":{"line":83,"column":115,"offset":2132},"indent":[]}},{"type":"text","value":" when declaring new values for variables.","position":{"start":{"line":83,"column":115,"offset":2132},"end":{"line":83,"column":156,"offset":2173},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2018},"end":{"line":83,"column":156,"offset":2173},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nfunc main() {\n  var card string = \"Ace of spades\"\n  easierCard := \"Ace of hearts\"\n  easierCard = \"Five of Diamonds\"\n}","position":{"start":{"line":85,"column":1,"offset":2175},"end":{"line":93,"column":4,"offset":2316},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Functions and Return Types","position":{"start":{"line":95,"column":4,"offset":2321},"end":{"line":95,"column":30,"offset":2347},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2318},"end":{"line":95,"column":30,"offset":2347},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The patter for declaring a return type is to name that return type after a func is called.","position":{"start":{"line":97,"column":1,"offset":2349},"end":{"line":97,"column":91,"offset":2439},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2349},"end":{"line":97,"column":91,"offset":2439},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport \"fmt\"\n\nfunc main() {\n  card := newCard()\n\n  fmt.Println(card)\n}\n\nfunc newCard() string {\n  return \"Ace of spades\"\n}","position":{"start":{"line":99,"column":1,"offset":2441},"end":{"line":113,"column":4,"offset":2587},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Slices and For Loops","position":{"start":{"line":115,"column":4,"offset":2592},"end":{"line":115,"column":24,"offset":2612},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":2589},"end":{"line":115,"column":24,"offset":2612},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Go has two basic structures for handling lists: ","position":{"start":{"line":117,"column":1,"offset":2614},"end":{"line":117,"column":49,"offset":2662},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":2614},"end":{"line":117,"column":49,"offset":2662},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Array: fixed length list of things","position":{"start":{"line":119,"column":4,"offset":2667},"end":{"line":119,"column":38,"offset":2701},"indent":[]}}],"position":{"start":{"line":119,"column":4,"offset":2667},"end":{"line":119,"column":38,"offset":2701},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":2664},"end":{"line":119,"column":38,"offset":2701},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Slice: an array that can grow or shrink","position":{"start":{"line":120,"column":4,"offset":2705},"end":{"line":120,"column":43,"offset":2744},"indent":[]}}],"position":{"start":{"line":120,"column":4,"offset":2705},"end":{"line":120,"column":43,"offset":2744},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":2702},"end":{"line":120,"column":43,"offset":2744},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":2664},"end":{"line":120,"column":43,"offset":2744},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Every slice must also be of the same type.","position":{"start":{"line":122,"column":1,"offset":2746},"end":{"line":122,"column":43,"offset":2788},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":2746},"end":{"line":122,"column":43,"offset":2788},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a slice, we create it like so:","position":{"start":{"line":124,"column":1,"offset":2790},"end":{"line":124,"column":35,"offset":2824},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":2790},"end":{"line":124,"column":35,"offset":2824},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func main() {\n  cards := []string{newCard()}\n  cards = append(cards, \"Six of Spades\")\n  \n  for i, card := range cards {\n  fmt.Println(i, card)\n  }\n}","position":{"start":{"line":126,"column":1,"offset":2826},"end":{"line":135,"column":4,"offset":2984},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note that the cards variable is immutable and a new slice is returned when we use the ","position":{"start":{"line":137,"column":1,"offset":2986},"end":{"line":137,"column":87,"offset":3072},"indent":[]}},{"type":"inlineCode","value":"append","position":{"start":{"line":137,"column":87,"offset":3072},"end":{"line":137,"column":95,"offset":3080},"indent":[]}},{"type":"text","value":" function to add to the slice.","position":{"start":{"line":137,"column":95,"offset":3080},"end":{"line":137,"column":125,"offset":3110},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":2986},"end":{"line":137,"column":125,"offset":3110},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can use the ","position":{"start":{"line":139,"column":1,"offset":3112},"end":{"line":139,"column":16,"offset":3127},"indent":[]}},{"type":"inlineCode","value":"range","position":{"start":{"line":139,"column":16,"offset":3127},"end":{"line":139,"column":23,"offset":3134},"indent":[]}},{"type":"text","value":" keyword to iterate over a slice.","position":{"start":{"line":139,"column":23,"offset":3134},"end":{"line":139,"column":56,"offset":3167},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":3112},"end":{"line":139,"column":56,"offset":3167},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Object Oriented approach vs Go approach","position":{"start":{"line":141,"column":4,"offset":3172},"end":{"line":141,"column":43,"offset":3211},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":3169},"end":{"line":141,"column":43,"offset":3211},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note that there are no classes in Go.","position":{"start":{"line":143,"column":1,"offset":3213},"end":{"line":143,"column":38,"offset":3250},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":3213},"end":{"line":143,"column":38,"offset":3250},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In Go, what we do is declare a new type and then create ","position":{"start":{"line":145,"column":1,"offset":3252},"end":{"line":145,"column":57,"offset":3308},"indent":[]}},{"type":"inlineCode","value":"functions with a receiver","position":{"start":{"line":145,"column":57,"offset":3308},"end":{"line":145,"column":84,"offset":3335},"indent":[]}},{"type":"text","value":". This is a common pattern that repeats throughout Go courses.","position":{"start":{"line":145,"column":84,"offset":3335},"end":{"line":145,"column":146,"offset":3397},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":3252},"end":{"line":145,"column":146,"offset":3397},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In practice, we can update the ","position":{"start":{"line":147,"column":1,"offset":3399},"end":{"line":147,"column":32,"offset":3430},"indent":[]}},{"type":"inlineCode","value":"main.go","position":{"start":{"line":147,"column":32,"offset":3430},"end":{"line":147,"column":41,"offset":3439},"indent":[]}},{"type":"text","value":" file with a new type we create:","position":{"start":{"line":147,"column":41,"offset":3439},"end":{"line":147,"column":73,"offset":3471},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":3399},"end":{"line":147,"column":73,"offset":3471},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// main.go\npackage main\n\nfunc main() {\n  cards := deck{newCard()}\n  cards = append(cards, \"Six of Spades\")\n\n  cards.print()\n}\n\nfunc newCard() string {\n  return \"Ace of spades\"\n}\n\n// deck.go\npackage main\n\nimport \"fmt\"\n\n// Create a new type of 'deck'\n// which is a slice of strings\ntype deck []string\n\n// Creating a receiver function\nfunc (d deck) print() {\n  for i, card := range d {\n  fmt.Println(i, card)\n  }\n}","position":{"start":{"line":149,"column":1,"offset":3473},"end":{"line":179,"column":4,"offset":3894},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It is important to note that if your other ","position":{"start":{"line":181,"column":1,"offset":3896},"end":{"line":181,"column":44,"offset":3939},"indent":[]}},{"type":"inlineCode","value":"package main","position":{"start":{"line":181,"column":44,"offset":3939},"end":{"line":181,"column":58,"offset":3953},"indent":[]}},{"type":"text","value":" files are not in the ","position":{"start":{"line":181,"column":58,"offset":3953},"end":{"line":181,"column":80,"offset":3975},"indent":[]}},{"type":"inlineCode","value":"$GOPATH","position":{"start":{"line":181,"column":80,"offset":3975},"end":{"line":181,"column":89,"offset":3984},"indent":[]}},{"type":"text","value":" that you need to include them during your run state ie ","position":{"start":{"line":181,"column":89,"offset":3984},"end":{"line":181,"column":145,"offset":4040},"indent":[]}},{"type":"inlineCode","value":"go run main.go deck.go","position":{"start":{"line":181,"column":145,"offset":4040},"end":{"line":181,"column":169,"offset":4064},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":181,"column":169,"offset":4064},"end":{"line":181,"column":170,"offset":4065},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":3896},"end":{"line":181,"column":170,"offset":4065},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Slice range syntax","position":{"start":{"line":183,"column":4,"offset":4070},"end":{"line":183,"column":22,"offset":4088},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":4067},"end":{"line":183,"column":22,"offset":4088},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// [StartingAt : UpToButNotInclusive]\nslice := [\"one\", \"two\", \"three\"]\n// Get \"one\", \"two\"\nsliceRange := slice[0:2]\n// Same as...\nsliceRangeTwo  := [:2]\n// Get just the last\nsliceRangeThree := [2:]","position":{"start":{"line":185,"column":1,"offset":4090},"end":{"line":194,"column":4,"offset":4297},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Returning multiple values","position":{"start":{"line":196,"column":4,"offset":4302},"end":{"line":196,"column":29,"offset":4327},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":4299},"end":{"line":196,"column":29,"offset":4327},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// Use slices\nfunc deal(d deck, handSize int) (deck, deck) {\n  return d[:handSize], d[handSize:]\n}\n\nfunc main() {\n  cards := newDeck()\n\n  // init and assign return values\n  hand, remainingDeck := deal(cards, 5)\n  hand.print()\n  remainingDeck.print()\n}","position":{"start":{"line":198,"column":1,"offset":4329},"end":{"line":212,"column":4,"offset":4590},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Converting to bite slices (type conversion)","position":{"start":{"line":214,"column":4,"offset":4595},"end":{"line":214,"column":47,"offset":4638},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":4592},"end":{"line":214,"column":47,"offset":4638},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"byteSlice := []byte(\"Hi there\")","position":{"start":{"line":216,"column":1,"offset":4640},"end":{"line":218,"column":4,"offset":4681},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Writing to file","position":{"start":{"line":220,"column":4,"offset":4686},"end":{"line":220,"column":19,"offset":4701},"indent":[]}}],"position":{"start":{"line":220,"column":1,"offset":4683},"end":{"line":220,"column":19,"offset":4701},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// main.go\npackage main\n\nfunc main() {\n  cards := newDeck()\n  cards.saveToFile(\"my_cards\")\n}\n\n// deck.go\n\n// omit newDeck()\nfunc (d deck) saveToFile(filename string) error {\n   return ioutil.WriteFile(filename, []byte(d.toString()), 0666)\n}","position":{"start":{"line":222,"column":1,"offset":4703},"end":{"line":237,"column":4,"offset":4953},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Reading from hard drive","position":{"start":{"line":239,"column":4,"offset":4958},"end":{"line":239,"column":27,"offset":4981},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":4955},"end":{"line":239,"column":27,"offset":4981},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// main.go\n// main.go\npackage main\n\nfunc main() {\n  cards := newDeckFromFile(\"my_cards\")\n  cards.print()\n}\n\n// deck.go\nfunc newDeckFromFile(filename string) deck {\n\t// bs = byteSlice\n\tbs, err := ioutil.ReadFile(filename)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\tos.Exit(1)\n\t}\n\n\ts := strings.Split(string(bs), \",\")\n\treturn deck(s)\n}","position":{"start":{"line":241,"column":1,"offset":4983},"end":{"line":263,"column":4,"offset":5331},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Shuffling a Deck","position":{"start":{"line":265,"column":4,"offset":5336},"end":{"line":265,"column":20,"offset":5352},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":5333},"end":{"line":265,"column":20,"offset":5352},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There is no inbuilt function to randomise a slice.","position":{"start":{"line":267,"column":1,"offset":5354},"end":{"line":267,"column":51,"offset":5404},"indent":[]}}],"position":{"start":{"line":267,"column":1,"offset":5354},"end":{"line":267,"column":51,"offset":5404},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// main.go\npackage main\nimport (\n  \"math/rand\"\n  \"time\"\n)\n\n// Use slices\nfunc deal(d deck, handSize int) (deck, deck) {\n  return d[:handSize], d[handSize:]\n}\n\nfunc (d deck) shuffle() {\n  source := rand.NewSource(time.Now().UnixNano())\n  r := rand.New(source)\n\n  for i := range d {\n    newPosition := r.Intn(len(d) - 1)\n\n    // fancy one line swap\n    d[i], d[newPosition] = d[newPosition], d[i]\n  }\n}\n\nfunc main() {\n   func main() {\n     cards := newDeck()\n\n     // init and assign return values\n     cards.shuffle()\n     cards.print()\n   }\n}","position":{"start":{"line":269,"column":1,"offset":5406},"end":{"line":303,"column":4,"offset":5958},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Testing with Go","position":{"start":{"line":305,"column":4,"offset":5963},"end":{"line":305,"column":19,"offset":5978},"indent":[]}}],"position":{"start":{"line":305,"column":1,"offset":5960},"end":{"line":305,"column":19,"offset":5978},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// deck_test.go\npackage main\n\nimport \"testing\"\n\nfunc TestNewDeck(t *testing.T) {\n  d := newDeck()\n\n  if len(d) != 16 {\n    t.Errorf(\"Expected deck length of 16, but got %v\", len(d))\n  }\n}","position":{"start":{"line":307,"column":1,"offset":5980},"end":{"line":320,"column":4,"offset":6177},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Asserting Elements","position":{"start":{"line":322,"column":5,"offset":6183},"end":{"line":322,"column":23,"offset":6201},"indent":[]}}],"position":{"start":{"line":322,"column":1,"offset":6179},"end":{"line":322,"column":24,"offset":6202},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// deck_test.go\npackage main\n\nimport \"testing\"\n\nfunc TestNewDeck(t *testing.T) {\n  d := newDeck()\n\n  if len(d) != 16 {\n    t.Errorf(\"Expected deck length of 16, but got %v\", len(d))\n  }\n\n  if d[0] != \"Ace of Spaces\" {\n    t.Errorf(\"Expected first card of Ace of Spaces, but got %v\", d[0]);\n  }\n\n  if d[len(d-1)] != \"Four of Clubs\" {\n    t.Errorf(\"Expected first card of Four of Clubs, but got %v\", d[len(d-1)]);\n  }\n}","position":{"start":{"line":324,"column":1,"offset":6204},"end":{"line":345,"column":4,"offset":6631},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Clean up for file writing","position":{"start":{"line":347,"column":5,"offset":6637},"end":{"line":347,"column":30,"offset":6662},"indent":[]}}],"position":{"start":{"line":347,"column":1,"offset":6633},"end":{"line":347,"column":30,"offset":6662},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// deck_test.go\npackage main\n\nimport (\n  \"testing\"\n  \"os\"\n)\n\nfunc TestNewDeck(t *testing.T) {\n  d := newDeck()\n\n  if len(d) != 16 {\n    t.Errorf(\"Expected deck length of 16, but got %v\", len(d))\n  }\n\n  if d[0] != \"Ace of Spaces\" {\n    t.Errorf(\"Expected first card of Ace of Spaces, but got %v\", d[0]);\n  }\n\n  if d[len(d-1)] != \"Four of Clubs\" {\n    t.Errorf(\"Expected first card of Four of Clubs, but got %v\", d[len(d-1)]);\n  }\n}\n\n// although long name, the test \nfunc TestSaveToDeckAndNewDeckFromFile(t *testing.T) {\n  os.Remove(\"_decktesting\")\n\n  d := new Deck()\n  d.saveToFile(\"_decktesting\")\n\n  loadedDeck := newDeckFromFile(\"_decktesting\")\n\n  if len(loadedDeck) != 16 {\n    t.Errorf(\"Expected 16 cards in deck, got %v\", len(loadedDeck))\n  }\n\n  os.Remove(\"_decktesting\")\n}","position":{"start":{"line":349,"column":1,"offset":6664},"end":{"line":389,"column":4,"offset":7451},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Structs in Go","position":{"start":{"line":391,"column":4,"offset":7456},"end":{"line":391,"column":17,"offset":7469},"indent":[]}}],"position":{"start":{"line":391,"column":1,"offset":7453},"end":{"line":391,"column":17,"offset":7469},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Structs are a collection of different properties linked with a particular purpose.","position":{"start":{"line":393,"column":1,"offset":7471},"end":{"line":393,"column":83,"offset":7553},"indent":[]}}],"position":{"start":{"line":393,"column":1,"offset":7471},"end":{"line":393,"column":83,"offset":7553},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we want to convert the string \"Ace of Spaces\" to become more flexible and as a structure, we could create a struct:","position":{"start":{"line":395,"column":1,"offset":7555},"end":{"line":395,"column":119,"offset":7673},"indent":[]}}],"position":{"start":{"line":395,"column":1,"offset":7555},"end":{"line":395,"column":119,"offset":7673},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you init a struct with no values, the zero values are assigned as the following:","position":{"start":{"line":397,"column":1,"offset":7675},"end":{"line":397,"column":84,"offset":7758},"indent":[]}}],"position":{"start":{"line":397,"column":1,"offset":7675},"end":{"line":397,"column":84,"offset":7758},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Type","position":{"start":{"line":399,"column":3,"offset":7762},"end":{"line":399,"column":7,"offset":7766},"indent":[]}}],"position":{"start":{"line":399,"column":3,"offset":7762},"end":{"line":399,"column":9,"offset":7768},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Zero Value","position":{"start":{"line":399,"column":12,"offset":7771},"end":{"line":399,"column":22,"offset":7781},"indent":[]}}],"position":{"start":{"line":399,"column":12,"offset":7771},"end":{"line":399,"column":22,"offset":7781},"indent":[]}}],"position":{"start":{"line":399,"column":1,"offset":7760},"end":{"line":399,"column":24,"offset":7783},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"string","position":{"start":{"line":401,"column":3,"offset":7810},"end":{"line":401,"column":9,"offset":7816},"indent":[]}}],"position":{"start":{"line":401,"column":3,"offset":7810},"end":{"line":401,"column":9,"offset":7816},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"\"\"","position":{"start":{"line":401,"column":12,"offset":7819},"end":{"line":401,"column":14,"offset":7821},"indent":[]}}],"position":{"start":{"line":401,"column":12,"offset":7819},"end":{"line":401,"column":22,"offset":7829},"indent":[]}}],"position":{"start":{"line":401,"column":1,"offset":7808},"end":{"line":401,"column":24,"offset":7831},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"int","position":{"start":{"line":402,"column":3,"offset":7834},"end":{"line":402,"column":6,"offset":7837},"indent":[]}}],"position":{"start":{"line":402,"column":3,"offset":7834},"end":{"line":402,"column":9,"offset":7840},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"0","position":{"start":{"line":402,"column":12,"offset":7843},"end":{"line":402,"column":13,"offset":7844},"indent":[]}}],"position":{"start":{"line":402,"column":12,"offset":7843},"end":{"line":402,"column":22,"offset":7853},"indent":[]}}],"position":{"start":{"line":402,"column":1,"offset":7832},"end":{"line":402,"column":24,"offset":7855},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"float","position":{"start":{"line":403,"column":3,"offset":7858},"end":{"line":403,"column":8,"offset":7863},"indent":[]}}],"position":{"start":{"line":403,"column":3,"offset":7858},"end":{"line":403,"column":9,"offset":7864},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"0","position":{"start":{"line":403,"column":12,"offset":7867},"end":{"line":403,"column":13,"offset":7868},"indent":[]}}],"position":{"start":{"line":403,"column":12,"offset":7867},"end":{"line":403,"column":22,"offset":7877},"indent":[]}}],"position":{"start":{"line":403,"column":1,"offset":7856},"end":{"line":403,"column":24,"offset":7879},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"bool","position":{"start":{"line":404,"column":3,"offset":7882},"end":{"line":404,"column":7,"offset":7886},"indent":[]}}],"position":{"start":{"line":404,"column":3,"offset":7882},"end":{"line":404,"column":9,"offset":7888},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"false","position":{"start":{"line":404,"column":12,"offset":7891},"end":{"line":404,"column":17,"offset":7896},"indent":[]}}],"position":{"start":{"line":404,"column":12,"offset":7891},"end":{"line":404,"column":22,"offset":7901},"indent":[]}}],"position":{"start":{"line":404,"column":1,"offset":7880},"end":{"line":404,"column":24,"offset":7903},"indent":[]}}],"position":{"start":{"line":399,"column":1,"offset":7760},"end":{"line":404,"column":24,"offset":7903},"indent":[1,1,1,1,1]}},{"type":"code","lang":"go","meta":null,"value":"type card struct {\n  house string\n  value string\n}\n\n// usage\nfunc main() {\n  card := card{\"Spaces\", \"Ace\"}\n  // being more definitive\n  cardTwo := card{house: \"Spaces\", value: \"Ace\"}\n  fmt.Println(card)\n\n  // non-init - sets the zero value\n  // %+v will print out all field names and values\n  var cardThree card\n  fmt.Printf(\"%+v\", cardThree)\n}","position":{"start":{"line":406,"column":1,"offset":7905},"end":{"line":424,"column":4,"offset":8259},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Embedding Structs","position":{"start":{"line":426,"column":4,"offset":8264},"end":{"line":426,"column":21,"offset":8281},"indent":[]}}],"position":{"start":{"line":426,"column":1,"offset":8261},"end":{"line":426,"column":21,"offset":8281},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"type contactInfo struct {\n  email string\n  zipCode int\n}\n\ntype person struct {\n  firstName string\n  lastName string\n  contactInfo\n}\n\nfunc main() {\n  jim := person{\n    firstName: \"Jim\",\n    lastName: \"Party\",\n    contactInfo: contactInfo{\n      email: \"jim@gmail.com\",\n      zipCode: 94000\n    }\n  }\n\n  fmt.Printf(\"%+v\", jim)\n  // same as\n  jim.print()\n\n  // Update name\n  jim.updateNameIncorrect(\"jimmy\")\n  jim.print() // still shows jim instead of jimmy\n\n  // Correct\n  jimPointer := &jim\n  jimPointer.updateName(\"jimmy\")\n  jim.print() // prints jimmy\n\n  // Also works - shortcut for the receiver\n  jim.updatename(\"jimmy\")\n  jim.print()\n}\n\nfunc (p person) print() {\n  fmt.Printf(\"%+v\", p)\n}\n\n// updateName without a pointer\nfunc (p person) updateNameIncorrect(newFirstName string) {\n  p.firstName = newFirstname\n}\n\n// updateName correctly\n// note that taking *type means we're working with a pointer\n// *variable means we want to manipulate the value it is pointing at\nfunc (p *person) updateName(newFirstName string) {\n  (*p).firstName = newFirstname\n}","position":{"start":{"line":428,"column":1,"offset":8283},"end":{"line":483,"column":4,"offset":9348},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointer operations","position":{"start":{"line":485,"column":4,"offset":9353},"end":{"line":485,"column":22,"offset":9371},"indent":[]}}],"position":{"start":{"line":485,"column":1,"offset":9350},"end":{"line":485,"column":22,"offset":9371},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Turn ","position":{"start":{"line":487,"column":3,"offset":9375},"end":{"line":487,"column":8,"offset":9380},"indent":[]}},{"type":"inlineCode","value":"address","position":{"start":{"line":487,"column":8,"offset":9380},"end":{"line":487,"column":17,"offset":9389},"indent":[]}},{"type":"text","value":" into ","position":{"start":{"line":487,"column":17,"offset":9389},"end":{"line":487,"column":23,"offset":9395},"indent":[]}},{"type":"inlineCode","value":"value","position":{"start":{"line":487,"column":23,"offset":9395},"end":{"line":487,"column":30,"offset":9402},"indent":[]}},{"type":"text","value":" with ","position":{"start":{"line":487,"column":30,"offset":9402},"end":{"line":487,"column":36,"offset":9408},"indent":[]}},{"type":"inlineCode","value":"*address","position":{"start":{"line":487,"column":36,"offset":9408},"end":{"line":487,"column":46,"offset":9418},"indent":[]}}],"position":{"start":{"line":487,"column":3,"offset":9375},"end":{"line":487,"column":46,"offset":9418},"indent":[]}}],"position":{"start":{"line":487,"column":1,"offset":9373},"end":{"line":487,"column":46,"offset":9418},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Turn ","position":{"start":{"line":488,"column":3,"offset":9421},"end":{"line":488,"column":8,"offset":9426},"indent":[]}},{"type":"inlineCode","value":"value","position":{"start":{"line":488,"column":8,"offset":9426},"end":{"line":488,"column":15,"offset":9433},"indent":[]}},{"type":"text","value":" into ","position":{"start":{"line":488,"column":15,"offset":9433},"end":{"line":488,"column":21,"offset":9439},"indent":[]}},{"type":"inlineCode","value":"address","position":{"start":{"line":488,"column":21,"offset":9439},"end":{"line":488,"column":30,"offset":9448},"indent":[]}},{"type":"text","value":" with ","position":{"start":{"line":488,"column":30,"offset":9448},"end":{"line":488,"column":36,"offset":9454},"indent":[]}},{"type":"inlineCode","value":"&value","position":{"start":{"line":488,"column":36,"offset":9454},"end":{"line":488,"column":44,"offset":9462},"indent":[]}}],"position":{"start":{"line":488,"column":3,"offset":9421},"end":{"line":488,"column":44,"offset":9462},"indent":[]}}],"position":{"start":{"line":488,"column":1,"offset":9419},"end":{"line":488,"column":44,"offset":9462},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Note that with slices vs structs, you can manipulate the slice directly without having to use a pointer, unlike structs.","position":{"start":{"line":489,"column":3,"offset":9465},"end":{"line":489,"column":123,"offset":9585},"indent":[]}}],"position":{"start":{"line":489,"column":3,"offset":9465},"end":{"line":489,"column":123,"offset":9585},"indent":[]}}],"position":{"start":{"line":489,"column":1,"offset":9463},"end":{"line":489,"column":123,"offset":9585},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Slices with the underlying array get copied, but the array points to the same addresses.","position":{"start":{"line":490,"column":3,"offset":9588},"end":{"line":490,"column":91,"offset":9676},"indent":[]}}],"position":{"start":{"line":490,"column":3,"offset":9588},"end":{"line":490,"column":91,"offset":9676},"indent":[]}}],"position":{"start":{"line":490,"column":1,"offset":9586},"end":{"line":490,"column":91,"offset":9676},"indent":[]}}],"position":{"start":{"line":487,"column":1,"offset":9373},"end":{"line":490,"column":91,"offset":9676},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Reference vs Value Types","position":{"start":{"line":492,"column":5,"offset":9682},"end":{"line":492,"column":29,"offset":9706},"indent":[]}}],"position":{"start":{"line":492,"column":1,"offset":9678},"end":{"line":492,"column":29,"offset":9706},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use pointers for value types, don't worry about it for reference types.","position":{"start":{"line":494,"column":1,"offset":9708},"end":{"line":494,"column":72,"offset":9779},"indent":[]}}],"position":{"start":{"line":494,"column":1,"offset":9708},"end":{"line":494,"column":72,"offset":9779},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Value types","position":{"start":{"line":496,"column":3,"offset":9783},"end":{"line":496,"column":14,"offset":9794},"indent":[]}}],"position":{"start":{"line":496,"column":3,"offset":9783},"end":{"line":496,"column":14,"offset":9794},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Reference types","position":{"start":{"line":496,"column":17,"offset":9797},"end":{"line":496,"column":32,"offset":9812},"indent":[]}}],"position":{"start":{"line":496,"column":17,"offset":9797},"end":{"line":496,"column":32,"offset":9812},"indent":[]}}],"position":{"start":{"line":496,"column":1,"offset":9781},"end":{"line":496,"column":34,"offset":9814},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"int","position":{"start":{"line":498,"column":3,"offset":9851},"end":{"line":498,"column":6,"offset":9854},"indent":[]}}],"position":{"start":{"line":498,"column":3,"offset":9851},"end":{"line":498,"column":14,"offset":9862},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"slices","position":{"start":{"line":498,"column":17,"offset":9865},"end":{"line":498,"column":23,"offset":9871},"indent":[]}}],"position":{"start":{"line":498,"column":17,"offset":9865},"end":{"line":498,"column":32,"offset":9880},"indent":[]}}],"position":{"start":{"line":498,"column":1,"offset":9849},"end":{"line":498,"column":34,"offset":9882},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"float","position":{"start":{"line":499,"column":3,"offset":9885},"end":{"line":499,"column":8,"offset":9890},"indent":[]}}],"position":{"start":{"line":499,"column":3,"offset":9885},"end":{"line":499,"column":14,"offset":9896},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"maps","position":{"start":{"line":499,"column":17,"offset":9899},"end":{"line":499,"column":21,"offset":9903},"indent":[]}}],"position":{"start":{"line":499,"column":17,"offset":9899},"end":{"line":499,"column":32,"offset":9914},"indent":[]}}],"position":{"start":{"line":499,"column":1,"offset":9883},"end":{"line":499,"column":34,"offset":9916},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"string","position":{"start":{"line":500,"column":3,"offset":9919},"end":{"line":500,"column":9,"offset":9925},"indent":[]}}],"position":{"start":{"line":500,"column":3,"offset":9919},"end":{"line":500,"column":14,"offset":9930},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"channels","position":{"start":{"line":500,"column":17,"offset":9933},"end":{"line":500,"column":25,"offset":9941},"indent":[]}}],"position":{"start":{"line":500,"column":17,"offset":9933},"end":{"line":500,"column":32,"offset":9948},"indent":[]}}],"position":{"start":{"line":500,"column":1,"offset":9917},"end":{"line":500,"column":34,"offset":9950},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"bool","position":{"start":{"line":501,"column":3,"offset":9953},"end":{"line":501,"column":7,"offset":9957},"indent":[]}}],"position":{"start":{"line":501,"column":3,"offset":9953},"end":{"line":501,"column":14,"offset":9964},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"pointers","position":{"start":{"line":501,"column":17,"offset":9967},"end":{"line":501,"column":25,"offset":9975},"indent":[]}}],"position":{"start":{"line":501,"column":17,"offset":9967},"end":{"line":501,"column":32,"offset":9982},"indent":[]}}],"position":{"start":{"line":501,"column":1,"offset":9951},"end":{"line":501,"column":34,"offset":9984},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"structs","position":{"start":{"line":502,"column":3,"offset":9987},"end":{"line":502,"column":10,"offset":9994},"indent":[]}}],"position":{"start":{"line":502,"column":3,"offset":9987},"end":{"line":502,"column":14,"offset":9998},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"functions","position":{"start":{"line":502,"column":17,"offset":10001},"end":{"line":502,"column":26,"offset":10010},"indent":[]}}],"position":{"start":{"line":502,"column":17,"offset":10001},"end":{"line":502,"column":32,"offset":10016},"indent":[]}}],"position":{"start":{"line":502,"column":1,"offset":9985},"end":{"line":502,"column":34,"offset":10018},"indent":[]}}],"position":{"start":{"line":496,"column":1,"offset":9781},"end":{"line":502,"column":34,"offset":10018},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Maps","position":{"start":{"line":504,"column":4,"offset":10023},"end":{"line":504,"column":8,"offset":10027},"indent":[]}}],"position":{"start":{"line":504,"column":1,"offset":10020},"end":{"line":504,"column":8,"offset":10027},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Maps are similar to structs, but have some differences. These are basically ","position":{"start":{"line":506,"column":1,"offset":10029},"end":{"line":506,"column":77,"offset":10105},"indent":[]}},{"type":"inlineCode","value":"key:value","position":{"start":{"line":506,"column":77,"offset":10105},"end":{"line":506,"column":88,"offset":10116},"indent":[]}},{"type":"text","value":" pairs.","position":{"start":{"line":506,"column":88,"offset":10116},"end":{"line":506,"column":95,"offset":10123},"indent":[]}}],"position":{"start":{"line":506,"column":1,"offset":10029},"end":{"line":506,"column":95,"offset":10123},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These are comparable to ","position":{"start":{"line":508,"column":1,"offset":10125},"end":{"line":508,"column":25,"offset":10149},"indent":[]}},{"type":"inlineCode","value":"hash","position":{"start":{"line":508,"column":25,"offset":10149},"end":{"line":508,"column":31,"offset":10155},"indent":[]}},{"type":"text","value":" in Ruby, ","position":{"start":{"line":508,"column":31,"offset":10155},"end":{"line":508,"column":41,"offset":10165},"indent":[]}},{"type":"inlineCode","value":"object","position":{"start":{"line":508,"column":41,"offset":10165},"end":{"line":508,"column":49,"offset":10173},"indent":[]}},{"type":"text","value":" in JavaScript or ","position":{"start":{"line":508,"column":49,"offset":10173},"end":{"line":508,"column":67,"offset":10191},"indent":[]}},{"type":"inlineCode","value":"Dict","position":{"start":{"line":508,"column":67,"offset":10191},"end":{"line":508,"column":73,"offset":10197},"indent":[]}},{"type":"text","value":" in Python.","position":{"start":{"line":508,"column":73,"offset":10197},"end":{"line":508,"column":84,"offset":10208},"indent":[]}}],"position":{"start":{"line":508,"column":1,"offset":10125},"end":{"line":508,"column":84,"offset":10208},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a map, the keys all need to be the same type, and the values all need to be the same type.","position":{"start":{"line":510,"column":1,"offset":10210},"end":{"line":510,"column":95,"offset":10304},"indent":[]}}],"position":{"start":{"line":510,"column":1,"offset":10210},"end":{"line":510,"column":95,"offset":10304},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n  \"fmt\n)\n\nfunc main() {\n  // map: declare new map\n  // [string]: keys are type string\n  // string: values are type string\n  colors := map[string]string {\n    \"red\": \"#ff0000\",\n    \"green\": \"#4b9000\"\n  }\n\n  fmt.Println(colors)\n}","position":{"start":{"line":512,"column":1,"offset":10306},"end":{"line":530,"column":4,"offset":10566},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Creating a zero value map can be done basically in two ways:","position":{"start":{"line":532,"column":1,"offset":10568},"end":{"line":532,"column":61,"offset":10628},"indent":[]}}],"position":{"start":{"line":532,"column":1,"offset":10568},"end":{"line":532,"column":61,"offset":10628},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"var colors map[string]string\ncolorsEq = make(map[string]string)\n\n// adding in values\ncolorsEq[\"white\"] = \"#ffffff\"","position":{"start":{"line":534,"column":1,"offset":10630},"end":{"line":540,"column":4,"offset":10754},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We MUST use square braces to access map values, NOT dot notation.","position":{"start":{"line":542,"column":1,"offset":10756},"end":{"line":542,"column":66,"offset":10821},"indent":[]}}],"position":{"start":{"line":542,"column":1,"offset":10756},"end":{"line":542,"column":66,"offset":10821},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Iterating Over Maps","position":{"start":{"line":544,"column":4,"offset":10826},"end":{"line":544,"column":23,"offset":10845},"indent":[]}}],"position":{"start":{"line":544,"column":1,"offset":10823},"end":{"line":544,"column":23,"offset":10845},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"colors := map[string]string {\n  \"red\": \"#ff0000\",\n  \"green\": \"#4b9000\"\n}\n\n\nfunc printMap(c map[string]string) {\n  for color, hex := range c {\n    fmt.Println(\"Hex code for\", color, \"is\", hex)\n  }\n}","position":{"start":{"line":546,"column":1,"offset":10847},"end":{"line":558,"column":4,"offset":11054},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Maps Vs Structs","position":{"start":{"line":560,"column":4,"offset":11059},"end":{"line":560,"column":19,"offset":11074},"indent":[]}}],"position":{"start":{"line":560,"column":1,"offset":11056},"end":{"line":560,"column":19,"offset":11074},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Maps","position":{"start":{"line":562,"column":3,"offset":11078},"end":{"line":562,"column":7,"offset":11082},"indent":[]}}],"position":{"start":{"line":562,"column":3,"offset":11078},"end":{"line":562,"column":54,"offset":11129},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Structs","position":{"start":{"line":562,"column":57,"offset":11132},"end":{"line":562,"column":64,"offset":11139},"indent":[]}}],"position":{"start":{"line":562,"column":57,"offset":11132},"end":{"line":562,"column":110,"offset":11185},"indent":[]}}],"position":{"start":{"line":562,"column":1,"offset":11076},"end":{"line":562,"column":112,"offset":11187},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"All keys must be same type","position":{"start":{"line":564,"column":3,"offset":11302},"end":{"line":564,"column":29,"offset":11328},"indent":[]}}],"position":{"start":{"line":564,"column":3,"offset":11302},"end":{"line":564,"column":54,"offset":11353},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Values can be different types","position":{"start":{"line":564,"column":57,"offset":11356},"end":{"line":564,"column":86,"offset":11385},"indent":[]}}],"position":{"start":{"line":564,"column":57,"offset":11356},"end":{"line":564,"column":110,"offset":11409},"indent":[]}}],"position":{"start":{"line":564,"column":1,"offset":11300},"end":{"line":564,"column":112,"offset":11411},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Use to represent a collection of related properties","position":{"start":{"line":565,"column":3,"offset":11414},"end":{"line":565,"column":54,"offset":11465},"indent":[]}}],"position":{"start":{"line":565,"column":3,"offset":11414},"end":{"line":565,"column":54,"offset":11465},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Need to know all the different fields at compile time","position":{"start":{"line":565,"column":57,"offset":11468},"end":{"line":565,"column":110,"offset":11521},"indent":[]}}],"position":{"start":{"line":565,"column":57,"offset":11468},"end":{"line":565,"column":110,"offset":11521},"indent":[]}}],"position":{"start":{"line":565,"column":1,"offset":11412},"end":{"line":565,"column":112,"offset":11523},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"All values must be the same type","position":{"start":{"line":566,"column":3,"offset":11526},"end":{"line":566,"column":35,"offset":11558},"indent":[]}}],"position":{"start":{"line":566,"column":3,"offset":11526},"end":{"line":566,"column":54,"offset":11577},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Keys don't support indexing","position":{"start":{"line":566,"column":57,"offset":11580},"end":{"line":566,"column":84,"offset":11607},"indent":[]}}],"position":{"start":{"line":566,"column":57,"offset":11580},"end":{"line":566,"column":110,"offset":11633},"indent":[]}}],"position":{"start":{"line":566,"column":1,"offset":11524},"end":{"line":566,"column":112,"offset":11635},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Don't need to know all keys at compile time","position":{"start":{"line":567,"column":3,"offset":11638},"end":{"line":567,"column":46,"offset":11681},"indent":[]}}],"position":{"start":{"line":567,"column":3,"offset":11638},"end":{"line":567,"column":54,"offset":11689},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Use to represent a ","position":{"start":{"line":567,"column":57,"offset":11692},"end":{"line":567,"column":76,"offset":11711},"indent":[]}},{"type":"inlineCode","value":"thing","position":{"start":{"line":567,"column":76,"offset":11711},"end":{"line":567,"column":83,"offset":11718},"indent":[]}},{"type":"text","value":" with a lot of properties","position":{"start":{"line":567,"column":83,"offset":11718},"end":{"line":567,"column":108,"offset":11743},"indent":[]}}],"position":{"start":{"line":567,"column":57,"offset":11692},"end":{"line":567,"column":110,"offset":11745},"indent":[]}}],"position":{"start":{"line":567,"column":1,"offset":11636},"end":{"line":567,"column":112,"offset":11747},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Keys are indexed - can iterate over them","position":{"start":{"line":568,"column":3,"offset":11750},"end":{"line":568,"column":43,"offset":11790},"indent":[]}}],"position":{"start":{"line":568,"column":3,"offset":11750},"end":{"line":568,"column":54,"offset":11801},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Value type!","position":{"start":{"line":568,"column":57,"offset":11804},"end":{"line":568,"column":68,"offset":11815},"indent":[]}}],"position":{"start":{"line":568,"column":57,"offset":11804},"end":{"line":568,"column":110,"offset":11857},"indent":[]}}],"position":{"start":{"line":568,"column":1,"offset":11748},"end":{"line":568,"column":112,"offset":11859},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Reference type !","position":{"start":{"line":569,"column":3,"offset":11862},"end":{"line":569,"column":19,"offset":11878},"indent":[]}}],"position":{"start":{"line":569,"column":3,"offset":11862},"end":{"line":569,"column":54,"offset":11913},"indent":[]}},{"type":"tableCell","children":[],"position":{"start":{"line":569,"column":111,"offset":11970},"end":{"line":569,"column":111,"offset":11970},"indent":[]}}],"position":{"start":{"line":569,"column":1,"offset":11860},"end":{"line":569,"column":112,"offset":11971},"indent":[]}}],"position":{"start":{"line":562,"column":1,"offset":11076},"end":{"line":569,"column":112,"offset":11971},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Interfaces","position":{"start":{"line":571,"column":4,"offset":11976},"end":{"line":571,"column":14,"offset":11986},"indent":[]}}],"position":{"start":{"line":571,"column":1,"offset":11973},"end":{"line":571,"column":14,"offset":11986},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following example shows similar types but returning different values.","position":{"start":{"line":573,"column":1,"offset":11988},"end":{"line":573,"column":74,"offset":12061},"indent":[]}}],"position":{"start":{"line":573,"column":1,"offset":11988},"end":{"line":573,"column":74,"offset":12061},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\ntype englishBot struct {}\ntype spanishBot struct {}\n\n//\ntype bot interface {\n  getGreeting() string\n}\n\nfunc main() {\n  eb := englishBot()\n  sb := spanishBot()\n\n  printGreeting(eb)\n  printGreeting(sb)\n}\n\nfunc (eb englishBot) getGreeting() string {\n  // assume very custom logic to prove diff to spanishBot\n  return \"Hi There!\"\n}\n\nfunc (sb spanishBot) getGreeting() string {\n  // assume very custom logic to prove diff to spanishBot\n  return \"Hola!\"\n}\n\n// any type that implements getGreeting is now an \"honorary\" member of type bot\nfunc printGreet(b bot) {\n  fmt.Println(b.getGreeting())\n}","position":{"start":{"line":575,"column":1,"offset":12063},"end":{"line":608,"column":4,"offset":12675},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"More complex interfaces in Go might have signatures like the following:","position":{"start":{"line":610,"column":1,"offset":12677},"end":{"line":610,"column":72,"offset":12748},"indent":[]}}],"position":{"start":{"line":610,"column":1,"offset":12677},"end":{"line":610,"column":72,"offset":12748},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"type bot interface {\n  getGreeting(string,int) (string, error)\n}","position":{"start":{"line":612,"column":1,"offset":12750},"end":{"line":616,"column":4,"offset":12824},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you want to set more \"qualifiers\" to conform to the interface, you can add more methods to the signature:","position":{"start":{"line":618,"column":1,"offset":12826},"end":{"line":618,"column":109,"offset":12934},"indent":[]}}],"position":{"start":{"line":618,"column":1,"offset":12826},"end":{"line":618,"column":109,"offset":12934},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"type bot interface {\n  getGreeting(string,int) (string, error)\n  getBotVersion() float64\n  respondToUser(user) string\n}","position":{"start":{"line":620,"column":1,"offset":12936},"end":{"line":626,"column":4,"offset":13065},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can only create values out of the concrete types and not interface types.","position":{"start":{"line":628,"column":1,"offset":13067},"end":{"line":628,"column":78,"offset":13144},"indent":[]}}],"position":{"start":{"line":628,"column":1,"offset":13067},"end":{"line":628,"column":78,"offset":13144},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Interfaces are not generic types (other langs have them, Go famously does not).","position":{"start":{"line":630,"column":3,"offset":13148},"end":{"line":630,"column":82,"offset":13227},"indent":[]}}],"position":{"start":{"line":630,"column":3,"offset":13148},"end":{"line":630,"column":82,"offset":13227},"indent":[]}}],"position":{"start":{"line":630,"column":1,"offset":13146},"end":{"line":630,"column":82,"offset":13227},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Interfaces are \"implicit\", we don't have to say a custom type satisfies some interface.","position":{"start":{"line":631,"column":3,"offset":13230},"end":{"line":631,"column":90,"offset":13317},"indent":[]}}],"position":{"start":{"line":631,"column":3,"offset":13230},"end":{"line":631,"column":90,"offset":13317},"indent":[]}}],"position":{"start":{"line":631,"column":1,"offset":13228},"end":{"line":631,"column":90,"offset":13317},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Interfaces are a contract to help us manage types.","position":{"start":{"line":632,"column":3,"offset":13320},"end":{"line":632,"column":53,"offset":13370},"indent":[]}}],"position":{"start":{"line":632,"column":3,"offset":13320},"end":{"line":632,"column":53,"offset":13370},"indent":[]}}],"position":{"start":{"line":632,"column":1,"offset":13318},"end":{"line":632,"column":53,"offset":13370},"indent":[]}}],"position":{"start":{"line":630,"column":1,"offset":13146},"end":{"line":632,"column":53,"offset":13370},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"HTTP Package","position":{"start":{"line":634,"column":4,"offset":13375},"end":{"line":634,"column":16,"offset":13387},"indent":[]}}],"position":{"start":{"line":634,"column":1,"offset":13372},"end":{"line":634,"column":16,"offset":13387},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using http and getting a body response back and helping us understanding how structs work a little better.","position":{"start":{"line":636,"column":1,"offset":13389},"end":{"line":636,"column":107,"offset":13495},"indent":[]}}],"position":{"start":{"line":636,"column":1,"offset":13389},"end":{"line":636,"column":107,"offset":13495},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/gitgoodclub/image/upload/v1550201024/developer-notes/Screen_Shot_2019-02-15_at_2.22.59_pm.png","alt":"Diagram of how to access return body","position":{"start":{"line":638,"column":1,"offset":13497},"end":{"line":638,"column":162,"offset":13658},"indent":[]}}],"position":{"start":{"line":638,"column":1,"offset":13497},"end":{"line":638,"column":162,"offset":13658},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we use an interface as a property of a struct, we can add any property there as long as it conforms to the interface.","position":{"start":{"line":640,"column":1,"offset":13660},"end":{"line":640,"column":121,"offset":13780},"indent":[]}}],"position":{"start":{"line":640,"column":1,"offset":13660},"end":{"line":640,"column":121,"offset":13780},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"type example interface {\n  Reader\n}\n\ntype resp struct {\n  propOne example\n}","position":{"start":{"line":642,"column":1,"offset":13782},"end":{"line":650,"column":4,"offset":13867},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can also assemble multiple interfaces together to create another interface where all requirements need to be satisfied:","position":{"start":{"line":652,"column":1,"offset":13869},"end":{"line":652,"column":123,"offset":13991},"indent":[]}}],"position":{"start":{"line":652,"column":1,"offset":13869},"end":{"line":652,"column":123,"offset":13991},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"type reader interface {}\ntype closer interface {}\n\ntype readCloser interface {\n  reader\n  closer\n}","position":{"start":{"line":654,"column":1,"offset":13993},"end":{"line":662,"column":4,"offset":14101},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For an application of this in action with the http.Get func:","position":{"start":{"line":664,"column":1,"offset":14103},"end":{"line":664,"column":61,"offset":14163},"indent":[]}}],"position":{"start":{"line":664,"column":1,"offset":14103},"end":{"line":664,"column":61,"offset":14163},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"os\"\n  \"io\"\n)\n\nfunc main() {\n  resp, err := http.Get(\"https://google.com\")\n  if err != nil {\n    fmt.Println(\"Error:\", err)\n    os.Exit(1)\n  }\n\n  // Note: Reader interface manipulates byte slice -- it doesn't return it. Go also has easier help functions to simply reading responses.\n  bs := make([]byte, 99999)\n  resp.Body.Read(bs)\n  fmt.Println(string(bs))\n}","position":{"start":{"line":666,"column":1,"offset":14165},"end":{"line":688,"column":4,"offset":14580},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In order to prevent ourselves from having to manually create a byte slice each time, we can use the ","position":{"start":{"line":690,"column":1,"offset":14582},"end":{"line":690,"column":101,"offset":14682},"indent":[]}},{"type":"inlineCode","value":"io.Copy","position":{"start":{"line":690,"column":101,"offset":14682},"end":{"line":690,"column":110,"offset":14691},"indent":[]}},{"type":"text","value":" function instead. The method signature for this requires a destination that implements the ","position":{"start":{"line":690,"column":110,"offset":14691},"end":{"line":690,"column":202,"offset":14783},"indent":[]}},{"type":"inlineCode","value":"Writer","position":{"start":{"line":690,"column":202,"offset":14783},"end":{"line":690,"column":210,"offset":14791},"indent":[]}},{"type":"text","value":" interface and a source that implements the ","position":{"start":{"line":690,"column":210,"offset":14791},"end":{"line":690,"column":254,"offset":14835},"indent":[]}},{"type":"inlineCode","value":"Reader","position":{"start":{"line":690,"column":254,"offset":14835},"end":{"line":690,"column":262,"offset":14843},"indent":[]}},{"type":"text","value":" interface.","position":{"start":{"line":690,"column":262,"offset":14843},"end":{"line":690,"column":273,"offset":14854},"indent":[]}}],"position":{"start":{"line":690,"column":1,"offset":14582},"end":{"line":690,"column":273,"offset":14854},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"os\"\n  \"io\"\n)\n\nfunc main() {\n  resp, err := http.Get(\"https://google.com\")\n  if err != nil {\n    fmt.Println(\"Error:\", err)\n    os.Exit(1)\n  }\n\n  // Updated code to simplify the process and print the resp.Body to Stdout\n  io.Copy(os.Stdout, resp.Body)\n}","position":{"start":{"line":692,"column":1,"offset":14856},"end":{"line":712,"column":4,"offset":15165},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With everything that we have learned so far about how ","position":{"start":{"line":714,"column":1,"offset":15167},"end":{"line":714,"column":55,"offset":15221},"indent":[]}},{"type":"inlineCode","value":"io.Copy","position":{"start":{"line":714,"column":55,"offset":15221},"end":{"line":714,"column":64,"offset":15230},"indent":[]}},{"type":"text","value":" works, let's create something that implements the ","position":{"start":{"line":714,"column":64,"offset":15230},"end":{"line":714,"column":115,"offset":15281},"indent":[]}},{"type":"inlineCode","value":"Writer","position":{"start":{"line":714,"column":115,"offset":15281},"end":{"line":714,"column":123,"offset":15289},"indent":[]}},{"type":"text","value":" interface:","position":{"start":{"line":714,"column":123,"offset":15289},"end":{"line":714,"column":134,"offset":15300},"indent":[]}}],"position":{"start":{"line":714,"column":1,"offset":15167},"end":{"line":714,"column":134,"offset":15300},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"os\"\n  \"io\"\n)\n\ntype logWriter struct {}\n\nfunc main() {\n  resp, err := http.Get(\"https://google.com\")\n  if err != nil {\n    fmt.Println(\"Error:\", err)\n    os.Exit(1)\n  }\n\n  lw := logWriter{}\n\n  // Updated code to simplify the process and print the resp.Body to Stdout\n  io.Copy(lw, resp.Body)\n}\n\nfunc (logWriter) Write(bs []byte) (int, error) {\n  fmt.Println(string(bs))\n  fmt.Println(\"Just wrote this many bytes\", len(bs))\n  return len(bs), nil\n}","position":{"start":{"line":716,"column":1,"offset":15302},"end":{"line":746,"column":4,"offset":15804},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Channels and Go Routines","position":{"start":{"line":748,"column":4,"offset":15809},"end":{"line":748,"column":28,"offset":15833},"indent":[]}}],"position":{"start":{"line":748,"column":1,"offset":15806},"end":{"line":748,"column":28,"offset":15833},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Both channels and go routines are used for cocurrency programming.","position":{"start":{"line":750,"column":1,"offset":15835},"end":{"line":750,"column":67,"offset":15901},"indent":[]}}],"position":{"start":{"line":750,"column":1,"offset":15835},"end":{"line":750,"column":67,"offset":15901},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The project for this particular example will use a status checker.","position":{"start":{"line":752,"column":1,"offset":15903},"end":{"line":752,"column":67,"offset":15969},"indent":[]}}],"position":{"start":{"line":752,"column":1,"offset":15903},"end":{"line":752,"column":67,"offset":15969},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/gitgoodclub/image/upload/v1550533610/developer-notes/Screen_Shot_2019-02-19_at_9.59.38_am.png","alt":"Project layout","position":{"start":{"line":754,"column":1,"offset":15971},"end":{"line":754,"column":140,"offset":16110},"indent":[]}}],"position":{"start":{"line":754,"column":1,"offset":15971},"end":{"line":754,"column":140,"offset":16110},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\"http://google.com\", \"http://amazon.com\", \"http://facebook.com\"}\n\n  for _, link := range ws {\n    checkLink(link)\n  }\n}\n\n// this implementation will be synchronous\nfunc checkLink(link string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n}","position":{"start":{"line":756,"column":1,"offset":16112},"end":{"line":781,"column":4,"offset":16517},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we think of the main function as the ","position":{"start":{"line":783,"column":1,"offset":16519},"end":{"line":783,"column":41,"offset":16559},"indent":[]}},{"type":"inlineCode","value":"main go routine","position":{"start":{"line":783,"column":41,"offset":16559},"end":{"line":783,"column":58,"offset":16576},"indent":[]}},{"type":"text","value":", we can start to imagine the above working sequentially as a result. In order to create new go routines, we can use the keyword ","position":{"start":{"line":783,"column":58,"offset":16576},"end":{"line":783,"column":187,"offset":16705},"indent":[]}},{"type":"inlineCode","value":"go","position":{"start":{"line":783,"column":187,"offset":16705},"end":{"line":783,"column":191,"offset":16709},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":783,"column":191,"offset":16709},"end":{"line":783,"column":192,"offset":16710},"indent":[]}}],"position":{"start":{"line":783,"column":1,"offset":16519},"end":{"line":783,"column":192,"offset":16710},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  for _, link := range ws {\n    // creates new Go routine\n    go checkLink(link)\n  }\n}\n\n// this implementation will be synchronous\nfunc checkLink(link string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n}","position":{"start":{"line":785,"column":1,"offset":16712},"end":{"line":815,"column":4,"offset":17166},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Go Scheduler Behind The Scenes","position":{"start":{"line":817,"column":5,"offset":17172},"end":{"line":817,"column":35,"offset":17202},"indent":[]}}],"position":{"start":{"line":817,"column":1,"offset":17168},"end":{"line":817,"column":35,"offset":17202},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/gitgoodclub/image/upload/v1550533611/developer-notes/Screen_Shot_2019-02-19_at_10.46.20_am.png","alt":"Go scheduler","position":{"start":{"line":819,"column":1,"offset":17204},"end":{"line":819,"column":139,"offset":17342},"indent":[]}}],"position":{"start":{"line":819,"column":1,"offset":17204},"end":{"line":819,"column":139,"offset":17342},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Not that with one CPU, the Go scheduler runs ","position":{"start":{"line":821,"column":1,"offset":17344},"end":{"line":821,"column":46,"offset":17389},"indent":[]}},{"type":"inlineCode","value":"one","position":{"start":{"line":821,"column":46,"offset":17389},"end":{"line":821,"column":51,"offset":17394},"indent":[]}},{"type":"text","value":" routine until finished or hits a blocking call. If a blocking call is hit, the scheduler pausing execution on a routine and starts the next one.","position":{"start":{"line":821,"column":51,"offset":17394},"end":{"line":821,"column":196,"offset":17539},"indent":[]}}],"position":{"start":{"line":821,"column":1,"offset":17344},"end":{"line":821,"column":196,"offset":17539},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we insteads have multiple cores, the scheduler runs one thread on each \"logical\" core. This then truly runs multiple routines at the same time.","position":{"start":{"line":823,"column":1,"offset":17541},"end":{"line":823,"column":147,"offset":17687},"indent":[]}}],"position":{"start":{"line":823,"column":1,"offset":17541},"end":{"line":823,"column":147,"offset":17687},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default, Go tries to use one core.","position":{"start":{"line":825,"column":1,"offset":17689},"end":{"line":825,"column":38,"offset":17726},"indent":[]}}],"position":{"start":{"line":825,"column":1,"offset":17689},"end":{"line":825,"column":38,"offset":17726},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In Go, you will constantly see ","position":{"start":{"line":827,"column":1,"offset":17728},"end":{"line":827,"column":32,"offset":17759},"indent":[]}},{"type":"inlineCode","value":"concurrency is not parallelism","position":{"start":{"line":827,"column":32,"offset":17759},"end":{"line":827,"column":64,"offset":17791},"indent":[]}},{"type":"text","value":". Concurrency is the case of multiple threads executing code. ","position":{"start":{"line":827,"column":64,"offset":17791},"end":{"line":827,"column":126,"offset":17853},"indent":[]}}],"position":{"start":{"line":827,"column":1,"offset":17728},"end":{"line":827,"column":126,"offset":17853},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If one thread blocks, another one is picked up and worked out. Parallelism is the use of multiple physical CPU cores at the same time.","position":{"start":{"line":829,"column":1,"offset":17855},"end":{"line":829,"column":135,"offset":17989},"indent":[]}}],"position":{"start":{"line":829,"column":1,"offset":17855},"end":{"line":829,"column":135,"offset":17989},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Returning from Go routines","position":{"start":{"line":831,"column":5,"offset":17995},"end":{"line":831,"column":31,"offset":18021},"indent":[]}}],"position":{"start":{"line":831,"column":1,"offset":17991},"end":{"line":831,"column":31,"offset":18021},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In order to get back to the ","position":{"start":{"line":833,"column":1,"offset":18023},"end":{"line":833,"column":29,"offset":18051},"indent":[]}},{"type":"inlineCode","value":"main","position":{"start":{"line":833,"column":29,"offset":18051},"end":{"line":833,"column":35,"offset":18057},"indent":[]}},{"type":"text","value":" routine from child routines, we need to update the code to handle channels for communication.","position":{"start":{"line":833,"column":35,"offset":18057},"end":{"line":833,"column":129,"offset":18151},"indent":[]}}],"position":{"start":{"line":833,"column":1,"offset":18023},"end":{"line":833,"column":129,"offset":18151},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Each ","position":{"start":{"line":835,"column":1,"offset":18153},"end":{"line":835,"column":6,"offset":18158},"indent":[]}},{"type":"inlineCode","value":"channel","position":{"start":{"line":835,"column":6,"offset":18158},"end":{"line":835,"column":15,"offset":18167},"indent":[]}},{"type":"text","value":" communicates with a particular type - something incredibly important.","position":{"start":{"line":835,"column":15,"offset":18167},"end":{"line":835,"column":85,"offset":18237},"indent":[]}}],"position":{"start":{"line":835,"column":1,"offset":18153},"end":{"line":835,"column":85,"offset":18237},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Sending Data with Channels","position":{"start":{"line":838,"column":5,"offset":18244},"end":{"line":838,"column":31,"offset":18270},"indent":[]}}],"position":{"start":{"line":838,"column":1,"offset":18240},"end":{"line":838,"column":31,"offset":18270},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Syntax","position":{"start":{"line":840,"column":3,"offset":18274},"end":{"line":840,"column":9,"offset":18280},"indent":[]}}],"position":{"start":{"line":840,"column":3,"offset":18274},"end":{"line":840,"column":28,"offset":18299},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Action","position":{"start":{"line":840,"column":31,"offset":18302},"end":{"line":840,"column":37,"offset":18308},"indent":[]}}],"position":{"start":{"line":840,"column":31,"offset":18302},"end":{"line":840,"column":122,"offset":18393},"indent":[]}}],"position":{"start":{"line":840,"column":1,"offset":18272},"end":{"line":840,"column":124,"offset":18395},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"channel <- 5","position":{"start":{"line":842,"column":3,"offset":18522},"end":{"line":842,"column":17,"offset":18536},"indent":[]}}],"position":{"start":{"line":842,"column":3,"offset":18522},"end":{"line":842,"column":28,"offset":18547},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Send value 5 into this channel","position":{"start":{"line":842,"column":31,"offset":18550},"end":{"line":842,"column":61,"offset":18580},"indent":[]}}],"position":{"start":{"line":842,"column":31,"offset":18550},"end":{"line":842,"column":122,"offset":18641},"indent":[]}}],"position":{"start":{"line":842,"column":1,"offset":18520},"end":{"line":842,"column":124,"offset":18643},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"myNumber <- channel","position":{"start":{"line":843,"column":3,"offset":18646},"end":{"line":843,"column":24,"offset":18667},"indent":[]}}],"position":{"start":{"line":843,"column":3,"offset":18646},"end":{"line":843,"column":28,"offset":18671},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Wait for value to be sent into the channel. When we get one, assign the value to 'myNumber'","position":{"start":{"line":843,"column":31,"offset":18674},"end":{"line":843,"column":122,"offset":18765},"indent":[]}}],"position":{"start":{"line":843,"column":31,"offset":18674},"end":{"line":843,"column":122,"offset":18765},"indent":[]}}],"position":{"start":{"line":843,"column":1,"offset":18644},"end":{"line":843,"column":124,"offset":18767},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"fmt.Println(<- channel)","position":{"start":{"line":844,"column":3,"offset":18770},"end":{"line":844,"column":28,"offset":18795},"indent":[]}}],"position":{"start":{"line":844,"column":3,"offset":18770},"end":{"line":844,"column":28,"offset":18795},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Wait for value to be sent into channel. When we get one, log it out immediately","position":{"start":{"line":844,"column":31,"offset":18798},"end":{"line":844,"column":110,"offset":18877},"indent":[]}}],"position":{"start":{"line":844,"column":31,"offset":18798},"end":{"line":844,"column":122,"offset":18889},"indent":[]}}],"position":{"start":{"line":844,"column":1,"offset":18768},"end":{"line":844,"column":124,"offset":18891},"indent":[]}}],"position":{"start":{"line":840,"column":1,"offset":18272},"end":{"line":844,"column":124,"offset":18891},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"One of the challenging concepts with channels is that each message coming back from a channel is also ","position":{"start":{"line":846,"column":1,"offset":18893},"end":{"line":846,"column":103,"offset":18995},"indent":[]}},{"type":"inlineCode","value":"blocking","position":{"start":{"line":846,"column":103,"offset":18995},"end":{"line":846,"column":113,"offset":19005},"indent":[]}},{"type":"text","value":" code. This means that for every iteration that uses a channel, it is important to have the appropriate amount of receivers ready on the main routine.","position":{"start":{"line":846,"column":113,"offset":19005},"end":{"line":846,"column":263,"offset":19155},"indent":[]}}],"position":{"start":{"line":846,"column":1,"offset":18893},"end":{"line":846,"column":263,"offset":19155},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  // creating a channel\n  c := make(chan string)\n\n  for _, link := range ws {\n    // creates new Go routine - pass in a channel link\n    go checkLink(link, c)\n  }\n\n  // note that to receive, we need to handle all changes\n  // this is creating an infinite loop for all go routines receiving a value\n  for {\n    go checkLink(<-c, c)\n  }\n}\n\n// this implementation will be synchronous\n// you must now declare the channel and channel type\nfunc checkLink(link string, c chan string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    c <- link\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n  c <- link\n}","position":{"start":{"line":848,"column":1,"offset":19157},"end":{"line":890,"column":4,"offset":19955},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Alternative loop syntax","position":{"start":{"line":892,"column":5,"offset":19961},"end":{"line":892,"column":28,"offset":19984},"indent":[]}}],"position":{"start":{"line":892,"column":1,"offset":19957},"end":{"line":892,"column":28,"offset":19984},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So we don't want to continually ping a request, we can update the control loop with the following:","position":{"start":{"line":894,"column":1,"offset":19986},"end":{"line":894,"column":99,"offset":20084},"indent":[]}}],"position":{"start":{"line":894,"column":1,"offset":19986},"end":{"line":894,"column":99,"offset":20084},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  // creating a channel\n  c := make(chan string)\n\n  for _, link := range ws {\n    // creates new Go routine - pass in a channel link\n    go checkLink(link, c)\n  }\n\n  // note that to receive, we need to handle all changes\n  // this is creating an infinite loop for all go routines receiving a value\n  // this range loop is equivalent to the above for loop\n  for l := range c {\n    go checkLink(l, c)\n  }\n}\n\n// this implementation will be synchronous\n// you must now declare the channel and channel type\nfunc checkLink(link string, c chan string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    c <- link\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n  c <- link\n}","position":{"start":{"line":896,"column":1,"offset":20086},"end":{"line":939,"column":4,"offset":20952},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Sleeping a routine","position":{"start":{"line":941,"column":5,"offset":20958},"end":{"line":941,"column":23,"offset":20976},"indent":[]}}],"position":{"start":{"line":941,"column":1,"offset":20954},"end":{"line":941,"column":23,"offset":20976},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We sleep a routine in order to generate a pause.","position":{"start":{"line":943,"column":1,"offset":20978},"end":{"line":943,"column":49,"offset":21026},"indent":[]}}],"position":{"start":{"line":943,"column":1,"offset":20978},"end":{"line":943,"column":49,"offset":21026},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n  \"io/http\"\n  \"time\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  // creating a channel\n  c := make(chan string)\n\n  for _, link := range ws {\n    // creates new Go routine - pass in a channel link\n    go checkLink(link, c)\n  }\n\n  // note that to receive, we need to handle all changes\n  // this is creating an infinite loop for all go routines receiving a value\n  // this range loop is equivalent to the above for loop\n  for l := range c {\n    // invoke function literal\n    // ensure to pass the argument to have a copy in memory\n    go func(link string) {\n      time.Sleep(5*time.Second)\n      checkLink(link, c)\n    }(l)\n  }\n}\n\n// this implementation will be synchronous\n// you must now declare the channel and channel type\nfunc checkLink(link string, c chan string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    c <- link\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n  c <- link\n}","position":{"start":{"line":945,"column":1,"offset":21028},"end":{"line":994,"column":4,"offset":22064},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":996,"column":1,"offset":22066},"end":{"line":996,"column":31,"offset":22096},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":996,"column":31,"offset":22096}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"the-complete-go-developer-guide\"\n    }}>{`The Complete Go Developer Guide`}</h1>\n    <h2 {...{\n      \"id\": \"intro-to-the-go-cli\"\n    }}>{`Intro to the Go CLI`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Command`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Action`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go build`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Compiles go source files`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go run`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Compiles and executes one or two files`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go fmt`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Formats all go code in current directory`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go install`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Compiles and \"installs\" a package`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go get`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Downloads the raw source code of someone else's pacakge`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`go test`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Runs any tests associated with the current project`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"hello-world\"\n    }}>{`Hello World`}</h2>\n    <p>{`Using the Go CLI, we can run a simple hello world as so.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\n/**\n * Basic hello world.\n * Run using go -o\n */\nfunc main() {\n  fmt.Println(\"Hi there!\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"go-packages\"\n    }}>{`Go Packages`}</h2>\n    <p>{`When you see lines like `}<inlineCode parentName=\"p\">{`package main`}</inlineCode>{`, that's like a workspace. `}</p>\n    <p>{`There are two types of packages in Golang: `}</p>\n    <ol>\n      <li parentName=\"ol\">{`Executable: Generates a file that we can run.`}</li>\n      <li parentName=\"ol\">{`Reuseable: Code used as \"helpers\" -- a good place to put reusable login.`}</li>\n    </ol>\n    <p>{`Take for example three files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"Hi there!\")\n}\n\n// support.go\npackage main\n\nfunc support() {\n  fmt.Println(\"Hi support!\")\n}\n\n// helper.go\npackage main\n\nfunc helper() {\n  fmt.Println(\"Hi helper!\")\n}\n`}</code></pre>\n    <p>{`How can we tell the difference between whether we are creating a `}<inlineCode parentName=\"p\">{`executable`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`reuseable`}</inlineCode>{` type of package? It actually depends on whether you use the name `}<inlineCode parentName=\"p\">{`package main`}</inlineCode>{`. If you ran `}<inlineCode parentName=\"p\">{`go build`}</inlineCode>{` and you did not use `}<inlineCode parentName=\"p\">{`package main`}</inlineCode>{`, it will not spit out an executable file.`}</p>\n    <p>{`Any executable package also needs a func called `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"variable-declarations\"\n    }}>{`Variable Declarations`}</h2>\n    <p>{`Variables in Go can generally be inferred from the right hand side. Linters will generally help you out with this.`}</p>\n    <p>{`Shorthand declarations with initialisation can be done with `}<inlineCode parentName=\"p\">{`:=`}</inlineCode>{`, although it should be noted you can omit the `}<inlineCode parentName=\"p\">{`:`}</inlineCode>{` when declaring new values for variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nfunc main() {\n  var card string = \"Ace of spades\"\n  easierCard := \"Ace of hearts\"\n  easierCard = \"Five of Diamonds\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions-and-return-types\"\n    }}>{`Functions and Return Types`}</h2>\n    <p>{`The patter for declaring a return type is to name that return type after a func is called.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport \"fmt\"\n\nfunc main() {\n  card := newCard()\n\n  fmt.Println(card)\n}\n\nfunc newCard() string {\n  return \"Ace of spades\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"slices-and-for-loops\"\n    }}>{`Slices and For Loops`}</h2>\n    <p>{`Go has two basic structures for handling lists: `}</p>\n    <ol>\n      <li parentName=\"ol\">{`Array: fixed length list of things`}</li>\n      <li parentName=\"ol\">{`Slice: an array that can grow or shrink`}</li>\n    </ol>\n    <p>{`Every slice must also be of the same type.`}</p>\n    <p>{`For a slice, we create it like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func main() {\n  cards := []string{newCard()}\n  cards = append(cards, \"Six of Spades\")\n  \n  for i, card := range cards {\n  fmt.Println(i, card)\n  }\n}\n`}</code></pre>\n    <p>{`Note that the cards variable is immutable and a new slice is returned when we use the `}<inlineCode parentName=\"p\">{`append`}</inlineCode>{` function to add to the slice.`}</p>\n    <p>{`We can use the `}<inlineCode parentName=\"p\">{`range`}</inlineCode>{` keyword to iterate over a slice.`}</p>\n    <h2 {...{\n      \"id\": \"object-oriented-approach-vs-go-approach\"\n    }}>{`Object Oriented approach vs Go approach`}</h2>\n    <p>{`Note that there are no classes in Go.`}</p>\n    <p>{`In Go, what we do is declare a new type and then create `}<inlineCode parentName=\"p\">{`functions with a receiver`}</inlineCode>{`. This is a common pattern that repeats throughout Go courses.`}</p>\n    <p>{`In practice, we can update the `}<inlineCode parentName=\"p\">{`main.go`}</inlineCode>{` file with a new type we create:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\npackage main\n\nfunc main() {\n  cards := deck{newCard()}\n  cards = append(cards, \"Six of Spades\")\n\n  cards.print()\n}\n\nfunc newCard() string {\n  return \"Ace of spades\"\n}\n\n// deck.go\npackage main\n\nimport \"fmt\"\n\n// Create a new type of 'deck'\n// which is a slice of strings\ntype deck []string\n\n// Creating a receiver function\nfunc (d deck) print() {\n  for i, card := range d {\n  fmt.Println(i, card)\n  }\n}\n`}</code></pre>\n    <p>{`It is important to note that if your other `}<inlineCode parentName=\"p\">{`package main`}</inlineCode>{` files are not in the `}<inlineCode parentName=\"p\">{`$GOPATH`}</inlineCode>{` that you need to include them during your run state ie `}<inlineCode parentName=\"p\">{`go run main.go deck.go`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"slice-range-syntax\"\n    }}>{`Slice range syntax`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// [StartingAt : UpToButNotInclusive]\nslice := [\"one\", \"two\", \"three\"]\n// Get \"one\", \"two\"\nsliceRange := slice[0:2]\n// Same as...\nsliceRangeTwo  := [:2]\n// Get just the last\nsliceRangeThree := [2:]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"returning-multiple-values\"\n    }}>{`Returning multiple values`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Use slices\nfunc deal(d deck, handSize int) (deck, deck) {\n  return d[:handSize], d[handSize:]\n}\n\nfunc main() {\n  cards := newDeck()\n\n  // init and assign return values\n  hand, remainingDeck := deal(cards, 5)\n  hand.print()\n  remainingDeck.print()\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"converting-to-bite-slices-type-conversion\"\n    }}>{`Converting to bite slices (type conversion)`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`byteSlice := []byte(\"Hi there\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-to-file\"\n    }}>{`Writing to file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\npackage main\n\nfunc main() {\n  cards := newDeck()\n  cards.saveToFile(\"my_cards\")\n}\n\n// deck.go\n\n// omit newDeck()\nfunc (d deck) saveToFile(filename string) error {\n   return ioutil.WriteFile(filename, []byte(d.toString()), 0666)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reading-from-hard-drive\"\n    }}>{`Reading from hard drive`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\n// main.go\npackage main\n\nfunc main() {\n  cards := newDeckFromFile(\"my_cards\")\n  cards.print()\n}\n\n// deck.go\nfunc newDeckFromFile(filename string) deck {\n    // bs = byteSlice\n    bs, err := ioutil.ReadFile(filename)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        os.Exit(1)\n    }\n\n    s := strings.Split(string(bs), \",\")\n    return deck(s)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shuffling-a-deck\"\n    }}>{`Shuffling a Deck`}</h2>\n    <p>{`There is no inbuilt function to randomise a slice.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// main.go\npackage main\nimport (\n  \"math/rand\"\n  \"time\"\n)\n\n// Use slices\nfunc deal(d deck, handSize int) (deck, deck) {\n  return d[:handSize], d[handSize:]\n}\n\nfunc (d deck) shuffle() {\n  source := rand.NewSource(time.Now().UnixNano())\n  r := rand.New(source)\n\n  for i := range d {\n    newPosition := r.Intn(len(d) - 1)\n\n    // fancy one line swap\n    d[i], d[newPosition] = d[newPosition], d[i]\n  }\n}\n\nfunc main() {\n   func main() {\n     cards := newDeck()\n\n     // init and assign return values\n     cards.shuffle()\n     cards.print()\n   }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"testing-with-go\"\n    }}>{`Testing with Go`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// deck_test.go\npackage main\n\nimport \"testing\"\n\nfunc TestNewDeck(t *testing.T) {\n  d := newDeck()\n\n  if len(d) != 16 {\n    t.Errorf(\"Expected deck length of 16, but got %v\", len(d))\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"asserting-elements\"\n    }}>{`Asserting Elements`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// deck_test.go\npackage main\n\nimport \"testing\"\n\nfunc TestNewDeck(t *testing.T) {\n  d := newDeck()\n\n  if len(d) != 16 {\n    t.Errorf(\"Expected deck length of 16, but got %v\", len(d))\n  }\n\n  if d[0] != \"Ace of Spaces\" {\n    t.Errorf(\"Expected first card of Ace of Spaces, but got %v\", d[0]);\n  }\n\n  if d[len(d-1)] != \"Four of Clubs\" {\n    t.Errorf(\"Expected first card of Four of Clubs, but got %v\", d[len(d-1)]);\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"clean-up-for-file-writing\"\n    }}>{`Clean up for file writing`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// deck_test.go\npackage main\n\nimport (\n  \"testing\"\n  \"os\"\n)\n\nfunc TestNewDeck(t *testing.T) {\n  d := newDeck()\n\n  if len(d) != 16 {\n    t.Errorf(\"Expected deck length of 16, but got %v\", len(d))\n  }\n\n  if d[0] != \"Ace of Spaces\" {\n    t.Errorf(\"Expected first card of Ace of Spaces, but got %v\", d[0]);\n  }\n\n  if d[len(d-1)] != \"Four of Clubs\" {\n    t.Errorf(\"Expected first card of Four of Clubs, but got %v\", d[len(d-1)]);\n  }\n}\n\n// although long name, the test \nfunc TestSaveToDeckAndNewDeckFromFile(t *testing.T) {\n  os.Remove(\"_decktesting\")\n\n  d := new Deck()\n  d.saveToFile(\"_decktesting\")\n\n  loadedDeck := newDeckFromFile(\"_decktesting\")\n\n  if len(loadedDeck) != 16 {\n    t.Errorf(\"Expected 16 cards in deck, got %v\", len(loadedDeck))\n  }\n\n  os.Remove(\"_decktesting\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"structs-in-go\"\n    }}>{`Structs in Go`}</h2>\n    <p>{`Structs are a collection of different properties linked with a particular purpose.`}</p>\n    <p>{`If we want to convert the string \"Ace of Spaces\" to become more flexible and as a structure, we could create a struct:`}</p>\n    <p>{`If you init a struct with no values, the zero values are assigned as the following:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Zero Value`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\"\"`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`int`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`float`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`bool`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type card struct {\n  house string\n  value string\n}\n\n// usage\nfunc main() {\n  card := card{\"Spaces\", \"Ace\"}\n  // being more definitive\n  cardTwo := card{house: \"Spaces\", value: \"Ace\"}\n  fmt.Println(card)\n\n  // non-init - sets the zero value\n  // %+v will print out all field names and values\n  var cardThree card\n  fmt.Printf(\"%+v\", cardThree)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"embedding-structs\"\n    }}>{`Embedding Structs`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type contactInfo struct {\n  email string\n  zipCode int\n}\n\ntype person struct {\n  firstName string\n  lastName string\n  contactInfo\n}\n\nfunc main() {\n  jim := person{\n    firstName: \"Jim\",\n    lastName: \"Party\",\n    contactInfo: contactInfo{\n      email: \"jim@gmail.com\",\n      zipCode: 94000\n    }\n  }\n\n  fmt.Printf(\"%+v\", jim)\n  // same as\n  jim.print()\n\n  // Update name\n  jim.updateNameIncorrect(\"jimmy\")\n  jim.print() // still shows jim instead of jimmy\n\n  // Correct\n  jimPointer := &jim\n  jimPointer.updateName(\"jimmy\")\n  jim.print() // prints jimmy\n\n  // Also works - shortcut for the receiver\n  jim.updatename(\"jimmy\")\n  jim.print()\n}\n\nfunc (p person) print() {\n  fmt.Printf(\"%+v\", p)\n}\n\n// updateName without a pointer\nfunc (p person) updateNameIncorrect(newFirstName string) {\n  p.firstName = newFirstname\n}\n\n// updateName correctly\n// note that taking *type means we're working with a pointer\n// *variable means we want to manipulate the value it is pointing at\nfunc (p *person) updateName(newFirstName string) {\n  (*p).firstName = newFirstname\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointer-operations\"\n    }}>{`Pointer operations`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Turn `}<inlineCode parentName=\"li\">{`address`}</inlineCode>{` into `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` with `}<inlineCode parentName=\"li\">{`*address`}</inlineCode></li>\n      <li parentName=\"ul\">{`Turn `}<inlineCode parentName=\"li\">{`value`}</inlineCode>{` into `}<inlineCode parentName=\"li\">{`address`}</inlineCode>{` with `}<inlineCode parentName=\"li\">{`&value`}</inlineCode></li>\n      <li parentName=\"ul\">{`Note that with slices vs structs, you can manipulate the slice directly without having to use a pointer, unlike structs.`}</li>\n      <li parentName=\"ul\">{`Slices with the underlying array get copied, but the array points to the same addresses.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"reference-vs-value-types\"\n    }}>{`Reference vs Value Types`}</h3>\n    <p>{`Use pointers for value types, don't worry about it for reference types.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Value types`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Reference types`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`int`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`slices`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`float`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maps`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`channels`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`bool`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`pointers`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`structs`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`functions`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"maps\"\n    }}>{`Maps`}</h2>\n    <p>{`Maps are similar to structs, but have some differences. These are basically `}<inlineCode parentName=\"p\">{`key:value`}</inlineCode>{` pairs.`}</p>\n    <p>{`These are comparable to `}<inlineCode parentName=\"p\">{`hash`}</inlineCode>{` in Ruby, `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{` in JavaScript or `}<inlineCode parentName=\"p\">{`Dict`}</inlineCode>{` in Python.`}</p>\n    <p>{`For a map, the keys all need to be the same type, and the values all need to be the same type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"fmt\n)\n\nfunc main() {\n  // map: declare new map\n  // [string]: keys are type string\n  // string: values are type string\n  colors := map[string]string {\n    \"red\": \"#ff0000\",\n    \"green\": \"#4b9000\"\n  }\n\n  fmt.Println(colors)\n}\n`}</code></pre>\n    <p>{`Creating a zero value map can be done basically in two ways:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`var colors map[string]string\ncolorsEq = make(map[string]string)\n\n// adding in values\ncolorsEq[\"white\"] = \"#ffffff\"\n`}</code></pre>\n    <p>{`We MUST use square braces to access map values, NOT dot notation.`}</p>\n    <h2 {...{\n      \"id\": \"iterating-over-maps\"\n    }}>{`Iterating Over Maps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`colors := map[string]string {\n  \"red\": \"#ff0000\",\n  \"green\": \"#4b9000\"\n}\n\n\nfunc printMap(c map[string]string) {\n  for color, hex := range c {\n    fmt.Println(\"Hex code for\", color, \"is\", hex)\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"maps-vs-structs\"\n    }}>{`Maps Vs Structs`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Maps`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Structs`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All keys must be same type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Values can be different types`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use to represent a collection of related properties`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Need to know all the different fields at compile time`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`All values must be the same type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Keys don't support indexing`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Don't need to know all keys at compile time`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use to represent a `}<inlineCode parentName=\"td\">{`thing`}</inlineCode>{` with a lot of properties`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Keys are indexed - can iterate over them`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Value type!`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Reference type !`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h2>\n    <p>{`The following example shows similar types but returning different values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\ntype englishBot struct {}\ntype spanishBot struct {}\n\n//\ntype bot interface {\n  getGreeting() string\n}\n\nfunc main() {\n  eb := englishBot()\n  sb := spanishBot()\n\n  printGreeting(eb)\n  printGreeting(sb)\n}\n\nfunc (eb englishBot) getGreeting() string {\n  // assume very custom logic to prove diff to spanishBot\n  return \"Hi There!\"\n}\n\nfunc (sb spanishBot) getGreeting() string {\n  // assume very custom logic to prove diff to spanishBot\n  return \"Hola!\"\n}\n\n// any type that implements getGreeting is now an \"honorary\" member of type bot\nfunc printGreet(b bot) {\n  fmt.Println(b.getGreeting())\n}\n`}</code></pre>\n    <p>{`More complex interfaces in Go might have signatures like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type bot interface {\n  getGreeting(string,int) (string, error)\n}\n`}</code></pre>\n    <p>{`If you want to set more \"qualifiers\" to conform to the interface, you can add more methods to the signature:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type bot interface {\n  getGreeting(string,int) (string, error)\n  getBotVersion() float64\n  respondToUser(user) string\n}\n`}</code></pre>\n    <p>{`You can only create values out of the concrete types and not interface types.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Interfaces are not generic types (other langs have them, Go famously does not).`}</li>\n      <li parentName=\"ul\">{`Interfaces are \"implicit\", we don't have to say a custom type satisfies some interface.`}</li>\n      <li parentName=\"ul\">{`Interfaces are a contract to help us manage types.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"http-package\"\n    }}>{`HTTP Package`}</h2>\n    <p>{`Using http and getting a body response back and helping us understanding how structs work a little better.`}</p>\n    <p><img alt=\"Diagram of how to access return body\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550201024/developer-notes/Screen_Shot_2019-02-15_at_2.22.59_pm.png\" /></p>\n    <p>{`If we use an interface as a property of a struct, we can add any property there as long as it conforms to the interface.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type example interface {\n  Reader\n}\n\ntype resp struct {\n  propOne example\n}\n`}</code></pre>\n    <p>{`We can also assemble multiple interfaces together to create another interface where all requirements need to be satisfied:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`type reader interface {}\ntype closer interface {}\n\ntype readCloser interface {\n  reader\n  closer\n}\n`}</code></pre>\n    <p>{`For an application of this in action with the http.Get func:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"os\"\n  \"io\"\n)\n\nfunc main() {\n  resp, err := http.Get(\"https://google.com\")\n  if err != nil {\n    fmt.Println(\"Error:\", err)\n    os.Exit(1)\n  }\n\n  // Note: Reader interface manipulates byte slice -- it doesn't return it. Go also has easier help functions to simply reading responses.\n  bs := make([]byte, 99999)\n  resp.Body.Read(bs)\n  fmt.Println(string(bs))\n}\n`}</code></pre>\n    <p>{`In order to prevent ourselves from having to manually create a byte slice each time, we can use the `}<inlineCode parentName=\"p\">{`io.Copy`}</inlineCode>{` function instead. The method signature for this requires a destination that implements the `}<inlineCode parentName=\"p\">{`Writer`}</inlineCode>{` interface and a source that implements the `}<inlineCode parentName=\"p\">{`Reader`}</inlineCode>{` interface.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"os\"\n  \"io\"\n)\n\nfunc main() {\n  resp, err := http.Get(\"https://google.com\")\n  if err != nil {\n    fmt.Println(\"Error:\", err)\n    os.Exit(1)\n  }\n\n  // Updated code to simplify the process and print the resp.Body to Stdout\n  io.Copy(os.Stdout, resp.Body)\n}\n`}</code></pre>\n    <p>{`With everything that we have learned so far about how `}<inlineCode parentName=\"p\">{`io.Copy`}</inlineCode>{` works, let's create something that implements the `}<inlineCode parentName=\"p\">{`Writer`}</inlineCode>{` interface:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"os\"\n  \"io\"\n)\n\ntype logWriter struct {}\n\nfunc main() {\n  resp, err := http.Get(\"https://google.com\")\n  if err != nil {\n    fmt.Println(\"Error:\", err)\n    os.Exit(1)\n  }\n\n  lw := logWriter{}\n\n  // Updated code to simplify the process and print the resp.Body to Stdout\n  io.Copy(lw, resp.Body)\n}\n\nfunc (logWriter) Write(bs []byte) (int, error) {\n  fmt.Println(string(bs))\n  fmt.Println(\"Just wrote this many bytes\", len(bs))\n  return len(bs), nil\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"channels-and-go-routines\"\n    }}>{`Channels and Go Routines`}</h2>\n    <p>{`Both channels and go routines are used for cocurrency programming.`}</p>\n    <p>{`The project for this particular example will use a status checker.`}</p>\n    <p><img alt=\"Project layout\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550533610/developer-notes/Screen_Shot_2019-02-19_at_9.59.38_am.png\" /></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\"http://google.com\", \"http://amazon.com\", \"http://facebook.com\"}\n\n  for _, link := range ws {\n    checkLink(link)\n  }\n}\n\n// this implementation will be synchronous\nfunc checkLink(link string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n}\n`}</code></pre>\n    <p>{`If we think of the main function as the `}<inlineCode parentName=\"p\">{`main go routine`}</inlineCode>{`, we can start to imagine the above working sequentially as a result. In order to create new go routines, we can use the keyword `}<inlineCode parentName=\"p\">{`go`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  for _, link := range ws {\n    // creates new Go routine\n    go checkLink(link)\n  }\n}\n\n// this implementation will be synchronous\nfunc checkLink(link string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"go-scheduler-behind-the-scenes\"\n    }}>{`Go Scheduler Behind The Scenes`}</h3>\n    <p><img alt=\"Go scheduler\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1550533611/developer-notes/Screen_Shot_2019-02-19_at_10.46.20_am.png\" /></p>\n    <p>{`Not that with one CPU, the Go scheduler runs `}<inlineCode parentName=\"p\">{`one`}</inlineCode>{` routine until finished or hits a blocking call. If a blocking call is hit, the scheduler pausing execution on a routine and starts the next one.`}</p>\n    <p>{`If we insteads have multiple cores, the scheduler runs one thread on each \"logical\" core. This then truly runs multiple routines at the same time.`}</p>\n    <p>{`By default, Go tries to use one core.`}</p>\n    <p>{`In Go, you will constantly see `}<inlineCode parentName=\"p\">{`concurrency is not parallelism`}</inlineCode>{`. Concurrency is the case of multiple threads executing code. `}</p>\n    <p>{`If one thread blocks, another one is picked up and worked out. Parallelism is the use of multiple physical CPU cores at the same time.`}</p>\n    <h3 {...{\n      \"id\": \"returning-from-go-routines\"\n    }}>{`Returning from Go routines`}</h3>\n    <p>{`In order to get back to the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` routine from child routines, we need to update the code to handle channels for communication.`}</p>\n    <p>{`Each `}<inlineCode parentName=\"p\">{`channel`}</inlineCode>{` communicates with a particular type - something incredibly important.`}</p>\n    <h3 {...{\n      \"id\": \"sending-data-with-channels\"\n    }}>{`Sending Data with Channels`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Syntax`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Action`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`channel <- 5`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Send value 5 into this channel`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`myNumber <- channel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Wait for value to be sent into the channel. When we get one, assign the value to 'myNumber'`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fmt.Println(<- channel)`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Wait for value to be sent into channel. When we get one, log it out immediately`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`One of the challenging concepts with channels is that each message coming back from a channel is also `}<inlineCode parentName=\"p\">{`blocking`}</inlineCode>{` code. This means that for every iteration that uses a channel, it is important to have the appropriate amount of receivers ready on the main routine.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  // creating a channel\n  c := make(chan string)\n\n  for _, link := range ws {\n    // creates new Go routine - pass in a channel link\n    go checkLink(link, c)\n  }\n\n  // note that to receive, we need to handle all changes\n  // this is creating an infinite loop for all go routines receiving a value\n  for {\n    go checkLink(<-c, c)\n  }\n}\n\n// this implementation will be synchronous\n// you must now declare the channel and channel type\nfunc checkLink(link string, c chan string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    c <- link\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n  c <- link\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"alternative-loop-syntax\"\n    }}>{`Alternative loop syntax`}</h3>\n    <p>{`So we don't want to continually ping a request, we can update the control loop with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  // creating a channel\n  c := make(chan string)\n\n  for _, link := range ws {\n    // creates new Go routine - pass in a channel link\n    go checkLink(link, c)\n  }\n\n  // note that to receive, we need to handle all changes\n  // this is creating an infinite loop for all go routines receiving a value\n  // this range loop is equivalent to the above for loop\n  for l := range c {\n    go checkLink(l, c)\n  }\n}\n\n// this implementation will be synchronous\n// you must now declare the channel and channel type\nfunc checkLink(link string, c chan string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    c <- link\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n  c <- link\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"sleeping-a-routine\"\n    }}>{`Sleeping a routine`}</h3>\n    <p>{`We sleep a routine in order to generate a pause.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n  \"io/http\"\n  \"time\"\n)\n\nfunc main() {\n  ws := []string{\n    \"http://google.com\",\n    \"http://amazon.com\",\n    \"http://facebook.com\"\n  }\n\n  // creating a channel\n  c := make(chan string)\n\n  for _, link := range ws {\n    // creates new Go routine - pass in a channel link\n    go checkLink(link, c)\n  }\n\n  // note that to receive, we need to handle all changes\n  // this is creating an infinite loop for all go routines receiving a value\n  // this range loop is equivalent to the above for loop\n  for l := range c {\n    // invoke function literal\n    // ensure to pass the argument to have a copy in memory\n    go func(link string) {\n      time.Sleep(5*time.Second)\n      checkLink(link, c)\n    }(l)\n  }\n}\n\n// this implementation will be synchronous\n// you must now declare the channel and channel type\nfunc checkLink(link string, c chan string) {\n  _, err := http.Get(link)\n  if err != nil {\n    fmt.Println(link, \"might be down!\")\n    c <- link\n    return\n  }\n\n  fmt.Println(link, \"is up!\")\n  c <- link\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}