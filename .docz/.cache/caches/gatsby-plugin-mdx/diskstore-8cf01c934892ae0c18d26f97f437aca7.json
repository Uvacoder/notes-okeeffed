{"expireTime":9007200852878380000,"key":"gatsby-plugin-mdx-entire-payload-bd5b417de2afc709d57ebef1985c53fa-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Digging Into Nodejs","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":22,"offset":188},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":22,"offset":188},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":193},"end":{"line":10,"column":13,"offset":202},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":190},"end":{"line":10,"column":13,"offset":202},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://frontendmasters.com/courses/digging-into-node/","children":[{"type":"text","value":"FE Masters Course","position":{"start":{"line":12,"column":5,"offset":208},"end":{"line":12,"column":22,"offset":225},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":207},"end":{"line":12,"column":79,"offset":282},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":207},"end":{"line":12,"column":79,"offset":282},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":204},"end":{"line":12,"column":79,"offset":282},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/substack/stream-handbook","children":[{"type":"text","value":"GitHub Stream handbook","position":{"start":{"line":13,"column":5,"offset":287},"end":{"line":13,"column":27,"offset":309},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":286},"end":{"line":13,"column":73,"offset":355},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":286},"end":{"line":13,"column":73,"offset":355},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":283},"end":{"line":13,"column":73,"offset":355},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options","children":[{"type":"text","value":"readable.pipe","position":{"start":{"line":14,"column":5,"offset":360},"end":{"line":14,"column":18,"offset":373},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":359},"end":{"line":14,"column":96,"offset":451},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":359},"end":{"line":14,"column":96,"offset":451},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":356},"end":{"line":14,"column":96,"offset":451},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/getify/caf","children":[{"type":"text","value":"Cancelable Async Functions - GitHub","position":{"start":{"line":15,"column":5,"offset":456},"end":{"line":15,"column":40,"offset":491},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":455},"end":{"line":15,"column":72,"offset":523},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":455},"end":{"line":15,"column":72,"offset":523},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":452},"end":{"line":15,"column":72,"offset":523},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":204},"end":{"line":15,"column":72,"offset":523},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Streams","position":{"start":{"line":17,"column":4,"offset":528},"end":{"line":17,"column":11,"offset":535},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":525},"end":{"line":17,"column":11,"offset":535},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are two stream modes that are known as \"simplex\" (unidirectional):","position":{"start":{"line":19,"column":1,"offset":537},"end":{"line":19,"column":73,"offset":609},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":537},"end":{"line":19,"column":73,"offset":609},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Read/readable stream that you can consume.","position":{"start":{"line":21,"column":4,"offset":614},"end":{"line":21,"column":46,"offset":656},"indent":[]}}],"position":{"start":{"line":21,"column":4,"offset":614},"end":{"line":21,"column":46,"offset":656},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":611},"end":{"line":21,"column":46,"offset":656},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Write/writeable stream that they can receive inputs and you can write to them.","position":{"start":{"line":22,"column":4,"offset":660},"end":{"line":22,"column":82,"offset":738},"indent":[]}}],"position":{"start":{"line":22,"column":4,"offset":660},"end":{"line":22,"column":82,"offset":738},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":657},"end":{"line":22,"column":82,"offset":738},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":611},"end":{"line":22,"column":82,"offset":738},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"There is also a \"duplex\" stream that is bidirectional (can be written to and read from). Duplex is not covered in this course.","position":{"start":{"line":24,"column":1,"offset":740},"end":{"line":24,"column":127,"offset":866},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":740},"end":{"line":24,"column":127,"offset":866},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var stream1; // readable\nvar stream2; // writeable\n\n// \"Take my readable stream and pipe it to my writeable\"\nvar stream3 = stream1.pipe(stream2); // chunks at a time using binary buffers","position":{"start":{"line":26,"column":1,"offset":868},"end":{"line":32,"column":4,"offset":1072},"indent":[1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Think of streams as gardens hoses that you want to be able to connect things to.","position":{"start":{"line":34,"column":3,"offset":1076},"end":{"line":34,"column":83,"offset":1156},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":1076},"end":{"line":34,"column":83,"offset":1156},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1074},"end":{"line":34,"column":83,"offset":1156},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It is important to know that a return value from a ","position":{"start":{"line":36,"column":1,"offset":1158},"end":{"line":36,"column":52,"offset":1209},"indent":[]}},{"type":"inlineCode","value":".pipe","position":{"start":{"line":36,"column":52,"offset":1209},"end":{"line":36,"column":59,"offset":1216},"indent":[]}},{"type":"text","value":" call stream is another readable stream.","position":{"start":{"line":36,"column":59,"offset":1216},"end":{"line":36,"column":99,"offset":1256},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1158},"end":{"line":36,"column":99,"offset":1256},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This also means that we can keep chaining and piping as many writables as possible as possible.","position":{"start":{"line":38,"column":1,"offset":1258},"end":{"line":38,"column":96,"offset":1353},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1258},"end":{"line":38,"column":96,"offset":1353},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var stream1; // readable\nvar stream2; // writeable\n\n// \"Take my readable stream and pipe it to my writeable\"\n// stream1 into stream2 into stream5 into final\nvar stream3 = stream1\n  .pipe(stream2)\n  .pipe(stream5)\n  .pipe(final); // chunks at a time using binary buffers","position":{"start":{"line":40,"column":1,"offset":1355},"end":{"line":50,"column":4,"offset":1642},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Creating the read stream","position":{"start":{"line":52,"column":5,"offset":1648},"end":{"line":52,"column":29,"offset":1672},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1644},"end":{"line":52,"column":29,"offset":1672},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"let stream = fs.createReadStream('path/to/file');\nprocessFile(stream);\n\nfunction processFile(inStream) {\n  var outStream = inStream;\n  var targetStream = process.stdout;\n  outStream.pipe(targetStream); // pipe to process.stdout\n}","position":{"start":{"line":54,"column":1,"offset":1674},"end":{"line":63,"column":4,"offset":1921},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"This difference here is that we don't keep the entire file in the buffer.","position":{"start":{"line":65,"column":3,"offset":1925},"end":{"line":65,"column":76,"offset":1998},"indent":[]}}],"position":{"start":{"line":65,"column":3,"offset":1925},"end":{"line":65,"column":76,"offset":1998},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1923},"end":{"line":65,"column":76,"offset":1998},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Transform Stream","position":{"start":{"line":67,"column":4,"offset":2003},"end":{"line":67,"column":20,"offset":2019},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":2000},"end":{"line":67,"column":20,"offset":2019},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// other requires omitted for brevity\nvar Transform = require('stream').transform;\n\nlet stream = fs.createReadStream('path/to/file');\nprocessFile(stream);\n\nfunction processFile(inStream) {\n  var outStream = inStream;\n\n  var upperStream = new Transform({\n    // Note: next is a callback\n    transform(chunk, enc, next) {\n      this.push(chunk.toString().toUpperCase());\n      // Only using set time out to prove stream.\n      // Normally you just call next().\n      setTimeout(next, 500);\n    },\n  });\n\n  outStream = outStream.pipe(upperStream);\n\n  var targetStream = process.stdout;\n  outStream.pipe(targetStream); // pipe to process.stdout\n}","position":{"start":{"line":69,"column":1,"offset":2021},"end":{"line":94,"column":4,"offset":2681},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Outputting to file","position":{"start":{"line":96,"column":4,"offset":2686},"end":{"line":96,"column":22,"offset":2704},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":2683},"end":{"line":96,"column":22,"offset":2704},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// other requires omitted for brevity\nvar Transform = require('stream').transform;\n\nlet stream = fs.createReadStream('path/to/file');\nprocessFile(stream);\n\nfunction processFile(inStream) {\n  var outStream = inStream;\n\n  var upperStream = new Transform({\n    // Note: next is a callback\n    transform(chunk, enc, next) {\n      this.push(chunk.toString().toUpperCase());\n      // Only using set time out to prove stream.\n      // Normally you just call next().\n      setTimeout(next, 500);\n    },\n  });\n\n  outStream = outStream.pipe(upperStream);\n\n  var targetStream;\n\n  if (args.out) {\n    targetStream = process.stdout;\n  } else {\n    targetStream = fs.createWriteStream('path/to/file');\n  }\n\n  outStream.pipe(targetStream); // pipe to process.stdout\n}","position":{"start":{"line":98,"column":1,"offset":2706},"end":{"line":130,"column":4,"offset":3476},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"gzip Compression with zlib","position":{"start":{"line":132,"column":4,"offset":3481},"end":{"line":132,"column":30,"offset":3507},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":3478},"end":{"line":132,"column":30,"offset":3507},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A common transformation is the unzip, process them, then rezipping it.","position":{"start":{"line":134,"column":1,"offset":3509},"end":{"line":134,"column":71,"offset":3579},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":3509},"end":{"line":134,"column":71,"offset":3579},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// other requires omitted for brevity\nvar Transform = require('stream').transform;\nvar zlin = require('zlip');\n\nlet stream = fs.createReadStream('path/to/file');\nprocessFile(stream);\n\nfunction processFile(inStream) {\n  var outStream = inStream;\n\n  // handling compressed files\n  if (args.uncompress) {\n    let gunzipStream = zlib.createGunzip();\n    outStream = outStream.pipe(gunzipStream);\n  }\n\n  var upperStream = new Transform({\n    // Note: next is a callback\n    transform(chunk, enc, next) {\n      this.push(chunk.toString().toUpperCase());\n      next();\n    },\n  });\n\n  outStream = outStream.pipe(upperStream);\n\n  // Compression code!\n  if (args.compress) {\n    let gzipStream = zlin.createGzip();\n    // adding additional stream\n    outStream = outStream.pipe(gzipStream);\n    // ensure name output changes\n    OUTSTREAM_NAME = `${OUTSTREAM_NAME}.gz`;\n  }\n\n  var targetStream;\n\n  if (args.out) {\n    targetStream = process.stdout;\n  } else {\n    targetStream = fs.createWriteStream('path/to/file');\n  }\n\n  outStream.pipe(targetStream); // pipe to process.stdout\n}","position":{"start":{"line":136,"column":1,"offset":3581},"end":{"line":182,"column":4,"offset":4671},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Gzip was designed for streams, that is why it is so easy.","position":{"start":{"line":184,"column":3,"offset":4675},"end":{"line":184,"column":60,"offset":4732},"indent":[]}}],"position":{"start":{"line":184,"column":3,"offset":4675},"end":{"line":184,"column":60,"offset":4732},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":4673},"end":{"line":184,"column":60,"offset":4732},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Note that for ","position":{"start":{"line":186,"column":3,"offset":4736},"end":{"line":186,"column":17,"offset":4750},"indent":[]}},{"type":"inlineCode","value":"vi out.txt.gz","position":{"start":{"line":186,"column":17,"offset":4750},"end":{"line":186,"column":32,"offset":4765},"indent":[]}},{"type":"text","value":" that Vim automatically unzips it for you!","position":{"start":{"line":186,"column":32,"offset":4765},"end":{"line":186,"column":74,"offset":4807},"indent":[]}}],"position":{"start":{"line":186,"column":3,"offset":4736},"end":{"line":186,"column":74,"offset":4807},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":4734},"end":{"line":186,"column":74,"offset":4807},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Determining End of Stream","position":{"start":{"line":188,"column":4,"offset":4812},"end":{"line":188,"column":29,"offset":4837},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":4809},"end":{"line":188,"column":29,"offset":4837},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// building a helper\nfunction streamComplete(stream) {\n  return new Promise(function c(res) {\n    stream.on('end', res);\n  });\n}\n\nasync function processFile(inStream) {\n  var outStream = inStream;\n\n  // handling compressed files\n  if (args.uncompress) {\n    let gunzipStream = zlib.createGunzip();\n    outStream = outStream.pipe(gunzipStream);\n  }\n\n  var upperStream = new Transform({\n    // Note: next is a callback\n    transform(chunk, enc, next) {\n      this.push(chunk.toString().toUpperCase());\n      next();\n    },\n  });\n\n  outStream = outStream.pipe(upperStream);\n\n  // Compression code!\n  if (args.compress) {\n    let gzipStream = zlin.createGzip();\n    // adding additional stream\n    outStream = outStream.pipe(gzipStream);\n    // ensure name output changes\n    OUTSTREAM_NAME = `${OUTSTREAM_NAME}.gz`;\n  }\n\n  var targetStream;\n\n  if (args.out) {\n    targetStream = process.stdout;\n  } else {\n    targetStream = fs.createWriteStream('path/to/file');\n  }\n\n  outStream.pipe(targetStream); // pipe to process.stdout\n\n  await streamComplete(outStream);\n}","position":{"start":{"line":190,"column":1,"offset":4839},"end":{"line":238,"column":4,"offset":5917},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Asynchronous Cancellation & Timeouts","position":{"start":{"line":240,"column":4,"offset":5922},"end":{"line":240,"column":40,"offset":5958},"indent":[]}}],"position":{"start":{"line":240,"column":1,"offset":5919},"end":{"line":240,"column":40,"offset":5958},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var CAF = require('caf');\n\nprocessFile = CAF(processFile);\n\nfunction* processFile(signal, inStream) {\n  var outStream = inStream;\n\n  // handling compressed files\n  if (args.uncompress) {\n    let gunzipStream = zlib.createGunzip();\n    outStream = outStream.pipe(gunzipStream);\n  }\n\n  var upperStream = new Transform({\n    // Note: next is a callback\n    transform(chunk, enc, next) {\n      this.push(chunk.toString().toUpperCase());\n      next();\n    },\n  });\n\n  outStream = outStream.pipe(upperStream);\n\n  // Compression code!\n  if (args.compress) {\n    let gzipStream = zlin.createGzip();\n    // adding additional stream\n    outStream = outStream.pipe(gzipStream);\n    // ensure name output changes\n    OUTSTREAM_NAME = `${OUTSTREAM_NAME}.gz`;\n  }\n\n  var targetStream;\n\n  if (args.out) {\n    targetStream = process.stdout;\n  } else {\n    targetStream = fs.createWriteStream('path/to/file');\n  }\n\n  outStream.pipe(targetStream); // pipe to process.stdout\n\n  signal.pr.catch(function f() {\n    outStream.unpipe(targetStream);\n    outStream.destroy(); // kill the stream process\n  });\n\n  yield streamComplete(outStream);\n}\n\n// later\nlet tooLong = CAF.timeout(3); // cancel at 3\nprocessFile(tooLong, stream)\n  .then(() => console.log('Complete'))\n  .catch(error);","position":{"start":{"line":242,"column":1,"offset":5960},"end":{"line":298,"column":4,"offset":7239},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Child Processes","position":{"start":{"line":300,"column":4,"offset":7244},"end":{"line":300,"column":19,"offset":7259},"indent":[]}}],"position":{"start":{"line":300,"column":1,"offset":7241},"end":{"line":300,"column":19,"offset":7259},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const childProc = require('child_process');\nasync function main() {\n  var child = childProc.spawn('node', ['index.js']);\n  child.on('exit', function(code) {\n    console.log('Child finished', code);\n  });\n}","position":{"start":{"line":302,"column":1,"offset":7261},"end":{"line":310,"column":4,"offset":7484},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exit Codes","position":{"start":{"line":312,"column":5,"offset":7490},"end":{"line":312,"column":15,"offset":7500},"indent":[]}}],"position":{"start":{"line":312,"column":1,"offset":7486},"end":{"line":312,"column":15,"offset":7500},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The commands are based on POSIX standards.","position":{"start":{"line":314,"column":1,"offset":7502},"end":{"line":314,"column":43,"offset":7544},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":7502},"end":{"line":314,"column":43,"offset":7544},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Code","position":{"start":{"line":316,"column":3,"offset":7548},"end":{"line":316,"column":7,"offset":7552},"indent":[]}}],"position":{"start":{"line":316,"column":3,"offset":7548},"end":{"line":316,"column":7,"offset":7552},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Meaning","position":{"start":{"line":316,"column":10,"offset":7555},"end":{"line":316,"column":17,"offset":7562},"indent":[]}}],"position":{"start":{"line":316,"column":10,"offset":7555},"end":{"line":316,"column":17,"offset":7562},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":7546},"end":{"line":316,"column":19,"offset":7564},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"0","position":{"start":{"line":318,"column":3,"offset":7586},"end":{"line":318,"column":4,"offset":7587},"indent":[]}}],"position":{"start":{"line":318,"column":3,"offset":7586},"end":{"line":318,"column":7,"offset":7590},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Success","position":{"start":{"line":318,"column":10,"offset":7593},"end":{"line":318,"column":17,"offset":7600},"indent":[]}}],"position":{"start":{"line":318,"column":10,"offset":7593},"end":{"line":318,"column":17,"offset":7600},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":7584},"end":{"line":318,"column":19,"offset":7602},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"1","position":{"start":{"line":319,"column":3,"offset":7605},"end":{"line":319,"column":4,"offset":7606},"indent":[]}}],"position":{"start":{"line":319,"column":3,"offset":7605},"end":{"line":319,"column":7,"offset":7609},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Fail","position":{"start":{"line":319,"column":10,"offset":7612},"end":{"line":319,"column":14,"offset":7616},"indent":[]}}],"position":{"start":{"line":319,"column":10,"offset":7612},"end":{"line":319,"column":17,"offset":7619},"indent":[]}}],"position":{"start":{"line":319,"column":1,"offset":7603},"end":{"line":319,"column":19,"offset":7621},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":7546},"end":{"line":319,"column":19,"offset":7621},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can use ","position":{"start":{"line":321,"column":1,"offset":7623},"end":{"line":321,"column":13,"offset":7635},"indent":[]}},{"type":"inlineCode","value":"process.exitCode(value)","position":{"start":{"line":321,"column":13,"offset":7635},"end":{"line":321,"column":38,"offset":7660},"indent":[]}},{"type":"text","value":" in the child processes to communicate back.","position":{"start":{"line":321,"column":38,"offset":7660},"end":{"line":321,"column":82,"offset":7704},"indent":[]}}],"position":{"start":{"line":321,"column":1,"offset":7623},"end":{"line":321,"column":82,"offset":7704},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":324,"column":1,"offset":7707},"end":{"line":324,"column":31,"offset":7737},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":324,"column":31,"offset":7737}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"digging-into-nodejs\"\n    }}>{`Digging Into Nodejs`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/digging-into-node/\"\n        }}>{`FE Masters Course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/substack/stream-handbook\"\n        }}>{`GitHub Stream handbook`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\"\n        }}>{`readable.pipe`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/getify/caf\"\n        }}>{`Cancelable Async Functions - GitHub`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"streams\"\n    }}>{`Streams`}</h2>\n    <p>{`There are two stream modes that are known as \"simplex\" (unidirectional):`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Read/readable stream that you can consume.`}</li>\n      <li parentName=\"ol\">{`Write/writeable stream that they can receive inputs and you can write to them.`}</li>\n    </ol>\n    <p>{`There is also a \"duplex\" stream that is bidirectional (can be written to and read from). Duplex is not covered in this course.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var stream1; // readable\nvar stream2; // writeable\n\n// \"Take my readable stream and pipe it to my writeable\"\nvar stream3 = stream1.pipe(stream2); // chunks at a time using binary buffers\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Think of streams as gardens hoses that you want to be able to connect things to.`}</p>\n    </blockquote>\n    <p>{`It is important to know that a return value from a `}<inlineCode parentName=\"p\">{`.pipe`}</inlineCode>{` call stream is another readable stream.`}</p>\n    <p>{`This also means that we can keep chaining and piping as many writables as possible as possible.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var stream1; // readable\nvar stream2; // writeable\n\n// \"Take my readable stream and pipe it to my writeable\"\n// stream1 into stream2 into stream5 into final\nvar stream3 = stream1\n  .pipe(stream2)\n  .pipe(stream5)\n  .pipe(final); // chunks at a time using binary buffers\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"creating-the-read-stream\"\n    }}>{`Creating the read stream`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let stream = fs.createReadStream('path/to/file');\nprocessFile(stream);\n\nfunction processFile(inStream) {\n  var outStream = inStream;\n  var targetStream = process.stdout;\n  outStream.pipe(targetStream); // pipe to process.stdout\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`This difference here is that we don't keep the entire file in the buffer.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"transform-stream\"\n    }}>{`Transform Stream`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// other requires omitted for brevity\nvar Transform = require('stream').transform;\n\nlet stream = fs.createReadStream('path/to/file');\nprocessFile(stream);\n\nfunction processFile(inStream) {\n  var outStream = inStream;\n\n  var upperStream = new Transform({\n    // Note: next is a callback\n    transform(chunk, enc, next) {\n      this.push(chunk.toString().toUpperCase());\n      // Only using set time out to prove stream.\n      // Normally you just call next().\n      setTimeout(next, 500);\n    },\n  });\n\n  outStream = outStream.pipe(upperStream);\n\n  var targetStream = process.stdout;\n  outStream.pipe(targetStream); // pipe to process.stdout\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"outputting-to-file\"\n    }}>{`Outputting to file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// other requires omitted for brevity\nvar Transform = require('stream').transform;\n\nlet stream = fs.createReadStream('path/to/file');\nprocessFile(stream);\n\nfunction processFile(inStream) {\n  var outStream = inStream;\n\n  var upperStream = new Transform({\n    // Note: next is a callback\n    transform(chunk, enc, next) {\n      this.push(chunk.toString().toUpperCase());\n      // Only using set time out to prove stream.\n      // Normally you just call next().\n      setTimeout(next, 500);\n    },\n  });\n\n  outStream = outStream.pipe(upperStream);\n\n  var targetStream;\n\n  if (args.out) {\n    targetStream = process.stdout;\n  } else {\n    targetStream = fs.createWriteStream('path/to/file');\n  }\n\n  outStream.pipe(targetStream); // pipe to process.stdout\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"gzip-compression-with-zlib\"\n    }}>{`gzip Compression with zlib`}</h2>\n    <p>{`A common transformation is the unzip, process them, then rezipping it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// other requires omitted for brevity\nvar Transform = require('stream').transform;\nvar zlin = require('zlip');\n\nlet stream = fs.createReadStream('path/to/file');\nprocessFile(stream);\n\nfunction processFile(inStream) {\n  var outStream = inStream;\n\n  // handling compressed files\n  if (args.uncompress) {\n    let gunzipStream = zlib.createGunzip();\n    outStream = outStream.pipe(gunzipStream);\n  }\n\n  var upperStream = new Transform({\n    // Note: next is a callback\n    transform(chunk, enc, next) {\n      this.push(chunk.toString().toUpperCase());\n      next();\n    },\n  });\n\n  outStream = outStream.pipe(upperStream);\n\n  // Compression code!\n  if (args.compress) {\n    let gzipStream = zlin.createGzip();\n    // adding additional stream\n    outStream = outStream.pipe(gzipStream);\n    // ensure name output changes\n    OUTSTREAM_NAME = \\`\\${OUTSTREAM_NAME}.gz\\`;\n  }\n\n  var targetStream;\n\n  if (args.out) {\n    targetStream = process.stdout;\n  } else {\n    targetStream = fs.createWriteStream('path/to/file');\n  }\n\n  outStream.pipe(targetStream); // pipe to process.stdout\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Gzip was designed for streams, that is why it is so easy.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note that for `}<inlineCode parentName=\"p\">{`vi out.txt.gz`}</inlineCode>{` that Vim automatically unzips it for you!`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"determining-end-of-stream\"\n    }}>{`Determining End of Stream`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// building a helper\nfunction streamComplete(stream) {\n  return new Promise(function c(res) {\n    stream.on('end', res);\n  });\n}\n\nasync function processFile(inStream) {\n  var outStream = inStream;\n\n  // handling compressed files\n  if (args.uncompress) {\n    let gunzipStream = zlib.createGunzip();\n    outStream = outStream.pipe(gunzipStream);\n  }\n\n  var upperStream = new Transform({\n    // Note: next is a callback\n    transform(chunk, enc, next) {\n      this.push(chunk.toString().toUpperCase());\n      next();\n    },\n  });\n\n  outStream = outStream.pipe(upperStream);\n\n  // Compression code!\n  if (args.compress) {\n    let gzipStream = zlin.createGzip();\n    // adding additional stream\n    outStream = outStream.pipe(gzipStream);\n    // ensure name output changes\n    OUTSTREAM_NAME = \\`\\${OUTSTREAM_NAME}.gz\\`;\n  }\n\n  var targetStream;\n\n  if (args.out) {\n    targetStream = process.stdout;\n  } else {\n    targetStream = fs.createWriteStream('path/to/file');\n  }\n\n  outStream.pipe(targetStream); // pipe to process.stdout\n\n  await streamComplete(outStream);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"asynchronous-cancellation--timeouts\"\n    }}>{`Asynchronous Cancellation & Timeouts`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var CAF = require('caf');\n\nprocessFile = CAF(processFile);\n\nfunction* processFile(signal, inStream) {\n  var outStream = inStream;\n\n  // handling compressed files\n  if (args.uncompress) {\n    let gunzipStream = zlib.createGunzip();\n    outStream = outStream.pipe(gunzipStream);\n  }\n\n  var upperStream = new Transform({\n    // Note: next is a callback\n    transform(chunk, enc, next) {\n      this.push(chunk.toString().toUpperCase());\n      next();\n    },\n  });\n\n  outStream = outStream.pipe(upperStream);\n\n  // Compression code!\n  if (args.compress) {\n    let gzipStream = zlin.createGzip();\n    // adding additional stream\n    outStream = outStream.pipe(gzipStream);\n    // ensure name output changes\n    OUTSTREAM_NAME = \\`\\${OUTSTREAM_NAME}.gz\\`;\n  }\n\n  var targetStream;\n\n  if (args.out) {\n    targetStream = process.stdout;\n  } else {\n    targetStream = fs.createWriteStream('path/to/file');\n  }\n\n  outStream.pipe(targetStream); // pipe to process.stdout\n\n  signal.pr.catch(function f() {\n    outStream.unpipe(targetStream);\n    outStream.destroy(); // kill the stream process\n  });\n\n  yield streamComplete(outStream);\n}\n\n// later\nlet tooLong = CAF.timeout(3); // cancel at 3\nprocessFile(tooLong, stream)\n  .then(() => console.log('Complete'))\n  .catch(error);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"child-processes\"\n    }}>{`Child Processes`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const childProc = require('child_process');\nasync function main() {\n  var child = childProc.spawn('node', ['index.js']);\n  child.on('exit', function(code) {\n    console.log('Child finished', code);\n  });\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"exit-codes\"\n    }}>{`Exit Codes`}</h3>\n    <p>{`The commands are based on POSIX standards.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Code`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Meaning`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Success`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Fail`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`You can use `}<inlineCode parentName=\"p\">{`process.exitCode(value)`}</inlineCode>{` in the child processes to communicate back.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}