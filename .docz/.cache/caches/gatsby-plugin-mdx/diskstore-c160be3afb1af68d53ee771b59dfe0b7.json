{"expireTime":9007200867335980000,"key":"gatsby-plugin-mdx-entire-payload-bee7b1a12f4b62b75a973449750c8038-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Flyweight Pattern","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":20,"offset":186},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":20,"offset":186},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Flyweight Pattern falls under the structural design patterns from the Gang Of Four.","position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":88,"offset":275},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":88,"offset":275},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":12,"column":1,"offset":277},"end":{"line":12,"column":5,"offset":281},"indent":[]}},{"type":"inlineCode","value":"flyweight","position":{"start":{"line":12,"column":5,"offset":281},"end":{"line":12,"column":16,"offset":292},"indent":[]}},{"type":"text","value":" is an object that minimizes memory usage by sharing as much data as possible with similar objects - a way to use objects in large numbers when a simple representation would use an unacceptable amount of memory.","position":{"start":{"line":12,"column":16,"offset":292},"end":{"line":12,"column":227,"offset":503},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":277},"end":{"line":12,"column":227,"offset":503},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Usage","position":{"start":{"line":14,"column":4,"offset":508},"end":{"line":14,"column":9,"offset":513},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":505},"end":{"line":14,"column":9,"offset":513},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use when:","position":{"start":{"line":16,"column":1,"offset":515},"end":{"line":16,"column":10,"offset":524},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":515},"end":{"line":16,"column":10,"offset":524},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"many same objects are used and storage cost is high.","position":{"start":{"line":18,"column":3,"offset":528},"end":{"line":18,"column":55,"offset":580},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":528},"end":{"line":18,"column":55,"offset":580},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":526},"end":{"line":18,"column":55,"offset":580},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"you can externalise a majority of each object's state.","position":{"start":{"line":19,"column":3,"offset":583},"end":{"line":19,"column":57,"offset":637},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":583},"end":{"line":19,"column":57,"offset":637},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":581},"end":{"line":19,"column":57,"offset":637},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"few shared objects can replace many unshared ones.","position":{"start":{"line":20,"column":3,"offset":640},"end":{"line":20,"column":53,"offset":690},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":640},"end":{"line":20,"column":53,"offset":690},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":638},"end":{"line":20,"column":53,"offset":690},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"identity of an object not relevant.","position":{"start":{"line":21,"column":3,"offset":693},"end":{"line":21,"column":38,"offset":728},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":693},"end":{"line":21,"column":38,"offset":728},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":691},"end":{"line":21,"column":38,"offset":728},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":526},"end":{"line":21,"column":38,"offset":728},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":23,"column":4,"offset":733},"end":{"line":23,"column":11,"offset":740},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":730},"end":{"line":23,"column":11,"offset":740},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here we will create a 1000 combatants that","position":{"start":{"line":25,"column":1,"offset":742},"end":{"line":25,"column":43,"offset":784},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":742},"end":{"line":25,"column":43,"offset":784},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"interface Action {\n  move(location: [number, number]): void;\n  hit?(target: string, location: [number, number]): void;\n}\n\nclass Combatant implements Action {\n  private equipmentSet: string;\n  number: number;\n\n  constructor(set: string, number: number) {\n    // initialization consumes time\n    this.equipmentSet = set;\n    this.number = number;\n    console.log(`new Combatant ${number}`);\n  }\n\n  move(location: [number, number]): void {\n    console.log(`move to ${location}`);\n  }\n\n  hit?(target: string, location: [number, number]): void {\n    console.log(`damage ${target} at ${location}`);\n  }\n}\n\nclass CombatantAcademy {\n  private static groups: { [set: string]: Combatant } = {};\n\n  public static getCombatant(set: string, num: number) {\n    let combatant = CombatantAcademy.groups[set];\n\n    if (!combatant) {\n      combatant = new Combatant(set, num);\n      CombatantAcademy.groups[set] = combatant;\n    } else {\n      combatant.number = num;\n      console.log(`shared Combatant ${combatant.number}`);\n    }\n\n    return combatant;\n  }\n}\n\n(function main() {\n  let start, end;\n\n  // the larger you change the threshold, the bigger the difference\n  const threshold = 50000;\n\n  // inefficient creating without flyweight\n  start = Math.floor(Date.now());\n  for (let i = 0; i < threshold; i++) {\n    new Combatant('normal-set', i); // creating fifty thousand real Combatants\n  }\n  end = Math.floor(Date.now());\n  const withoutFlyweight = end - start;\n\n  // efficient create with flyweight\n  start = Math.floor(Date.now());\n  for (let i = 0; i < threshold; i++) {\n    CombatantAcademy.getCombatant('normal-set', i); // create 1 Combatant\n  }\n  end = Math.floor(Date.now());\n  const withFlyweight = end - start;\n\n  console.log('Without Flyweight', withoutFlyweight);\n  console.log('With Flyweight', withFlyweight);\n})();","position":{"start":{"line":27,"column":1,"offset":786},"end":{"line":96,"column":4,"offset":2623},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":98,"column":4,"offset":2628},"end":{"line":98,"column":13,"offset":2637},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2625},"end":{"line":98,"column":13,"offset":2637},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://circle.visual-paradigm.com/flyweight/","children":[{"type":"text","value":"Flyweight Example","position":{"start":{"line":100,"column":4,"offset":2642},"end":{"line":100,"column":21,"offset":2659},"indent":[]}}],"position":{"start":{"line":100,"column":3,"offset":2641},"end":{"line":100,"column":69,"offset":2707},"indent":[]}}],"position":{"start":{"line":100,"column":3,"offset":2641},"end":{"line":100,"column":69,"offset":2707},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":2639},"end":{"line":100,"column":69,"offset":2707},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Flyweight_pattern","children":[{"type":"text","value":"Flyweight Wikipedia","position":{"start":{"line":101,"column":4,"offset":2711},"end":{"line":101,"column":23,"offset":2730},"indent":[]}}],"position":{"start":{"line":101,"column":3,"offset":2710},"end":{"line":101,"column":73,"offset":2780},"indent":[]}}],"position":{"start":{"line":101,"column":3,"offset":2710},"end":{"line":101,"column":73,"offset":2780},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":2708},"end":{"line":101,"column":73,"offset":2780},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":2639},"end":{"line":101,"column":73,"offset":2780},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":104,"column":1,"offset":2783},"end":{"line":104,"column":31,"offset":2813},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":104,"column":31,"offset":2813}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"flyweight-pattern\"\n    }}>{`Flyweight Pattern`}</h1>\n    <p>{`The Flyweight Pattern falls under the structural design patterns from the Gang Of Four.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`flyweight`}</inlineCode>{` is an object that minimizes memory usage by sharing as much data as possible with similar objects - a way to use objects in large numbers when a simple representation would use an unacceptable amount of memory.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Use when:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`many same objects are used and storage cost is high.`}</li>\n      <li parentName=\"ul\">{`you can externalise a majority of each object's state.`}</li>\n      <li parentName=\"ul\">{`few shared objects can replace many unshared ones.`}</li>\n      <li parentName=\"ul\">{`identity of an object not relevant.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Here we will create a 1000 combatants that`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface Action {\n  move(location: [number, number]): void;\n  hit?(target: string, location: [number, number]): void;\n}\n\nclass Combatant implements Action {\n  private equipmentSet: string;\n  number: number;\n\n  constructor(set: string, number: number) {\n    // initialization consumes time\n    this.equipmentSet = set;\n    this.number = number;\n    console.log(\\`new Combatant \\${number}\\`);\n  }\n\n  move(location: [number, number]): void {\n    console.log(\\`move to \\${location}\\`);\n  }\n\n  hit?(target: string, location: [number, number]): void {\n    console.log(\\`damage \\${target} at \\${location}\\`);\n  }\n}\n\nclass CombatantAcademy {\n  private static groups: { [set: string]: Combatant } = {};\n\n  public static getCombatant(set: string, num: number) {\n    let combatant = CombatantAcademy.groups[set];\n\n    if (!combatant) {\n      combatant = new Combatant(set, num);\n      CombatantAcademy.groups[set] = combatant;\n    } else {\n      combatant.number = num;\n      console.log(\\`shared Combatant \\${combatant.number}\\`);\n    }\n\n    return combatant;\n  }\n}\n\n(function main() {\n  let start, end;\n\n  // the larger you change the threshold, the bigger the difference\n  const threshold = 50000;\n\n  // inefficient creating without flyweight\n  start = Math.floor(Date.now());\n  for (let i = 0; i < threshold; i++) {\n    new Combatant('normal-set', i); // creating fifty thousand real Combatants\n  }\n  end = Math.floor(Date.now());\n  const withoutFlyweight = end - start;\n\n  // efficient create with flyweight\n  start = Math.floor(Date.now());\n  for (let i = 0; i < threshold; i++) {\n    CombatantAcademy.getCombatant('normal-set', i); // create 1 Combatant\n  }\n  end = Math.floor(Date.now());\n  const withFlyweight = end - start;\n\n  console.log('Without Flyweight', withoutFlyweight);\n  console.log('With Flyweight', withFlyweight);\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://circle.visual-paradigm.com/flyweight/\"\n        }}>{`Flyweight Example`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Flyweight_pattern\"\n        }}>{`Flyweight Wikipedia`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}