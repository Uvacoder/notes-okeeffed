{"expireTime":9007200852878373000,"key":"gatsby-plugin-mdx-entire-payload-efedb6a2241eb5e81e2f3574158b66b6-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Python Intro to Data Science","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":31,"offset":196},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":31,"offset":196},"indent":[]}},{"type":"jsx","value":"<!-- TOC -->","position":{"start":{"line":9,"column":1,"offset":198},"end":{"line":9,"column":13,"offset":210},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#python-intro-to-data-science","children":[{"type":"text","value":"Python Intro to Data Science","position":{"start":{"line":11,"column":6,"offset":217},"end":{"line":11,"column":34,"offset":245},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":216},"end":{"line":11,"column":66,"offset":277},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":216},"end":{"line":11,"column":66,"offset":277},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#numpy","children":[{"type":"text","value":"Numpy","position":{"start":{"line":12,"column":10,"offset":287},"end":{"line":12,"column":15,"offset":292},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":286},"end":{"line":12,"column":24,"offset":301},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":286},"end":{"line":12,"column":24,"offset":301},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#-----2d-numpy-arrays","children":[{"type":"text","value":"---- 2D Numpy Arrays","position":{"start":{"line":13,"column":14,"offset":315},"end":{"line":13,"column":34,"offset":335},"indent":[]}}],"position":{"start":{"line":13,"column":13,"offset":314},"end":{"line":13,"column":58,"offset":359},"indent":[]}}],"position":{"start":{"line":13,"column":13,"offset":314},"end":{"line":13,"column":58,"offset":359},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":310},"end":{"line":13,"column":58,"offset":359},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":310},"end":{"line":13,"column":58,"offset":359},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":282},"end":{"line":13,"column":58,"offset":359},"indent":[5]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#basic-statistics","children":[{"type":"text","value":"Basic Statistics","position":{"start":{"line":14,"column":10,"offset":369},"end":{"line":14,"column":26,"offset":385},"indent":[]}}],"position":{"start":{"line":14,"column":9,"offset":368},"end":{"line":14,"column":46,"offset":405},"indent":[]}}],"position":{"start":{"line":14,"column":9,"offset":368},"end":{"line":14,"column":46,"offset":405},"indent":[]}}],"position":{"start":{"line":14,"column":5,"offset":364},"end":{"line":14,"column":46,"offset":405},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":282},"end":{"line":14,"column":46,"offset":405},"indent":[5,5]}}],"position":{"start":{"line":11,"column":1,"offset":212},"end":{"line":14,"column":46,"offset":405},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#args-for-the-3-params-goes-dist-mean-dist-sd-number-of-samples","children":[{"type":"text","value":"args for the 3 params goes dist mean, dist sd, number of samples","position":{"start":{"line":15,"column":6,"offset":411},"end":{"line":15,"column":70,"offset":475},"indent":[]}}],"position":{"start":{"line":15,"column":5,"offset":410},"end":{"line":15,"column":136,"offset":541},"indent":[]}}],"position":{"start":{"line":15,"column":5,"offset":410},"end":{"line":15,"column":136,"offset":541},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":406},"end":{"line":15,"column":136,"offset":541},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":212},"end":{"line":15,"column":136,"offset":541},"indent":[1,1,1,1]}},{"type":"jsx","value":"<!-- /TOC -->","position":{"start":{"line":17,"column":1,"offset":543},"end":{"line":17,"column":14,"offset":556},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":19,"column":1,"offset":558},"end":{"line":19,"column":4,"offset":561},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Numpy","position":{"start":{"line":21,"column":4,"offset":566},"end":{"line":21,"column":9,"offset":571},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":563},"end":{"line":21,"column":9,"offset":571},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once we know about lists, how do we analyse data in R?","position":{"start":{"line":23,"column":1,"offset":573},"end":{"line":23,"column":55,"offset":627},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":573},"end":{"line":23,"column":55,"offset":627},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can instead use a Numpy array - which is both easy and fast!","position":{"start":{"line":25,"column":1,"offset":629},"end":{"line":25,"column":64,"offset":692},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":629},"end":{"line":25,"column":64,"offset":692},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":">>> import numpy as np\n>>> height = [181.5,182.4,183,165.4]\n>>> np_height = np.array(height)\n>>> np_height\narray([ 181.5,  182.4,  183. ,  165.4])\n>>> np_height ** 2\narray([ 32942.25,  33269.76,  33489.  ,  27357.16])\n\n>>> np_height > 170\narray([ True,  True,  True, False], dtype=bool)\n\n>>> np_height[np_height < 170]\narray([ 165.4])","position":{"start":{"line":27,"column":1,"offset":694},"end":{"line":41,"column":4,"offset":1036},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Numpy for lists that have more than one data type however should be noted that it will convert the list to strings.","position":{"start":{"line":43,"column":1,"offset":1038},"end":{"line":43,"column":116,"offset":1153},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1038},"end":{"line":43,"column":116,"offset":1153},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Numpy arrays are just another Python type that comes with their own methods.","position":{"start":{"line":45,"column":1,"offset":1155},"end":{"line":45,"column":77,"offset":1231},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1155},"end":{"line":45,"column":77,"offset":1231},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"# Create list baseball\nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Import the numpy package as np\nimport numpy as np\n\n# Create a Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out type of np_baseball\nprint(type(np_baseball))\n\n<script.py> output:\n    [180 215 210 210 188 176 209 200]\n\n<script.py> output:\n    <class 'numpy.ndarray'>","position":{"start":{"line":47,"column":1,"offset":1233},"end":{"line":65,"column":4,"offset":1618},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"# height is available as a regular list\n\n# Import numpy\nimport numpy as np\n\n# Create a Numpy array from height: np_height\nnp_height = np.array(height)\n\n# Print out np_height\nprint(np_height)\n\n# Convert np_height to m: np_height_m\nnp_height_m = np_height * 0.0254\n\n# Print np_height_m\nprint(np_height_m)\n\n<script.py> output:\n    [74 74 72 ..., 75 75 73]\n    [ 1.8796  1.8796  1.8288 ...,  1.905   1.905   1.8542]\n\n# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Create array from height with correct units: np_height_m\nnp_height_m = np.array(height) * 0.0254\n\n# Create array from weight with correct units: np_weight_kg\nnp_weight_kg = np.array(weight) * 0.453592\n\n# Calculate the BMI: bmi\nbmi = np_weight_kg / np_height_m**2\n\n# Print out bmi\nprint(bmi)\n\n<script.py> output:\n    [ 23.11037639  27.60406069  28.48080465 ...,  25.62295933  23.74810865\n      25.72686361]","position":{"start":{"line":67,"column":1,"offset":1620},"end":{"line":109,"column":4,"offset":2537},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Calculate the BMI: bmi\nnp_height_m = np.array(height) * 0.0254\nnp_weight_kg = np.array(weight) * 0.453592\nbmi = np_weight_kg / np_height_m ** 2\n\n# Create the light array\nlight = bmi < 21\n\n# Print out light\nprint(light)\n\n# Print out BMIs of all baseball players whose BMI is below 21\nprint(bmi[light])\n\n<script.py> output:\n    [False False False ..., False False False]\n    [ 20.54255679  20.54255679  20.69282047  20.69282047  20.34343189\n      20.34343189  20.69282047  20.15883472  19.4984471   20.69282047\n      20.9205219 ]","position":{"start":{"line":111,"column":1,"offset":2539},"end":{"line":136,"column":4,"offset":3165},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Printing out Array Values","position":{"start":{"line":138,"column":1,"offset":3167},"end":{"line":138,"column":26,"offset":3192},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":3167},"end":{"line":138,"column":26,"offset":3192},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Store weight and height lists as numpy arrays\nnp_weight = np.array(weight)\nnp_height = np.array(height)\n\n# Print out the weight at index 50\nprint(weight[50])\n\n# Print out sub-array of np_height: index 100 up to and including index 110\nprint(np_height[100:111])\n\n<script.py> output:\n    200\n    [73 74 72 73 69 72 73 75 75 73 72]","position":{"start":{"line":140,"column":1,"offset":3194},"end":{"line":159,"column":4,"offset":3621},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"2D Numpy Arrays","position":{"start":{"line":161,"column":4,"offset":3626},"end":{"line":161,"column":19,"offset":3641},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":3623},"end":{"line":161,"column":19,"offset":3641},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":">>> array_2d = np.array([[1,2,3,4,5],[6,7,8,9,10]])\n>>> array_2d\narray([[ 1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10]])\n>>> array_2d[1][3]\n9\n>>> array_2d[1][:]\narray([ 6,  7,  8,  9, 10])\n>>> array_2d[1]\narray([ 6,  7,  8,  9, 10])\n>>> array_2d[1:]\narray([[ 6,  7,  8,  9, 10]])\n>>> array_2d[1:2]\narray([[ 6,  7,  8,  9, 10]])\n>>> array_2d[0:1]\narray([[1, 2, 3, 4, 5]])\n>>> array_2d[0:]\narray([[ 1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10]])\n>>> array_2d[0:2]\narray([[ 1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10]])","position":{"start":{"line":163,"column":1,"offset":3643},"end":{"line":186,"column":4,"offset":4177},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"# Create baseball, a list of lists\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]\n\n# Import numpy\nimport numpy as np\n\n# Create a 2D Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)\n\n<script.py> output:\n    <class 'numpy.ndarray'>\n    (4, 2)\n\n# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create a 2D Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)\n\n<script.py> output:\n    (1015, 2)","position":{"start":{"line":188,"column":1,"offset":4179},"end":{"line":224,"column":4,"offset":4909},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"# Import numpy package\nimport numpy as np\n\n# Create np_baseball (2 cols)\nnp_baseball = np.array(baseball)\n\n# Print out the 50th row of np_baseball\nprint(np_baseball[49,:])\n\n# Select the entire second column of np_baseball: np_weight\nnp_weight = np_baseball[:,1]\n\n# Print out height of 124th player\nprint(np_baseball[123,0])\n\n<script.py> output:\n    [ 70 195]\n    [ 73 194]\n\n<script.py> output:\n    [ 70 195]\n    75","position":{"start":{"line":226,"column":1,"offset":4911},"end":{"line":249,"column":4,"offset":5333},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"# baseball is available as a regular list of lists\n# update is available as 2D Numpy array\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (3 cols)\nnp_baseball = np.array(baseball)\n\n# Print out addition of np_baseball and update\nprint(np_baseball + update)\n\n# Create Numpy array: conversion\nconversion = [0.0254, 0.453592, 1]\n\n# Print out product of np_baseball and conversion\nprint(np_baseball*conversion)\n\n<script.py> output:\n    [[  75.2303559   168.83775102   23.99      ]\n     [  75.02614252  231.09732309   35.69      ]\n     [  73.1544228   215.08167641   31.78      ]\n     ...,\n     [  76.09349925  209.23890778   26.19      ]\n     [  75.82285669  172.21799965   32.01      ]\n     [  73.99484223  203.14402711   28.92      ]]\n    [[  1.8796   81.64656  22.99   ]\n     [  1.8796   97.52228  34.69   ]\n     [  1.8288   95.25432  30.78   ]\n     ...,\n     [  1.905    92.98636  25.19   ]\n     [  1.905    86.18248  31.01   ]\n     [  1.8542   88.45044  27.92   ]]","position":{"start":{"line":251,"column":1,"offset":5335},"end":{"line":285,"column":4,"offset":6325},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":287,"column":1,"offset":6327},"end":{"line":287,"column":4,"offset":6330},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Basic Statistics","position":{"start":{"line":289,"column":4,"offset":6335},"end":{"line":289,"column":20,"offset":6351},"indent":[]}}],"position":{"start":{"line":289,"column":1,"offset":6332},"end":{"line":289,"column":20,"offset":6351},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Generating Data for stubbing","position":{"start":{"line":291,"column":3,"offset":6355},"end":{"line":291,"column":31,"offset":6383},"indent":[]}}],"position":{"start":{"line":291,"column":1,"offset":6353},"end":{"line":291,"column":33,"offset":6385},"indent":[]}}],"position":{"start":{"line":291,"column":1,"offset":6353},"end":{"line":291,"column":33,"offset":6385},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"args for the 3 params goes dist mean, dist sd, number of samples","position":{"start":{"line":293,"column":3,"offset":6389},"end":{"line":293,"column":67,"offset":6453},"indent":[]}}],"position":{"start":{"line":293,"column":1,"offset":6387},"end":{"line":293,"column":67,"offset":6453},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"height = np.round(np.random.normal(1.75, 0.20, 5000), 2)\nweight = np.round(np.random.normal(60.32, 15, 5000), 2)\nnp_city = np.column_stack((height, weight))","position":{"start":{"line":295,"column":1,"offset":6455},"end":{"line":297,"column":44,"offset":6611},"indent":[1,1]}}],"position":{"start":{"line":295,"column":1,"offset":6455},"end":{"line":297,"column":44,"offset":6611},"indent":[1,1]}},{"type":"code","lang":null,"meta":null,"value":"# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Create np_height from np_baseball\nnp_height = np_baseball[:,0]\n\n# Print out the mean of np_height\nprint(np.mean(np_height))\n\n# Print out the median of np_height\nprint(np.median(np_height))\n\n<script.py> output:\n    1586.46108374\n    74.0","position":{"start":{"line":299,"column":1,"offset":6613},"end":{"line":317,"column":4,"offset":6922},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"# Import numpy\nimport numpy as np\n\n# Print mean height (first column)\navg = np.mean(np_baseball[:,0])\nprint(\"Average: \" + str(avg))\n\n# Print median height. Replace 'None'\nmed = np.median(np_baseball[:,0])\nprint(\"Median: \" + str(med))\n\n# Print out the standard deviation on height. Replace 'None'\nstddev = np.std(np_baseball[:,0])\nprint(\"Standard Deviation: \" + str(stddev))\n\n# Print out correlation between first and second column. Replace 'None'\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\nprint(\"Correlation: \" + str(corr))\n\n<script.py> output:\n    Average: 73.6896551724\n    Median: 74.0\n    Standard Deviation: 2.31279188105\n    Correlation: [[ 1.          0.53153932]\n     [ 0.53153932  1.        ]]","position":{"start":{"line":319,"column":1,"offset":6924},"end":{"line":345,"column":4,"offset":7647},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"# Import numpy\nimport numpy as np\n\n# Convert positions and heights to numpy arrays: np_positions, np_heights\n\nnp_heights = np.array(heights)\nnp_positions = np.array(positions)\n\n# Heights of the goalkeepers: gk_heights\ngk_heights = np_heights[np_positions == 'GK']\n\n# Heights of the other players: other_heights\nother_heights = np_heights[np_positions != 'GK']\n\n# Print out the median height of goalkeepers. Replace 'None'\nprint(\"Median height of goalkeepers: \" + str(np.median(gk_heights)))\n\n# Print out the median height of other players. Replace 'None'\nprint(\"Median height of other players: \" + str(np.median(other_heights)))\n\n<script.py> output:\n    Median height of goalkeepers: 188.0\n    Median height of other players: 181.0","position":{"start":{"line":347,"column":1,"offset":7649},"end":{"line":371,"column":4,"offset":8388},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":374,"column":1,"offset":8391},"end":{"line":374,"column":31,"offset":8421},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":374,"column":31,"offset":8421}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"python-intro-to-data-science\"\n    }}>{`Python Intro to Data Science`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#python-intro-to-data-science\"\n        }}>{`Python Intro to Data Science`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#numpy\"\n            }}>{`Numpy`}</a><ul parentName=\"li\">\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"#-----2d-numpy-arrays\"\n                }}>{`---- 2D Numpy Arrays`}</a></li>\n            </ul></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#basic-statistics\"\n            }}>{`Basic Statistics`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#args-for-the-3-params-goes-dist-mean-dist-sd-number-of-samples\"\n        }}>{`args for the 3 params goes dist mean, dist sd, number of samples`}</a></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"numpy\"\n    }}>{`Numpy`}</h2>\n    <p>{`Once we know about lists, how do we analyse data in R?`}</p>\n    <p>{`We can instead use a Numpy array - which is both easy and fast!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> import numpy as np\n>>> height = [181.5,182.4,183,165.4]\n>>> np_height = np.array(height)\n>>> np_height\narray([ 181.5,  182.4,  183. ,  165.4])\n>>> np_height ** 2\narray([ 32942.25,  33269.76,  33489.  ,  27357.16])\n\n>>> np_height > 170\narray([ True,  True,  True, False], dtype=bool)\n\n>>> np_height[np_height < 170]\narray([ 165.4])\n`}</code></pre>\n    <p>{`Numpy for lists that have more than one data type however should be noted that it will convert the list to strings.`}</p>\n    <p>{`Numpy arrays are just another Python type that comes with their own methods.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# Create list baseball\nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Import the numpy package as np\nimport numpy as np\n\n# Create a Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out type of np_baseball\nprint(type(np_baseball))\n\n<script.py> output:\n    [180 215 210 210 188 176 209 200]\n\n<script.py> output:\n    <class 'numpy.ndarray'>\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`# height is available as a regular list\n\n# Import numpy\nimport numpy as np\n\n# Create a Numpy array from height: np_height\nnp_height = np.array(height)\n\n# Print out np_height\nprint(np_height)\n\n# Convert np_height to m: np_height_m\nnp_height_m = np_height * 0.0254\n\n# Print np_height_m\nprint(np_height_m)\n\n<script.py> output:\n    [74 74 72 ..., 75 75 73]\n    [ 1.8796  1.8796  1.8288 ...,  1.905   1.905   1.8542]\n\n# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Create array from height with correct units: np_height_m\nnp_height_m = np.array(height) * 0.0254\n\n# Create array from weight with correct units: np_weight_kg\nnp_weight_kg = np.array(weight) * 0.453592\n\n# Calculate the BMI: bmi\nbmi = np_weight_kg / np_height_m**2\n\n# Print out bmi\nprint(bmi)\n\n<script.py> output:\n    [ 23.11037639  27.60406069  28.48080465 ...,  25.62295933  23.74810865\n      25.72686361]\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Calculate the BMI: bmi\nnp_height_m = np.array(height) * 0.0254\nnp_weight_kg = np.array(weight) * 0.453592\nbmi = np_weight_kg / np_height_m ** 2\n\n# Create the light array\nlight = bmi < 21\n\n# Print out light\nprint(light)\n\n# Print out BMIs of all baseball players whose BMI is below 21\nprint(bmi[light])\n\n<script.py> output:\n    [False False False ..., False False False]\n    [ 20.54255679  20.54255679  20.69282047  20.69282047  20.34343189\n      20.34343189  20.69282047  20.15883472  19.4984471   20.69282047\n      20.9205219 ]\n`}</code></pre>\n    <p>{`Printing out Array Values`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# height and weight are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Store weight and height lists as numpy arrays\nnp_weight = np.array(weight)\nnp_height = np.array(height)\n\n# Print out the weight at index 50\nprint(weight[50])\n\n# Print out sub-array of np_height: index 100 up to and including index 110\nprint(np_height[100:111])\n\n<script.py> output:\n    200\n    [73 74 72 73 69 72 73 75 75 73 72]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"2d-numpy-arrays\"\n    }}>{`2D Numpy Arrays`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`>>> array_2d = np.array([[1,2,3,4,5],[6,7,8,9,10]])\n>>> array_2d\narray([[ 1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10]])\n>>> array_2d[1][3]\n9\n>>> array_2d[1][:]\narray([ 6,  7,  8,  9, 10])\n>>> array_2d[1]\narray([ 6,  7,  8,  9, 10])\n>>> array_2d[1:]\narray([[ 6,  7,  8,  9, 10]])\n>>> array_2d[1:2]\narray([[ 6,  7,  8,  9, 10]])\n>>> array_2d[0:1]\narray([[1, 2, 3, 4, 5]])\n>>> array_2d[0:]\narray([[ 1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10]])\n>>> array_2d[0:2]\narray([[ 1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10]])\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`# Create baseball, a list of lists\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]\n\n# Import numpy\nimport numpy as np\n\n# Create a 2D Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)\n\n<script.py> output:\n    <class 'numpy.ndarray'>\n    (4, 2)\n\n# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create a 2D Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)\n\n<script.py> output:\n    (1015, 2)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`# Import numpy package\nimport numpy as np\n\n# Create np_baseball (2 cols)\nnp_baseball = np.array(baseball)\n\n# Print out the 50th row of np_baseball\nprint(np_baseball[49,:])\n\n# Select the entire second column of np_baseball: np_weight\nnp_weight = np_baseball[:,1]\n\n# Print out height of 124th player\nprint(np_baseball[123,0])\n\n<script.py> output:\n    [ 70 195]\n    [ 73 194]\n\n<script.py> output:\n    [ 70 195]\n    75\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`# baseball is available as a regular list of lists\n# update is available as 2D Numpy array\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (3 cols)\nnp_baseball = np.array(baseball)\n\n# Print out addition of np_baseball and update\nprint(np_baseball + update)\n\n# Create Numpy array: conversion\nconversion = [0.0254, 0.453592, 1]\n\n# Print out product of np_baseball and conversion\nprint(np_baseball*conversion)\n\n<script.py> output:\n    [[  75.2303559   168.83775102   23.99      ]\n     [  75.02614252  231.09732309   35.69      ]\n     [  73.1544228   215.08167641   31.78      ]\n     ...,\n     [  76.09349925  209.23890778   26.19      ]\n     [  75.82285669  172.21799965   32.01      ]\n     [  73.99484223  203.14402711   28.92      ]]\n    [[  1.8796   81.64656  22.99   ]\n     [  1.8796   97.52228  34.69   ]\n     [  1.8288   95.25432  30.78   ]\n     ...,\n     [  1.905    92.98636  25.19   ]\n     [  1.905    86.18248  31.01   ]\n     [  1.8542   88.45044  27.92   ]]\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"basic-statistics\"\n    }}>{`Basic Statistics`}</h2>\n    <p><strong parentName=\"p\">{`Generating Data for stubbing`}</strong></p>\n    <h1 {...{\n      \"id\": \"args-for-the-3-params-goes-dist-mean-dist-sd-number-of-samples\"\n    }}>{`args for the 3 params goes dist mean, dist sd, number of samples`}</h1>\n    <p>{`height = np.round(np.random.normal(1.75, 0.20, 5000), 2)\nweight = np.round(np.random.normal(60.32, 15, 5000), 2)\nnp_city = np.column_stack((height, weight))`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Create np_height from np_baseball\nnp_height = np_baseball[:,0]\n\n# Print out the mean of np_height\nprint(np.mean(np_height))\n\n# Print out the median of np_height\nprint(np.median(np_height))\n\n<script.py> output:\n    1586.46108374\n    74.0\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`# Import numpy\nimport numpy as np\n\n# Print mean height (first column)\navg = np.mean(np_baseball[:,0])\nprint(\"Average: \" + str(avg))\n\n# Print median height. Replace 'None'\nmed = np.median(np_baseball[:,0])\nprint(\"Median: \" + str(med))\n\n# Print out the standard deviation on height. Replace 'None'\nstddev = np.std(np_baseball[:,0])\nprint(\"Standard Deviation: \" + str(stddev))\n\n# Print out correlation between first and second column. Replace 'None'\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\nprint(\"Correlation: \" + str(corr))\n\n<script.py> output:\n    Average: 73.6896551724\n    Median: 74.0\n    Standard Deviation: 2.31279188105\n    Correlation: [[ 1.          0.53153932]\n     [ 0.53153932  1.        ]]\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`# Import numpy\nimport numpy as np\n\n# Convert positions and heights to numpy arrays: np_positions, np_heights\n\nnp_heights = np.array(heights)\nnp_positions = np.array(positions)\n\n# Heights of the goalkeepers: gk_heights\ngk_heights = np_heights[np_positions == 'GK']\n\n# Heights of the other players: other_heights\nother_heights = np_heights[np_positions != 'GK']\n\n# Print out the median height of goalkeepers. Replace 'None'\nprint(\"Median height of goalkeepers: \" + str(np.median(gk_heights)))\n\n# Print out the median height of other players. Replace 'None'\nprint(\"Median height of other players: \" + str(np.median(other_heights)))\n\n<script.py> output:\n    Median height of goalkeepers: 188.0\n    Median height of other players: 181.0\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}