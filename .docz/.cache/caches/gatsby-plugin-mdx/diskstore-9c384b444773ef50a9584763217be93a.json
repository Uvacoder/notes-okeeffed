{"expireTime":9007200867335946000,"key":"gatsby-plugin-mdx-entire-payload-b28b55a3a939b6befd57eb13903f8328-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Extending Jest","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":17,"offset":183},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":17,"offset":183},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// example file test/extensions.js\nimport { matcherHint, printReceived, printExpected } from 'jest-matcher-utils';\nimport chalk from 'chalk';\nimport 'jest-dom/extend-expect';\n\nconst extensions = {\n  toBeOn(toggleButton) {\n    const on = toggleButton.classList.contains('toggle-btn-on');\n    if (on) {\n      return {\n        message: () =>\n          [\n            `${matcherHint('.not.toBeOn', 'received', '')} ${chalk.dim(\n              '// it does not have the toggle-btn-on class',\n            )}`,\n            `Expected the given element to not contain the class name:`,\n            `  ${printExpected('toggle-btn-on')}`,\n            `Received element:`,\n            `  ${printReceived(toggleButton)}`,\n            '',\n            `Because of this, ${chalk.bold(\n              `the button is in an ${chalk.underline('on')} state`,\n            )}`,\n            '',\n          ].join('\\n'),\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          [\n            `${matcherHint('.toBeOn', 'received', '')} ${chalk.dim(\n              '// it has the toggle-btn-on class',\n            )}`,\n            '',\n            `Expected the given element to contain the class name:`,\n            `  ${printExpected('toggle-btn-on')}`,\n            `Received element:`,\n            `  ${printReceived(toggleButton)}`,\n            '',\n            `Because of this, ${chalk.bold(\n              `the button is in an ${chalk.underline('off')} state`,\n            )}`,\n            '',\n          ].join('\\n'),\n        pass: false,\n      };\n    }\n  },\n  toBeOff(toggleButton) {\n    const off = toggleButton.classList.contains('toggle-btn-off');\n    if (off) {\n      return {\n        message: () =>\n          [\n            `${matcherHint('.not.toBeOff', 'received', '')} ${chalk.dim(\n              '// it does not have the toggle-btn-off class',\n            )}`,\n            `Expected the given element to not contain the class name:`,\n            `  ${printExpected('toggle-btn-off')}`,\n            `Received element:`,\n            `  ${printReceived(toggleButton)}`,\n            '',\n            `Because of this, ${chalk.bold(\n              `the button is in an ${chalk.underline('off')} state`,\n            )}`,\n            '',\n          ].join('\\n'),\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          [\n            `${matcherHint('.toBeOff', 'received', '')} ${chalk.dim(\n              '// it has the toggle-btn-off class',\n            )}`,\n            '',\n            `Expected the given element to contain the class name:`,\n            `  ${printExpected('toggle-btn-off')}`,\n            `Received element:`,\n            `  ${printReceived(toggleButton)}`,\n            '',\n            `Because of this, ${chalk.bold(\n              `the button is in an ${chalk.underline('on')} state`,\n            )}`,\n            '',\n          ].join('\\n'),\n        pass: false,\n      };\n    }\n  },\n};\n\nexport { extensions };\n\n// helper func in `test/utils.js` that is used for startup\nexpect.extend(extensions);","position":{"start":{"line":10,"column":1,"offset":185},"end":{"line":109,"column":4,"offset":3255},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then for an example of the usage:","position":{"start":{"line":111,"column":1,"offset":3257},"end":{"line":111,"column":34,"offset":3290},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":3257},"end":{"line":111,"column":34,"offset":3290},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"test('renders a toggle component', () => {\n  const handleToggle = jest.fn();\n  const { toggleButton, toggle } = renderToggle(\n    <Usage onToggle={handleToggle} />,\n  );\n  expect(toggleButton).toBeOff();\n  toggle();\n  expect(toggleButton).toBeOn();\n  expect(handleToggle).toHaveBeenCalledTimes(1);\n  expect(handleToggle).toHaveBeenCalledWith(true);\n});","position":{"start":{"line":113,"column":1,"offset":3292},"end":{"line":125,"column":4,"offset":3662},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":128,"column":1,"offset":3665},"end":{"line":128,"column":31,"offset":3695},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":128,"column":31,"offset":3695}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"extending-jest\"\n    }}>{`Extending Jest`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// example file test/extensions.js\nimport { matcherHint, printReceived, printExpected } from 'jest-matcher-utils';\nimport chalk from 'chalk';\nimport 'jest-dom/extend-expect';\n\nconst extensions = {\n  toBeOn(toggleButton) {\n    const on = toggleButton.classList.contains('toggle-btn-on');\n    if (on) {\n      return {\n        message: () =>\n          [\n            \\`\\${matcherHint('.not.toBeOn', 'received', '')} \\${chalk.dim(\n              '// it does not have the toggle-btn-on class',\n            )}\\`,\n            \\`Expected the given element to not contain the class name:\\`,\n            \\`  \\${printExpected('toggle-btn-on')}\\`,\n            \\`Received element:\\`,\n            \\`  \\${printReceived(toggleButton)}\\`,\n            '',\n            \\`Because of this, \\${chalk.bold(\n              \\`the button is in an \\${chalk.underline('on')} state\\`,\n            )}\\`,\n            '',\n          ].join('\\\\n'),\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          [\n            \\`\\${matcherHint('.toBeOn', 'received', '')} \\${chalk.dim(\n              '// it has the toggle-btn-on class',\n            )}\\`,\n            '',\n            \\`Expected the given element to contain the class name:\\`,\n            \\`  \\${printExpected('toggle-btn-on')}\\`,\n            \\`Received element:\\`,\n            \\`  \\${printReceived(toggleButton)}\\`,\n            '',\n            \\`Because of this, \\${chalk.bold(\n              \\`the button is in an \\${chalk.underline('off')} state\\`,\n            )}\\`,\n            '',\n          ].join('\\\\n'),\n        pass: false,\n      };\n    }\n  },\n  toBeOff(toggleButton) {\n    const off = toggleButton.classList.contains('toggle-btn-off');\n    if (off) {\n      return {\n        message: () =>\n          [\n            \\`\\${matcherHint('.not.toBeOff', 'received', '')} \\${chalk.dim(\n              '// it does not have the toggle-btn-off class',\n            )}\\`,\n            \\`Expected the given element to not contain the class name:\\`,\n            \\`  \\${printExpected('toggle-btn-off')}\\`,\n            \\`Received element:\\`,\n            \\`  \\${printReceived(toggleButton)}\\`,\n            '',\n            \\`Because of this, \\${chalk.bold(\n              \\`the button is in an \\${chalk.underline('off')} state\\`,\n            )}\\`,\n            '',\n          ].join('\\\\n'),\n        pass: true,\n      };\n    } else {\n      return {\n        message: () =>\n          [\n            \\`\\${matcherHint('.toBeOff', 'received', '')} \\${chalk.dim(\n              '// it has the toggle-btn-off class',\n            )}\\`,\n            '',\n            \\`Expected the given element to contain the class name:\\`,\n            \\`  \\${printExpected('toggle-btn-off')}\\`,\n            \\`Received element:\\`,\n            \\`  \\${printReceived(toggleButton)}\\`,\n            '',\n            \\`Because of this, \\${chalk.bold(\n              \\`the button is in an \\${chalk.underline('on')} state\\`,\n            )}\\`,\n            '',\n          ].join('\\\\n'),\n        pass: false,\n      };\n    }\n  },\n};\n\nexport { extensions };\n\n// helper func in \\`test/utils.js\\` that is used for startup\nexpect.extend(extensions);\n`}</code></pre>\n    <p>{`Then for an example of the usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`test('renders a toggle component', () => {\n  const handleToggle = jest.fn();\n  const { toggleButton, toggle } = renderToggle(\n    <Usage onToggle={handleToggle} />,\n  );\n  expect(toggleButton).toBeOff();\n  toggle();\n  expect(toggleButton).toBeOn();\n  expect(handleToggle).toHaveBeenCalledTimes(1);\n  expect(handleToggle).toHaveBeenCalledWith(true);\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}