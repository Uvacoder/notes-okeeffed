{"expireTime":9007200867335914000,"key":"gatsby-plugin-mdx-entire-payload-ec3945f79a47b9c12e812cc951f944ea-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Puppeteer Recorder","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":21,"offset":186},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":21,"offset":186},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use this to convert a db.json events file into someting usable with puppeteer.","position":{"start":{"line":9,"column":1,"offset":188},"end":{"line":9,"column":79,"offset":266},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":188},"end":{"line":9,"column":79,"offset":266},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Install","position":{"start":{"line":11,"column":4,"offset":271},"end":{"line":11,"column":11,"offset":278},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":268},"end":{"line":11,"column":11,"offset":278},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Currently this is a lib file that needs to be installed using kratos.","position":{"start":{"line":13,"column":1,"offset":280},"end":{"line":13,"column":70,"offset":349},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":280},"end":{"line":13,"column":70,"offset":349},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Usage","position":{"start":{"line":15,"column":4,"offset":354},"end":{"line":15,"column":9,"offset":359},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":351},"end":{"line":15,"column":9,"offset":359},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use the ","position":{"start":{"line":17,"column":1,"offset":361},"end":{"line":17,"column":9,"offset":369},"indent":[]}},{"type":"inlineCode","value":"Emitter","position":{"start":{"line":17,"column":9,"offset":369},"end":{"line":17,"column":18,"offset":378},"indent":[]}},{"type":"text","value":" common JS class to handle this. Ensure you sub to the event ","position":{"start":{"line":17,"column":18,"offset":378},"end":{"line":17,"column":79,"offset":439},"indent":[]}},{"type":"inlineCode","value":"action","position":{"start":{"line":17,"column":79,"offset":439},"end":{"line":17,"column":87,"offset":447},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":17,"column":87,"offset":447},"end":{"line":17,"column":88,"offset":448},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":361},"end":{"line":17,"column":88,"offset":448},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// Example of emission with type inferred\nhandlePrimaryClick = (e) => {\n    Emitter.emit('action', {\n        event: 'ComponentALLandingOne.handlePrimaryClick',\n        e: e.target\n    });\n\n    const { router } = this.props;\n    router.push('/testTwo');\n};\n\n// Example of emission with type manually specified\nhandleLink = (e) => {\n    e.preventDefault();\n    Emitter.emit('action', {\n        event: 'ComponentALLandingOne.handleLink',\n        type: 'link',\n        e: e.target\n    });\n\n    const { router } = this.props;\n    router.push('/testTwo');\n};","position":{"start":{"line":19,"column":1,"offset":450},"end":{"line":43,"column":4,"offset":1020},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Generating the tests","position":{"start":{"line":45,"column":4,"offset":1025},"end":{"line":45,"column":24,"offset":1045},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1022},"end":{"line":45,"column":24,"offset":1045},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The recorder relies on JSON DB and using the ","position":{"start":{"line":47,"column":1,"offset":1047},"end":{"line":47,"column":46,"offset":1092},"indent":[]}},{"type":"inlineCode","value":"events","position":{"start":{"line":47,"column":46,"offset":1092},"end":{"line":47,"column":54,"offset":1100},"indent":[]}},{"type":"text","value":" endpoint.","position":{"start":{"line":47,"column":54,"offset":1100},"end":{"line":47,"column":64,"offset":1110},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1047},"end":{"line":47,"column":64,"offset":1110},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"# usage\nnode path/to/recorder","position":{"start":{"line":49,"column":1,"offset":1112},"end":{"line":52,"column":4,"offset":1149},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The console log output for this guy can then be transferred to a test file to use with Puppeteer.","position":{"start":{"line":54,"column":1,"offset":1151},"end":{"line":54,"column":98,"offset":1248},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1151},"end":{"line":54,"column":98,"offset":1248},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":57,"column":1,"offset":1251},"end":{"line":57,"column":31,"offset":1281},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":57,"column":31,"offset":1281}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"puppeteer-recorder\"\n    }}>{`Puppeteer Recorder`}</h1>\n    <p>{`Use this to convert a db.json events file into someting usable with puppeteer.`}</p>\n    <h2 {...{\n      \"id\": \"install\"\n    }}>{`Install`}</h2>\n    <p>{`Currently this is a lib file that needs to be installed using kratos.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`Emitter`}</inlineCode>{` common JS class to handle this. Ensure you sub to the event `}<inlineCode parentName=\"p\">{`action`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Example of emission with type inferred\nhandlePrimaryClick = (e) => {\n    Emitter.emit('action', {\n        event: 'ComponentALLandingOne.handlePrimaryClick',\n        e: e.target\n    });\n\n    const { router } = this.props;\n    router.push('/testTwo');\n};\n\n// Example of emission with type manually specified\nhandleLink = (e) => {\n    e.preventDefault();\n    Emitter.emit('action', {\n        event: 'ComponentALLandingOne.handleLink',\n        type: 'link',\n        e: e.target\n    });\n\n    const { router } = this.props;\n    router.push('/testTwo');\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"generating-the-tests\"\n    }}>{`Generating the tests`}</h2>\n    <p>{`The recorder relies on JSON DB and using the `}<inlineCode parentName=\"p\">{`events`}</inlineCode>{` endpoint.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# usage\nnode path/to/recorder\n`}</code></pre>\n    <p>{`The console log output for this guy can then be transferred to a test file to use with Puppeteer.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}