{"expireTime":9007200849425606000,"key":"gatsby-plugin-mdx-entire-payload-4109ca8cef30aaa69c40d30a124d6074-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Deploying a static site with the AWS CDK","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":43,"offset":208},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":43,"offset":208},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use the resource to add more detail. More to come.","position":{"start":{"line":9,"column":1,"offset":210},"end":{"line":9,"column":51,"offset":260},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":210},"end":{"line":9,"column":51,"offset":260},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"index.ts","position":{"start":{"line":11,"column":4,"offset":265},"end":{"line":11,"column":12,"offset":273},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":262},"end":{"line":11,"column":12,"offset":273},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"#!/usr/bin/env node\nimport cdk = require('@aws-cdk/core');\nimport { StaticSite } from './static-site';\n\n/**\n * This stack relies on getting the domain name from CDK context.\n * Use 'cdk synth -c domain=mystaticsite.com -c subdomain=www'\n * Or add the following to cdk.json:\n * {\n *   \"context\": {\n *     \"domain\": \"mystaticsite.com\",\n *     \"subdomain\": \"www\"\n *   }\n * }\n **/\nclass MyStaticSiteStack extends cdk.Stack {\n  constructor(parent: cdk.App, name: string, props: cdk.StackProps) {\n    super(parent, name, props);\n\n    new StaticSite(this, 'StaticSite', {\n      domainName: this.node.tryGetContext('domain'),\n      siteSubDomain: this.node.tryGetContext('subdomain'),\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew MyStaticSiteStack(app, 'MyStaticSite', {\n  env: {\n    // Stack must be in us-east-1, because the ACM certificate for a\n    // global CloudFront distribution must be requested in us-east-1.\n    region: 'us-east-1',\n  },\n});\n\napp.synth();","position":{"start":{"line":13,"column":1,"offset":275},"end":{"line":51,"column":4,"offset":1245},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"S3 Stack","position":{"start":{"line":53,"column":4,"offset":1250},"end":{"line":53,"column":12,"offset":1258},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1247},"end":{"line":53,"column":12,"offset":1258},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"#!/usr/bin/env node\nimport cloudfront = require('@aws-cdk/aws-cloudfront');\nimport route53 = require('@aws-cdk/aws-route53');\nimport s3 = require('@aws-cdk/aws-s3');\nimport s3deploy = require('@aws-cdk/aws-s3-deployment');\nimport acm = require('@aws-cdk/aws-certificatemanager');\nimport cdk = require('@aws-cdk/core');\nimport targets = require('@aws-cdk/aws-route53-targets/lib');\nimport { Construct } from '@aws-cdk/core';\n\nexport interface StaticSiteProps {\n  domainName: string;\n  siteSubDomain: string;\n}\n\n/**\n * Static site infrastructure, which deploys site content to an S3 bucket.\n *\n * The site redirects from HTTP to HTTPS, using a CloudFront distribution,\n * Route53 alias record, and ACM certificate.\n */\nexport class StaticSite extends Construct {\n  constructor(parent: Construct, name: string, props: StaticSiteProps) {\n    super(parent, name);\n\n    const zone = route53.HostedZone.fromLookup(this, 'Zone', {\n      domainName: props.domainName,\n    });\n    const siteDomain = props.siteSubDomain + '.' + props.domainName;\n    new cdk.CfnOutput(this, 'Site', { value: 'https://' + siteDomain });\n\n    // Content bucket\n    const siteBucket = new s3.Bucket(this, 'SiteBucket', {\n      bucketName: siteDomain,\n      websiteIndexDocument: 'index.html',\n      websiteErrorDocument: 'error.html',\n      publicReadAccess: true,\n\n      // The default removal policy is RETAIN, which means that cdk destroy will not attempt to delete\n      // the new bucket, and it will remain in your account until manually deleted. By setting the policy to\n      // DESTROY, cdk destroy will attempt to delete the bucket, but will error if the bucket is not empty.\n      removalPolicy: cdk.RemovalPolicy.DESTROY, // NOT recommended for production code\n    });\n    new cdk.CfnOutput(this, 'Bucket', { value: siteBucket.bucketName });\n\n    // TLS certificate\n    const certificateArn = new acm.DnsValidatedCertificate(\n      this,\n      'SiteCertificate',\n      {\n        domainName: siteDomain,\n        hostedZone: zone,\n        region: 'us-east-1', // Cloudfront only checks this region for certificates.\n      },\n    ).certificateArn;\n    new cdk.CfnOutput(this, 'Certificate', { value: certificateArn });\n\n    // CloudFront distribution that provides HTTPS\n    const distribution = new cloudfront.CloudFrontWebDistribution(\n      this,\n      'SiteDistribution',\n      {\n        aliasConfiguration: {\n          acmCertRef: certificateArn,\n          names: [siteDomain],\n          sslMethod: cloudfront.SSLMethod.SNI,\n          securityPolicy: cloudfront.SecurityPolicyProtocol.TLS_V1_1_2016,\n        },\n        originConfigs: [\n          {\n            s3OriginSource: {\n              s3BucketSource: siteBucket,\n            },\n            behaviors: [{ isDefaultBehavior: true }],\n          },\n        ],\n      },\n    );\n    new cdk.CfnOutput(this, 'DistributionId', {\n      value: distribution.distributionId,\n    });\n\n    // Route53 alias record for the CloudFront distribution\n    new route53.ARecord(this, 'SiteAliasRecord', {\n      recordName: siteDomain,\n      target: route53.RecordTarget.fromAlias(\n        new targets.CloudFrontTarget(distribution),\n      ),\n      zone,\n    });\n\n    // Deploy site contents to S3 bucket\n    new s3deploy.BucketDeployment(this, 'DeployWithInvalidation', {\n      sources: [s3deploy.Source.asset('./site-contents')],\n      destinationBucket: siteBucket,\n      distribution,\n      distributionPaths: ['/*'],\n    });\n  }\n}","position":{"start":{"line":55,"column":1,"offset":1260},"end":{"line":156,"column":4,"offset":4722},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":158,"column":4,"offset":4727},"end":{"line":158,"column":13,"offset":4736},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":4724},"end":{"line":158,"column":13,"offset":4736},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/aws-samples/aws-cdk-examples/tree/master/typescript/static-site","children":[{"type":"text","value":"AWS Samples - statis site","position":{"start":{"line":160,"column":5,"offset":4742},"end":{"line":160,"column":30,"offset":4767},"indent":[]}}],"position":{"start":{"line":160,"column":4,"offset":4741},"end":{"line":160,"column":115,"offset":4852},"indent":[]}}],"position":{"start":{"line":160,"column":4,"offset":4741},"end":{"line":160,"column":115,"offset":4852},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":4738},"end":{"line":160,"column":115,"offset":4852},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":4738},"end":{"line":160,"column":115,"offset":4852},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":163,"column":1,"offset":4855},"end":{"line":163,"column":31,"offset":4885},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":163,"column":31,"offset":4885}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"deploying-a-static-site-with-the-aws-cdk\"\n    }}>{`Deploying a static site with the AWS CDK`}</h1>\n    <p>{`Use the resource to add more detail. More to come.`}</p>\n    <h2 {...{\n      \"id\": \"indexts\"\n    }}>{`index.ts`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`#!/usr/bin/env node\nimport cdk = require('@aws-cdk/core');\nimport { StaticSite } from './static-site';\n\n/**\n * This stack relies on getting the domain name from CDK context.\n * Use 'cdk synth -c domain=mystaticsite.com -c subdomain=www'\n * Or add the following to cdk.json:\n * {\n *   \"context\": {\n *     \"domain\": \"mystaticsite.com\",\n *     \"subdomain\": \"www\"\n *   }\n * }\n **/\nclass MyStaticSiteStack extends cdk.Stack {\n  constructor(parent: cdk.App, name: string, props: cdk.StackProps) {\n    super(parent, name, props);\n\n    new StaticSite(this, 'StaticSite', {\n      domainName: this.node.tryGetContext('domain'),\n      siteSubDomain: this.node.tryGetContext('subdomain'),\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew MyStaticSiteStack(app, 'MyStaticSite', {\n  env: {\n    // Stack must be in us-east-1, because the ACM certificate for a\n    // global CloudFront distribution must be requested in us-east-1.\n    region: 'us-east-1',\n  },\n});\n\napp.synth();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"s3-stack\"\n    }}>{`S3 Stack`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`#!/usr/bin/env node\nimport cloudfront = require('@aws-cdk/aws-cloudfront');\nimport route53 = require('@aws-cdk/aws-route53');\nimport s3 = require('@aws-cdk/aws-s3');\nimport s3deploy = require('@aws-cdk/aws-s3-deployment');\nimport acm = require('@aws-cdk/aws-certificatemanager');\nimport cdk = require('@aws-cdk/core');\nimport targets = require('@aws-cdk/aws-route53-targets/lib');\nimport { Construct } from '@aws-cdk/core';\n\nexport interface StaticSiteProps {\n  domainName: string;\n  siteSubDomain: string;\n}\n\n/**\n * Static site infrastructure, which deploys site content to an S3 bucket.\n *\n * The site redirects from HTTP to HTTPS, using a CloudFront distribution,\n * Route53 alias record, and ACM certificate.\n */\nexport class StaticSite extends Construct {\n  constructor(parent: Construct, name: string, props: StaticSiteProps) {\n    super(parent, name);\n\n    const zone = route53.HostedZone.fromLookup(this, 'Zone', {\n      domainName: props.domainName,\n    });\n    const siteDomain = props.siteSubDomain + '.' + props.domainName;\n    new cdk.CfnOutput(this, 'Site', { value: 'https://' + siteDomain });\n\n    // Content bucket\n    const siteBucket = new s3.Bucket(this, 'SiteBucket', {\n      bucketName: siteDomain,\n      websiteIndexDocument: 'index.html',\n      websiteErrorDocument: 'error.html',\n      publicReadAccess: true,\n\n      // The default removal policy is RETAIN, which means that cdk destroy will not attempt to delete\n      // the new bucket, and it will remain in your account until manually deleted. By setting the policy to\n      // DESTROY, cdk destroy will attempt to delete the bucket, but will error if the bucket is not empty.\n      removalPolicy: cdk.RemovalPolicy.DESTROY, // NOT recommended for production code\n    });\n    new cdk.CfnOutput(this, 'Bucket', { value: siteBucket.bucketName });\n\n    // TLS certificate\n    const certificateArn = new acm.DnsValidatedCertificate(\n      this,\n      'SiteCertificate',\n      {\n        domainName: siteDomain,\n        hostedZone: zone,\n        region: 'us-east-1', // Cloudfront only checks this region for certificates.\n      },\n    ).certificateArn;\n    new cdk.CfnOutput(this, 'Certificate', { value: certificateArn });\n\n    // CloudFront distribution that provides HTTPS\n    const distribution = new cloudfront.CloudFrontWebDistribution(\n      this,\n      'SiteDistribution',\n      {\n        aliasConfiguration: {\n          acmCertRef: certificateArn,\n          names: [siteDomain],\n          sslMethod: cloudfront.SSLMethod.SNI,\n          securityPolicy: cloudfront.SecurityPolicyProtocol.TLS_V1_1_2016,\n        },\n        originConfigs: [\n          {\n            s3OriginSource: {\n              s3BucketSource: siteBucket,\n            },\n            behaviors: [{ isDefaultBehavior: true }],\n          },\n        ],\n      },\n    );\n    new cdk.CfnOutput(this, 'DistributionId', {\n      value: distribution.distributionId,\n    });\n\n    // Route53 alias record for the CloudFront distribution\n    new route53.ARecord(this, 'SiteAliasRecord', {\n      recordName: siteDomain,\n      target: route53.RecordTarget.fromAlias(\n        new targets.CloudFrontTarget(distribution),\n      ),\n      zone,\n    });\n\n    // Deploy site contents to S3 bucket\n    new s3deploy.BucketDeployment(this, 'DeployWithInvalidation', {\n      sources: [s3deploy.Source.asset('./site-contents')],\n      destinationBucket: siteBucket,\n      distribution,\n      distributionPaths: ['/*'],\n    });\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/aws-samples/aws-cdk-examples/tree/master/typescript/static-site\"\n        }}>{`AWS Samples - statis site`}</a></li>\n    </ol>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}