{"expireTime":9007200867335939000,"key":"gatsby-plugin-mdx-entire-payload-cf3c3a16a3d9a5ff634fce4069c500e1-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Testing","position":{"start":{"line":7,"column":4,"offset":169},"end":{"line":7,"column":11,"offset":176},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":11,"offset":176},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The test files are stored in the test folders and require the dev dependencies ","position":{"start":{"line":9,"column":1,"offset":178},"end":{"line":9,"column":80,"offset":257},"indent":[]}},{"type":"inlineCode","value":"sinonjs, jsdom, mocha, chai","position":{"start":{"line":9,"column":80,"offset":257},"end":{"line":9,"column":109,"offset":286},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":9,"column":109,"offset":286},"end":{"line":9,"column":110,"offset":287},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":178},"end":{"line":9,"column":110,"offset":287},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Run ","position":{"start":{"line":11,"column":1,"offset":289},"end":{"line":11,"column":5,"offset":293},"indent":[]}},{"type":"inlineCode","value":"npm test","position":{"start":{"line":11,"column":5,"offset":293},"end":{"line":11,"column":15,"offset":303},"indent":[]}},{"type":"text","value":" to view the tests files that are written in that folder.","position":{"start":{"line":11,"column":15,"offset":303},"end":{"line":11,"column":72,"offset":360},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":289},"end":{"line":11,"column":72,"offset":360},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Testing is still primitive and should be BDD (behaviour driven). Tests that are too specific will cause issues.","position":{"start":{"line":13,"column":1,"offset":362},"end":{"line":13,"column":112,"offset":473},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":362},"end":{"line":13,"column":112,"offset":473},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"mocha and chai","position":{"start":{"line":15,"column":3,"offset":477},"end":{"line":15,"column":17,"offset":491},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":475},"end":{"line":15,"column":19,"offset":493},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":475},"end":{"line":15,"column":19,"offset":493},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These two are used in tandem to assert/expect values. Check out the Chai documentation for relative examples.","position":{"start":{"line":17,"column":1,"offset":495},"end":{"line":17,"column":110,"offset":604},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":495},"end":{"line":17,"column":110,"offset":604},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Tests consist of test suites and test specs. In order to recreate DOM elements if you are looking to test values etc. from functionality, you can use the ","position":{"start":{"line":19,"column":1,"offset":606},"end":{"line":19,"column":155,"offset":760},"indent":[]}},{"type":"inlineCode","value":"jsdom","position":{"start":{"line":19,"column":155,"offset":760},"end":{"line":19,"column":162,"offset":767},"indent":[]}},{"type":"text","value":" library and import ","position":{"start":{"line":19,"column":162,"offset":767},"end":{"line":19,"column":182,"offset":787},"indent":[]}},{"type":"inlineCode","value":"jquery","position":{"start":{"line":19,"column":182,"offset":787},"end":{"line":19,"column":190,"offset":795},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":19,"column":190,"offset":795},"end":{"line":19,"column":191,"offset":796},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":606},"end":{"line":19,"column":191,"offset":796},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Below is a small example of a test set up.","position":{"start":{"line":21,"column":1,"offset":798},"end":{"line":21,"column":43,"offset":840},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":798},"end":{"line":21,"column":43,"offset":840},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import jsdom from 'jsdom-global';\nimport jQuery from '../bower_components/jquery/dist/jquery.min.js';\n\nimport ModuleToTest from 'path/to/module'l\n\n// require sinon/chai\nconst sinon = require('sinon');\nconst expect = require('chai').expect;\n\n// Test suite\ndescribe('These tests are supposed to test some functionality', () => {\n\n\tlet $;\n\tlet ageGateFilters;\n\tjsdom();\n\n\t// this function will run before every Test Spec\n\tbefore(function () {\n\t\t$ = jQuery;\n\t\tconst params = ['param1', 'param2', 'param3']\n\n\t\t// create instance\n\t\tconst moduleToTest = new ModuleToTest(...params);\n\t});\n\n\t// Test Spec (unit test)\n\tit('This test should return ok', () => {\n\t\texpect(true).to.be.ok;\t// returns ok\n\t});\n\n\t// Test Spec (unit test)\n\tit('This test should return true for the ModuleToTest function', () => {\n\t\texpect(moduleToTest.func()).to.equal(true);\t// returns ok if result is true\n\t});\n\n});","position":{"start":{"line":23,"column":1,"offset":842},"end":{"line":60,"column":4,"offset":1742},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"sinon.js","position":{"start":{"line":62,"column":3,"offset":1746},"end":{"line":62,"column":11,"offset":1754},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1744},"end":{"line":62,"column":13,"offset":1756},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1744},"end":{"line":62,"column":13,"offset":1756},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This library is used to essentially stub data for functions that require things like ajax etc. No tests currently use this effectively. Examples will be added later if used.","position":{"start":{"line":64,"column":1,"offset":1758},"end":{"line":64,"column":174,"offset":1931},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":1758},"end":{"line":64,"column":174,"offset":1931},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For now, I will show an example of a ","position":{"start":{"line":66,"column":1,"offset":1933},"end":{"line":66,"column":38,"offset":1970},"indent":[]}},{"type":"inlineCode","value":"spy","position":{"start":{"line":66,"column":38,"offset":1970},"end":{"line":66,"column":43,"offset":1975},"indent":[]}},{"type":"text","value":" and a ","position":{"start":{"line":66,"column":43,"offset":1975},"end":{"line":66,"column":50,"offset":1982},"indent":[]}},{"type":"inlineCode","value":"stub","position":{"start":{"line":66,"column":50,"offset":1982},"end":{"line":66,"column":56,"offset":1988},"indent":[]}},{"type":"text","value":" (as this may the most relevant): ","position":{"start":{"line":66,"column":56,"offset":1988},"end":{"line":66,"column":90,"offset":2022},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1933},"end":{"line":66,"column":90,"offset":2022},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"For the Spy","position":{"start":{"line":68,"column":2,"offset":2025},"end":{"line":68,"column":13,"offset":2036},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2024},"end":{"line":68,"column":14,"offset":2037},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2024},"end":{"line":68,"column":14,"offset":2037},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// in module Example\n\nexport default class Example {\n\t\n\tcallout() {\n\t\tlet a = 1;\n\t\tlet b = 2;\n\n\t\treturn target(a,b);\n\t}\n\n}\n\n// in a test file\n\nimport Example from 'Example';\n\n// Test suite\ndescribe('A test suite using sinon', () => {\n\n\t// this function will run before every Test Spec\n\tbefore(function () {\n\t\t$ = jQuery;\n\t\tconst params = ['param1', 'param2', 'param3']\n\n\t\t// create instance\n\t\tconst example = new Example(...params);\n\t});\n\n\t// Test spec (unit test)\n\tit('Should return that the async func was called', () => {\n\t\t\n\t\tlet targetSpy = sinon.spy(example, 'target');\n\n\t\t// Now, any time we call the function, the spy logs information about it\n\t\texample.callout();\n\n\t\tassert(targetSpy.calledOnce); // returns true\n\t});\n});","position":{"start":{"line":70,"column":1,"offset":2039},"end":{"line":111,"column":4,"offset":2777},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"For the Stub","position":{"start":{"line":113,"column":2,"offset":2780},"end":{"line":113,"column":14,"offset":2792},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":2779},"end":{"line":113,"column":15,"offset":2793},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":2779},"end":{"line":113,"column":15,"offset":2793},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// in module Example\n\nexport default class Example {\n\t\n\tcallout(param, callback) {\n\t\t$.ajax({\n\t\t\t// whatever it normally is\n\t\t}, callback);\n\t}\n\n}\n\n// in a test file\n\nimport Example from 'Example';\n\n// Test suite\ndescribe('A test suite using sinon', () => {\n\n\t// this function will run before every Test Spec\n\tbefore(function () {\n\t\t$ = jQuery;\n\t\tconst params = ['param1', 'param2', 'param3']\n\n\t\t// create instance\n\t\tconst example = new Example(...params);\n\t});\n\n\t// Test spec (unit test)\n\tit('Should call callback after saving', () => {\n\t\t\n\t\t//We'll stub $.post so a request is not sent\n\t\tconst post = sinon.stub($, 'ajax');\n\t\tpost.yields();\n\n\t\t//We can use a spy as the callback so it's easy to verify\n\t\tvar callback = sinon.spy();\n\n\t\texample.callout(param, callback);\n\n\t\tpost.restore();\n\t\tsinon.assert.calledOnce(callback); // returns true\n\t});\n});","position":{"start":{"line":115,"column":1,"offset":2795},"end":{"line":160,"column":4,"offset":3653},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"jsdom","position":{"start":{"line":162,"column":3,"offset":3657},"end":{"line":162,"column":8,"offset":3662},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":3655},"end":{"line":162,"column":10,"offset":3664},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":3655},"end":{"line":162,"column":10,"offset":3664},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"jsdom is a library that allows you to write a ","position":{"start":{"line":164,"column":1,"offset":3666},"end":{"line":164,"column":47,"offset":3712},"indent":[]}},{"type":"inlineCode","value":"innerHTML","position":{"start":{"line":164,"column":47,"offset":3712},"end":{"line":164,"column":58,"offset":3723},"indent":[]}},{"type":"text","value":" var for the test to use if you want to test out the jQuery values for a test.","position":{"start":{"line":164,"column":58,"offset":3723},"end":{"line":164,"column":136,"offset":3801},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":3666},"end":{"line":164,"column":136,"offset":3801},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For an example, checkout yt ","position":{"start":{"line":166,"column":1,"offset":3803},"end":{"line":166,"column":29,"offset":3831},"indent":[]}},{"type":"inlineCode","value":"test/agegate_test.js","position":{"start":{"line":166,"column":29,"offset":3831},"end":{"line":166,"column":51,"offset":3853},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":166,"column":51,"offset":3853},"end":{"line":166,"column":52,"offset":3854},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":3803},"end":{"line":166,"column":52,"offset":3854},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":168,"column":1,"offset":3856},"end":{"line":168,"column":31,"offset":3886},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":168,"column":31,"offset":3886}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h2>\n    <p>{`The test files are stored in the test folders and require the dev dependencies `}<inlineCode parentName=\"p\">{`sinonjs, jsdom, mocha, chai`}</inlineCode>{`.`}</p>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`npm test`}</inlineCode>{` to view the tests files that are written in that folder.`}</p>\n    <p>{`Testing is still primitive and should be BDD (behaviour driven). Tests that are too specific will cause issues.`}</p>\n    <p><strong parentName=\"p\">{`mocha and chai`}</strong></p>\n    <p>{`These two are used in tandem to assert/expect values. Check out the Chai documentation for relative examples.`}</p>\n    <p>{`Tests consist of test suites and test specs. In order to recreate DOM elements if you are looking to test values etc. from functionality, you can use the `}<inlineCode parentName=\"p\">{`jsdom`}</inlineCode>{` library and import `}<inlineCode parentName=\"p\">{`jquery`}</inlineCode>{`.`}</p>\n    <p>{`Below is a small example of a test set up.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import jsdom from 'jsdom-global';\nimport jQuery from '../bower_components/jquery/dist/jquery.min.js';\n\nimport ModuleToTest from 'path/to/module'l\n\n// require sinon/chai\nconst sinon = require('sinon');\nconst expect = require('chai').expect;\n\n// Test suite\ndescribe('These tests are supposed to test some functionality', () => {\n\n    let $;\n    let ageGateFilters;\n    jsdom();\n\n    // this function will run before every Test Spec\n    before(function () {\n        $ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const moduleToTest = new ModuleToTest(...params);\n    });\n\n    // Test Spec (unit test)\n    it('This test should return ok', () => {\n        expect(true).to.be.ok;  // returns ok\n    });\n\n    // Test Spec (unit test)\n    it('This test should return true for the ModuleToTest function', () => {\n        expect(moduleToTest.func()).to.equal(true); // returns ok if result is true\n    });\n\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`sinon.js`}</strong></p>\n    <p>{`This library is used to essentially stub data for functions that require things like ajax etc. No tests currently use this effectively. Examples will be added later if used.`}</p>\n    <p>{`For now, I will show an example of a `}<inlineCode parentName=\"p\">{`spy`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`stub`}</inlineCode>{` (as this may the most relevant): `}</p>\n    <p><em parentName=\"p\">{`For the Spy`}</em></p>\n    <pre><code parentName=\"pre\" {...{}}>{`// in module Example\n\nexport default class Example {\n    \n    callout() {\n        let a = 1;\n        let b = 2;\n\n        return target(a,b);\n    }\n\n}\n\n// in a test file\n\nimport Example from 'Example';\n\n// Test suite\ndescribe('A test suite using sinon', () => {\n\n    // this function will run before every Test Spec\n    before(function () {\n        $ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const example = new Example(...params);\n    });\n\n    // Test spec (unit test)\n    it('Should return that the async func was called', () => {\n        \n        let targetSpy = sinon.spy(example, 'target');\n\n        // Now, any time we call the function, the spy logs information about it\n        example.callout();\n\n        assert(targetSpy.calledOnce); // returns true\n    });\n});\n`}</code></pre>\n    <p><em parentName=\"p\">{`For the Stub`}</em></p>\n    <pre><code parentName=\"pre\" {...{}}>{`// in module Example\n\nexport default class Example {\n    \n    callout(param, callback) {\n        $.ajax({\n            // whatever it normally is\n        }, callback);\n    }\n\n}\n\n// in a test file\n\nimport Example from 'Example';\n\n// Test suite\ndescribe('A test suite using sinon', () => {\n\n    // this function will run before every Test Spec\n    before(function () {\n        $ = jQuery;\n        const params = ['param1', 'param2', 'param3']\n\n        // create instance\n        const example = new Example(...params);\n    });\n\n    // Test spec (unit test)\n    it('Should call callback after saving', () => {\n        \n        //We'll stub $.post so a request is not sent\n        const post = sinon.stub($, 'ajax');\n        post.yields();\n\n        //We can use a spy as the callback so it's easy to verify\n        var callback = sinon.spy();\n\n        example.callout(param, callback);\n\n        post.restore();\n        sinon.assert.calledOnce(callback); // returns true\n    });\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`jsdom`}</strong></p>\n    <p>{`jsdom is a library that allows you to write a `}<inlineCode parentName=\"p\">{`innerHTML`}</inlineCode>{` var for the test to use if you want to test out the jQuery values for a test.`}</p>\n    <p>{`For an example, checkout yt `}<inlineCode parentName=\"p\">{`test/agegate_test.js`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}