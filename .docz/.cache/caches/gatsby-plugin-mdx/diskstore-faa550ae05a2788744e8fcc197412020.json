{"expireTime":9007200852878439000,"key":"gatsby-plugin-mdx-entire-payload-2e36cbfb319ecf878ed912bbca1e9afd-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Elixir SQL","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":13,"offset":179},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":13,"offset":179},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To do this, we use another Open Source project named Ecto.","position":{"start":{"line":10,"column":1,"offset":181},"end":{"line":10,"column":59,"offset":239},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":181},"end":{"line":10,"column":59,"offset":239},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Model File for Postgres","position":{"start":{"line":12,"column":4,"offset":244},"end":{"line":12,"column":27,"offset":267},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":241},"end":{"line":12,"column":27,"offset":267},"indent":[]}},{"type":"code","lang":"elixir","meta":null,"value":"defmodule Discuss.Topic do\n  use Discuss.Web, :model\n\n  # required for model file\n  schema \"topics\" do\n    field :title, :string\n  end\n\n  # second requirement\n  def changeset(struct, params \\\\ %{}) dp\n    struct\n    |> cast(params, [:title])\n    |> validate_required([:title])\n  end\nend","position":{"start":{"line":14,"column":1,"offset":269},"end":{"line":30,"column":4,"offset":569},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Validation in Phoenix is a little more challenging than it needs to be.","position":{"start":{"line":32,"column":1,"offset":571},"end":{"line":32,"column":72,"offset":642},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":571},"end":{"line":32,"column":72,"offset":642},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"The Elixir Pattern","position":{"start":{"line":34,"column":5,"offset":648},"end":{"line":34,"column":23,"offset":666},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":644},"end":{"line":34,"column":23,"offset":666},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Struct: A hash that contains some data. Represents a record (or a record we want to save) in the database","position":{"start":{"line":36,"column":3,"offset":670},"end":{"line":36,"column":108,"offset":775},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":670},"end":{"line":36,"column":108,"offset":775},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":668},"end":{"line":36,"column":108,"offset":775},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Params: A hash that contains the properties we want to update the struct with","position":{"start":{"line":37,"column":3,"offset":778},"end":{"line":37,"column":80,"offset":855},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":778},"end":{"line":37,"column":80,"offset":855},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":776},"end":{"line":37,"column":80,"offset":855},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"cast: produces a changeset (comes from inside of Phoenix)","position":{"start":{"line":38,"column":3,"offset":858},"end":{"line":38,"column":60,"offset":915},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":858},"end":{"line":38,"column":60,"offset":915},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":856},"end":{"line":38,"column":60,"offset":915},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"validators: adds errors to changeset","position":{"start":{"line":39,"column":3,"offset":918},"end":{"line":39,"column":39,"offset":954},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":918},"end":{"line":39,"column":39,"offset":954},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":916},"end":{"line":39,"column":39,"offset":954},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":668},"end":{"line":39,"column":39,"offset":954},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The changeset is the object that records the updates in our database that we need to make to take what it is right now (struct) to what it needs to be (params).","position":{"start":{"line":41,"column":1,"offset":956},"end":{"line":41,"column":161,"offset":1116},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":956},"end":{"line":41,"column":161,"offset":1116},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"More On Changesets","position":{"start":{"line":43,"column":5,"offset":1122},"end":{"line":43,"column":23,"offset":1140},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1118},"end":{"line":43,"column":23,"offset":1140},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note that ","position":{"start":{"line":45,"column":1,"offset":1142},"end":{"line":45,"column":11,"offset":1152},"indent":[]}},{"type":"inlineCode","value":"params \\\\ %{}","position":{"start":{"line":45,"column":11,"offset":1152},"end":{"line":45,"column":26,"offset":1167},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1142},"end":{"line":45,"column":26,"offset":1167},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Ecto.Changeset","position":{"start":{"line":47,"column":4,"offset":1172},"end":{"line":47,"column":18,"offset":1186},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1169},"end":{"line":47,"column":18,"offset":1186},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Ecto.Repo","position":{"start":{"line":49,"column":4,"offset":1191},"end":{"line":49,"column":13,"offset":1200},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1188},"end":{"line":49,"column":13,"offset":1200},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ecto is responsible with all the ","position":{"start":{"line":51,"column":1,"offset":1202},"end":{"line":51,"column":34,"offset":1235},"indent":[]}},{"type":"inlineCode","value":"Repo","position":{"start":{"line":51,"column":34,"offset":1235},"end":{"line":51,"column":40,"offset":1241},"indent":[]}},{"type":"text","value":" module that is responsible for all conversations with the database.","position":{"start":{"line":51,"column":40,"offset":1241},"end":{"line":51,"column":108,"offset":1309},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1202},"end":{"line":51,"column":108,"offset":1309},"indent":[]}},{"type":"code","lang":"elixir","meta":null,"value":"def create(conn, %{\"topic\" => topic}) do\n  changeset = Topic.changeset(%Topic{}. topic)\n\n  case Repo.insert(changeset) do\n    {:ok, post} -> IO.inspect(post)\n    {:error, changeset} -> IO.inspect(changeset)\n  end\nend","position":{"start":{"line":53,"column":1,"offset":1311},"end":{"line":62,"column":4,"offset":1541},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using the Repo module for queries","position":{"start":{"line":64,"column":4,"offset":1546},"end":{"line":64,"column":37,"offset":1579},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":1543},"end":{"line":64,"column":37,"offset":1579},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use the link for ","position":{"start":{"line":66,"column":1,"offset":1581},"end":{"line":66,"column":18,"offset":1598},"indent":[]}},{"type":"link","title":null,"url":"hexdocs.pm/ecto","children":[{"type":"text","value":"Ecto","position":{"start":{"line":66,"column":19,"offset":1599},"end":{"line":66,"column":23,"offset":1603},"indent":[]}}],"position":{"start":{"line":66,"column":18,"offset":1598},"end":{"line":66,"column":41,"offset":1621},"indent":[]}},{"type":"text","value":" to get more information.","position":{"start":{"line":66,"column":41,"offset":1621},"end":{"line":66,"column":66,"offset":1646},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1581},"end":{"line":66,"column":66,"offset":1646},"indent":[]}},{"type":"code","lang":"elixir","meta":null,"value":"def index(conn, _params) do\n\nend","position":{"start":{"line":68,"column":1,"offset":1648},"end":{"line":72,"column":4,"offset":1694},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":75,"column":1,"offset":1697},"end":{"line":75,"column":31,"offset":1727},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":75,"column":31,"offset":1727}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"elixir-sql\"\n    }}>{`Elixir SQL`}</h1>\n    <p>{`To do this, we use another Open Source project named Ecto.`}</p>\n    <h2 {...{\n      \"id\": \"model-file-for-postgres\"\n    }}>{`Model File for Postgres`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule Discuss.Topic do\n  use Discuss.Web, :model\n\n  # required for model file\n  schema \"topics\" do\n    field :title, :string\n  end\n\n  # second requirement\n  def changeset(struct, params \\\\\\\\ %{}) dp\n    struct\n    |> cast(params, [:title])\n    |> validate_required([:title])\n  end\nend\n`}</code></pre>\n    <p>{`Validation in Phoenix is a little more challenging than it needs to be.`}</p>\n    <h3 {...{\n      \"id\": \"the-elixir-pattern\"\n    }}>{`The Elixir Pattern`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Struct: A hash that contains some data. Represents a record (or a record we want to save) in the database`}</li>\n      <li parentName=\"ul\">{`Params: A hash that contains the properties we want to update the struct with`}</li>\n      <li parentName=\"ul\">{`cast: produces a changeset (comes from inside of Phoenix)`}</li>\n      <li parentName=\"ul\">{`validators: adds errors to changeset`}</li>\n    </ul>\n    <p>{`The changeset is the object that records the updates in our database that we need to make to take what it is right now (struct) to what it needs to be (params).`}</p>\n    <h3 {...{\n      \"id\": \"more-on-changesets\"\n    }}>{`More On Changesets`}</h3>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`params \\\\\\\\ %{}`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"ectochangeset\"\n    }}>{`Ecto.Changeset`}</h2>\n    <h2 {...{\n      \"id\": \"ectorepo\"\n    }}>{`Ecto.Repo`}</h2>\n    <p>{`Ecto is responsible with all the `}<inlineCode parentName=\"p\">{`Repo`}</inlineCode>{` module that is responsible for all conversations with the database.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`def create(conn, %{\"topic\" => topic}) do\n  changeset = Topic.changeset(%Topic{}. topic)\n\n  case Repo.insert(changeset) do\n    {:ok, post} -> IO.inspect(post)\n    {:error, changeset} -> IO.inspect(changeset)\n  end\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-the-repo-module-for-queries\"\n    }}>{`Using the Repo module for queries`}</h2>\n    <p>{`Use the link for `}<a parentName=\"p\" {...{\n        \"href\": \"hexdocs.pm/ecto\"\n      }}>{`Ecto`}</a>{` to get more information.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`def index(conn, _params) do\n\nend\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}