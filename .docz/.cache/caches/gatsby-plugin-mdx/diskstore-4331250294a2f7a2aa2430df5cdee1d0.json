{"expireTime":9007200849425507000,"key":"gatsby-plugin-mdx-entire-payload-65b8f4a2035f8e1ecf71cc983672d292-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Principles","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":13,"offset":178},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":13,"offset":178},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Organising symbols","position":{"start":{"line":9,"column":4,"offset":183},"end":{"line":9,"column":22,"offset":201},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":180},"end":{"line":9,"column":22,"offset":201},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use the symbol organiser to auto-organise symbols.","position":{"start":{"line":11,"column":1,"offset":203},"end":{"line":11,"column":51,"offset":253},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":203},"end":{"line":11,"column":51,"offset":253},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Naming conventions","position":{"start":{"line":13,"column":4,"offset":258},"end":{"line":13,"column":22,"offset":276},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":255},"end":{"line":13,"column":22,"offset":276},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When it comes to naming principles, use the convention of ","position":{"start":{"line":15,"column":1,"offset":278},"end":{"line":15,"column":59,"offset":336},"indent":[]}},{"type":"inlineCode","value":"Button/Primary/Light","position":{"start":{"line":15,"column":59,"offset":336},"end":{"line":15,"column":81,"offset":358},"indent":[]}},{"type":"text","value":" with aims that the first word can be parsed by sketch up for type and the following elements of a ","position":{"start":{"line":15,"column":81,"offset":358},"end":{"line":15,"column":180,"offset":457},"indent":[]}},{"type":"inlineCode","value":"/","position":{"start":{"line":15,"column":180,"offset":457},"end":{"line":15,"column":183,"offset":460},"indent":[]}},{"type":"text","value":" split array can be use to denote classnames.","position":{"start":{"line":15,"column":183,"offset":460},"end":{"line":15,"column":228,"offset":505},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":278},"end":{"line":15,"column":228,"offset":505},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Anything split by ","position":{"start":{"line":17,"column":1,"offset":507},"end":{"line":17,"column":19,"offset":525},"indent":[]}},{"type":"inlineCode","value":"/","position":{"start":{"line":17,"column":19,"offset":525},"end":{"line":17,"column":22,"offset":528},"indent":[]}},{"type":"text","value":" itself becomes a classname when converted using sketchup.","position":{"start":{"line":17,"column":22,"offset":528},"end":{"line":17,"column":80,"offset":586},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":507},"end":{"line":17,"column":80,"offset":586},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When naming pages and components, just use camel casing with no splits.","position":{"start":{"line":19,"column":1,"offset":588},"end":{"line":19,"column":72,"offset":659},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":588},"end":{"line":19,"column":72,"offset":659},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Creating new symbols","position":{"start":{"line":21,"column":4,"offset":664},"end":{"line":21,"column":24,"offset":684},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":661},"end":{"line":21,"column":24,"offset":684},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the sake of creating base components, just use the basic colours and treat it like a wireframe. These components can then take on the naming convention above.","position":{"start":{"line":23,"column":1,"offset":686},"end":{"line":23,"column":163,"offset":848},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":686},"end":{"line":23,"column":163,"offset":848},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When designing a new set of components, then detach the symbol in the page workflow. From here, you make create it as a new symbol as required.","position":{"start":{"line":25,"column":1,"offset":850},"end":{"line":25,"column":144,"offset":993},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":850},"end":{"line":25,"column":144,"offset":993},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":28,"column":1,"offset":996},"end":{"line":28,"column":31,"offset":1026},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":28,"column":31,"offset":1026}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"principles\"\n    }}>{`Principles`}</h1>\n    <h2 {...{\n      \"id\": \"organising-symbols\"\n    }}>{`Organising symbols`}</h2>\n    <p>{`Use the symbol organiser to auto-organise symbols.`}</p>\n    <h2 {...{\n      \"id\": \"naming-conventions\"\n    }}>{`Naming conventions`}</h2>\n    <p>{`When it comes to naming principles, use the convention of `}<inlineCode parentName=\"p\">{`Button/Primary/Light`}</inlineCode>{` with aims that the first word can be parsed by sketch up for type and the following elements of a `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{` split array can be use to denote classnames.`}</p>\n    <p>{`Anything split by `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{` itself becomes a classname when converted using sketchup.`}</p>\n    <p>{`When naming pages and components, just use camel casing with no splits.`}</p>\n    <h2 {...{\n      \"id\": \"creating-new-symbols\"\n    }}>{`Creating new symbols`}</h2>\n    <p>{`For the sake of creating base components, just use the basic colours and treat it like a wireframe. These components can then take on the naming convention above.`}</p>\n    <p>{`When designing a new set of components, then detach the symbol in the page workflow. From here, you make create it as a new symbol as required.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}