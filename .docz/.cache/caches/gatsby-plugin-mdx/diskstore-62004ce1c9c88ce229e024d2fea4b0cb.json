{"expireTime":9007200848610920000,"key":"gatsby-plugin-mdx-entire-payload-a93efc4a6a2ae092c0e59f7080f933b3-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Memento","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":10,"offset":176},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":10,"offset":176},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Capture and externalise an object's internal state allowing the object to be restored to this state later (without violating encapsulation).","position":{"start":{"line":10,"column":1,"offset":178},"end":{"line":10,"column":141,"offset":318},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":178},"end":{"line":10,"column":141,"offset":318},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Participants","position":{"start":{"line":12,"column":4,"offset":323},"end":{"line":12,"column":16,"offset":335},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":320},"end":{"line":12,"column":16,"offset":335},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Memento (stores internal state of Originator object - may store as much or little as possible)","position":{"start":{"line":14,"column":3,"offset":339},"end":{"line":14,"column":97,"offset":433},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":339},"end":{"line":14,"column":97,"offset":433},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":337},"end":{"line":14,"column":97,"offset":433},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Originator (creates memento containing snapshot of current state)","position":{"start":{"line":15,"column":3,"offset":436},"end":{"line":15,"column":68,"offset":501},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":436},"end":{"line":15,"column":68,"offset":501},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":434},"end":{"line":15,"column":68,"offset":501},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Caretaker (responsible for memento's safekeeping)","position":{"start":{"line":16,"column":3,"offset":504},"end":{"line":16,"column":52,"offset":553},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":504},"end":{"line":16,"column":52,"offset":553},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":502},"end":{"line":16,"column":52,"offset":553},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":337},"end":{"line":16,"column":52,"offset":553},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":18,"column":4,"offset":558},"end":{"line":18,"column":11,"offset":565},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":555},"end":{"line":18,"column":11,"offset":565},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"class State {\n  private _value: String;\n\n  constructor(value) {\n    this._value = value;\n  }\n\n  public set value(newValue: String) {\n    this._value = newValue;\n  }\n\n  public get value() {\n    return this._value;\n  }\n}\n\ninterface StateInterface {\n  state: State;\n}\n\nclass Memento implements StateInterface {\n  private _state: State;\n\n  constructor(state: State) {\n    this._state = state;\n  }\n\n  public set state(newState: State) {\n    this._state = newState;\n  }\n\n  public get state() {\n    return this._state;\n  }\n}\n\nclass Originator implements StateInterface {\n  private _state: State;\n\n  constructor(state: State) {\n    console.log(`\"${state.value}\"`);\n    this._state = state;\n  }\n\n  public set state(state: State) {\n    console.log(state.value);\n    this._state = state;\n  }\n\n  public get state() {\n    return this._state;\n  }\n\n  public createMemento() {\n    console.log(`create \"${this._state.value}\" memento`);\n    return new Memento(this._state);\n  }\n\n  public restoreMemento(memento: Memento) {\n    console.log(`restore \"${memento.state.value}\"`);\n    this._state = memento.state;\n  }\n}\n\nclass CareTaker {\n  private _memento: Memento;\n\n  public set memento(memento: Memento) {\n    // memento saved\n    this._memento = memento;\n  }\n\n  public get memento() {\n    return this._memento;\n  }\n}\n\n(function main() {\n  // Save check point\n  const oldState = new State('check point');\n  const originator = new Originator(oldState);\n  const careTaker = new CareTaker();\n  careTaker.memento = originator.createMemento();\n\n  // Player dies\n  const currentState = new State('die');\n  originator.state = currentState;\n\n  // Player reset to check point\n  originator.restoreMemento(careTaker.memento);\n\n  // Player gain medel\n  const medalState = new State('get medal');\n  originator.state = medalState;\n  // Save\n  careTaker.memento = originator.createMemento();\n})();","position":{"start":{"line":20,"column":1,"offset":567},"end":{"line":118,"column":4,"offset":2448},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":121,"column":1,"offset":2451},"end":{"line":121,"column":31,"offset":2481},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":121,"column":31,"offset":2481}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"memento\"\n    }}>{`Memento`}</h1>\n    <p>{`Capture and externalise an object's internal state allowing the object to be restored to this state later (without violating encapsulation).`}</p>\n    <h2 {...{\n      \"id\": \"participants\"\n    }}>{`Participants`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Memento (stores internal state of Originator object - may store as much or little as possible)`}</li>\n      <li parentName=\"ul\">{`Originator (creates memento containing snapshot of current state)`}</li>\n      <li parentName=\"ul\">{`Caretaker (responsible for memento's safekeeping)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class State {\n  private _value: String;\n\n  constructor(value) {\n    this._value = value;\n  }\n\n  public set value(newValue: String) {\n    this._value = newValue;\n  }\n\n  public get value() {\n    return this._value;\n  }\n}\n\ninterface StateInterface {\n  state: State;\n}\n\nclass Memento implements StateInterface {\n  private _state: State;\n\n  constructor(state: State) {\n    this._state = state;\n  }\n\n  public set state(newState: State) {\n    this._state = newState;\n  }\n\n  public get state() {\n    return this._state;\n  }\n}\n\nclass Originator implements StateInterface {\n  private _state: State;\n\n  constructor(state: State) {\n    console.log(\\`\"\\${state.value}\"\\`);\n    this._state = state;\n  }\n\n  public set state(state: State) {\n    console.log(state.value);\n    this._state = state;\n  }\n\n  public get state() {\n    return this._state;\n  }\n\n  public createMemento() {\n    console.log(\\`create \"\\${this._state.value}\" memento\\`);\n    return new Memento(this._state);\n  }\n\n  public restoreMemento(memento: Memento) {\n    console.log(\\`restore \"\\${memento.state.value}\"\\`);\n    this._state = memento.state;\n  }\n}\n\nclass CareTaker {\n  private _memento: Memento;\n\n  public set memento(memento: Memento) {\n    // memento saved\n    this._memento = memento;\n  }\n\n  public get memento() {\n    return this._memento;\n  }\n}\n\n(function main() {\n  // Save check point\n  const oldState = new State('check point');\n  const originator = new Originator(oldState);\n  const careTaker = new CareTaker();\n  careTaker.memento = originator.createMemento();\n\n  // Player dies\n  const currentState = new State('die');\n  originator.state = currentState;\n\n  // Player reset to check point\n  originator.restoreMemento(careTaker.memento);\n\n  // Player gain medel\n  const medalState = new State('get medal');\n  originator.state = medalState;\n  // Save\n  careTaker.memento = originator.createMemento();\n})();\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}