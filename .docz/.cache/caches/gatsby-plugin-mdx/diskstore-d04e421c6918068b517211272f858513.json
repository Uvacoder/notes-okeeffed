{"expireTime":9007200867335941000,"key":"gatsby-plugin-mdx-entire-payload-fad0b37d09c8e372cc3753eb39d02d48-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Reading the D3 Documentation","position":{"start":{"line":7,"column":4,"offset":169},"end":{"line":7,"column":32,"offset":197},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":32,"offset":197},"indent":[]}},{"type":"jsx","value":"<!-- TOC -->","position":{"start":{"line":9,"column":1,"offset":199},"end":{"line":9,"column":13,"offset":211},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"- [Reading the D3 Documentation](#reading-the-d3-documentation)\n- [map() and filter() methods](#map-and-filter-methods)\n- [d3 methods](#d3-methods)\n- [Programmatic SVGs](#programmatic-svgs)\n- [Scaling Data](#scaling-data)\n- [Styling with CSS](#styling-with-css)\n- [Adding Text to the chart](#adding-text-to-the-chart)\n- [Using SVG groups](#using-svg-groups)","position":{"start":{"line":11,"column":1,"offset":213},"end":{"line":18,"column":44,"offset":602},"indent":[1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#section-4-making-a-complex-chart","children":[{"type":"text","value":"Section 4: Making a Complex Chart","position":{"start":{"line":20,"column":6,"offset":609},"end":{"line":20,"column":39,"offset":642},"indent":[]}}],"position":{"start":{"line":20,"column":5,"offset":608},"end":{"line":20,"column":75,"offset":678},"indent":[]}}],"position":{"start":{"line":20,"column":5,"offset":608},"end":{"line":20,"column":75,"offset":678},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#working-with-arrays-of-objects","children":[{"type":"text","value":"Working with Arrays of Objects","position":{"start":{"line":21,"column":10,"offset":688},"end":{"line":21,"column":40,"offset":718},"indent":[]}}],"position":{"start":{"line":21,"column":9,"offset":687},"end":{"line":21,"column":74,"offset":752},"indent":[]}}],"position":{"start":{"line":21,"column":9,"offset":687},"end":{"line":21,"column":74,"offset":752},"indent":[]}}],"position":{"start":{"line":21,"column":5,"offset":683},"end":{"line":21,"column":74,"offset":752},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#creating-an-ordinal-scale","children":[{"type":"text","value":"Creating an Ordinal Scale","position":{"start":{"line":22,"column":10,"offset":762},"end":{"line":22,"column":35,"offset":787},"indent":[]}}],"position":{"start":{"line":22,"column":9,"offset":761},"end":{"line":22,"column":64,"offset":816},"indent":[]}}],"position":{"start":{"line":22,"column":9,"offset":761},"end":{"line":22,"column":64,"offset":816},"indent":[]}}],"position":{"start":{"line":22,"column":5,"offset":757},"end":{"line":22,"column":64,"offset":816},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#setting-colour-with-colour-scales","children":[{"type":"text","value":"Setting colour with colour scales","position":{"start":{"line":23,"column":10,"offset":826},"end":{"line":23,"column":43,"offset":859},"indent":[]}}],"position":{"start":{"line":23,"column":9,"offset":825},"end":{"line":23,"column":80,"offset":896},"indent":[]}}],"position":{"start":{"line":23,"column":9,"offset":825},"end":{"line":23,"column":80,"offset":896},"indent":[]}}],"position":{"start":{"line":23,"column":5,"offset":821},"end":{"line":23,"column":80,"offset":896},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#adding-x-and-y-axis","children":[{"type":"text","value":"Adding X and Y axis","position":{"start":{"line":24,"column":10,"offset":906},"end":{"line":24,"column":29,"offset":925},"indent":[]}}],"position":{"start":{"line":24,"column":9,"offset":905},"end":{"line":24,"column":52,"offset":948},"indent":[]}}],"position":{"start":{"line":24,"column":9,"offset":905},"end":{"line":24,"column":52,"offset":948},"indent":[]}}],"position":{"start":{"line":24,"column":5,"offset":901},"end":{"line":24,"column":52,"offset":948},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#flipping-the-axes","children":[{"type":"text","value":"Flipping the axes","position":{"start":{"line":25,"column":10,"offset":958},"end":{"line":25,"column":27,"offset":975},"indent":[]}}],"position":{"start":{"line":25,"column":9,"offset":957},"end":{"line":25,"column":48,"offset":996},"indent":[]}}],"position":{"start":{"line":25,"column":9,"offset":957},"end":{"line":25,"column":48,"offset":996},"indent":[]}}],"position":{"start":{"line":25,"column":5,"offset":953},"end":{"line":25,"column":48,"offset":996},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#adding-gridlines","children":[{"type":"text","value":"Adding Gridlines","position":{"start":{"line":26,"column":10,"offset":1006},"end":{"line":26,"column":26,"offset":1022},"indent":[]}}],"position":{"start":{"line":26,"column":9,"offset":1005},"end":{"line":26,"column":46,"offset":1042},"indent":[]}}],"position":{"start":{"line":26,"column":9,"offset":1005},"end":{"line":26,"column":46,"offset":1042},"indent":[]}}],"position":{"start":{"line":26,"column":5,"offset":1001},"end":{"line":26,"column":46,"offset":1042},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#rotating-the-x-axis-titles","children":[{"type":"text","value":"Rotating the X axis titles","position":{"start":{"line":27,"column":10,"offset":1052},"end":{"line":27,"column":36,"offset":1078},"indent":[]}}],"position":{"start":{"line":27,"column":9,"offset":1051},"end":{"line":27,"column":66,"offset":1108},"indent":[]}}],"position":{"start":{"line":27,"column":9,"offset":1051},"end":{"line":27,"column":66,"offset":1108},"indent":[]}}],"position":{"start":{"line":27,"column":5,"offset":1047},"end":{"line":27,"column":66,"offset":1108},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#adding-axis-labels","children":[{"type":"text","value":"Adding axis labels","position":{"start":{"line":28,"column":10,"offset":1118},"end":{"line":28,"column":28,"offset":1136},"indent":[]}}],"position":{"start":{"line":28,"column":9,"offset":1117},"end":{"line":28,"column":50,"offset":1158},"indent":[]}}],"position":{"start":{"line":28,"column":9,"offset":1117},"end":{"line":28,"column":50,"offset":1158},"indent":[]}}],"position":{"start":{"line":28,"column":5,"offset":1113},"end":{"line":28,"column":50,"offset":1158},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#updating-the-plot-function-with-best-practises","children":[{"type":"text","value":"Updating the plot function with best practises","position":{"start":{"line":29,"column":10,"offset":1168},"end":{"line":29,"column":56,"offset":1214},"indent":[]}}],"position":{"start":{"line":29,"column":9,"offset":1167},"end":{"line":29,"column":106,"offset":1264},"indent":[]}}],"position":{"start":{"line":29,"column":9,"offset":1167},"end":{"line":29,"column":106,"offset":1264},"indent":[]}}],"position":{"start":{"line":29,"column":5,"offset":1163},"end":{"line":29,"column":106,"offset":1264},"indent":[]}}],"position":{"start":{"line":21,"column":5,"offset":683},"end":{"line":29,"column":106,"offset":1264},"indent":[5,5,5,5,5,5,5,5]}}],"position":{"start":{"line":20,"column":1,"offset":604},"end":{"line":29,"column":106,"offset":1264},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#secontion-5-making-the-chart-interactive","children":[{"type":"text","value":"Secontion 5: Making the Chart Interactive","position":{"start":{"line":30,"column":6,"offset":1270},"end":{"line":30,"column":47,"offset":1311},"indent":[]}}],"position":{"start":{"line":30,"column":5,"offset":1269},"end":{"line":30,"column":91,"offset":1355},"indent":[]}}],"position":{"start":{"line":30,"column":5,"offset":1269},"end":{"line":30,"column":91,"offset":1355},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1265},"end":{"line":30,"column":91,"offset":1355},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":604},"end":{"line":30,"column":91,"offset":1355},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<!-- /TOC -->","position":{"start":{"line":32,"column":1,"offset":1357},"end":{"line":32,"column":14,"offset":1370},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"API Documentation is a great link to bookmark","position":{"start":{"line":34,"column":5,"offset":1376},"end":{"line":34,"column":50,"offset":1421},"indent":[]}}],"position":{"start":{"line":34,"column":5,"offset":1376},"end":{"line":34,"column":50,"offset":1421},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1372},"end":{"line":34,"column":50,"offset":1421},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1372},"end":{"line":34,"column":50,"offset":1421},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":36,"column":1,"offset":1423},"end":{"line":36,"column":4,"offset":1426},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"map() and filter() methods","position":{"start":{"line":38,"column":4,"offset":1431},"end":{"line":38,"column":30,"offset":1457},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1428},"end":{"line":38,"column":30,"offset":1457},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var data = [123, 52, 46, 30, 4];\n\nconst results = data.filter((entry) => {\n    return entry > 50;\n});\n\nconst mapping = data.map((entry) => {\n    console.log(entry.key);\n    console.log(entry.value);\n});","position":{"start":{"line":40,"column":1,"offset":1459},"end":{"line":51,"column":4,"offset":1679},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":53,"column":1,"offset":1681},"end":{"line":53,"column":4,"offset":1684},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"d3 methods","position":{"start":{"line":55,"column":4,"offset":1689},"end":{"line":55,"column":14,"offset":1699},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1686},"end":{"line":55,"column":14,"offset":1699},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const example = d3.min(data);\nconsole.log(example);\t\t// values returned\n\nconst dataLoHiValue = d3.extent(data);\t// return min/max as array\n\nvar dictMinValue = d3.min(dounts, (d, i) {\n\treturn d.value;\n});","position":{"start":{"line":57,"column":1,"offset":1701},"end":{"line":66,"column":4,"offset":1912},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":68,"column":1,"offset":1914},"end":{"line":68,"column":4,"offset":1917},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Programmatic SVGs","position":{"start":{"line":70,"column":4,"offset":1922},"end":{"line":70,"column":21,"offset":1939},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1919},"end":{"line":70,"column":21,"offset":1939},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var data = [132,71,337,93,78,43,20,16,30,8,17,21];\nlet svg = d3.select('body').append('svg')\n\t\t\t\t.attr('id', 'chart')\n\t\t\t\t.attr('height', 450)\n\t\t\t\t.attr('width', 800);\n\n// creating the bars\n// vertical bar graph\nsvg.selectAll('.bar')\n\t.data(data)\n\t.enter() \t\t\t\t// enter phase\n\t.append('rect')\n\t.attr('class', 'bar') \t// for future selections\n\t.attr('x', 0)\n\t.attr('y', (d i) => {\n\t\treturn i * 20;\n\t})\n\t.attr('width', (d, i) => {\n    \treturn d;\n    })\n    .attr('height', 19);","position":{"start":{"line":72,"column":1,"offset":1941},"end":{"line":94,"column":4,"offset":2434},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Scaling Data","position":{"start":{"line":96,"column":4,"offset":2439},"end":{"line":96,"column":16,"offset":2451},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":2436},"end":{"line":96,"column":16,"offset":2451},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Creating scaling functions for both x and y.","position":{"start":{"line":98,"column":5,"offset":2457},"end":{"line":98,"column":49,"offset":2501},"indent":[]}}],"position":{"start":{"line":98,"column":5,"offset":2457},"end":{"line":98,"column":49,"offset":2501},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2453},"end":{"line":98,"column":49,"offset":2501},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2453},"end":{"line":98,"column":49,"offset":2501},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\nlet w = 800;\nlet h = 450;\nlet x = d3.scale\n    .linear()\n    .domain([0, d3.max(data)])\n    .range([0, w]);\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, h]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('id', 'chart')\n    .attr('height', h)\n    .attr('width', w);\n\n// creating the bars\n// vertical bar graph\nsvg\n    .selectAll('.bar')\n    .data(data)\n    .enter() // enter phase\n    .append('rect')\n    .attr('class', 'bar') // for future selections\n    .attr('x', 0)\n    .attr('y', (d, i) => {\n        return y(i);\n    })\n    .attr('width', (d, i) => {\n        return x(d); // x() does the scaling\n    })\n    .attr('height', (d, i) => {\n        return y(1) - 1;\n    });","position":{"start":{"line":100,"column":1,"offset":2503},"end":{"line":138,"column":4,"offset":3302},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Styling with CSS","position":{"start":{"line":140,"column":4,"offset":3307},"end":{"line":140,"column":20,"offset":3323},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":3304},"end":{"line":140,"column":20,"offset":3323},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Getting rid of the aliasing","position":{"start":{"line":142,"column":5,"offset":3329},"end":{"line":142,"column":32,"offset":3356},"indent":[]}}],"position":{"start":{"line":142,"column":5,"offset":3329},"end":{"line":142,"column":32,"offset":3356},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":3325},"end":{"line":142,"column":32,"offset":3356},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":3325},"end":{"line":142,"column":32,"offset":3356},"indent":[]}},{"type":"code","lang":"css","meta":null,"value":".bar {\n    fill: purple;\n}","position":{"start":{"line":144,"column":1,"offset":3358},"end":{"line":148,"column":4,"offset":3395},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Not that ","position":{"start":{"line":150,"column":1,"offset":3397},"end":{"line":150,"column":10,"offset":3406},"indent":[]}},{"type":"inlineCode","value":"attr('class', 'bar')","position":{"start":{"line":150,"column":10,"offset":3406},"end":{"line":150,"column":32,"offset":3428},"indent":[]}},{"type":"text","value":" will manually reset the class value, so you can also use ","position":{"start":{"line":150,"column":32,"offset":3428},"end":{"line":150,"column":90,"offset":3486},"indent":[]}},{"type":"inlineCode","value":".classed('bar', true)","position":{"start":{"line":150,"column":90,"offset":3486},"end":{"line":150,"column":113,"offset":3509},"indent":[]}},{"type":"text","value":" - true to add the class, false to remove.","position":{"start":{"line":150,"column":113,"offset":3509},"end":{"line":150,"column":155,"offset":3551},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":3397},"end":{"line":150,"column":155,"offset":3551},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding Text to the chart","position":{"start":{"line":152,"column":4,"offset":3556},"end":{"line":152,"column":28,"offset":3580},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":3553},"end":{"line":152,"column":28,"offset":3580},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Creating scaling functions for both x and y.","position":{"start":{"line":154,"column":5,"offset":3586},"end":{"line":154,"column":49,"offset":3630},"indent":[]}}],"position":{"start":{"line":154,"column":5,"offset":3586},"end":{"line":154,"column":49,"offset":3630},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":3582},"end":{"line":154,"column":49,"offset":3630},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":3582},"end":{"line":154,"column":49,"offset":3630},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\nlet w = 800;\nlet h = 450;\nlet x = d3.scale\n    .linear()\n    .domain([0, d3.max(data)])\n    .range([0, w]);\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, h]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('id', 'chart')\n    .attr('height', h)\n    .attr('width', w);\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter() // enter phase\n        .append('rect')\n        .attr('class', 'bar') // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('width', (d, i) => {\n            return x(d); // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y(1) - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d); // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('dy', (d, i) => {\n            return y(1) / 1.5 + 2;\n        })\n        .text((d, i) => {\n            return d;\n        });\n}\n\n// first arg will be what is referenced by \"this\"\nplot.call(svg, {\n    data: data\n});","position":{"start":{"line":156,"column":1,"offset":3632},"end":{"line":219,"column":4,"offset":5081},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using SVG groups","position":{"start":{"line":221,"column":4,"offset":5086},"end":{"line":221,"column":20,"offset":5102},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":5083},"end":{"line":221,"column":20,"offset":5102},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"SVG groups are like a div that are a convenience element to allow children to be moved and affected together.","position":{"start":{"line":223,"column":5,"offset":5108},"end":{"line":223,"column":114,"offset":5217},"indent":[]}}],"position":{"start":{"line":223,"column":5,"offset":5108},"end":{"line":223,"column":114,"offset":5217},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":5104},"end":{"line":223,"column":114,"offset":5217},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":5104},"end":{"line":223,"column":114,"offset":5217},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale\n    .linear()\n    .domain([0, d3.max(data)])\n    .range([0, width]);\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, height]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('id', 'chart')\n    .attr('height', h)\n    .attr('width', w);\n\nlet chart = svg\n    .append('g')\n    .classed('display', true)\n    .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter() // enter phase\n        .append('rect')\n        .attr('class', 'bar') // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('width', (d, i) => {\n            return x(d); // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y(1) - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d); // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('dy', (d, i) => {\n            return y(1) / 1.5 + 2;\n        })\n        .text((d, i) => {\n            return d;\n        });\n}\n\n// first arg will be what is referenced by \"this\"\nplot.call(chart, {\n    data: data\n});","position":{"start":{"line":225,"column":1,"offset":5219},"end":{"line":303,"column":4,"offset":6954},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":305,"column":1,"offset":6956},"end":{"line":305,"column":4,"offset":6959},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Section 4: Making a Complex Chart","position":{"start":{"line":307,"column":3,"offset":6963},"end":{"line":307,"column":36,"offset":6996},"indent":[]}}],"position":{"start":{"line":307,"column":1,"offset":6961},"end":{"line":307,"column":36,"offset":6996},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Working with Arrays of Objects","position":{"start":{"line":309,"column":4,"offset":7001},"end":{"line":309,"column":34,"offset":7031},"indent":[]}}],"position":{"start":{"line":309,"column":1,"offset":6998},"end":{"line":309,"column":34,"offset":7031},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If working with a dict, we need an accessor function!","position":{"start":{"line":311,"column":1,"offset":7033},"end":{"line":311,"column":54,"offset":7086},"indent":[]}}],"position":{"start":{"line":311,"column":1,"offset":7033},"end":{"line":311,"column":54,"offset":7086},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var data = [\n    { key: 'Glazed', value: 132 },\n    { key: 'Jelly', value: 71 },\n    { key: 'Holes', value: 337 },\n    { key: 'Sprinkles', value: 93 },\n    { key: 'Crumb', value: 78 },\n    { key: 'Chocolate', value: 43 },\n    { key: 'Coconut', value: 20 },\n    { key: 'Cream', value: 16 },\n    { key: 'Cruller', value: 30 },\n    { key: 'Éclair', value: 8 },\n    { key: 'Fritter', value: 17 },\n    { key: 'Bearclaw', value: 21 }\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale\n    .linear()\n    .domain([\n        0,\n        d3.max(data, (d) => {\n            return d.value;\n        })\n    ])\n    .range([0, width]);\n\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, height]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('width', 800)\n    .attr('height', 420)\n    .attr('id', 'chart');\nlet chart = svg\n    .append('g')\n    .classed('display', true)\n    .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter() // enter phase\n        .append('rect')\n        .attr('class', 'bar') // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value); // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y(1) - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value); // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('dy', (d, i) => {\n            return y(1) / 1.5 + 2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n}\n\nplot.call(chart, {\n    data: data\n});","position":{"start":{"line":313,"column":1,"offset":7088},"end":{"line":409,"column":4,"offset":9235},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Creating an Ordinal Scale","position":{"start":{"line":411,"column":4,"offset":9240},"end":{"line":411,"column":29,"offset":9265},"indent":[]}}],"position":{"start":{"line":411,"column":1,"offset":9237},"end":{"line":411,"column":29,"offset":9265},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var data = [\n\t{key: \"Glazed\",\t\tvalue: 132},\n\t{key: \"Jelly\",\t\tvalue: 71},\n\t{key: \"Holes\",\t\tvalue: 337},\n\t{key: \"Sprinkles\",\tvalue: 93},\n\t{key: \"Crumb\",\t\tvalue: 78},\n\t{key: \"Chocolate\",\tvalue: 43},\n\t{key: \"Coconut\", \tvalue: 20},\n\t{key: \"Cream\",\t\tvalue: 16},\n\t{key: \"Cruller\", \tvalue: 30},\n\t{key: \"Éclair\", \tvalue: 8},\n\t{key: \"Fritter\", \tvalue: 17},\n\t{key: \"Bearclaw\", \tvalue: 21}\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n\ttop: 20,\n\tbottom: 20,\n\tleft: 20,\n\tright: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale.linear()\n\t\t.domain([0, d3.max(data, (d) => {\n    \t\treturn d.value;\n    })])\n\t\t.range([0, width]);\nvar y = d3.scale.ordinal() \t\t\t// need distinct values eg keys\n\t\t.domain(data.map((entry) => {\n\t\t\treturn entry.key;\n\t\t}))\n\t\t.rangeBands([0, height]); \t// used for distinct values\n\nlet svg = d3.select('body').append('svg')\n\t\t\t\t\t\t.attr('width', 800)\n            .attr('height', 420)\n            .attr('id', 'chart');\nlet chart = svg.append('g')\n\t\t\t\t.classed('display', true)\n        .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n\t// creating the bars\n\t// vertical bar graph\n\tthis.selectAll('.bar')\n\t\t.data(params.data)\n\t\t.enter() \t\t\t\t// enter phase\n\t\t.append('rect')\n\t\t.attr('class', 'bar') \t// for future selections\n\t\t.attr('x', 0)\n\t\t.attr('y', (d, i) => {\n\t\t\treturn y(d.key);\n\t\t})\n\t\t.attr('width', (d, i) => {\n\t\t\treturn x(d.value);\t\t// x() does the scaling\n\t\t})\n\t\t.attr('height', (d, i) => {\n\t\t\treturn y.rangeBand() - 1;\n\t\t});\n\n\tthis.selectAll('.bar-label')\n\t\t.data(params.data)\n\t\t.enter()\n\t\t.append('text')\n\t\t.classed('bar-label', true)\n\t\t.attr('x', (d, i) => {\n\t\t\treturn x(d.value);\t\t\t// use css to change the anchor\n\t\t})\n\t\t.attr('dx', -4)\n\t\t.attr('y', (d, i) => {\n\t\t\treturn y(d.key);\n\t\t})\n\t\t.attr('dy', (d, i) => {\n\t\t\treturn y.rangeBand()/1.5+2;\n\t\t})\n\t\t.text((d, i) => {\n\t\t\treturn d.value;\n\t\t});\n}\n\nplot.call(chart, {\n\tdata: data\n});","position":{"start":{"line":413,"column":1,"offset":9267},"end":{"line":502,"column":4,"offset":11207},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting colour with colour scales","position":{"start":{"line":504,"column":4,"offset":11212},"end":{"line":504,"column":37,"offset":11245},"indent":[]}}],"position":{"start":{"line":504,"column":1,"offset":11209},"end":{"line":504,"column":37,"offset":11245},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var data = [\n\t{key: \"Glazed\",\t\tvalue: 132},\n\t{key: \"Jelly\",\t\tvalue: 71},\n\t{key: \"Holes\",\t\tvalue: 337},\n\t{key: \"Sprinkles\",\tvalue: 93},\n\t{key: \"Crumb\",\t\tvalue: 78},\n\t{key: \"Chocolate\",\tvalue: 43},\n\t{key: \"Coconut\", \tvalue: 20},\n\t{key: \"Cream\",\t\tvalue: 16},\n\t{key: \"Cruller\", \tvalue: 30},\n\t{key: \"Éclair\", \tvalue: 8},\n\t{key: \"Fritter\", \tvalue: 17},\n\t{key: \"Bearclaw\", \tvalue: 21}\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n\ttop: 20,\n\tbottom: 20,\n\tleft: 20,\n\tright: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale.linear()\n\t\t.domain([0, d3.max(data, (d) => {\n    \t\treturn d.value;\n    })])\n\t\t.range([0, width]);\nvar y = d3.scale.ordinal() \t\t\t// need distinct values eg keys\n\t\t.domain(data.map((entry) => {\n\t\t\treturn entry.key;\n\t\t}))\n\t\t.rangeBands([0, height]); \t// used for distinct values\n\n// alter colours using linear scale\nlet linearColorScale = d3.scale.linear()\n\t\t\t\t\t\t.domain([0, data.length])\n\t\t\t\t\t\t.range(['#572500', '#F68026']);\n\n// ordinal for distinct colours\nlet ordinalColorScale = d3.scale.category20();\n\nlet svg = d3.select('body').append('svg')\n\t\t\t\t\t\t.attr('width', 800)\n            .attr('height', 420)\n            .attr('id', 'chart');\nlet chart = svg.append('g')\n\t\t\t\t.classed('display', true)\n        .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n\t// creating the bars\n\t// vertical bar graph\n\tthis.selectAll('.bar')\n\t\t.data(params.data)\n\t\t.enter() \t\t\t\t// enter phase\n\t\t.append('rect')\n\t\t.attr('class', 'bar') \t// for future selections\n\t\t.attr('x', 0)\n\t\t.attr('y', (d, i) => {\n\t\t\treturn y(d.key);\n\t\t})\n\t\t.attr('width', (d, i) => {\n\t\t\treturn x(d.value);\t\t// x() does the scaling\n\t\t})\n\t\t.attr('height', (d, i) => {\n\t\t\treturn y.rangeBand() - 1;\n\t\t})\n\t\t.style('fill', (d, i) => {\n\t\t\treturn linearColorScale(i);\n\t\t});\n\n\tthis.selectAll('.bar-label')\n\t\t.data(params.data)\n\t\t.enter()\n\t\t.append('text')\n\t\t.classed('bar-label', true)\n\t\t.attr('x', (d, i) => {\n\t\t\treturn x(d.value);\t\t\t// use css to change the anchor\n\t\t})\n\t\t.attr('dx', -4)\n\t\t.attr('y', (d, i) => {\n\t\t\treturn y(d.key);\n\t\t})\n\t\t.attr('dy', (d, i) => {\n\t\t\treturn y.rangeBand()/1.5+2;\n\t\t})\n\t\t.text((d, i) => {\n\t\t\treturn d.value;\n\t\t});\n}\n\nplot.call(chart, {\n\tdata: data\n});","position":{"start":{"line":506,"column":1,"offset":11247},"end":{"line":606,"column":4,"offset":13480},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding X and Y axis","position":{"start":{"line":608,"column":4,"offset":13485},"end":{"line":608,"column":23,"offset":13504},"indent":[]}}],"position":{"start":{"line":608,"column":1,"offset":13482},"end":{"line":608,"column":23,"offset":13504},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// after the colour scales\n\nlet xAxis = d3.svg.axis() \t\t\t// svg portion of the d3 library\n\t\t\t\t.scale(x)\n\t\t\t\t.orient('bottom');\n\nlet yAxis = d3.svg.axis()\n\t\t\t\t.scale(y)\n\t\t\t\t.orient('left');\n\n...\n\nfunction plot(params) {\n\t// creating the bars\n\t// vertical bar graph\n\tthis.selectAll('.bar')\n\t\t.data(params.data)\n\t\t.enter() \t\t\t\t// enter phase\n\t\t.append('rect')\n\t\t.attr('class', 'bar') \t// for future selections\n\t\t.attr('x', 0)\n\t\t.attr('y', (d, i) => {\n\t\t\treturn y(d.key);\n\t\t})\n\t\t.attr('width', (d, i) => {\n\t\t\treturn x(d.value);\t\t// x() does the scaling\n\t\t})\n\t\t.attr('height', (d, i) => {\n\t\t\treturn y.rangeBand() - 1;\n\t\t})\n\t\t.style('fill', (d, i) => {\n\t\t\treturn linearColorScale(i);\n\t\t});\n\n\tthis.selectAll('.bar-label')\n\t\t.data(params.data)\n\t\t.enter()\n\t\t.append('text')\n\t\t.classed('bar-label', true)\n\t\t.attr('x', (d, i) => {\n\t\t\treturn x(d.value);\t\t\t// use css to change the anchor\n\t\t})\n\t\t.attr('dx', -4)\n\t\t.attr('y', (d, i) => {\n\t\t\treturn y(d.key);\n\t\t})\n\t\t.attr('dy', (d, i) => {\n\t\t\treturn y.rangeBand()/1.5+2;\n\t\t})\n\t\t.text((d, i) => {\n\t\t\treturn d.value;\n\t\t});\n\tthis.append('g')\n\t\t\t.classed('x axis', true)\n\t\t\t.attr('transform', 'translate(' + 0  + ', ' + height  + ')')\n\t\t\t.call(xAxis);\n\tthis.append('g')\n\t\t\t.classed('y axis', true)\n\t\t\t.attr('transform', 'translate(0, 0)')\n\t\t\t.call(yAxis);\n}","position":{"start":{"line":610,"column":1,"offset":13506},"end":{"line":672,"column":4,"offset":14802},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Flipping the axes","position":{"start":{"line":674,"column":4,"offset":14807},"end":{"line":674,"column":21,"offset":14824},"indent":[]}}],"position":{"start":{"line":674,"column":1,"offset":14804},"end":{"line":674,"column":21,"offset":14824},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"How to create a column chart?","position":{"start":{"line":676,"column":1,"offset":14826},"end":{"line":676,"column":30,"offset":14855},"indent":[]}}],"position":{"start":{"line":676,"column":1,"offset":14826},"end":{"line":676,"column":30,"offset":14855},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"height needs to take an offset","position":{"start":{"line":678,"column":5,"offset":14861},"end":{"line":678,"column":35,"offset":14891},"indent":[]}}],"position":{"start":{"line":678,"column":5,"offset":14861},"end":{"line":678,"column":35,"offset":14891},"indent":[]}}],"position":{"start":{"line":678,"column":1,"offset":14857},"end":{"line":678,"column":35,"offset":14891},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"other values essentially invert","position":{"start":{"line":679,"column":5,"offset":14896},"end":{"line":679,"column":36,"offset":14927},"indent":[]}}],"position":{"start":{"line":679,"column":5,"offset":14896},"end":{"line":679,"column":36,"offset":14927},"indent":[]}}],"position":{"start":{"line":679,"column":1,"offset":14892},"end":{"line":679,"column":36,"offset":14927},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"text anchor will be ","position":{"start":{"line":680,"column":5,"offset":14932},"end":{"line":680,"column":25,"offset":14952},"indent":[]}},{"type":"inlineCode","value":"middle","position":{"start":{"line":680,"column":25,"offset":14952},"end":{"line":680,"column":33,"offset":14960},"indent":[]}},{"type":"text","value":" in css","position":{"start":{"line":680,"column":33,"offset":14960},"end":{"line":680,"column":40,"offset":14967},"indent":[]}}],"position":{"start":{"line":680,"column":5,"offset":14932},"end":{"line":680,"column":40,"offset":14967},"indent":[]}}],"position":{"start":{"line":680,"column":1,"offset":14928},"end":{"line":680,"column":40,"offset":14967},"indent":[]}}],"position":{"start":{"line":678,"column":1,"offset":14857},"end":{"line":680,"column":40,"offset":14967},"indent":[1,1]}},{"type":"code","lang":null,"meta":null,"value":"var data = [\n\t{key: \"Glazed\",\t\tvalue: 132},\n\t{key: \"Jelly\",\t\tvalue: 71},\n\t{key: \"Holes\",\t\tvalue: 337},\n\t{key: \"Sprinkles\",\tvalue: 93},\n\t{key: \"Crumb\",\t\tvalue: 78},\n\t{key: \"Chocolate\",\tvalue: 43},\n\t{key: \"Coconut\", \tvalue: 20},\n\t{key: \"Cream\",\t\tvalue: 16},\n\t{key: \"Cruller\", \tvalue: 30},\n\t{key: \"Éclair\", \tvalue: 8},\n\t{key: \"Fritter\", \tvalue: 17},\n\t{key: \"Bearclaw\", \tvalue: 21}\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n\ttop: 20,\n\tbottom: 20,\n\tleft: 20,\n\tright: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale.ordinal() \t\t\t// need distinct values eg keys\n\t\t.domain(data.map((entry) => {\n\t\t\treturn entry.key;\n\t\t}))\n\t\t.rangeBands([0, height]); \t// used for distinct values\n\nlet y = d3.scale.linear()\n\t\t.domain([0, d3.max(data, (d) => {\n    \t\treturn d.value;\n    \t})])\n    \t.range([height, 0]);\t// IMPORTANT CHANGE FROM [0, width]\n\n// alter colours using linear scale\nlet linearColorScale = d3.scale.linear()\n\t\t\t\t\t\t.domain([0, data.length])\n\t\t\t\t\t\t.range(['#572500', '#F68026']);\n\n// ordinal for distinct colours\nlet ordinalColorScale = d3.scale.category20();\n\nlet svg = d3.select('body').append('svg')\n\t\t\t\t\t\t.attr('width', 800)\n            .attr('height', 420)\n            .attr('id', 'chart');\nlet chart = svg.append('g')\n\t\t\t\t.classed('display', true)\n        .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n\t// creating the bars\n\t// vertical bar graph\n\tthis.selectAll('.bar')\n\t\t.data(params.data)\n\t\t.enter() \t\t\t\t// enter phase\n\t\t.append('rect')\n\t\t.attr('class', 'bar') \t// for future selections\n\t\t.attr('x', (d, i) => {\n\t\t\treturn x(d.key);\n\t\t})\n\t\t.attr('y', (d, i) => {\n\t\t\treturn y(d.value);\n\t\t})\n\t\t.attr('width', (d, i) => {\n\t\t\treturn x(d.value);\t\t// x() does the scaling\n\t\t})\n\t\t.attr('height', (d, i) => {\n\t\t\treturn x.rangeBand();\n\t\t})\n\t\t.style('fill', (d, i) => {\n\t\t\treturn linearColorScale(i);\n\t\t});\n\n\tthis.selectAll('.bar-label')\n\t\t.data(params.data)\n\t\t.enter()\n\t\t.append('text')\n\t\t.classed('bar-label', true)\n\t\t.attr('x', (d, i) => {\n\t\t\treturn x(d.value);\t\t\t// use css to change the anchor\n\t\t})\n\t\t.attr('dx', -4)\n\t\t.attr('y', (d, i) => {\n\t\t\treturn y(d.key);\n\t\t})\n\t\t.attr('dy', (d, i) => {\n\t\t\treturn y.rangeBand()/1.5+2;\n\t\t})\n\t\t.text((d, i) => {\n\t\t\treturn d.value;\n\t\t});\n\n\t\tthis.append('g')\n\t\t\t.classed('x axis', true)\n\t\t\t.attr('transform', 'translate(' + 0  + ', ' + height  + ')')\n\t\t\t.call(xAxis);\n\t\tthis.append('g')\n\t\t\t.classed('y axis', true)\n\t\t\t.attr('transform', 'translate(0, 0)')\n\t\t\t.call(yAxis);\n}\n\nplot.call(chart, {\n\tdata: data\n});","position":{"start":{"line":682,"column":1,"offset":14969},"end":{"line":794,"column":4,"offset":17510},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding Gridlines","position":{"start":{"line":796,"column":4,"offset":17515},"end":{"line":796,"column":20,"offset":17531},"indent":[]}}],"position":{"start":{"line":796,"column":1,"offset":17512},"end":{"line":796,"column":20,"offset":17531},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var yGridlines = d3.svg.axis() \t\t\t\t// create another \"axis\"\n\t\t\t\t\t.scale(y)\n\t\t\t\t\t.tickSize(-width, 0, 0) \t\t\t// used to adjust the axis\n\t\t\t\t\t.tickFormat('')\n\t\t\t\t\t.orient('left');\n\n// add these grid lines with the call function at the start of the plot function","position":{"start":{"line":798,"column":1,"offset":17533},"end":{"line":806,"column":4,"offset":17799},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The grid lines also need to be styled! Hit up the CSS file to do this.","position":{"start":{"line":808,"column":1,"offset":17801},"end":{"line":808,"column":71,"offset":17871},"indent":[]}}],"position":{"start":{"line":808,"column":1,"offset":17801},"end":{"line":808,"column":71,"offset":17871},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":".gridline path,\n.gridline line {\n\tfill: none;\n\tcolor: blue;\n\tshape-rendering: crispEdges;\n}","position":{"start":{"line":810,"column":1,"offset":17873},"end":{"line":817,"column":4,"offset":17972},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Rotating the X axis titles","position":{"start":{"line":819,"column":4,"offset":17977},"end":{"line":819,"column":30,"offset":18003},"indent":[]}}],"position":{"start":{"line":819,"column":1,"offset":17974},"end":{"line":819,"column":30,"offset":18003},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"...\nthis.append('g')\n\t\t\t.classed('x axis', true)\n\t\t\t.attr('transform', 'translate(' + 0  + ', ' + height  + ')')\n\t\t\t.call(xAxis)\n\t\t\t\t.selectAll('text')\n\t\t\t\t\t.style('text-anchor', 'end')\n\t\t\t\t\t.attr('dx', -8)\n\t\t\t\t\t.attr('dy', 8)\n\t\t\t\t\t.attr('transform', 'translate(0,0), rotate(-45)');\nthis.append('g')\n\t\t\t.classed('y axis', true)\n\t\t\t.attr('transform', 'translate(0, 0)')\n\t\t\t.call(yAxis);\n...","position":{"start":{"line":821,"column":1,"offset":18005},"end":{"line":837,"column":4,"offset":18402},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding axis labels","position":{"start":{"line":839,"column":4,"offset":18407},"end":{"line":839,"column":22,"offset":18425},"indent":[]}}],"position":{"start":{"line":839,"column":1,"offset":18404},"end":{"line":839,"column":22,"offset":18425},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// within the plot function at the bottom\n\nthis.select('.y.axis')\n\t.append('text')\n\t.attr('x', 0)\n\t.attr('y', 0)\n\t.style('text-anchor', 'middle')\n\t.attr('transform', 'translate(-50, ' + height / 2 + ') rotate(-90)')\n\t.text('Units sold');\n\nthis.select('.x.axis')\n\t.append('text')\n\t.attr('x', 0)\n\t.attr('y', 0)\n\t.style('text-anchor', 'middle')\n\t.attr('transform', 'translate(' + width / 2 + ', 80) rotate(-90)')\n\t.text('Donut Type');","position":{"start":{"line":841,"column":1,"offset":18427},"end":{"line":859,"column":4,"offset":18866},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Updating the plot function with best practises","position":{"start":{"line":861,"column":4,"offset":18871},"end":{"line":861,"column":50,"offset":18917},"indent":[]}}],"position":{"start":{"line":861,"column":1,"offset":18868},"end":{"line":861,"column":50,"offset":18917},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add new parameter entries.","position":{"start":{"line":863,"column":5,"offset":18923},"end":{"line":863,"column":31,"offset":18949},"indent":[]}}],"position":{"start":{"line":863,"column":5,"offset":18923},"end":{"line":863,"column":31,"offset":18949},"indent":[]}}],"position":{"start":{"line":863,"column":1,"offset":18919},"end":{"line":863,"column":31,"offset":18949},"indent":[]}}],"position":{"start":{"line":863,"column":1,"offset":18919},"end":{"line":863,"column":31,"offset":18949},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"plot.call(chart, {\n\tdata: data,\n\taxis: {\n\t\tx: xAxis,\n\t\ty: yAxis\n\t},\n\tgridlines: yGridlines\n}\n})","position":{"start":{"line":865,"column":1,"offset":18951},"end":{"line":875,"column":4,"offset":19054},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":877,"column":1,"offset":19056},"end":{"line":877,"column":4,"offset":19059},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Secontion 5: Making the Chart Interactive","position":{"start":{"line":879,"column":3,"offset":19063},"end":{"line":879,"column":44,"offset":19104},"indent":[]}}],"position":{"start":{"line":879,"column":1,"offset":19061},"end":{"line":879,"column":44,"offset":19104},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Sorting data using things like buttons.","position":{"start":{"line":881,"column":5,"offset":19110},"end":{"line":881,"column":44,"offset":19149},"indent":[]}}],"position":{"start":{"line":881,"column":5,"offset":19110},"end":{"line":881,"column":44,"offset":19149},"indent":[]}}],"position":{"start":{"line":881,"column":1,"offset":19106},"end":{"line":881,"column":44,"offset":19149},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Similary to jquery, with have d3 methods like \"on\"","position":{"start":{"line":882,"column":5,"offset":19154},"end":{"line":882,"column":55,"offset":19204},"indent":[]}}],"position":{"start":{"line":882,"column":5,"offset":19154},"end":{"line":882,"column":55,"offset":19204},"indent":[]}}],"position":{"start":{"line":882,"column":1,"offset":19150},"end":{"line":882,"column":55,"offset":19204},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Using the '+' prefix will convert the string to a number","position":{"start":{"line":883,"column":5,"offset":19209},"end":{"line":883,"column":61,"offset":19265},"indent":[]}}],"position":{"start":{"line":883,"column":5,"offset":19209},"end":{"line":883,"column":61,"offset":19265},"indent":[]}}],"position":{"start":{"line":883,"column":1,"offset":19205},"end":{"line":883,"column":61,"offset":19265},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To show updated ","position":{"start":{"line":884,"column":5,"offset":19270},"end":{"line":884,"column":21,"offset":19286},"indent":[]}},{"type":"inlineCode","value":"data","position":{"start":{"line":884,"column":21,"offset":19286},"end":{"line":884,"column":27,"offset":19292},"indent":[]}},{"type":"text","value":" changes, we need to know about the phases // enter(), update(), exit()","position":{"start":{"line":884,"column":27,"offset":19292},"end":{"line":884,"column":98,"offset":19363},"indent":[]}}],"position":{"start":{"line":884,"column":5,"offset":19270},"end":{"line":884,"column":98,"offset":19363},"indent":[]}}],"position":{"start":{"line":884,"column":1,"offset":19266},"end":{"line":884,"column":98,"offset":19363},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"we ensure this can happen by splitting the selectAll function where the updated phase is in the latter part - then in the exit phase we get rid of any elements that are no longer bound!","position":{"start":{"line":885,"column":5,"offset":19368},"end":{"line":885,"column":190,"offset":19553},"indent":[]}}],"position":{"start":{"line":885,"column":5,"offset":19368},"end":{"line":885,"column":190,"offset":19553},"indent":[]}}],"position":{"start":{"line":885,"column":1,"offset":19364},"end":{"line":885,"column":190,"offset":19553},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"you must update the domains when you update data!","position":{"start":{"line":886,"column":5,"offset":19558},"end":{"line":886,"column":54,"offset":19607},"indent":[]}}],"position":{"start":{"line":886,"column":5,"offset":19558},"end":{"line":886,"column":54,"offset":19607},"indent":[]}}],"position":{"start":{"line":886,"column":1,"offset":19554},"end":{"line":886,"column":54,"offset":19607},"indent":[]}}],"position":{"start":{"line":881,"column":1,"offset":19106},"end":{"line":886,"column":54,"offset":19607},"indent":[1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"// do for all elements we wish to remove\nthis.selectAll('.bar')\n\t.data(params.data)\n\t.exit()\n\t.remove();","position":{"start":{"line":888,"column":1,"offset":19609},"end":{"line":894,"column":4,"offset":19721},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":897,"column":1,"offset":19724},"end":{"line":897,"column":31,"offset":19754},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":897,"column":31,"offset":19754}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"reading-the-d3-documentation\"\n    }}>{`Reading the D3 Documentation`}</h2>\n    {\n      /* TOC */\n    }\n    <pre><code parentName=\"pre\" {...{}}>{`- [Reading the D3 Documentation](#reading-the-d3-documentation)\n- [map() and filter() methods](#map-and-filter-methods)\n- [d3 methods](#d3-methods)\n- [Programmatic SVGs](#programmatic-svgs)\n- [Scaling Data](#scaling-data)\n- [Styling with CSS](#styling-with-css)\n- [Adding Text to the chart](#adding-text-to-the-chart)\n- [Using SVG groups](#using-svg-groups)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#section-4-making-a-complex-chart\"\n        }}>{`Section 4: Making a Complex Chart`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#working-with-arrays-of-objects\"\n            }}>{`Working with Arrays of Objects`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#creating-an-ordinal-scale\"\n            }}>{`Creating an Ordinal Scale`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#setting-colour-with-colour-scales\"\n            }}>{`Setting colour with colour scales`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#adding-x-and-y-axis\"\n            }}>{`Adding X and Y axis`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#flipping-the-axes\"\n            }}>{`Flipping the axes`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#adding-gridlines\"\n            }}>{`Adding Gridlines`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#rotating-the-x-axis-titles\"\n            }}>{`Rotating the X axis titles`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#adding-axis-labels\"\n            }}>{`Adding axis labels`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#updating-the-plot-function-with-best-practises\"\n            }}>{`Updating the plot function with best practises`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#secontion-5-making-the-chart-interactive\"\n        }}>{`Secontion 5: Making the Chart Interactive`}</a></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <ul>\n      <li parentName=\"ul\">{`API Documentation is a great link to bookmark`}</li>\n    </ul>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"map-and-filter-methods\"\n    }}>{`map() and filter() methods`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var data = [123, 52, 46, 30, 4];\n\nconst results = data.filter((entry) => {\n    return entry > 50;\n});\n\nconst mapping = data.map((entry) => {\n    console.log(entry.key);\n    console.log(entry.value);\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"d3-methods\"\n    }}>{`d3 methods`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`const example = d3.min(data);\nconsole.log(example);       // values returned\n\nconst dataLoHiValue = d3.extent(data);  // return min/max as array\n\nvar dictMinValue = d3.min(dounts, (d, i) {\n    return d.value;\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"programmatic-svgs\"\n    }}>{`Programmatic SVGs`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var data = [132,71,337,93,78,43,20,16,30,8,17,21];\nlet svg = d3.select('body').append('svg')\n                .attr('id', 'chart')\n                .attr('height', 450)\n                .attr('width', 800);\n\n// creating the bars\n// vertical bar graph\nsvg.selectAll('.bar')\n    .data(data)\n    .enter()                // enter phase\n    .append('rect')\n    .attr('class', 'bar')   // for future selections\n    .attr('x', 0)\n    .attr('y', (d i) => {\n        return i * 20;\n    })\n    .attr('width', (d, i) => {\n        return d;\n    })\n    .attr('height', 19);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"scaling-data\"\n    }}>{`Scaling Data`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Creating scaling functions for both x and y.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\nlet w = 800;\nlet h = 450;\nlet x = d3.scale\n    .linear()\n    .domain([0, d3.max(data)])\n    .range([0, w]);\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, h]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('id', 'chart')\n    .attr('height', h)\n    .attr('width', w);\n\n// creating the bars\n// vertical bar graph\nsvg\n    .selectAll('.bar')\n    .data(data)\n    .enter() // enter phase\n    .append('rect')\n    .attr('class', 'bar') // for future selections\n    .attr('x', 0)\n    .attr('y', (d, i) => {\n        return y(i);\n    })\n    .attr('width', (d, i) => {\n        return x(d); // x() does the scaling\n    })\n    .attr('height', (d, i) => {\n        return y(1) - 1;\n    });\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"styling-with-css\"\n    }}>{`Styling with CSS`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Getting rid of the aliasing`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.bar {\n    fill: purple;\n}\n`}</code></pre>\n    <p>{`Not that `}<inlineCode parentName=\"p\">{`attr('class', 'bar')`}</inlineCode>{` will manually reset the class value, so you can also use `}<inlineCode parentName=\"p\">{`.classed('bar', true)`}</inlineCode>{` - true to add the class, false to remove.`}</p>\n    <h2 {...{\n      \"id\": \"adding-text-to-the-chart\"\n    }}>{`Adding Text to the chart`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Creating scaling functions for both x and y.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\nlet w = 800;\nlet h = 450;\nlet x = d3.scale\n    .linear()\n    .domain([0, d3.max(data)])\n    .range([0, w]);\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, h]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('id', 'chart')\n    .attr('height', h)\n    .attr('width', w);\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter() // enter phase\n        .append('rect')\n        .attr('class', 'bar') // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('width', (d, i) => {\n            return x(d); // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y(1) - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d); // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('dy', (d, i) => {\n            return y(1) / 1.5 + 2;\n        })\n        .text((d, i) => {\n            return d;\n        });\n}\n\n// first arg will be what is referenced by \"this\"\nplot.call(svg, {\n    data: data\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-svg-groups\"\n    }}>{`Using SVG groups`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`SVG groups are like a div that are a convenience element to allow children to be moved and affected together.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var data = [132, 71, 337, 93, 78, 43, 20, 16, 30, 8, 17, 21];\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale\n    .linear()\n    .domain([0, d3.max(data)])\n    .range([0, width]);\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, height]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('id', 'chart')\n    .attr('height', h)\n    .attr('width', w);\n\nlet chart = svg\n    .append('g')\n    .classed('display', true)\n    .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter() // enter phase\n        .append('rect')\n        .attr('class', 'bar') // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('width', (d, i) => {\n            return x(d); // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y(1) - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d); // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('dy', (d, i) => {\n            return y(1) / 1.5 + 2;\n        })\n        .text((d, i) => {\n            return d;\n        });\n}\n\n// first arg will be what is referenced by \"this\"\nplot.call(chart, {\n    data: data\n});\n`}</code></pre>\n    <hr></hr>\n    <h1 {...{\n      \"id\": \"section-4-making-a-complex-chart\"\n    }}>{`Section 4: Making a Complex Chart`}</h1>\n    <h2 {...{\n      \"id\": \"working-with-arrays-of-objects\"\n    }}>{`Working with Arrays of Objects`}</h2>\n    <p>{`If working with a dict, we need an accessor function!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var data = [\n    { key: 'Glazed', value: 132 },\n    { key: 'Jelly', value: 71 },\n    { key: 'Holes', value: 337 },\n    { key: 'Sprinkles', value: 93 },\n    { key: 'Crumb', value: 78 },\n    { key: 'Chocolate', value: 43 },\n    { key: 'Coconut', value: 20 },\n    { key: 'Cream', value: 16 },\n    { key: 'Cruller', value: 30 },\n    { key: 'Éclair', value: 8 },\n    { key: 'Fritter', value: 17 },\n    { key: 'Bearclaw', value: 21 }\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale\n    .linear()\n    .domain([\n        0,\n        d3.max(data, (d) => {\n            return d.value;\n        })\n    ])\n    .range([0, width]);\n\nlet y = d3.scale\n    .linear()\n    .domain([0, data.length])\n    .range([0, height]);\n\nlet svg = d3\n    .select('body')\n    .append('svg')\n    .attr('width', 800)\n    .attr('height', 420)\n    .attr('id', 'chart');\nlet chart = svg\n    .append('g')\n    .classed('display', true)\n    .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter() // enter phase\n        .append('rect')\n        .attr('class', 'bar') // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value); // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y(1) - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value); // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(i);\n        })\n        .attr('dy', (d, i) => {\n            return y(1) / 1.5 + 2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n}\n\nplot.call(chart, {\n    data: data\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-an-ordinal-scale\"\n    }}>{`Creating an Ordinal Scale`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`var data = [\n    {key: \"Glazed\",     value: 132},\n    {key: \"Jelly\",      value: 71},\n    {key: \"Holes\",      value: 337},\n    {key: \"Sprinkles\",  value: 93},\n    {key: \"Crumb\",      value: 78},\n    {key: \"Chocolate\",  value: 43},\n    {key: \"Coconut\",    value: 20},\n    {key: \"Cream\",      value: 16},\n    {key: \"Cruller\",    value: 30},\n    {key: \"Éclair\",     value: 8},\n    {key: \"Fritter\",    value: 17},\n    {key: \"Bearclaw\",   value: 21}\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale.linear()\n        .domain([0, d3.max(data, (d) => {\n            return d.value;\n    })])\n        .range([0, width]);\nvar y = d3.scale.ordinal()          // need distinct values eg keys\n        .domain(data.map((entry) => {\n            return entry.key;\n        }))\n        .rangeBands([0, height]);   // used for distinct values\n\nlet svg = d3.select('body').append('svg')\n                        .attr('width', 800)\n            .attr('height', 420)\n            .attr('id', 'chart');\nlet chart = svg.append('g')\n                .classed('display', true)\n        .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter()                // enter phase\n        .append('rect')\n        .attr('class', 'bar')   // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value);      // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y.rangeBand() - 1;\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value);          // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('dy', (d, i) => {\n            return y.rangeBand()/1.5+2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n}\n\nplot.call(chart, {\n    data: data\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-colour-with-colour-scales\"\n    }}>{`Setting colour with colour scales`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`var data = [\n    {key: \"Glazed\",     value: 132},\n    {key: \"Jelly\",      value: 71},\n    {key: \"Holes\",      value: 337},\n    {key: \"Sprinkles\",  value: 93},\n    {key: \"Crumb\",      value: 78},\n    {key: \"Chocolate\",  value: 43},\n    {key: \"Coconut\",    value: 20},\n    {key: \"Cream\",      value: 16},\n    {key: \"Cruller\",    value: 30},\n    {key: \"Éclair\",     value: 8},\n    {key: \"Fritter\",    value: 17},\n    {key: \"Bearclaw\",   value: 21}\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale.linear()\n        .domain([0, d3.max(data, (d) => {\n            return d.value;\n    })])\n        .range([0, width]);\nvar y = d3.scale.ordinal()          // need distinct values eg keys\n        .domain(data.map((entry) => {\n            return entry.key;\n        }))\n        .rangeBands([0, height]);   // used for distinct values\n\n// alter colours using linear scale\nlet linearColorScale = d3.scale.linear()\n                        .domain([0, data.length])\n                        .range(['#572500', '#F68026']);\n\n// ordinal for distinct colours\nlet ordinalColorScale = d3.scale.category20();\n\nlet svg = d3.select('body').append('svg')\n                        .attr('width', 800)\n            .attr('height', 420)\n            .attr('id', 'chart');\nlet chart = svg.append('g')\n                .classed('display', true)\n        .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter()                // enter phase\n        .append('rect')\n        .attr('class', 'bar')   // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value);      // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y.rangeBand() - 1;\n        })\n        .style('fill', (d, i) => {\n            return linearColorScale(i);\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value);          // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('dy', (d, i) => {\n            return y.rangeBand()/1.5+2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n}\n\nplot.call(chart, {\n    data: data\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-x-and-y-axis\"\n    }}>{`Adding X and Y axis`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// after the colour scales\n\nlet xAxis = d3.svg.axis()           // svg portion of the d3 library\n                .scale(x)\n                .orient('bottom');\n\nlet yAxis = d3.svg.axis()\n                .scale(y)\n                .orient('left');\n\n...\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter()                // enter phase\n        .append('rect')\n        .attr('class', 'bar')   // for future selections\n        .attr('x', 0)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value);      // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return y.rangeBand() - 1;\n        })\n        .style('fill', (d, i) => {\n            return linearColorScale(i);\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value);          // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('dy', (d, i) => {\n            return y.rangeBand()/1.5+2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n    this.append('g')\n            .classed('x axis', true)\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\n            .call(xAxis);\n    this.append('g')\n            .classed('y axis', true)\n            .attr('transform', 'translate(0, 0)')\n            .call(yAxis);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"flipping-the-axes\"\n    }}>{`Flipping the axes`}</h2>\n    <p>{`How to create a column chart?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`height needs to take an offset`}</li>\n      <li parentName=\"ul\">{`other values essentially invert`}</li>\n      <li parentName=\"ul\">{`text anchor will be `}<inlineCode parentName=\"li\">{`middle`}</inlineCode>{` in css`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`var data = [\n    {key: \"Glazed\",     value: 132},\n    {key: \"Jelly\",      value: 71},\n    {key: \"Holes\",      value: 337},\n    {key: \"Sprinkles\",  value: 93},\n    {key: \"Crumb\",      value: 78},\n    {key: \"Chocolate\",  value: 43},\n    {key: \"Coconut\",    value: 20},\n    {key: \"Cream\",      value: 16},\n    {key: \"Cruller\",    value: 30},\n    {key: \"Éclair\",     value: 8},\n    {key: \"Fritter\",    value: 17},\n    {key: \"Bearclaw\",   value: 21}\n];\n\nlet w = 800;\nlet h = 450;\nlet margin = {\n    top: 20,\n    bottom: 20,\n    left: 20,\n    right: 20\n};\n\nvar width = w - margin.left - margin.right;\nvar height = h - margin.top - margin.bottom;\n\nlet x = d3.scale.ordinal()          // need distinct values eg keys\n        .domain(data.map((entry) => {\n            return entry.key;\n        }))\n        .rangeBands([0, height]);   // used for distinct values\n\nlet y = d3.scale.linear()\n        .domain([0, d3.max(data, (d) => {\n            return d.value;\n        })])\n        .range([height, 0]);    // IMPORTANT CHANGE FROM [0, width]\n\n// alter colours using linear scale\nlet linearColorScale = d3.scale.linear()\n                        .domain([0, data.length])\n                        .range(['#572500', '#F68026']);\n\n// ordinal for distinct colours\nlet ordinalColorScale = d3.scale.category20();\n\nlet svg = d3.select('body').append('svg')\n                        .attr('width', 800)\n            .attr('height', 420)\n            .attr('id', 'chart');\nlet chart = svg.append('g')\n                .classed('display', true)\n        .attr('transform', 'translate(20, 20)');\n\nfunction plot(params) {\n    // creating the bars\n    // vertical bar graph\n    this.selectAll('.bar')\n        .data(params.data)\n        .enter()                // enter phase\n        .append('rect')\n        .attr('class', 'bar')   // for future selections\n        .attr('x', (d, i) => {\n            return x(d.key);\n        })\n        .attr('y', (d, i) => {\n            return y(d.value);\n        })\n        .attr('width', (d, i) => {\n            return x(d.value);      // x() does the scaling\n        })\n        .attr('height', (d, i) => {\n            return x.rangeBand();\n        })\n        .style('fill', (d, i) => {\n            return linearColorScale(i);\n        });\n\n    this.selectAll('.bar-label')\n        .data(params.data)\n        .enter()\n        .append('text')\n        .classed('bar-label', true)\n        .attr('x', (d, i) => {\n            return x(d.value);          // use css to change the anchor\n        })\n        .attr('dx', -4)\n        .attr('y', (d, i) => {\n            return y(d.key);\n        })\n        .attr('dy', (d, i) => {\n            return y.rangeBand()/1.5+2;\n        })\n        .text((d, i) => {\n            return d.value;\n        });\n\n        this.append('g')\n            .classed('x axis', true)\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\n            .call(xAxis);\n        this.append('g')\n            .classed('y axis', true)\n            .attr('transform', 'translate(0, 0)')\n            .call(yAxis);\n}\n\nplot.call(chart, {\n    data: data\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-gridlines\"\n    }}>{`Adding Gridlines`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`var yGridlines = d3.svg.axis()              // create another \"axis\"\n                    .scale(y)\n                    .tickSize(-width, 0, 0)             // used to adjust the axis\n                    .tickFormat('')\n                    .orient('left');\n\n// add these grid lines with the call function at the start of the plot function\n`}</code></pre>\n    <p>{`The grid lines also need to be styled! Hit up the CSS file to do this.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`.gridline path,\n.gridline line {\n    fill: none;\n    color: blue;\n    shape-rendering: crispEdges;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rotating-the-x-axis-titles\"\n    }}>{`Rotating the X axis titles`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`...\nthis.append('g')\n            .classed('x axis', true)\n            .attr('transform', 'translate(' + 0  + ', ' + height  + ')')\n            .call(xAxis)\n                .selectAll('text')\n                    .style('text-anchor', 'end')\n                    .attr('dx', -8)\n                    .attr('dy', 8)\n                    .attr('transform', 'translate(0,0), rotate(-45)');\nthis.append('g')\n            .classed('y axis', true)\n            .attr('transform', 'translate(0, 0)')\n            .call(yAxis);\n...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-axis-labels\"\n    }}>{`Adding axis labels`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// within the plot function at the bottom\n\nthis.select('.y.axis')\n    .append('text')\n    .attr('x', 0)\n    .attr('y', 0)\n    .style('text-anchor', 'middle')\n    .attr('transform', 'translate(-50, ' + height / 2 + ') rotate(-90)')\n    .text('Units sold');\n\nthis.select('.x.axis')\n    .append('text')\n    .attr('x', 0)\n    .attr('y', 0)\n    .style('text-anchor', 'middle')\n    .attr('transform', 'translate(' + width / 2 + ', 80) rotate(-90)')\n    .text('Donut Type');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"updating-the-plot-function-with-best-practises\"\n    }}>{`Updating the plot function with best practises`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Add new parameter entries.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`plot.call(chart, {\n    data: data,\n    axis: {\n        x: xAxis,\n        y: yAxis\n    },\n    gridlines: yGridlines\n}\n})\n`}</code></pre>\n    <hr></hr>\n    <h1 {...{\n      \"id\": \"secontion-5-making-the-chart-interactive\"\n    }}>{`Secontion 5: Making the Chart Interactive`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`Sorting data using things like buttons.`}</li>\n      <li parentName=\"ul\">{`Similary to jquery, with have d3 methods like \"on\"`}</li>\n      <li parentName=\"ul\">{`Using the '+' prefix will convert the string to a number`}</li>\n      <li parentName=\"ul\">{`To show updated `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{` changes, we need to know about the phases // enter(), update(), exit()`}</li>\n      <li parentName=\"ul\">{`we ensure this can happen by splitting the selectAll function where the updated phase is in the latter part - then in the exit phase we get rid of any elements that are no longer bound!`}</li>\n      <li parentName=\"ul\">{`you must update the domains when you update data!`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`// do for all elements we wish to remove\nthis.selectAll('.bar')\n    .data(params.data)\n    .exit()\n    .remove();\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}