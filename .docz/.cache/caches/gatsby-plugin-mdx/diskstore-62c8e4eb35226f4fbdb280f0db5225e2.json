{"expireTime":9007200867335911000,"key":"gatsby-plugin-mdx-entire-payload-54d2f3f60a736c79f2a8a087fe185006-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Advanced React Patterns","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":26,"offset":192},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":26,"offset":192},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":197},"end":{"line":10,"column":13,"offset":206},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":194},"end":{"line":10,"column":13,"offset":206},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://frontendmasters.com/courses/advanced-react-patterns/","children":[{"type":"text","value":"FE Masters Course","position":{"start":{"line":12,"column":5,"offset":212},"end":{"line":12,"column":22,"offset":229},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":211},"end":{"line":12,"column":85,"offset":292},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":211},"end":{"line":12,"column":85,"offset":292},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":208},"end":{"line":12,"column":85,"offset":292},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/kentcdodds/advanced-react-patterns-v2/blob/frontend-masters/README.md","children":[{"type":"text","value":"Course Material on GitHub","position":{"start":{"line":13,"column":5,"offset":297},"end":{"line":13,"column":30,"offset":322},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":296},"end":{"line":13,"column":121,"offset":413},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":296},"end":{"line":13,"column":121,"offset":413},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":293},"end":{"line":13,"column":121,"offset":413},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://codesandbox.io/s/github/kentcdodds/advanced-react-patterns-v2/tree/frontend-masters","children":[{"type":"text","value":"Code Sandbox for course","position":{"start":{"line":14,"column":5,"offset":418},"end":{"line":14,"column":28,"offset":441},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":417},"end":{"line":14,"column":122,"offset":535},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":417},"end":{"line":14,"column":122,"offset":535},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":414},"end":{"line":14,"column":122,"offset":535},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/downshift-js/downshift","children":[{"type":"text","value":"Downshift Library","position":{"start":{"line":15,"column":5,"offset":540},"end":{"line":15,"column":22,"offset":557},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":539},"end":{"line":15,"column":66,"offset":601},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":539},"end":{"line":15,"column":66,"offset":601},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":536},"end":{"line":15,"column":66,"offset":601},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://kentcdodds.com/blog/reacts-new-context-api/","children":[{"type":"text","value":"React's New Context API - Kent Dodds","position":{"start":{"line":16,"column":5,"offset":606},"end":{"line":16,"column":41,"offset":642},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":605},"end":{"line":16,"column":95,"offset":696},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":605},"end":{"line":16,"column":95,"offset":696},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":602},"end":{"line":16,"column":95,"offset":696},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":208},"end":{"line":16,"column":95,"offset":696},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"tl;dr","position":{"start":{"line":18,"column":4,"offset":701},"end":{"line":18,"column":9,"offset":706},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":698},"end":{"line":18,"column":9,"offset":706},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Patterns to know from course:","position":{"start":{"line":20,"column":1,"offset":708},"end":{"line":20,"column":30,"offset":737},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":708},"end":{"line":20,"column":30,"offset":737},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Compound Components","position":{"start":{"line":22,"column":4,"offset":742},"end":{"line":22,"column":23,"offset":761},"indent":[]}}],"position":{"start":{"line":22,"column":4,"offset":742},"end":{"line":22,"column":23,"offset":761},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":739},"end":{"line":22,"column":23,"offset":761},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Component Injection","position":{"start":{"line":23,"column":4,"offset":765},"end":{"line":23,"column":23,"offset":784},"indent":[]}}],"position":{"start":{"line":23,"column":4,"offset":765},"end":{"line":23,"column":23,"offset":784},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":762},"end":{"line":23,"column":23,"offset":784},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Render Prop","position":{"start":{"line":24,"column":4,"offset":788},"end":{"line":24,"column":15,"offset":799},"indent":[]}}],"position":{"start":{"line":24,"column":4,"offset":788},"end":{"line":24,"column":15,"offset":799},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":785},"end":{"line":24,"column":15,"offset":799},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Render Getters","position":{"start":{"line":25,"column":4,"offset":803},"end":{"line":25,"column":18,"offset":817},"indent":[]}}],"position":{"start":{"line":25,"column":4,"offset":803},"end":{"line":25,"column":18,"offset":817},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":800},"end":{"line":25,"column":18,"offset":817},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"State Initializers","position":{"start":{"line":26,"column":4,"offset":821},"end":{"line":26,"column":22,"offset":839},"indent":[]}}],"position":{"start":{"line":26,"column":4,"offset":821},"end":{"line":26,"column":22,"offset":839},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":818},"end":{"line":26,"column":22,"offset":839},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"State Reducers","position":{"start":{"line":27,"column":4,"offset":843},"end":{"line":27,"column":18,"offset":857},"indent":[]}}],"position":{"start":{"line":27,"column":4,"offset":843},"end":{"line":27,"column":18,"offset":857},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":840},"end":{"line":27,"column":18,"offset":857},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Control Props","position":{"start":{"line":28,"column":4,"offset":861},"end":{"line":28,"column":17,"offset":874},"indent":[]}}],"position":{"start":{"line":28,"column":4,"offset":861},"end":{"line":28,"column":17,"offset":874},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":858},"end":{"line":28,"column":17,"offset":874},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Provider Pattern","position":{"start":{"line":29,"column":4,"offset":878},"end":{"line":29,"column":20,"offset":894},"indent":[]}}],"position":{"start":{"line":29,"column":4,"offset":878},"end":{"line":29,"column":20,"offset":894},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":875},"end":{"line":29,"column":20,"offset":894},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":739},"end":{"line":29,"column":20,"offset":894},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Building the Basic Toggle","position":{"start":{"line":31,"column":4,"offset":899},"end":{"line":31,"column":29,"offset":924},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":896},"end":{"line":31,"column":29,"offset":924},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is used to just set things up for the advanced stuff, but it was worth noting the code that we are using the ","position":{"start":{"line":33,"column":1,"offset":926},"end":{"line":33,"column":115,"offset":1040},"indent":[]}},{"type":"inlineCode","value":"setState","position":{"start":{"line":33,"column":115,"offset":1040},"end":{"line":33,"column":125,"offset":1050},"indent":[]}},{"type":"text","value":" function passer to ensure we get the latest state guarantee (which is not guaranteed the other way):","position":{"start":{"line":33,"column":125,"offset":1050},"end":{"line":33,"column":226,"offset":1151},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":926},"end":{"line":33,"column":226,"offset":1151},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import React from 'react';\n// 🐨 uncomment this import to get the switch component.\n// It takes an `onClick` and an `on` prop\nimport { Switch } from '../switch';\n\nclass Toggle extends React.Component {\n  state = { on: false };\n  toggle = () => {\n    // IMPORTANT: This is the example of passing a function for set state then\n    // using a callback to ensure the re-render is fired straight away\n    // @see https://reactjs.org/docs/react-component.html#setstate\n    this.setState(\n      currentState => {\n        return { on: !currentState.on };\n      },\n      () => {\n        this.props.onToggle(this.state.on);\n      },\n    );\n  };\n  // 🐨 this toggle component is going to need to have state for `on`\n  //\n  // You'll also want a method to handle when the switch is clicked\n  // which will update the `on` state and call the `onToggle` prop\n  // 💰 this.props.onToggle(this.state.on)\n  render() {\n    // 🐨 here you'll want to return the switch with the `on` and `onClick` props\n    return <Switch onClick={this.toggle} on={this.state.on} />;\n  }\n}\n\n// Don't make changes to the Usage component. It's here to show you how your\n// component is intended to be used and is used in the tests.\n// You can make all the tests pass by updating the Toggle component.\nfunction Usage({ onToggle = (...args) => console.log('onToggle', ...args) }) {\n  return <Toggle onToggle={onToggle} />;\n}\nUsage.title = 'Build Toggle';\n\nexport { Toggle, Usage as default };","position":{"start":{"line":35,"column":1,"offset":1153},"end":{"line":76,"column":4,"offset":2622},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"One question that came up - why are we using ","position":{"start":{"line":78,"column":1,"offset":2624},"end":{"line":78,"column":46,"offset":2669},"indent":[]}},{"type":"inlineCode","value":"this.props.onToggle","position":{"start":{"line":78,"column":46,"offset":2669},"end":{"line":78,"column":67,"offset":2690},"indent":[]}},{"type":"text","value":". Kent's answer:","position":{"start":{"line":78,"column":67,"offset":2690},"end":{"line":78,"column":83,"offset":2706},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2624},"end":{"line":78,"column":83,"offset":2706},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"A common pattern in React is that each component manages its own state but lets the parent know what is happening when it changes.","position":{"start":{"line":80,"column":3,"offset":2710},"end":{"line":80,"column":133,"offset":2840},"indent":[]}}],"position":{"start":{"line":80,"column":3,"offset":2710},"end":{"line":80,"column":133,"offset":2840},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2708},"end":{"line":80,"column":133,"offset":2840},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Basic Compound Components","position":{"start":{"line":82,"column":4,"offset":2845},"end":{"line":82,"column":29,"offset":2870},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2842},"end":{"line":82,"column":29,"offset":2870},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the second exercise, we have ","position":{"start":{"line":84,"column":1,"offset":2872},"end":{"line":84,"column":33,"offset":2904},"indent":[]}},{"type":"inlineCode","value":"Toggle","position":{"start":{"line":84,"column":33,"offset":2904},"end":{"line":84,"column":41,"offset":2912},"indent":[]}},{"type":"text","value":" as a compound component:","position":{"start":{"line":84,"column":41,"offset":2912},"end":{"line":84,"column":66,"offset":2937},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2872},"end":{"line":84,"column":66,"offset":2937},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// Don't make changes to the Usage component. It's here to show you how your\n// component is intended to be used and is used in the tests.\n// You can make all the tests pass by updating the Toggle component.\nfunction Usage({\n  onToggle = (...args) => console.log('onToggle', ...args),\n}) {\n  return (\n    {/* Compound component here! */}\n    <Toggle onToggle={onToggle}>\n      <Toggle.On>The button is on</Toggle.On>\n      <Toggle.Off>The button is off</Toggle.Off>\n      <Toggle.Button />\n    </Toggle>\n  )\n}\nUsage.title = 'Compound Components'\n\nexport {Toggle, Usage as default}","position":{"start":{"line":86,"column":1,"offset":2939},"end":{"line":105,"column":4,"offset":3537},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Why compound components? It helps ease of API - the example shown was a potential message etc. Instead, what we can do is have children like ","position":{"start":{"line":107,"column":1,"offset":3539},"end":{"line":107,"column":142,"offset":3680},"indent":[]}},{"type":"inlineCode","value":"<Toggle.On>","position":{"start":{"line":107,"column":142,"offset":3680},"end":{"line":107,"column":155,"offset":3693},"indent":[]}},{"type":"text","value":" that share implicit state with the parent.","position":{"start":{"line":107,"column":155,"offset":3693},"end":{"line":107,"column":198,"offset":3736},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3539},"end":{"line":107,"column":198,"offset":3736},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A real life example in HTML of a compound component:","position":{"start":{"line":109,"column":1,"offset":3738},"end":{"line":109,"column":53,"offset":3790},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":3738},"end":{"line":109,"column":53,"offset":3790},"indent":[]}},{"type":"code","lang":"html","meta":null,"value":"<select>\n  <option></option>\n</select>","position":{"start":{"line":111,"column":1,"offset":3792},"end":{"line":115,"column":4,"offset":3842},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The example implementation for the ","position":{"start":{"line":117,"column":1,"offset":3844},"end":{"line":117,"column":36,"offset":3879},"indent":[]}},{"type":"inlineCode","value":"Toggle","position":{"start":{"line":117,"column":36,"offset":3879},"end":{"line":117,"column":44,"offset":3887},"indent":[]}},{"type":"text","value":" example is the following:","position":{"start":{"line":117,"column":44,"offset":3887},"end":{"line":117,"column":70,"offset":3913},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":3844},"end":{"line":117,"column":70,"offset":3913},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"class Toggle extends React.Component {\n  // these are the important tidbits to get <Toggle.On>, <Toggle.Off> etc\n  // these could also be declared as functions outside the class, but\n  // here it is mentioned to be a preference to show their linkage\n  static On = ({ on, children }) => (on ? children : null);\n  static Off = ({ on, children }) => (on ? null : children);\n  static Button = ({ on, toggle, ...props }) => (\n    <Switch on={on} onClick={toggle} {...props} />\n  );\n\n  state = { on: false };\n\n  toggle = () =>\n    this.setState(\n      ({ on }) => ({ on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n\n  render() {\n    // Note: This MUST be React.Children.map because this.props.children.map\n    // will not work in React if only using one child\n    return React.Children.map(this.props.children, child =>\n      React.cloneElement(child, {\n        on: this.state.on,\n        toggle: this.toggle,\n      }),\n    );\n  }\n}","position":{"start":{"line":119,"column":1,"offset":3915},"end":{"line":149,"column":4,"offset":4878},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Kent also has an equivalent example of this for Hooks on his ","position":{"start":{"line":151,"column":1,"offset":4880},"end":{"line":151,"column":62,"offset":4941},"indent":[]}},{"type":"link","title":null,"url":"https://kentcdodds.com/blog/compound-components-with-react-hooks","children":[{"type":"text","value":"blog post","position":{"start":{"line":151,"column":63,"offset":4942},"end":{"line":151,"column":72,"offset":4951},"indent":[]}}],"position":{"start":{"line":151,"column":62,"offset":4941},"end":{"line":151,"column":139,"offset":5018},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":151,"column":139,"offset":5018},"end":{"line":151,"column":140,"offset":5019},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":4880},"end":{"line":151,"column":140,"offset":5019},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import React from 'react';\n// this switch implements a checkbox input and is not relevant for this example\nimport { Switch } from '../switch';\nconst ToggleContext = React.createContext();\nfunction useEffectAfterMount(cb, dependencies) {\n  const justMounted = React.useRef(true);\n  React.useEffect(() => {\n    if (!justMounted.current) {\n      return cb();\n    }\n    justMounted.current = false;\n  }, dependencies);\n}\nfunction Toggle(props) {\n  const [on, setOn] = React.useState(false);\n  const toggle = React.useCallback(() => setOn(oldOn => !oldOn), []);\n  useEffectAfterMount(() => {\n    props.onToggle(on);\n  }, [on]);\n  const value = React.useMemo(() => ({ on, toggle }), [on]);\n  return (\n    <ToggleContext.Provider value={value}>\n      {props.children}\n    </ToggleContext.Provider>\n  );\n}\nfunction useToggleContext() {\n  const context = React.useContext(ToggleContext);\n  if (!context) {\n    throw new Error(\n      `Toggle compound components cannot be rendered outside the Toggle component`,\n    );\n  }\n  return context;\n}\nfunction On({ children }) {\n  const { on } = useToggleContext();\n  return on ? children : null;\n}\nfunction Off({ children }) {\n  const { on } = useToggleContext();\n  return on ? null : children;\n}\nfunction Button(props) {\n  const { on, toggle } = useToggleContext();\n  return <Switch on={on} onClick={toggle} {...props} />;\n}\n// for convenience, but totally not required...\nToggle.On = On;\nToggle.Off = Off;\nToggle.Button = Button;","position":{"start":{"line":153,"column":1,"offset":5021},"end":{"line":205,"column":4,"offset":6503},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Flexible Compound Components","position":{"start":{"line":207,"column":4,"offset":6508},"end":{"line":207,"column":32,"offset":6536},"indent":[]}}],"position":{"start":{"line":207,"column":1,"offset":6505},"end":{"line":207,"column":32,"offset":6536},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To enable us to accept children that are not static properties of the class, we need to make some adjustments to the code from the section above (reminder: there are also some notes in the code above):","position":{"start":{"line":209,"column":1,"offset":6538},"end":{"line":209,"column":202,"offset":6739},"indent":[]}}],"position":{"start":{"line":209,"column":1,"offset":6538},"end":{"line":209,"column":202,"offset":6739},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const ToggleContext = React.createContext({\n  on: false,\n  toggle: () => {},\n});\n\nclass Toggle extends React.Component {\n  static On = ({ children }) => (\n    <ToggleContext.Consumer>\n      {({ on }) => (on ? children : null)}\n    </ToggleContext.Consumer>\n  );\n  static Off = ({ children }) => (\n    <ToggleContext.Consumer>\n      {({ on }) => (on ? null : children)}\n    </ToggleContext.Consumer>\n  );\n  static Button = props => (\n    <ToggleContext.Consumer>\n      {({ on, toggle }) => <Switch on={on} onClick={toggle} {...props} />}\n    </ToggleContext.Consumer>\n  );\n  // 💰 The reason we had to move `toggle` above `state` is because\n  // in our `state` initialization we're _using_ `this.toggle`. So\n  // if `this.toggle` is not defined before state is initialized, then\n  // `state.toggle` will be undefined.\n  toggle = () =>\n    this.setState(\n      ({ on }) => ({ on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n  state = { on: false, toggle: this.toggle };\n  render() {\n    return (\n      <ToggleContext.Provider value={this.state}>\n        {this.props.children}\n      </ToggleContext.Provider>\n    );\n  }\n}","position":{"start":{"line":211,"column":1,"offset":6741},"end":{"line":251,"column":4,"offset":7896},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This code makes use of the ","position":{"start":{"line":253,"column":1,"offset":7898},"end":{"line":253,"column":28,"offset":7925},"indent":[]}},{"type":"inlineCode","value":"consumer","position":{"start":{"line":253,"column":28,"offset":7925},"end":{"line":253,"column":38,"offset":7935},"indent":[]}},{"type":"text","value":" API. There is also a blog by Kent talking about issues that deals with issues of multiple ","position":{"start":{"line":253,"column":38,"offset":7935},"end":{"line":253,"column":129,"offset":8026},"indent":[]}},{"type":"inlineCode","value":"<React.Consumer>","position":{"start":{"line":253,"column":129,"offset":8026},"end":{"line":253,"column":147,"offset":8044},"indent":[]}},{"type":"text","value":" parents adding up. There is also a few composer libraries to help with this. You can see more ","position":{"start":{"line":253,"column":147,"offset":8044},"end":{"line":253,"column":242,"offset":8139},"indent":[]}},{"type":"link","title":null,"url":"https://kentcdodds.com/blog/reacts-new-context-api/","children":[{"type":"text","value":"on his blog","position":{"start":{"line":253,"column":243,"offset":8140},"end":{"line":253,"column":254,"offset":8151},"indent":[]}}],"position":{"start":{"line":253,"column":242,"offset":8139},"end":{"line":253,"column":308,"offset":8205},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":253,"column":308,"offset":8205},"end":{"line":253,"column":309,"offset":8206},"indent":[]}}],"position":{"start":{"line":253,"column":1,"offset":7898},"end":{"line":253,"column":309,"offset":8206},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Render Props Pattern","position":{"start":{"line":255,"column":4,"offset":8211},"end":{"line":255,"column":24,"offset":8231},"indent":[]}}],"position":{"start":{"line":255,"column":1,"offset":8208},"end":{"line":255,"column":24,"offset":8231},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When a method does use ","position":{"start":{"line":257,"column":1,"offset":8233},"end":{"line":257,"column":24,"offset":8256},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":257,"column":24,"offset":8256},"end":{"line":257,"column":30,"offset":8262},"indent":[]}},{"type":"text","value":", then it is an indicator that it doesn't need to be on the class.","position":{"start":{"line":257,"column":30,"offset":8262},"end":{"line":257,"column":96,"offset":8328},"indent":[]}}],"position":{"start":{"line":257,"column":1,"offset":8233},"end":{"line":257,"column":96,"offset":8328},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This enables us to edge closer to being a ","position":{"start":{"line":259,"column":1,"offset":8330},"end":{"line":259,"column":43,"offset":8372},"indent":[]}},{"type":"inlineCode","value":"pure","position":{"start":{"line":259,"column":43,"offset":8372},"end":{"line":259,"column":49,"offset":8378},"indent":[]}},{"type":"text","value":" function.","position":{"start":{"line":259,"column":49,"offset":8378},"end":{"line":259,"column":59,"offset":8388},"indent":[]}}],"position":{"start":{"line":259,"column":1,"offset":8330},"end":{"line":259,"column":59,"offset":8388},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This makes the rendering ownership on the \"user\" and not the component implementation.","position":{"start":{"line":261,"column":1,"offset":8390},"end":{"line":261,"column":87,"offset":8476},"indent":[]}}],"position":{"start":{"line":261,"column":1,"offset":8390},"end":{"line":261,"column":87,"offset":8476},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The idea is to have a component say \"hey, I'll be in charge of state and you be in charge of rendering\".","position":{"start":{"line":263,"column":1,"offset":8478},"end":{"line":263,"column":105,"offset":8582},"indent":[]}}],"position":{"start":{"line":263,"column":1,"offset":8478},"end":{"line":263,"column":105,"offset":8582},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// only in charge of its own state\n// the \"parent user\" is in charge of\n// rendering\nclass Toggle extends React.Component {\n  state = { on: false };\n  toggle = () =>\n    this.setState(\n      ({ on }) => ({ on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n  getStateAndHelpers() {\n    return {\n      on: this.state.on,\n      toggle: this.toggle,\n    };\n  }\n  render() {\n    return this.props.children(this.getStateAndHelpers());\n  }\n}\n\nfunction Usage({ onToggle = (...args) => console.log('onToggle', ...args) }) {\n  return (\n    <Toggle onToggle={onToggle}>\n      {/* Rendering here is done inline */}\n      {({ on, toggle }) => (\n        <div>\n          {on ? 'The button is on' : 'The button is off'}\n          <Switch on={on} onClick={toggle} />\n          <hr />\n          <button aria-label=\"custom-button\" onClick={toggle}>\n            {on ? 'on' : 'off'}\n          </button>\n        </div>\n      )}\n    </Toggle>\n  );\n}","position":{"start":{"line":265,"column":1,"offset":8584},"end":{"line":304,"column":4,"offset":9545},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you don't like the verbosity of the render prop, you can always abstract is to another component.","position":{"start":{"line":306,"column":1,"offset":9547},"end":{"line":306,"column":101,"offset":9647},"indent":[]}}],"position":{"start":{"line":306,"column":1,"offset":9547},"end":{"line":306,"column":101,"offset":9647},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The render prop method allows total flexibility of the UI but still keep the child in charge of the logic.","position":{"start":{"line":308,"column":1,"offset":9649},"end":{"line":308,"column":107,"offset":9755},"indent":[]}}],"position":{"start":{"line":308,"column":1,"offset":9649},"end":{"line":308,"column":107,"offset":9755},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There is also a side topic brought up here called ","position":{"start":{"line":310,"column":1,"offset":9757},"end":{"line":310,"column":51,"offset":9807},"indent":[]}},{"type":"inlineCode","value":"Component Injection","position":{"start":{"line":310,"column":51,"offset":9807},"end":{"line":310,"column":72,"offset":9828},"indent":[]}},{"type":"text","value":" that will use ","position":{"start":{"line":310,"column":72,"offset":9828},"end":{"line":310,"column":87,"offset":9843},"indent":[]}},{"type":"inlineCode","value":"React.createElement","position":{"start":{"line":310,"column":87,"offset":9843},"end":{"line":310,"column":108,"offset":9864},"indent":[]}},{"type":"text","value":" with the children and and pass the props that will enable access to lifecycle methods.","position":{"start":{"line":310,"column":108,"offset":9864},"end":{"line":310,"column":195,"offset":9951},"indent":[]}}],"position":{"start":{"line":310,"column":1,"offset":9757},"end":{"line":310,"column":195,"offset":9951},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Kent says he prefers ","position":{"start":{"line":312,"column":3,"offset":9955},"end":{"line":312,"column":24,"offset":9976},"indent":[]}},{"type":"inlineCode","value":"Render Prop","position":{"start":{"line":312,"column":24,"offset":9976},"end":{"line":312,"column":37,"offset":9989},"indent":[]}},{"type":"text","value":" pattern over ","position":{"start":{"line":312,"column":37,"offset":9989},"end":{"line":312,"column":51,"offset":10003},"indent":[]}},{"type":"inlineCode","value":"Component Injection","position":{"start":{"line":312,"column":51,"offset":10003},"end":{"line":312,"column":72,"offset":10024},"indent":[]}},{"type":"text","value":" because it is more powerful and the ","position":{"start":{"line":312,"column":72,"offset":10024},"end":{"line":312,"column":109,"offset":10061},"indent":[]}},{"type":"inlineCode","value":"createElement","position":{"start":{"line":312,"column":109,"offset":10061},"end":{"line":312,"column":124,"offset":10076},"indent":[]}},{"type":"text","value":" creates another layer in the React tree. What really seals the deal as well the fact that going ","position":{"start":{"line":312,"column":124,"offset":10076},"end":{"line":312,"column":221,"offset":10173},"indent":[]}},{"type":"inlineCode","value":"props => <ToggleChild {...props}>","position":{"start":{"line":312,"column":221,"offset":10173},"end":{"line":312,"column":256,"offset":10208},"indent":[]}},{"type":"text","value":" gives the same benefits of component injection.","position":{"start":{"line":312,"column":256,"offset":10208},"end":{"line":312,"column":304,"offset":10256},"indent":[]}}],"position":{"start":{"line":312,"column":3,"offset":9955},"end":{"line":312,"column":304,"offset":10256},"indent":[]}}],"position":{"start":{"line":312,"column":1,"offset":9953},"end":{"line":312,"column":304,"offset":10256},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So when to use ","position":{"start":{"line":314,"column":1,"offset":10258},"end":{"line":314,"column":16,"offset":10273},"indent":[]}},{"type":"inlineCode","value":"Render Prop","position":{"start":{"line":314,"column":16,"offset":10273},"end":{"line":314,"column":29,"offset":10286},"indent":[]}},{"type":"text","value":" vs ","position":{"start":{"line":314,"column":29,"offset":10286},"end":{"line":314,"column":33,"offset":10290},"indent":[]}},{"type":"inlineCode","value":"Compound Components","position":{"start":{"line":314,"column":33,"offset":10290},"end":{"line":314,"column":54,"offset":10311},"indent":[]}},{"type":"text","value":"? With compound components, you don't see the state that is passed between ","position":{"start":{"line":314,"column":54,"offset":10311},"end":{"line":314,"column":129,"offset":10386},"indent":[]}},{"type":"inlineCode","value":"Toggle","position":{"start":{"line":314,"column":129,"offset":10386},"end":{"line":314,"column":137,"offset":10394},"indent":[]}},{"type":"text","value":" and all of its children. All the state and handlers are implicit. If people don't care what those values are ie an accordion, there will be some state shared with the parent for which index is open and the implicit state of the child known if it is open.","position":{"start":{"line":314,"column":137,"offset":10394},"end":{"line":314,"column":392,"offset":10649},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":10258},"end":{"line":314,"column":392,"offset":10649},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The user of that \"component\" doesn't need to know which accordion is open per se. Adding that initial layer of complexity is unnecessary and is why ","position":{"start":{"line":316,"column":1,"offset":10651},"end":{"line":316,"column":149,"offset":10799},"indent":[]}},{"type":"inlineCode","value":"Compound Components","position":{"start":{"line":316,"column":149,"offset":10799},"end":{"line":316,"column":170,"offset":10820},"indent":[]}},{"type":"text","value":" is preferred there.","position":{"start":{"line":316,"column":170,"offset":10820},"end":{"line":316,"column":190,"offset":10840},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":10651},"end":{"line":316,"column":190,"offset":10840},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The last question - is there a difference between passing children as a prop vs within the tags? They are functionally equivalent. Kent uses ","position":{"start":{"line":318,"column":1,"offset":10842},"end":{"line":318,"column":142,"offset":10983},"indent":[]}},{"type":"inlineCode","value":"children","position":{"start":{"line":318,"column":142,"offset":10983},"end":{"line":318,"column":152,"offset":10993},"indent":[]}},{"type":"text","value":" over render because the context API uses that.","position":{"start":{"line":318,"column":152,"offset":10993},"end":{"line":318,"column":199,"offset":11040},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":10842},"end":{"line":318,"column":199,"offset":11040},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Prop Getters","position":{"start":{"line":320,"column":4,"offset":11045},"end":{"line":320,"column":16,"offset":11057},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":11042},"end":{"line":320,"column":16,"offset":11057},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"What does ","position":{"start":{"line":322,"column":1,"offset":11059},"end":{"line":322,"column":11,"offset":11069},"indent":[]}},{"type":"inlineCode","value":"Prop Getters","position":{"start":{"line":322,"column":11,"offset":11069},"end":{"line":322,"column":25,"offset":11083},"indent":[]}},{"type":"text","value":" solve? Imagine the following where we want to add an ","position":{"start":{"line":322,"column":25,"offset":11083},"end":{"line":322,"column":79,"offset":11137},"indent":[]}},{"type":"inlineCode","value":"onClick","position":{"start":{"line":322,"column":79,"offset":11137},"end":{"line":322,"column":88,"offset":11146},"indent":[]}},{"type":"text","value":" function:","position":{"start":{"line":322,"column":88,"offset":11146},"end":{"line":322,"column":98,"offset":11156},"indent":[]}}],"position":{"start":{"line":322,"column":1,"offset":11059},"end":{"line":322,"column":98,"offset":11156},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// un-oh, we could be overriding the togglerProps onClick func!\n<button\n  aria-label=\"custom-button\"\n  {...togglerProps}\n  onClick={() => console.log('Doing something')}\n>\n  {on ? 'on' : 'off'}\n</button>","position":{"start":{"line":324,"column":1,"offset":11158},"end":{"line":333,"column":4,"offset":11379},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We now have the issue of accidentally overriding the ","position":{"start":{"line":335,"column":1,"offset":11381},"end":{"line":335,"column":54,"offset":11434},"indent":[]}},{"type":"inlineCode","value":"toggleProps onClick","position":{"start":{"line":335,"column":54,"offset":11434},"end":{"line":335,"column":75,"offset":11455},"indent":[]}},{"type":"text","value":" (or vice versa if we switch the order!)","position":{"start":{"line":335,"column":75,"offset":11455},"end":{"line":335,"column":115,"offset":11495},"indent":[]}}],"position":{"start":{"line":335,"column":1,"offset":11381},"end":{"line":335,"column":115,"offset":11495},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With prop getters, we can solve this problem:","position":{"start":{"line":337,"column":1,"offset":11497},"end":{"line":337,"column":46,"offset":11542},"indent":[]}}],"position":{"start":{"line":337,"column":1,"offset":11497},"end":{"line":337,"column":46,"offset":11542},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// prop getters\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\n// this is important for the prop getter\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  state = { on: false };\n  toggle = () =>\n    this.setState(\n      ({ on }) => ({ on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    'aria-expanded': this.state.on,\n    onClick: callAll(onClick, this.toggle),\n    ...props,\n  });\n  getStateAndHelpers() {\n    return {\n      on: this.state.on,\n      toggle: this.toggle,\n      getTogglerProps: this.getTogglerProps,\n    };\n  }\n  render() {\n    return this.props.children(this.getStateAndHelpers());\n  }\n}\n\nfunction Usage({\n  onToggle = (...args) => console.log('onToggle', ...args),\n  onButtonClick = () => console.log('onButtonClick'),\n}) {\n  return (\n    <Toggle onToggle={onToggle}>\n      {({ on, getTogglerProps }) => (\n        <div>\n          <Switch {...getTogglerProps({ on })} />\n          <hr />\n          <button\n            {/* Note here we are spreading an object */}\n            {...getTogglerProps({\n              'aria-label': 'custom-button',\n              onClick: onButtonClick,\n              id: 'custom-button-id',\n            })}\n          >\n            {on ? 'on' : 'off'}\n          </button>\n        </div>\n      )}\n    </Toggle>\n  );\n}\nUsage.title = 'Prop Getters';\n\nexport { Toggle, Usage as default };","position":{"start":{"line":339,"column":1,"offset":11544},"end":{"line":400,"column":4,"offset":13053},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"State Initializers","position":{"start":{"line":402,"column":4,"offset":13058},"end":{"line":402,"column":22,"offset":13076},"indent":[]}}],"position":{"start":{"line":402,"column":1,"offset":13055},"end":{"line":402,"column":22,"offset":13076},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In general we want to be able to reset back to an initial state and start things up in an initial state. The idea is straight forward.","position":{"start":{"line":404,"column":1,"offset":13078},"end":{"line":404,"column":135,"offset":13212},"indent":[]}}],"position":{"start":{"line":404,"column":1,"offset":13078},"end":{"line":404,"column":135,"offset":13212},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// State Initializers\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  // The setting of initial state\n  static defaultProps = {\n    initialOn: false,\n    onReset: () => {},\n  };\n  // This helps to communicate what we're trying to accomplish\n  initialState = { on: this.props.initialOn };\n  state = this.initialState;\n  // The important part for reset: this reset uses the initialState object\n  reset = () =>\n    this.setState(this.initialState, () => this.props.onReset(this.state.on));\n  toggle = () =>\n    this.setState(\n      ({ on }) => ({ on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    onClick: callAll(onClick, this.toggle),\n    'aria-expanded': this.state.on,\n    ...props,\n  });\n  getStateAndHelpers() {\n    return {\n      on: this.state.on,\n      toggle: this.toggle,\n      reset: this.reset,\n      getTogglerProps: this.getTogglerProps,\n    };\n  }\n  render() {\n    return this.props.children(this.getStateAndHelpers());\n  }\n}\n\nfunction Usage({\n  initialOn = false,\n  onToggle = (...args) => console.log('onToggle', ...args),\n  onReset = (...args) => console.log('onReset', ...args),\n}) {\n  return (\n    <Toggle initialOn={initialOn} onToggle={onToggle} onReset={onReset}>\n      {({ getTogglerProps, on, reset }) => (\n        <div>\n          <Switch {...getTogglerProps({ on })} />\n          <hr />\n          <button onClick={() => reset()}>Reset</button>\n        </div>\n      )}\n    </Toggle>\n  );\n}\nUsage.title = 'State Initializers';","position":{"start":{"line":406,"column":1,"offset":13214},"end":{"line":467,"column":4,"offset":14894},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"State Reducer","position":{"start":{"line":469,"column":4,"offset":14899},"end":{"line":469,"column":17,"offset":14912},"indent":[]}}],"position":{"start":{"line":469,"column":1,"offset":14896},"end":{"line":469,"column":17,"offset":14912},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is a common pattern in Reason React. This helps people to control how the state is managed.","position":{"start":{"line":471,"column":1,"offset":14914},"end":{"line":471,"column":97,"offset":15010},"indent":[]}}],"position":{"start":{"line":471,"column":1,"offset":14914},"end":{"line":471,"column":97,"offset":15010},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You have to think more critically about how you component manages state as this now becomes an important part of the API. It breaks encapsulation, but allows a huge amount of user flexibility.","position":{"start":{"line":473,"column":1,"offset":15012},"end":{"line":473,"column":193,"offset":15204},"indent":[]}}],"position":{"start":{"line":473,"column":1,"offset":15012},"end":{"line":473,"column":193,"offset":15204},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// state reducer\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  static defaultProps = {\n    initialOn: false,\n    onReset: () => {},\n    stateReducer: (state, changes) => changes,\n  };\n  initialState = { on: this.props.initialOn };\n  state = this.initialState;\n  // this is a helper to pass state up to parents\n  internalSetState(changes, callback) {\n    this.setState(state => {\n      // handle function setState call\n      const changesObject =\n        typeof changes === 'function' ? changes(state) : changes;\n\n      // apply state reducer\n      const reducedChanges =\n        this.props.stateReducer(state, changesObject) || {};\n\n      // return null if there are no changes to be made\n      // (to avoid an unecessary rerender)\n      return Object.keys(reducedChanges).length ? reducedChanges : null;\n    }, callback);\n  }\n  reset = () =>\n    this.internalSetState(this.initialState, () =>\n      this.props.onReset(this.state.on),\n    );\n  toggle = () =>\n    // now uses internalSetState updater\n    this.internalSetState(\n      ({ on }) => ({ on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    onClick: callAll(onClick, this.toggle),\n    'aria-expanded': this.state.on,\n    ...props,\n  });\n  getStateAndHelpers() {\n    return {\n      on: this.state.on,\n      toggle: this.toggle,\n      reset: this.reset,\n      getTogglerProps: this.getTogglerProps,\n    };\n  }\n  render() {\n    return this.props.children(this.getStateAndHelpers());\n  }\n}\n\nclass Usage extends React.Component {\n  static defaultProps = {\n    onToggle: (...args) => console.log('onToggle', ...args),\n    onReset: (...args) => console.log('onReset', ...args),\n  };\n  initialState = { timesClicked: 0 };\n  state = this.initialState;\n  handleToggle = (...args) => {\n    this.setState(({ timesClicked }) => ({\n      timesClicked: timesClicked + 1,\n    }));\n    this.props.onToggle(...args);\n  };\n  handleReset = (...args) => {\n    this.setState(this.initialState);\n    this.props.onReset(...args);\n  };\n  // This enables us to control the child state.\n  // Note that this breaks encapsulation.\n  toggleStateReducer = (state, changes) => {\n    if (this.state.timesClicked >= 4) {\n      return { ...changes, on: false };\n    }\n    return changes;\n  };\n  render() {\n    const { timesClicked } = this.state;\n    return (\n      <Toggle\n        stateReducer={this.toggleStateReducer}\n        onToggle={this.handleToggle}\n        onReset={this.handleReset}\n      >\n        {toggle => (\n          <div>\n            <Switch\n              {...toggle.getTogglerProps({\n                on: toggle.on,\n              })}\n            />\n            {timesClicked > 4 ? (\n              <div data-testid=\"notice\">\n                Whoa, you clicked too much!\n                <br />\n              </div>\n            ) : timesClicked > 0 ? (\n              <div data-testid=\"click-count\">Click count: {timesClicked}</div>\n            ) : null}\n            <button onClick={toggle.reset}>Reset</button>\n          </div>\n        )}\n      </Toggle>\n    );\n  }\n}\nUsage.title = 'State Reducers';\n\nexport { Toggle, Usage as default };","position":{"start":{"line":475,"column":1,"offset":15206},"end":{"line":593,"column":4,"offset":18512},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"An alternative suggested in the questions was to just rename ","position":{"start":{"line":595,"column":1,"offset":18514},"end":{"line":595,"column":62,"offset":18575},"indent":[]}},{"type":"inlineCode","value":"setInternalState","position":{"start":{"line":595,"column":62,"offset":18575},"end":{"line":595,"column":80,"offset":18593},"indent":[]}},{"type":"text","value":" to still be ","position":{"start":{"line":595,"column":80,"offset":18593},"end":{"line":595,"column":93,"offset":18606},"indent":[]}},{"type":"inlineCode","value":"setState","position":{"start":{"line":595,"column":93,"offset":18606},"end":{"line":595,"column":103,"offset":18616},"indent":[]}},{"type":"text","value":" and just call the ","position":{"start":{"line":595,"column":103,"offset":18616},"end":{"line":595,"column":122,"offset":18635},"indent":[]}},{"type":"inlineCode","value":"super.setState","position":{"start":{"line":595,"column":122,"offset":18635},"end":{"line":595,"column":138,"offset":18651},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":595,"column":138,"offset":18651},"end":{"line":595,"column":139,"offset":18652},"indent":[]}}],"position":{"start":{"line":595,"column":1,"offset":18514},"end":{"line":595,"column":139,"offset":18652},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// Reset omitted for brevity, but this is a replacement\n// in the above code for `setInternalState`\n\n// this is a helper to pass state up to parents\nsetState(changes, callback) {\n super.setState(state => {\n   // handle function setState call\n   const changesObject =\n     typeof changes === 'function' ? changes(state) : changes;\n\n   // apply state reducer\n   const reducedChanges =\n     this.props.stateReducer(state, changesObject) || {};\n\n   // return null if there are no changes to be made\n   // (to avoid an unecessary rerender)\n   return Object.keys(reducedChanges).length ? reducedChanges : null;\n }, callback);\n}","position":{"start":{"line":597,"column":1,"offset":18654},"end":{"line":617,"column":4,"offset":19293},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Kent does suggest that is could be confusing to see ","position":{"start":{"line":619,"column":1,"offset":19295},"end":{"line":619,"column":53,"offset":19347},"indent":[]}},{"type":"inlineCode","value":"setState","position":{"start":{"line":619,"column":53,"offset":19347},"end":{"line":619,"column":63,"offset":19357},"indent":[]}},{"type":"text","value":" and have it not operate as expected.","position":{"start":{"line":619,"column":63,"offset":19357},"end":{"line":619,"column":100,"offset":19394},"indent":[]}}],"position":{"start":{"line":619,"column":1,"offset":19295},"end":{"line":619,"column":100,"offset":19394},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Another alternative Kent suggest is to enable it to become a map:","position":{"start":{"line":621,"column":1,"offset":19396},"end":{"line":621,"column":66,"offset":19461},"indent":[]}}],"position":{"start":{"line":621,"column":1,"offset":19396},"end":{"line":621,"column":66,"offset":19461},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// this is a helper to pass state up to parents\ninternalSetState(changes, callback) {\n this.setState(state => {\n   return [changes]\n   // handle function setState call\n   .map(c => typeof c === 'function' ? c(state) : c)\n   // apply state reducer\n   .map(c => this.props.stateReducer(state, c) || {})\n   // return null if there are no changes to be made\n   // (to avoid an unecessary rerender)\n  .map(c => Object.keys(c).length ? c : null)[0];\n }, callback);\n}","position":{"start":{"line":623,"column":1,"offset":19463},"end":{"line":637,"column":4,"offset":19941},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can then also empower the parent to force toggles:","position":{"start":{"line":639,"column":1,"offset":19943},"end":{"line":639,"column":54,"offset":19996},"indent":[]}}],"position":{"start":{"line":639,"column":1,"offset":19943},"end":{"line":639,"column":54,"offset":19996},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// This will enable the parent to control an\n// ability to force changes\ntoggleStateReducer = (state, changes) => {\n  if (changes.type === 'forced') {\n    return changes;\n  }\n  if (this.state.timesClicked >= 4) {\n    return { ...changes, on: false };\n  }\n  return changes;\n};","position":{"start":{"line":641,"column":1,"offset":19998},"end":{"line":653,"column":4,"offset":20291},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is the full example of a state reducer with types that can brute force from the parent:","position":{"start":{"line":655,"column":1,"offset":20293},"end":{"line":655,"column":93,"offset":20385},"indent":[]}}],"position":{"start":{"line":655,"column":1,"offset":20293},"end":{"line":655,"column":93,"offset":20385},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// state reducer with types\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  static defaultProps = {\n    initialOn: false,\n    onReset: () => {},\n    stateReducer: (state, changes) => changes,\n  };\n  // 💰 any time I use a string as an identifier for a type,\n  // I prefer to give it a variable name. That way folks who\n  // want to reference the type can do so using variable which\n  // will help mitigate the problems of indirection.\n  static stateChangeTypes = {\n    reset: '__toggle_reset__',\n    toggle: '__toggle_toggle__',\n  };\n  initialState = { on: this.props.initialOn };\n  state = this.initialState;\n  internalSetState(changes, callback) {\n    this.setState(state => {\n      // handle function setState call\n      const changesObject =\n        typeof changes === 'function' ? changes(state) : changes;\n\n      // apply state reducer\n      const reducedChanges =\n        this.props.stateReducer(state, changesObject) || {};\n\n      // remove the type so it's not set into state\n      const { type: ignoredType, ...onlyChanges } = reducedChanges;\n\n      // return null if there are no changes to be made\n      return Object.keys(onlyChanges).length ? onlyChanges : null;\n    }, callback);\n  }\n\n  reset = () =>\n    this.internalSetState(\n      { ...this.initialState, type: Toggle.stateChangeTypes.reset },\n      () => this.props.onReset(this.state.on),\n    );\n  toggle = ({ type = Toggle.stateChangeTypes.toggle } = {}) =>\n    this.internalSetState(\n      ({ on }) => ({ type, on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    onClick: callAll(onClick, () => this.toggle()),\n    'aria-expanded': this.state.on,\n    ...props,\n  });\n  getStateAndHelpers() {\n    return {\n      on: this.state.on,\n      toggle: this.toggle,\n      reset: this.reset,\n      getTogglerProps: this.getTogglerProps,\n    };\n  }\n  render() {\n    return this.props.children(this.getStateAndHelpers());\n  }\n}\n\nclass Usage extends React.Component {\n  static defaultProps = {\n    onToggle: (...args) => console.log('onToggle', ...args),\n    onReset: (...args) => console.log('onReset', ...args),\n  };\n  initialState = { timesClicked: 0 };\n  state = this.initialState;\n  handleToggle = (...args) => {\n    this.setState(({ timesClicked }) => ({\n      timesClicked: timesClicked + 1,\n    }));\n    this.props.onToggle(...args);\n  };\n  handleReset = (...args) => {\n    this.setState(this.initialState);\n    this.props.onReset(...args);\n  };\n  toggleStateReducer = (state, changes) => {\n    if (changes.type === 'forced') {\n      return changes;\n    }\n    if (this.state.timesClicked >= 4) {\n      return { ...changes, on: false };\n    }\n    return changes;\n  };\n  render() {\n    const { timesClicked } = this.state;\n    return (\n      <Toggle\n        stateReducer={this.toggleStateReducer}\n        onToggle={this.handleToggle}\n        onReset={this.handleReset}\n        ref={this.props.toggleRef}\n      >\n        {({ on, toggle, reset, getTogglerProps }) => (\n          <div>\n            <Switch\n              {...getTogglerProps({\n                on: on,\n              })}\n            />\n            {timesClicked > 4 ? (\n              <div data-testid=\"notice\">\n                Whoa, you clicked too much!\n                <br />\n                <button onClick={() => toggle({ type: 'forced' })}>\n                  Force Toggle\n                </button>\n                <br />\n              </div>\n            ) : timesClicked > 0 ? (\n              <div data-testid=\"click-count\">Click count: {timesClicked}</div>\n            ) : null}\n            <button onClick={reset}>Reset</button>\n          </div>\n        )}\n      </Toggle>\n    );\n  }\n}\nUsage.title = 'State Reducers (with change types)';\n\nexport { Toggle, Usage as default };","position":{"start":{"line":657,"column":1,"offset":20387},"end":{"line":791,"column":4,"offset":24324},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Control Props Primer","position":{"start":{"line":793,"column":4,"offset":24329},"end":{"line":793,"column":24,"offset":24349},"indent":[]}}],"position":{"start":{"line":793,"column":1,"offset":24326},"end":{"line":793,"column":24,"offset":24349},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here we are trying to get two completely different components to synchronous their state.","position":{"start":{"line":795,"column":1,"offset":24351},"end":{"line":795,"column":90,"offset":24440},"indent":[]}}],"position":{"start":{"line":795,"column":1,"offset":24351},"end":{"line":795,"column":90,"offset":24440},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The general idea is that the parent can control when to set things on for the children (here the children being two Switches).","position":{"start":{"line":797,"column":1,"offset":24442},"end":{"line":797,"column":127,"offset":24568},"indent":[]}}],"position":{"start":{"line":797,"column":1,"offset":24442},"end":{"line":797,"column":127,"offset":24568},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This pattern is the same that is used for controlled form components. Think of the parent form controlling what shows in a child input.","position":{"start":{"line":799,"column":1,"offset":24570},"end":{"line":799,"column":136,"offset":24705},"indent":[]}}],"position":{"start":{"line":799,"column":1,"offset":24570},"end":{"line":799,"column":136,"offset":24705},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The idea is that a child will pass the local state change up, then child components will be rerendered by the change in the parent.","position":{"start":{"line":801,"column":1,"offset":24707},"end":{"line":801,"column":132,"offset":24838},"indent":[]}}],"position":{"start":{"line":801,"column":1,"offset":24707},"end":{"line":801,"column":132,"offset":24838},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// control props primer\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\nclass Toggle extends React.Component {\n  state = { on: false };\n  // this is important to determine if the component is controlled\n  isOnControlled() {\n    return this.props.on !== undefined;\n  }\n  getState() {\n    return {\n      on: this.isOnControlled() ? this.props.on : this.state.on,\n    };\n  }\n  toggle = () => {\n    if (this.isOnControlled()) {\n      this.props.onToggle(!this.getState().on);\n    } else {\n      this.setState(\n        ({ on }) => ({ on: !on }),\n        () => {\n          this.props.onToggle(this.getState().on);\n        },\n      );\n    }\n  };\n  render() {\n    const { on } = this.getState();\n    return <Switch on={on} onClick={this.toggle} />;\n  }\n}\n\nclass Usage extends React.Component {\n  state = { bothOn: false };\n  handleToggle = on => {\n    this.setState({ bothOn: on });\n  };\n  render() {\n    const { bothOn } = this.state;\n    const { toggle1Ref, toggle2Ref } = this.props;\n    return (\n      <div>\n        <Toggle on={bothOn} onToggle={this.handleToggle} ref={toggle1Ref} />\n        <Toggle on={bothOn} onToggle={this.handleToggle} ref={toggle2Ref} />\n      </div>\n    );\n  }\n}\nUsage.title = 'Control Props (primer)';\n\nexport { Toggle, Usage as default };","position":{"start":{"line":803,"column":1,"offset":24840},"end":{"line":857,"column":4,"offset":26136},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A question about \"why not use ","position":{"start":{"line":859,"column":1,"offset":26138},"end":{"line":859,"column":31,"offset":26168},"indent":[]}},{"type":"inlineCode","value":"componentWillReceiveProps","position":{"start":{"line":859,"column":31,"offset":26168},"end":{"line":859,"column":58,"offset":26195},"indent":[]}},{"type":"text","value":" or an non-deprecated equivalent?\" - the main reason is to prevent having two sources of truth.","position":{"start":{"line":859,"column":58,"offset":26195},"end":{"line":859,"column":153,"offset":26290},"indent":[]}}],"position":{"start":{"line":859,"column":1,"offset":26138},"end":{"line":859,"column":153,"offset":26290},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Control Props","position":{"start":{"line":861,"column":4,"offset":26295},"end":{"line":861,"column":17,"offset":26308},"indent":[]}}],"position":{"start":{"line":861,"column":1,"offset":26292},"end":{"line":861,"column":17,"offset":26308},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using this now with a state reducer. You can use this without one, but a state reducer is an easier way to help with control props. Having them together gives users more choice on how they want to use their component.","position":{"start":{"line":863,"column":1,"offset":26310},"end":{"line":863,"column":218,"offset":26527},"indent":[]}}],"position":{"start":{"line":863,"column":1,"offset":26310},"end":{"line":863,"column":218,"offset":26527},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// Control Props + with a state reducer\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  // Now that a user can use this component effectively without\n  // an `onToggle` prop (they can use `onStateChange` instead)\n  // 🐨 let's provide a default for `onToggle` and `onStateChange`\n  static defaultProps = {\n    initialOn: false,\n    onReset: () => {},\n    onToggle: () => {},\n    onStateChange: () => {},\n    stateReducer: (state, changes) => changes,\n  };\n  static stateChangeTypes = {\n    reset: '__toggle_reset__',\n    toggle: '__toggle_toggle__',\n  };\n  initialState = { on: this.props.initialOn };\n  state = this.initialState;\n\n  // 🐨 let's add an `isControlled` method that accepts a state key\n  // (string) and returns true if the prop is controlled\n  // 💰 this.props[prop] !== undefined\n  isControlled(prop) {\n    return this.props[prop] !== undefined;\n  }\n\n  // 🐨 We'll also need a `getState` method here that returns a\n  // state object that has state from both internal state (`this.state`)\n  // as well as external state (`this.props`).\n  getState(state = this.state) {\n    return Object.entries(state).reduce((combinedState, [key, value]) => {\n      if (this.isControlled(key)) {\n        combinedState[key] = this.props[key];\n      } else {\n        combinedState[key] = value;\n      }\n      return combinedState;\n    }, {});\n  }\n\n  // 💰 You might consider accepting state as an argument that defaults\n  // to `this.state`... You'll use that later on...\n  internalSetState(changes, callback = () => {}) {\n    let allChanges;\n    this.setState(\n      state => {\n        // Now that our state can actually come from two sources,\n        // the `state` we receive from this function is actually only one\n        // side of the story.\n        // 🐨 Call your `this.getState` function with `state` so we can\n        // get a `combinedState` object which we'll use to perform our\n        // operations on here.\n        const combinedState = this.getState(state);\n        // handle function setState call\n        const changesObject =\n          typeof changes === 'function' ? changes(combinedState) : changes;\n\n        // apply state reducer\n        allChanges =\n          this.props.stateReducer(combinedState, changesObject) || {};\n\n        // remove the type so it's not set into state\n        const { type: ignoredType, ...onlyChanges } = allChanges;\n\n        const nonControlledChanges = Object.keys(combinedState).reduce(\n          (newChanges, stateKey) => {\n            if (!this.isControlled(stateKey)) {\n              newChanges[stateKey] = onlyChanges.hasOwnProperty(stateKey)\n                ? onlyChanges[stateKey]\n                : combinedState[stateKey];\n            }\n            return newChanges;\n          },\n          {},\n        );\n\n        // return null if there are no changes to be made\n        return Object.keys(nonControlledChanges || {}).length\n          ? nonControlledChanges\n          : null;\n      },\n      () => {\n        // call onStateChange with all the changes (including the type)\n        this.props.onStateChange(allChanges, this.getStateAndHelpers());\n        callback();\n      },\n    );\n  }\n  reset = () =>\n    this.internalSetState(\n      { ...this.initialState, type: Toggle.stateChangeTypes.reset },\n      () => this.props.onReset(this.getState().on),\n    );\n  toggle = ({ type = Toggle.stateChangeTypes.toggle } = {}) =>\n    this.internalSetState(\n      ({ on }) => ({ type, on: !on }),\n      () => this.props.onToggle(this.getState().on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    onClick: callAll(onClick, () => this.toggle()),\n    'aria-expanded': this.getState().on,\n    ...props,\n  });\n  getStateAndHelpers() {\n    return {\n      ...this.getState(),\n      toggle: this.toggle,\n      reset: this.reset,\n      getTogglerProps: this.getTogglerProps,\n    };\n  }\n  render() {\n    return this.props.children(this.getStateAndHelpers());\n  }\n}\n\nclass Usage extends React.Component {\n  static defaultProps = {\n    onToggle: (...args) => console.log('onToggle', ...args),\n    onReset: (...args) => console.log('onReset', ...args),\n  };\n  initialState = { timesClicked: 0, toggleOn: false };\n  state = this.initialState;\n  handleStateChange = changes => {\n    if (changes.type === 'forced') {\n      this.setState({ toggleOn: changes.on }, () =>\n        this.props.onToggle(this.state.toggleOn),\n      );\n    } else if (changes.type === Toggle.stateChangeTypes.reset) {\n      this.setState(this.initialState, () => {\n        this.props.onReset(this.state.toggleOn);\n      });\n    } else if (changes.type === Toggle.stateChangeTypes.toggle) {\n      this.setState(\n        ({ timesClicked }) => ({\n          timesClicked: timesClicked + 1,\n          toggleOn: timesClicked >= 4 ? false : changes.on,\n        }),\n        () => {\n          this.props.onToggle(this.state.toggleOn);\n        },\n      );\n    }\n  };\n  render() {\n    const { timesClicked, toggleOn } = this.state;\n    return (\n      <Toggle\n        on={toggleOn}\n        onStateChange={this.handleStateChange}\n        ref={this.props.toggleRef}\n      >\n        {({ on, toggle, reset, getTogglerProps }) => (\n          <div>\n            <Switch\n              {...getTogglerProps({\n                on: on,\n              })}\n            />\n            {timesClicked > 4 ? (\n              <div data-testid=\"notice\">\n                Whoa, you clicked too much!\n                <br />\n                <button onClick={() => toggle({ type: 'forced' })}>\n                  Force Toggle\n                </button>\n                <br />\n              </div>\n            ) : timesClicked > 0 ? (\n              <div data-testid=\"click-count\">Click count: {timesClicked}</div>\n            ) : null}\n            <button onClick={reset}>Reset</button>\n          </div>\n        )}\n      </Toggle>\n    );\n  }\n}\nUsage.title = 'Control Props with State Reducers';\n\nexport { Toggle, Usage as default };","position":{"start":{"line":865,"column":1,"offset":26529},"end":{"line":1053,"column":4,"offset":32599},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Provider Pattern","position":{"start":{"line":1055,"column":4,"offset":32604},"end":{"line":1055,"column":20,"offset":32620},"indent":[]}}],"position":{"start":{"line":1055,"column":1,"offset":32601},"end":{"line":1055,"column":20,"offset":32620},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This pattern enables us to provide state without prop drilling.","position":{"start":{"line":1057,"column":1,"offset":32622},"end":{"line":1057,"column":64,"offset":32685},"indent":[]}}],"position":{"start":{"line":1057,"column":1,"offset":32622},"end":{"line":1057,"column":64,"offset":32685},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// Provider Pattern\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\nconst ToggleContext = React.createContext({\n  on: false,\n  toggle: () => {},\n  reset: () => {},\n  getTogglerProps: () => ({}),\n});\n\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  static defaultProps = {\n    initialOn: false,\n    onReset: () => {},\n    onToggle: () => {},\n    onStateChange: () => {},\n    stateReducer: (state, changes) => changes,\n  };\n  static stateChangeTypes = {\n    reset: '__toggle_reset__',\n    toggle: '__toggle_toggle__',\n  };\n  static Consumer = ToggleContext.Consumer;\n\n  reset = () =>\n    this.internalSetState(\n      { ...this.initialState, type: Toggle.stateChangeTypes.reset },\n      () => this.props.onReset(this.getState().on),\n    );\n  toggle = ({ type = Toggle.stateChangeTypes.toggle } = {}) =>\n    this.internalSetState(\n      ({ on }) => ({ type, on: !on }),\n      () => this.props.onToggle(this.getState().on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    onClick: callAll(onClick, () => this.toggle()),\n    'aria-expanded': this.getState().on,\n    ...props,\n  });\n  initialState = {\n    on: this.props.initialOn,\n    toggle: this.toggle,\n    reset: this.reset,\n    getTogglerProps: this.getTogglerProps,\n  };\n  state = this.initialState;\n  isControlled(prop) {\n    return this.props[prop] !== undefined;\n  }\n  getState(state = this.state) {\n    return Object.entries(state).reduce((combinedState, [key, value]) => {\n      if (this.isControlled(key)) {\n        combinedState[key] = this.props[key];\n      } else {\n        combinedState[key] = value;\n      }\n      return combinedState;\n    }, {});\n  }\n  internalSetState(changes, callback = () => {}) {\n    let allChanges;\n    this.setState(\n      state => {\n        const combinedState = this.getState(state);\n        // handle function setState call\n        const changesObject =\n          typeof changes === 'function' ? changes(combinedState) : changes;\n\n        // apply state reducer\n        allChanges =\n          this.props.stateReducer(combinedState, changesObject) || {};\n\n        // remove the type so it's not set into state\n        const { type: ignoredType, ...onlyChanges } = allChanges;\n\n        const nonControlledChanges = Object.keys(combinedState).reduce(\n          (newChanges, stateKey) => {\n            if (!this.isControlled(stateKey)) {\n              newChanges[stateKey] = onlyChanges.hasOwnProperty(stateKey)\n                ? onlyChanges[stateKey]\n                : combinedState[stateKey];\n            }\n            return newChanges;\n          },\n          {},\n        );\n\n        // return null if there are no changes to be made\n        return Object.keys(nonControlledChanges || {}).length\n          ? nonControlledChanges\n          : null;\n      },\n      () => {\n        // call onStateChange with all the changes (including the type)\n        this.props.onStateChange(allChanges, this.state);\n        callback();\n      },\n    );\n  }\n  render() {\n    // here's all you need to do for your solution\n    // return (\n    //   <ToggleContext.Provider value={this.state}>\n    //     {this.props.children}\n    //   </ToggleContext.Provider>\n    // )\n    // here's the bonus material solution that preserves the old API:\n    const { children } = this.props;\n    const ui = typeof children === 'function' ? children(this.state) : children;\n    return (\n      <ToggleContext.Provider value={this.state}>{ui}</ToggleContext.Provider>\n    );\n  }\n}\n\nfunction Nav() {\n  return (\n    <Toggle.Consumer>\n      {toggle => (\n        <nav>\n          <ul>\n            <li>\n              <a href=\"index.html\">{toggle.on ? '🏡' : 'Home'}</a>\n            </li>\n            <li>\n              <a href=\"/about/\">{toggle.on ? '❓' : 'About'}</a>\n            </li>\n            <li>\n              <a href=\"/blog/\">{toggle.on ? '📖' : 'Blog'}</a>\n            </li>\n          </ul>\n        </nav>\n      )}\n    </Toggle.Consumer>\n  );\n}\n\nfunction NavSwitch() {\n  return (\n    <div className=\"nav-switch\">\n      <div>\n        <Toggle.Consumer>\n          {toggle => (toggle.on ? '🦄' : 'Enable Emoji')}\n        </Toggle.Consumer>\n      </div>\n      <Toggle.Consumer>\n        {toggle => (\n          <Switch\n            {...toggle.getTogglerProps({\n              on: toggle.on,\n            })}\n          />\n        )}\n      </Toggle.Consumer>\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <Nav />\n      <NavSwitch />\n    </div>\n  );\n}\n\nfunction Subtitle() {\n  return (\n    <Toggle.Consumer>\n      {toggle => (toggle.on ? '👩‍🏫 👉 🕶' : 'Teachers are awesome')}\n    </Toggle.Consumer>\n  );\n}\n\nfunction Title() {\n  return (\n    <div>\n      <h1>\n        <Toggle.Consumer>\n          {toggle => `Who is ${toggle.on ? '🕶❓' : 'awesome?'}`}\n        </Toggle.Consumer>\n      </h1>\n      <Subtitle />\n    </div>\n  );\n}\n\nfunction Article() {\n  return (\n    <div>\n      <Toggle.Consumer>\n        {toggle =>\n          [\n            'Once, I was in',\n            toggle.on ? '🏫‍' : 'school',\n            'when I',\n            toggle.on ? '🤔' : 'realized',\n            'something...',\n          ].join(' ')\n        }\n      </Toggle.Consumer>\n      <hr />\n      <Toggle.Consumer>\n        {toggle =>\n          [\n            'Without',\n            toggle.on ? '👩‍🏫' : 'teachers',\n            `I wouldn't know anything so`,\n            toggle.on ? '🙏' : 'thanks',\n            toggle.on ? '👩‍🏫❗️' : 'teachers!',\n          ].join(' ')\n        }\n      </Toggle.Consumer>\n    </div>\n  );\n}\n\nfunction Post() {\n  return (\n    <div>\n      <Title />\n      <Article />\n    </div>\n  );\n}\n\nfunction Usage() {\n  return (\n    <Toggle>\n      <div className=\"friends\">\n        <Header />\n        <Post />\n      </div>\n    </Toggle>\n  );\n}\nUsage.title = 'Provider Pattern';\n\nexport { Toggle, Usage as default };","position":{"start":{"line":1059,"column":1,"offset":32687},"end":{"line":1304,"column":4,"offset":38595},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Higher Order Components","position":{"start":{"line":1306,"column":4,"offset":38600},"end":{"line":1306,"column":27,"offset":38623},"indent":[]}}],"position":{"start":{"line":1306,"column":1,"offset":38597},"end":{"line":1306,"column":27,"offset":38623},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Getting sick of ","position":{"start":{"line":1308,"column":1,"offset":38625},"end":{"line":1308,"column":17,"offset":38641},"indent":[]}},{"type":"inlineCode","value":"<Toggle.Consumer>","position":{"start":{"line":1308,"column":17,"offset":38641},"end":{"line":1308,"column":36,"offset":38660},"indent":[]}},{"type":"text","value":" is an example where HOCs can come in handy.","position":{"start":{"line":1308,"column":36,"offset":38660},"end":{"line":1308,"column":80,"offset":38704},"indent":[]}}],"position":{"start":{"line":1308,"column":1,"offset":38625},"end":{"line":1308,"column":80,"offset":38704},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"HOCs give you back a component, while ","position":{"start":{"line":1310,"column":1,"offset":38706},"end":{"line":1310,"column":39,"offset":38744},"indent":[]}},{"type":"inlineCode","value":"Render Props","position":{"start":{"line":1310,"column":39,"offset":38744},"end":{"line":1310,"column":53,"offset":38758},"indent":[]}},{"type":"text","value":" gives you more flexibility. This example uses a HOC over a Render Prop component. Kent says he cannot think of an example of using a HOC without Render Prop.","position":{"start":{"line":1310,"column":53,"offset":38758},"end":{"line":1310,"column":211,"offset":38916},"indent":[]}}],"position":{"start":{"line":1310,"column":1,"offset":38706},"end":{"line":1310,"column":211,"offset":38916},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This example uses the ","position":{"start":{"line":1312,"column":1,"offset":38918},"end":{"line":1312,"column":23,"offset":38940},"indent":[]}},{"type":"inlineCode","value":"hoist-non-react-statics","position":{"start":{"line":1312,"column":23,"offset":38940},"end":{"line":1312,"column":48,"offset":38965},"indent":[]}},{"type":"text","value":" library that you can see ","position":{"start":{"line":1312,"column":48,"offset":38965},"end":{"line":1312,"column":74,"offset":38991},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/mridgway/hoist-non-react-statics","children":[{"type":"text","value":"here","position":{"start":{"line":1312,"column":75,"offset":38992},"end":{"line":1312,"column":79,"offset":38996},"indent":[]}}],"position":{"start":{"line":1312,"column":74,"offset":38991},"end":{"line":1312,"column":133,"offset":39050},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1312,"column":133,"offset":39050},"end":{"line":1312,"column":134,"offset":39051},"indent":[]}}],"position":{"start":{"line":1312,"column":1,"offset":38918},"end":{"line":1312,"column":134,"offset":39051},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We also want to make sure that we are forwarding on the refs so the HOC is unobservable to users.","position":{"start":{"line":1314,"column":1,"offset":39053},"end":{"line":1314,"column":98,"offset":39150},"indent":[]}}],"position":{"start":{"line":1314,"column":1,"offset":39053},"end":{"line":1314,"column":98,"offset":39150},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// Higher Order Components\n\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { Switch } from '../switch';\n\nconst ToggleContext = React.createContext({\n  on: false,\n  toggle: () => {},\n  reset: () => {},\n  getTogglerProps: () => ({}),\n});\n\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  static defaultProps = {\n    initialOn: false,\n    onReset: () => {},\n    onToggle: () => {},\n    onStateChange: () => {},\n    stateReducer: (state, changes) => changes,\n  };\n  static stateChangeTypes = {\n    reset: '__toggle_reset__',\n    toggle: '__toggle_toggle__',\n  };\n  static Consumer = ToggleContext.Consumer;\n\n  reset = () =>\n    this.internalSetState(\n      { ...this.initialState, type: Toggle.stateChangeTypes.reset },\n      () => this.props.onReset(this.getState().on),\n    );\n  toggle = ({ type = Toggle.stateChangeTypes.toggle } = {}) =>\n    this.internalSetState(\n      ({ on }) => ({ type, on: !on }),\n      () => this.props.onToggle(this.getState().on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    onClick: callAll(onClick, () => this.toggle()),\n    'aria-expanded': this.getState().on,\n    ...props,\n  });\n  initialState = {\n    on: this.props.initialOn,\n    toggle: this.toggle,\n    reset: this.reset,\n    getTogglerProps: this.getTogglerProps,\n  };\n  state = this.initialState;\n  isControlled(prop) {\n    return this.props[prop] !== undefined;\n  }\n  getState(state = this.state) {\n    return Object.entries(state).reduce((combinedState, [key, value]) => {\n      if (this.isControlled(key)) {\n        combinedState[key] = this.props[key];\n      } else {\n        combinedState[key] = value;\n      }\n      return combinedState;\n    }, {});\n  }\n  internalSetState(changes, callback = () => {}) {\n    let allChanges;\n    this.setState(\n      state => {\n        const combinedState = this.getState(state);\n        // handle function setState call\n        const changesObject =\n          typeof changes === 'function' ? changes(combinedState) : changes;\n\n        // apply state reducer\n        allChanges =\n          this.props.stateReducer(combinedState, changesObject) || {};\n\n        // remove the type so it's not set into state\n        const { type: ignoredType, ...onlyChanges } = allChanges;\n\n        const nonControlledChanges = Object.keys(combinedState).reduce(\n          (newChanges, stateKey) => {\n            if (!this.isControlled(stateKey)) {\n              newChanges[stateKey] = onlyChanges.hasOwnProperty(stateKey)\n                ? onlyChanges[stateKey]\n                : combinedState[stateKey];\n            }\n            return newChanges;\n          },\n          {},\n        );\n\n        // return null if there are no changes to be made\n        return Object.keys(nonControlledChanges || {}).length\n          ? nonControlledChanges\n          : null;\n      },\n      () => {\n        // call onStateChange with all the changes (including the type)\n        this.props.onStateChange(allChanges, this.state);\n        callback();\n      },\n    );\n  }\n  render() {\n    const { children } = this.props;\n    const ui = typeof children === 'function' ? children(this.state) : children;\n    return (\n      <ToggleContext.Provider value={this.state}>{ui}</ToggleContext.Provider>\n    );\n  }\n}\n\nfunction withToggle(Component) {\n  function Wrapper(props, ref) {\n    return (\n      <Toggle.Consumer>\n        {toggleContext => (\n          <Component {...props} toggle={toggleContext} ref={ref} />\n        )}\n      </Toggle.Consumer>\n    );\n  }\n  Wrapper.displayName = `withToggle(${Component.displayName ||\n    Component.name})`;\n  return hoistNonReactStatics(React.forwardRef(Wrapper), Component);\n}\n\n// this Subtitle component could be as simple as:\n// const Subtitle = withToggle(({toggle: {on}}) => (\n//   <span>{on ? '👩‍🏫 👉 🕶' : 'Teachers are awesome'}</span>\n// ))\n// But for the purposes of this workshop, we've made it a little more complex\n// just to ensure you're HOC handles common issues with HOCs\nconst Subtitle = withToggle(\n  class extends React.Component {\n    static displayName = 'Subtitle';\n    static emoji = '👩‍🏫 👉 🕶';\n    static text = 'Teachers are awesome';\n    instanceProperty = true;\n    render() {\n      return (\n        <span>{this.props.toggle.on ? Subtitle.emoji : Subtitle.text}</span>\n      );\n    }\n  },\n);\n\nfunction Nav() {\n  return (\n    <Toggle.Consumer>\n      {toggle => (\n        <nav>\n          <ul>\n            <li>\n              <a href=\"index.html\">{toggle.on ? '🏡' : 'Home'}</a>\n            </li>\n            <li>\n              <a href=\"/about/\">{toggle.on ? '❓' : 'About'}</a>\n            </li>\n            <li>\n              <a href=\"/blog/\">{toggle.on ? '📖' : 'Blog'}</a>\n            </li>\n          </ul>\n        </nav>\n      )}\n    </Toggle.Consumer>\n  );\n}\n\nfunction NavSwitch() {\n  return (\n    <div className=\"nav-switch\">\n      <div>\n        <Toggle.Consumer>\n          {toggle => (toggle.on ? '🦄' : 'Enable Emoji')}\n        </Toggle.Consumer>\n      </div>\n      <Toggle.Consumer>\n        {toggle => (\n          <Switch\n            {...toggle.getTogglerProps({\n              on: toggle.on,\n            })}\n          />\n        )}\n      </Toggle.Consumer>\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <Nav />\n      <NavSwitch />\n    </div>\n  );\n}\n\n// This is part of our contrived example so we can test things properly\n// to make sure your HOC handles common issues\nexport class Debug extends React.Component {\n  childInstance = React.createRef();\n  render() {\n    return React.cloneElement(this.props.children, {\n      ref: this.childInstance,\n    });\n  }\n}\n\nfunction Title() {\n  return (\n    <div>\n      <h1>\n        <Toggle.Consumer>\n          {toggle => `Who is ${toggle.on ? '🕶❓' : 'awesome?'}`}\n        </Toggle.Consumer>\n      </h1>\n      <Debug child=\"subtitle\">\n        <Subtitle />\n      </Debug>\n    </div>\n  );\n}\n\nfunction Article() {\n  return (\n    <div>\n      <Toggle.Consumer>\n        {toggle =>\n          [\n            'Once, I was in',\n            toggle.on ? '🏫‍' : 'school',\n            'when I',\n            toggle.on ? '🤔' : 'realized',\n            'something...',\n          ].join(' ')\n        }\n      </Toggle.Consumer>\n      <hr />\n      <Toggle.Consumer>\n        {toggle =>\n          [\n            'Without',\n            toggle.on ? '👩‍🏫' : 'teachers',\n            `I wouldn't know anything so`,\n            toggle.on ? '🙏' : 'thanks',\n            toggle.on ? '👩‍🏫❗️' : 'teachers!',\n          ].join(' ')\n        }\n      </Toggle.Consumer>\n    </div>\n  );\n}\n\nfunction Post() {\n  return (\n    <div>\n      <Title />\n      <Article />\n    </div>\n  );\n}\n\nfunction Usage() {\n  return (\n    <Toggle>\n      <div className=\"friends\">\n        <Header />\n        <Post />\n      </div>\n    </Toggle>\n  );\n}\nUsage.title = 'Higher Order Components';\n\nexport { Toggle, Usage as default };","position":{"start":{"line":1316,"column":1,"offset":39152},"end":{"line":1595,"column":4,"offset":46123},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Rendex","position":{"start":{"line":1597,"column":4,"offset":46128},"end":{"line":1597,"column":10,"offset":46134},"indent":[]}}],"position":{"start":{"line":1597,"column":1,"offset":46125},"end":{"line":1597,"column":10,"offset":46134},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Rendex is a bonus where we use both React's context API and Redux together.","position":{"start":{"line":1599,"column":1,"offset":46136},"end":{"line":1599,"column":76,"offset":46211},"indent":[]}}],"position":{"start":{"line":1599,"column":1,"offset":46136},"end":{"line":1599,"column":76,"offset":46211},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// Rendux\n\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as redux from 'redux';\nimport { Switch } from '../switch';\n\nconst RenduxContext = React.createContext({});\n\nclass Rendux extends React.Component {\n  static Consumer = RenduxContext.Consumer;\n  static defaultProps = {\n    initialState: {},\n    reducer: state => state,\n  };\n  initialReduxState = this.props.initialState;\n  rootReducer = (state, action) => {\n    if (action.type === '__RENDUX_RESET__') {\n      return this.initialReduxState;\n    }\n    return this.props.reducer(state, action);\n  };\n  store = redux.createStore(this.rootReducer, this.initialReduxState);\n  reset = () => {\n    this.store.dispatch({\n      type: '__RENDUX_RESET__',\n    });\n  };\n  componentDidMount() {\n    this.unsubscribe = this.store.subscribe(() =>\n      this.setState({\n        state: this.store.getState(),\n      }),\n    );\n  }\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n  initialState = {\n    state: this.props.initialState,\n    dispatch: this.store.dispatch,\n    reset: this.reset,\n  };\n  state = this.initialState;\n  render() {\n    const { children } = this.props;\n    const ui = typeof children === 'function' ? children(this.state) : children;\n    return (\n      <RenduxContext.Provider value={this.state}>{ui}</RenduxContext.Provider>\n    );\n  }\n}\n\nfunction withRendux(Component) {\n  class Wrapper extends React.Component {\n    render() {\n      const { forwardedRef, ...rest } = this.props;\n      return (\n        <Rendux.Consumer>\n          {rendux => <Component {...rest} rendux={rendux} ref={forwardedRef} />}\n        </Rendux.Consumer>\n      );\n    }\n  }\n  Wrapper.displayName = `withRendux(${Component.displayName ||\n    Component.name})`;\n  const forwardRef = React.forwardRef((props, ref) => (\n    <Wrapper {...props} forwardedRef={ref} />\n  ));\n  return hoistNonReactStatics(forwardRef, Component);\n}\n\nfunction MyInput() {\n  return (\n    <Rendux.Consumer>\n      {rendux => (\n        <input\n          value={rendux.state.inputValue || (rendux.state.on ? 'on' : 'off')}\n          placeholder=\"Type 'off' or 'on'\"\n          onChange={event => {\n            if (event.target.value === 'on') {\n              rendux.dispatch({\n                type: 'toggle',\n                value: true,\n              });\n            } else if (event.target.value === 'off') {\n              rendux.dispatch({\n                type: 'toggle',\n                value: false,\n              });\n            }\n            rendux.dispatch({\n              type: 'input_change',\n              value: event.target.value,\n            });\n          }}\n          onBlur={event => {\n            const { value } = event.target;\n            if (value !== 'on' && value !== 'off') {\n              rendux.dispatch({\n                type: 'input_change',\n                value: rendux.state.on ? 'on' : 'off',\n              });\n            }\n          }}\n        />\n      )}\n    </Rendux.Consumer>\n  );\n}\n\nfunction MySwitch() {\n  return (\n    <Rendux.Consumer>\n      {rendux => (\n        <div\n          style={{\n            marginTop: 20,\n            marginBottom: 20,\n          }}\n        >\n          <Switch\n            on={rendux.state.on}\n            onClick={() => {\n              rendux.dispatch({\n                type: 'toggle',\n                value: !rendux.state.on,\n              });\n\n              if (rendux.state.inputValue) {\n                rendux.dispatch({\n                  type: 'input_change',\n                  value: !rendux.state.on ? 'on' : 'off',\n                });\n              }\n            }}\n          />\n        </div>\n      )}\n    </Rendux.Consumer>\n  );\n}\n\nconst StatePrinter = withRendux(function StatePrinter({ rendux }) {\n  return (\n    <div style={{ textAlign: 'left' }}>\n      state:\n      <pre data-testid=\"printed-state\">\n        {JSON.stringify(rendux.state, null, 2)}\n      </pre>\n    </div>\n  );\n});\n\nfunction Usage() {\n  return (\n    <Rendux\n      initialState={{ on: true }}\n      reducer={(state, action) => {\n        switch (action.type) {\n          case 'toggle':\n            return {\n              ...state,\n              on: action.value,\n            };\n          case 'input_change':\n            return {\n              ...state,\n              inputValue: action.value,\n            };\n          default:\n            return state;\n        }\n      }}\n    >\n      {({ reset }) => (\n        <React.Fragment>\n          <MyInput />\n          <MySwitch />\n          <button onClick={reset}>reset</button>\n          <StatePrinter />\n        </React.Fragment>\n      )}\n    </Rendux>\n  );\n}\nUsage.title = 'Bonus: Rendux';\n\nexport { Rendux, Usage, Usage as default };","position":{"start":{"line":1601,"column":1,"offset":46213},"end":{"line":1791,"column":4,"offset":50914},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":1794,"column":1,"offset":50917},"end":{"line":1794,"column":31,"offset":50947},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1794,"column":31,"offset":50947}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"advanced-react-patterns\"\n    }}>{`Advanced React Patterns`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/advanced-react-patterns/\"\n        }}>{`FE Masters Course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/kentcdodds/advanced-react-patterns-v2/blob/frontend-masters/README.md\"\n        }}>{`Course Material on GitHub`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/kentcdodds/advanced-react-patterns-v2/tree/frontend-masters\"\n        }}>{`Code Sandbox for course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/downshift-js/downshift\"\n        }}>{`Downshift Library`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/reacts-new-context-api/\"\n        }}>{`React's New Context API - Kent Dodds`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`Patterns to know from course:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Compound Components`}</li>\n      <li parentName=\"ol\">{`Component Injection`}</li>\n      <li parentName=\"ol\">{`Render Prop`}</li>\n      <li parentName=\"ol\">{`Render Getters`}</li>\n      <li parentName=\"ol\">{`State Initializers`}</li>\n      <li parentName=\"ol\">{`State Reducers`}</li>\n      <li parentName=\"ol\">{`Control Props`}</li>\n      <li parentName=\"ol\">{`Provider Pattern`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"building-the-basic-toggle\"\n    }}>{`Building the Basic Toggle`}</h2>\n    <p>{`This is used to just set things up for the advanced stuff, but it was worth noting the code that we are using the `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` function passer to ensure we get the latest state guarantee (which is not guaranteed the other way):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\n// 🐨 uncomment this import to get the switch component.\n// It takes an \\`onClick\\` and an \\`on\\` prop\nimport { Switch } from '../switch';\n\nclass Toggle extends React.Component {\n  state = { on: false };\n  toggle = () => {\n    // IMPORTANT: This is the example of passing a function for set state then\n    // using a callback to ensure the re-render is fired straight away\n    // @see https://reactjs.org/docs/react-component.html#setstate\n    this.setState(\n      currentState => {\n        return { on: !currentState.on };\n      },\n      () => {\n        this.props.onToggle(this.state.on);\n      },\n    );\n  };\n  // 🐨 this toggle component is going to need to have state for \\`on\\`\n  //\n  // You'll also want a method to handle when the switch is clicked\n  // which will update the \\`on\\` state and call the \\`onToggle\\` prop\n  // 💰 this.props.onToggle(this.state.on)\n  render() {\n    // 🐨 here you'll want to return the switch with the \\`on\\` and \\`onClick\\` props\n    return <Switch onClick={this.toggle} on={this.state.on} />;\n  }\n}\n\n// Don't make changes to the Usage component. It's here to show you how your\n// component is intended to be used and is used in the tests.\n// You can make all the tests pass by updating the Toggle component.\nfunction Usage({ onToggle = (...args) => console.log('onToggle', ...args) }) {\n  return <Toggle onToggle={onToggle} />;\n}\nUsage.title = 'Build Toggle';\n\nexport { Toggle, Usage as default };\n`}</code></pre>\n    <p>{`One question that came up - why are we using `}<inlineCode parentName=\"p\">{`this.props.onToggle`}</inlineCode>{`. Kent's answer:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`A common pattern in React is that each component manages its own state but lets the parent know what is happening when it changes.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"basic-compound-components\"\n    }}>{`Basic Compound Components`}</h2>\n    <p>{`In the second exercise, we have `}<inlineCode parentName=\"p\">{`Toggle`}</inlineCode>{` as a compound component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Don't make changes to the Usage component. It's here to show you how your\n// component is intended to be used and is used in the tests.\n// You can make all the tests pass by updating the Toggle component.\nfunction Usage({\n  onToggle = (...args) => console.log('onToggle', ...args),\n}) {\n  return (\n    {/* Compound component here! */}\n    <Toggle onToggle={onToggle}>\n      <Toggle.On>The button is on</Toggle.On>\n      <Toggle.Off>The button is off</Toggle.Off>\n      <Toggle.Button />\n    </Toggle>\n  )\n}\nUsage.title = 'Compound Components'\n\nexport {Toggle, Usage as default}\n`}</code></pre>\n    <p>{`Why compound components? It helps ease of API - the example shown was a potential message etc. Instead, what we can do is have children like `}<inlineCode parentName=\"p\">{`<Toggle.On>`}</inlineCode>{` that share implicit state with the parent.`}</p>\n    <p>{`A real life example in HTML of a compound component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<select>\n  <option></option>\n</select>\n`}</code></pre>\n    <p>{`The example implementation for the `}<inlineCode parentName=\"p\">{`Toggle`}</inlineCode>{` example is the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Toggle extends React.Component {\n  // these are the important tidbits to get <Toggle.On>, <Toggle.Off> etc\n  // these could also be declared as functions outside the class, but\n  // here it is mentioned to be a preference to show their linkage\n  static On = ({ on, children }) => (on ? children : null);\n  static Off = ({ on, children }) => (on ? null : children);\n  static Button = ({ on, toggle, ...props }) => (\n    <Switch on={on} onClick={toggle} {...props} />\n  );\n\n  state = { on: false };\n\n  toggle = () =>\n    this.setState(\n      ({ on }) => ({ on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n\n  render() {\n    // Note: This MUST be React.Children.map because this.props.children.map\n    // will not work in React if only using one child\n    return React.Children.map(this.props.children, child =>\n      React.cloneElement(child, {\n        on: this.state.on,\n        toggle: this.toggle,\n      }),\n    );\n  }\n}\n`}</code></pre>\n    <p>{`Kent also has an equivalent example of this for Hooks on his `}<a parentName=\"p\" {...{\n        \"href\": \"https://kentcdodds.com/blog/compound-components-with-react-hooks\"\n      }}>{`blog post`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\n// this switch implements a checkbox input and is not relevant for this example\nimport { Switch } from '../switch';\nconst ToggleContext = React.createContext();\nfunction useEffectAfterMount(cb, dependencies) {\n  const justMounted = React.useRef(true);\n  React.useEffect(() => {\n    if (!justMounted.current) {\n      return cb();\n    }\n    justMounted.current = false;\n  }, dependencies);\n}\nfunction Toggle(props) {\n  const [on, setOn] = React.useState(false);\n  const toggle = React.useCallback(() => setOn(oldOn => !oldOn), []);\n  useEffectAfterMount(() => {\n    props.onToggle(on);\n  }, [on]);\n  const value = React.useMemo(() => ({ on, toggle }), [on]);\n  return (\n    <ToggleContext.Provider value={value}>\n      {props.children}\n    </ToggleContext.Provider>\n  );\n}\nfunction useToggleContext() {\n  const context = React.useContext(ToggleContext);\n  if (!context) {\n    throw new Error(\n      \\`Toggle compound components cannot be rendered outside the Toggle component\\`,\n    );\n  }\n  return context;\n}\nfunction On({ children }) {\n  const { on } = useToggleContext();\n  return on ? children : null;\n}\nfunction Off({ children }) {\n  const { on } = useToggleContext();\n  return on ? null : children;\n}\nfunction Button(props) {\n  const { on, toggle } = useToggleContext();\n  return <Switch on={on} onClick={toggle} {...props} />;\n}\n// for convenience, but totally not required...\nToggle.On = On;\nToggle.Off = Off;\nToggle.Button = Button;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"flexible-compound-components\"\n    }}>{`Flexible Compound Components`}</h2>\n    <p>{`To enable us to accept children that are not static properties of the class, we need to make some adjustments to the code from the section above (reminder: there are also some notes in the code above):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const ToggleContext = React.createContext({\n  on: false,\n  toggle: () => {},\n});\n\nclass Toggle extends React.Component {\n  static On = ({ children }) => (\n    <ToggleContext.Consumer>\n      {({ on }) => (on ? children : null)}\n    </ToggleContext.Consumer>\n  );\n  static Off = ({ children }) => (\n    <ToggleContext.Consumer>\n      {({ on }) => (on ? null : children)}\n    </ToggleContext.Consumer>\n  );\n  static Button = props => (\n    <ToggleContext.Consumer>\n      {({ on, toggle }) => <Switch on={on} onClick={toggle} {...props} />}\n    </ToggleContext.Consumer>\n  );\n  // 💰 The reason we had to move \\`toggle\\` above \\`state\\` is because\n  // in our \\`state\\` initialization we're _using_ \\`this.toggle\\`. So\n  // if \\`this.toggle\\` is not defined before state is initialized, then\n  // \\`state.toggle\\` will be undefined.\n  toggle = () =>\n    this.setState(\n      ({ on }) => ({ on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n  state = { on: false, toggle: this.toggle };\n  render() {\n    return (\n      <ToggleContext.Provider value={this.state}>\n        {this.props.children}\n      </ToggleContext.Provider>\n    );\n  }\n}\n`}</code></pre>\n    <p>{`This code makes use of the `}<inlineCode parentName=\"p\">{`consumer`}</inlineCode>{` API. There is also a blog by Kent talking about issues that deals with issues of multiple `}<inlineCode parentName=\"p\">{`<React.Consumer>`}</inlineCode>{` parents adding up. There is also a few composer libraries to help with this. You can see more `}<a parentName=\"p\" {...{\n        \"href\": \"https://kentcdodds.com/blog/reacts-new-context-api/\"\n      }}>{`on his blog`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"render-props-pattern\"\n    }}>{`Render Props Pattern`}</h2>\n    <p>{`When a method does use `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{`, then it is an indicator that it doesn't need to be on the class.`}</p>\n    <p>{`This enables us to edge closer to being a `}<inlineCode parentName=\"p\">{`pure`}</inlineCode>{` function.`}</p>\n    <p>{`This makes the rendering ownership on the \"user\" and not the component implementation.`}</p>\n    <p>{`The idea is to have a component say \"hey, I'll be in charge of state and you be in charge of rendering\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// only in charge of its own state\n// the \"parent user\" is in charge of\n// rendering\nclass Toggle extends React.Component {\n  state = { on: false };\n  toggle = () =>\n    this.setState(\n      ({ on }) => ({ on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n  getStateAndHelpers() {\n    return {\n      on: this.state.on,\n      toggle: this.toggle,\n    };\n  }\n  render() {\n    return this.props.children(this.getStateAndHelpers());\n  }\n}\n\nfunction Usage({ onToggle = (...args) => console.log('onToggle', ...args) }) {\n  return (\n    <Toggle onToggle={onToggle}>\n      {/* Rendering here is done inline */}\n      {({ on, toggle }) => (\n        <div>\n          {on ? 'The button is on' : 'The button is off'}\n          <Switch on={on} onClick={toggle} />\n          <hr />\n          <button aria-label=\"custom-button\" onClick={toggle}>\n            {on ? 'on' : 'off'}\n          </button>\n        </div>\n      )}\n    </Toggle>\n  );\n}\n`}</code></pre>\n    <p>{`If you don't like the verbosity of the render prop, you can always abstract is to another component.`}</p>\n    <p>{`The render prop method allows total flexibility of the UI but still keep the child in charge of the logic.`}</p>\n    <p>{`There is also a side topic brought up here called `}<inlineCode parentName=\"p\">{`Component Injection`}</inlineCode>{` that will use `}<inlineCode parentName=\"p\">{`React.createElement`}</inlineCode>{` with the children and and pass the props that will enable access to lifecycle methods.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Kent says he prefers `}<inlineCode parentName=\"p\">{`Render Prop`}</inlineCode>{` pattern over `}<inlineCode parentName=\"p\">{`Component Injection`}</inlineCode>{` because it is more powerful and the `}<inlineCode parentName=\"p\">{`createElement`}</inlineCode>{` creates another layer in the React tree. What really seals the deal as well the fact that going `}<inlineCode parentName=\"p\">{`props => <ToggleChild {...props}>`}</inlineCode>{` gives the same benefits of component injection.`}</p>\n    </blockquote>\n    <p>{`So when to use `}<inlineCode parentName=\"p\">{`Render Prop`}</inlineCode>{` vs `}<inlineCode parentName=\"p\">{`Compound Components`}</inlineCode>{`? With compound components, you don't see the state that is passed between `}<inlineCode parentName=\"p\">{`Toggle`}</inlineCode>{` and all of its children. All the state and handlers are implicit. If people don't care what those values are ie an accordion, there will be some state shared with the parent for which index is open and the implicit state of the child known if it is open.`}</p>\n    <p>{`The user of that \"component\" doesn't need to know which accordion is open per se. Adding that initial layer of complexity is unnecessary and is why `}<inlineCode parentName=\"p\">{`Compound Components`}</inlineCode>{` is preferred there.`}</p>\n    <p>{`The last question - is there a difference between passing children as a prop vs within the tags? They are functionally equivalent. Kent uses `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` over render because the context API uses that.`}</p>\n    <h2 {...{\n      \"id\": \"prop-getters\"\n    }}>{`Prop Getters`}</h2>\n    <p>{`What does `}<inlineCode parentName=\"p\">{`Prop Getters`}</inlineCode>{` solve? Imagine the following where we want to add an `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// un-oh, we could be overriding the togglerProps onClick func!\n<button\n  aria-label=\"custom-button\"\n  {...togglerProps}\n  onClick={() => console.log('Doing something')}\n>\n  {on ? 'on' : 'off'}\n</button>\n`}</code></pre>\n    <p>{`We now have the issue of accidentally overriding the `}<inlineCode parentName=\"p\">{`toggleProps onClick`}</inlineCode>{` (or vice versa if we switch the order!)`}</p>\n    <p>{`With prop getters, we can solve this problem:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// prop getters\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\n// this is important for the prop getter\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  state = { on: false };\n  toggle = () =>\n    this.setState(\n      ({ on }) => ({ on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    'aria-expanded': this.state.on,\n    onClick: callAll(onClick, this.toggle),\n    ...props,\n  });\n  getStateAndHelpers() {\n    return {\n      on: this.state.on,\n      toggle: this.toggle,\n      getTogglerProps: this.getTogglerProps,\n    };\n  }\n  render() {\n    return this.props.children(this.getStateAndHelpers());\n  }\n}\n\nfunction Usage({\n  onToggle = (...args) => console.log('onToggle', ...args),\n  onButtonClick = () => console.log('onButtonClick'),\n}) {\n  return (\n    <Toggle onToggle={onToggle}>\n      {({ on, getTogglerProps }) => (\n        <div>\n          <Switch {...getTogglerProps({ on })} />\n          <hr />\n          <button\n            {/* Note here we are spreading an object */}\n            {...getTogglerProps({\n              'aria-label': 'custom-button',\n              onClick: onButtonClick,\n              id: 'custom-button-id',\n            })}\n          >\n            {on ? 'on' : 'off'}\n          </button>\n        </div>\n      )}\n    </Toggle>\n  );\n}\nUsage.title = 'Prop Getters';\n\nexport { Toggle, Usage as default };\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"state-initializers\"\n    }}>{`State Initializers`}</h2>\n    <p>{`In general we want to be able to reset back to an initial state and start things up in an initial state. The idea is straight forward.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// State Initializers\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  // The setting of initial state\n  static defaultProps = {\n    initialOn: false,\n    onReset: () => {},\n  };\n  // This helps to communicate what we're trying to accomplish\n  initialState = { on: this.props.initialOn };\n  state = this.initialState;\n  // The important part for reset: this reset uses the initialState object\n  reset = () =>\n    this.setState(this.initialState, () => this.props.onReset(this.state.on));\n  toggle = () =>\n    this.setState(\n      ({ on }) => ({ on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    onClick: callAll(onClick, this.toggle),\n    'aria-expanded': this.state.on,\n    ...props,\n  });\n  getStateAndHelpers() {\n    return {\n      on: this.state.on,\n      toggle: this.toggle,\n      reset: this.reset,\n      getTogglerProps: this.getTogglerProps,\n    };\n  }\n  render() {\n    return this.props.children(this.getStateAndHelpers());\n  }\n}\n\nfunction Usage({\n  initialOn = false,\n  onToggle = (...args) => console.log('onToggle', ...args),\n  onReset = (...args) => console.log('onReset', ...args),\n}) {\n  return (\n    <Toggle initialOn={initialOn} onToggle={onToggle} onReset={onReset}>\n      {({ getTogglerProps, on, reset }) => (\n        <div>\n          <Switch {...getTogglerProps({ on })} />\n          <hr />\n          <button onClick={() => reset()}>Reset</button>\n        </div>\n      )}\n    </Toggle>\n  );\n}\nUsage.title = 'State Initializers';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"state-reducer\"\n    }}>{`State Reducer`}</h2>\n    <p>{`This is a common pattern in Reason React. This helps people to control how the state is managed.`}</p>\n    <p>{`You have to think more critically about how you component manages state as this now becomes an important part of the API. It breaks encapsulation, but allows a huge amount of user flexibility.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// state reducer\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  static defaultProps = {\n    initialOn: false,\n    onReset: () => {},\n    stateReducer: (state, changes) => changes,\n  };\n  initialState = { on: this.props.initialOn };\n  state = this.initialState;\n  // this is a helper to pass state up to parents\n  internalSetState(changes, callback) {\n    this.setState(state => {\n      // handle function setState call\n      const changesObject =\n        typeof changes === 'function' ? changes(state) : changes;\n\n      // apply state reducer\n      const reducedChanges =\n        this.props.stateReducer(state, changesObject) || {};\n\n      // return null if there are no changes to be made\n      // (to avoid an unecessary rerender)\n      return Object.keys(reducedChanges).length ? reducedChanges : null;\n    }, callback);\n  }\n  reset = () =>\n    this.internalSetState(this.initialState, () =>\n      this.props.onReset(this.state.on),\n    );\n  toggle = () =>\n    // now uses internalSetState updater\n    this.internalSetState(\n      ({ on }) => ({ on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    onClick: callAll(onClick, this.toggle),\n    'aria-expanded': this.state.on,\n    ...props,\n  });\n  getStateAndHelpers() {\n    return {\n      on: this.state.on,\n      toggle: this.toggle,\n      reset: this.reset,\n      getTogglerProps: this.getTogglerProps,\n    };\n  }\n  render() {\n    return this.props.children(this.getStateAndHelpers());\n  }\n}\n\nclass Usage extends React.Component {\n  static defaultProps = {\n    onToggle: (...args) => console.log('onToggle', ...args),\n    onReset: (...args) => console.log('onReset', ...args),\n  };\n  initialState = { timesClicked: 0 };\n  state = this.initialState;\n  handleToggle = (...args) => {\n    this.setState(({ timesClicked }) => ({\n      timesClicked: timesClicked + 1,\n    }));\n    this.props.onToggle(...args);\n  };\n  handleReset = (...args) => {\n    this.setState(this.initialState);\n    this.props.onReset(...args);\n  };\n  // This enables us to control the child state.\n  // Note that this breaks encapsulation.\n  toggleStateReducer = (state, changes) => {\n    if (this.state.timesClicked >= 4) {\n      return { ...changes, on: false };\n    }\n    return changes;\n  };\n  render() {\n    const { timesClicked } = this.state;\n    return (\n      <Toggle\n        stateReducer={this.toggleStateReducer}\n        onToggle={this.handleToggle}\n        onReset={this.handleReset}\n      >\n        {toggle => (\n          <div>\n            <Switch\n              {...toggle.getTogglerProps({\n                on: toggle.on,\n              })}\n            />\n            {timesClicked > 4 ? (\n              <div data-testid=\"notice\">\n                Whoa, you clicked too much!\n                <br />\n              </div>\n            ) : timesClicked > 0 ? (\n              <div data-testid=\"click-count\">Click count: {timesClicked}</div>\n            ) : null}\n            <button onClick={toggle.reset}>Reset</button>\n          </div>\n        )}\n      </Toggle>\n    );\n  }\n}\nUsage.title = 'State Reducers';\n\nexport { Toggle, Usage as default };\n`}</code></pre>\n    <p>{`An alternative suggested in the questions was to just rename `}<inlineCode parentName=\"p\">{`setInternalState`}</inlineCode>{` to still be `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` and just call the `}<inlineCode parentName=\"p\">{`super.setState`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Reset omitted for brevity, but this is a replacement\n// in the above code for \\`setInternalState\\`\n\n// this is a helper to pass state up to parents\nsetState(changes, callback) {\n super.setState(state => {\n   // handle function setState call\n   const changesObject =\n     typeof changes === 'function' ? changes(state) : changes;\n\n   // apply state reducer\n   const reducedChanges =\n     this.props.stateReducer(state, changesObject) || {};\n\n   // return null if there are no changes to be made\n   // (to avoid an unecessary rerender)\n   return Object.keys(reducedChanges).length ? reducedChanges : null;\n }, callback);\n}\n`}</code></pre>\n    <p>{`Kent does suggest that is could be confusing to see `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` and have it not operate as expected.`}</p>\n    <p>{`Another alternative Kent suggest is to enable it to become a map:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// this is a helper to pass state up to parents\ninternalSetState(changes, callback) {\n this.setState(state => {\n   return [changes]\n   // handle function setState call\n   .map(c => typeof c === 'function' ? c(state) : c)\n   // apply state reducer\n   .map(c => this.props.stateReducer(state, c) || {})\n   // return null if there are no changes to be made\n   // (to avoid an unecessary rerender)\n  .map(c => Object.keys(c).length ? c : null)[0];\n }, callback);\n}\n`}</code></pre>\n    <p>{`We can then also empower the parent to force toggles:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// This will enable the parent to control an\n// ability to force changes\ntoggleStateReducer = (state, changes) => {\n  if (changes.type === 'forced') {\n    return changes;\n  }\n  if (this.state.timesClicked >= 4) {\n    return { ...changes, on: false };\n  }\n  return changes;\n};\n`}</code></pre>\n    <p>{`This is the full example of a state reducer with types that can brute force from the parent:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// state reducer with types\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  static defaultProps = {\n    initialOn: false,\n    onReset: () => {},\n    stateReducer: (state, changes) => changes,\n  };\n  // 💰 any time I use a string as an identifier for a type,\n  // I prefer to give it a variable name. That way folks who\n  // want to reference the type can do so using variable which\n  // will help mitigate the problems of indirection.\n  static stateChangeTypes = {\n    reset: '__toggle_reset__',\n    toggle: '__toggle_toggle__',\n  };\n  initialState = { on: this.props.initialOn };\n  state = this.initialState;\n  internalSetState(changes, callback) {\n    this.setState(state => {\n      // handle function setState call\n      const changesObject =\n        typeof changes === 'function' ? changes(state) : changes;\n\n      // apply state reducer\n      const reducedChanges =\n        this.props.stateReducer(state, changesObject) || {};\n\n      // remove the type so it's not set into state\n      const { type: ignoredType, ...onlyChanges } = reducedChanges;\n\n      // return null if there are no changes to be made\n      return Object.keys(onlyChanges).length ? onlyChanges : null;\n    }, callback);\n  }\n\n  reset = () =>\n    this.internalSetState(\n      { ...this.initialState, type: Toggle.stateChangeTypes.reset },\n      () => this.props.onReset(this.state.on),\n    );\n  toggle = ({ type = Toggle.stateChangeTypes.toggle } = {}) =>\n    this.internalSetState(\n      ({ on }) => ({ type, on: !on }),\n      () => this.props.onToggle(this.state.on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    onClick: callAll(onClick, () => this.toggle()),\n    'aria-expanded': this.state.on,\n    ...props,\n  });\n  getStateAndHelpers() {\n    return {\n      on: this.state.on,\n      toggle: this.toggle,\n      reset: this.reset,\n      getTogglerProps: this.getTogglerProps,\n    };\n  }\n  render() {\n    return this.props.children(this.getStateAndHelpers());\n  }\n}\n\nclass Usage extends React.Component {\n  static defaultProps = {\n    onToggle: (...args) => console.log('onToggle', ...args),\n    onReset: (...args) => console.log('onReset', ...args),\n  };\n  initialState = { timesClicked: 0 };\n  state = this.initialState;\n  handleToggle = (...args) => {\n    this.setState(({ timesClicked }) => ({\n      timesClicked: timesClicked + 1,\n    }));\n    this.props.onToggle(...args);\n  };\n  handleReset = (...args) => {\n    this.setState(this.initialState);\n    this.props.onReset(...args);\n  };\n  toggleStateReducer = (state, changes) => {\n    if (changes.type === 'forced') {\n      return changes;\n    }\n    if (this.state.timesClicked >= 4) {\n      return { ...changes, on: false };\n    }\n    return changes;\n  };\n  render() {\n    const { timesClicked } = this.state;\n    return (\n      <Toggle\n        stateReducer={this.toggleStateReducer}\n        onToggle={this.handleToggle}\n        onReset={this.handleReset}\n        ref={this.props.toggleRef}\n      >\n        {({ on, toggle, reset, getTogglerProps }) => (\n          <div>\n            <Switch\n              {...getTogglerProps({\n                on: on,\n              })}\n            />\n            {timesClicked > 4 ? (\n              <div data-testid=\"notice\">\n                Whoa, you clicked too much!\n                <br />\n                <button onClick={() => toggle({ type: 'forced' })}>\n                  Force Toggle\n                </button>\n                <br />\n              </div>\n            ) : timesClicked > 0 ? (\n              <div data-testid=\"click-count\">Click count: {timesClicked}</div>\n            ) : null}\n            <button onClick={reset}>Reset</button>\n          </div>\n        )}\n      </Toggle>\n    );\n  }\n}\nUsage.title = 'State Reducers (with change types)';\n\nexport { Toggle, Usage as default };\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"control-props-primer\"\n    }}>{`Control Props Primer`}</h2>\n    <p>{`Here we are trying to get two completely different components to synchronous their state.`}</p>\n    <p>{`The general idea is that the parent can control when to set things on for the children (here the children being two Switches).`}</p>\n    <p>{`This pattern is the same that is used for controlled form components. Think of the parent form controlling what shows in a child input.`}</p>\n    <p>{`The idea is that a child will pass the local state change up, then child components will be rerendered by the change in the parent.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// control props primer\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\nclass Toggle extends React.Component {\n  state = { on: false };\n  // this is important to determine if the component is controlled\n  isOnControlled() {\n    return this.props.on !== undefined;\n  }\n  getState() {\n    return {\n      on: this.isOnControlled() ? this.props.on : this.state.on,\n    };\n  }\n  toggle = () => {\n    if (this.isOnControlled()) {\n      this.props.onToggle(!this.getState().on);\n    } else {\n      this.setState(\n        ({ on }) => ({ on: !on }),\n        () => {\n          this.props.onToggle(this.getState().on);\n        },\n      );\n    }\n  };\n  render() {\n    const { on } = this.getState();\n    return <Switch on={on} onClick={this.toggle} />;\n  }\n}\n\nclass Usage extends React.Component {\n  state = { bothOn: false };\n  handleToggle = on => {\n    this.setState({ bothOn: on });\n  };\n  render() {\n    const { bothOn } = this.state;\n    const { toggle1Ref, toggle2Ref } = this.props;\n    return (\n      <div>\n        <Toggle on={bothOn} onToggle={this.handleToggle} ref={toggle1Ref} />\n        <Toggle on={bothOn} onToggle={this.handleToggle} ref={toggle2Ref} />\n      </div>\n    );\n  }\n}\nUsage.title = 'Control Props (primer)';\n\nexport { Toggle, Usage as default };\n`}</code></pre>\n    <p>{`A question about \"why not use `}<inlineCode parentName=\"p\">{`componentWillReceiveProps`}</inlineCode>{` or an non-deprecated equivalent?\" - the main reason is to prevent having two sources of truth.`}</p>\n    <h2 {...{\n      \"id\": \"control-props\"\n    }}>{`Control Props`}</h2>\n    <p>{`Using this now with a state reducer. You can use this without one, but a state reducer is an easier way to help with control props. Having them together gives users more choice on how they want to use their component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Control Props + with a state reducer\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  // Now that a user can use this component effectively without\n  // an \\`onToggle\\` prop (they can use \\`onStateChange\\` instead)\n  // 🐨 let's provide a default for \\`onToggle\\` and \\`onStateChange\\`\n  static defaultProps = {\n    initialOn: false,\n    onReset: () => {},\n    onToggle: () => {},\n    onStateChange: () => {},\n    stateReducer: (state, changes) => changes,\n  };\n  static stateChangeTypes = {\n    reset: '__toggle_reset__',\n    toggle: '__toggle_toggle__',\n  };\n  initialState = { on: this.props.initialOn };\n  state = this.initialState;\n\n  // 🐨 let's add an \\`isControlled\\` method that accepts a state key\n  // (string) and returns true if the prop is controlled\n  // 💰 this.props[prop] !== undefined\n  isControlled(prop) {\n    return this.props[prop] !== undefined;\n  }\n\n  // 🐨 We'll also need a \\`getState\\` method here that returns a\n  // state object that has state from both internal state (\\`this.state\\`)\n  // as well as external state (\\`this.props\\`).\n  getState(state = this.state) {\n    return Object.entries(state).reduce((combinedState, [key, value]) => {\n      if (this.isControlled(key)) {\n        combinedState[key] = this.props[key];\n      } else {\n        combinedState[key] = value;\n      }\n      return combinedState;\n    }, {});\n  }\n\n  // 💰 You might consider accepting state as an argument that defaults\n  // to \\`this.state\\`... You'll use that later on...\n  internalSetState(changes, callback = () => {}) {\n    let allChanges;\n    this.setState(\n      state => {\n        // Now that our state can actually come from two sources,\n        // the \\`state\\` we receive from this function is actually only one\n        // side of the story.\n        // 🐨 Call your \\`this.getState\\` function with \\`state\\` so we can\n        // get a \\`combinedState\\` object which we'll use to perform our\n        // operations on here.\n        const combinedState = this.getState(state);\n        // handle function setState call\n        const changesObject =\n          typeof changes === 'function' ? changes(combinedState) : changes;\n\n        // apply state reducer\n        allChanges =\n          this.props.stateReducer(combinedState, changesObject) || {};\n\n        // remove the type so it's not set into state\n        const { type: ignoredType, ...onlyChanges } = allChanges;\n\n        const nonControlledChanges = Object.keys(combinedState).reduce(\n          (newChanges, stateKey) => {\n            if (!this.isControlled(stateKey)) {\n              newChanges[stateKey] = onlyChanges.hasOwnProperty(stateKey)\n                ? onlyChanges[stateKey]\n                : combinedState[stateKey];\n            }\n            return newChanges;\n          },\n          {},\n        );\n\n        // return null if there are no changes to be made\n        return Object.keys(nonControlledChanges || {}).length\n          ? nonControlledChanges\n          : null;\n      },\n      () => {\n        // call onStateChange with all the changes (including the type)\n        this.props.onStateChange(allChanges, this.getStateAndHelpers());\n        callback();\n      },\n    );\n  }\n  reset = () =>\n    this.internalSetState(\n      { ...this.initialState, type: Toggle.stateChangeTypes.reset },\n      () => this.props.onReset(this.getState().on),\n    );\n  toggle = ({ type = Toggle.stateChangeTypes.toggle } = {}) =>\n    this.internalSetState(\n      ({ on }) => ({ type, on: !on }),\n      () => this.props.onToggle(this.getState().on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    onClick: callAll(onClick, () => this.toggle()),\n    'aria-expanded': this.getState().on,\n    ...props,\n  });\n  getStateAndHelpers() {\n    return {\n      ...this.getState(),\n      toggle: this.toggle,\n      reset: this.reset,\n      getTogglerProps: this.getTogglerProps,\n    };\n  }\n  render() {\n    return this.props.children(this.getStateAndHelpers());\n  }\n}\n\nclass Usage extends React.Component {\n  static defaultProps = {\n    onToggle: (...args) => console.log('onToggle', ...args),\n    onReset: (...args) => console.log('onReset', ...args),\n  };\n  initialState = { timesClicked: 0, toggleOn: false };\n  state = this.initialState;\n  handleStateChange = changes => {\n    if (changes.type === 'forced') {\n      this.setState({ toggleOn: changes.on }, () =>\n        this.props.onToggle(this.state.toggleOn),\n      );\n    } else if (changes.type === Toggle.stateChangeTypes.reset) {\n      this.setState(this.initialState, () => {\n        this.props.onReset(this.state.toggleOn);\n      });\n    } else if (changes.type === Toggle.stateChangeTypes.toggle) {\n      this.setState(\n        ({ timesClicked }) => ({\n          timesClicked: timesClicked + 1,\n          toggleOn: timesClicked >= 4 ? false : changes.on,\n        }),\n        () => {\n          this.props.onToggle(this.state.toggleOn);\n        },\n      );\n    }\n  };\n  render() {\n    const { timesClicked, toggleOn } = this.state;\n    return (\n      <Toggle\n        on={toggleOn}\n        onStateChange={this.handleStateChange}\n        ref={this.props.toggleRef}\n      >\n        {({ on, toggle, reset, getTogglerProps }) => (\n          <div>\n            <Switch\n              {...getTogglerProps({\n                on: on,\n              })}\n            />\n            {timesClicked > 4 ? (\n              <div data-testid=\"notice\">\n                Whoa, you clicked too much!\n                <br />\n                <button onClick={() => toggle({ type: 'forced' })}>\n                  Force Toggle\n                </button>\n                <br />\n              </div>\n            ) : timesClicked > 0 ? (\n              <div data-testid=\"click-count\">Click count: {timesClicked}</div>\n            ) : null}\n            <button onClick={reset}>Reset</button>\n          </div>\n        )}\n      </Toggle>\n    );\n  }\n}\nUsage.title = 'Control Props with State Reducers';\n\nexport { Toggle, Usage as default };\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"provider-pattern\"\n    }}>{`Provider Pattern`}</h2>\n    <p>{`This pattern enables us to provide state without prop drilling.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Provider Pattern\n\nimport React from 'react';\nimport { Switch } from '../switch';\n\nconst ToggleContext = React.createContext({\n  on: false,\n  toggle: () => {},\n  reset: () => {},\n  getTogglerProps: () => ({}),\n});\n\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  static defaultProps = {\n    initialOn: false,\n    onReset: () => {},\n    onToggle: () => {},\n    onStateChange: () => {},\n    stateReducer: (state, changes) => changes,\n  };\n  static stateChangeTypes = {\n    reset: '__toggle_reset__',\n    toggle: '__toggle_toggle__',\n  };\n  static Consumer = ToggleContext.Consumer;\n\n  reset = () =>\n    this.internalSetState(\n      { ...this.initialState, type: Toggle.stateChangeTypes.reset },\n      () => this.props.onReset(this.getState().on),\n    );\n  toggle = ({ type = Toggle.stateChangeTypes.toggle } = {}) =>\n    this.internalSetState(\n      ({ on }) => ({ type, on: !on }),\n      () => this.props.onToggle(this.getState().on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    onClick: callAll(onClick, () => this.toggle()),\n    'aria-expanded': this.getState().on,\n    ...props,\n  });\n  initialState = {\n    on: this.props.initialOn,\n    toggle: this.toggle,\n    reset: this.reset,\n    getTogglerProps: this.getTogglerProps,\n  };\n  state = this.initialState;\n  isControlled(prop) {\n    return this.props[prop] !== undefined;\n  }\n  getState(state = this.state) {\n    return Object.entries(state).reduce((combinedState, [key, value]) => {\n      if (this.isControlled(key)) {\n        combinedState[key] = this.props[key];\n      } else {\n        combinedState[key] = value;\n      }\n      return combinedState;\n    }, {});\n  }\n  internalSetState(changes, callback = () => {}) {\n    let allChanges;\n    this.setState(\n      state => {\n        const combinedState = this.getState(state);\n        // handle function setState call\n        const changesObject =\n          typeof changes === 'function' ? changes(combinedState) : changes;\n\n        // apply state reducer\n        allChanges =\n          this.props.stateReducer(combinedState, changesObject) || {};\n\n        // remove the type so it's not set into state\n        const { type: ignoredType, ...onlyChanges } = allChanges;\n\n        const nonControlledChanges = Object.keys(combinedState).reduce(\n          (newChanges, stateKey) => {\n            if (!this.isControlled(stateKey)) {\n              newChanges[stateKey] = onlyChanges.hasOwnProperty(stateKey)\n                ? onlyChanges[stateKey]\n                : combinedState[stateKey];\n            }\n            return newChanges;\n          },\n          {},\n        );\n\n        // return null if there are no changes to be made\n        return Object.keys(nonControlledChanges || {}).length\n          ? nonControlledChanges\n          : null;\n      },\n      () => {\n        // call onStateChange with all the changes (including the type)\n        this.props.onStateChange(allChanges, this.state);\n        callback();\n      },\n    );\n  }\n  render() {\n    // here's all you need to do for your solution\n    // return (\n    //   <ToggleContext.Provider value={this.state}>\n    //     {this.props.children}\n    //   </ToggleContext.Provider>\n    // )\n    // here's the bonus material solution that preserves the old API:\n    const { children } = this.props;\n    const ui = typeof children === 'function' ? children(this.state) : children;\n    return (\n      <ToggleContext.Provider value={this.state}>{ui}</ToggleContext.Provider>\n    );\n  }\n}\n\nfunction Nav() {\n  return (\n    <Toggle.Consumer>\n      {toggle => (\n        <nav>\n          <ul>\n            <li>\n              <a href=\"index.html\">{toggle.on ? '🏡' : 'Home'}</a>\n            </li>\n            <li>\n              <a href=\"/about/\">{toggle.on ? '❓' : 'About'}</a>\n            </li>\n            <li>\n              <a href=\"/blog/\">{toggle.on ? '📖' : 'Blog'}</a>\n            </li>\n          </ul>\n        </nav>\n      )}\n    </Toggle.Consumer>\n  );\n}\n\nfunction NavSwitch() {\n  return (\n    <div className=\"nav-switch\">\n      <div>\n        <Toggle.Consumer>\n          {toggle => (toggle.on ? '🦄' : 'Enable Emoji')}\n        </Toggle.Consumer>\n      </div>\n      <Toggle.Consumer>\n        {toggle => (\n          <Switch\n            {...toggle.getTogglerProps({\n              on: toggle.on,\n            })}\n          />\n        )}\n      </Toggle.Consumer>\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <Nav />\n      <NavSwitch />\n    </div>\n  );\n}\n\nfunction Subtitle() {\n  return (\n    <Toggle.Consumer>\n      {toggle => (toggle.on ? '👩‍🏫 👉 🕶' : 'Teachers are awesome')}\n    </Toggle.Consumer>\n  );\n}\n\nfunction Title() {\n  return (\n    <div>\n      <h1>\n        <Toggle.Consumer>\n          {toggle => \\`Who is \\${toggle.on ? '🕶❓' : 'awesome?'}\\`}\n        </Toggle.Consumer>\n      </h1>\n      <Subtitle />\n    </div>\n  );\n}\n\nfunction Article() {\n  return (\n    <div>\n      <Toggle.Consumer>\n        {toggle =>\n          [\n            'Once, I was in',\n            toggle.on ? '🏫‍' : 'school',\n            'when I',\n            toggle.on ? '🤔' : 'realized',\n            'something...',\n          ].join(' ')\n        }\n      </Toggle.Consumer>\n      <hr />\n      <Toggle.Consumer>\n        {toggle =>\n          [\n            'Without',\n            toggle.on ? '👩‍🏫' : 'teachers',\n            \\`I wouldn't know anything so\\`,\n            toggle.on ? '🙏' : 'thanks',\n            toggle.on ? '👩‍🏫❗️' : 'teachers!',\n          ].join(' ')\n        }\n      </Toggle.Consumer>\n    </div>\n  );\n}\n\nfunction Post() {\n  return (\n    <div>\n      <Title />\n      <Article />\n    </div>\n  );\n}\n\nfunction Usage() {\n  return (\n    <Toggle>\n      <div className=\"friends\">\n        <Header />\n        <Post />\n      </div>\n    </Toggle>\n  );\n}\nUsage.title = 'Provider Pattern';\n\nexport { Toggle, Usage as default };\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"higher-order-components\"\n    }}>{`Higher Order Components`}</h2>\n    <p>{`Getting sick of `}<inlineCode parentName=\"p\">{`<Toggle.Consumer>`}</inlineCode>{` is an example where HOCs can come in handy.`}</p>\n    <p>{`HOCs give you back a component, while `}<inlineCode parentName=\"p\">{`Render Props`}</inlineCode>{` gives you more flexibility. This example uses a HOC over a Render Prop component. Kent says he cannot think of an example of using a HOC without Render Prop.`}</p>\n    <p>{`This example uses the `}<inlineCode parentName=\"p\">{`hoist-non-react-statics`}</inlineCode>{` library that you can see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mridgway/hoist-non-react-statics\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`We also want to make sure that we are forwarding on the refs so the HOC is unobservable to users.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Higher Order Components\n\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { Switch } from '../switch';\n\nconst ToggleContext = React.createContext({\n  on: false,\n  toggle: () => {},\n  reset: () => {},\n  getTogglerProps: () => ({}),\n});\n\nconst callAll = (...fns) => (...args) => fns.forEach(fn => fn && fn(...args));\n\nclass Toggle extends React.Component {\n  static defaultProps = {\n    initialOn: false,\n    onReset: () => {},\n    onToggle: () => {},\n    onStateChange: () => {},\n    stateReducer: (state, changes) => changes,\n  };\n  static stateChangeTypes = {\n    reset: '__toggle_reset__',\n    toggle: '__toggle_toggle__',\n  };\n  static Consumer = ToggleContext.Consumer;\n\n  reset = () =>\n    this.internalSetState(\n      { ...this.initialState, type: Toggle.stateChangeTypes.reset },\n      () => this.props.onReset(this.getState().on),\n    );\n  toggle = ({ type = Toggle.stateChangeTypes.toggle } = {}) =>\n    this.internalSetState(\n      ({ on }) => ({ type, on: !on }),\n      () => this.props.onToggle(this.getState().on),\n    );\n  getTogglerProps = ({ onClick, ...props } = {}) => ({\n    onClick: callAll(onClick, () => this.toggle()),\n    'aria-expanded': this.getState().on,\n    ...props,\n  });\n  initialState = {\n    on: this.props.initialOn,\n    toggle: this.toggle,\n    reset: this.reset,\n    getTogglerProps: this.getTogglerProps,\n  };\n  state = this.initialState;\n  isControlled(prop) {\n    return this.props[prop] !== undefined;\n  }\n  getState(state = this.state) {\n    return Object.entries(state).reduce((combinedState, [key, value]) => {\n      if (this.isControlled(key)) {\n        combinedState[key] = this.props[key];\n      } else {\n        combinedState[key] = value;\n      }\n      return combinedState;\n    }, {});\n  }\n  internalSetState(changes, callback = () => {}) {\n    let allChanges;\n    this.setState(\n      state => {\n        const combinedState = this.getState(state);\n        // handle function setState call\n        const changesObject =\n          typeof changes === 'function' ? changes(combinedState) : changes;\n\n        // apply state reducer\n        allChanges =\n          this.props.stateReducer(combinedState, changesObject) || {};\n\n        // remove the type so it's not set into state\n        const { type: ignoredType, ...onlyChanges } = allChanges;\n\n        const nonControlledChanges = Object.keys(combinedState).reduce(\n          (newChanges, stateKey) => {\n            if (!this.isControlled(stateKey)) {\n              newChanges[stateKey] = onlyChanges.hasOwnProperty(stateKey)\n                ? onlyChanges[stateKey]\n                : combinedState[stateKey];\n            }\n            return newChanges;\n          },\n          {},\n        );\n\n        // return null if there are no changes to be made\n        return Object.keys(nonControlledChanges || {}).length\n          ? nonControlledChanges\n          : null;\n      },\n      () => {\n        // call onStateChange with all the changes (including the type)\n        this.props.onStateChange(allChanges, this.state);\n        callback();\n      },\n    );\n  }\n  render() {\n    const { children } = this.props;\n    const ui = typeof children === 'function' ? children(this.state) : children;\n    return (\n      <ToggleContext.Provider value={this.state}>{ui}</ToggleContext.Provider>\n    );\n  }\n}\n\nfunction withToggle(Component) {\n  function Wrapper(props, ref) {\n    return (\n      <Toggle.Consumer>\n        {toggleContext => (\n          <Component {...props} toggle={toggleContext} ref={ref} />\n        )}\n      </Toggle.Consumer>\n    );\n  }\n  Wrapper.displayName = \\`withToggle(\\${Component.displayName ||\n    Component.name})\\`;\n  return hoistNonReactStatics(React.forwardRef(Wrapper), Component);\n}\n\n// this Subtitle component could be as simple as:\n// const Subtitle = withToggle(({toggle: {on}}) => (\n//   <span>{on ? '👩‍🏫 👉 🕶' : 'Teachers are awesome'}</span>\n// ))\n// But for the purposes of this workshop, we've made it a little more complex\n// just to ensure you're HOC handles common issues with HOCs\nconst Subtitle = withToggle(\n  class extends React.Component {\n    static displayName = 'Subtitle';\n    static emoji = '👩‍🏫 👉 🕶';\n    static text = 'Teachers are awesome';\n    instanceProperty = true;\n    render() {\n      return (\n        <span>{this.props.toggle.on ? Subtitle.emoji : Subtitle.text}</span>\n      );\n    }\n  },\n);\n\nfunction Nav() {\n  return (\n    <Toggle.Consumer>\n      {toggle => (\n        <nav>\n          <ul>\n            <li>\n              <a href=\"index.html\">{toggle.on ? '🏡' : 'Home'}</a>\n            </li>\n            <li>\n              <a href=\"/about/\">{toggle.on ? '❓' : 'About'}</a>\n            </li>\n            <li>\n              <a href=\"/blog/\">{toggle.on ? '📖' : 'Blog'}</a>\n            </li>\n          </ul>\n        </nav>\n      )}\n    </Toggle.Consumer>\n  );\n}\n\nfunction NavSwitch() {\n  return (\n    <div className=\"nav-switch\">\n      <div>\n        <Toggle.Consumer>\n          {toggle => (toggle.on ? '🦄' : 'Enable Emoji')}\n        </Toggle.Consumer>\n      </div>\n      <Toggle.Consumer>\n        {toggle => (\n          <Switch\n            {...toggle.getTogglerProps({\n              on: toggle.on,\n            })}\n          />\n        )}\n      </Toggle.Consumer>\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <Nav />\n      <NavSwitch />\n    </div>\n  );\n}\n\n// This is part of our contrived example so we can test things properly\n// to make sure your HOC handles common issues\nexport class Debug extends React.Component {\n  childInstance = React.createRef();\n  render() {\n    return React.cloneElement(this.props.children, {\n      ref: this.childInstance,\n    });\n  }\n}\n\nfunction Title() {\n  return (\n    <div>\n      <h1>\n        <Toggle.Consumer>\n          {toggle => \\`Who is \\${toggle.on ? '🕶❓' : 'awesome?'}\\`}\n        </Toggle.Consumer>\n      </h1>\n      <Debug child=\"subtitle\">\n        <Subtitle />\n      </Debug>\n    </div>\n  );\n}\n\nfunction Article() {\n  return (\n    <div>\n      <Toggle.Consumer>\n        {toggle =>\n          [\n            'Once, I was in',\n            toggle.on ? '🏫‍' : 'school',\n            'when I',\n            toggle.on ? '🤔' : 'realized',\n            'something...',\n          ].join(' ')\n        }\n      </Toggle.Consumer>\n      <hr />\n      <Toggle.Consumer>\n        {toggle =>\n          [\n            'Without',\n            toggle.on ? '👩‍🏫' : 'teachers',\n            \\`I wouldn't know anything so\\`,\n            toggle.on ? '🙏' : 'thanks',\n            toggle.on ? '👩‍🏫❗️' : 'teachers!',\n          ].join(' ')\n        }\n      </Toggle.Consumer>\n    </div>\n  );\n}\n\nfunction Post() {\n  return (\n    <div>\n      <Title />\n      <Article />\n    </div>\n  );\n}\n\nfunction Usage() {\n  return (\n    <Toggle>\n      <div className=\"friends\">\n        <Header />\n        <Post />\n      </div>\n    </Toggle>\n  );\n}\nUsage.title = 'Higher Order Components';\n\nexport { Toggle, Usage as default };\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rendex\"\n    }}>{`Rendex`}</h2>\n    <p>{`Rendex is a bonus where we use both React's context API and Redux together.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Rendux\n\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as redux from 'redux';\nimport { Switch } from '../switch';\n\nconst RenduxContext = React.createContext({});\n\nclass Rendux extends React.Component {\n  static Consumer = RenduxContext.Consumer;\n  static defaultProps = {\n    initialState: {},\n    reducer: state => state,\n  };\n  initialReduxState = this.props.initialState;\n  rootReducer = (state, action) => {\n    if (action.type === '__RENDUX_RESET__') {\n      return this.initialReduxState;\n    }\n    return this.props.reducer(state, action);\n  };\n  store = redux.createStore(this.rootReducer, this.initialReduxState);\n  reset = () => {\n    this.store.dispatch({\n      type: '__RENDUX_RESET__',\n    });\n  };\n  componentDidMount() {\n    this.unsubscribe = this.store.subscribe(() =>\n      this.setState({\n        state: this.store.getState(),\n      }),\n    );\n  }\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n  initialState = {\n    state: this.props.initialState,\n    dispatch: this.store.dispatch,\n    reset: this.reset,\n  };\n  state = this.initialState;\n  render() {\n    const { children } = this.props;\n    const ui = typeof children === 'function' ? children(this.state) : children;\n    return (\n      <RenduxContext.Provider value={this.state}>{ui}</RenduxContext.Provider>\n    );\n  }\n}\n\nfunction withRendux(Component) {\n  class Wrapper extends React.Component {\n    render() {\n      const { forwardedRef, ...rest } = this.props;\n      return (\n        <Rendux.Consumer>\n          {rendux => <Component {...rest} rendux={rendux} ref={forwardedRef} />}\n        </Rendux.Consumer>\n      );\n    }\n  }\n  Wrapper.displayName = \\`withRendux(\\${Component.displayName ||\n    Component.name})\\`;\n  const forwardRef = React.forwardRef((props, ref) => (\n    <Wrapper {...props} forwardedRef={ref} />\n  ));\n  return hoistNonReactStatics(forwardRef, Component);\n}\n\nfunction MyInput() {\n  return (\n    <Rendux.Consumer>\n      {rendux => (\n        <input\n          value={rendux.state.inputValue || (rendux.state.on ? 'on' : 'off')}\n          placeholder=\"Type 'off' or 'on'\"\n          onChange={event => {\n            if (event.target.value === 'on') {\n              rendux.dispatch({\n                type: 'toggle',\n                value: true,\n              });\n            } else if (event.target.value === 'off') {\n              rendux.dispatch({\n                type: 'toggle',\n                value: false,\n              });\n            }\n            rendux.dispatch({\n              type: 'input_change',\n              value: event.target.value,\n            });\n          }}\n          onBlur={event => {\n            const { value } = event.target;\n            if (value !== 'on' && value !== 'off') {\n              rendux.dispatch({\n                type: 'input_change',\n                value: rendux.state.on ? 'on' : 'off',\n              });\n            }\n          }}\n        />\n      )}\n    </Rendux.Consumer>\n  );\n}\n\nfunction MySwitch() {\n  return (\n    <Rendux.Consumer>\n      {rendux => (\n        <div\n          style={{\n            marginTop: 20,\n            marginBottom: 20,\n          }}\n        >\n          <Switch\n            on={rendux.state.on}\n            onClick={() => {\n              rendux.dispatch({\n                type: 'toggle',\n                value: !rendux.state.on,\n              });\n\n              if (rendux.state.inputValue) {\n                rendux.dispatch({\n                  type: 'input_change',\n                  value: !rendux.state.on ? 'on' : 'off',\n                });\n              }\n            }}\n          />\n        </div>\n      )}\n    </Rendux.Consumer>\n  );\n}\n\nconst StatePrinter = withRendux(function StatePrinter({ rendux }) {\n  return (\n    <div style={{ textAlign: 'left' }}>\n      state:\n      <pre data-testid=\"printed-state\">\n        {JSON.stringify(rendux.state, null, 2)}\n      </pre>\n    </div>\n  );\n});\n\nfunction Usage() {\n  return (\n    <Rendux\n      initialState={{ on: true }}\n      reducer={(state, action) => {\n        switch (action.type) {\n          case 'toggle':\n            return {\n              ...state,\n              on: action.value,\n            };\n          case 'input_change':\n            return {\n              ...state,\n              inputValue: action.value,\n            };\n          default:\n            return state;\n        }\n      }}\n    >\n      {({ reset }) => (\n        <React.Fragment>\n          <MyInput />\n          <MySwitch />\n          <button onClick={reset}>reset</button>\n          <StatePrinter />\n        </React.Fragment>\n      )}\n    </Rendux>\n  );\n}\nUsage.title = 'Bonus: Rendux';\n\nexport { Rendux, Usage, Usage as default };\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}