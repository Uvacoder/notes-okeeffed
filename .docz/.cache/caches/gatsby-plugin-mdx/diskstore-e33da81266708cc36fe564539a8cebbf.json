{"expireTime":9007200849425548000,"key":"gatsby-plugin-mdx-entire-payload-385a62ee26127d4cb75a9a75b8329fc1-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"RxJS","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":7,"offset":173},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":7,"offset":173},"indent":[]}},{"type":"jsx","value":"<!-- TOC -->autoauto- [RxJS](#rxjs)auto    - [1.0 A Brief Recap of Programming Paradigms](#10-a-brief-recap-of-programming-paradigms)auto        - [Procedural Program](#procedural-program)auto        - [Object Oriented](#object-oriented)auto        - [Declarative](#declarative)auto    - [1.1: Core Reactive Concepts](#11-core-reactive-concepts)auto    - [1.2: Comparing the Autocomplete function using JS vs RxJS](#12-comparing-the-autocomplete-function-using-js-vs-rxjs)auto    - [3: The Core of Reactive Extensions](#3-the-core-of-reactive-extensions)auto    - [3.1: Obervables, Operators and Subscriptions](#31-obervables-operators-and-subscriptions)auto    - [3.2 Creating Observables](#32-creating-observables)auto    - [3.3: Built in Observables](#33-built-in-observables)auto    - [3.4: Using RxJS with Node, jQuery and Promises](#34-using-rxjs-with-node-jquery-and-promises)auto    - [3.5: Subjects](#35-subjects)auto    - [3.6: RxJS Resources and Documentation](#36-rxjs-resources-and-documentation)auto    - [3.7: Sharing Observable Sequences](#37-sharing-observable-sequences)auto    - [4.0: Operators that everyone should know](#40-operators-that-everyone-should-know)auto    - [4.1: Do / Finally / StartWith / Filter](#41-do--finally--startwith--filter)auto    - [4.2: Merge / Concat](#42-merge--concat)auto    - [4.3: Map / MergeMap / SwitchMap](#43-map--mergemap--switchmap)auto    - [4.4: Reduce / Scan](#44-reduce--scan)auto    - [4.5: Buffer / ToArray](#45-buffer--toarray)auto    - [4.6: First / Last / Single / Skip / Take](#46-first--last--single--skip--take)auto    - [4.7: Zip / WithLatestFrom / CombineLatest](#47-zip--withlatestfrom--combinelatest)auto    - [4.8: Error Handling Catch and Retry](#48-error-handling-catch-and-retry)autoauto<!-- /TOC -->","position":{"start":{"line":10,"column":1,"offset":175},"end":{"line":10,"column":1779,"offset":1953},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"1.0 A Brief Recap of Programming Paradigms","position":{"start":{"line":12,"column":4,"offset":1958},"end":{"line":12,"column":46,"offset":2000},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1955},"end":{"line":12,"column":46,"offset":2000},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Procedural Program","position":{"start":{"line":14,"column":5,"offset":2006},"end":{"line":14,"column":23,"offset":2024},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":2002},"end":{"line":14,"column":23,"offset":2024},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The ideas that programs are a sense of functions","position":{"start":{"line":16,"column":3,"offset":2028},"end":{"line":16,"column":51,"offset":2076},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":2028},"end":{"line":16,"column":51,"offset":2076},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":2026},"end":{"line":16,"column":51,"offset":2076},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Goes from top to bottom","position":{"start":{"line":17,"column":3,"offset":2079},"end":{"line":17,"column":26,"offset":2102},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":2079},"end":{"line":17,"column":26,"offset":2102},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":2077},"end":{"line":17,"column":26,"offset":2102},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Relies heavily on global state, but any line can change the global state","position":{"start":{"line":18,"column":3,"offset":2105},"end":{"line":18,"column":75,"offset":2177},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":2105},"end":{"line":18,"column":75,"offset":2177},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":2103},"end":{"line":18,"column":75,"offset":2177},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"C being a procedural language","position":{"start":{"line":19,"column":3,"offset":2180},"end":{"line":19,"column":32,"offset":2209},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":2180},"end":{"line":19,"column":32,"offset":2209},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":2178},"end":{"line":19,"column":32,"offset":2209},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"\"Imperative\" execution","position":{"start":{"line":20,"column":3,"offset":2212},"end":{"line":20,"column":25,"offset":2234},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":2212},"end":{"line":20,"column":25,"offset":2234},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":2210},"end":{"line":20,"column":25,"offset":2234},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Easy to write, difficult to maintain","position":{"start":{"line":21,"column":3,"offset":2237},"end":{"line":21,"column":39,"offset":2273},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":2237},"end":{"line":21,"column":39,"offset":2273},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":2235},"end":{"line":21,"column":39,"offset":2273},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Prone to difficult bugs","position":{"start":{"line":22,"column":3,"offset":2276},"end":{"line":22,"column":26,"offset":2299},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":2276},"end":{"line":22,"column":26,"offset":2299},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":2274},"end":{"line":22,"column":26,"offset":2299},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":2026},"end":{"line":22,"column":26,"offset":2299},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Object Oriented","position":{"start":{"line":24,"column":5,"offset":2305},"end":{"line":24,"column":20,"offset":2320},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":2301},"end":{"line":24,"column":20,"offset":2320},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Based around a Primitive: object","position":{"start":{"line":26,"column":3,"offset":2324},"end":{"line":26,"column":35,"offset":2356},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":2324},"end":{"line":26,"column":35,"offset":2356},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":2322},"end":{"line":26,"column":35,"offset":2356},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Objects have well defined interfaces","position":{"start":{"line":27,"column":3,"offset":2359},"end":{"line":27,"column":39,"offset":2395},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":2359},"end":{"line":27,"column":39,"offset":2395},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":2357},"end":{"line":27,"column":39,"offset":2395},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Localised behaviour","position":{"start":{"line":28,"column":3,"offset":2398},"end":{"line":28,"column":22,"offset":2417},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":2398},"end":{"line":28,"column":22,"offset":2417},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":2396},"end":{"line":28,"column":22,"offset":2417},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Objects control state","position":{"start":{"line":29,"column":3,"offset":2420},"end":{"line":29,"column":24,"offset":2441},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":2420},"end":{"line":29,"column":24,"offset":2441},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2418},"end":{"line":29,"column":24,"offset":2441},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Composition","position":{"start":{"line":30,"column":3,"offset":2444},"end":{"line":30,"column":14,"offset":2455},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":2444},"end":{"line":30,"column":14,"offset":2455},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":2442},"end":{"line":30,"column":14,"offset":2455},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Code is still imperative - pro AND con! - Still telling the computer EXACTLY what to do.","position":{"start":{"line":31,"column":3,"offset":2458},"end":{"line":31,"column":91,"offset":2546},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":2458},"end":{"line":31,"column":91,"offset":2546},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2456},"end":{"line":31,"column":91,"offset":2546},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can be more verbose","position":{"start":{"line":32,"column":3,"offset":2549},"end":{"line":32,"column":22,"offset":2568},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":2549},"end":{"line":32,"column":22,"offset":2568},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2547},"end":{"line":32,"column":22,"offset":2568},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":2322},"end":{"line":32,"column":22,"offset":2568},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Declarative","position":{"start":{"line":34,"column":5,"offset":2574},"end":{"line":34,"column":16,"offset":2585},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2570},"end":{"line":34,"column":16,"offset":2585},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Describing what you want to happen, but not telling the computer how to do it","position":{"start":{"line":36,"column":3,"offset":2589},"end":{"line":36,"column":80,"offset":2666},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":2589},"end":{"line":36,"column":80,"offset":2666},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2587},"end":{"line":36,"column":80,"offset":2666},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Eg. SQL, Regex, HTML","position":{"start":{"line":37,"column":3,"offset":2669},"end":{"line":37,"column":23,"offset":2689},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":2669},"end":{"line":37,"column":23,"offset":2689},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":2667},"end":{"line":37,"column":23,"offset":2689},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Data is self-describing","position":{"start":{"line":38,"column":3,"offset":2692},"end":{"line":38,"column":26,"offset":2715},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":2692},"end":{"line":38,"column":26,"offset":2715},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2690},"end":{"line":38,"column":26,"offset":2715},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"As powerful as the interpreter allows","position":{"start":{"line":39,"column":3,"offset":2718},"end":{"line":39,"column":40,"offset":2755},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":2718},"end":{"line":39,"column":40,"offset":2755},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":2716},"end":{"line":39,"column":40,"offset":2755},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"As limiting as the interpreter allows - You want build a game in SQL etc.","position":{"start":{"line":40,"column":3,"offset":2758},"end":{"line":40,"column":76,"offset":2831},"indent":[]}}],"position":{"start":{"line":40,"column":3,"offset":2758},"end":{"line":40,"column":76,"offset":2831},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2756},"end":{"line":40,"column":76,"offset":2831},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2587},"end":{"line":40,"column":76,"offset":2831},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Functional","position":{"start":{"line":42,"column":5,"offset":2837},"end":{"line":42,"column":15,"offset":2847},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2833},"end":{"line":42,"column":15,"offset":2847},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"What we want to happen but not how","position":{"start":{"line":44,"column":3,"offset":2851},"end":{"line":44,"column":37,"offset":2885},"indent":[]}}],"position":{"start":{"line":44,"column":3,"offset":2851},"end":{"line":44,"column":37,"offset":2885},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2849},"end":{"line":44,"column":37,"offset":2885},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Little state","position":{"start":{"line":45,"column":3,"offset":2888},"end":{"line":45,"column":15,"offset":2900},"indent":[]}}],"position":{"start":{"line":45,"column":3,"offset":2888},"end":{"line":45,"column":15,"offset":2900},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2886},"end":{"line":45,"column":15,"offset":2900},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Few side effects","position":{"start":{"line":46,"column":3,"offset":2903},"end":{"line":46,"column":19,"offset":2919},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":2903},"end":{"line":46,"column":19,"offset":2919},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2901},"end":{"line":46,"column":19,"offset":2919},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Easy to reason about","position":{"start":{"line":47,"column":3,"offset":2922},"end":{"line":47,"column":23,"offset":2942},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":2922},"end":{"line":47,"column":23,"offset":2942},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2920},"end":{"line":47,"column":23,"offset":2942},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Composition","position":{"start":{"line":48,"column":3,"offset":2945},"end":{"line":48,"column":14,"offset":2956},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":2945},"end":{"line":48,"column":14,"offset":2956},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2943},"end":{"line":48,"column":14,"offset":2956},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Expressive","position":{"start":{"line":49,"column":3,"offset":2959},"end":{"line":49,"column":13,"offset":2969},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":2959},"end":{"line":49,"column":13,"offset":2969},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2957},"end":{"line":49,"column":13,"offset":2969},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Works great with OO","position":{"start":{"line":50,"column":3,"offset":2972},"end":{"line":50,"column":22,"offset":2991},"indent":[]}}],"position":{"start":{"line":50,"column":3,"offset":2972},"end":{"line":50,"column":22,"offset":2991},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2970},"end":{"line":50,"column":22,"offset":2991},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Basis in higher math","position":{"start":{"line":51,"column":3,"offset":2994},"end":{"line":51,"column":23,"offset":3014},"indent":[]}}],"position":{"start":{"line":51,"column":3,"offset":2994},"end":{"line":51,"column":23,"offset":3014},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2992},"end":{"line":51,"column":23,"offset":3014},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Cons to think differently","position":{"start":{"line":52,"column":3,"offset":3017},"end":{"line":52,"column":28,"offset":3042},"indent":[]}}],"position":{"start":{"line":52,"column":3,"offset":3017},"end":{"line":52,"column":28,"offset":3042},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":3015},"end":{"line":52,"column":28,"offset":3042},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Not always the best choice","position":{"start":{"line":53,"column":3,"offset":3045},"end":{"line":53,"column":29,"offset":3071},"indent":[]}}],"position":{"start":{"line":53,"column":3,"offset":3045},"end":{"line":53,"column":29,"offset":3071},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":3043},"end":{"line":53,"column":29,"offset":3071},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No loops, no control logic - Just telling it what we want to happen","position":{"start":{"line":54,"column":3,"offset":3074},"end":{"line":54,"column":70,"offset":3141},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":3074},"end":{"line":54,"column":70,"offset":3141},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":3072},"end":{"line":54,"column":70,"offset":3141},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2849},"end":{"line":54,"column":70,"offset":3141},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Reactive","position":{"start":{"line":56,"column":5,"offset":3147},"end":{"line":56,"column":13,"offset":3155},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":3143},"end":{"line":56,"column":13,"offset":3155},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Primitive: Observable","position":{"start":{"line":58,"column":3,"offset":3159},"end":{"line":58,"column":24,"offset":3180},"indent":[]}}],"position":{"start":{"line":58,"column":3,"offset":3159},"end":{"line":58,"column":24,"offset":3180},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":3157},"end":{"line":58,"column":24,"offset":3180},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Instead of describing data in terms of other data, we describe it in terms of streams of events - From this, we create a pipeline such that we certain data changes, a lot is processed and changed - Example: spreadsheets!","position":{"start":{"line":59,"column":3,"offset":3183},"end":{"line":59,"column":223,"offset":3403},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":3183},"end":{"line":59,"column":223,"offset":3403},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":3181},"end":{"line":59,"column":223,"offset":3403},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Composition","position":{"start":{"line":60,"column":3,"offset":3406},"end":{"line":60,"column":14,"offset":3417},"indent":[]}}],"position":{"start":{"line":60,"column":3,"offset":3406},"end":{"line":60,"column":14,"offset":3417},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":3404},"end":{"line":60,"column":14,"offset":3417},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Expressive","position":{"start":{"line":61,"column":3,"offset":3420},"end":{"line":61,"column":13,"offset":3430},"indent":[]}}],"position":{"start":{"line":61,"column":3,"offset":3420},"end":{"line":61,"column":13,"offset":3430},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":3418},"end":{"line":61,"column":13,"offset":3430},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Data flows unidirectionally","position":{"start":{"line":62,"column":3,"offset":3433},"end":{"line":62,"column":30,"offset":3460},"indent":[]}}],"position":{"start":{"line":62,"column":3,"offset":3433},"end":{"line":62,"column":30,"offset":3460},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":3431},"end":{"line":62,"column":30,"offset":3460},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Tough to think differently","position":{"start":{"line":63,"column":3,"offset":3463},"end":{"line":63,"column":29,"offset":3489},"indent":[]}}],"position":{"start":{"line":63,"column":3,"offset":3463},"end":{"line":63,"column":29,"offset":3489},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":3461},"end":{"line":63,"column":29,"offset":3489},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Subscriptions help change the data","position":{"start":{"line":64,"column":3,"offset":3492},"end":{"line":64,"column":37,"offset":3526},"indent":[]}}],"position":{"start":{"line":64,"column":3,"offset":3492},"end":{"line":64,"column":37,"offset":3526},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3490},"end":{"line":64,"column":37,"offset":3526},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":3157},"end":{"line":64,"column":37,"offset":3526},"indent":[1,1,1,1,1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"const cellC2$ = cellA2$\n  .combineLatest(cellB2$)\n  .map((cells) => cells[0] + cells[1]);\n\ncellC2$.subscribe((value) => {\n  console.log(value);\n});","position":{"start":{"line":66,"column":1,"offset":3528},"end":{"line":74,"column":4,"offset":3693},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"1.1: Core Reactive Concepts","position":{"start":{"line":76,"column":4,"offset":3698},"end":{"line":76,"column":31,"offset":3725},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":3695},"end":{"line":76,"column":31,"offset":3725},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Core Concept 1: Pull model vs Push model","position":{"start":{"line":78,"column":3,"offset":3729},"end":{"line":78,"column":43,"offset":3769},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":3727},"end":{"line":78,"column":45,"offset":3771},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":3727},"end":{"line":78,"column":45,"offset":3771},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"any data sitting there that you \"ask\" for at some point - example refresh button - manual button trigger - time interval","position":{"start":{"line":80,"column":3,"offset":3775},"end":{"line":80,"column":123,"offset":3895},"indent":[]}}],"position":{"start":{"line":80,"column":3,"offset":3775},"end":{"line":80,"column":123,"offset":3895},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":3773},"end":{"line":80,"column":123,"offset":3895},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"observable (stream) which is a reactive data source - produces items over a period of time that will either error, complete, or never complete until a page closes - not telling the stream when to get data, it has inbuilt logic on how to get data - we may transform this data - the display of the data is actually part of the description","position":{"start":{"line":81,"column":3,"offset":3898},"end":{"line":81,"column":339,"offset":4234},"indent":[]}}],"position":{"start":{"line":81,"column":3,"offset":3898},"end":{"line":81,"column":339,"offset":4234},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":3896},"end":{"line":81,"column":339,"offset":4234},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":3773},"end":{"line":81,"column":339,"offset":4234},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"An an example for a ","position":{"start":{"line":83,"column":1,"offset":4236},"end":{"line":83,"column":21,"offset":4256},"indent":[]}},{"type":"inlineCode","value":"pull","position":{"start":{"line":83,"column":21,"offset":4256},"end":{"line":83,"column":27,"offset":4262},"indent":[]}},{"type":"text","value":" based code, we can think of a window.setInterval() that fires every 5000 seconds.","position":{"start":{"line":83,"column":27,"offset":4262},"end":{"line":83,"column":109,"offset":4344},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4236},"end":{"line":83,"column":109,"offset":4344},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An example of a push would be to have a function fire and then the return continutes to filter, flatMap, map and subscribe.","position":{"start":{"line":85,"column":1,"offset":4346},"end":{"line":85,"column":124,"offset":4469},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":4346},"end":{"line":85,"column":124,"offset":4469},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Core Concept 2: Everything is a database","position":{"start":{"line":87,"column":3,"offset":4473},"end":{"line":87,"column":43,"offset":4513},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4471},"end":{"line":87,"column":45,"offset":4515},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4471},"end":{"line":87,"column":45,"offset":4515},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"mouse movements","position":{"start":{"line":89,"column":3,"offset":4519},"end":{"line":89,"column":18,"offset":4534},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":4519},"end":{"line":89,"column":18,"offset":4534},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":4517},"end":{"line":89,"column":18,"offset":4534},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"current user","position":{"start":{"line":90,"column":3,"offset":4537},"end":{"line":90,"column":15,"offset":4549},"indent":[]}}],"position":{"start":{"line":90,"column":3,"offset":4537},"end":{"line":90,"column":15,"offset":4549},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":4535},"end":{"line":90,"column":15,"offset":4549},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"web requests","position":{"start":{"line":91,"column":3,"offset":4552},"end":{"line":91,"column":15,"offset":4564},"indent":[]}}],"position":{"start":{"line":91,"column":3,"offset":4552},"end":{"line":91,"column":15,"offset":4564},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":4550},"end":{"line":91,"column":15,"offset":4564},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"input boxes","position":{"start":{"line":92,"column":3,"offset":4567},"end":{"line":92,"column":14,"offset":4578},"indent":[]}}],"position":{"start":{"line":92,"column":3,"offset":4567},"end":{"line":92,"column":14,"offset":4578},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":4565},"end":{"line":92,"column":14,"offset":4578},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":4517},"end":{"line":92,"column":14,"offset":4578},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"1.2: Comparing the Autocomplete function using JS vs RxJS","position":{"start":{"line":94,"column":4,"offset":4583},"end":{"line":94,"column":61,"offset":4640},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":4580},"end":{"line":94,"column":61,"offset":4640},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the comparison where the ","position":{"start":{"line":96,"column":1,"offset":4642},"end":{"line":96,"column":29,"offset":4670},"indent":[]}},{"type":"inlineCode","value":"$title.on('keyup', () => {})","position":{"start":{"line":96,"column":29,"offset":4670},"end":{"line":96,"column":59,"offset":4700},"indent":[]}},{"type":"text","value":" runs with a promise returned. The query can run into race conditions.","position":{"start":{"line":96,"column":59,"offset":4700},"end":{"line":96,"column":129,"offset":4770},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":4642},"end":{"line":96,"column":129,"offset":4770},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Also note that every single result also fires.","position":{"start":{"line":98,"column":1,"offset":4772},"end":{"line":98,"column":47,"offset":4818},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":4772},"end":{"line":98,"column":47,"offset":4818},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The issues:","position":{"start":{"line":100,"column":1,"offset":4820},"end":{"line":100,"column":12,"offset":4831},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":4820},"end":{"line":100,"column":12,"offset":4831},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Fix up and down arrow\n// Stop always querying\n// Getting race condition","position":{"start":{"line":102,"column":1,"offset":4833},"end":{"line":106,"column":4,"offset":4915},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Bad ways","position":{"start":{"line":108,"column":3,"offset":4919},"end":{"line":108,"column":11,"offset":4927},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":4917},"end":{"line":108,"column":13,"offset":4929},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":4917},"end":{"line":108,"column":13,"offset":4929},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"generally ","position":{"start":{"line":110,"column":3,"offset":4933},"end":{"line":110,"column":13,"offset":4943},"indent":[]}},{"type":"inlineCode","value":"if last query == currentTitle return","position":{"start":{"line":110,"column":13,"offset":4943},"end":{"line":110,"column":51,"offset":4981},"indent":[]}}],"position":{"start":{"line":110,"column":3,"offset":4933},"end":{"line":110,"column":51,"offset":4981},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":4931},"end":{"line":110,"column":51,"offset":4981},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"using setTimeout to reduce number of queries","position":{"start":{"line":111,"column":3,"offset":4984},"end":{"line":111,"column":47,"offset":5028},"indent":[]}}],"position":{"start":{"line":111,"column":3,"offset":4984},"end":{"line":111,"column":47,"offset":5028},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":4982},"end":{"line":111,"column":47,"offset":5028},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Race condition still happening, but bad attempts may be increasing the timeout - Could also use a current id compared to next query id and then returning before the callback occurs","position":{"start":{"line":112,"column":3,"offset":5031},"end":{"line":112,"column":183,"offset":5211},"indent":[]}}],"position":{"start":{"line":112,"column":3,"offset":5031},"end":{"line":112,"column":183,"offset":5211},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":5029},"end":{"line":112,"column":183,"offset":5211},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A lot of state across the module being changed","position":{"start":{"line":113,"column":3,"offset":5214},"end":{"line":113,"column":49,"offset":5260},"indent":[]}}],"position":{"start":{"line":113,"column":3,"offset":5214},"end":{"line":113,"column":49,"offset":5260},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":5212},"end":{"line":113,"column":49,"offset":5260},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":4931},"end":{"line":113,"column":49,"offset":5260},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"The Rx way","position":{"start":{"line":115,"column":3,"offset":5264},"end":{"line":115,"column":13,"offset":5274},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":5262},"end":{"line":115,"column":15,"offset":5276},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":5262},"end":{"line":115,"column":15,"offset":5276},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// npm install rxjs-es for es6\nimport $ from 'jquery';\nimport Rx from 'rxjs/Rx';\n\nconst $title = $('#title');\nconst $results = $('#results');\n\nconst keyUps$ = Rx.Observable.fromEvent($title, \"keyup\");\nconst queries$ = keyUps$\n\t.map(e => e.target.value)\n\t.distinctUntilChanged()\n\t.debounceTime(250)\n\t.switchMap(getItems);\t// similar to merge, but if new query comes in, discard the old data\n\t//.mergeMap(getItems);\t// alias for flatMap\n\nqueries$.subscribe(query => {\n\t// get rid of the promise will stop race condition\n\t$results.empty();\n\t$results.append(items.map( r => $(`<li />`).text(r)));\n})\n\n<!-- queries$.subscribe(query => {\n\tconsole.log(e); // prints out event\n\tgetItems(query)\n\t\t.then(items => {\n\t\t\t$results.empty();\n\t\t\t$results.append(items.map( r => $(`<li />`).text(r)));\n\t\t});\n}) -->","position":{"start":{"line":117,"column":1,"offset":5278},"end":{"line":147,"column":4,"offset":6092},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"An even better way.","position":{"start":{"line":149,"column":1,"offset":6094},"end":{"line":149,"column":20,"offset":6113},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":6094},"end":{"line":149,"column":20,"offset":6113},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import $ from 'jquery';\nimport Rx from 'rxjs/Rx';\n\nconst $title = $('#title');\nconst $results = $('#results');\n\nRx.Observable.fromEvent($title, 'keyup')\n  .map((e) => e.target.value)\n  .distinctUntilChanged()\n  .debounceTime(500)\n  .switchMap(getItems)\n  .subscribe((items) => {\n    $results.empty();\n    $results.append(items.map((r) => $(`<li />`).text(r)));\n  });","position":{"start":{"line":151,"column":1,"offset":6115},"end":{"line":167,"column":4,"offset":6499},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"All the Rx has no external state, whereas the other code does.","position":{"start":{"line":169,"column":3,"offset":6503},"end":{"line":169,"column":65,"offset":6565},"indent":[]}}],"position":{"start":{"line":169,"column":3,"offset":6503},"end":{"line":169,"column":65,"offset":6565},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":6501},"end":{"line":169,"column":65,"offset":6565},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Rx doesn't have to wait for us to tell it when to do it.","position":{"start":{"line":170,"column":3,"offset":6568},"end":{"line":170,"column":59,"offset":6624},"indent":[]}}],"position":{"start":{"line":170,"column":3,"offset":6568},"end":{"line":170,"column":59,"offset":6624},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":6566},"end":{"line":170,"column":59,"offset":6624},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":6501},"end":{"line":170,"column":59,"offset":6624},"indent":[1]}},{"type":"thematicBreak","position":{"start":{"line":172,"column":1,"offset":6626},"end":{"line":172,"column":4,"offset":6629},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"3: The Core of Reactive Extensions","position":{"start":{"line":174,"column":4,"offset":6634},"end":{"line":174,"column":38,"offset":6668},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":6631},"end":{"line":174,"column":38,"offset":6668},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"3.1: Obervables, Operators and Subscriptions","position":{"start":{"line":176,"column":4,"offset":6673},"end":{"line":176,"column":48,"offset":6717},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":6670},"end":{"line":176,"column":48,"offset":6717},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Observable: Something that can be observed which produces values","position":{"start":{"line":178,"column":3,"offset":6721},"end":{"line":178,"column":67,"offset":6785},"indent":[]}}],"position":{"start":{"line":178,"column":3,"offset":6721},"end":{"line":178,"column":67,"offset":6785},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":6719},"end":{"line":178,"column":67,"offset":6785},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Operator: It's an operation that modifies the data being pushed in from the observable - They don't produce values in and of themselves, but move them through the pipeline.","position":{"start":{"line":179,"column":3,"offset":6788},"end":{"line":179,"column":175,"offset":6960},"indent":[]}}],"position":{"start":{"line":179,"column":3,"offset":6788},"end":{"line":179,"column":175,"offset":6960},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":6786},"end":{"line":179,"column":175,"offset":6960},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Subscriptions: Piece of code that will do something with the values returned by the operators","position":{"start":{"line":180,"column":3,"offset":6963},"end":{"line":180,"column":96,"offset":7056},"indent":[]}}],"position":{"start":{"line":180,"column":3,"offset":6963},"end":{"line":180,"column":96,"offset":7056},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":6961},"end":{"line":180,"column":96,"offset":7056},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":6719},"end":{"line":180,"column":96,"offset":7056},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note, you can model anything in a reactive context by thinking a little bit differently.","position":{"start":{"line":182,"column":1,"offset":7058},"end":{"line":182,"column":89,"offset":7146},"indent":[]}}],"position":{"start":{"line":182,"column":1,"offset":7058},"end":{"line":182,"column":89,"offset":7146},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Web API Request Example","position":{"start":{"line":184,"column":3,"offset":7150},"end":{"line":184,"column":26,"offset":7173},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":7148},"end":{"line":184,"column":28,"offset":7175},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":7148},"end":{"line":184,"column":28,"offset":7175},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Reactive can still complete, or it can error out and retry.","position":{"start":{"line":186,"column":3,"offset":7179},"end":{"line":186,"column":62,"offset":7238},"indent":[]}}],"position":{"start":{"line":186,"column":3,"offset":7179},"end":{"line":186,"column":62,"offset":7238},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":7177},"end":{"line":186,"column":62,"offset":7238},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":7177},"end":{"line":186,"column":62,"offset":7238},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"3.2 Creating Observables","position":{"start":{"line":188,"column":4,"offset":7243},"end":{"line":188,"column":28,"offset":7267},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":7240},"end":{"line":188,"column":28,"offset":7267},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import Rx from 'rxjs/Rx';\n\n# promise will always execute - not lazy\nconst promise = new Promise((resolve, reject) => {\n\tconsole.log(\"In promise\");\n\tresolve(\"hey\");\n});\n\npromise.then(item => console.log(item));\n\n# this doesn't give any output!\n# observables are lazy!\n# won't run without a subscription\nconst simple$ = new Rx.Observable(observer => {\n\tconsole.log(\"Generating observable\");\n\tsetTimeout(() => {\n\t\tobserver.next(\"An items!\");\n\t\tsetTimeout(() => {\n\t\t\tobserver.next(\"Another item!\");\n\t\t\tobserver.complete();\n\t\t}, 1000);\n\t}, 1000);\n});\n\n# creating a subscription\n# first arg is the next function\n# second arg is error\n# third arg is complete\nsimple$.subscribe(\n\titem => console.log(`one.next ${item}`),\n\terror => console.log(`one.error ${item}`),\n\t() => console.log(\"one.complete\")\n);\n\n# Generating observable\n# one.next An item!\n# one.next Another item!\n# one.complete\n\nsetTimeout(() => {\n\tsimple$.subscribe({\n\t\tnext: item => console.log(`two.next ${item}`),\n\t\terror: error => console.log(`two.error ${item}`),\n\t\tcomplete: () => console.log(\"two.complete\")\n\t});\n}, 3000)","position":{"start":{"line":190,"column":1,"offset":7269},"end":{"line":237,"column":4,"offset":8368},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Re-subscribing to an observable allows you to run that generator again","position":{"start":{"line":239,"column":3,"offset":8372},"end":{"line":239,"column":73,"offset":8442},"indent":[]}}],"position":{"start":{"line":239,"column":3,"offset":8372},"end":{"line":239,"column":73,"offset":8442},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":8370},"end":{"line":239,"column":73,"offset":8442},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":8370},"end":{"line":239,"column":73,"offset":8442},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"function createInterval(time) {\n\treturn new Rx.Observable(observer => {\n\t\tlet index = 0;\n\t\tlet interval = setInterval(() => {\n\t\t\tobserver.next(index++);\n\t\t}, time);\n\n\t\treturn () => {\n\t\t\t// will run when we unsubscribe\n\t\t\tclearnInterval(interval);\n\t\t};\n\t});\n}\n\nfunction createSubscriber(tag) {\n\treturn {\n\t\tnext(item) { console.log(`${tag}.next ${item}`); },\n\t\terror(error) { console.log(`${tag}.error ${error.stack || error }`); },\n\t\tcomplete() { console.log(`${tag}.complete`); }\n\t};\n}\n\nfunction take(observable, amount) {\n\treturn new Rx.Observable(observer => {\n\n\t});\n}\n\n// this is the core of subscriptions\nfunction take(sourceObservable, amount) {\n\treturn new Rx.Observable(observer => {\n\t\tlet count = 0;\n\t\tconst subscription = sourceObservable.subscribe({\n\t\t\tnext(item) {\n\t\t\t\tobserver.next(item);\n\t\t\t\tif (++count >= amount) {\n\t\t\t\t\tobserver.complete();\n\t\t\t\t}\n\t\t\t},\n\t\t\terror(error) { observer.error(error); },\n\t\t\tcomplete() { observer.complete(); }\n\t\t});\n\n\t\treturn () => subscription.unsubscribe();\n\t});\n}\n\nconst everySecond_ = createInterval(1000);\nconst firstFiveSeconds = take(everySecond_, 5);\nconst subscription = everySecond_.subscribe(createSubscriber(\"one\"));\nsetTimeout(() => {\n\tsubscription.unsubscribe();\n}, 3500);","position":{"start":{"line":241,"column":1,"offset":8444},"end":{"line":295,"column":4,"offset":9679},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This subscription will console.log out forever and ever and ever... - unless, we dispose of a description","position":{"start":{"line":297,"column":1,"offset":9681},"end":{"line":297,"column":106,"offset":9786},"indent":[]}}],"position":{"start":{"line":297,"column":1,"offset":9681},"end":{"line":297,"column":106,"offset":9786},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"How do operators come into play?","position":{"start":{"line":299,"column":1,"offset":9788},"end":{"line":299,"column":33,"offset":9820},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":9788},"end":{"line":299,"column":33,"offset":9820},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We could run something like ","position":{"start":{"line":301,"column":1,"offset":9822},"end":{"line":301,"column":29,"offset":9850},"indent":[]}},{"type":"inlineCode","value":"const subscription = everySecond_.take(3)subscribe(createSubscriber(\"one\"));","position":{"start":{"line":301,"column":29,"offset":9850},"end":{"line":301,"column":107,"offset":9928},"indent":[]}}],"position":{"start":{"line":301,"column":1,"offset":9822},"end":{"line":301,"column":107,"offset":9928},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The steps for it are that it listens for a source and emits a transformation!","position":{"start":{"line":303,"column":1,"offset":9930},"end":{"line":303,"column":78,"offset":10007},"indent":[]}}],"position":{"start":{"line":303,"column":1,"offset":9930},"end":{"line":303,"column":78,"offset":10007},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"3.3: Built in Observables","position":{"start":{"line":305,"column":4,"offset":10012},"end":{"line":305,"column":29,"offset":10037},"indent":[]}}],"position":{"start":{"line":305,"column":1,"offset":10009},"end":{"line":305,"column":29,"offset":10037},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import Rx from 'rxjs/Rx';\n\n\nRx.Observable.interval(500)\n\t.take(5)\n\t.subscribe(createSubscriber(\"interval\"));\n\nRx.Observable.timer(1000, 500)\n\t.take(3)\n\t.subscribe(createSubscriber(\"timer\");\n\n// note, array doesn't work - use from\nRx.Observable.of(\"Hello world!\", 42, \"whoa\")\n\t.subscribe(createSubscriber(\"of\"));\n\nRx.Observable.from([\"Hello world!\", 42, \"whoa\"])\n\t.subscribe(createSubscriber(\"of\"));\n\nRx.Observable.from(generate())\n\t.subscribe(createSubscriber(\"of\"));\n\n\nRx.Observable.from(\"hello world!\")\n\t.subscribe(createSubscriber(\"of\"));\n\n// it can also take in a generator function!\n\nfunction* generate() {\n\tyield 1;\n\tyield 5;\n\tyield \"HEY\";\n}\n\nRx.Observable.throw(new Error(\"Hey\"))\n\t.subscribe(createSubscriber(\"error\"));\n\n// empty\nRx.Observable.empty()\n\t.subscribe(createSubscriber(\"empty\"));\n\n// defer\nlet sideEffect = 0;\nconst defer = Rx.Observable.defer(() => {\n\tsideEffect++;\n\treturn Rx.Obserable.of(sideEffect);\n});\n\ndefer.subscribe(createSubscriber(\"defer.one\"));\ndefer.subscribe(createSubscriber(\"defer.two\"));\ndefer.subscribe(createSubscriber(\"defer.three\"));\n\nRx.Observable.never()\n\t.subscribe(createSubscriber(\"never\"));\n\nRx.Observable.range(10, 30)\n\t.subscribe(createSubscriber(\"range\"));","position":{"start":{"line":307,"column":1,"offset":10039},"end":{"line":364,"column":4,"offset":11262},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Benefits of the iterable ","position":{"start":{"line":366,"column":1,"offset":11264},"end":{"line":366,"column":26,"offset":11289},"indent":[]}},{"type":"inlineCode","value":"from","position":{"start":{"line":366,"column":26,"offset":11289},"end":{"line":366,"column":32,"offset":11295},"indent":[]}},{"type":"text","value":"?","position":{"start":{"line":366,"column":32,"offset":11295},"end":{"line":366,"column":33,"offset":11296},"indent":[]}}],"position":{"start":{"line":366,"column":1,"offset":11264},"end":{"line":366,"column":33,"offset":11296},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For every iterable, we could map every element.","position":{"start":{"line":368,"column":3,"offset":11300},"end":{"line":368,"column":50,"offset":11347},"indent":[]}}],"position":{"start":{"line":368,"column":3,"offset":11300},"end":{"line":368,"column":50,"offset":11347},"indent":[]}}],"position":{"start":{"line":368,"column":1,"offset":11298},"end":{"line":368,"column":50,"offset":11347},"indent":[]}}],"position":{"start":{"line":368,"column":1,"offset":11298},"end":{"line":368,"column":50,"offset":11347},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"3.4: Using RxJS with Node, jQuery and Promises","position":{"start":{"line":370,"column":4,"offset":11352},"end":{"line":370,"column":50,"offset":11398},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":11349},"end":{"line":370,"column":50,"offset":11398},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"Rx.Observable.fromEvent($title, 'keyup')\n  .map((e) => e.target.value)\n  .distinctUntilChanged()\n  .debounceTime(500)\n  .switchMap(getItems)\n  .subscribe((items) => {\n    $results.empty();\n    $results.append(items.map((i) => $('<li />').text(i)));\n  });","position":{"start":{"line":372,"column":1,"offset":11400},"end":{"line":382,"column":4,"offset":11672},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"NOTE: Without the subscribe, it will never be subscribed to the dom!","position":{"start":{"line":384,"column":1,"offset":11674},"end":{"line":384,"column":69,"offset":11742},"indent":[]}}],"position":{"start":{"line":384,"column":1,"offset":11674},"end":{"line":384,"column":69,"offset":11742},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we have the ","position":{"start":{"line":386,"column":1,"offset":11744},"end":{"line":386,"column":16,"offset":11759},"indent":[]}},{"type":"inlineCode","value":".take(10)","position":{"start":{"line":386,"column":16,"offset":11759},"end":{"line":386,"column":27,"offset":11770},"indent":[]}},{"type":"text","value":" - it would complete after taking 10 and then furthermore unsubscribe and be great for performance!","position":{"start":{"line":386,"column":27,"offset":11770},"end":{"line":386,"column":126,"offset":11869},"indent":[]}}],"position":{"start":{"line":386,"column":1,"offset":11744},"end":{"line":386,"column":126,"offset":11869},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"fromEvent","position":{"start":{"line":388,"column":1,"offset":11871},"end":{"line":388,"column":12,"offset":11882},"indent":[]}},{"type":"text","value":" calls from ","position":{"start":{"line":388,"column":12,"offset":11882},"end":{"line":388,"column":24,"offset":11894},"indent":[]}},{"type":"inlineCode","value":"addEventListener","position":{"start":{"line":388,"column":24,"offset":11894},"end":{"line":388,"column":42,"offset":11912},"indent":[]}},{"type":"text","value":", so it can do powerful things like ","position":{"start":{"line":388,"column":42,"offset":11912},"end":{"line":388,"column":78,"offset":11948},"indent":[]}},{"type":"inlineCode","value":"keyup","position":{"start":{"line":388,"column":78,"offset":11948},"end":{"line":388,"column":85,"offset":11955},"indent":[]}},{"type":"text","value":" for those that don't initially support it.","position":{"start":{"line":388,"column":85,"offset":11955},"end":{"line":388,"column":128,"offset":11998},"indent":[]}}],"position":{"start":{"line":388,"column":1,"offset":11871},"end":{"line":388,"column":128,"offset":11998},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import fs from 'fs';\n\nfs.readdir('./src/server', (err, items) => {\n  if (err) console.log(err);\n  else {\n    console.log(items);\n  }\n});\n\n// alternative\nconst readdir = Rx.Observable.bindNodeCallBack(fs.readdir);\n\nreaddir('./src/server')\n  // mergeMap creates iterable converted from array\n  .mergeMap((files) => Rx.Observable.from(files))\n  .map((file) => `MANIPULATED ${file}`)\n  .subscribe(createSubscriber('readdir'));\n\n// promises\n\nfunction getItem() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Hello');\n    }, 1000);\n  });\n}\n\nRx.Observable.fromPromise(getItem()).subscribe(createSubscriber('promise'));","position":{"start":{"line":390,"column":1,"offset":12000},"end":{"line":420,"column":4,"offset":12666},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"3.5: Subjects","position":{"start":{"line":422,"column":4,"offset":12671},"end":{"line":422,"column":17,"offset":12684},"indent":[]}}],"position":{"start":{"line":422,"column":1,"offset":12668},"end":{"line":422,"column":17,"offset":12684},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Subjects are another Rx primitive. They are both an observable and a observer! Used to bridge non-reactive code with reactive code.","position":{"start":{"line":424,"column":1,"offset":12686},"end":{"line":424,"column":132,"offset":12817},"indent":[]}}],"position":{"start":{"line":424,"column":1,"offset":12686},"end":{"line":424,"column":132,"offset":12817},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Behaviour, replay subjects etc.","position":{"start":{"line":426,"column":1,"offset":12819},"end":{"line":426,"column":32,"offset":12850},"indent":[]}}],"position":{"start":{"line":426,"column":1,"offset":12819},"end":{"line":426,"column":32,"offset":12850},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Warning","position":{"start":{"line":428,"column":2,"offset":12853},"end":{"line":428,"column":9,"offset":12860},"indent":[]}}],"position":{"start":{"line":428,"column":1,"offset":12852},"end":{"line":428,"column":10,"offset":12861},"indent":[]}},{"type":"text","value":": you should only really consider them as a last resort when bridging non-reactive and reactive code.","position":{"start":{"line":428,"column":10,"offset":12861},"end":{"line":428,"column":111,"offset":12962},"indent":[]}}],"position":{"start":{"line":428,"column":1,"offset":12852},"end":{"line":428,"column":111,"offset":12962},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const simple = new Rx.Subject();\n\nsimple.subscribe(createSubscriber('simple'));\n\nsimple.next('Hello');\nsimple.next('World');\nsimple.complete();\n\nconst interval = Rx.Observable.interval(1000).take(5);\nconst intervalSubject = new Rx.Subject();\nintervalSubject.subscribe(interval);\n\nintervalSubject.subscribe(createSubscriber('sub1'));\nintervalSubject.subscribe(createSubscriber('sub2'));\nintervalSubject.subscribe(createSubscriber('sub3'));\n\n// subscribes after three seconds\nsetTimeout(() => {\n  intervalSubject.subscribe(createSubscriber('LOOK AT ME'));\n}, 3000);","position":{"start":{"line":430,"column":1,"offset":12964},"end":{"line":451,"column":4,"offset":13545},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Before, we had to invoke a function that call ","position":{"start":{"line":453,"column":1,"offset":13547},"end":{"line":453,"column":47,"offset":13593},"indent":[]}},{"type":"inlineCode","value":"next","position":{"start":{"line":453,"column":47,"offset":13593},"end":{"line":453,"column":53,"offset":13599},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":453,"column":53,"offset":13599},"end":{"line":453,"column":58,"offset":13604},"indent":[]}},{"type":"inlineCode","value":"complete","position":{"start":{"line":453,"column":58,"offset":13604},"end":{"line":453,"column":68,"offset":13614},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":453,"column":68,"offset":13614},"end":{"line":453,"column":69,"offset":13615},"indent":[]}}],"position":{"start":{"line":453,"column":1,"offset":13547},"end":{"line":453,"column":69,"offset":13615},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the above example, intervalSubject is acting as a proxy to another observable.","position":{"start":{"line":455,"column":1,"offset":13617},"end":{"line":455,"column":82,"offset":13698},"indent":[]}}],"position":{"start":{"line":455,"column":1,"offset":13617},"end":{"line":455,"column":82,"offset":13698},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// needs init state parameter\nconst currentUser = new Rx.BehaviorSubject({ isLoggedIn: false });\nconst isLoggedIn = currentUser.map((u) => u.isLoggedIn);\n\ncurrentUser.next({ isLoggedIn: false });\nisLoggedIn.subscribe(createSubscriber('isLoggedIn'));\n\nsetTimeout(() => {\n  currentUser.next({ isLoggedIn: true, name: 'nelson' });\n}, 3000);\n\nsetTimeout(() => {\n  isLogged.subscribe(createSubscription('delayed'));\n}, 1500);","position":{"start":{"line":457,"column":1,"offset":13700},"end":{"line":472,"column":4,"offset":14138},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"How do you remember multiple states?","position":{"start":{"line":474,"column":1,"offset":14140},"end":{"line":474,"column":37,"offset":14176},"indent":[]}}],"position":{"start":{"line":474,"column":1,"offset":14140},"end":{"line":474,"column":37,"offset":14176},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const replay = new Rx.ReplaySubject(3);\nreplay.next(1);\nreplay.next(2);\n\nreplay.subscribe(createSubscriber(\"one\"));\n\nreplay.next(3);\nreplay.next(4);\nreplay.next(5);\n\n// this subscription only gets the previous three items\nreplay.subscribe(createSubscriber(\"two\"));\n\nreplay.next(6);\n\n// what you see\none.next 1\none.next 2\none.next 3\none.next 4\none.next 5\ntwo.next 3\ntwo.next 4\ntwo.next 5\none.next 6\ntwo.next 6","position":{"start":{"line":476,"column":1,"offset":14178},"end":{"line":503,"column":4,"offset":14604},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Async Subjects","position":{"start":{"line":505,"column":3,"offset":14608},"end":{"line":505,"column":17,"offset":14622},"indent":[]}}],"position":{"start":{"line":505,"column":1,"offset":14606},"end":{"line":505,"column":19,"offset":14624},"indent":[]}}],"position":{"start":{"line":505,"column":1,"offset":14606},"end":{"line":505,"column":19,"offset":14624},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const apiCall = new Rx.AsyncSubject();\napiCall.next(1);\n\napiCall.subscribe(createSubscriber(\"one\"));\napiCall.next(2);\n\n// only will emit the final item before it is complete\napiCall.complete();\n\n// if you subscribe to it again, that final value will be emitted\nsetTimeout(() => {\n\tapiCall.subscribe(createSubscriber(\"two\"));\n}, 2000);\n\n// output\none.next 2\none.complete\ntwo.next 2\ntwo.complete","position":{"start":{"line":507,"column":1,"offset":14626},"end":{"line":527,"column":4,"offset":15027},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Subject Summary","position":{"start":{"line":529,"column":3,"offset":15031},"end":{"line":529,"column":18,"offset":15046},"indent":[]}}],"position":{"start":{"line":529,"column":1,"offset":15029},"end":{"line":529,"column":20,"offset":15048},"indent":[]}}],"position":{"start":{"line":529,"column":1,"offset":15029},"end":{"line":529,"column":20,"offset":15048},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"if you can get around it, don't use subjects unless you have to","position":{"start":{"line":531,"column":3,"offset":15052},"end":{"line":531,"column":66,"offset":15115},"indent":[]}}],"position":{"start":{"line":531,"column":3,"offset":15052},"end":{"line":531,"column":66,"offset":15115},"indent":[]}}],"position":{"start":{"line":531,"column":1,"offset":15050},"end":{"line":531,"column":66,"offset":15115},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"you should use an observable workflow where possible","position":{"start":{"line":532,"column":3,"offset":15118},"end":{"line":532,"column":55,"offset":15170},"indent":[]}}],"position":{"start":{"line":532,"column":3,"offset":15118},"end":{"line":532,"column":55,"offset":15170},"indent":[]}}],"position":{"start":{"line":532,"column":1,"offset":15116},"end":{"line":532,"column":55,"offset":15170},"indent":[]}}],"position":{"start":{"line":531,"column":1,"offset":15050},"end":{"line":532,"column":55,"offset":15170},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"3.6: RxJS Resources and Documentation","position":{"start":{"line":534,"column":4,"offset":15175},"end":{"line":534,"column":41,"offset":15212},"indent":[]}}],"position":{"start":{"line":534,"column":1,"offset":15172},"end":{"line":534,"column":41,"offset":15212},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sources:","position":{"start":{"line":536,"column":1,"offset":15214},"end":{"line":536,"column":9,"offset":15222},"indent":[]}}],"position":{"start":{"line":536,"column":1,"offset":15214},"end":{"line":536,"column":9,"offset":15222},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/ReactiveX/rxjs","children":[{"type":"text","value":"RxJS Github","position":{"start":{"line":538,"column":4,"offset":15227},"end":{"line":538,"column":15,"offset":15238},"indent":[]}}],"position":{"start":{"line":538,"column":3,"offset":15226},"end":{"line":538,"column":51,"offset":15274},"indent":[]}}],"position":{"start":{"line":538,"column":3,"offset":15226},"end":{"line":538,"column":51,"offset":15274},"indent":[]}}],"position":{"start":{"line":538,"column":1,"offset":15224},"end":{"line":538,"column":51,"offset":15274},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://rxmarbles.com/","children":[{"type":"text","value":"RxMarbles","position":{"start":{"line":539,"column":4,"offset":15278},"end":{"line":539,"column":13,"offset":15287},"indent":[]}}],"position":{"start":{"line":539,"column":3,"offset":15277},"end":{"line":539,"column":37,"offset":15311},"indent":[]}}],"position":{"start":{"line":539,"column":3,"offset":15277},"end":{"line":539,"column":37,"offset":15311},"indent":[]}}],"position":{"start":{"line":539,"column":1,"offset":15275},"end":{"line":539,"column":37,"offset":15311},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://jaredforsyth.com/rxvision/examples/playground/","children":[{"type":"text","value":"RxVision Playground","position":{"start":{"line":540,"column":4,"offset":15315},"end":{"line":540,"column":23,"offset":15334},"indent":[]}}],"position":{"start":{"line":540,"column":3,"offset":15314},"end":{"line":540,"column":79,"offset":15390},"indent":[]}}],"position":{"start":{"line":540,"column":3,"offset":15314},"end":{"line":540,"column":79,"offset":15390},"indent":[]}}],"position":{"start":{"line":540,"column":1,"offset":15312},"end":{"line":540,"column":79,"offset":15390},"indent":[]}}],"position":{"start":{"line":538,"column":1,"offset":15224},"end":{"line":540,"column":79,"offset":15390},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"3.7: Sharing Observable Sequences","position":{"start":{"line":542,"column":4,"offset":15395},"end":{"line":542,"column":37,"offset":15428},"indent":[]}}],"position":{"start":{"line":542,"column":1,"offset":15392},"end":{"line":542,"column":37,"offset":15428},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Hot Observable: It will produce events regardless of if you're listening - eg.","position":{"start":{"line":544,"column":3,"offset":15432},"end":{"line":544,"column":81,"offset":15510},"indent":[]}},{"type":"inlineCode","value":"fromEvent($title, 'keyup')","position":{"start":{"line":544,"column":81,"offset":15510},"end":{"line":544,"column":109,"offset":15538},"indent":[]}}],"position":{"start":{"line":544,"column":3,"offset":15432},"end":{"line":544,"column":109,"offset":15538},"indent":[]}}],"position":{"start":{"line":544,"column":1,"offset":15430},"end":{"line":544,"column":109,"offset":15538},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Cold Obserable: Starts once you subscribe - Interval Observables are actually cold observables","position":{"start":{"line":545,"column":3,"offset":15541},"end":{"line":545,"column":97,"offset":15635},"indent":[]}}],"position":{"start":{"line":545,"column":3,"offset":15541},"end":{"line":545,"column":97,"offset":15635},"indent":[]}}],"position":{"start":{"line":545,"column":1,"offset":15539},"end":{"line":545,"column":97,"offset":15635},"indent":[]}}],"position":{"start":{"line":544,"column":1,"offset":15430},"end":{"line":545,"column":97,"offset":15635},"indent":[1]}},{"type":"code","lang":"javascript","meta":null,"value":"// this example shows when both start from the beginning eg cold\nimport Rx from 'rxjs/Rx';\n\nconst interval = Rx.Observable.interval(1000).take(10);\n\nsetTimeout(() => {\n  interval.subscribe(createSubscriber('one'));\n}, 1200);\n\nsetTimeout(() => {\n  interval.subscribe(createSubscriber('two'));\n}, 3200);\n\n// HOT\n// connectable observable\nimport Rx from 'rxjs/Rx';\n\nconst interval = Rx.Observable.interval(1000)\n  .take(10)\n  .publish();\n\ninterval.connect();\n\nsetTimeout(() => {\n  interval.subscribe(createSubscriber('one'));\n}, 1200);\n\nsetTimeout(() => {\n  interval.subscribe(createSubscriber('two'));\n}, 3200);\n\n// if you connect after a set interval, then it begins executing and sharing the underlying observable","position":{"start":{"line":547,"column":1,"offset":15637},"end":{"line":580,"column":4,"offset":16368},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Why would you want a hot variable?","position":{"start":{"line":582,"column":3,"offset":16372},"end":{"line":582,"column":37,"offset":16406},"indent":[]}}],"position":{"start":{"line":582,"column":1,"offset":16370},"end":{"line":582,"column":39,"offset":16408},"indent":[]}}],"position":{"start":{"line":582,"column":1,"offset":16370},"end":{"line":582,"column":39,"offset":16408},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// here subscribe console.log runs twice\nconst socket = { on: () => {} };\nconst chatMessage = new Rx.Observable((observable) => {\n  console.log('subscribed');\n  socket.on('chat:message', (message) => observer.next(message));\n});\n\nchatMessage.subscribe(createSubscriber('one'));\nchatMessage.subscribe(createSubscriber('two'));\n\n// without it\n\nconst socket = { on: () => {} };\nconst chatMessage = new Rx.Observable((observable) => {\n  console.log('subscribed');\n  socket.on('chat:message', (message) => observer.next(message));\n}).publish();\n\nchatMessage.connect();\n\nchatMessage.subscribe(createSubscriber('one'));\nchatMessage.subscribe(createSubscriber('two'));\n\n// using publishLast()\nconst simple = new Rx.Observable((observer) => {\n  observer.next('one');\n  observer.next('two');\n  observer.complete();\n});\n\n// always returns the last value\nconst published = simple.publishLast();\n\n// even if we subscribe before connect, both will get the last value\npublished.subscribe(createSubscriber('one'));\npublished.connect();\npublished.subscribe(creaSubscriber('two'));\n\n// using publishReplay()\nconst simple = new Rx.Observable((observer) => {\n  observer.next('one');\n  observer.next('two');\n  observer.next('three');\n\n  return () => console.log('Disposed');\n});\n\n// always returns the last value\nconst published = simple.publishReplay(2);\n\n// even if we subscribe before connect, both will get the last value\n// to dispose without running complete, we need to disconnect by unsubscribing\nconst sub1 = published.subscribe(createSubscriber('one'));\nconst connection = published.connect();\nconst sub2 = published.subscribe(creaSubscriber('two'));\n\nsub1.unsubscribe();\nsub2.unsubscribe();\n\nconnection.unsubscribe();","position":{"start":{"line":584,"column":1,"offset":16410},"end":{"line":645,"column":4,"offset":18135},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Refcount is a way to automatically handle the connection and the unsubscription of a connection observable.","position":{"start":{"line":647,"column":1,"offset":18137},"end":{"line":647,"column":108,"offset":18244},"indent":[]}}],"position":{"start":{"line":647,"column":1,"offset":18137},"end":{"line":647,"column":108,"offset":18244},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It will connect to the first subscription and then disconnected on the last unsubscribe.","position":{"start":{"line":649,"column":1,"offset":18246},"end":{"line":649,"column":89,"offset":18334},"indent":[]}}],"position":{"start":{"line":649,"column":1,"offset":18246},"end":{"line":649,"column":89,"offset":18334},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// using refCount()\nconst simple = new Rx.Observable(observer => {\n\tobserver.next(\"one\");\n\tobserver.next(\"two\");\n\tobserver.next(\"three\");\n\n\treturn () => console.log(\"Disposed\");\n});\n\n// always returns the last value\nconst published = simple.publishReplay(2).refCount();\n\n// even if we subscribe before connect, both will get the last value\n// to dispose without running complete, we need to disconnect by unsubscribing\nconst sub1 = published.subscribe(createSubscriber(\"one\"));\nconst sub2 = published.subscribe(creaSubscriber(\"two\"));\n\nsub1.unsubscribe();\nsub2.unsubscribe();","position":{"start":{"line":651,"column":1,"offset":18336},"end":{"line":671,"column":4,"offset":18919},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":673,"column":1,"offset":18921},"end":{"line":673,"column":5,"offset":18925},"indent":[]}},{"type":"inlineCode","value":"publish().refCount()","position":{"start":{"line":673,"column":5,"offset":18925},"end":{"line":673,"column":27,"offset":18947},"indent":[]}},{"type":"text","value":" is done so often, that is has been turned in ","position":{"start":{"line":673,"column":27,"offset":18947},"end":{"line":673,"column":73,"offset":18993},"indent":[]}},{"type":"inlineCode","value":"share()","position":{"start":{"line":673,"column":73,"offset":18993},"end":{"line":673,"column":82,"offset":19002},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":673,"column":82,"offset":19002},"end":{"line":673,"column":83,"offset":19003},"indent":[]}}],"position":{"start":{"line":673,"column":1,"offset":18921},"end":{"line":673,"column":83,"offset":19003},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Taxing processes that you don't want to repeat but you want multiple things to hook into the result, then turn it into a hot subscription.","position":{"start":{"line":675,"column":1,"offset":19005},"end":{"line":675,"column":139,"offset":19143},"indent":[]}}],"position":{"start":{"line":675,"column":1,"offset":19005},"end":{"line":675,"column":139,"offset":19143},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":677,"column":1,"offset":19145},"end":{"line":677,"column":4,"offset":19148},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"4.0: Operators that everyone should know","position":{"start":{"line":679,"column":4,"offset":19153},"end":{"line":679,"column":44,"offset":19193},"indent":[]}}],"position":{"start":{"line":679,"column":1,"offset":19150},"end":{"line":679,"column":44,"offset":19193},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now we will just talk about the different primary operators that you will work with.","position":{"start":{"line":681,"column":1,"offset":19195},"end":{"line":681,"column":85,"offset":19279},"indent":[]}}],"position":{"start":{"line":681,"column":1,"offset":19195},"end":{"line":681,"column":85,"offset":19279},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"4.1: Do / Finally / StartWith / Filter","position":{"start":{"line":683,"column":4,"offset":19284},"end":{"line":683,"column":42,"offset":19322},"indent":[]}}],"position":{"start":{"line":683,"column":1,"offset":19281},"end":{"line":683,"column":42,"offset":19322},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// do => get the next value and pass it back unchanged\n// finally => only completes after the range has completed, runs right at the end of the final value\n// filter => filters out given statement\n// interval => call timeout\n// startWith => set initial value\n\nRx.Observable.range(1, 10)\n  .do((a) => console.log(`From do ${a}`))\n  .map((a) => a * a)\n  .subscribe(createSubscriber('simple'));\n\nRx.Observable.range(1, 10)\n  .finally(() => console.log(`From finally`))\n  .map((a) => a * 2)\n  .subscribe(createSubscriber('finally'));\n\nRx.Observable.range(1, 10)\n  .filter((a) => a < 5)\n  .map((a) => a * 2)\n  .subscribe(createSubscriber('filter'));\n\nRx.Observable.interval(1000)\n  .startWith(-1)\n  .subscribe(createSubscriber('interval'));","position":{"start":{"line":685,"column":1,"offset":19324},"end":{"line":710,"column":4,"offset":20077},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"4.2: Merge / Concat","position":{"start":{"line":712,"column":4,"offset":20082},"end":{"line":712,"column":23,"offset":20101},"indent":[]}}],"position":{"start":{"line":712,"column":1,"offset":20079},"end":{"line":712,"column":23,"offset":20101},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// merge - merge many observables togethers\n// concat - this concatenates observables to the end of another, can also take a list of Observables\n\nRx.Observable.interval(1000)\n\t.merge(Rx.Observable.interval(500))\n\t.take(5)\n\t.subscribe(createSubscriber(\"merge1\"));\n\nRx.Observable.merge(\n\tRx.Observable.interval(1000).map(i => `${i} seconds),\n\tRx.Observable.interval(500).map(i => `${i} half seconds))\n\t.take(5)\n\t.subscribe(createSubscriber('merge2'));\n\n// different events for merged observables\nRx.Observable.merge(\n\tsocket.on$(\"login\").map(user => processUser(user),\n\tsocket.on$(\"logout\").map(() => null));\n\nRx.Observable.range(1, 5)\n\t.concat(Rx.Observable.range(10,3))\n\t.subscribe(createSubscriber(\"concat1\"));","position":{"start":{"line":714,"column":1,"offset":20103},"end":{"line":737,"column":4,"offset":20832},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"4.3: Map / MergeMap / SwitchMap","position":{"start":{"line":739,"column":4,"offset":20837},"end":{"line":739,"column":35,"offset":20868},"indent":[]}}],"position":{"start":{"line":739,"column":1,"offset":20834},"end":{"line":739,"column":35,"offset":20868},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// map - a projection on every item that comes in\n// mergeMap - select many, does projection and then has another thing that we will work on\n// switchMap - similar to mergeMap but replaces with the latest value if another emission comes in\n\nfunction arrayMap(arr, proj) {\n  let returnArray = [];\n  for (let i of arr) {\n    returnArray.push(proj(item));\n  }\n\n  return returnArray;\n}\n\narrayMap([1, 2, 3], (a) => a * a);\n\n// imagine array of dicts\nconst albums = [{}, {}];\n\nfunction arrayMergeMap(arr, proj) {\n  let returnArray = [];\n  for (let i of arr) {\n    let projArray = proj(item);\n    for (let j of projArray) {\n      returnArray.push(proj(item));\n    }\n  }\n\n  return returnArray;\n}\n\nconst tracks = arrayMergeMap(albums, (album) => album.tracks);\n\nRx.Observable.range(1, 3)\n  .mergeMap((i) =>\n    Rx.Observable.timer(i * 1000).map(() => `After ${i} seconds`)\n  )\n  .subscribe(createSubscriber('mergeMap'));\n\nRx.Observable.fromPromise(getTracks())\n  .mergeMap((tracks) => Rx.Observable.from(tracks))\n  .subscribe(createSubscriber('tracks'));\n\nfunction getTracks() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(['track 1', 'track 2', 'track 3']);\n    }, 1000);\n  });\n}\n\n// synchronous example\nRx.Observable.of('my query')\n  .do(() => console.log('Querying'))\n  .mergeMap((a) => query(a))\n  .do(() => console.log('After querying'))\n  .subscribe(createSubscriber('query'));\n\nfunction query(value) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('This is the resolved value');\n    }, 1000);\n  });\n}\n\n// switch map","position":{"start":{"line":741,"column":1,"offset":20870},"end":{"line":808,"column":4,"offset":22473},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"4.4: Reduce / Scan","position":{"start":{"line":810,"column":4,"offset":22478},"end":{"line":810,"column":22,"offset":22496},"indent":[]}}],"position":{"start":{"line":810,"column":1,"offset":22475},"end":{"line":810,"column":22,"offset":22496},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// reducer (acc, value) and works on value - doesn't emit until the completion\n// scan - processes and emits as it comes in\nRx.Observable.range(1, 10)\n  .reduce((acc, value) => acc + value)\n  .subscribe(createSubscriber('reduce'));\n\nRx.Observable.range(1, 10)\n  .scan((acc, value) => acc + value)\n  .subscribe(createSubscriber('scan'));","position":{"start":{"line":812,"column":1,"offset":22498},"end":{"line":822,"column":4,"offset":22852},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"4.5: Buffer / ToArray","position":{"start":{"line":824,"column":4,"offset":22857},"end":{"line":824,"column":25,"offset":22878},"indent":[]}}],"position":{"start":{"line":824,"column":1,"offset":22854},"end":{"line":824,"column":25,"offset":22878},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There have been some big changes to how ","position":{"start":{"line":826,"column":1,"offset":22880},"end":{"line":826,"column":41,"offset":22920},"indent":[]}},{"type":"inlineCode","value":"buffer","position":{"start":{"line":826,"column":41,"offset":22920},"end":{"line":826,"column":49,"offset":22928},"indent":[]}},{"type":"text","value":" has been used.","position":{"start":{"line":826,"column":49,"offset":22928},"end":{"line":826,"column":64,"offset":22943},"indent":[]}}],"position":{"start":{"line":826,"column":1,"offset":22880},"end":{"line":826,"column":64,"offset":22943},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Buffer takes in an observable.","position":{"start":{"line":828,"column":1,"offset":22945},"end":{"line":828,"column":31,"offset":22975},"indent":[]}}],"position":{"start":{"line":828,"column":1,"offset":22945},"end":{"line":828,"column":31,"offset":22975},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"toArray will convert results into an array. - still has a clean exit if the never() is implemented!","position":{"start":{"line":830,"column":1,"offset":22977},"end":{"line":830,"column":100,"offset":23076},"indent":[]}}],"position":{"start":{"line":830,"column":1,"offset":22977},"end":{"line":830,"column":100,"offset":23076},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"Rx.Observable.range(1, 100)\n\t.bufferCount(25)\n\t.subscribe(createSubscriber(\"items\");\n\n// will take 25 items and pushing them into an array\n\n\nRx.Observable.interval(500)\n\t.bufferTime(2000)\n\t.subscribe(createSubscriber(\"bufferTime\");\n\n// same behaviour!\n// emitting event causes buffer to flush\nRx.Observable.interval(500)\n\t.buffer(Rx.Observable.interval(2000))\n\t.subscribe(createSubscriber(\"buffer\");\n\n//\n// toArray\n//\n\nRx.Observable.range(1, 10)\n\t.toArray()\n\t.subscribe(createSubscriber(\"range\"));","position":{"start":{"line":832,"column":1,"offset":23078},"end":{"line":857,"column":4,"offset":23593},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"4.6: First / Last / Single / Skip / Take","position":{"start":{"line":859,"column":4,"offset":23598},"end":{"line":859,"column":44,"offset":23638},"indent":[]}}],"position":{"start":{"line":859,"column":1,"offset":23595},"end":{"line":859,"column":44,"offset":23638},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const simple = new Rx.Observable((observer) => {\n  console.log('Generating sequence');\n  observer.next(1);\n  observer.next(2);\n  observer.next(3);\n  observer.next(4);\n  observer.complete();\n});\n\nsimple.first().subscribe(createSubscriber('first'));\n\nsimple.last().subscribe(createSubscriber('last'));\n\n// displays 1 & 4\n// if nothing is in there, there are EmptyError(s) thrown\n\n// single.error thrown is more than one error thrown\nsimple.single().subscribe(createSubscriber('single'));\n\n// take and skip won't throw errors\n// take does the first however emissions\n// skip will take the emissions after a number\nsimple.take(2).subscribe(createSubscriber('take'));\n\nsimple.skip(2).subscribe(createSubscriber('skip'));\n\n// 3, 4\nsimple\n  .skip(2)\n  .take(2)\n  .subscribe(createSubscriber('skip'));\n\n// skipWhile / takeWhile\nRx.Observable.interval(500)\n  .skipWhile((i) => i < 4)\n  .takeWhile((i) => i < 10)\n  .subscribe(createSubscriber('skipWhile/takeWhile'));\n\n// what's until and take emissions until\nRx.Observable.interval(500)\n  .skipUntil(Rx.Observable.timer(1000))\n  .takeUntil(Rx.Observable.timer(4000))\n  .subscribe(createSubscriber('skipUntil'));","position":{"start":{"line":861,"column":1,"offset":23640},"end":{"line":905,"column":4,"offset":24810},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"4.7: Zip / WithLatestFrom / CombineLatest","position":{"start":{"line":907,"column":4,"offset":24815},"end":{"line":907,"column":45,"offset":24856},"indent":[]}}],"position":{"start":{"line":907,"column":1,"offset":24812},"end":{"line":907,"column":45,"offset":24856},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"How can we combine observables in different ways?","position":{"start":{"line":909,"column":1,"offset":24858},"end":{"line":909,"column":50,"offset":24907},"indent":[]}}],"position":{"start":{"line":909,"column":1,"offset":24858},"end":{"line":909,"column":50,"offset":24907},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function arrayZip(arr1, arr2, selectorFunc) {\n  const count = Math.min(arr1.length, arr2.length);\n  const results = [];\n\n  for (let i = 0; i < count; i++) {\n    const combined = selector(arr1[i], arr2[i]);\n    results.push(combined);\n  }\n\n  return results;\n}\n\nconst arr1 = [32, 2, 52, 43, 54];\nconst arr2 = [1, 0, 10, 4, 1, 4, 6, 2];\nconst results = arrayZip(arr1, arr2, (left, right) => left * right);\n\nconsole.log(results);\n\n// in RxJS\nRx.Observable.range(1.1)\n  .zip(\n    Rx.Observable.interval(500),\n    (left, right) => `item: ${left}, at ${right * 500}`\n  )\n  .subscribe(createSubscriber('zip'));\n\n// emits value when source emits\n// can also pass (left, right) function like zip as second parameter\nRx.Observable.interval(1000)\n  .withLatestFrom(Rx.Observable.interval(500))\n  .subscribe(createSubscriber('withLatestFrom'));\n\n// emit value if either do\nRx.Observable.interval(1000)\n  .combineLatest(Rx.Observable.interval(500))\n  .subscribe(createSubscriber('withLatestFrom'));","position":{"start":{"line":911,"column":1,"offset":24909},"end":{"line":948,"column":4,"offset":25911},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"4.8: Error Handling Catch and Retry","position":{"start":{"line":950,"column":4,"offset":25916},"end":{"line":950,"column":39,"offset":25951},"indent":[]}}],"position":{"start":{"line":950,"column":1,"offset":25913},"end":{"line":950,"column":39,"offset":25951},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If an error happens, an observer stops emitting and can prevent values from emitting at all. Error handling is very important!","position":{"start":{"line":952,"column":1,"offset":25953},"end":{"line":952,"column":127,"offset":26079},"indent":[]}}],"position":{"start":{"line":952,"column":1,"offset":25953},"end":{"line":952,"column":127,"offset":26079},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":".catch(error => Rx.Observable.of(error))","position":{"start":{"line":954,"column":1,"offset":26081},"end":{"line":954,"column":43,"offset":26123},"indent":[]}},{"type":"text","value":" can pass this down as an Observable.","position":{"start":{"line":954,"column":43,"offset":26123},"end":{"line":954,"column":80,"offset":26160},"indent":[]}}],"position":{"start":{"line":954,"column":1,"offset":26081},"end":{"line":954,"column":80,"offset":26160},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":".retry()","position":{"start":{"line":956,"column":1,"offset":26162},"end":{"line":956,"column":11,"offset":26172},"indent":[]}},{"type":"text","value":" we can pass in with a numeral to ensure that we either keep retrying or retry a certain number of times.","position":{"start":{"line":956,"column":11,"offset":26172},"end":{"line":956,"column":116,"offset":26277},"indent":[]}}],"position":{"start":{"line":956,"column":1,"offset":26162},"end":{"line":956,"column":116,"offset":26277},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":959,"column":1,"offset":26280},"end":{"line":959,"column":31,"offset":26310},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":959,"column":31,"offset":26310}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"rxjs\"\n    }}>{`RxJS`}</h1>\n    {\n      /* TOC -->autoauto- [RxJS](#rxjs)auto    - [1.0 A Brief Recap of Programming Paradigms](#10-a-brief-recap-of-programming-paradigms)auto        - [Procedural Program](#procedural-program)auto        - [Object Oriented](#object-oriented)auto        - [Declarative](#declarative)auto    - [1.1: Core Reactive Concepts](#11-core-reactive-concepts)auto    - [1.2: Comparing the Autocomplete function using JS vs RxJS](#12-comparing-the-autocomplete-function-using-js-vs-rxjs)auto    - [3: The Core of Reactive Extensions](#3-the-core-of-reactive-extensions)auto    - [3.1: Obervables, Operators and Subscriptions](#31-obervables-operators-and-subscriptions)auto    - [3.2 Creating Observables](#32-creating-observables)auto    - [3.3: Built in Observables](#33-built-in-observables)auto    - [3.4: Using RxJS with Node, jQuery and Promises](#34-using-rxjs-with-node-jquery-and-promises)auto    - [3.5: Subjects](#35-subjects)auto    - [3.6: RxJS Resources and Documentation](#36-rxjs-resources-and-documentation)auto    - [3.7: Sharing Observable Sequences](#37-sharing-observable-sequences)auto    - [4.0: Operators that everyone should know](#40-operators-that-everyone-should-know)auto    - [4.1: Do / Finally / StartWith / Filter](#41-do--finally--startwith--filter)auto    - [4.2: Merge / Concat](#42-merge--concat)auto    - [4.3: Map / MergeMap / SwitchMap](#43-map--mergemap--switchmap)auto    - [4.4: Reduce / Scan](#44-reduce--scan)auto    - [4.5: Buffer / ToArray](#45-buffer--toarray)auto    - [4.6: First / Last / Single / Skip / Take](#46-first--last--single--skip--take)auto    - [4.7: Zip / WithLatestFrom / CombineLatest](#47-zip--withlatestfrom--combinelatest)auto    - [4.8: Error Handling Catch and Retry](#48-error-handling-catch-and-retry)autoauto<!-- /TOC */\n    }\n    <h2 {...{\n      \"id\": \"10-a-brief-recap-of-programming-paradigms\"\n    }}>{`1.0 A Brief Recap of Programming Paradigms`}</h2>\n    <h3 {...{\n      \"id\": \"procedural-program\"\n    }}>{`Procedural Program`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`The ideas that programs are a sense of functions`}</li>\n      <li parentName=\"ul\">{`Goes from top to bottom`}</li>\n      <li parentName=\"ul\">{`Relies heavily on global state, but any line can change the global state`}</li>\n      <li parentName=\"ul\">{`C being a procedural language`}</li>\n      <li parentName=\"ul\">{`\"Imperative\" execution`}</li>\n      <li parentName=\"ul\">{`Easy to write, difficult to maintain`}</li>\n      <li parentName=\"ul\">{`Prone to difficult bugs`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"object-oriented\"\n    }}>{`Object Oriented`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Based around a Primitive: object`}</li>\n      <li parentName=\"ul\">{`Objects have well defined interfaces`}</li>\n      <li parentName=\"ul\">{`Localised behaviour`}</li>\n      <li parentName=\"ul\">{`Objects control state`}</li>\n      <li parentName=\"ul\">{`Composition`}</li>\n      <li parentName=\"ul\">{`Code is still imperative - pro AND con! - Still telling the computer EXACTLY what to do.`}</li>\n      <li parentName=\"ul\">{`Can be more verbose`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"declarative\"\n    }}>{`Declarative`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Describing what you want to happen, but not telling the computer how to do it`}</li>\n      <li parentName=\"ul\">{`Eg. SQL, Regex, HTML`}</li>\n      <li parentName=\"ul\">{`Data is self-describing`}</li>\n      <li parentName=\"ul\">{`As powerful as the interpreter allows`}</li>\n      <li parentName=\"ul\">{`As limiting as the interpreter allows - You want build a game in SQL etc.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"functional\"\n    }}>{`Functional`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`What we want to happen but not how`}</li>\n      <li parentName=\"ul\">{`Little state`}</li>\n      <li parentName=\"ul\">{`Few side effects`}</li>\n      <li parentName=\"ul\">{`Easy to reason about`}</li>\n      <li parentName=\"ul\">{`Composition`}</li>\n      <li parentName=\"ul\">{`Expressive`}</li>\n      <li parentName=\"ul\">{`Works great with OO`}</li>\n      <li parentName=\"ul\">{`Basis in higher math`}</li>\n      <li parentName=\"ul\">{`Cons to think differently`}</li>\n      <li parentName=\"ul\">{`Not always the best choice`}</li>\n      <li parentName=\"ul\">{`No loops, no control logic - Just telling it what we want to happen`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"reactive\"\n    }}>{`Reactive`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Primitive: Observable`}</li>\n      <li parentName=\"ul\">{`Instead of describing data in terms of other data, we describe it in terms of streams of events - From this, we create a pipeline such that we certain data changes, a lot is processed and changed - Example: spreadsheets!`}</li>\n      <li parentName=\"ul\">{`Composition`}</li>\n      <li parentName=\"ul\">{`Expressive`}</li>\n      <li parentName=\"ul\">{`Data flows unidirectionally`}</li>\n      <li parentName=\"ul\">{`Tough to think differently`}</li>\n      <li parentName=\"ul\">{`Subscriptions help change the data`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const cellC2$ = cellA2$\n  .combineLatest(cellB2$)\n  .map((cells) => cells[0] + cells[1]);\n\ncellC2$.subscribe((value) => {\n  console.log(value);\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"11-core-reactive-concepts\"\n    }}>{`1.1: Core Reactive Concepts`}</h2>\n    <p><strong parentName=\"p\">{`Core Concept 1: Pull model vs Push model`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`any data sitting there that you \"ask\" for at some point - example refresh button - manual button trigger - time interval`}</li>\n      <li parentName=\"ul\">{`observable (stream) which is a reactive data source - produces items over a period of time that will either error, complete, or never complete until a page closes - not telling the stream when to get data, it has inbuilt logic on how to get data - we may transform this data - the display of the data is actually part of the description`}</li>\n    </ul>\n    <p>{`An an example for a `}<inlineCode parentName=\"p\">{`pull`}</inlineCode>{` based code, we can think of a window.setInterval() that fires every 5000 seconds.`}</p>\n    <p>{`An example of a push would be to have a function fire and then the return continutes to filter, flatMap, map and subscribe.`}</p>\n    <p><strong parentName=\"p\">{`Core Concept 2: Everything is a database`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`mouse movements`}</li>\n      <li parentName=\"ul\">{`current user`}</li>\n      <li parentName=\"ul\">{`web requests`}</li>\n      <li parentName=\"ul\">{`input boxes`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"12-comparing-the-autocomplete-function-using-js-vs-rxjs\"\n    }}>{`1.2: Comparing the Autocomplete function using JS vs RxJS`}</h2>\n    <p>{`In the comparison where the `}<inlineCode parentName=\"p\">{`$title.on('keyup', () => {})`}</inlineCode>{` runs with a promise returned. The query can run into race conditions.`}</p>\n    <p>{`Also note that every single result also fires.`}</p>\n    <p>{`The issues:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Fix up and down arrow\n// Stop always querying\n// Getting race condition\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Bad ways`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`generally `}<inlineCode parentName=\"li\">{`if last query == currentTitle return`}</inlineCode></li>\n      <li parentName=\"ul\">{`using setTimeout to reduce number of queries`}</li>\n      <li parentName=\"ul\">{`Race condition still happening, but bad attempts may be increasing the timeout - Could also use a current id compared to next query id and then returning before the callback occurs`}</li>\n      <li parentName=\"ul\">{`A lot of state across the module being changed`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`The Rx way`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// npm install rxjs-es for es6\nimport $ from 'jquery';\nimport Rx from 'rxjs/Rx';\n\nconst $title = $('#title');\nconst $results = $('#results');\n\nconst keyUps$ = Rx.Observable.fromEvent($title, \"keyup\");\nconst queries$ = keyUps$\n    .map(e => e.target.value)\n    .distinctUntilChanged()\n    .debounceTime(250)\n    .switchMap(getItems);   // similar to merge, but if new query comes in, discard the old data\n    //.mergeMap(getItems);  // alias for flatMap\n\nqueries$.subscribe(query => {\n    // get rid of the promise will stop race condition\n    $results.empty();\n    $results.append(items.map( r => $(\\`<li />\\`).text(r)));\n})\n\n<!-- queries$.subscribe(query => {\n    console.log(e); // prints out event\n    getItems(query)\n        .then(items => {\n            $results.empty();\n            $results.append(items.map( r => $(\\`<li />\\`).text(r)));\n        });\n}) -->\n`}</code></pre>\n    <p>{`An even better way.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import $ from 'jquery';\nimport Rx from 'rxjs/Rx';\n\nconst $title = $('#title');\nconst $results = $('#results');\n\nRx.Observable.fromEvent($title, 'keyup')\n  .map((e) => e.target.value)\n  .distinctUntilChanged()\n  .debounceTime(500)\n  .switchMap(getItems)\n  .subscribe((items) => {\n    $results.empty();\n    $results.append(items.map((r) => $(\\`<li />\\`).text(r)));\n  });\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`All the Rx has no external state, whereas the other code does.`}</li>\n      <li parentName=\"ul\">{`Rx doesn't have to wait for us to tell it when to do it.`}</li>\n    </ul>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"3-the-core-of-reactive-extensions\"\n    }}>{`3: The Core of Reactive Extensions`}</h2>\n    <h2 {...{\n      \"id\": \"31-obervables-operators-and-subscriptions\"\n    }}>{`3.1: Obervables, Operators and Subscriptions`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Observable: Something that can be observed which produces values`}</li>\n      <li parentName=\"ul\">{`Operator: It's an operation that modifies the data being pushed in from the observable - They don't produce values in and of themselves, but move them through the pipeline.`}</li>\n      <li parentName=\"ul\">{`Subscriptions: Piece of code that will do something with the values returned by the operators`}</li>\n    </ul>\n    <p>{`Note, you can model anything in a reactive context by thinking a little bit differently.`}</p>\n    <p><strong parentName=\"p\">{`Web API Request Example`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Reactive can still complete, or it can error out and retry.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"32-creating-observables\"\n    }}>{`3.2 Creating Observables`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import Rx from 'rxjs/Rx';\n\n# promise will always execute - not lazy\nconst promise = new Promise((resolve, reject) => {\n    console.log(\"In promise\");\n    resolve(\"hey\");\n});\n\npromise.then(item => console.log(item));\n\n# this doesn't give any output!\n# observables are lazy!\n# won't run without a subscription\nconst simple$ = new Rx.Observable(observer => {\n    console.log(\"Generating observable\");\n    setTimeout(() => {\n        observer.next(\"An items!\");\n        setTimeout(() => {\n            observer.next(\"Another item!\");\n            observer.complete();\n        }, 1000);\n    }, 1000);\n});\n\n# creating a subscription\n# first arg is the next function\n# second arg is error\n# third arg is complete\nsimple$.subscribe(\n    item => console.log(\\`one.next \\${item}\\`),\n    error => console.log(\\`one.error \\${item}\\`),\n    () => console.log(\"one.complete\")\n);\n\n# Generating observable\n# one.next An item!\n# one.next Another item!\n# one.complete\n\nsetTimeout(() => {\n    simple$.subscribe({\n        next: item => console.log(\\`two.next \\${item}\\`),\n        error: error => console.log(\\`two.error \\${item}\\`),\n        complete: () => console.log(\"two.complete\")\n    });\n}, 3000)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Re-subscribing to an observable allows you to run that generator again`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`function createInterval(time) {\n    return new Rx.Observable(observer => {\n        let index = 0;\n        let interval = setInterval(() => {\n            observer.next(index++);\n        }, time);\n\n        return () => {\n            // will run when we unsubscribe\n            clearnInterval(interval);\n        };\n    });\n}\n\nfunction createSubscriber(tag) {\n    return {\n        next(item) { console.log(\\`\\${tag}.next \\${item}\\`); },\n        error(error) { console.log(\\`\\${tag}.error \\${error.stack || error }\\`); },\n        complete() { console.log(\\`\\${tag}.complete\\`); }\n    };\n}\n\nfunction take(observable, amount) {\n    return new Rx.Observable(observer => {\n\n    });\n}\n\n// this is the core of subscriptions\nfunction take(sourceObservable, amount) {\n    return new Rx.Observable(observer => {\n        let count = 0;\n        const subscription = sourceObservable.subscribe({\n            next(item) {\n                observer.next(item);\n                if (++count >= amount) {\n                    observer.complete();\n                }\n            },\n            error(error) { observer.error(error); },\n            complete() { observer.complete(); }\n        });\n\n        return () => subscription.unsubscribe();\n    });\n}\n\nconst everySecond_ = createInterval(1000);\nconst firstFiveSeconds = take(everySecond_, 5);\nconst subscription = everySecond_.subscribe(createSubscriber(\"one\"));\nsetTimeout(() => {\n    subscription.unsubscribe();\n}, 3500);\n`}</code></pre>\n    <p>{`This subscription will console.log out forever and ever and ever... - unless, we dispose of a description`}</p>\n    <p>{`How do operators come into play?`}</p>\n    <p>{`We could run something like `}<inlineCode parentName=\"p\">{`const subscription = everySecond_.take(3)subscribe(createSubscriber(\"one\"));`}</inlineCode></p>\n    <p>{`The steps for it are that it listens for a source and emits a transformation!`}</p>\n    <h2 {...{\n      \"id\": \"33-built-in-observables\"\n    }}>{`3.3: Built in Observables`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import Rx from 'rxjs/Rx';\n\n\nRx.Observable.interval(500)\n    .take(5)\n    .subscribe(createSubscriber(\"interval\"));\n\nRx.Observable.timer(1000, 500)\n    .take(3)\n    .subscribe(createSubscriber(\"timer\");\n\n// note, array doesn't work - use from\nRx.Observable.of(\"Hello world!\", 42, \"whoa\")\n    .subscribe(createSubscriber(\"of\"));\n\nRx.Observable.from([\"Hello world!\", 42, \"whoa\"])\n    .subscribe(createSubscriber(\"of\"));\n\nRx.Observable.from(generate())\n    .subscribe(createSubscriber(\"of\"));\n\n\nRx.Observable.from(\"hello world!\")\n    .subscribe(createSubscriber(\"of\"));\n\n// it can also take in a generator function!\n\nfunction* generate() {\n    yield 1;\n    yield 5;\n    yield \"HEY\";\n}\n\nRx.Observable.throw(new Error(\"Hey\"))\n    .subscribe(createSubscriber(\"error\"));\n\n// empty\nRx.Observable.empty()\n    .subscribe(createSubscriber(\"empty\"));\n\n// defer\nlet sideEffect = 0;\nconst defer = Rx.Observable.defer(() => {\n    sideEffect++;\n    return Rx.Obserable.of(sideEffect);\n});\n\ndefer.subscribe(createSubscriber(\"defer.one\"));\ndefer.subscribe(createSubscriber(\"defer.two\"));\ndefer.subscribe(createSubscriber(\"defer.three\"));\n\nRx.Observable.never()\n    .subscribe(createSubscriber(\"never\"));\n\nRx.Observable.range(10, 30)\n    .subscribe(createSubscriber(\"range\"));\n`}</code></pre>\n    <p>{`Benefits of the iterable `}<inlineCode parentName=\"p\">{`from`}</inlineCode>{`?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`For every iterable, we could map every element.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"34-using-rxjs-with-node-jquery-and-promises\"\n    }}>{`3.4: Using RxJS with Node, jQuery and Promises`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`Rx.Observable.fromEvent($title, 'keyup')\n  .map((e) => e.target.value)\n  .distinctUntilChanged()\n  .debounceTime(500)\n  .switchMap(getItems)\n  .subscribe((items) => {\n    $results.empty();\n    $results.append(items.map((i) => $('<li />').text(i)));\n  });\n`}</code></pre>\n    <p>{`NOTE: Without the subscribe, it will never be subscribed to the dom!`}</p>\n    <p>{`If we have the `}<inlineCode parentName=\"p\">{`.take(10)`}</inlineCode>{` - it would complete after taking 10 and then furthermore unsubscribe and be great for performance!`}</p>\n    <p><inlineCode parentName=\"p\">{`fromEvent`}</inlineCode>{` calls from `}<inlineCode parentName=\"p\">{`addEventListener`}</inlineCode>{`, so it can do powerful things like `}<inlineCode parentName=\"p\">{`keyup`}</inlineCode>{` for those that don't initially support it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import fs from 'fs';\n\nfs.readdir('./src/server', (err, items) => {\n  if (err) console.log(err);\n  else {\n    console.log(items);\n  }\n});\n\n// alternative\nconst readdir = Rx.Observable.bindNodeCallBack(fs.readdir);\n\nreaddir('./src/server')\n  // mergeMap creates iterable converted from array\n  .mergeMap((files) => Rx.Observable.from(files))\n  .map((file) => \\`MANIPULATED \\${file}\\`)\n  .subscribe(createSubscriber('readdir'));\n\n// promises\n\nfunction getItem() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Hello');\n    }, 1000);\n  });\n}\n\nRx.Observable.fromPromise(getItem()).subscribe(createSubscriber('promise'));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"35-subjects\"\n    }}>{`3.5: Subjects`}</h2>\n    <p>{`Subjects are another Rx primitive. They are both an observable and a observer! Used to bridge non-reactive code with reactive code.`}</p>\n    <p>{`Behaviour, replay subjects etc.`}</p>\n    <p><em parentName=\"p\">{`Warning`}</em>{`: you should only really consider them as a last resort when bridging non-reactive and reactive code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const simple = new Rx.Subject();\n\nsimple.subscribe(createSubscriber('simple'));\n\nsimple.next('Hello');\nsimple.next('World');\nsimple.complete();\n\nconst interval = Rx.Observable.interval(1000).take(5);\nconst intervalSubject = new Rx.Subject();\nintervalSubject.subscribe(interval);\n\nintervalSubject.subscribe(createSubscriber('sub1'));\nintervalSubject.subscribe(createSubscriber('sub2'));\nintervalSubject.subscribe(createSubscriber('sub3'));\n\n// subscribes after three seconds\nsetTimeout(() => {\n  intervalSubject.subscribe(createSubscriber('LOOK AT ME'));\n}, 3000);\n`}</code></pre>\n    <p>{`Before, we had to invoke a function that call `}<inlineCode parentName=\"p\">{`next`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`complete`}</inlineCode>{`.`}</p>\n    <p>{`In the above example, intervalSubject is acting as a proxy to another observable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// needs init state parameter\nconst currentUser = new Rx.BehaviorSubject({ isLoggedIn: false });\nconst isLoggedIn = currentUser.map((u) => u.isLoggedIn);\n\ncurrentUser.next({ isLoggedIn: false });\nisLoggedIn.subscribe(createSubscriber('isLoggedIn'));\n\nsetTimeout(() => {\n  currentUser.next({ isLoggedIn: true, name: 'nelson' });\n}, 3000);\n\nsetTimeout(() => {\n  isLogged.subscribe(createSubscription('delayed'));\n}, 1500);\n`}</code></pre>\n    <p>{`How do you remember multiple states?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const replay = new Rx.ReplaySubject(3);\nreplay.next(1);\nreplay.next(2);\n\nreplay.subscribe(createSubscriber(\"one\"));\n\nreplay.next(3);\nreplay.next(4);\nreplay.next(5);\n\n// this subscription only gets the previous three items\nreplay.subscribe(createSubscriber(\"two\"));\n\nreplay.next(6);\n\n// what you see\none.next 1\none.next 2\none.next 3\none.next 4\none.next 5\ntwo.next 3\ntwo.next 4\ntwo.next 5\none.next 6\ntwo.next 6\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Async Subjects`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`const apiCall = new Rx.AsyncSubject();\napiCall.next(1);\n\napiCall.subscribe(createSubscriber(\"one\"));\napiCall.next(2);\n\n// only will emit the final item before it is complete\napiCall.complete();\n\n// if you subscribe to it again, that final value will be emitted\nsetTimeout(() => {\n    apiCall.subscribe(createSubscriber(\"two\"));\n}, 2000);\n\n// output\none.next 2\none.complete\ntwo.next 2\ntwo.complete\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Subject Summary`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`if you can get around it, don't use subjects unless you have to`}</li>\n      <li parentName=\"ul\">{`you should use an observable workflow where possible`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"36-rxjs-resources-and-documentation\"\n    }}>{`3.6: RxJS Resources and Documentation`}</h2>\n    <p>{`Sources:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/ReactiveX/rxjs\"\n        }}>{`RxJS Github`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://rxmarbles.com/\"\n        }}>{`RxMarbles`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://jaredforsyth.com/rxvision/examples/playground/\"\n        }}>{`RxVision Playground`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"37-sharing-observable-sequences\"\n    }}>{`3.7: Sharing Observable Sequences`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Hot Observable: It will produce events regardless of if you're listening - eg.`}<inlineCode parentName=\"li\">{`fromEvent($title, 'keyup')`}</inlineCode></li>\n      <li parentName=\"ul\">{`Cold Obserable: Starts once you subscribe - Interval Observables are actually cold observables`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// this example shows when both start from the beginning eg cold\nimport Rx from 'rxjs/Rx';\n\nconst interval = Rx.Observable.interval(1000).take(10);\n\nsetTimeout(() => {\n  interval.subscribe(createSubscriber('one'));\n}, 1200);\n\nsetTimeout(() => {\n  interval.subscribe(createSubscriber('two'));\n}, 3200);\n\n// HOT\n// connectable observable\nimport Rx from 'rxjs/Rx';\n\nconst interval = Rx.Observable.interval(1000)\n  .take(10)\n  .publish();\n\ninterval.connect();\n\nsetTimeout(() => {\n  interval.subscribe(createSubscriber('one'));\n}, 1200);\n\nsetTimeout(() => {\n  interval.subscribe(createSubscriber('two'));\n}, 3200);\n\n// if you connect after a set interval, then it begins executing and sharing the underlying observable\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Why would you want a hot variable?`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// here subscribe console.log runs twice\nconst socket = { on: () => {} };\nconst chatMessage = new Rx.Observable((observable) => {\n  console.log('subscribed');\n  socket.on('chat:message', (message) => observer.next(message));\n});\n\nchatMessage.subscribe(createSubscriber('one'));\nchatMessage.subscribe(createSubscriber('two'));\n\n// without it\n\nconst socket = { on: () => {} };\nconst chatMessage = new Rx.Observable((observable) => {\n  console.log('subscribed');\n  socket.on('chat:message', (message) => observer.next(message));\n}).publish();\n\nchatMessage.connect();\n\nchatMessage.subscribe(createSubscriber('one'));\nchatMessage.subscribe(createSubscriber('two'));\n\n// using publishLast()\nconst simple = new Rx.Observable((observer) => {\n  observer.next('one');\n  observer.next('two');\n  observer.complete();\n});\n\n// always returns the last value\nconst published = simple.publishLast();\n\n// even if we subscribe before connect, both will get the last value\npublished.subscribe(createSubscriber('one'));\npublished.connect();\npublished.subscribe(creaSubscriber('two'));\n\n// using publishReplay()\nconst simple = new Rx.Observable((observer) => {\n  observer.next('one');\n  observer.next('two');\n  observer.next('three');\n\n  return () => console.log('Disposed');\n});\n\n// always returns the last value\nconst published = simple.publishReplay(2);\n\n// even if we subscribe before connect, both will get the last value\n// to dispose without running complete, we need to disconnect by unsubscribing\nconst sub1 = published.subscribe(createSubscriber('one'));\nconst connection = published.connect();\nconst sub2 = published.subscribe(creaSubscriber('two'));\n\nsub1.unsubscribe();\nsub2.unsubscribe();\n\nconnection.unsubscribe();\n`}</code></pre>\n    <p>{`Refcount is a way to automatically handle the connection and the unsubscription of a connection observable.`}</p>\n    <p>{`It will connect to the first subscription and then disconnected on the last unsubscribe.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// using refCount()\nconst simple = new Rx.Observable(observer => {\n    observer.next(\"one\");\n    observer.next(\"two\");\n    observer.next(\"three\");\n\n    return () => console.log(\"Disposed\");\n});\n\n// always returns the last value\nconst published = simple.publishReplay(2).refCount();\n\n// even if we subscribe before connect, both will get the last value\n// to dispose without running complete, we need to disconnect by unsubscribing\nconst sub1 = published.subscribe(createSubscriber(\"one\"));\nconst sub2 = published.subscribe(creaSubscriber(\"two\"));\n\nsub1.unsubscribe();\nsub2.unsubscribe();\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`publish().refCount()`}</inlineCode>{` is done so often, that is has been turned in `}<inlineCode parentName=\"p\">{`share()`}</inlineCode>{`.`}</p>\n    <p>{`Taxing processes that you don't want to repeat but you want multiple things to hook into the result, then turn it into a hot subscription.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"40-operators-that-everyone-should-know\"\n    }}>{`4.0: Operators that everyone should know`}</h2>\n    <p>{`Now we will just talk about the different primary operators that you will work with.`}</p>\n    <h2 {...{\n      \"id\": \"41-do--finally--startwith--filter\"\n    }}>{`4.1: Do / Finally / StartWith / Filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// do => get the next value and pass it back unchanged\n// finally => only completes after the range has completed, runs right at the end of the final value\n// filter => filters out given statement\n// interval => call timeout\n// startWith => set initial value\n\nRx.Observable.range(1, 10)\n  .do((a) => console.log(\\`From do \\${a}\\`))\n  .map((a) => a * a)\n  .subscribe(createSubscriber('simple'));\n\nRx.Observable.range(1, 10)\n  .finally(() => console.log(\\`From finally\\`))\n  .map((a) => a * 2)\n  .subscribe(createSubscriber('finally'));\n\nRx.Observable.range(1, 10)\n  .filter((a) => a < 5)\n  .map((a) => a * 2)\n  .subscribe(createSubscriber('filter'));\n\nRx.Observable.interval(1000)\n  .startWith(-1)\n  .subscribe(createSubscriber('interval'));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"42-merge--concat\"\n    }}>{`4.2: Merge / Concat`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// merge - merge many observables togethers\n// concat - this concatenates observables to the end of another, can also take a list of Observables\n\nRx.Observable.interval(1000)\n    .merge(Rx.Observable.interval(500))\n    .take(5)\n    .subscribe(createSubscriber(\"merge1\"));\n\nRx.Observable.merge(\n    Rx.Observable.interval(1000).map(i => \\`\\${i} seconds),\n    Rx.Observable.interval(500).map(i => \\`\\${i} half seconds))\n    .take(5)\n    .subscribe(createSubscriber('merge2'));\n\n// different events for merged observables\nRx.Observable.merge(\n    socket.on$(\"login\").map(user => processUser(user),\n    socket.on$(\"logout\").map(() => null));\n\nRx.Observable.range(1, 5)\n    .concat(Rx.Observable.range(10,3))\n    .subscribe(createSubscriber(\"concat1\"));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"43-map--mergemap--switchmap\"\n    }}>{`4.3: Map / MergeMap / SwitchMap`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// map - a projection on every item that comes in\n// mergeMap - select many, does projection and then has another thing that we will work on\n// switchMap - similar to mergeMap but replaces with the latest value if another emission comes in\n\nfunction arrayMap(arr, proj) {\n  let returnArray = [];\n  for (let i of arr) {\n    returnArray.push(proj(item));\n  }\n\n  return returnArray;\n}\n\narrayMap([1, 2, 3], (a) => a * a);\n\n// imagine array of dicts\nconst albums = [{}, {}];\n\nfunction arrayMergeMap(arr, proj) {\n  let returnArray = [];\n  for (let i of arr) {\n    let projArray = proj(item);\n    for (let j of projArray) {\n      returnArray.push(proj(item));\n    }\n  }\n\n  return returnArray;\n}\n\nconst tracks = arrayMergeMap(albums, (album) => album.tracks);\n\nRx.Observable.range(1, 3)\n  .mergeMap((i) =>\n    Rx.Observable.timer(i * 1000).map(() => \\`After \\${i} seconds\\`)\n  )\n  .subscribe(createSubscriber('mergeMap'));\n\nRx.Observable.fromPromise(getTracks())\n  .mergeMap((tracks) => Rx.Observable.from(tracks))\n  .subscribe(createSubscriber('tracks'));\n\nfunction getTracks() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(['track 1', 'track 2', 'track 3']);\n    }, 1000);\n  });\n}\n\n// synchronous example\nRx.Observable.of('my query')\n  .do(() => console.log('Querying'))\n  .mergeMap((a) => query(a))\n  .do(() => console.log('After querying'))\n  .subscribe(createSubscriber('query'));\n\nfunction query(value) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('This is the resolved value');\n    }, 1000);\n  });\n}\n\n// switch map\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"44-reduce--scan\"\n    }}>{`4.4: Reduce / Scan`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// reducer (acc, value) and works on value - doesn't emit until the completion\n// scan - processes and emits as it comes in\nRx.Observable.range(1, 10)\n  .reduce((acc, value) => acc + value)\n  .subscribe(createSubscriber('reduce'));\n\nRx.Observable.range(1, 10)\n  .scan((acc, value) => acc + value)\n  .subscribe(createSubscriber('scan'));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"45-buffer--toarray\"\n    }}>{`4.5: Buffer / ToArray`}</h2>\n    <p>{`There have been some big changes to how `}<inlineCode parentName=\"p\">{`buffer`}</inlineCode>{` has been used.`}</p>\n    <p>{`Buffer takes in an observable.`}</p>\n    <p>{`toArray will convert results into an array. - still has a clean exit if the never() is implemented!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`Rx.Observable.range(1, 100)\n    .bufferCount(25)\n    .subscribe(createSubscriber(\"items\");\n\n// will take 25 items and pushing them into an array\n\n\nRx.Observable.interval(500)\n    .bufferTime(2000)\n    .subscribe(createSubscriber(\"bufferTime\");\n\n// same behaviour!\n// emitting event causes buffer to flush\nRx.Observable.interval(500)\n    .buffer(Rx.Observable.interval(2000))\n    .subscribe(createSubscriber(\"buffer\");\n\n//\n// toArray\n//\n\nRx.Observable.range(1, 10)\n    .toArray()\n    .subscribe(createSubscriber(\"range\"));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"46-first--last--single--skip--take\"\n    }}>{`4.6: First / Last / Single / Skip / Take`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const simple = new Rx.Observable((observer) => {\n  console.log('Generating sequence');\n  observer.next(1);\n  observer.next(2);\n  observer.next(3);\n  observer.next(4);\n  observer.complete();\n});\n\nsimple.first().subscribe(createSubscriber('first'));\n\nsimple.last().subscribe(createSubscriber('last'));\n\n// displays 1 & 4\n// if nothing is in there, there are EmptyError(s) thrown\n\n// single.error thrown is more than one error thrown\nsimple.single().subscribe(createSubscriber('single'));\n\n// take and skip won't throw errors\n// take does the first however emissions\n// skip will take the emissions after a number\nsimple.take(2).subscribe(createSubscriber('take'));\n\nsimple.skip(2).subscribe(createSubscriber('skip'));\n\n// 3, 4\nsimple\n  .skip(2)\n  .take(2)\n  .subscribe(createSubscriber('skip'));\n\n// skipWhile / takeWhile\nRx.Observable.interval(500)\n  .skipWhile((i) => i < 4)\n  .takeWhile((i) => i < 10)\n  .subscribe(createSubscriber('skipWhile/takeWhile'));\n\n// what's until and take emissions until\nRx.Observable.interval(500)\n  .skipUntil(Rx.Observable.timer(1000))\n  .takeUntil(Rx.Observable.timer(4000))\n  .subscribe(createSubscriber('skipUntil'));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"47-zip--withlatestfrom--combinelatest\"\n    }}>{`4.7: Zip / WithLatestFrom / CombineLatest`}</h2>\n    <p>{`How can we combine observables in different ways?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function arrayZip(arr1, arr2, selectorFunc) {\n  const count = Math.min(arr1.length, arr2.length);\n  const results = [];\n\n  for (let i = 0; i < count; i++) {\n    const combined = selector(arr1[i], arr2[i]);\n    results.push(combined);\n  }\n\n  return results;\n}\n\nconst arr1 = [32, 2, 52, 43, 54];\nconst arr2 = [1, 0, 10, 4, 1, 4, 6, 2];\nconst results = arrayZip(arr1, arr2, (left, right) => left * right);\n\nconsole.log(results);\n\n// in RxJS\nRx.Observable.range(1.1)\n  .zip(\n    Rx.Observable.interval(500),\n    (left, right) => \\`item: \\${left}, at \\${right * 500}\\`\n  )\n  .subscribe(createSubscriber('zip'));\n\n// emits value when source emits\n// can also pass (left, right) function like zip as second parameter\nRx.Observable.interval(1000)\n  .withLatestFrom(Rx.Observable.interval(500))\n  .subscribe(createSubscriber('withLatestFrom'));\n\n// emit value if either do\nRx.Observable.interval(1000)\n  .combineLatest(Rx.Observable.interval(500))\n  .subscribe(createSubscriber('withLatestFrom'));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"48-error-handling-catch-and-retry\"\n    }}>{`4.8: Error Handling Catch and Retry`}</h2>\n    <p>{`If an error happens, an observer stops emitting and can prevent values from emitting at all. Error handling is very important!`}</p>\n    <p><inlineCode parentName=\"p\">{`.catch(error => Rx.Observable.of(error))`}</inlineCode>{` can pass this down as an Observable.`}</p>\n    <p><inlineCode parentName=\"p\">{`.retry()`}</inlineCode>{` we can pass in with a numeral to ensure that we either keep retrying or retry a certain number of times.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}