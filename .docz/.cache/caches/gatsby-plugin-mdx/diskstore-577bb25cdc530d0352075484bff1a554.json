{"expireTime":9007200867335890000,"key":"gatsby-plugin-mdx-entire-payload-69fc0ebf44201d4eab40665b5dc7096d-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Delegation in iOS","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":20,"offset":186},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":20,"offset":186},"indent":[]}},{"type":"jsx","value":"<!-- TOC -->","position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":13,"offset":200},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#delegation-in-ios","children":[{"type":"text","value":"Delegation in iOS","position":{"start":{"line":12,"column":4,"offset":205},"end":{"line":12,"column":21,"offset":222},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":204},"end":{"line":12,"column":42,"offset":243},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":204},"end":{"line":12,"column":42,"offset":243},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#iosd-1-intro-to-design-patterns","children":[{"type":"text","value":"IOSD-1: Intro to Design Patterns","position":{"start":{"line":13,"column":6,"offset":249},"end":{"line":13,"column":38,"offset":281},"indent":[]}}],"position":{"start":{"line":13,"column":5,"offset":248},"end":{"line":13,"column":73,"offset":316},"indent":[]}}],"position":{"start":{"line":13,"column":5,"offset":248},"end":{"line":13,"column":73,"offset":316},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":246},"end":{"line":13,"column":73,"offset":316},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#iosd-2-learning-by-example---racing-horses","children":[{"type":"text","value":"IOSD-2: Learning by example - Racing Horses","position":{"start":{"line":14,"column":6,"offset":322},"end":{"line":14,"column":49,"offset":365},"indent":[]}}],"position":{"start":{"line":14,"column":5,"offset":321},"end":{"line":14,"column":95,"offset":411},"indent":[]}}],"position":{"start":{"line":14,"column":5,"offset":321},"end":{"line":14,"column":95,"offset":411},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":319},"end":{"line":14,"column":95,"offset":411},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#iosd-3-acting-as-a-delegate","children":[{"type":"text","value":"IOSD-3: Acting as a Delegate","position":{"start":{"line":15,"column":6,"offset":417},"end":{"line":15,"column":34,"offset":445},"indent":[]}}],"position":{"start":{"line":15,"column":5,"offset":416},"end":{"line":15,"column":65,"offset":476},"indent":[]}}],"position":{"start":{"line":15,"column":5,"offset":416},"end":{"line":15,"column":65,"offset":476},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":414},"end":{"line":15,"column":65,"offset":476},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#iosd-4-examples---cllocation-manager","children":[{"type":"text","value":"IOSD-4: Examples - CLLocation Manager","position":{"start":{"line":16,"column":6,"offset":482},"end":{"line":16,"column":43,"offset":519},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":481},"end":{"line":16,"column":83,"offset":559},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":481},"end":{"line":16,"column":83,"offset":559},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":479},"end":{"line":16,"column":83,"offset":559},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#iosd-5-examples---uitextfielddelegate","children":[{"type":"text","value":"IOSD-5: Examples - UITextFieldDelegate","position":{"start":{"line":17,"column":6,"offset":565},"end":{"line":17,"column":44,"offset":603},"indent":[]}}],"position":{"start":{"line":17,"column":5,"offset":564},"end":{"line":17,"column":85,"offset":644},"indent":[]}}],"position":{"start":{"line":17,"column":5,"offset":564},"end":{"line":17,"column":85,"offset":644},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":562},"end":{"line":17,"column":85,"offset":644},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":246},"end":{"line":17,"column":85,"offset":644},"indent":[3,3,3,3]}}],"position":{"start":{"line":12,"column":1,"offset":202},"end":{"line":17,"column":85,"offset":644},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":12,"column":1,"offset":202},"end":{"line":17,"column":85,"offset":644},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"<!-- /TOC -->","position":{"start":{"line":19,"column":1,"offset":646},"end":{"line":19,"column":14,"offset":659},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"IOSD-1: Intro to Design Patterns","position":{"start":{"line":21,"column":4,"offset":664},"end":{"line":21,"column":36,"offset":696},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":661},"end":{"line":21,"column":36,"offset":696},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Three common issues developers have come across:","position":{"start":{"line":23,"column":1,"offset":698},"end":{"line":23,"column":49,"offset":746},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":698},"end":{"line":23,"column":49,"offset":746},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Avoiding inflexible objects","position":{"start":{"line":25,"column":5,"offset":752},"end":{"line":25,"column":32,"offset":779},"indent":[]}}],"position":{"start":{"line":25,"column":5,"offset":752},"end":{"line":25,"column":32,"offset":779},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":748},"end":{"line":25,"column":32,"offset":779},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Maintaining loose relationships","position":{"start":{"line":26,"column":5,"offset":784},"end":{"line":26,"column":36,"offset":815},"indent":[]}}],"position":{"start":{"line":26,"column":5,"offset":784},"end":{"line":26,"column":36,"offset":815},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":780},"end":{"line":26,"column":36,"offset":815},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Avoid tight coupling","position":{"start":{"line":27,"column":5,"offset":820},"end":{"line":27,"column":25,"offset":840},"indent":[]}}],"position":{"start":{"line":27,"column":5,"offset":820},"end":{"line":27,"column":25,"offset":840},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":816},"end":{"line":27,"column":25,"offset":840},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":748},"end":{"line":27,"column":25,"offset":840},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We use Design Pattern as a general, reusable solution to a commonly occurring problem within a given context, regardless of the particular domain.","position":{"start":{"line":29,"column":1,"offset":842},"end":{"line":29,"column":147,"offset":988},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":842},"end":{"line":29,"column":147,"offset":988},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An example - ","position":{"start":{"line":31,"column":1,"offset":990},"end":{"line":31,"column":14,"offset":1003},"indent":[]}},{"type":"inlineCode","value":"The Delegate Pattern","position":{"start":{"line":31,"column":14,"offset":1003},"end":{"line":31,"column":36,"offset":1025},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":990},"end":{"line":31,"column":36,"offset":1025},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"The Delegate Pattern","position":{"start":{"line":33,"column":2,"offset":1028},"end":{"line":33,"column":22,"offset":1048},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1027},"end":{"line":33,"column":23,"offset":1049},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1027},"end":{"line":33,"column":23,"offset":1049},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The delegate pattern is an alteration on the decorator pattern, a structural pattern that is focused on how we can compose objects to form larger objects.","position":{"start":{"line":35,"column":1,"offset":1051},"end":{"line":35,"column":155,"offset":1205},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1051},"end":{"line":35,"column":155,"offset":1205},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It is concerned with adding responsibilities to objects dynamically.","position":{"start":{"line":37,"column":1,"offset":1207},"end":{"line":37,"column":69,"offset":1275},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1207},"end":{"line":37,"column":69,"offset":1275},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"IOSD-2: Learning by example - Racing Horses","position":{"start":{"line":39,"column":4,"offset":1280},"end":{"line":39,"column":47,"offset":1323},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1277},"end":{"line":39,"column":47,"offset":1323},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"The Horse Class and Race Class","position":{"start":{"line":41,"column":2,"offset":1326},"end":{"line":41,"column":32,"offset":1356},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1325},"end":{"line":41,"column":33,"offset":1357},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1325},"end":{"line":41,"column":33,"offset":1357},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"import Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass Horse {\n    let name: String\n    let maxSpeed: Double\n    var distanceTraveled = 0.0\n    var currentLap = 1\n\n    init(name: String, maxSpeed: Double) {\n        self.maxSpeed = maxSpeed\n        self.name = name\n    }\n\n    var currentSpeed: Double {\n        let random = Double(arc4random())\n        return random.truncatingRemainder(dividingBy: maxSpeed - 13) + 13\n    }\n}\n\nclass Race {\n    let laps: Int\n    let lapLength: Double = 300\n    let participants: [Horse]\n\n    weak var delegate: HorseRaceDelegate?\n\n    // since we want to use a delegate, we do not create instances\n    // let tracker = Tracker()\n    // let broadcaster = RaceBroadcaster()\n\n    lazy var timer: Timer = Timer(timeInterval: 1, repeats: true) { timer in\n        self.updateProgress()\n    }\n\n    init(laps: Int, participants: [Horse]) {\n        self.laps = laps\n        self.participants = participants\n    }\n\n    func start() {\n        RunLoop.main.add(timer, forMode: .defaultRunLoopMode)\n        // tracker.updateRaceStart(with: Date())\n        delegate?.race(self, didStartAt: Date())\n        print(\"Race in progress...\")\n    }\n\n    func updateProgress() {\n        print(\"....\")\n        for horse in participants {\n            horse.distanceTraveled += horse.currentSpeed\n\n            if horse.distanceTraveled >= lapLength {\n                horse.distanceTraveled = 0\n\n                delegate?.addLapLeader(horse, forLap: horse.currentLap, atTime: Date())\n\n                // let lapKey = \"\\(Tracker.Keys.lapLeader) \\(horse.currentLap)\"\n                // if !tracker.stats.keys.contains(lapKey) {\n                //     tracker.updateLapLeaderWith(lapNumber: horse.currentLap, horse: horse, time: Date())\n                // }\n\n                horse.currentLap += 1\n\n                if horse.currentLap >= laps + 1 {\n                    // tracker.updateRaceEndWith(winner: horse, time: Date())\n                    delegate?.raceDidEndAt(self, didEndAt: Date(), withWinner: horse)\n                    stop()\n                    break\n                }\n            }\n        }\n    }\n\n    func stop() {\n        print(\"Race complete!\")\n        // timer.invalidate()\n        // tracker.printRaceSummary()\n    }\n}\n\nlet jubilee = Horse(name: \"Jubilee\", maxSpeed: 16)\nlet sonora = Horse(name: \"Sonora\", maxSpeed: 17)\nlet jasper = Horse(name: \"Jasper\", maxSpeed: 17)\n\nlet participants = [jubilee, sonora, jasper]\n\nlet race = Race(laps: 1, participants: participants)\nrace.start()","position":{"start":{"line":43,"column":1,"offset":1359},"end":{"line":135,"column":4,"offset":3929},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":137,"column":1,"offset":3931},"end":{"line":137,"column":4,"offset":3934},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"The Tracker Class","position":{"start":{"line":139,"column":2,"offset":3937},"end":{"line":139,"column":19,"offset":3954},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":3936},"end":{"line":139,"column":20,"offset":3955},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":3936},"end":{"line":139,"column":20,"offset":3955},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"class Tracker: HorseRaceDelegate {\n\n    struct Keys {\n        static let raceStartTime = \"raceStartTime\"\n        static let lapLeader = \"leaderForLap\"\n        static let raceEndTime = \"raceEndTime\"\n        static let winner = \"winner\"\n    }\n\n    var stats = [String: Any]()\n\n    // func updateRaceStart(with time: Date) {\n    //     stats.updateValue(time, forKey: Keys.raceStartTime)\n    // }\n\n    func race(_ race: Race, didStartAt time: Date) {\n    \tstats.updateValue(time, forKey: Keys.raceStartTime)\n    }\n\n\tfunc addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date) {\n\t\tlet lapLead = \"Horse: \\(horse.name), time: \\(time)\"\n        let lapLeadKey = \"\\(Keys.lapLeader) \\(number)\"\n\n        stats.updateValue(lapLead, forKey: lapLeadKey)\n\t}\n\n\tfunc race(_ race: Race, didEndAt time: Date, withWinner winner: Horse) {\n\t\tstats.updateValue(winner.name, forKey: Keys.winner)\n        stats.updateValue(time, forKey: Keys.raceEndTime)\n\t}\n\n    // get rid of the below method\n    func updateLapLeaderWith(lapNumber number: Int, horse: Horse, time: Date) {\n        let lapLead = \"Horse: \\(horse.name), time: \\(time)\"\n        let lapLeadKey = \"\\(Keys.lapLeader) \\(number)\"\n\n        stats.updateValue(lapLead, forKey: lapLeadKey)\n    }\n\n    // get rid of the below method\n    func updateRaceEndWith(winner: Horse, time: Date) {\n        stats.updateValue(winner.name, forKey: Keys.winner)\n        stats.updateValue(time, forKey: Keys.raceEndTime)\n    }\n\n    func printRaceSummary() {\n        print(\"***********\")\n\n        let raceStartTime = stats[Keys.raceStartTime]!\n        print(\"Race start time: \\(raceStartTime)\")\n\n        for (key, value) in stats where key.contains(Keys.lapLeader) {\n            print(\"\\(key): \\(value)\")\n        }\n\n        let raceEndTime = stats[Keys.raceEndTime]!\n        print(\"Race end time: \\(raceEndTime)\")\n\n        let winner = stats[Keys.winner]!\n        print(\"Winner: \\(winner)\")\n\n        print(\"***********\")\n    }\n}","position":{"start":{"line":141,"column":1,"offset":3957},"end":{"line":206,"column":4,"offset":5922},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, we use the Tracker methods and Keys to help monitor the results of the race.","position":{"start":{"line":208,"column":1,"offset":5924},"end":{"line":208,"column":94,"offset":6017},"indent":[]}}],"position":{"start":{"line":208,"column":1,"offset":5924},"end":{"line":208,"column":94,"offset":6017},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now so far so good, but what if we want a live broadcast?","position":{"start":{"line":210,"column":1,"offset":6019},"end":{"line":210,"column":58,"offset":6076},"indent":[]}}],"position":{"start":{"line":210,"column":1,"offset":6019},"end":{"line":210,"column":58,"offset":6076},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"However, trackers should do more than one job.","position":{"start":{"line":212,"column":1,"offset":6078},"end":{"line":212,"column":47,"offset":6124},"indent":[]}}],"position":{"start":{"line":212,"column":1,"offset":6078},"end":{"line":212,"column":47,"offset":6124},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This new class will care about the same info as Tracker, but Tracker objects are tied to a particular race. This becomes a problem since the Race also \"knows\" about the Tracker and Broadcast class. This coupling is too tight.","position":{"start":{"line":214,"column":1,"offset":6126},"end":{"line":214,"column":226,"offset":6351},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":6126},"end":{"line":214,"column":226,"offset":6351},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"class RaceBroadcaster {\n\t// methods to try to help broadcast information on the Race object\n}","position":{"start":{"line":216,"column":1,"offset":6353},"end":{"line":220,"column":4,"offset":6454},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The Race class shouldn't care about implementing the methods from the Tracker and Broadcast class. Those classes should just listen to the information that Race gives out.","position":{"start":{"line":222,"column":1,"offset":6456},"end":{"line":222,"column":172,"offset":6627},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":6456},"end":{"line":222,"column":172,"offset":6627},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"How do we do this? By implementing a delegate.","position":{"start":{"line":224,"column":1,"offset":6629},"end":{"line":224,"column":47,"offset":6675},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":6629},"end":{"line":224,"column":47,"offset":6675},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We will make a \"contract\" that uses a protocol.","position":{"start":{"line":226,"column":1,"offset":6677},"end":{"line":226,"column":48,"offset":6724},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":6677},"end":{"line":226,"column":48,"offset":6724},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This will implement the rules that anything that wants to interact with the Race class must adhere to.","position":{"start":{"line":228,"column":1,"offset":6726},"end":{"line":228,"column":103,"offset":6828},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":6726},"end":{"line":228,"column":103,"offset":6828},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"HorseRaceDelegate Protocol","position":{"start":{"line":230,"column":2,"offset":6831},"end":{"line":230,"column":28,"offset":6857},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":6830},"end":{"line":230,"column":29,"offset":6858},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":6830},"end":{"line":230,"column":29,"offset":6858},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"protocol HorseRaceDelegate: class {\n\t// this will require any adhering class to use the didStartAt method\n\tfunc race(_ race: Race, didStartAt time: Date)\n\tfunc addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date)\n\tfunc race(_ race: Race, didEndAt time: Date, withWinner winner: Horse)\n}","position":{"start":{"line":232,"column":1,"offset":6860},"end":{"line":239,"column":4,"offset":7171},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This protocol will now govern the events that we care about. We can create a delegate instance, but since the race doesn't \"need\" to have to have a tracker, we will make it optional and also give it the \"weak\" var to prevent a reference cycle.","position":{"start":{"line":241,"column":1,"offset":7173},"end":{"line":241,"column":244,"offset":7416},"indent":[]}}],"position":{"start":{"line":241,"column":1,"offset":7173},"end":{"line":241,"column":244,"offset":7416},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since only classes can be at the end of a weak relationship, we are violating the rule, so we can make the delegate class bound.","position":{"start":{"line":243,"column":1,"offset":7418},"end":{"line":243,"column":129,"offset":7546},"indent":[]}}],"position":{"start":{"line":243,"column":1,"offset":7418},"end":{"line":243,"column":129,"offset":7546},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The delegate will be used by the Race class to delegate tasks out. We don't care which object is acting as the delegate, we just know that someone might be.","position":{"start":{"line":245,"column":1,"offset":7548},"end":{"line":245,"column":157,"offset":7704},"indent":[]}}],"position":{"start":{"line":245,"column":1,"offset":7548},"end":{"line":245,"column":157,"offset":7704},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now in the methods, we can use the delegate. The class won't care about who is listening for the delegate.","position":{"start":{"line":247,"column":1,"offset":7706},"end":{"line":247,"column":107,"offset":7812},"indent":[]}}],"position":{"start":{"line":247,"column":1,"offset":7706},"end":{"line":247,"column":107,"offset":7812},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once we have a class that implements a delegate, how do we then have a another class act as a delegate?","position":{"start":{"line":249,"column":1,"offset":7814},"end":{"line":249,"column":104,"offset":7917},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":7814},"end":{"line":249,"column":104,"offset":7917},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That means that for the class (eg Tracker), it needs to conform to the delegate.","position":{"start":{"line":251,"column":1,"offset":7919},"end":{"line":251,"column":81,"offset":7999},"indent":[]}}],"position":{"start":{"line":251,"column":1,"offset":7919},"end":{"line":251,"column":81,"offset":7999},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we've conformed to the protocol, we can assign an instance of Tracker to that delegate property to listen in!","position":{"start":{"line":253,"column":1,"offset":8001},"end":{"line":253,"column":119,"offset":8119},"indent":[]}}],"position":{"start":{"line":253,"column":1,"offset":8001},"end":{"line":253,"column":119,"offset":8119},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"let tracker = Tracker();\nrace.delegate = tracker;","position":{"start":{"line":255,"column":1,"offset":8121},"end":{"line":258,"column":4,"offset":8183},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This now works, because within the Race class, we're already tracking the relevant information and passing them along to the delegate.","position":{"start":{"line":260,"column":1,"offset":8185},"end":{"line":260,"column":135,"offset":8319},"indent":[]}}],"position":{"start":{"line":260,"column":1,"offset":8185},"end":{"line":260,"column":135,"offset":8319},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Rather than worry about the events itself, the class can delegate can pass out the information to the qualified objects.","position":{"start":{"line":262,"column":1,"offset":8321},"end":{"line":262,"column":121,"offset":8441},"indent":[]}}],"position":{"start":{"line":262,"column":1,"offset":8321},"end":{"line":262,"column":121,"offset":8441},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"IOSD-3: Acting as a Delegate","position":{"start":{"line":264,"column":4,"offset":8446},"end":{"line":264,"column":32,"offset":8474},"indent":[]}}],"position":{"start":{"line":264,"column":1,"offset":8443},"end":{"line":264,"column":32,"offset":8474},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So why do we need to decouple in the first place?","position":{"start":{"line":266,"column":1,"offset":8476},"end":{"line":266,"column":50,"offset":8525},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":8476},"end":{"line":266,"column":50,"offset":8525},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It will become far more manageable once you start creating Objects that focus on just one job.","position":{"start":{"line":268,"column":1,"offset":8527},"end":{"line":268,"column":95,"offset":8621},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":8527},"end":{"line":268,"column":95,"offset":8621},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Analogy:","position":{"start":{"line":270,"column":1,"offset":8623},"end":{"line":270,"column":9,"offset":8631},"indent":[]}}],"position":{"start":{"line":270,"column":1,"offset":8623},"end":{"line":270,"column":9,"offset":8631},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You are the CEO of an important company and have many tasks to do, but many of them involve other side tasks that are important.","position":{"start":{"line":272,"column":1,"offset":8633},"end":{"line":272,"column":129,"offset":8761},"indent":[]}}],"position":{"start":{"line":272,"column":1,"offset":8633},"end":{"line":272,"column":129,"offset":8761},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of doing it all yourself, you delegate it out to an assistant.","position":{"start":{"line":274,"column":1,"offset":8763},"end":{"line":274,"column":71,"offset":8833},"indent":[]}}],"position":{"start":{"line":274,"column":1,"offset":8763},"end":{"line":274,"column":71,"offset":8833},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Beforehand, you need to define what they do. Think of the requirements as the protocol.","position":{"start":{"line":276,"column":1,"offset":8835},"end":{"line":276,"column":88,"offset":8922},"indent":[]}}],"position":{"start":{"line":276,"column":1,"offset":8835},"end":{"line":276,"column":88,"offset":8922},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If they have all these abilities, they conform to the protocol.","position":{"start":{"line":278,"column":1,"offset":8924},"end":{"line":278,"column":64,"offset":8987},"indent":[]}}],"position":{"start":{"line":278,"column":1,"offset":8924},"end":{"line":278,"column":64,"offset":8987},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now you hire and give the tasks to the employee - they are now your delegate.","position":{"start":{"line":280,"column":1,"offset":8989},"end":{"line":280,"column":78,"offset":9066},"indent":[]}}],"position":{"start":{"line":280,"column":1,"offset":8989},"end":{"line":280,"column":78,"offset":9066},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"However, if they quit - that's cool. You can look for another delegate that conforms.","position":{"start":{"line":282,"column":1,"offset":9068},"end":{"line":282,"column":86,"offset":9153},"indent":[]}}],"position":{"start":{"line":282,"column":1,"offset":9068},"end":{"line":282,"column":86,"offset":9153},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Typically, you need the delegates to be weak. The reason is that it's total valid to have a circular relationship.","position":{"start":{"line":284,"column":1,"offset":9155},"end":{"line":284,"column":115,"offset":9269},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":9155},"end":{"line":284,"column":115,"offset":9269},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example, if you have a class ","position":{"start":{"line":286,"column":1,"offset":9271},"end":{"line":286,"column":30,"offset":9300},"indent":[]}},{"type":"inlineCode","value":"RaceManager","position":{"start":{"line":286,"column":30,"offset":9300},"end":{"line":286,"column":43,"offset":9313},"indent":[]}},{"type":"text","value":" that conforms, they can also have race of type Race as a property, we've created a strong relationship by default.","position":{"start":{"line":286,"column":43,"offset":9313},"end":{"line":286,"column":158,"offset":9428},"indent":[]}}],"position":{"start":{"line":286,"column":1,"offset":9271},"end":{"line":286,"column":158,"offset":9428},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since the Manager also conforms to the HorseRaceDelegate, you can have one that references the other. If they had a strong cycle, we couldn't get rid of the objects and it would cause a memory leak.","position":{"start":{"line":288,"column":1,"offset":9430},"end":{"line":288,"column":199,"offset":9628},"indent":[]}}],"position":{"start":{"line":288,"column":1,"offset":9430},"end":{"line":288,"column":199,"offset":9628},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"class RaceManager: HorseRaceDelegate {\n\n    let race: Race\n\n    init(race: Race) {\n        self.race = race\n        race.delegate = self\n        race.start()\n    }\n\n    func race(_ race: Race, didStartAt time: Date) {\n        // some implementation\n    }\n\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date) {\n        // some implementation\n    }\n\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse) {\n        // some implementation\n    }\n}","position":{"start":{"line":290,"column":1,"offset":9630},"end":{"line":313,"column":4,"offset":10128},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"IOSD-4: Examples - CLLocation Manager","position":{"start":{"line":315,"column":4,"offset":10133},"end":{"line":315,"column":41,"offset":10170},"indent":[]}}],"position":{"start":{"line":315,"column":1,"offset":10130},"end":{"line":315,"column":41,"offset":10170},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using the CoreLocation Framework, we can create a LocationManager class.","position":{"start":{"line":317,"column":1,"offset":10172},"end":{"line":317,"column":73,"offset":10244},"indent":[]}}],"position":{"start":{"line":317,"column":1,"offset":10172},"end":{"line":317,"column":73,"offset":10244},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once we create the class, we can request for authorization.","position":{"start":{"line":319,"column":1,"offset":10246},"end":{"line":319,"column":60,"offset":10305},"indent":[]}}],"position":{"start":{"line":319,"column":1,"offset":10246},"end":{"line":319,"column":60,"offset":10305},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since we need to wait for a response, we actually use the delegate pattern to help assigned a delegate that will recieve info.","position":{"start":{"line":321,"column":1,"offset":10307},"end":{"line":321,"column":127,"offset":10433},"indent":[]}}],"position":{"start":{"line":321,"column":1,"offset":10307},"end":{"line":321,"column":127,"offset":10433},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this case here, as long as we conform the the correct protocols, the delegate has already been created for us. For this one, we need the CLLocationManagerDelegate.","position":{"start":{"line":323,"column":1,"offset":10435},"end":{"line":323,"column":167,"offset":10601},"indent":[]}}],"position":{"start":{"line":323,"column":1,"offset":10435},"end":{"line":323,"column":167,"offset":10601},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To use it, we can conform to the ","position":{"start":{"line":325,"column":1,"offset":10603},"end":{"line":325,"column":34,"offset":10636},"indent":[]}},{"type":"inlineCode","value":"NSObject","position":{"start":{"line":325,"column":34,"offset":10636},"end":{"line":325,"column":44,"offset":10646},"indent":[]}},{"type":"text","value":" class and override the init() method since there already is one for ","position":{"start":{"line":325,"column":44,"offset":10646},"end":{"line":325,"column":113,"offset":10715},"indent":[]}},{"type":"inlineCode","value":"NSObject","position":{"start":{"line":325,"column":113,"offset":10715},"end":{"line":325,"column":123,"offset":10725},"indent":[]}},{"type":"text","value":". This will allow us to give conformance for the ","position":{"start":{"line":325,"column":123,"offset":10725},"end":{"line":325,"column":172,"offset":10774},"indent":[]}},{"type":"inlineCode","value":"CLLocationManagerDelegate","position":{"start":{"line":325,"column":172,"offset":10774},"end":{"line":325,"column":199,"offset":10801},"indent":[]}},{"type":"text","value":". Swift does not have the option of optional protocols.","position":{"start":{"line":325,"column":199,"offset":10801},"end":{"line":325,"column":254,"offset":10856},"indent":[]}}],"position":{"start":{"line":325,"column":1,"offset":10603},"end":{"line":325,"column":254,"offset":10856},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Then we can set the ","position":{"start":{"line":327,"column":1,"offset":10858},"end":{"line":327,"column":21,"offset":10878},"indent":[]}},{"type":"inlineCode","value":"manager.delegate = self","position":{"start":{"line":327,"column":21,"offset":10878},"end":{"line":327,"column":46,"offset":10903},"indent":[]}}],"position":{"start":{"line":327,"column":1,"offset":10858},"end":{"line":327,"column":46,"offset":10903},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is an example of a circular dependence.","position":{"start":{"line":329,"column":1,"offset":10905},"end":{"line":329,"column":45,"offset":10949},"indent":[]}}],"position":{"start":{"line":329,"column":1,"offset":10905},"end":{"line":329,"column":45,"offset":10949},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"import Foundation\nimport CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n\tlet manager = CLLocationManager()\n\n\toverride init() {\n\t\tsuper.init()\n\n\t\tmanager.delegate = self\n\t\tmanager.requestWhenInUseAuthorization\n\t}\n\n\t// this is an example of a protocol method!\n\tfunc locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n\t\tif status == .authorizedWhenInUse {\n\t\t\tmanager.requestLocation()\n\t\t}\n\t}\n\n\tfunc locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n\t\tprint(Error)\n\t}\n\n\tfunc locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n\t\tprint(locations.first!)\n\t}\n}","position":{"start":{"line":331,"column":1,"offset":10951},"end":{"line":360,"column":4,"offset":11665},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"IOSD-5: Examples - UITextFieldDelegate","position":{"start":{"line":362,"column":4,"offset":11670},"end":{"line":362,"column":42,"offset":11708},"indent":[]}}],"position":{"start":{"line":362,"column":1,"offset":11667},"end":{"line":362,"column":42,"offset":11708},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In case of the UITextField, we can assign the ViewController that is \"listening\" as the delegate to recieve the broadcasts.","position":{"start":{"line":364,"column":1,"offset":11710},"end":{"line":364,"column":124,"offset":11833},"indent":[]}}],"position":{"start":{"line":364,"column":1,"offset":11710},"end":{"line":364,"column":124,"offset":11833},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Then we can implement the methods from the protocol to the class to give us the results.","position":{"start":{"line":366,"column":1,"offset":11835},"end":{"line":366,"column":89,"offset":11923},"indent":[]}}],"position":{"start":{"line":366,"column":1,"offset":11835},"end":{"line":366,"column":89,"offset":11923},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":369,"column":1,"offset":11926},"end":{"line":369,"column":31,"offset":11956},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":369,"column":31,"offset":11956}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"delegation-in-ios\"\n    }}>{`Delegation in iOS`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#delegation-in-ios\"\n        }}>{`Delegation in iOS`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#iosd-1-intro-to-design-patterns\"\n            }}>{`IOSD-1: Intro to Design Patterns`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#iosd-2-learning-by-example---racing-horses\"\n            }}>{`IOSD-2: Learning by example - Racing Horses`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#iosd-3-acting-as-a-delegate\"\n            }}>{`IOSD-3: Acting as a Delegate`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#iosd-4-examples---cllocation-manager\"\n            }}>{`IOSD-4: Examples - CLLocation Manager`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#iosd-5-examples---uitextfielddelegate\"\n            }}>{`IOSD-5: Examples - UITextFieldDelegate`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"iosd-1-intro-to-design-patterns\"\n    }}>{`IOSD-1: Intro to Design Patterns`}</h2>\n    <p>{`Three common issues developers have come across:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Avoiding inflexible objects`}</li>\n      <li parentName=\"ol\">{`Maintaining loose relationships`}</li>\n      <li parentName=\"ol\">{`Avoid tight coupling`}</li>\n    </ol>\n    <p>{`We use Design Pattern as a general, reusable solution to a commonly occurring problem within a given context, regardless of the particular domain.`}</p>\n    <p>{`An example - `}<inlineCode parentName=\"p\">{`The Delegate Pattern`}</inlineCode></p>\n    <p><em parentName=\"p\">{`The Delegate Pattern`}</em></p>\n    <p>{`The delegate pattern is an alteration on the decorator pattern, a structural pattern that is focused on how we can compose objects to form larger objects.`}</p>\n    <p>{`It is concerned with adding responsibilities to objects dynamically.`}</p>\n    <h2 {...{\n      \"id\": \"iosd-2-learning-by-example---racing-horses\"\n    }}>{`IOSD-2: Learning by example - Racing Horses`}</h2>\n    <p><em parentName=\"p\">{`The Horse Class and Race Class`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import Foundation\nimport PlaygroundSupport\n\nPlaygroundPage.current.needsIndefiniteExecution = true\n\nclass Horse {\n    let name: String\n    let maxSpeed: Double\n    var distanceTraveled = 0.0\n    var currentLap = 1\n\n    init(name: String, maxSpeed: Double) {\n        self.maxSpeed = maxSpeed\n        self.name = name\n    }\n\n    var currentSpeed: Double {\n        let random = Double(arc4random())\n        return random.truncatingRemainder(dividingBy: maxSpeed - 13) + 13\n    }\n}\n\nclass Race {\n    let laps: Int\n    let lapLength: Double = 300\n    let participants: [Horse]\n\n    weak var delegate: HorseRaceDelegate?\n\n    // since we want to use a delegate, we do not create instances\n    // let tracker = Tracker()\n    // let broadcaster = RaceBroadcaster()\n\n    lazy var timer: Timer = Timer(timeInterval: 1, repeats: true) { timer in\n        self.updateProgress()\n    }\n\n    init(laps: Int, participants: [Horse]) {\n        self.laps = laps\n        self.participants = participants\n    }\n\n    func start() {\n        RunLoop.main.add(timer, forMode: .defaultRunLoopMode)\n        // tracker.updateRaceStart(with: Date())\n        delegate?.race(self, didStartAt: Date())\n        print(\"Race in progress...\")\n    }\n\n    func updateProgress() {\n        print(\"....\")\n        for horse in participants {\n            horse.distanceTraveled += horse.currentSpeed\n\n            if horse.distanceTraveled >= lapLength {\n                horse.distanceTraveled = 0\n\n                delegate?.addLapLeader(horse, forLap: horse.currentLap, atTime: Date())\n\n                // let lapKey = \"\\\\(Tracker.Keys.lapLeader) \\\\(horse.currentLap)\"\n                // if !tracker.stats.keys.contains(lapKey) {\n                //     tracker.updateLapLeaderWith(lapNumber: horse.currentLap, horse: horse, time: Date())\n                // }\n\n                horse.currentLap += 1\n\n                if horse.currentLap >= laps + 1 {\n                    // tracker.updateRaceEndWith(winner: horse, time: Date())\n                    delegate?.raceDidEndAt(self, didEndAt: Date(), withWinner: horse)\n                    stop()\n                    break\n                }\n            }\n        }\n    }\n\n    func stop() {\n        print(\"Race complete!\")\n        // timer.invalidate()\n        // tracker.printRaceSummary()\n    }\n}\n\nlet jubilee = Horse(name: \"Jubilee\", maxSpeed: 16)\nlet sonora = Horse(name: \"Sonora\", maxSpeed: 17)\nlet jasper = Horse(name: \"Jasper\", maxSpeed: 17)\n\nlet participants = [jubilee, sonora, jasper]\n\nlet race = Race(laps: 1, participants: participants)\nrace.start()\n`}</code></pre>\n    <hr></hr>\n    <p><em parentName=\"p\">{`The Tracker Class`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class Tracker: HorseRaceDelegate {\n\n    struct Keys {\n        static let raceStartTime = \"raceStartTime\"\n        static let lapLeader = \"leaderForLap\"\n        static let raceEndTime = \"raceEndTime\"\n        static let winner = \"winner\"\n    }\n\n    var stats = [String: Any]()\n\n    // func updateRaceStart(with time: Date) {\n    //     stats.updateValue(time, forKey: Keys.raceStartTime)\n    // }\n\n    func race(_ race: Race, didStartAt time: Date) {\n        stats.updateValue(time, forKey: Keys.raceStartTime)\n    }\n\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date) {\n        let lapLead = \"Horse: \\\\(horse.name), time: \\\\(time)\"\n        let lapLeadKey = \"\\\\(Keys.lapLeader) \\\\(number)\"\n\n        stats.updateValue(lapLead, forKey: lapLeadKey)\n    }\n\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse) {\n        stats.updateValue(winner.name, forKey: Keys.winner)\n        stats.updateValue(time, forKey: Keys.raceEndTime)\n    }\n\n    // get rid of the below method\n    func updateLapLeaderWith(lapNumber number: Int, horse: Horse, time: Date) {\n        let lapLead = \"Horse: \\\\(horse.name), time: \\\\(time)\"\n        let lapLeadKey = \"\\\\(Keys.lapLeader) \\\\(number)\"\n\n        stats.updateValue(lapLead, forKey: lapLeadKey)\n    }\n\n    // get rid of the below method\n    func updateRaceEndWith(winner: Horse, time: Date) {\n        stats.updateValue(winner.name, forKey: Keys.winner)\n        stats.updateValue(time, forKey: Keys.raceEndTime)\n    }\n\n    func printRaceSummary() {\n        print(\"***********\")\n\n        let raceStartTime = stats[Keys.raceStartTime]!\n        print(\"Race start time: \\\\(raceStartTime)\")\n\n        for (key, value) in stats where key.contains(Keys.lapLeader) {\n            print(\"\\\\(key): \\\\(value)\")\n        }\n\n        let raceEndTime = stats[Keys.raceEndTime]!\n        print(\"Race end time: \\\\(raceEndTime)\")\n\n        let winner = stats[Keys.winner]!\n        print(\"Winner: \\\\(winner)\")\n\n        print(\"***********\")\n    }\n}\n`}</code></pre>\n    <p>{`In this example, we use the Tracker methods and Keys to help monitor the results of the race.`}</p>\n    <p>{`Now so far so good, but what if we want a live broadcast?`}</p>\n    <p>{`However, trackers should do more than one job.`}</p>\n    <p>{`This new class will care about the same info as Tracker, but Tracker objects are tied to a particular race. This becomes a problem since the Race also \"knows\" about the Tracker and Broadcast class. This coupling is too tight.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`class RaceBroadcaster {\n    // methods to try to help broadcast information on the Race object\n}\n`}</code></pre>\n    <p>{`The Race class shouldn't care about implementing the methods from the Tracker and Broadcast class. Those classes should just listen to the information that Race gives out.`}</p>\n    <p>{`How do we do this? By implementing a delegate.`}</p>\n    <p>{`We will make a \"contract\" that uses a protocol.`}</p>\n    <p>{`This will implement the rules that anything that wants to interact with the Race class must adhere to.`}</p>\n    <p><em parentName=\"p\">{`HorseRaceDelegate Protocol`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`protocol HorseRaceDelegate: class {\n    // this will require any adhering class to use the didStartAt method\n    func race(_ race: Race, didStartAt time: Date)\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date)\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse)\n}\n`}</code></pre>\n    <p>{`This protocol will now govern the events that we care about. We can create a delegate instance, but since the race doesn't \"need\" to have to have a tracker, we will make it optional and also give it the \"weak\" var to prevent a reference cycle.`}</p>\n    <p>{`Since only classes can be at the end of a weak relationship, we are violating the rule, so we can make the delegate class bound.`}</p>\n    <p>{`The delegate will be used by the Race class to delegate tasks out. We don't care which object is acting as the delegate, we just know that someone might be.`}</p>\n    <p>{`Now in the methods, we can use the delegate. The class won't care about who is listening for the delegate.`}</p>\n    <p>{`Once we have a class that implements a delegate, how do we then have a another class act as a delegate?`}</p>\n    <p>{`That means that for the class (eg Tracker), it needs to conform to the delegate.`}</p>\n    <p>{`Now that we've conformed to the protocol, we can assign an instance of Tracker to that delegate property to listen in!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let tracker = Tracker();\nrace.delegate = tracker;\n`}</code></pre>\n    <p>{`This now works, because within the Race class, we're already tracking the relevant information and passing them along to the delegate.`}</p>\n    <p>{`Rather than worry about the events itself, the class can delegate can pass out the information to the qualified objects.`}</p>\n    <h2 {...{\n      \"id\": \"iosd-3-acting-as-a-delegate\"\n    }}>{`IOSD-3: Acting as a Delegate`}</h2>\n    <p>{`So why do we need to decouple in the first place?`}</p>\n    <p>{`It will become far more manageable once you start creating Objects that focus on just one job.`}</p>\n    <p>{`Analogy:`}</p>\n    <p>{`You are the CEO of an important company and have many tasks to do, but many of them involve other side tasks that are important.`}</p>\n    <p>{`Instead of doing it all yourself, you delegate it out to an assistant.`}</p>\n    <p>{`Beforehand, you need to define what they do. Think of the requirements as the protocol.`}</p>\n    <p>{`If they have all these abilities, they conform to the protocol.`}</p>\n    <p>{`Now you hire and give the tasks to the employee - they are now your delegate.`}</p>\n    <p>{`However, if they quit - that's cool. You can look for another delegate that conforms.`}</p>\n    <p>{`Typically, you need the delegates to be weak. The reason is that it's total valid to have a circular relationship.`}</p>\n    <p>{`Example, if you have a class `}<inlineCode parentName=\"p\">{`RaceManager`}</inlineCode>{` that conforms, they can also have race of type Race as a property, we've created a strong relationship by default.`}</p>\n    <p>{`Since the Manager also conforms to the HorseRaceDelegate, you can have one that references the other. If they had a strong cycle, we couldn't get rid of the objects and it would cause a memory leak.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class RaceManager: HorseRaceDelegate {\n\n    let race: Race\n\n    init(race: Race) {\n        self.race = race\n        race.delegate = self\n        race.start()\n    }\n\n    func race(_ race: Race, didStartAt time: Date) {\n        // some implementation\n    }\n\n    func addLapLeader(_ horse: Horse, forLap lap: Int, atTime time: Date) {\n        // some implementation\n    }\n\n    func race(_ race: Race, didEndAt time: Date, withWinner winner: Horse) {\n        // some implementation\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iosd-4-examples---cllocation-manager\"\n    }}>{`IOSD-4: Examples - CLLocation Manager`}</h2>\n    <p>{`Using the CoreLocation Framework, we can create a LocationManager class.`}</p>\n    <p>{`Once we create the class, we can request for authorization.`}</p>\n    <p>{`Since we need to wait for a response, we actually use the delegate pattern to help assigned a delegate that will recieve info.`}</p>\n    <p>{`In this case here, as long as we conform the the correct protocols, the delegate has already been created for us. For this one, we need the CLLocationManagerDelegate.`}</p>\n    <p>{`To use it, we can conform to the `}<inlineCode parentName=\"p\">{`NSObject`}</inlineCode>{` class and override the init() method since there already is one for `}<inlineCode parentName=\"p\">{`NSObject`}</inlineCode>{`. This will allow us to give conformance for the `}<inlineCode parentName=\"p\">{`CLLocationManagerDelegate`}</inlineCode>{`. Swift does not have the option of optional protocols.`}</p>\n    <p>{`Then we can set the `}<inlineCode parentName=\"p\">{`manager.delegate = self`}</inlineCode></p>\n    <p>{`This is an example of a circular dependence.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import Foundation\nimport CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let manager = CLLocationManager()\n\n    override init() {\n        super.init()\n\n        manager.delegate = self\n        manager.requestWhenInUseAuthorization\n    }\n\n    // this is an example of a protocol method!\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            manager.requestLocation()\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(Error)\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        print(locations.first!)\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iosd-5-examples---uitextfielddelegate\"\n    }}>{`IOSD-5: Examples - UITextFieldDelegate`}</h2>\n    <p>{`In case of the UITextField, we can assign the ViewController that is \"listening\" as the delegate to recieve the broadcasts.`}</p>\n    <p>{`Then we can implement the methods from the protocol to the class to give us the results.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}