{"expireTime":9007200867335947000,"key":"gatsby-plugin-mdx-entire-payload-d996a6232bcfc9df07ed921665c6d33c-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Java Cheat Sheet","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":19,"offset":185},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":19,"offset":185},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Basic file","position":{"start":{"line":10,"column":4,"offset":190},"end":{"line":10,"column":14,"offset":200},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":187},"end":{"line":10,"column":14,"offset":200},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"// HellWorld.java\npublic class HelloWorld {\n    private final int a, b;\n\n    public HelloWorld(int a0, int b0) {\n        a = a0;\n        b = b0;\n    }\n\n    public static void Main(String[], args) {\n        System.out.print(\"Hello, World\");\n    }\n}","position":{"start":{"line":12,"column":1,"offset":202},"end":{"line":26,"column":4,"offset":461},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Compilation","position":{"start":{"line":28,"column":4,"offset":466},"end":{"line":28,"column":15,"offset":477},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":463},"end":{"line":28,"column":15,"offset":477},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"javac HelloWorld.java","position":{"start":{"line":30,"column":1,"offset":479},"end":{"line":32,"column":4,"offset":513},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Types","position":{"start":{"line":34,"column":4,"offset":518},"end":{"line":34,"column":9,"offset":523},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":515},"end":{"line":34,"column":9,"offset":523},"indent":[]}},{"type":"table","align":[null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Type","position":{"start":{"line":36,"column":3,"offset":527},"end":{"line":36,"column":7,"offset":531},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":527},"end":{"line":36,"column":10,"offset":534},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":525},"end":{"line":36,"column":12,"offset":536},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"int","position":{"start":{"line":38,"column":3,"offset":551},"end":{"line":38,"column":6,"offset":554},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":551},"end":{"line":38,"column":10,"offset":558},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":549},"end":{"line":38,"column":12,"offset":560},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"double","position":{"start":{"line":39,"column":3,"offset":563},"end":{"line":39,"column":9,"offset":569},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":563},"end":{"line":39,"column":10,"offset":570},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":561},"end":{"line":39,"column":12,"offset":572},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"boolean","position":{"start":{"line":40,"column":3,"offset":575},"end":{"line":40,"column":10,"offset":582},"indent":[]}}],"position":{"start":{"line":40,"column":3,"offset":575},"end":{"line":40,"column":10,"offset":582},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":573},"end":{"line":40,"column":12,"offset":584},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"char","position":{"start":{"line":41,"column":3,"offset":587},"end":{"line":41,"column":7,"offset":591},"indent":[]}}],"position":{"start":{"line":41,"column":3,"offset":587},"end":{"line":41,"column":10,"offset":594},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":585},"end":{"line":41,"column":12,"offset":596},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"String","position":{"start":{"line":42,"column":3,"offset":599},"end":{"line":42,"column":9,"offset":605},"indent":[]}}],"position":{"start":{"line":42,"column":3,"offset":599},"end":{"line":42,"column":10,"offset":606},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":597},"end":{"line":42,"column":12,"offset":608},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":525},"end":{"line":42,"column":12,"offset":608},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Declaring","position":{"start":{"line":44,"column":4,"offset":613},"end":{"line":44,"column":13,"offset":622},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":610},"end":{"line":44,"column":13,"offset":622},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"// declare statement\nint a, b;\n// assigning literal\na = 1234;\n// inline initialization\nint c = 1234;","position":{"start":{"line":46,"column":1,"offset":624},"end":{"line":53,"column":4,"offset":736},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Printing","position":{"start":{"line":55,"column":4,"offset":741},"end":{"line":55,"column":12,"offset":749},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":738},"end":{"line":55,"column":12,"offset":749},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"void System.out.print(String s); // Print s\nvoid System.out.println(String s); // print s, followed by new line\nvoid System.out.println(); // print a new line","position":{"start":{"line":57,"column":1,"offset":751},"end":{"line":61,"column":4,"offset":921},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Parsing","position":{"start":{"line":63,"column":4,"offset":926},"end":{"line":63,"column":11,"offset":933},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":923},"end":{"line":63,"column":11,"offset":933},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"// Example like so for parseDouble and parseLong too\nint s = Integer.parseInt(String s);","position":{"start":{"line":65,"column":1,"offset":935},"end":{"line":68,"column":4,"offset":1035},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Arrays","position":{"start":{"line":70,"column":4,"offset":1040},"end":{"line":70,"column":10,"offset":1046},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1037},"end":{"line":70,"column":10,"offset":1046},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"String[] wordArr = [\"One\", \"Two\", \"Three\"];","position":{"start":{"line":72,"column":1,"offset":1048},"end":{"line":74,"column":4,"offset":1103},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Interfaces","position":{"start":{"line":76,"column":4,"offset":1108},"end":{"line":76,"column":14,"offset":1118},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":1105},"end":{"line":76,"column":14,"offset":1118},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A Java interface is more like an abstract class than a regular class. An interface can only contain method signatures and static final fields. An interface is merely a contract between the interface and classes that implement it. Like with abstract classes, classes that implement an interface must implement its methodsâ€™ bodies to provide functionality.","position":{"start":{"line":78,"column":1,"offset":1120},"end":{"line":78,"column":355,"offset":1474},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":1120},"end":{"line":78,"column":355,"offset":1474},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"public interface Character {\n    Random randomGenerator = new Random();\n\n    String getName();\n    double getHealth();\n    long getExperience();\n    int getAttackPower();\n    void setAttackPower(int attackPower);\n\n    void defend();\n    void jump();\n    int heal();\n    void attack(Character opponent);\n    double decreaseHealth(int opponentAttackPower);\n    long gainExperience(long experience);\n}","position":{"start":{"line":80,"column":1,"offset":1476},"end":{"line":97,"column":4,"offset":1886},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Abstract classes","position":{"start":{"line":99,"column":4,"offset":1891},"end":{"line":99,"column":20,"offset":1907},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":1888},"end":{"line":99,"column":20,"offset":1907},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An abstract class is much like a regular class in that it can have fields and methods. What makes it special is its methods may or may not have bodies. That means an abstract class can have method signatures that are declared as abstract as well as full methods as usual.","position":{"start":{"line":101,"column":1,"offset":1909},"end":{"line":101,"column":272,"offset":2180},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":1909},"end":{"line":101,"column":272,"offset":2180},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"public abstract class Human {\n    protected String name;\n    // ...\n\n    public Human(String name) {\n        // ...\n    }\n\n    public abstract void attack(Human human);\n    public abstract void defend();\n    public abstract void jump();\n    public abstract double heal();\n\n    public String getName() {...}\n    public double getHealth(){...}\n    public long getExperience(){...}\n    public void setAttackPower(int attackPower) {...}\n    public long gainExperience(long experience){...}\n    public double heal(double additionalHealth) {...}\n    public double decreaseHealth(int opponentAttackPower) {...}\n}","position":{"start":{"line":103,"column":1,"offset":2182},"end":{"line":125,"column":4,"offset":2799},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Interfaces and Abstract classes in use","position":{"start":{"line":127,"column":4,"offset":2804},"end":{"line":127,"column":42,"offset":2842},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":2801},"end":{"line":127,"column":42,"offset":2842},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"public abstract class Human implements Character{\n    protected Pet pet;\n    ...\n\n    public Human(String name) {\n        ...\n        numCharacters++;\n    }\n    public void setPet(Pet pet) { this.pet = pet; }\n    public Pet getPet() { return pet; }\n    public abstract void attack(Character opponent);\n    ...\n}\npublic abstract class Pet implements Character{\n    protected Human owner;\n    ...\n    public Pet(String name, Human owner) {\n        this.name = name;\n        this.owner = owner;\n        gainExperience(1);\n        numCharacters++;\n    }\n\n    public Human getOwner() { return owner; }\n    public abstract void attack(Character opponent);\n    ...\n}\npublic class Archer extends Human {\n    private int numArrows = 0;\n\n    public Archer(String name) {\n        super(name);\n        findArrows();\n    }\n\n    private void findArrows() {\n        System.out.println(\"Looking for arrows\");\n    }\n    @Override\n    public void attack(Character opponent) {...}\n    @Override\n    public void defend() {...}\n    @Override\n    public void jump() {...}\n    @Override\n    public int heal() { return 0; }\n}\npublic class Dog extends Pet {\n    public Dog(String name, Human owner) {\n        super(name, owner);\n    }\n\n    public void bark() {\n        System.out.println(\"Wolf Wolf!\");\n    }\n\n    @Override\n    public void attack(Character opponent) {...}\n    @Override\n    public void defend() {...}\n    @Override\n    public void jump() {...}\n    @Override\n    public int heal() { return 0; }\n}","position":{"start":{"line":129,"column":1,"offset":2844},"end":{"line":195,"column":4,"offset":4343},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":198,"column":1,"offset":4346},"end":{"line":198,"column":31,"offset":4376},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":198,"column":31,"offset":4376}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"java-cheat-sheet\"\n    }}>{`Java Cheat Sheet`}</h1>\n    <h2 {...{\n      \"id\": \"basic-file\"\n    }}>{`Basic file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// HellWorld.java\npublic class HelloWorld {\n    private final int a, b;\n\n    public HelloWorld(int a0, int b0) {\n        a = a0;\n        b = b0;\n    }\n\n    public static void Main(String[], args) {\n        System.out.print(\"Hello, World\");\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"compilation\"\n    }}>{`Compilation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`javac HelloWorld.java\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`int`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`double`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`char`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`String`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"declaring\"\n    }}>{`Declaring`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// declare statement\nint a, b;\n// assigning literal\na = 1234;\n// inline initialization\nint c = 1234;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"printing\"\n    }}>{`Printing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`void System.out.print(String s); // Print s\nvoid System.out.println(String s); // print s, followed by new line\nvoid System.out.println(); // print a new line\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"parsing\"\n    }}>{`Parsing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Example like so for parseDouble and parseLong too\nint s = Integer.parseInt(String s);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arrays\"\n    }}>{`Arrays`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`String[] wordArr = [\"One\", \"Two\", \"Three\"];\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h2>\n    <p>{`A Java interface is more like an abstract class than a regular class. An interface can only contain method signatures and static final fields. An interface is merely a contract between the interface and classes that implement it. Like with abstract classes, classes that implement an interface must implement its methodsâ€™ bodies to provide functionality.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public interface Character {\n    Random randomGenerator = new Random();\n\n    String getName();\n    double getHealth();\n    long getExperience();\n    int getAttackPower();\n    void setAttackPower(int attackPower);\n\n    void defend();\n    void jump();\n    int heal();\n    void attack(Character opponent);\n    double decreaseHealth(int opponentAttackPower);\n    long gainExperience(long experience);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"abstract-classes\"\n    }}>{`Abstract classes`}</h2>\n    <p>{`An abstract class is much like a regular class in that it can have fields and methods. What makes it special is its methods may or may not have bodies. That means an abstract class can have method signatures that are declared as abstract as well as full methods as usual.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public abstract class Human {\n    protected String name;\n    // ...\n\n    public Human(String name) {\n        // ...\n    }\n\n    public abstract void attack(Human human);\n    public abstract void defend();\n    public abstract void jump();\n    public abstract double heal();\n\n    public String getName() {...}\n    public double getHealth(){...}\n    public long getExperience(){...}\n    public void setAttackPower(int attackPower) {...}\n    public long gainExperience(long experience){...}\n    public double heal(double additionalHealth) {...}\n    public double decreaseHealth(int opponentAttackPower) {...}\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interfaces-and-abstract-classes-in-use\"\n    }}>{`Interfaces and Abstract classes in use`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public abstract class Human implements Character{\n    protected Pet pet;\n    ...\n\n    public Human(String name) {\n        ...\n        numCharacters++;\n    }\n    public void setPet(Pet pet) { this.pet = pet; }\n    public Pet getPet() { return pet; }\n    public abstract void attack(Character opponent);\n    ...\n}\npublic abstract class Pet implements Character{\n    protected Human owner;\n    ...\n    public Pet(String name, Human owner) {\n        this.name = name;\n        this.owner = owner;\n        gainExperience(1);\n        numCharacters++;\n    }\n\n    public Human getOwner() { return owner; }\n    public abstract void attack(Character opponent);\n    ...\n}\npublic class Archer extends Human {\n    private int numArrows = 0;\n\n    public Archer(String name) {\n        super(name);\n        findArrows();\n    }\n\n    private void findArrows() {\n        System.out.println(\"Looking for arrows\");\n    }\n    @Override\n    public void attack(Character opponent) {...}\n    @Override\n    public void defend() {...}\n    @Override\n    public void jump() {...}\n    @Override\n    public int heal() { return 0; }\n}\npublic class Dog extends Pet {\n    public Dog(String name, Human owner) {\n        super(name, owner);\n    }\n\n    public void bark() {\n        System.out.println(\"Wolf Wolf!\");\n    }\n\n    @Override\n    public void attack(Character opponent) {...}\n    @Override\n    public void defend() {...}\n    @Override\n    public void jump() {...}\n    @Override\n    public int heal() { return 0; }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}