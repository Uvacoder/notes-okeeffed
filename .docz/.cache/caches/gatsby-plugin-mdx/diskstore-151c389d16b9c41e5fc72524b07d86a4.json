{"expireTime":9007200867335947000,"key":"gatsby-plugin-mdx-entire-payload-4560c404e7dbe2897b188c55d11f4985-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Initialising Arrays in Java","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":30,"offset":196},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":30,"offset":196},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Basic example on how to declare, declare with allocated size and initialise with default values:","position":{"start":{"line":10,"column":1,"offset":198},"end":{"line":10,"column":97,"offset":294},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":198},"end":{"line":10,"column":97,"offset":294},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"int[] allocArr = new int[2]; // init with memory for 2 spaces\nint[] declareArr; // declaration\nint[] withValues = { n.data }; // shorthand init with values","position":{"start":{"line":12,"column":1,"offset":296},"end":{"line":16,"column":4,"offset":463},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Push, pop, shift, unshift","position":{"start":{"line":18,"column":4,"offset":468},"end":{"line":18,"column":29,"offset":493},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":465},"end":{"line":18,"column":29,"offset":493},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This requires the use of ","position":{"start":{"line":20,"column":1,"offset":495},"end":{"line":20,"column":26,"offset":520},"indent":[]}},{"type":"inlineCode","value":"List","position":{"start":{"line":20,"column":26,"offset":520},"end":{"line":20,"column":32,"offset":526},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":20,"column":32,"offset":526},"end":{"line":20,"column":37,"offset":531},"indent":[]}},{"type":"inlineCode","value":"ArrayList","position":{"start":{"line":20,"column":37,"offset":531},"end":{"line":20,"column":48,"offset":542},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":495},"end":{"line":20,"column":48,"offset":542},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"Array.push    -> ArrayList.add(Object o); // Append the list\nArray.pop     -> ArrayList.remove(int index); // Remove list[index]\nArray.shift   -> ArrayList.remove(0); // Remove first element\nArray.unshift -> ArrayList.add(int index, Object o); // Prepend the list","position":{"start":{"line":22,"column":1,"offset":544},"end":{"line":27,"column":4,"offset":819},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Example:","position":{"start":{"line":29,"column":1,"offset":821},"end":{"line":29,"column":9,"offset":829},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":821},"end":{"line":29,"column":9,"offset":829},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        List<String> animals = new ArrayList<>();\n\n        animals.add(\"Lion\");\n        animals.add(\"Tiger\");\n        animals.add(\"Cat\");\n        animals.add(\"Dog\");\n\n        System.out.println(animals); // [Lion, Tiger, Cat, Dog]\n\n        // add() -> push(): Add items to the end of an array\n        animals.add(\"Elephant\");\n        System.out.println(animals);  // [Lion, Tiger, Cat, Dog, Elephant]\n\n        // remove() -> pop(): Remove an item from the end of an array\n        animals.remove(animals.size() - 1);\n        System.out.println(animals); // [Lion, Tiger, Cat, Dog]\n\n        // add(0,\"xyz\") -> unshift(): Add items to the beginning of an array\n        animals.add(0, \"Penguin\");\n        System.out.println(animals); // [Penguin, Lion, Tiger, Cat, Dog]\n\n        // remove(0) -> shift(): Remove an item from the beginning of an array\n        animals.remove(0);\n        System.out.println(animals); // [Lion, Tiger, Cat, Dog]\n\n    }\n}","position":{"start":{"line":31,"column":1,"offset":831},"end":{"line":66,"column":4,"offset":1907},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":69,"column":1,"offset":1910},"end":{"line":69,"column":31,"offset":1940},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":69,"column":31,"offset":1940}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"initialising-arrays-in-java\"\n    }}>{`Initialising Arrays in Java`}</h1>\n    <p>{`Basic example on how to declare, declare with allocated size and initialise with default values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`int[] allocArr = new int[2]; // init with memory for 2 spaces\nint[] declareArr; // declaration\nint[] withValues = { n.data }; // shorthand init with values\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"push-pop-shift-unshift\"\n    }}>{`Push, pop, shift, unshift`}</h2>\n    <p>{`This requires the use of `}<inlineCode parentName=\"p\">{`List`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ArrayList`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Array.push    -> ArrayList.add(Object o); // Append the list\nArray.pop     -> ArrayList.remove(int index); // Remove list[index]\nArray.shift   -> ArrayList.remove(0); // Remove first element\nArray.unshift -> ArrayList.add(int index, Object o); // Prepend the list\n`}</code></pre>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        List<String> animals = new ArrayList<>();\n\n        animals.add(\"Lion\");\n        animals.add(\"Tiger\");\n        animals.add(\"Cat\");\n        animals.add(\"Dog\");\n\n        System.out.println(animals); // [Lion, Tiger, Cat, Dog]\n\n        // add() -> push(): Add items to the end of an array\n        animals.add(\"Elephant\");\n        System.out.println(animals);  // [Lion, Tiger, Cat, Dog, Elephant]\n\n        // remove() -> pop(): Remove an item from the end of an array\n        animals.remove(animals.size() - 1);\n        System.out.println(animals); // [Lion, Tiger, Cat, Dog]\n\n        // add(0,\"xyz\") -> unshift(): Add items to the beginning of an array\n        animals.add(0, \"Penguin\");\n        System.out.println(animals); // [Penguin, Lion, Tiger, Cat, Dog]\n\n        // remove(0) -> shift(): Remove an item from the beginning of an array\n        animals.remove(0);\n        System.out.println(animals); // [Lion, Tiger, Cat, Dog]\n\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}