{"expireTime":9007200867335956000,"key":"gatsby-plugin-mdx-entire-payload-ff11686ad9945f664c953638e976c4d9-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Authentication with Goth","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":27,"offset":193},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":27,"offset":193},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":198},"end":{"line":10,"column":13,"offset":207},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":195},"end":{"line":10,"column":13,"offset":207},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/markbates/goth/blob/master/examples/main.go","children":[{"type":"text","value":"Auth","position":{"start":{"line":12,"column":5,"offset":213},"end":{"line":12,"column":9,"offset":217},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":212},"end":{"line":12,"column":74,"offset":282},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":212},"end":{"line":12,"column":74,"offset":282},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":209},"end":{"line":12,"column":74,"offset":282},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":209},"end":{"line":12,"column":74,"offset":282},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example with GitHub","position":{"start":{"line":14,"column":4,"offset":287},"end":{"line":14,"column":23,"offset":306},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":284},"end":{"line":14,"column":23,"offset":306},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"sort\"\n\n  \"log\"\n  \"github.com/joho/godotenv\"\n\n  \"github.com/gin-gonic/gin\"\n\n\t\"github.com/markbates/goth\"\n\t\"github.com/markbates/goth/gothic\"\n\t\"github.com/markbates/goth/providers/github\"\n)\n\nfunc main() {\n\tgoth.UseProviders(\n\t\tgithub.New(os.Getenv(\"GITHUB_KEY\"), os.Getenv(\"GITHUB_SECRET\"), \"http://localhost:3000/auth/github/callback\"),\n\t)\n\n\t// OpenID Connect is based on OpenID Connect Auto Discovery URL (https://openid.net/specs/openid-connect-discovery-1_0-17.html)\n\t// because the OpenID Connect provider initialize it self in the New(), it can return an error which should be handled or ignored\n\t// ignore the error for now\n\topenidConnect, _ := openidConnect.New(os.Getenv(\"OPENID_CONNECT_KEY\"), os.Getenv(\"OPENID_CONNECT_SECRET\"), \"http://localhost:3000/auth/openid-connect/callback\", os.Getenv(\"OPENID_CONNECT_DISCOVERY_URL\"))\n\tif openidConnect != nil {\n\t\tgoth.UseProviders(openidConnect)\n\t}\n\n\tm := make(map[string]string)\n\tm[\"github\"] = \"Github\"\n\n\tvar keys []string\n\tfor k := range m {\n\t\tkeys = append(keys, k)\n\t}\n\tsort.Strings(keys)\n\n\tproviderIndex := &ProviderIndex{Providers: keys, ProvidersMap: m}\n\n\t// load .env file\n  err := godotenv.Load()\n  if err != nil {\n    log.Fatal(\"Error loading .env file\")\n  }\n\n  // set up server\n  r := gin.Default()\n\tr.GET(\"/auth/{provider}/callback\", func(c *gin.Context) {\n\n\t\tuser, err := gothic.CompleteUserAuth(res, req)\n\t\tif err != nil {\n\t\t\tfmt.Fprintln(res, err)\n\t\t\treturn\n    }\n\n\t\tc.JSON(200, gin.H{\n        user\n    })\n\t})\n\n\tr.GET(\"/logout/{provider}\", func(res http.ResponseWriter, req *http.Request) {\n\t\tgothic.Logout(res, req)\n\t\tc.JSON(200, gin.H{\n      \"success\": true\n    })\n\t})\n\n\tr.GET(\"/auth/{provider}\", func(res http.ResponseWriter, req *http.Request) {\n\t\t// try to get the user without re-authenticating\n\t\tif gothUser, err := gothic.CompleteUserAuth(res, req); err == nil {\n\t\t\tc.JSON(200, gin.H{\n        gothUser\n      })\n\t\t} else {\n\t\t\tgothic.BeginAuthHandler(res, req)\n\t\t}\n\t})\n\n\n\tlog.Println(\"listening on localhost:8080\")\n\tr.Run(\":8080\")\n}\n\ntype ProviderIndex struct {\n\tProviders    []string\n\tProvidersMap map[string]string\n}","position":{"start":{"line":16,"column":1,"offset":308},"end":{"line":109,"column":4,"offset":2474},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":112,"column":1,"offset":2477},"end":{"line":112,"column":31,"offset":2507},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":112,"column":31,"offset":2507}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"authentication-with-goth\"\n    }}>{`Authentication with Goth`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/markbates/goth/blob/master/examples/main.go\"\n        }}>{`Auth`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"example-with-github\"\n    }}>{`Example with GitHub`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"html/template\"\n    \"net/http\"\n    \"os\"\n\n    \"sort\"\n\n  \"log\"\n  \"github.com/joho/godotenv\"\n\n  \"github.com/gin-gonic/gin\"\n\n    \"github.com/markbates/goth\"\n    \"github.com/markbates/goth/gothic\"\n    \"github.com/markbates/goth/providers/github\"\n)\n\nfunc main() {\n    goth.UseProviders(\n        github.New(os.Getenv(\"GITHUB_KEY\"), os.Getenv(\"GITHUB_SECRET\"), \"http://localhost:3000/auth/github/callback\"),\n    )\n\n    // OpenID Connect is based on OpenID Connect Auto Discovery URL (https://openid.net/specs/openid-connect-discovery-1_0-17.html)\n    // because the OpenID Connect provider initialize it self in the New(), it can return an error which should be handled or ignored\n    // ignore the error for now\n    openidConnect, _ := openidConnect.New(os.Getenv(\"OPENID_CONNECT_KEY\"), os.Getenv(\"OPENID_CONNECT_SECRET\"), \"http://localhost:3000/auth/openid-connect/callback\", os.Getenv(\"OPENID_CONNECT_DISCOVERY_URL\"))\n    if openidConnect != nil {\n        goth.UseProviders(openidConnect)\n    }\n\n    m := make(map[string]string)\n    m[\"github\"] = \"Github\"\n\n    var keys []string\n    for k := range m {\n        keys = append(keys, k)\n    }\n    sort.Strings(keys)\n\n    providerIndex := &ProviderIndex{Providers: keys, ProvidersMap: m}\n\n    // load .env file\n  err := godotenv.Load()\n  if err != nil {\n    log.Fatal(\"Error loading .env file\")\n  }\n\n  // set up server\n  r := gin.Default()\n    r.GET(\"/auth/{provider}/callback\", func(c *gin.Context) {\n\n        user, err := gothic.CompleteUserAuth(res, req)\n        if err != nil {\n            fmt.Fprintln(res, err)\n            return\n    }\n\n        c.JSON(200, gin.H{\n        user\n    })\n    })\n\n    r.GET(\"/logout/{provider}\", func(res http.ResponseWriter, req *http.Request) {\n        gothic.Logout(res, req)\n        c.JSON(200, gin.H{\n      \"success\": true\n    })\n    })\n\n    r.GET(\"/auth/{provider}\", func(res http.ResponseWriter, req *http.Request) {\n        // try to get the user without re-authenticating\n        if gothUser, err := gothic.CompleteUserAuth(res, req); err == nil {\n            c.JSON(200, gin.H{\n        gothUser\n      })\n        } else {\n            gothic.BeginAuthHandler(res, req)\n        }\n    })\n\n\n    log.Println(\"listening on localhost:8080\")\n    r.Run(\":8080\")\n}\n\ntype ProviderIndex struct {\n    Providers    []string\n    ProvidersMap map[string]string\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}