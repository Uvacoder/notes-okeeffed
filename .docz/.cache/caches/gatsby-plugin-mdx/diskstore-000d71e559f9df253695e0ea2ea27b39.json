{"expireTime":9007200867335901000,"key":"gatsby-plugin-mdx-entire-payload-7841ba1c207350496b1236888eb206f3-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"API Design Guidelines in Swift 3","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":35,"offset":200},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":35,"offset":200},"indent":[]}},{"type":"jsx","value":"<!-- TOC -->","position":{"start":{"line":9,"column":1,"offset":202},"end":{"line":9,"column":13,"offset":214},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#api-design-guidelines-in-swift-3","children":[{"type":"text","value":"API Design Guidelines in Swift 3","position":{"start":{"line":11,"column":6,"offset":221},"end":{"line":11,"column":38,"offset":253},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":220},"end":{"line":11,"column":74,"offset":289},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":220},"end":{"line":11,"column":74,"offset":289},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#swd-1-why-do-we-need-guidelines","children":[{"type":"text","value":"SWD-1: Why do we need guidelines?","position":{"start":{"line":12,"column":10,"offset":299},"end":{"line":12,"column":43,"offset":332},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":298},"end":{"line":12,"column":78,"offset":367},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":298},"end":{"line":12,"column":78,"offset":367},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":294},"end":{"line":12,"column":78,"offset":367},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#swd-2-guidelines-for-naming-types","children":[{"type":"text","value":"SWD-2: Guidelines for Naming Types","position":{"start":{"line":13,"column":10,"offset":377},"end":{"line":13,"column":44,"offset":411},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":376},"end":{"line":13,"column":81,"offset":448},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":376},"end":{"line":13,"column":81,"offset":448},"indent":[]}}],"position":{"start":{"line":13,"column":5,"offset":372},"end":{"line":13,"column":81,"offset":448},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#swd-3-guidelines-for-naming-methods","children":[{"type":"text","value":"SWD-3: Guidelines for Naming Methods","position":{"start":{"line":14,"column":10,"offset":458},"end":{"line":14,"column":46,"offset":494},"indent":[]}}],"position":{"start":{"line":14,"column":9,"offset":457},"end":{"line":14,"column":85,"offset":533},"indent":[]}}],"position":{"start":{"line":14,"column":9,"offset":457},"end":{"line":14,"column":85,"offset":533},"indent":[]}}],"position":{"start":{"line":14,"column":5,"offset":453},"end":{"line":14,"column":85,"offset":533},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#swd-4-fluent-usage","children":[{"type":"text","value":"SWD-4: Fluent Usage","position":{"start":{"line":15,"column":10,"offset":543},"end":{"line":15,"column":29,"offset":562},"indent":[]}}],"position":{"start":{"line":15,"column":9,"offset":542},"end":{"line":15,"column":51,"offset":584},"indent":[]}}],"position":{"start":{"line":15,"column":9,"offset":542},"end":{"line":15,"column":51,"offset":584},"indent":[]}}],"position":{"start":{"line":15,"column":5,"offset":538},"end":{"line":15,"column":51,"offset":584},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#swd-5-prepositional-vs-grammatical-phrases","children":[{"type":"text","value":"SWD-5: Prepositional vs Grammatical Phrases","position":{"start":{"line":16,"column":10,"offset":594},"end":{"line":16,"column":53,"offset":637},"indent":[]}}],"position":{"start":{"line":16,"column":9,"offset":593},"end":{"line":16,"column":99,"offset":683},"indent":[]}}],"position":{"start":{"line":16,"column":9,"offset":593},"end":{"line":16,"column":99,"offset":683},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":589},"end":{"line":16,"column":99,"offset":683},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#swd-6-recap-on-naming","children":[{"type":"text","value":"SWD-6: Recap on Naming","position":{"start":{"line":17,"column":10,"offset":693},"end":{"line":17,"column":32,"offset":715},"indent":[]}}],"position":{"start":{"line":17,"column":9,"offset":692},"end":{"line":17,"column":57,"offset":740},"indent":[]}}],"position":{"start":{"line":17,"column":9,"offset":692},"end":{"line":17,"column":57,"offset":740},"indent":[]}}],"position":{"start":{"line":17,"column":5,"offset":688},"end":{"line":17,"column":57,"offset":740},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#swd-7-side-effects-and-mutation","children":[{"type":"text","value":"SWD-7: Side-Effects and Mutation","position":{"start":{"line":18,"column":10,"offset":750},"end":{"line":18,"column":42,"offset":782},"indent":[]}}],"position":{"start":{"line":18,"column":9,"offset":749},"end":{"line":18,"column":77,"offset":817},"indent":[]}}],"position":{"start":{"line":18,"column":9,"offset":749},"end":{"line":18,"column":77,"offset":817},"indent":[]}}],"position":{"start":{"line":18,"column":5,"offset":745},"end":{"line":18,"column":77,"offset":817},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#swd-8-conventions","children":[{"type":"text","value":"SWD-8: Conventions","position":{"start":{"line":19,"column":10,"offset":827},"end":{"line":19,"column":28,"offset":845},"indent":[]}}],"position":{"start":{"line":19,"column":9,"offset":826},"end":{"line":19,"column":49,"offset":866},"indent":[]}}],"position":{"start":{"line":19,"column":9,"offset":826},"end":{"line":19,"column":49,"offset":866},"indent":[]}}],"position":{"start":{"line":19,"column":5,"offset":822},"end":{"line":19,"column":49,"offset":866},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":294},"end":{"line":19,"column":49,"offset":866},"indent":[5,5,5,5,5,5,5]}}],"position":{"start":{"line":11,"column":1,"offset":216},"end":{"line":19,"column":49,"offset":866},"indent":[1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":11,"column":1,"offset":216},"end":{"line":19,"column":49,"offset":866},"indent":[1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<!-- /TOC -->","position":{"start":{"line":21,"column":1,"offset":868},"end":{"line":21,"column":14,"offset":881},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"SWD-1: Why do we need guidelines?","position":{"start":{"line":23,"column":4,"offset":886},"end":{"line":23,"column":37,"offset":919},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":883},"end":{"line":23,"column":37,"offset":919},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Initially when Swift was created, there were no real guidelines.","position":{"start":{"line":25,"column":1,"offset":921},"end":{"line":25,"column":65,"offset":985},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":921},"end":{"line":25,"column":65,"offset":985},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It still largely means working with Objective-C code.","position":{"start":{"line":27,"column":1,"offset":987},"end":{"line":27,"column":54,"offset":1040},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":987},"end":{"line":27,"column":54,"offset":1040},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With the open sourcing in 2015, the Swift team worked towards a standard for the guidelines.","position":{"start":{"line":29,"column":1,"offset":1042},"end":{"line":29,"column":93,"offset":1134},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1042},"end":{"line":29,"column":93,"offset":1134},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The most important rule with Swift is to correctly use the ","position":{"start":{"line":31,"column":1,"offset":1136},"end":{"line":31,"column":60,"offset":1195},"indent":[]}},{"type":"inlineCode","value":"Point of Use","position":{"start":{"line":31,"column":60,"offset":1195},"end":{"line":31,"column":74,"offset":1209},"indent":[]}},{"type":"text","value":". Readability at call site is more important than point of definition.","position":{"start":{"line":31,"column":74,"offset":1209},"end":{"line":31,"column":144,"offset":1279},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1136},"end":{"line":31,"column":144,"offset":1279},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Methods and properties are written once and called and used many times, so the focus should be on the latter.","position":{"start":{"line":33,"column":1,"offset":1281},"end":{"line":33,"column":110,"offset":1390},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1281},"end":{"line":33,"column":110,"offset":1390},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Secondly, ","position":{"start":{"line":35,"column":1,"offset":1392},"end":{"line":35,"column":11,"offset":1402},"indent":[]}},{"type":"inlineCode","value":"Clarity Over Brevity","position":{"start":{"line":35,"column":11,"offset":1402},"end":{"line":35,"column":33,"offset":1424},"indent":[]}},{"type":"text","value":". It is a non goal to enable to smallest possible code. With Objective-C, it was important to write with clarity for naming conventions. We want to stay on board with this clarity for naming.","position":{"start":{"line":35,"column":33,"offset":1424},"end":{"line":35,"column":224,"offset":1615},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1392},"end":{"line":35,"column":224,"offset":1615},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"SWD-2: Guidelines for Naming Types","position":{"start":{"line":37,"column":4,"offset":1620},"end":{"line":37,"column":38,"offset":1654},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1617},"end":{"line":37,"column":38,"offset":1654},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"High level goal of naming things according to their role.","position":{"start":{"line":39,"column":1,"offset":1656},"end":{"line":39,"column":58,"offset":1713},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1656},"end":{"line":39,"column":58,"offset":1713},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example for a quick variable:","position":{"start":{"line":41,"column":1,"offset":1715},"end":{"line":41,"column":30,"offset":1744},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1715},"end":{"line":41,"column":30,"offset":1744},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var someValue = 12\t// bad choice\nvar counter = 12\t// better choice","position":{"start":{"line":43,"column":1,"offset":1746},"end":{"line":46,"column":4,"offset":1820},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Rules for Naming","position":{"start":{"line":48,"column":2,"offset":1823},"end":{"line":48,"column":18,"offset":1839},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1822},"end":{"line":48,"column":19,"offset":1840},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1822},"end":{"line":48,"column":19,"offset":1840},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Names of types properties, variables and constants should ","position":{"start":{"line":50,"column":1,"offset":1842},"end":{"line":50,"column":59,"offset":1900},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"read as nouns","position":{"start":{"line":50,"column":60,"offset":1901},"end":{"line":50,"column":73,"offset":1914},"indent":[]}}],"position":{"start":{"line":50,"column":59,"offset":1900},"end":{"line":50,"column":74,"offset":1915},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":50,"column":74,"offset":1915},"end":{"line":50,"column":75,"offset":1916},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1842},"end":{"line":50,"column":75,"offset":1916},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example ","position":{"start":{"line":52,"column":1,"offset":1918},"end":{"line":52,"column":9,"offset":1926},"indent":[]}},{"type":"inlineCode","value":"class NetworkResponse","position":{"start":{"line":52,"column":9,"offset":1926},"end":{"line":52,"column":32,"offset":1949},"indent":[]}},{"type":"text","value":" - we know from the name that it is for a ","position":{"start":{"line":52,"column":32,"offset":1949},"end":{"line":52,"column":74,"offset":1991},"indent":[]}},{"type":"inlineCode","value":"NetworkReponse","position":{"start":{"line":52,"column":74,"offset":1991},"end":{"line":52,"column":90,"offset":2007},"indent":[]}},{"type":"text","value":". Therefore, we would decide that the responsibility for Network Connection is the responsibility for another class.","position":{"start":{"line":52,"column":90,"offset":2007},"end":{"line":52,"column":206,"offset":2123},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1918},"end":{"line":52,"column":206,"offset":2123},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An example from the ","position":{"start":{"line":54,"column":1,"offset":2125},"end":{"line":54,"column":21,"offset":2145},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"Swift Standard Library Names","position":{"start":{"line":54,"column":22,"offset":2146},"end":{"line":54,"column":50,"offset":2174},"indent":[]}}],"position":{"start":{"line":54,"column":21,"offset":2145},"end":{"line":54,"column":51,"offset":2175},"indent":[]}},{"type":"text","value":" is ","position":{"start":{"line":54,"column":51,"offset":2175},"end":{"line":54,"column":55,"offset":2179},"indent":[]}},{"type":"inlineCode","value":"BidirectionalCollection","position":{"start":{"line":54,"column":55,"offset":2179},"end":{"line":54,"column":80,"offset":2204},"indent":[]}},{"type":"text","value":" - we know from the name that it is a collection that deals with both forward and backward traversal. ","position":{"start":{"line":54,"column":80,"offset":2204},"end":{"line":54,"column":182,"offset":2306},"indent":[]}},{"type":"inlineCode","value":"Sequence","position":{"start":{"line":54,"column":182,"offset":2306},"end":{"line":54,"column":192,"offset":2316},"indent":[]}},{"type":"text","value":" protocol describes a type that provides sequential access to its elements.","position":{"start":{"line":54,"column":192,"offset":2316},"end":{"line":54,"column":267,"offset":2391},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2125},"end":{"line":54,"column":267,"offset":2391},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The exceptions to this rule is for ","position":{"start":{"line":56,"column":1,"offset":2393},"end":{"line":56,"column":36,"offset":2428},"indent":[]}},{"type":"inlineCode","value":"Boolean","position":{"start":{"line":56,"column":36,"offset":2428},"end":{"line":56,"column":45,"offset":2437},"indent":[]}},{"type":"text","value":" values - they should read as asserts. Eg. ","position":{"start":{"line":56,"column":45,"offset":2437},"end":{"line":56,"column":88,"offset":2480},"indent":[]}},{"type":"inlineCode","value":"isEmpty","position":{"start":{"line":56,"column":88,"offset":2480},"end":{"line":56,"column":97,"offset":2489},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":56,"column":97,"offset":2489},"end":{"line":56,"column":98,"offset":2490},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":2393},"end":{"line":56,"column":98,"offset":2490},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The second excepetion is the -able, -ible or -ing suffixes - used for protocols that model capabilities. Examples of this are ","position":{"start":{"line":58,"column":1,"offset":2492},"end":{"line":58,"column":127,"offset":2618},"indent":[]}},{"type":"inlineCode","value":"Equatable","position":{"start":{"line":58,"column":127,"offset":2618},"end":{"line":58,"column":138,"offset":2629},"indent":[]}},{"type":"text","value":" to distinguish between the same type, with other examples such as ","position":{"start":{"line":58,"column":138,"offset":2629},"end":{"line":58,"column":205,"offset":2696},"indent":[]}},{"type":"inlineCode","value":"Comparable","position":{"start":{"line":58,"column":205,"offset":2696},"end":{"line":58,"column":217,"offset":2708},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":58,"column":217,"offset":2708},"end":{"line":58,"column":222,"offset":2713},"indent":[]}},{"type":"inlineCode","value":"ExpressibleByStringLiteral","position":{"start":{"line":58,"column":222,"offset":2713},"end":{"line":58,"column":250,"offset":2741},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":58,"column":250,"offset":2741},"end":{"line":58,"column":251,"offset":2742},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2492},"end":{"line":58,"column":251,"offset":2742},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"SWD-3: Guidelines for Naming Methods","position":{"start":{"line":60,"column":4,"offset":2747},"end":{"line":60,"column":40,"offset":2783},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2744},"end":{"line":60,"column":40,"offset":2783},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We consider function names to be the base name plus the function list. Therefore, reading it will mean that it requires the base name and the arguments in order to understand it.","position":{"start":{"line":62,"column":1,"offset":2785},"end":{"line":62,"column":179,"offset":2963},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2785},"end":{"line":62,"column":179,"offset":2963},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the function parameters themselves, they have both a external name and a local name.","position":{"start":{"line":64,"column":1,"offset":2965},"end":{"line":64,"column":89,"offset":3053},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2965},"end":{"line":64,"column":89,"offset":3053},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func index(_ i: Self.Index, offsetBy n: Self.IndexDistance) -> Self.Index","position":{"start":{"line":66,"column":1,"offset":3055},"end":{"line":66,"column":76,"offset":3130},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":3055},"end":{"line":66,"column":76,"offset":3130},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the second parametere, ","position":{"start":{"line":68,"column":1,"offset":3132},"end":{"line":68,"column":27,"offset":3158},"indent":[]}},{"type":"inlineCode","value":"offsetBy","position":{"start":{"line":68,"column":27,"offset":3158},"end":{"line":68,"column":37,"offset":3168},"indent":[]}},{"type":"text","value":" is the external name.","position":{"start":{"line":68,"column":37,"offset":3168},"end":{"line":68,"column":59,"offset":3190},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":3132},"end":{"line":68,"column":59,"offset":3190},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If there is just one parameter, then that will be both the external and local name. You can use ","position":{"start":{"line":70,"column":1,"offset":3192},"end":{"line":70,"column":97,"offset":3288},"indent":[]}},{"type":"inlineCode","value":"_","position":{"start":{"line":70,"column":97,"offset":3288},"end":{"line":70,"column":100,"offset":3291},"indent":[]}},{"type":"text","value":" to offset the parameter external name.","position":{"start":{"line":70,"column":100,"offset":3291},"end":{"line":70,"column":139,"offset":3330},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3192},"end":{"line":70,"column":139,"offset":3330},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Rule 1","position":{"start":{"line":72,"column":2,"offset":3333},"end":{"line":72,"column":8,"offset":3339},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":3332},"end":{"line":72,"column":9,"offset":3340},"indent":[]}},{"type":"text","value":"\nWe should always check how functions read and use sites when we write them.","position":{"start":{"line":72,"column":9,"offset":3340},"end":{"line":73,"column":76,"offset":3416},"indent":[1]}}],"position":{"start":{"line":72,"column":1,"offset":3332},"end":{"line":73,"column":76,"offset":3416},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Example: ","position":{"start":{"line":75,"column":1,"offset":3418},"end":{"line":75,"column":10,"offset":3427},"indent":[]}},{"type":"inlineCode","value":"func insert(_ e: Element, atPosition: Int)","position":{"start":{"line":75,"column":10,"offset":3427},"end":{"line":75,"column":54,"offset":3471},"indent":[]}},{"type":"text","value":" is better than ","position":{"start":{"line":75,"column":54,"offset":3471},"end":{"line":75,"column":70,"offset":3487},"indent":[]}},{"type":"inlineCode","value":"insert(element: \"a\", position: 1)","position":{"start":{"line":75,"column":70,"offset":3487},"end":{"line":75,"column":105,"offset":3522},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":75,"column":105,"offset":3522},"end":{"line":75,"column":106,"offset":3523},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":3418},"end":{"line":75,"column":106,"offset":3523},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Rule 2","position":{"start":{"line":77,"column":2,"offset":3526},"end":{"line":77,"column":8,"offset":3532},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":3525},"end":{"line":77,"column":9,"offset":3533},"indent":[]}},{"type":"text","value":"\nAvoid Ambiguity","position":{"start":{"line":77,"column":9,"offset":3533},"end":{"line":78,"column":16,"offset":3549},"indent":[1]}}],"position":{"start":{"line":77,"column":1,"offset":3525},"end":{"line":78,"column":16,"offset":3549},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func remove(atIndex: Int).","position":{"start":{"line":80,"column":1,"offset":3551},"end":{"line":80,"column":29,"offset":3579},"indent":[]}},{"type":"text","value":" over ","position":{"start":{"line":80,"column":29,"offset":3579},"end":{"line":80,"column":35,"offset":3585},"indent":[]}},{"type":"inlineCode","value":"func remove(_ index: Int)","position":{"start":{"line":80,"column":35,"offset":3585},"end":{"line":80,"column":62,"offset":3612},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":3551},"end":{"line":80,"column":62,"offset":3612},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"However, in the case of ambiguous type information, we preceed each weakly typed parameter with a noun describing it's role.","position":{"start":{"line":82,"column":1,"offset":3614},"end":{"line":82,"column":125,"offset":3738},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":3614},"end":{"line":82,"column":125,"offset":3738},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func addObserver(_ observer: AnyObject)","position":{"start":{"line":84,"column":1,"offset":3740},"end":{"line":84,"column":42,"offset":3781},"indent":[]}},{"type":"text","value":" over ","position":{"start":{"line":84,"column":42,"offset":3781},"end":{"line":84,"column":48,"offset":3787},"indent":[]}},{"type":"inlineCode","value":"func add(observer: AnyObject)","position":{"start":{"line":84,"column":48,"offset":3787},"end":{"line":84,"column":79,"offset":3818},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":3740},"end":{"line":84,"column":79,"offset":3818},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func update(value: Any, key: String)","position":{"start":{"line":86,"column":1,"offset":3820},"end":{"line":86,"column":39,"offset":3858},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":3820},"end":{"line":86,"column":39,"offset":3858},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here, Any and String both have weak type information.","position":{"start":{"line":88,"column":1,"offset":3860},"end":{"line":88,"column":54,"offset":3913},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":3860},"end":{"line":88,"column":54,"offset":3913},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func updateValue(_ value: Any, forKey key: String)","position":{"start":{"line":90,"column":1,"offset":3915},"end":{"line":90,"column":53,"offset":3967},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":3915},"end":{"line":90,"column":53,"offset":3967},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Summary","position":{"start":{"line":92,"column":2,"offset":3970},"end":{"line":92,"column":9,"offset":3977},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":3969},"end":{"line":92,"column":10,"offset":3978},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":3969},"end":{"line":92,"column":10,"offset":3978},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Omit needless information","position":{"start":{"line":94,"column":5,"offset":3984},"end":{"line":94,"column":30,"offset":4009},"indent":[]}}],"position":{"start":{"line":94,"column":5,"offset":3984},"end":{"line":94,"column":30,"offset":4009},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3980},"end":{"line":94,"column":30,"offset":4009},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Include all words need to avoid ambiguity","position":{"start":{"line":95,"column":5,"offset":4014},"end":{"line":95,"column":46,"offset":4055},"indent":[]}}],"position":{"start":{"line":95,"column":5,"offset":4014},"end":{"line":95,"column":46,"offset":4055},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":4010},"end":{"line":95,"column":46,"offset":4055},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Compensate for weak type information","position":{"start":{"line":96,"column":5,"offset":4060},"end":{"line":96,"column":41,"offset":4096},"indent":[]}}],"position":{"start":{"line":96,"column":5,"offset":4060},"end":{"line":96,"column":41,"offset":4096},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":4056},"end":{"line":96,"column":41,"offset":4096},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3980},"end":{"line":96,"column":41,"offset":4096},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"SWD-4: Fluent Usage","position":{"start":{"line":98,"column":4,"offset":4101},"end":{"line":98,"column":23,"offset":4120},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":4098},"end":{"line":98,"column":23,"offset":4120},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The high level guidelines don't give too many details.","position":{"start":{"line":100,"column":1,"offset":4122},"end":{"line":100,"column":55,"offset":4176},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":4122},"end":{"line":100,"column":55,"offset":4176},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Fluent Usage","position":{"start":{"line":102,"column":2,"offset":4179},"end":{"line":102,"column":14,"offset":4191},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":4178},"end":{"line":102,"column":15,"offset":4192},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":4178},"end":{"line":102,"column":15,"offset":4192},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Methods and functions should be read as grammatical English phrases at the use site.","position":{"start":{"line":104,"column":1,"offset":4194},"end":{"line":104,"column":85,"offset":4278},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":4194},"end":{"line":104,"column":85,"offset":4278},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example: ","position":{"start":{"line":106,"column":1,"offset":4280},"end":{"line":106,"column":10,"offset":4289},"indent":[]}},{"type":"inlineCode","value":"func find(character: String, range: Range<String.Index>) -> Int","position":{"start":{"line":106,"column":10,"offset":4289},"end":{"line":106,"column":75,"offset":4354},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":4280},"end":{"line":106,"column":75,"offset":4354},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This function takes as an argument a character which we'll define as a string defined. We also need the range, so we'll give it range.","position":{"start":{"line":108,"column":1,"offset":4356},"end":{"line":108,"column":135,"offset":4490},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":4356},"end":{"line":108,"column":135,"offset":4490},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We could use...","position":{"start":{"line":110,"column":1,"offset":4492},"end":{"line":110,"column":16,"offset":4507},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":4492},"end":{"line":110,"column":16,"offset":4507},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func find(character: String, in range: Range<String.Index>) -> Int","position":{"start":{"line":112,"column":1,"offset":4509},"end":{"line":112,"column":69,"offset":4577},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":4509},"end":{"line":112,"column":69,"offset":4577},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"But since it is ambiguous for weak type information, would be to omit the external label and the first argument of the name describing it's role:","position":{"start":{"line":114,"column":1,"offset":4579},"end":{"line":114,"column":146,"offset":4724},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":4579},"end":{"line":114,"column":146,"offset":4724},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func find(character: Character, in range: Range<String.Index>) -> Int","position":{"start":{"line":116,"column":1,"offset":4726},"end":{"line":116,"column":72,"offset":4797},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":4726},"end":{"line":116,"column":72,"offset":4797},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"SWD-5: Prepositional vs Grammatical Phrases","position":{"start":{"line":118,"column":4,"offset":4802},"end":{"line":118,"column":47,"offset":4845},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":4799},"end":{"line":118,"column":47,"offset":4845},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is an exception for the grammatical phrases.","position":{"start":{"line":120,"column":1,"offset":4847},"end":{"line":120,"column":50,"offset":4896},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":4847},"end":{"line":120,"column":50,"offset":4896},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Eg. \"The laptop on the desk\" - ","position":{"start":{"line":122,"column":1,"offset":4898},"end":{"line":122,"column":32,"offset":4929},"indent":[]}},{"type":"inlineCode","value":"on","position":{"start":{"line":122,"column":32,"offset":4929},"end":{"line":122,"column":36,"offset":4933},"indent":[]}},{"type":"text","value":" is the preposition.","position":{"start":{"line":122,"column":36,"offset":4933},"end":{"line":122,"column":56,"offset":4953},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":4898},"end":{"line":122,"column":56,"offset":4953},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"How does this relate?","position":{"start":{"line":124,"column":1,"offset":4955},"end":{"line":124,"column":22,"offset":4976},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":4955},"end":{"line":124,"column":22,"offset":4976},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Eg.","position":{"start":{"line":126,"column":1,"offset":4978},"end":{"line":126,"column":4,"offset":4981},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":4978},"end":{"line":126,"column":4,"offset":4981},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func move(position: Int)","position":{"start":{"line":128,"column":1,"offset":4983},"end":{"line":128,"column":27,"offset":5009},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":4983},"end":{"line":128,"column":27,"offset":5009},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Normally we would say \"move to position\", however if we need to use that preposition ","position":{"start":{"line":130,"column":1,"offset":5011},"end":{"line":130,"column":86,"offset":5096},"indent":[]}},{"type":"inlineCode","value":"to","position":{"start":{"line":130,"column":86,"offset":5096},"end":{"line":130,"column":90,"offset":5100},"indent":[]}},{"type":"text","value":" then we give it an argument label that begins at the preposition.","position":{"start":{"line":130,"column":90,"offset":5100},"end":{"line":130,"column":156,"offset":5166},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":5011},"end":{"line":130,"column":156,"offset":5166},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func move(toPosition position: Int)","position":{"start":{"line":132,"column":1,"offset":5168},"end":{"line":132,"column":38,"offset":5205},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":5168},"end":{"line":132,"column":38,"offset":5205},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Another example would be ","position":{"start":{"line":134,"column":1,"offset":5207},"end":{"line":134,"column":26,"offset":5232},"indent":[]}},{"type":"inlineCode","value":"x.removeBoxes(havingLength: 12)","position":{"start":{"line":134,"column":26,"offset":5232},"end":{"line":134,"column":59,"offset":5265},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":134,"column":59,"offset":5265},"end":{"line":134,"column":60,"offset":5266},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":5207},"end":{"line":134,"column":60,"offset":5266},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The exception to this would be that only one argument governed the function.","position":{"start":{"line":136,"column":1,"offset":5268},"end":{"line":136,"column":77,"offset":5344},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":5268},"end":{"line":136,"column":77,"offset":5344},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example, ","position":{"start":{"line":138,"column":1,"offset":5346},"end":{"line":138,"column":10,"offset":5355},"indent":[]}},{"type":"inlineCode","value":"func move(toX: Int, y: Int)","position":{"start":{"line":138,"column":10,"offset":5355},"end":{"line":138,"column":39,"offset":5384},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":5346},"end":{"line":138,"column":39,"offset":5384},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We begin with the prepositional phrase, however both args are part of the abstraction. In that case, we move the preposition out of the arguments in to the base name.","position":{"start":{"line":140,"column":1,"offset":5386},"end":{"line":140,"column":167,"offset":5552},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":5386},"end":{"line":140,"column":167,"offset":5552},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func moveTo(x: Int, y: Int)","position":{"start":{"line":142,"column":1,"offset":5554},"end":{"line":142,"column":30,"offset":5583},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":5554},"end":{"line":142,"column":30,"offset":5583},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Another example for context:","position":{"start":{"line":144,"column":1,"offset":5585},"end":{"line":144,"column":29,"offset":5613},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":5585},"end":{"line":144,"column":29,"offset":5613},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func dismiss(animated: Bool)","position":{"start":{"line":146,"column":1,"offset":5615},"end":{"line":146,"column":31,"offset":5645},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":5615},"end":{"line":146,"column":31,"offset":5645},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"SWD-6: Recap on Naming","position":{"start":{"line":148,"column":4,"offset":5650},"end":{"line":148,"column":26,"offset":5672},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":5647},"end":{"line":148,"column":26,"offset":5672},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Prepositional Phrase: Exception","position":{"start":{"line":150,"column":2,"offset":5675},"end":{"line":150,"column":33,"offset":5706},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":5674},"end":{"line":150,"column":34,"offset":5707},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":5674},"end":{"line":150,"column":34,"offset":5707},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"view.fadeTo(red: a, green: b, blue: c)","position":{"start":{"line":152,"column":1,"offset":5709},"end":{"line":152,"column":41,"offset":5749},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":5709},"end":{"line":152,"column":41,"offset":5749},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Grammatical Phrase","position":{"start":{"line":154,"column":2,"offset":5752},"end":{"line":154,"column":20,"offset":5770},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":5751},"end":{"line":154,"column":21,"offset":5771},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":5751},"end":{"line":154,"column":21,"offset":5771},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"view.addSubview(y)","position":{"start":{"line":156,"column":1,"offset":5773},"end":{"line":156,"column":21,"offset":5793},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":5773},"end":{"line":156,"column":21,"offset":5793},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Neither Gammatical Nor Prepositional","position":{"start":{"line":158,"column":2,"offset":5796},"end":{"line":158,"column":38,"offset":5832},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":5795},"end":{"line":158,"column":39,"offset":5833},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":5795},"end":{"line":158,"column":39,"offset":5833},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func dismiss(animated: Bool)","position":{"start":{"line":160,"column":1,"offset":5835},"end":{"line":160,"column":31,"offset":5865},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":5835},"end":{"line":160,"column":31,"offset":5865},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Omit needless words","position":{"start":{"line":162,"column":5,"offset":5871},"end":{"line":162,"column":24,"offset":5890},"indent":[]}}],"position":{"start":{"line":162,"column":5,"offset":5871},"end":{"line":162,"column":24,"offset":5890},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":5867},"end":{"line":162,"column":24,"offset":5890},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Avoid ambiguity","position":{"start":{"line":163,"column":5,"offset":5895},"end":{"line":163,"column":20,"offset":5910},"indent":[]}}],"position":{"start":{"line":163,"column":5,"offset":5895},"end":{"line":163,"column":20,"offset":5910},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":5891},"end":{"line":163,"column":20,"offset":5910},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Avoid needless words","position":{"start":{"line":164,"column":5,"offset":5915},"end":{"line":164,"column":25,"offset":5935},"indent":[]}}],"position":{"start":{"line":164,"column":5,"offset":5915},"end":{"line":164,"column":25,"offset":5935},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":5911},"end":{"line":164,"column":25,"offset":5935},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":5867},"end":{"line":164,"column":25,"offset":5935},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"More Examples of Methods from the Swift SDK","position":{"start":{"line":166,"column":2,"offset":5938},"end":{"line":166,"column":45,"offset":5981},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":5937},"end":{"line":166,"column":46,"offset":5982},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":5937},"end":{"line":166,"column":46,"offset":5982},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"func activate(_ constraints: [NSLayoutConstraint])\n// activate constraints - grammatical\n// omit needless words - so no need for activateConstraints","position":{"start":{"line":168,"column":1,"offset":5984},"end":{"line":172,"column":4,"offset":6140},"indent":[1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"func max(_ x: Int, _ y: Int) -> Int\n// no meaningful to write more beyond the base\n// no need for naming arguments","position":{"start":{"line":174,"column":1,"offset":6142},"end":{"line":178,"column":4,"offset":6264},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"SWD-7: Side-Effects and Mutation","position":{"start":{"line":180,"column":4,"offset":6269},"end":{"line":180,"column":36,"offset":6301},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":6266},"end":{"line":180,"column":36,"offset":6301},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want to name methods in accordance with their side effect.","position":{"start":{"line":182,"column":1,"offset":6303},"end":{"line":182,"column":62,"offset":6364},"indent":[]}}],"position":{"start":{"line":182,"column":1,"offset":6303},"end":{"line":182,"column":62,"offset":6364},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is one that mutates the current state. If it effects the current state, it should be named using verb phrases.","position":{"start":{"line":184,"column":1,"offset":6366},"end":{"line":184,"column":116,"offset":6481},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":6366},"end":{"line":184,"column":116,"offset":6481},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An example would adding an element to the array. This effects the state of the array as it mutates it.","position":{"start":{"line":186,"column":1,"offset":6483},"end":{"line":186,"column":103,"offset":6585},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":6483},"end":{"line":186,"column":103,"offset":6585},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func append(_ newElement: Element)","position":{"start":{"line":188,"column":1,"offset":6587},"end":{"line":188,"column":37,"offset":6623},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":6587},"end":{"line":188,"column":37,"offset":6623},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Nouns are used for when the state is not effected.","position":{"start":{"line":190,"column":1,"offset":6625},"end":{"line":190,"column":51,"offset":6675},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":6625},"end":{"line":190,"column":51,"offset":6675},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func distance(to point: Point)","position":{"start":{"line":192,"column":1,"offset":6677},"end":{"line":192,"column":33,"offset":6709},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":6677},"end":{"line":192,"column":33,"offset":6709},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"What if the operation is naturally described as a verb?","position":{"start":{"line":194,"column":1,"offset":6711},"end":{"line":194,"column":56,"offset":6766},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":6711},"end":{"line":194,"column":56,"offset":6766},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Then we use the imperitive form for the verb.","position":{"start":{"line":196,"column":1,"offset":6768},"end":{"line":196,"column":46,"offset":6813},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":6768},"end":{"line":196,"column":46,"offset":6813},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"anArray.filter(isEven)","position":{"start":{"line":198,"column":1,"offset":6815},"end":{"line":198,"column":25,"offset":6839},"indent":[]}},{"type":"text","value":" - filter being the verb mutating the array state.","position":{"start":{"line":198,"column":25,"offset":6839},"end":{"line":198,"column":75,"offset":6889},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":6815},"end":{"line":198,"column":75,"offset":6889},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Mutating verse non-mutation of the state","position":{"start":{"line":200,"column":2,"offset":6892},"end":{"line":200,"column":42,"offset":6932},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":6891},"end":{"line":200,"column":43,"offset":6933},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":6891},"end":{"line":200,"column":43,"offset":6933},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Mutating example: ","position":{"start":{"line":202,"column":1,"offset":6935},"end":{"line":202,"column":19,"offset":6953},"indent":[]}},{"type":"inlineCode","value":"anArray.sort()","position":{"start":{"line":202,"column":19,"offset":6953},"end":{"line":202,"column":35,"offset":6969},"indent":[]}},{"type":"text","value":"\nNon-mutating example: ","position":{"start":{"line":202,"column":35,"offset":6969},"end":{"line":203,"column":23,"offset":6992},"indent":[1]}},{"type":"inlineCode","value":"let sortedArray = anArray.sorted()","position":{"start":{"line":203,"column":23,"offset":6992},"end":{"line":203,"column":59,"offset":7028},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":6935},"end":{"line":203,"column":59,"offset":7028},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Suffixes that can be used include ","position":{"start":{"line":205,"column":1,"offset":7030},"end":{"line":205,"column":35,"offset":7064},"indent":[]}},{"type":"inlineCode","value":"-ed","position":{"start":{"line":205,"column":35,"offset":7064},"end":{"line":205,"column":40,"offset":7069},"indent":[]}},{"type":"text","value":" and when it doesn't sound right ","position":{"start":{"line":205,"column":40,"offset":7069},"end":{"line":205,"column":73,"offset":7102},"indent":[]}},{"type":"inlineCode","value":"-ing","position":{"start":{"line":205,"column":73,"offset":7102},"end":{"line":205,"column":79,"offset":7108},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":205,"column":79,"offset":7108},"end":{"line":205,"column":80,"offset":7109},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":7030},"end":{"line":205,"column":80,"offset":7109},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Mutation for nouns","position":{"start":{"line":207,"column":2,"offset":7112},"end":{"line":207,"column":20,"offset":7130},"indent":[]}}],"position":{"start":{"line":207,"column":1,"offset":7111},"end":{"line":207,"column":21,"offset":7131},"indent":[]}}],"position":{"start":{"line":207,"column":1,"offset":7111},"end":{"line":207,"column":21,"offset":7131},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is simpler. We use noun for non-mutating and form prefix for mutating counterpart.","position":{"start":{"line":209,"column":1,"offset":7133},"end":{"line":209,"column":88,"offset":7220},"indent":[]}}],"position":{"start":{"line":209,"column":1,"offset":7133},"end":{"line":209,"column":88,"offset":7220},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Mutating example: ","position":{"start":{"line":211,"column":1,"offset":7222},"end":{"line":211,"column":19,"offset":7240},"indent":[]}},{"type":"inlineCode","value":"anArray.formUnion(with: anotherArray)","position":{"start":{"line":211,"column":19,"offset":7240},"end":{"line":211,"column":58,"offset":7279},"indent":[]}},{"type":"text","value":"\nNon-mutating: ","position":{"start":{"line":211,"column":58,"offset":7279},"end":{"line":212,"column":15,"offset":7294},"indent":[1]}},{"type":"inlineCode","value":"let union = anArray.union(with: anotherArray)","position":{"start":{"line":212,"column":15,"offset":7294},"end":{"line":212,"column":62,"offset":7341},"indent":[]}}],"position":{"start":{"line":211,"column":1,"offset":7222},"end":{"line":212,"column":62,"offset":7341},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The exception arises for pairs of mutating and non-mutating counterparts.","position":{"start":{"line":214,"column":1,"offset":7343},"end":{"line":214,"column":74,"offset":7416},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":7343},"end":{"line":214,"column":74,"offset":7416},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If it best described using a verb, you use that for the mutating method.","position":{"start":{"line":216,"column":1,"offset":7418},"end":{"line":216,"column":73,"offset":7490},"indent":[]}}],"position":{"start":{"line":216,"column":1,"offset":7418},"end":{"line":216,"column":73,"offset":7490},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For non-mutating, use ","position":{"start":{"line":218,"column":1,"offset":7492},"end":{"line":218,"column":23,"offset":7514},"indent":[]}},{"type":"inlineCode","value":"-ed","position":{"start":{"line":218,"column":23,"offset":7514},"end":{"line":218,"column":28,"offset":7519},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":218,"column":28,"offset":7519},"end":{"line":218,"column":32,"offset":7523},"indent":[]}},{"type":"inlineCode","value":"-ing","position":{"start":{"line":218,"column":32,"offset":7523},"end":{"line":218,"column":38,"offset":7529},"indent":[]}},{"type":"text","value":" suffix.","position":{"start":{"line":218,"column":38,"offset":7529},"end":{"line":218,"column":46,"offset":7537},"indent":[]}}],"position":{"start":{"line":218,"column":1,"offset":7492},"end":{"line":218,"column":46,"offset":7537},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Then noun form for non-mutating version of nouns and form prefix for mutating method.","position":{"start":{"line":220,"column":1,"offset":7539},"end":{"line":220,"column":86,"offset":7624},"indent":[]}}],"position":{"start":{"line":220,"column":1,"offset":7539},"end":{"line":220,"column":86,"offset":7624},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"SWD-8: Conventions","position":{"start":{"line":222,"column":4,"offset":7629},"end":{"line":222,"column":22,"offset":7647},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":7626},"end":{"line":222,"column":22,"offset":7647},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Boolean Methods","position":{"start":{"line":224,"column":2,"offset":7650},"end":{"line":224,"column":17,"offset":7665},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":7649},"end":{"line":224,"column":18,"offset":7666},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":7649},"end":{"line":224,"column":18,"offset":7666},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"func isInRange(of point: Point)","position":{"start":{"line":226,"column":1,"offset":7668},"end":{"line":226,"column":34,"offset":7701},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":7668},"end":{"line":226,"column":34,"offset":7701},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Parameters","position":{"start":{"line":228,"column":2,"offset":7704},"end":{"line":228,"column":12,"offset":7714},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":7703},"end":{"line":228,"column":13,"offset":7715},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":7703},"end":{"line":228,"column":13,"offset":7715},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Choose parameter names that serve documentation.","position":{"start":{"line":230,"column":5,"offset":7721},"end":{"line":230,"column":53,"offset":7769},"indent":[]}}],"position":{"start":{"line":230,"column":5,"offset":7721},"end":{"line":230,"column":53,"offset":7769},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":7717},"end":{"line":230,"column":53,"offset":7769},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use default values where possible to simplify function signatures.","position":{"start":{"line":231,"column":5,"offset":7774},"end":{"line":231,"column":71,"offset":7840},"indent":[]}}],"position":{"start":{"line":231,"column":5,"offset":7774},"end":{"line":231,"column":71,"offset":7840},"indent":[]}}],"position":{"start":{"line":231,"column":1,"offset":7770},"end":{"line":231,"column":71,"offset":7840},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In Swift, default args are preferred to method families.","position":{"start":{"line":232,"column":5,"offset":7845},"end":{"line":232,"column":61,"offset":7901},"indent":[]}}],"position":{"start":{"line":232,"column":5,"offset":7845},"end":{"line":232,"column":61,"offset":7901},"indent":[]}}],"position":{"start":{"line":232,"column":1,"offset":7841},"end":{"line":232,"column":61,"offset":7901},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":7717},"end":{"line":232,"column":61,"offset":7901},"indent":[1,1]}},{"type":"code","lang":null,"meta":null,"value":"let order = lastName.compare(royalFamilyName, options: [], range: nil, local: nil)","position":{"start":{"line":234,"column":1,"offset":7903},"end":{"line":236,"column":4,"offset":7993},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Keep parameters with default parameters to sit at the end of the function.","position":{"start":{"line":238,"column":1,"offset":7995},"end":{"line":238,"column":75,"offset":8069},"indent":[]}}],"position":{"start":{"line":238,"column":1,"offset":7995},"end":{"line":238,"column":75,"offset":8069},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Same basenames are also fine if they operate within different domains.","position":{"start":{"line":240,"column":1,"offset":8071},"end":{"line":240,"column":71,"offset":8141},"indent":[]}}],"position":{"start":{"line":240,"column":1,"offset":8071},"end":{"line":240,"column":71,"offset":8141},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":243,"column":1,"offset":8144},"end":{"line":243,"column":31,"offset":8174},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":243,"column":31,"offset":8174}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"api-design-guidelines-in-swift-3\"\n    }}>{`API Design Guidelines in Swift 3`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#api-design-guidelines-in-swift-3\"\n        }}>{`API Design Guidelines in Swift 3`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#swd-1-why-do-we-need-guidelines\"\n            }}>{`SWD-1: Why do we need guidelines?`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#swd-2-guidelines-for-naming-types\"\n            }}>{`SWD-2: Guidelines for Naming Types`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#swd-3-guidelines-for-naming-methods\"\n            }}>{`SWD-3: Guidelines for Naming Methods`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#swd-4-fluent-usage\"\n            }}>{`SWD-4: Fluent Usage`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#swd-5-prepositional-vs-grammatical-phrases\"\n            }}>{`SWD-5: Prepositional vs Grammatical Phrases`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#swd-6-recap-on-naming\"\n            }}>{`SWD-6: Recap on Naming`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#swd-7-side-effects-and-mutation\"\n            }}>{`SWD-7: Side-Effects and Mutation`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#swd-8-conventions\"\n            }}>{`SWD-8: Conventions`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"swd-1-why-do-we-need-guidelines\"\n    }}>{`SWD-1: Why do we need guidelines?`}</h2>\n    <p>{`Initially when Swift was created, there were no real guidelines.`}</p>\n    <p>{`It still largely means working with Objective-C code.`}</p>\n    <p>{`With the open sourcing in 2015, the Swift team worked towards a standard for the guidelines.`}</p>\n    <p>{`The most important rule with Swift is to correctly use the `}<inlineCode parentName=\"p\">{`Point of Use`}</inlineCode>{`. Readability at call site is more important than point of definition.`}</p>\n    <p>{`Methods and properties are written once and called and used many times, so the focus should be on the latter.`}</p>\n    <p>{`Secondly, `}<inlineCode parentName=\"p\">{`Clarity Over Brevity`}</inlineCode>{`. It is a non goal to enable to smallest possible code. With Objective-C, it was important to write with clarity for naming conventions. We want to stay on board with this clarity for naming.`}</p>\n    <h2 {...{\n      \"id\": \"swd-2-guidelines-for-naming-types\"\n    }}>{`SWD-2: Guidelines for Naming Types`}</h2>\n    <p>{`High level goal of naming things according to their role.`}</p>\n    <p>{`Example for a quick variable:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`var someValue = 12  // bad choice\nvar counter = 12    // better choice\n`}</code></pre>\n    <p><em parentName=\"p\">{`Rules for Naming`}</em></p>\n    <p>{`Names of types properties, variables and constants should `}<em parentName=\"p\">{`read as nouns`}</em>{`.`}</p>\n    <p>{`Example `}<inlineCode parentName=\"p\">{`class NetworkResponse`}</inlineCode>{` - we know from the name that it is for a `}<inlineCode parentName=\"p\">{`NetworkReponse`}</inlineCode>{`. Therefore, we would decide that the responsibility for Network Connection is the responsibility for another class.`}</p>\n    <p>{`An example from the `}<em parentName=\"p\">{`Swift Standard Library Names`}</em>{` is `}<inlineCode parentName=\"p\">{`BidirectionalCollection`}</inlineCode>{` - we know from the name that it is a collection that deals with both forward and backward traversal. `}<inlineCode parentName=\"p\">{`Sequence`}</inlineCode>{` protocol describes a type that provides sequential access to its elements.`}</p>\n    <p>{`The exceptions to this rule is for `}<inlineCode parentName=\"p\">{`Boolean`}</inlineCode>{` values - they should read as asserts. Eg. `}<inlineCode parentName=\"p\">{`isEmpty`}</inlineCode>{`.`}</p>\n    <p>{`The second excepetion is the -able, -ible or -ing suffixes - used for protocols that model capabilities. Examples of this are `}<inlineCode parentName=\"p\">{`Equatable`}</inlineCode>{` to distinguish between the same type, with other examples such as `}<inlineCode parentName=\"p\">{`Comparable`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ExpressibleByStringLiteral`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"swd-3-guidelines-for-naming-methods\"\n    }}>{`SWD-3: Guidelines for Naming Methods`}</h2>\n    <p>{`We consider function names to be the base name plus the function list. Therefore, reading it will mean that it requires the base name and the arguments in order to understand it.`}</p>\n    <p>{`For the function parameters themselves, they have both a external name and a local name.`}</p>\n    <p><inlineCode parentName=\"p\">{`func index(_ i: Self.Index, offsetBy n: Self.IndexDistance) -> Self.Index`}</inlineCode></p>\n    <p>{`In the second parametere, `}<inlineCode parentName=\"p\">{`offsetBy`}</inlineCode>{` is the external name.`}</p>\n    <p>{`If there is just one parameter, then that will be both the external and local name. You can use `}<inlineCode parentName=\"p\">{`_`}</inlineCode>{` to offset the parameter external name.`}</p>\n    <p><em parentName=\"p\">{`Rule 1`}</em>{`\nWe should always check how functions read and use sites when we write them.`}</p>\n    <p>{`Example: `}<inlineCode parentName=\"p\">{`func insert(_ e: Element, atPosition: Int)`}</inlineCode>{` is better than `}<inlineCode parentName=\"p\">{`insert(element: \"a\", position: 1)`}</inlineCode>{`.`}</p>\n    <p><em parentName=\"p\">{`Rule 2`}</em>{`\nAvoid Ambiguity`}</p>\n    <p><inlineCode parentName=\"p\">{`func remove(atIndex: Int).`}</inlineCode>{` over `}<inlineCode parentName=\"p\">{`func remove(_ index: Int)`}</inlineCode></p>\n    <p>{`However, in the case of ambiguous type information, we preceed each weakly typed parameter with a noun describing it's role.`}</p>\n    <p><inlineCode parentName=\"p\">{`func addObserver(_ observer: AnyObject)`}</inlineCode>{` over `}<inlineCode parentName=\"p\">{`func add(observer: AnyObject)`}</inlineCode></p>\n    <p><inlineCode parentName=\"p\">{`func update(value: Any, key: String)`}</inlineCode></p>\n    <p>{`Here, Any and String both have weak type information.`}</p>\n    <p><inlineCode parentName=\"p\">{`func updateValue(_ value: Any, forKey key: String)`}</inlineCode></p>\n    <p><em parentName=\"p\">{`Summary`}</em></p>\n    <ul>\n      <li parentName=\"ul\">{`Omit needless information`}</li>\n      <li parentName=\"ul\">{`Include all words need to avoid ambiguity`}</li>\n      <li parentName=\"ul\">{`Compensate for weak type information`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"swd-4-fluent-usage\"\n    }}>{`SWD-4: Fluent Usage`}</h2>\n    <p>{`The high level guidelines don't give too many details.`}</p>\n    <p><em parentName=\"p\">{`Fluent Usage`}</em></p>\n    <p>{`Methods and functions should be read as grammatical English phrases at the use site.`}</p>\n    <p>{`Example: `}<inlineCode parentName=\"p\">{`func find(character: String, range: Range<String.Index>) -> Int`}</inlineCode></p>\n    <p>{`This function takes as an argument a character which we'll define as a string defined. We also need the range, so we'll give it range.`}</p>\n    <p>{`We could use...`}</p>\n    <p><inlineCode parentName=\"p\">{`func find(character: String, in range: Range<String.Index>) -> Int`}</inlineCode></p>\n    <p>{`But since it is ambiguous for weak type information, would be to omit the external label and the first argument of the name describing it's role:`}</p>\n    <p><inlineCode parentName=\"p\">{`func find(character: Character, in range: Range<String.Index>) -> Int`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"swd-5-prepositional-vs-grammatical-phrases\"\n    }}>{`SWD-5: Prepositional vs Grammatical Phrases`}</h2>\n    <p>{`This is an exception for the grammatical phrases.`}</p>\n    <p>{`Eg. \"The laptop on the desk\" - `}<inlineCode parentName=\"p\">{`on`}</inlineCode>{` is the preposition.`}</p>\n    <p>{`How does this relate?`}</p>\n    <p>{`Eg.`}</p>\n    <p><inlineCode parentName=\"p\">{`func move(position: Int)`}</inlineCode></p>\n    <p>{`Normally we would say \"move to position\", however if we need to use that preposition `}<inlineCode parentName=\"p\">{`to`}</inlineCode>{` then we give it an argument label that begins at the preposition.`}</p>\n    <p><inlineCode parentName=\"p\">{`func move(toPosition position: Int)`}</inlineCode></p>\n    <p>{`Another example would be `}<inlineCode parentName=\"p\">{`x.removeBoxes(havingLength: 12)`}</inlineCode>{`.`}</p>\n    <p>{`The exception to this would be that only one argument governed the function.`}</p>\n    <p>{`Example, `}<inlineCode parentName=\"p\">{`func move(toX: Int, y: Int)`}</inlineCode></p>\n    <p>{`We begin with the prepositional phrase, however both args are part of the abstraction. In that case, we move the preposition out of the arguments in to the base name.`}</p>\n    <p><inlineCode parentName=\"p\">{`func moveTo(x: Int, y: Int)`}</inlineCode></p>\n    <p>{`Another example for context:`}</p>\n    <p><inlineCode parentName=\"p\">{`func dismiss(animated: Bool)`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"swd-6-recap-on-naming\"\n    }}>{`SWD-6: Recap on Naming`}</h2>\n    <p><em parentName=\"p\">{`Prepositional Phrase: Exception`}</em></p>\n    <p><inlineCode parentName=\"p\">{`view.fadeTo(red: a, green: b, blue: c)`}</inlineCode></p>\n    <p><em parentName=\"p\">{`Grammatical Phrase`}</em></p>\n    <p><inlineCode parentName=\"p\">{`view.addSubview(y)`}</inlineCode></p>\n    <p><em parentName=\"p\">{`Neither Gammatical Nor Prepositional`}</em></p>\n    <p><inlineCode parentName=\"p\">{`func dismiss(animated: Bool)`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\">{`Omit needless words`}</li>\n      <li parentName=\"ul\">{`Avoid ambiguity`}</li>\n      <li parentName=\"ul\">{`Avoid needless words`}</li>\n    </ul>\n    <p><em parentName=\"p\">{`More Examples of Methods from the Swift SDK`}</em></p>\n    <pre><code parentName=\"pre\" {...{}}>{`func activate(_ constraints: [NSLayoutConstraint])\n// activate constraints - grammatical\n// omit needless words - so no need for activateConstraints\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`func max(_ x: Int, _ y: Int) -> Int\n// no meaningful to write more beyond the base\n// no need for naming arguments\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"swd-7-side-effects-and-mutation\"\n    }}>{`SWD-7: Side-Effects and Mutation`}</h2>\n    <p>{`We want to name methods in accordance with their side effect.`}</p>\n    <p>{`This is one that mutates the current state. If it effects the current state, it should be named using verb phrases.`}</p>\n    <p>{`An example would adding an element to the array. This effects the state of the array as it mutates it.`}</p>\n    <p><inlineCode parentName=\"p\">{`func append(_ newElement: Element)`}</inlineCode></p>\n    <p>{`Nouns are used for when the state is not effected.`}</p>\n    <p><inlineCode parentName=\"p\">{`func distance(to point: Point)`}</inlineCode></p>\n    <p>{`What if the operation is naturally described as a verb?`}</p>\n    <p>{`Then we use the imperitive form for the verb.`}</p>\n    <p><inlineCode parentName=\"p\">{`anArray.filter(isEven)`}</inlineCode>{` - filter being the verb mutating the array state.`}</p>\n    <p><em parentName=\"p\">{`Mutating verse non-mutation of the state`}</em></p>\n    <p>{`Mutating example: `}<inlineCode parentName=\"p\">{`anArray.sort()`}</inlineCode>{`\nNon-mutating example: `}<inlineCode parentName=\"p\">{`let sortedArray = anArray.sorted()`}</inlineCode></p>\n    <p>{`Suffixes that can be used include `}<inlineCode parentName=\"p\">{`-ed`}</inlineCode>{` and when it doesn't sound right `}<inlineCode parentName=\"p\">{`-ing`}</inlineCode>{`.`}</p>\n    <p><em parentName=\"p\">{`Mutation for nouns`}</em></p>\n    <p>{`This is simpler. We use noun for non-mutating and form prefix for mutating counterpart.`}</p>\n    <p>{`Mutating example: `}<inlineCode parentName=\"p\">{`anArray.formUnion(with: anotherArray)`}</inlineCode>{`\nNon-mutating: `}<inlineCode parentName=\"p\">{`let union = anArray.union(with: anotherArray)`}</inlineCode></p>\n    <p>{`The exception arises for pairs of mutating and non-mutating counterparts.`}</p>\n    <p>{`If it best described using a verb, you use that for the mutating method.`}</p>\n    <p>{`For non-mutating, use `}<inlineCode parentName=\"p\">{`-ed`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`-ing`}</inlineCode>{` suffix.`}</p>\n    <p>{`Then noun form for non-mutating version of nouns and form prefix for mutating method.`}</p>\n    <h2 {...{\n      \"id\": \"swd-8-conventions\"\n    }}>{`SWD-8: Conventions`}</h2>\n    <p><em parentName=\"p\">{`Boolean Methods`}</em></p>\n    <p><inlineCode parentName=\"p\">{`func isInRange(of point: Point)`}</inlineCode></p>\n    <p><em parentName=\"p\">{`Parameters`}</em></p>\n    <ul>\n      <li parentName=\"ul\">{`Choose parameter names that serve documentation.`}</li>\n      <li parentName=\"ul\">{`Use default values where possible to simplify function signatures.`}</li>\n      <li parentName=\"ul\">{`In Swift, default args are preferred to method families.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`let order = lastName.compare(royalFamilyName, options: [], range: nil, local: nil)\n`}</code></pre>\n    <p>{`Keep parameters with default parameters to sit at the end of the function.`}</p>\n    <p>{`Same basenames are also fine if they operate within different domains.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}