{"expireTime":9007200849425523000,"key":"gatsby-plugin-mdx-entire-payload-0051ddfc206cab84e8627c02cb15953e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"PHP Help Sheet","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":17,"offset":182},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":17,"offset":182},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Treehouse PHP Classes","position":{"start":{"line":9,"column":4,"offset":187},"end":{"line":9,"column":25,"offset":208},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":184},"end":{"line":9,"column":25,"offset":208},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"PHP OOP\nclasses\nrecipe.php\ncookbook.php","position":{"start":{"line":11,"column":3,"offset":212},"end":{"line":14,"column":17,"offset":262},"indent":[4,5,5]}}],"position":{"start":{"line":11,"column":3,"offset":212},"end":{"line":14,"column":17,"offset":262},"indent":[4,5,5]}}],"position":{"start":{"line":11,"column":1,"offset":210},"end":{"line":14,"column":17,"offset":262},"indent":[1,1,1]}},{"type":"code","lang":"php","meta":null,"value":"// recipe.php\n\n<?php\n\nclass Recipe\n{\n\tprivate $title;\n\tpublic $ingredients = array();\n\tpublic $instruction = array();\n\tpublic $yield;\n\tpublic $tag = array();\n\tpublic $source = 'Alena Holligan';\n\n\tprivate $measurements = array(\n\t\t\"tsp\",\n\t\t\"tbsp\",\n\t\t\"cup\",\n\t\t\"oz\",\n\t\t\"lb\",\n\t\t\"fl oz\",\n\t\t\"pint\",\n\t\t\"quart\",\n\t\t\"gallon\"\n\t);\n\n\tpublic function displayRecipe()\n\t{\n\t\treturn $this->title . \"by\" . $this->source;\n\t}\n\n\tpublic function addIngredient($item, $amount = null, $measure=null)\n\t{\n\t\tif ($amount != null && !is_float($amount) && !is_int($amount)) {\n\t\t\texit(\"The amount must be a float: \") . gettype($amount) . \" $amount given\");\n\t\t}\n\n\t\tif ($measure != null && !in_array(strtolower($measure), $this->measurements)) {\n\t\t\texit(\"Please enter a valid measurement: \" . implode(\", \", $this->measurements));\n\t\t}\n\n\t\t$this->ingredients[] = array (\n\t\t\t\"item\" => ucwords($item),\n\t\t\t\"amount\" => $amount,\n\t\t\t\"measure\" => strtolower($measure)\n\t\t);\n\t}\n\n\tpublic function getIngredients()\n\t{\n\t\treturn $this->ingredients;\n\t}\n\n\tpublic function setTitle($title)\n\t{\n\t\t$this->title = ucword($title);\n\t}\n\n\tpublic function getTitle()\n\t{\n\t\treturn $this->title;\n\t}\n\n}\n\n?>\n\n// cookbook.php\n\n<?php\n\ninclude \"classes/recipes.php\";\n\n$recipe1 = new Recipe();\necho $recipe1->source;\n$recipe1->source(\"Grandma Holligan\");\necho $recipe1->source;\n$recipe1->setTitle(\"My first recipe\");\n$recipe1->getTitle();\n\n$recipe1->addIngredient(\"egg\",1);\n$recipe1->addIngredient(\"flour\",2,\"cup\");\n\n$recipe2 = new Recipe();\n$recipe2->source = \"Betty Crocker\";\n$recipe1->setTitle = \"My second recipe\";\n\necho $recipe1->source;\necho $recipe2->source;\n\necho $recipe1->displayRecipe();\necho $recipe2->displayRecipe();\n\nforeach ($recipe1->getIngredients() as $ing) {\n\techo \"\\n\" . $ing[\"amount\"] . \" \" . $ing[\"measure\"] . \" \" . $ing[\"item\"];\n}\n\nvar_dump($recipe1);\n\n?>","position":{"start":{"line":16,"column":1,"offset":264},"end":{"line":116,"column":4,"offset":2082},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP Access Modifiers","position":{"start":{"line":118,"column":4,"offset":2087},"end":{"line":118,"column":24,"offset":2107},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":2084},"end":{"line":118,"column":24,"offset":2107},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"<?php\n\nclass Render {\n\n  public static function displayDimensions($size) {\n      return $size[0] . \" x \" . $size[1];\n  }\n\n  public static function detailsKitchen($room) {\n       return \"Kitchen Dimensions: \" . self::displayDimensions($room->getDimensions());\n  }\n\n}\n\n?>","position":{"start":{"line":120,"column":1,"offset":2109},"end":{"line":136,"column":4,"offset":2389},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP Magic Methods and Constants","position":{"start":{"line":138,"column":4,"offset":2394},"end":{"line":138,"column":35,"offset":2425},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":2391},"end":{"line":138,"column":35,"offset":2425},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Some magic constants:","position":{"start":{"line":140,"column":1,"offset":2427},"end":{"line":140,"column":22,"offset":2448},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":2427},"end":{"line":140,"column":22,"offset":2448},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"CLASS","position":{"start":{"line":142,"column":3,"offset":2452},"end":{"line":142,"column":8,"offset":2457},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":2450},"end":{"line":142,"column":10,"offset":2459},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":142,"column":10,"offset":2459},"end":{"line":143,"column":1,"offset":2460},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"FILE","position":{"start":{"line":143,"column":3,"offset":2462},"end":{"line":143,"column":7,"offset":2466},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":2460},"end":{"line":143,"column":9,"offset":2468},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":2450},"end":{"line":143,"column":9,"offset":2468},"indent":[1]}},{"type":"code","lang":"php","meta":null,"value":"<?php\nclass Example\n{\n\n\tpublic function __construct($title = null)\n\t{\n\t\t$this->setTitle($title);\n\t}\n\n\tpublic function __toString()\n\t{\n\t\t$output = \"You are calling a \" . __CLASS__ . \" object with the title \\\"\";\n\t\t$output .= $this->getTitle() . \"\\\"\";\n\t\t$output .= \"\\nIt is stored in \" . basename(__FILE__) . \" at \" . __DIR__ . \".\";\n\t\t$output .= \"\\nThis display is from line \" . __LINE__ . \" in method \" . __METHOD__;\n\t\t$output .= \"\\nThe following methods are available for objects of this class: \\n\";\n\t\t$output .= implode(\"\\n\", get_class_methods(__CLASS__));\n\t\treturn $output;\n\t}\n}\n\nclass Render\n{\n\n\tpublic function __toString()\n\t{\n\t\t$output = \"The following methods are available for \" . __CLASS__ . \" objects: \\n\";\n\t\t$output .= implode(\"\\n\", get_class_methods(__CLASS__));\n\t\treturn $output;\n\t}\n}\n\n$example = new Example(\"Name\");\necho $example;\n\n?>\n\n<?php\n\nclass Fish\n{\n    public $common_name;\n    public $flavor;\n    public $record_weight;\n\n    public function __construct($name, $flavor, $record) {\n      $this->common_name = $name;\n      $this->flavor = $flavor;\n      $this->record_weight = $record;\n    }\n\n    public function getInfo() {\n      return \"A {$this->common_name} is an {$this->flavor} flavored fish. The world record weight is {$this->record_weight}.\";\n    }\n}\n\n$bass = new Fish(\"Largemouth Bass\", \"Excellent\", \"22 pounds 5 ounces\");\n\n?>","position":{"start":{"line":145,"column":1,"offset":2470},"end":{"line":205,"column":4,"offset":3835},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP Collections","position":{"start":{"line":207,"column":4,"offset":3840},"end":{"line":207,"column":19,"offset":3855},"indent":[]}}],"position":{"start":{"line":207,"column":1,"offset":3837},"end":{"line":207,"column":19,"offset":3855},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"recipecollection.php","position":{"start":{"line":209,"column":1,"offset":3857},"end":{"line":209,"column":21,"offset":3877},"indent":[]}}],"position":{"start":{"line":209,"column":1,"offset":3857},"end":{"line":209,"column":21,"offset":3877},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"<?\n\nclass RecipeCollection\n{\n\tprivate $title;\n\tprivate $recipes = array();\n\n\t// has constructor here and setter and getters\n\n\tpublic function addRecipe($recipe) {\n\t\t$this->recipes[] = $recipe;\n\t}\n\n\tpublic function getRecipe() {\n\t\treturn $this->recipes;\n\t}\n}\n\n?>","position":{"start":{"line":211,"column":1,"offset":3879},"end":{"line":231,"column":4,"offset":4151},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP Arrays","position":{"start":{"line":233,"column":4,"offset":4156},"end":{"line":233,"column":14,"offset":4166},"indent":[]}}],"position":{"start":{"line":233,"column":1,"offset":4153},"end":{"line":233,"column":14,"offset":4166},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create\n$myArray = array();","position":{"start":{"line":235,"column":1,"offset":4168},"end":{"line":236,"column":20,"offset":4194},"indent":[1]}}],"position":{"start":{"line":235,"column":1,"offset":4168},"end":{"line":236,"column":20,"offset":4194},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Push into\n$myArray[] = \"­Som­eth­ing­\";","position":{"start":{"line":238,"column":1,"offset":4196},"end":{"line":239,"column":30,"offset":4235},"indent":[1]}}],"position":{"start":{"line":238,"column":1,"offset":4196},"end":{"line":239,"column":30,"offset":4235},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Push to associ­ative\n$myArr­ay","position":{"start":{"line":241,"column":1,"offset":4237},"end":{"line":242,"column":10,"offset":4267},"indent":[1]}},{"type":"linkReference","identifier":"­'key'","label":"­'key'","referenceType":"shortcut","children":[{"type":"text","value":"­'key'","position":{"start":{"line":242,"column":11,"offset":4268},"end":{"line":242,"column":17,"offset":4274},"indent":[]}}],"position":{"start":{"line":242,"column":10,"offset":4267},"end":{"line":242,"column":18,"offset":4275},"indent":[]}},{"type":"text","value":" = \"­Val­ue\";","position":{"start":{"line":242,"column":18,"offset":4275},"end":{"line":242,"column":31,"offset":4288},"indent":[]}}],"position":{"start":{"line":241,"column":1,"offset":4237},"end":{"line":242,"column":31,"offset":4288},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Create numeric\n$myArray = array(­'va­lue', 'value2');","position":{"start":{"line":244,"column":1,"offset":4290},"end":{"line":245,"column":39,"offset":4343},"indent":[1]}}],"position":{"start":{"line":244,"column":1,"offset":4290},"end":{"line":245,"column":39,"offset":4343},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Create associ­ative\n$a = array(­'ke­y'=­>'v­al');","position":{"start":{"line":247,"column":1,"offset":4345},"end":{"line":248,"column":30,"offset":4394},"indent":[1]}}],"position":{"start":{"line":247,"column":1,"offset":4345},"end":{"line":248,"column":30,"offset":4394},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Print from numeric\necho $myArr­ay","position":{"start":{"line":250,"column":1,"offset":4396},"end":{"line":251,"column":15,"offset":4429},"indent":[1]}},{"type":"linkReference","identifier":"0","label":"0","referenceType":"shortcut","children":[{"type":"text","value":"0","position":{"start":{"line":251,"column":16,"offset":4430},"end":{"line":251,"column":17,"offset":4431},"indent":[]}}],"position":{"start":{"line":251,"column":15,"offset":4429},"end":{"line":251,"column":18,"offset":4432},"indent":[]}},{"type":"text","value":";","position":{"start":{"line":251,"column":18,"offset":4432},"end":{"line":251,"column":19,"offset":4433},"indent":[]}}],"position":{"start":{"line":250,"column":1,"offset":4396},"end":{"line":251,"column":19,"offset":4433},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Print from associ­ative\necho $myArr­ay","position":{"start":{"line":253,"column":1,"offset":4435},"end":{"line":254,"column":15,"offset":4473},"indent":[1]}},{"type":"linkReference","identifier":"­'key'","label":"­'key'","referenceType":"shortcut","children":[{"type":"text","value":"­'key'","position":{"start":{"line":254,"column":16,"offset":4474},"end":{"line":254,"column":22,"offset":4480},"indent":[]}}],"position":{"start":{"line":254,"column":15,"offset":4473},"end":{"line":254,"column":23,"offset":4481},"indent":[]}},{"type":"text","value":";","position":{"start":{"line":254,"column":23,"offset":4481},"end":{"line":254,"column":24,"offset":4482},"indent":[]}}],"position":{"start":{"line":253,"column":1,"offset":4435},"end":{"line":254,"column":24,"offset":4482},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Associ­ative arrays\nKeys are strings","position":{"start":{"line":256,"column":1,"offset":4484},"end":{"line":257,"column":17,"offset":4520},"indent":[1]}}],"position":{"start":{"line":256,"column":1,"offset":4484},"end":{"line":257,"column":17,"offset":4520},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Numeric arrays\nKeys are numbers: 0,1,2,3,4","position":{"start":{"line":259,"column":1,"offset":4522},"end":{"line":260,"column":28,"offset":4564},"indent":[1]}}],"position":{"start":{"line":259,"column":1,"offset":4522},"end":{"line":260,"column":28,"offset":4564},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP Array Functions","position":{"start":{"line":262,"column":4,"offset":4569},"end":{"line":262,"column":23,"offset":4588},"indent":[]}}],"position":{"start":{"line":262,"column":1,"offset":4566},"end":{"line":262,"column":23,"offset":4588},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"array_diff (arr1, arr2 ...)\narray_filter (arr, function)\narray_flip (arr)\narray_intersect (arr1, arr2 ...)\narray_merge (arr1, arr2 ...)\narray_pop (arr)\narray_push (arr, var1, var2 ...)\narray_reverse (arr)\narray_keys(array $array [, mixed $search_value = null ","position":{"start":{"line":264,"column":1,"offset":4590},"end":{"line":272,"column":55,"offset":4849},"indent":[1,1,1,1,1,1,1,1]}},{"type":"linkReference","identifier":", bool $strict = false ","label":", bool $strict = false ","referenceType":"shortcut","children":[{"type":"text","value":", bool $strict = false ","position":{"start":{"line":272,"column":56,"offset":4850},"end":{"line":272,"column":79,"offset":4873},"indent":[]}}],"position":{"start":{"line":272,"column":55,"offset":4849},"end":{"line":272,"column":80,"offset":4874},"indent":[]}},{"type":"text","value":"] )\narray_search (needle, arr)\narray_walk (arr, function)\ncount (count)\nin_array (needle, haystack)","position":{"start":{"line":272,"column":80,"offset":4874},"end":{"line":276,"column":28,"offset":4973},"indent":[1,1,1,1]}}],"position":{"start":{"line":264,"column":1,"offset":4590},"end":{"line":276,"column":28,"offset":4973},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"// ARRAY EXAMPLES","position":{"start":{"line":278,"column":1,"offset":4975},"end":{"line":278,"column":18,"offset":4992},"indent":[]}}],"position":{"start":{"line":278,"column":1,"offset":4975},"end":{"line":278,"column":18,"offset":4992},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"<?php\n\t// add code below this comment\nclass Subdivision\n{\n  public $houses = array();\n\n  public function filterHouseColor($color)\n  {\n    $return = array();\n    foreach ($this->houses as $house) {\n      if ($house->roof_color == $color || $house->wall_color == $color) {\n        $return[] = $house;\n      }\n    }\n    return $return;\n  }\n}\n\n?>\n\n<? php\n\npublic function getCombinedIngredients()\n{\n\t$ingredients = array();\n\tforeach ($this->recipes as $recipe) {\n\t\tforeach($recipe->getIngredients() as $ing) {\n\t\t\t$item = $ing[\"item\"];\n\n\t\t\tif (strpos($item, \",\")) {\n\t\t\t\t$item = strstr($item, \",\", true);\n\t\t\t}\n\n\t\t\tif (in_array($item.\"s\", $ingredients)) {\n\t\t\t\t$item.=\"s\";\n\t\t\t} else if (in_array(substr($item, 0, -1), $ingredients)) {\n\t\t\t\t$item = substr($item, 0, -1);\n\t\t\t}\n\n\t\t\t$ingredients[$item] = array (\n\t\t\t\t$ing[\"amount\"],\n\t\t\t\t$ing[\"measure\"]\n\t\t\t);\n\t\t}\n\t}\n\n\treturn $ingredients;\n}\n\n?>","position":{"start":{"line":280,"column":1,"offset":4994},"end":{"line":331,"column":4,"offset":5886},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP Control Flow Logic","position":{"start":{"line":333,"column":4,"offset":5891},"end":{"line":333,"column":26,"offset":5913},"indent":[]}}],"position":{"start":{"line":333,"column":1,"offset":5888},"end":{"line":333,"column":26,"offset":5913},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"if (condi­tion) {\n... }\nelseif (condi­tion) {\n... }\nelse {\n... }","position":{"start":{"line":335,"column":1,"offset":5915},"end":{"line":340,"column":6,"offset":5979},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":335,"column":1,"offset":5915},"end":{"line":340,"column":6,"offset":5979},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"FOR loop\nfor (initi­alize; condition; update) { ... }","position":{"start":{"line":342,"column":1,"offset":5981},"end":{"line":343,"column":45,"offset":6034},"indent":[1]}}],"position":{"start":{"line":342,"column":1,"offset":5981},"end":{"line":343,"column":45,"offset":6034},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"WHILE loop\nwhile (condi­tion) { ... }","position":{"start":{"line":345,"column":1,"offset":6036},"end":{"line":346,"column":27,"offset":6073},"indent":[1]}}],"position":{"start":{"line":345,"column":1,"offset":6036},"end":{"line":346,"column":27,"offset":6073},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"FOREACH loop\nforeach ($array as $value) { ... }","position":{"start":{"line":348,"column":1,"offset":6075},"end":{"line":349,"column":35,"offset":6122},"indent":[1]}}],"position":{"start":{"line":348,"column":1,"offset":6075},"end":{"line":349,"column":35,"offset":6122},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"DO WHILE\ndo { ... ;} while (condi­tion)","position":{"start":{"line":351,"column":1,"offset":6124},"end":{"line":352,"column":31,"offset":6163},"indent":[1]}}],"position":{"start":{"line":351,"column":1,"offset":6124},"end":{"line":352,"column":31,"offset":6163},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"SWITCH ($s) {\ncase 1:\n...\nbreak;\ncase 2:\n...\nbreak;\ndefault:\n...\n}","position":{"start":{"line":354,"column":1,"offset":6165},"end":{"line":363,"column":2,"offset":6231},"indent":[1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":354,"column":1,"offset":6165},"end":{"line":363,"column":2,"offset":6231},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP if/elseif statements within a web document","position":{"start":{"line":365,"column":4,"offset":6236},"end":{"line":365,"column":50,"offset":6282},"indent":[]}}],"position":{"start":{"line":365,"column":1,"offset":6233},"end":{"line":365,"column":50,"offset":6282},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"<?php\n\n$bool = false;\n\n?>\n\n<?php if ($bool) : ?>\n\n\t<div>\n\t\t<p><?php echo \"Bool is true\"?></p>\n\t</div>\n\n<?php elseif (!$bool) : ?>\n\n\t<div>\n\t\t<p><?php echo \"Elseif works\"?></p>\n\t</div>\n\n<?php else : ?>\n\n\t<div>\n\t\t<p><?php echo \"Bool is false\"?></p>\n\t</div>\n\n<?php endif; ?>","position":{"start":{"line":367,"column":1,"offset":6284},"end":{"line":393,"column":4,"offset":6565},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP General Functions","position":{"start":{"line":395,"column":4,"offset":6570},"end":{"line":395,"column":25,"offset":6591},"indent":[]}}],"position":{"start":{"line":395,"column":1,"offset":6567},"end":{"line":395,"column":25,"offset":6591},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"isset()\ntest for variable exists\nempty()\ntest for empty variable\nmail($to, $subject, $msg, 'From: ' . $email)\nmail function\nmysqli­","position":{"start":{"line":397,"column":1,"offset":6593},"end":{"line":403,"column":8,"offset":6724},"indent":[1,1,1,1,1,1]}},{"type":"emphasis","children":[{"type":"text","value":"fe­tch­_ar­ray­($r­esult)\nfetch each row of a query (in $result)\nheader()\nsend a header from the server\nis_num­eric()\ntest to see if a value is number\nexit()\ncauses script to stop immedi­ately\ntrim($­string)\ntrims leading and trailing spaces\nmysqli­_re­al","position":{"start":{"line":403,"column":9,"offset":6725},"end":{"line":413,"column":14,"offset":6980},"indent":[1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":403,"column":8,"offset":6724},"end":{"line":413,"column":15,"offset":6981},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"text","value":"­esc­ape­_st­rin­g($­string)\nescapes special characters\nstr_re­pla­ce('a', 'b', $string)\nreplace a with b in a string\nexplode(', ' , $string)\nmake string into array\nimplode(', \" $string)\nmake array into string\nsubstr ($string, start, len)\ngrabs a substring\npreg_m­atc­h('­regex', $string)\nmatches regular expres­sions\npreg_r­epl­ace­('r­egex', $replace, $string)\nreplaces characters in a string by regex","position":{"start":{"line":413,"column":15,"offset":6981},"end":{"line":426,"column":41,"offset":7384},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":397,"column":1,"offset":6593},"end":{"line":426,"column":41,"offset":7384},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP Regex Functions","position":{"start":{"line":428,"column":4,"offset":7389},"end":{"line":428,"column":23,"offset":7408},"indent":[]}}],"position":{"start":{"line":428,"column":1,"offset":7386},"end":{"line":428,"column":23,"offset":7408},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"ereg (pattern, str)\nsplit (pattern, str)\nereg_replace (pattern, replace, str)\npreg_grep (pattern, arr)\npreg_match (pattern, str)\npreg_match_all (pattern, str, arr)\npreg_replace (pattern, replace, str)\npreg_split (pattern, str)","position":{"start":{"line":430,"column":1,"offset":7410},"end":{"line":437,"column":26,"offset":7636},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":430,"column":1,"offset":7410},"end":{"line":437,"column":26,"offset":7636},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP String Functions","position":{"start":{"line":439,"column":4,"offset":7641},"end":{"line":439,"column":24,"offset":7661},"indent":[]}}],"position":{"start":{"line":439,"column":1,"offset":7638},"end":{"line":439,"column":24,"offset":7661},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"crypt (str, salt)\nexplode (sep, str)\nimplode (glue, arr)\nnl2br (str)\nsprintf (frmt, args)\nstrip_tags (str, allowed_tags)\nstr_replace (search, replace, str)\nstrpos (str, needle)\nstrrev (str)\nstrstr (str, needle)\nstrtolower (str)\nstrtoupper (str)\nsubstr (string, start, len)","position":{"start":{"line":441,"column":1,"offset":7663},"end":{"line":453,"column":28,"offset":7935},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":441,"column":1,"offset":7663},"end":{"line":453,"column":28,"offset":7935},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP File System Functions","position":{"start":{"line":455,"column":4,"offset":7940},"end":{"line":455,"column":29,"offset":7965},"indent":[]}}],"position":{"start":{"line":455,"column":1,"offset":7937},"end":{"line":455,"column":29,"offset":7965},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"clearstatcache ()\ncopy (source, dest)\nfclose (handle)\nfgets (handle, len)\nfile (file)\nfilemtime (file)\nfilesize (file)\nfile_exists (file)\nfopen (file, mode)\nfread (handle, len)\nfwrite (handle, str)\nreadfile (file)clearstatcache ()\ncopy (source, dest)\nfclose (handle)\nfgets (handle, len)\nfile (file)\nfilemtime (file)\nfilesize (file)\nfile_exists (file)\nfopen (file, mode)\nfread (handle, len)\nfwrite (handle, str)\nreadfile (file)","position":{"start":{"line":457,"column":1,"offset":7967},"end":{"line":479,"column":16,"offset":8393},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":457,"column":1,"offset":7967},"end":{"line":479,"column":16,"offset":8393},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP Date/Time Functions","position":{"start":{"line":481,"column":4,"offset":8398},"end":{"line":481,"column":27,"offset":8421},"indent":[]}}],"position":{"start":{"line":481,"column":1,"offset":8395},"end":{"line":481,"column":27,"offset":8421},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"checkdate (month, day, year)\ndate (format, timestamp)\ngetdate (timestamp)\nmktime (hr, min, sec, month, day, yr)\nstrftime (formatstring, timestamp)\nstrtotime (str)\ntime ()","position":{"start":{"line":483,"column":1,"offset":8423},"end":{"line":489,"column":8,"offset":8593},"indent":[1,1,1,1,1,1]}}],"position":{"start":{"line":483,"column":1,"offset":8423},"end":{"line":489,"column":8,"offset":8593},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"PHP Date Formatting","position":{"start":{"line":491,"column":4,"offset":8598},"end":{"line":491,"column":23,"offset":8617},"indent":[]}}],"position":{"start":{"line":491,"column":1,"offset":8595},"end":{"line":491,"column":23,"offset":8617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Y\n4 digit year (2008)\ny\n2 digit year (08)\nF\nLong month (January)\nM\nShort month (Jan)\nm\nMonth ⁴ (01 to 12)\nn\nMonth (1 to 12)\nD\nShort day name (Mon)\nl\nLong day name (Monday) (lowercase L)\nd\nDay ⁴ (01 to 31)\nj\nDay (1 to 31)","position":{"start":{"line":493,"column":1,"offset":8619},"end":{"line":512,"column":14,"offset":8839},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":493,"column":1,"offset":8619},"end":{"line":512,"column":14,"offset":8839},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"h\n12 Hour ⁴ (01 to 12)\ng\n12 Hour (1 to 12)\nH\n24 Hour ⁴ (00 to 23)\nG\n24 Hour (0 to 23)\ni\nMinutes ⁴ (00 to 59)\ns\nSeconds ⁴ (00 to 59)","position":{"start":{"line":514,"column":1,"offset":8841},"end":{"line":525,"column":21,"offset":8972},"indent":[1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":514,"column":1,"offset":8841},"end":{"line":525,"column":21,"offset":8972},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"w\nDay of week ¹ (0 to 6)\nz\nDay of year (0 to 365)\nW\nWeek of year ² (1 to 53)\nt\nDays in month (28 to 31)","position":{"start":{"line":527,"column":1,"offset":8974},"end":{"line":534,"column":25,"offset":9077},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":527,"column":1,"offset":8974},"end":{"line":534,"column":25,"offset":9077},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"a\nam or pm\nA\nAM or PM\nB\nSwatch Internet Time (000 to 999)\nS\nOrdinal Suffix (st, nd, rd, th)","position":{"start":{"line":536,"column":1,"offset":9079},"end":{"line":543,"column":32,"offset":9170},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":536,"column":1,"offset":9079},"end":{"line":543,"column":32,"offset":9170},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"T\nTimezone of machine (GMT)\nZ\nTimezone offset (seconds)\nO\nGMT offset (hours) (+0200)\nI\nDaylight saving (1 or 0)\nL\nLeap year (1 or 0)","position":{"start":{"line":545,"column":1,"offset":9172},"end":{"line":554,"column":19,"offset":9304},"indent":[1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":545,"column":1,"offset":9172},"end":{"line":554,"column":19,"offset":9304},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"U\nSeconds since Epoch ³\nc\nISO 8601 (PHP 5) (2008-­07-­31T­18:­30:­13+­01:00)\nr\nRFC 2822 (Thu, 31 Jul 2008 18:30:13 +0100)","position":{"start":{"line":556,"column":1,"offset":9306},"end":{"line":561,"column":43,"offset":9427},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":556,"column":1,"offset":9306},"end":{"line":561,"column":43,"offset":9427},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Accessing deep arrays to find values","position":{"start":{"line":564,"column":4,"offset":9433},"end":{"line":564,"column":40,"offset":9469},"indent":[]}}],"position":{"start":{"line":564,"column":1,"offset":9430},"end":{"line":564,"column":40,"offset":9469},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"$locations = Timber::get_terms('locations');\n\n\t\t$data = [];\n\t\t$exclusion = [];\n\n\t\tforeach($locations as $location) {\n\t\t\t$data[] = [\n\t\t\t\t\"location\" => $location,\n\t\t\t\t\"posts\" => Locations::getPostsForLocation($location,$count,$exclusion)\n\t\t\t];\n\n\t\t\t// add posts with current ids to array to check against\n\t\t\tforeach ($data as $key => $value) {\n\t\t\t\tif ($value[\"posts\"]) {\n\t\t\t\t\t$posts = $value[\"posts\"];\n\t\t\t\t\tforeach($posts as $key => $value) {\n\t\t\t\t\t\tif (in_array($value->id, $exclusion)) {\n\t\t\t\t\t\t\tunset($posts[$key]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tarray_push($exclusion, $value->id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}","position":{"start":{"line":566,"column":1,"offset":9471},"end":{"line":592,"column":4,"offset":10083},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":595,"column":1,"offset":10086},"end":{"line":595,"column":31,"offset":10116},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":595,"column":31,"offset":10116}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"php-help-sheet\"\n    }}>{`PHP Help Sheet`}</h1>\n    <h2 {...{\n      \"id\": \"treehouse-php-classes\"\n    }}>{`Treehouse PHP Classes`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`PHP OOP\nclasses\nrecipe.php\ncookbook.php`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// recipe.php\n\n<?php\n\nclass Recipe\n{\n    private $title;\n    public $ingredients = array();\n    public $instruction = array();\n    public $yield;\n    public $tag = array();\n    public $source = 'Alena Holligan';\n\n    private $measurements = array(\n        \"tsp\",\n        \"tbsp\",\n        \"cup\",\n        \"oz\",\n        \"lb\",\n        \"fl oz\",\n        \"pint\",\n        \"quart\",\n        \"gallon\"\n    );\n\n    public function displayRecipe()\n    {\n        return $this->title . \"by\" . $this->source;\n    }\n\n    public function addIngredient($item, $amount = null, $measure=null)\n    {\n        if ($amount != null && !is_float($amount) && !is_int($amount)) {\n            exit(\"The amount must be a float: \") . gettype($amount) . \" $amount given\");\n        }\n\n        if ($measure != null && !in_array(strtolower($measure), $this->measurements)) {\n            exit(\"Please enter a valid measurement: \" . implode(\", \", $this->measurements));\n        }\n\n        $this->ingredients[] = array (\n            \"item\" => ucwords($item),\n            \"amount\" => $amount,\n            \"measure\" => strtolower($measure)\n        );\n    }\n\n    public function getIngredients()\n    {\n        return $this->ingredients;\n    }\n\n    public function setTitle($title)\n    {\n        $this->title = ucword($title);\n    }\n\n    public function getTitle()\n    {\n        return $this->title;\n    }\n\n}\n\n?>\n\n// cookbook.php\n\n<?php\n\ninclude \"classes/recipes.php\";\n\n$recipe1 = new Recipe();\necho $recipe1->source;\n$recipe1->source(\"Grandma Holligan\");\necho $recipe1->source;\n$recipe1->setTitle(\"My first recipe\");\n$recipe1->getTitle();\n\n$recipe1->addIngredient(\"egg\",1);\n$recipe1->addIngredient(\"flour\",2,\"cup\");\n\n$recipe2 = new Recipe();\n$recipe2->source = \"Betty Crocker\";\n$recipe1->setTitle = \"My second recipe\";\n\necho $recipe1->source;\necho $recipe2->source;\n\necho $recipe1->displayRecipe();\necho $recipe2->displayRecipe();\n\nforeach ($recipe1->getIngredients() as $ing) {\n    echo \"\\\\n\" . $ing[\"amount\"] . \" \" . $ing[\"measure\"] . \" \" . $ing[\"item\"];\n}\n\nvar_dump($recipe1);\n\n?>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"php-access-modifiers\"\n    }}>{`PHP Access Modifiers`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\nclass Render {\n\n  public static function displayDimensions($size) {\n      return $size[0] . \" x \" . $size[1];\n  }\n\n  public static function detailsKitchen($room) {\n       return \"Kitchen Dimensions: \" . self::displayDimensions($room->getDimensions());\n  }\n\n}\n\n?>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"php-magic-methods-and-constants\"\n    }}>{`PHP Magic Methods and Constants`}</h2>\n    <p>{`Some magic constants:`}</p>\n    <p><strong parentName=\"p\">{`CLASS`}</strong>{`\n`}<strong parentName=\"p\">{`FILE`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\nclass Example\n{\n\n    public function __construct($title = null)\n    {\n        $this->setTitle($title);\n    }\n\n    public function __toString()\n    {\n        $output = \"You are calling a \" . __CLASS__ . \" object with the title \\\\\"\";\n        $output .= $this->getTitle() . \"\\\\\"\";\n        $output .= \"\\\\nIt is stored in \" . basename(__FILE__) . \" at \" . __DIR__ . \".\";\n        $output .= \"\\\\nThis display is from line \" . __LINE__ . \" in method \" . __METHOD__;\n        $output .= \"\\\\nThe following methods are available for objects of this class: \\\\n\";\n        $output .= implode(\"\\\\n\", get_class_methods(__CLASS__));\n        return $output;\n    }\n}\n\nclass Render\n{\n\n    public function __toString()\n    {\n        $output = \"The following methods are available for \" . __CLASS__ . \" objects: \\\\n\";\n        $output .= implode(\"\\\\n\", get_class_methods(__CLASS__));\n        return $output;\n    }\n}\n\n$example = new Example(\"Name\");\necho $example;\n\n?>\n\n<?php\n\nclass Fish\n{\n    public $common_name;\n    public $flavor;\n    public $record_weight;\n\n    public function __construct($name, $flavor, $record) {\n      $this->common_name = $name;\n      $this->flavor = $flavor;\n      $this->record_weight = $record;\n    }\n\n    public function getInfo() {\n      return \"A {$this->common_name} is an {$this->flavor} flavored fish. The world record weight is {$this->record_weight}.\";\n    }\n}\n\n$bass = new Fish(\"Largemouth Bass\", \"Excellent\", \"22 pounds 5 ounces\");\n\n?>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"php-collections\"\n    }}>{`PHP Collections`}</h2>\n    <p>{`recipecollection.php`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?\n\nclass RecipeCollection\n{\n    private $title;\n    private $recipes = array();\n\n    // has constructor here and setter and getters\n\n    public function addRecipe($recipe) {\n        $this->recipes[] = $recipe;\n    }\n\n    public function getRecipe() {\n        return $this->recipes;\n    }\n}\n\n?>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"php-arrays\"\n    }}>{`PHP Arrays`}</h2>\n    <p>{`Create\n$myArray = array();`}</p>\n    <p>{`Push into\n$myArray[] = \"­Som­eth­ing­\";`}</p>\n    <p>{`Push to associ­ative\n$myArr­ay`}{`[­'key']`}{` = \"­Val­ue\";`}</p>\n    <p>{`Create numeric\n$myArray = array(­'va­lue', 'value2');`}</p>\n    <p>{`Create associ­ative\n$a = array(­'ke­y'=­>'v­al');`}</p>\n    <p>{`Print from numeric\necho $myArr­ay`}{`[0]`}{`;`}</p>\n    <p>{`Print from associ­ative\necho $myArr­ay`}{`[­'key']`}{`;`}</p>\n    <p>{`Associ­ative arrays\nKeys are strings`}</p>\n    <p>{`Numeric arrays\nKeys are numbers: 0,1,2,3,4`}</p>\n    <h2 {...{\n      \"id\": \"php-array-functions\"\n    }}>{`PHP Array Functions`}</h2>\n    <p>{`array_diff (arr1, arr2 ...)\narray_filter (arr, function)\narray_flip (arr)\narray_intersect (arr1, arr2 ...)\narray_merge (arr1, arr2 ...)\narray_pop (arr)\narray_push (arr, var1, var2 ...)\narray_reverse (arr)\narray_keys(array $array [, mixed $search_value = null `}{`[, bool $strict = false ]`}{`] )\narray_search (needle, arr)\narray_walk (arr, function)\ncount (count)\nin_array (needle, haystack)`}</p>\n    <p>{`// ARRAY EXAMPLES`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n    // add code below this comment\nclass Subdivision\n{\n  public $houses = array();\n\n  public function filterHouseColor($color)\n  {\n    $return = array();\n    foreach ($this->houses as $house) {\n      if ($house->roof_color == $color || $house->wall_color == $color) {\n        $return[] = $house;\n      }\n    }\n    return $return;\n  }\n}\n\n?>\n\n<? php\n\npublic function getCombinedIngredients()\n{\n    $ingredients = array();\n    foreach ($this->recipes as $recipe) {\n        foreach($recipe->getIngredients() as $ing) {\n            $item = $ing[\"item\"];\n\n            if (strpos($item, \",\")) {\n                $item = strstr($item, \",\", true);\n            }\n\n            if (in_array($item.\"s\", $ingredients)) {\n                $item.=\"s\";\n            } else if (in_array(substr($item, 0, -1), $ingredients)) {\n                $item = substr($item, 0, -1);\n            }\n\n            $ingredients[$item] = array (\n                $ing[\"amount\"],\n                $ing[\"measure\"]\n            );\n        }\n    }\n\n    return $ingredients;\n}\n\n?>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"php-control-flow-logic\"\n    }}>{`PHP Control Flow Logic`}</h2>\n    <p>{`if (condi­tion) {\n... }\nelseif (condi­tion) {\n... }\nelse {\n... }`}</p>\n    <p>{`FOR loop\nfor (initi­alize; condition; update) { ... }`}</p>\n    <p>{`WHILE loop\nwhile (condi­tion) { ... }`}</p>\n    <p>{`FOREACH loop\nforeach ($array as $value) { ... }`}</p>\n    <p>{`DO WHILE\ndo { ... ;} while (condi­tion)`}</p>\n    <p>{`SWITCH ($s) {\ncase 1:\n...\nbreak;\ncase 2:\n...\nbreak;\ndefault:\n...\n}`}</p>\n    <h2 {...{\n      \"id\": \"php-ifelseif-statements-within-a-web-document\"\n    }}>{`PHP if/elseif statements within a web document`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\n$bool = false;\n\n?>\n\n<?php if ($bool) : ?>\n\n    <div>\n        <p><?php echo \"Bool is true\"?></p>\n    </div>\n\n<?php elseif (!$bool) : ?>\n\n    <div>\n        <p><?php echo \"Elseif works\"?></p>\n    </div>\n\n<?php else : ?>\n\n    <div>\n        <p><?php echo \"Bool is false\"?></p>\n    </div>\n\n<?php endif; ?>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"php-general-functions\"\n    }}>{`PHP General Functions`}</h2>\n    <p>{`isset()\ntest for variable exists\nempty()\ntest for empty variable\nmail($to, $subject, $msg, 'From: ' . $email)\nmail function\nmysqli­`}<em parentName=\"p\">{`fe­tch­_ar­ray­($r­esult)\nfetch each row of a query (in $result)\nheader()\nsend a header from the server\nis_num­eric()\ntest to see if a value is number\nexit()\ncauses script to stop immedi­ately\ntrim($­string)\ntrims leading and trailing spaces\nmysqli­_re­al`}</em>{`­esc­ape­_st­rin­g($­string)\nescapes special characters\nstr_re­pla­ce('a', 'b', $string)\nreplace a with b in a string\nexplode(', ' , $string)\nmake string into array\nimplode(', \" $string)\nmake array into string\nsubstr ($string, start, len)\ngrabs a substring\npreg_m­atc­h('­regex', $string)\nmatches regular expres­sions\npreg_r­epl­ace­('r­egex', $replace, $string)\nreplaces characters in a string by regex`}</p>\n    <h2 {...{\n      \"id\": \"php-regex-functions\"\n    }}>{`PHP Regex Functions`}</h2>\n    <p>{`ereg (pattern, str)\nsplit (pattern, str)\nereg_replace (pattern, replace, str)\npreg_grep (pattern, arr)\npreg_match (pattern, str)\npreg_match_all (pattern, str, arr)\npreg_replace (pattern, replace, str)\npreg_split (pattern, str)`}</p>\n    <h2 {...{\n      \"id\": \"php-string-functions\"\n    }}>{`PHP String Functions`}</h2>\n    <p>{`crypt (str, salt)\nexplode (sep, str)\nimplode (glue, arr)\nnl2br (str)\nsprintf (frmt, args)\nstrip_tags (str, allowed_tags)\nstr_replace (search, replace, str)\nstrpos (str, needle)\nstrrev (str)\nstrstr (str, needle)\nstrtolower (str)\nstrtoupper (str)\nsubstr (string, start, len)`}</p>\n    <h2 {...{\n      \"id\": \"php-file-system-functions\"\n    }}>{`PHP File System Functions`}</h2>\n    <p>{`clearstatcache ()\ncopy (source, dest)\nfclose (handle)\nfgets (handle, len)\nfile (file)\nfilemtime (file)\nfilesize (file)\nfile_exists (file)\nfopen (file, mode)\nfread (handle, len)\nfwrite (handle, str)\nreadfile (file)clearstatcache ()\ncopy (source, dest)\nfclose (handle)\nfgets (handle, len)\nfile (file)\nfilemtime (file)\nfilesize (file)\nfile_exists (file)\nfopen (file, mode)\nfread (handle, len)\nfwrite (handle, str)\nreadfile (file)`}</p>\n    <h2 {...{\n      \"id\": \"php-datetime-functions\"\n    }}>{`PHP Date/Time Functions`}</h2>\n    <p>{`checkdate (month, day, year)\ndate (format, timestamp)\ngetdate (timestamp)\nmktime (hr, min, sec, month, day, yr)\nstrftime (formatstring, timestamp)\nstrtotime (str)\ntime ()`}</p>\n    <h2 {...{\n      \"id\": \"php-date-formatting\"\n    }}>{`PHP Date Formatting`}</h2>\n    <p>{`Y\n4 digit year (2008)\ny\n2 digit year (08)\nF\nLong month (January)\nM\nShort month (Jan)\nm\nMonth ⁴ (01 to 12)\nn\nMonth (1 to 12)\nD\nShort day name (Mon)\nl\nLong day name (Monday) (lowercase L)\nd\nDay ⁴ (01 to 31)\nj\nDay (1 to 31)`}</p>\n    <p>{`h\n12 Hour ⁴ (01 to 12)\ng\n12 Hour (1 to 12)\nH\n24 Hour ⁴ (00 to 23)\nG\n24 Hour (0 to 23)\ni\nMinutes ⁴ (00 to 59)\ns\nSeconds ⁴ (00 to 59)`}</p>\n    <p>{`w\nDay of week ¹ (0 to 6)\nz\nDay of year (0 to 365)\nW\nWeek of year ² (1 to 53)\nt\nDays in month (28 to 31)`}</p>\n    <p>{`a\nam or pm\nA\nAM or PM\nB\nSwatch Internet Time (000 to 999)\nS\nOrdinal Suffix (st, nd, rd, th)`}</p>\n    <p>{`T\nTimezone of machine (GMT)\nZ\nTimezone offset (seconds)\nO\nGMT offset (hours) (+0200)\nI\nDaylight saving (1 or 0)\nL\nLeap year (1 or 0)`}</p>\n    <p>{`U\nSeconds since Epoch ³\nc\nISO 8601 (PHP 5) (2008-­07-­31T­18:­30:­13+­01:00)\nr\nRFC 2822 (Thu, 31 Jul 2008 18:30:13 +0100)`}</p>\n    <h2 {...{\n      \"id\": \"accessing-deep-arrays-to-find-values\"\n    }}>{`Accessing deep arrays to find values`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$locations = Timber::get_terms('locations');\n\n        $data = [];\n        $exclusion = [];\n\n        foreach($locations as $location) {\n            $data[] = [\n                \"location\" => $location,\n                \"posts\" => Locations::getPostsForLocation($location,$count,$exclusion)\n            ];\n\n            // add posts with current ids to array to check against\n            foreach ($data as $key => $value) {\n                if ($value[\"posts\"]) {\n                    $posts = $value[\"posts\"];\n                    foreach($posts as $key => $value) {\n                        if (in_array($value->id, $exclusion)) {\n                            unset($posts[$key]);\n                        } else {\n                            array_push($exclusion, $value->id);\n                        }\n                    }\n                }\n            }\n        }\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}