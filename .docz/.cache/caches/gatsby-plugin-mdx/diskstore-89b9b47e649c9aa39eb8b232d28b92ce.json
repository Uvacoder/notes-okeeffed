{"expireTime":9007200852878430000,"key":"gatsby-plugin-mdx-entire-payload-35bd66c8d9be9ce12afb5a96f0eb9cf8-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Cloud Vision w/ Nodejs","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":25,"offset":191},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":25,"offset":191},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"References","position":{"start":{"line":10,"column":4,"offset":196},"end":{"line":10,"column":14,"offset":206},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":193},"end":{"line":10,"column":14,"offset":206},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://cloud.google.com/vision/docs/ocr#vision_text_detection-nodejs","children":[{"type":"text","value":"https://cloud.google.com/vision/docs/ocr#vision_text_detection-nodejs","position":{"start":{"line":12,"column":3,"offset":210},"end":{"line":12,"column":72,"offset":279},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":210},"end":{"line":12,"column":72,"offset":279},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":210},"end":{"line":12,"column":72,"offset":279},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":208},"end":{"line":12,"column":72,"offset":279},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":208},"end":{"line":12,"column":72,"offset":279},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":14,"column":4,"offset":284},"end":{"line":14,"column":17,"offset":297},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":281},"end":{"line":14,"column":17,"offset":297},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ensure you have set up a GCP project with Cloud Vision enabled. Follow the link above if you need help.","position":{"start":{"line":16,"column":1,"offset":299},"end":{"line":16,"column":104,"offset":402},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":299},"end":{"line":16,"column":104,"offset":402},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Move the project creds to the right directory and install ","position":{"start":{"line":18,"column":1,"offset":404},"end":{"line":18,"column":59,"offset":462},"indent":[]}},{"type":"inlineCode","value":"@google-cloud/vision","position":{"start":{"line":18,"column":59,"offset":462},"end":{"line":18,"column":81,"offset":484},"indent":[]}},{"type":"text","value":" for the project.","position":{"start":{"line":18,"column":81,"offset":484},"end":{"line":18,"column":98,"offset":501},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":404},"end":{"line":18,"column":98,"offset":501},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"TypeScript Example","position":{"start":{"line":20,"column":4,"offset":506},"end":{"line":20,"column":22,"offset":524},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":503},"end":{"line":20,"column":22,"offset":524},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"// src/index.ts\nconst vision = require('@google-cloud/vision');\nconst util = require('util');\nconst ss = require('string-similarity');\nconst cc = require('lodash.camelcase');\nconst up = require('lodash.capitalize');\nconst path = require('path');\n\nconst components: string[] = [\n  'Select',\n  'Text',\n  'Button',\n  'TextField',\n  'Image',\n  'Icon',\n];\n\nconst run = async () => {\n  // Creates a client\n  const client = new vision.ImageAnnotatorClient();\n\n  // Base file required for the src folder detection\n  const fileName = './src/img/testFour.jpg';\n\n  // Performs text detection on the local file\n  const [result] = await client.textDetection(fileName);\n  const detections = result.textAnnotations;\n  console.log('=== STARTING ===');\n  const fullDetection = detections[0];\n  const { description } = fullDetection;\n\n  console.log('Description:', description);\n\n  let res = '';\n\n  description.split('\\n').map((line: string) => {\n    res += '<div>\\n';\n    line.split(',').map((text) => {\n      const { bestMatch } = ss.findBestMatch(up(cc(text)), components);\n      res += `\\t<${bestMatch.target} />\\n`;\n    });\n    res += '</div>\\n';\n  });\n  console.log('=== RES ===');\n  console.log(res);\n};\n\nrun();","position":{"start":{"line":22,"column":1,"offset":526},"end":{"line":71,"column":4,"offset":1744},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Running ","position":{"start":{"line":73,"column":1,"offset":1746},"end":{"line":73,"column":9,"offset":1754},"indent":[]}},{"type":"inlineCode","value":"node --require ts-node/register src/index.ts","position":{"start":{"line":73,"column":9,"offset":1754},"end":{"line":73,"column":55,"offset":1800},"indent":[]}},{"type":"text","value":" should result in the output we want.","position":{"start":{"line":73,"column":55,"offset":1800},"end":{"line":73,"column":92,"offset":1837},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":1746},"end":{"line":73,"column":92,"offset":1837},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":76,"column":1,"offset":1840},"end":{"line":76,"column":31,"offset":1870},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":76,"column":31,"offset":1870}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"cloud-vision-w-nodejs\"\n    }}>{`Cloud Vision w/ Nodejs`}</h1>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://cloud.google.com/vision/docs/ocr#vision_text_detection-nodejs\"\n        }}>{`https://cloud.google.com/vision/docs/ocr#vision_text_detection-nodejs`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`Ensure you have set up a GCP project with Cloud Vision enabled. Follow the link above if you need help.`}</p>\n    <p>{`Move the project creds to the right directory and install `}<inlineCode parentName=\"p\">{`@google-cloud/vision`}</inlineCode>{` for the project.`}</p>\n    <h2 {...{\n      \"id\": \"typescript-example\"\n    }}>{`TypeScript Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// src/index.ts\nconst vision = require('@google-cloud/vision');\nconst util = require('util');\nconst ss = require('string-similarity');\nconst cc = require('lodash.camelcase');\nconst up = require('lodash.capitalize');\nconst path = require('path');\n\nconst components: string[] = [\n  'Select',\n  'Text',\n  'Button',\n  'TextField',\n  'Image',\n  'Icon',\n];\n\nconst run = async () => {\n  // Creates a client\n  const client = new vision.ImageAnnotatorClient();\n\n  // Base file required for the src folder detection\n  const fileName = './src/img/testFour.jpg';\n\n  // Performs text detection on the local file\n  const [result] = await client.textDetection(fileName);\n  const detections = result.textAnnotations;\n  console.log('=== STARTING ===');\n  const fullDetection = detections[0];\n  const { description } = fullDetection;\n\n  console.log('Description:', description);\n\n  let res = '';\n\n  description.split('\\\\n').map((line: string) => {\n    res += '<div>\\\\n';\n    line.split(',').map((text) => {\n      const { bestMatch } = ss.findBestMatch(up(cc(text)), components);\n      res += \\`\\\\t<\\${bestMatch.target} />\\\\n\\`;\n    });\n    res += '</div>\\\\n';\n  });\n  console.log('=== RES ===');\n  console.log(res);\n};\n\nrun();\n`}</code></pre>\n    <p>{`Running `}<inlineCode parentName=\"p\">{`node --require ts-node/register src/index.ts`}</inlineCode>{` should result in the output we want.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}