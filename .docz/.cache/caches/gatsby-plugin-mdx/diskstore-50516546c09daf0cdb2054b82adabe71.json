{"expireTime":9007200867335903000,"key":"gatsby-plugin-mdx-entire-payload-421f976e64023f6b4a65314d57673e24-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Safe Navigation Operator","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":27,"offset":193},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":27,"offset":193},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Looking through the docs:","position":{"start":{"line":10,"column":1,"offset":195},"end":{"line":10,"column":26,"offset":220},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":195},"end":{"line":10,"column":26,"offset":220},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"REGEX = /(ruby) is (\\w+)/i\n\"Ruby is awesome!\".match(REGEX).values_at(1, 2)\n# => [\"Ruby\", \"awesome\"]\n\"Python is fascinating!\".match(REGEX).values_at(1, 2)\n# NoMethodError: undefined method `values_at' for nil:NilClass\n\"Python is fascinating!\".match(REGEX)&.values_at(1, 2)\n# => nil","position":{"start":{"line":12,"column":1,"offset":222},"end":{"line":20,"column":4,"offset":512},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It is necessary in longer chained calls to continue to use the safety operator:","position":{"start":{"line":22,"column":1,"offset":514},"end":{"line":22,"column":80,"offset":593},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":514},"end":{"line":22,"column":80,"offset":593},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"\"Python is fascinating!\".match(REGEX)&.values_at(1, 2).join(' - ')\n# NoMethodError: undefined method `join' for nil:NilClass\n\"Python is fascinating!\".match(REGEX)&.values_at(1, 2)&.join(' - ')\n# => nil","position":{"start":{"line":24,"column":1,"offset":595},"end":{"line":29,"column":4,"offset":806},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It allows you to help with safety checking:","position":{"start":{"line":31,"column":1,"offset":808},"end":{"line":31,"column":44,"offset":851},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":808},"end":{"line":31,"column":44,"offset":851},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"irb(main):035:0> hash = {:a => { :b => {:c => 2 } } }\n=> {:a=>{:b=>{:c=>2}}}\nirb(main):036:0> hash[:a] && hash[:a][:b] && hash[:a][:b][:c]\n=> 2\nirb(main):037:0> hash[:a] && hash[:a][:b] && hash[:a][:b][:d]\n=> nil\n# the above two equate to the following two\nirb(main):038:0> hash&.[](:a)&.[](:b)&.[](:c)\n=> 2\nirb(main):039:0> hash&.[](:a)&.[](:b)&.[](:d)\n=> nil\n# changing up the chain\nirb(main):040:0> hash[:a] && hash[:a][:d] && hash[:a][:d][:c]\n=> nil\n# same as\nirb(main):041:0> hash&.[](:a)&.[](:d)&.[](:c)\n=> nil","position":{"start":{"line":33,"column":1,"offset":853},"end":{"line":51,"column":4,"offset":1379},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There is a prerequisite you need to know about accessing a hash value in Ruby to help with undersanding the ","position":{"start":{"line":53,"column":1,"offset":1381},"end":{"line":53,"column":109,"offset":1489},"indent":[]}},{"type":"inlineCode","value":"&.[](:symbol)","position":{"start":{"line":53,"column":109,"offset":1489},"end":{"line":53,"column":124,"offset":1504},"indent":[]}},{"type":"text","value":" syntax.","position":{"start":{"line":53,"column":124,"offset":1504},"end":{"line":53,"column":132,"offset":1512},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1381},"end":{"line":53,"column":132,"offset":1512},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"irb(main):014:0> deep_hash = {:one => {:two => {:three => true } } }\n=> {:one=>{:two=>{:three=>true}}}\n# This here\nirb(main):015:0> deep_hash[:one][:two][:three]\n=> true\n# Is equivalent to this\nirb(main):016:0> deep_hash.[](:one).[](:two).[](:three)\n=> true","position":{"start":{"line":55,"column":1,"offset":1514},"end":{"line":64,"column":4,"offset":1781},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Usage with Hash:","position":{"start":{"line":66,"column":1,"offset":1783},"end":{"line":66,"column":17,"offset":1799},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1783},"end":{"line":66,"column":17,"offset":1799},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"irb(main):021:0> a = { :b => { :c => 3 } }\n=> {:b=>{:c=>3}}\nirb(main):024:0> a[:b]&.[](:c)\n=> 3\nirb(main):025:0> a[:c]&.[](:c)\n=> nil\nirb(main):026:0> a[:c][:c]\nTraceback (most recent call last):\n        4: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in `<main>'\n        3: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in `load'\n        2: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in `<top (required)>'\n        1: from (irb):26\nNoMethodError (undefined method `[]' for nil:NilClass)","position":{"start":{"line":68,"column":1,"offset":1801},"end":{"line":82,"column":4,"offset":2390},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It cannot be used with a struct property. Usage with Struct:","position":{"start":{"line":84,"column":1,"offset":2392},"end":{"line":84,"column":61,"offset":2452},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2392},"end":{"line":84,"column":61,"offset":2452},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"irb(main):001:0> Person = Struct.new(:details)\n=> Person\nirb(main):003:0> person_a = Person.new({:name => \"Dennis\", :city => \"Cremorne\"})\n=> #<struct Person details={:name=>\"Dennis\", :city=>\"Cremorne\"}>\nirb(main):004:0> person_a[:details]&.[](:name)\n=> \"Dennis\"\nirb(main):005:0> person_a[:incorrect]&.[](:name)\nTraceback (most recent call last):\n        5: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in `<main>'\n        4: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in `load'\n        3: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in `<top (required)>'\n        2: from (irb):5\n        1: from (irb):5:in `[]'\nNameError (no member 'incorrect' in struct)","position":{"start":{"line":86,"column":1,"offset":2454},"end":{"line":101,"column":4,"offset":3213},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It can, however, be used in a deep hash assigned to the value:","position":{"start":{"line":103,"column":1,"offset":3215},"end":{"line":103,"column":63,"offset":3277},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3215},"end":{"line":103,"column":63,"offset":3277},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"irb(main):001:0> Person = Struct.new(:details)\n=> Person\nirb(main):007:0>  person_b = Person.new({:meta => {:name => \"Dennis\", :city => \"Cremorne\"}})\n=> #<struct Person details={:meta=>{:name=>\"Dennis\", :city=>\"Cremorne\"}}>\nirb(main):008:0> person_b.details&.[](:meta).[](:name)\n=> \"Dennis\"\nirb(main):010:0> person_b.details&.[](:incorrect)\n=> nil\nirb(main):011:0> person_b.details&.[](:incorrect)&.[](:name)\n=> nil\n# When not using the safe navigation operator for the last property\nirb(main):009:0> person_b.details&.[](:incorrect).[](:name)\nTraceback (most recent call last):\n        4: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in `<main>'\n        3: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in `load'\n        2: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in `<top (required)>'\n        1: from (irb):9\nNoMethodError (undefined method `[]' for nil:NilClass)","position":{"start":{"line":105,"column":1,"offset":3279},"end":{"line":124,"column":4,"offset":4250},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, we can see it in action with classes:","position":{"start":{"line":126,"column":1,"offset":4252},"end":{"line":126,"column":47,"offset":4298},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":4252},"end":{"line":126,"column":47,"offset":4298},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"irb(main):009:0> class Person\nirb(main):010:1> def initialize(meta)\nirb(main):011:2> @meta = meta\nirb(main):012:2> end\nirb(main):013:1> def meta\nirb(main):014:2> #meta\nirb(main):015:2> @meta\nirb(main):016:2> end\nirb(main):017:1> end\n=> :meta\nirb(main):018:0> Dennis = Person.new({:a => { :b => 'Hello!' } })\n=> #<Person:0x00007fad170c11f8 @meta={:a=>{:b=>\"Hello!\"}}>\nirb(main):019:0> Dennis.meta\n=> {:a=>{:b=>\"Hello!\"}}\nirb(main):020:0> Dennis.meta&.[](:a)&.[](:b)\n=> \"Hello!\"\nirb(main):021:0> Dennis.meta&.[](:c)\n=> nil\nirb(main):022:0> Dennis.meta[:a][:b]\n=> \"Hello!\"\n# does not work with undefined methods\nirb(main):023:0> Dennis&.not_real\nTraceback (most recent call last):\n        4: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in `<main>'\n        3: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in `load'\n        2: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in `<top (required)>'\n        1: from (irb):23\nNoMethodError (undefined method `not_real' for #<Person:0x00007fad170c11f8 @meta={:a=>{:b=>\"Hello!\"}}>)","position":{"start":{"line":128,"column":1,"offset":4300},"end":{"line":157,"column":4,"offset":5420},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":160,"column":1,"offset":5423},"end":{"line":160,"column":31,"offset":5453},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":160,"column":31,"offset":5453}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"safe-navigation-operator\"\n    }}>{`Safe Navigation Operator`}</h1>\n    <p>{`Looking through the docs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`REGEX = /(ruby) is (\\\\w+)/i\n\"Ruby is awesome!\".match(REGEX).values_at(1, 2)\n# => [\"Ruby\", \"awesome\"]\n\"Python is fascinating!\".match(REGEX).values_at(1, 2)\n# NoMethodError: undefined method \\`values_at' for nil:NilClass\n\"Python is fascinating!\".match(REGEX)&.values_at(1, 2)\n# => nil\n`}</code></pre>\n    <p>{`It is necessary in longer chained calls to continue to use the safety operator:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`\"Python is fascinating!\".match(REGEX)&.values_at(1, 2).join(' - ')\n# NoMethodError: undefined method \\`join' for nil:NilClass\n\"Python is fascinating!\".match(REGEX)&.values_at(1, 2)&.join(' - ')\n# => nil\n`}</code></pre>\n    <p>{`It allows you to help with safety checking:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):035:0> hash = {:a => { :b => {:c => 2 } } }\n=> {:a=>{:b=>{:c=>2}}}\nirb(main):036:0> hash[:a] && hash[:a][:b] && hash[:a][:b][:c]\n=> 2\nirb(main):037:0> hash[:a] && hash[:a][:b] && hash[:a][:b][:d]\n=> nil\n# the above two equate to the following two\nirb(main):038:0> hash&.[](:a)&.[](:b)&.[](:c)\n=> 2\nirb(main):039:0> hash&.[](:a)&.[](:b)&.[](:d)\n=> nil\n# changing up the chain\nirb(main):040:0> hash[:a] && hash[:a][:d] && hash[:a][:d][:c]\n=> nil\n# same as\nirb(main):041:0> hash&.[](:a)&.[](:d)&.[](:c)\n=> nil\n`}</code></pre>\n    <p>{`There is a prerequisite you need to know about accessing a hash value in Ruby to help with undersanding the `}<inlineCode parentName=\"p\">{`&.[](:symbol)`}</inlineCode>{` syntax.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):014:0> deep_hash = {:one => {:two => {:three => true } } }\n=> {:one=>{:two=>{:three=>true}}}\n# This here\nirb(main):015:0> deep_hash[:one][:two][:three]\n=> true\n# Is equivalent to this\nirb(main):016:0> deep_hash.[](:one).[](:two).[](:three)\n=> true\n`}</code></pre>\n    <p>{`Usage with Hash:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):021:0> a = { :b => { :c => 3 } }\n=> {:b=>{:c=>3}}\nirb(main):024:0> a[:b]&.[](:c)\n=> 3\nirb(main):025:0> a[:c]&.[](:c)\n=> nil\nirb(main):026:0> a[:c][:c]\nTraceback (most recent call last):\n        4: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in \\`<main>'\n        3: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in \\`load'\n        2: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in \\`<top (required)>'\n        1: from (irb):26\nNoMethodError (undefined method \\`[]' for nil:NilClass)\n`}</code></pre>\n    <p>{`It cannot be used with a struct property. Usage with Struct:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):001:0> Person = Struct.new(:details)\n=> Person\nirb(main):003:0> person_a = Person.new({:name => \"Dennis\", :city => \"Cremorne\"})\n=> #<struct Person details={:name=>\"Dennis\", :city=>\"Cremorne\"}>\nirb(main):004:0> person_a[:details]&.[](:name)\n=> \"Dennis\"\nirb(main):005:0> person_a[:incorrect]&.[](:name)\nTraceback (most recent call last):\n        5: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in \\`<main>'\n        4: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in \\`load'\n        3: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in \\`<top (required)>'\n        2: from (irb):5\n        1: from (irb):5:in \\`[]'\nNameError (no member 'incorrect' in struct)\n`}</code></pre>\n    <p>{`It can, however, be used in a deep hash assigned to the value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):001:0> Person = Struct.new(:details)\n=> Person\nirb(main):007:0>  person_b = Person.new({:meta => {:name => \"Dennis\", :city => \"Cremorne\"}})\n=> #<struct Person details={:meta=>{:name=>\"Dennis\", :city=>\"Cremorne\"}}>\nirb(main):008:0> person_b.details&.[](:meta).[](:name)\n=> \"Dennis\"\nirb(main):010:0> person_b.details&.[](:incorrect)\n=> nil\nirb(main):011:0> person_b.details&.[](:incorrect)&.[](:name)\n=> nil\n# When not using the safe navigation operator for the last property\nirb(main):009:0> person_b.details&.[](:incorrect).[](:name)\nTraceback (most recent call last):\n        4: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in \\`<main>'\n        3: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in \\`load'\n        2: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in \\`<top (required)>'\n        1: from (irb):9\nNoMethodError (undefined method \\`[]' for nil:NilClass)\n`}</code></pre>\n    <p>{`Finally, we can see it in action with classes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):009:0> class Person\nirb(main):010:1> def initialize(meta)\nirb(main):011:2> @meta = meta\nirb(main):012:2> end\nirb(main):013:1> def meta\nirb(main):014:2> #meta\nirb(main):015:2> @meta\nirb(main):016:2> end\nirb(main):017:1> end\n=> :meta\nirb(main):018:0> Dennis = Person.new({:a => { :b => 'Hello!' } })\n=> #<Person:0x00007fad170c11f8 @meta={:a=>{:b=>\"Hello!\"}}>\nirb(main):019:0> Dennis.meta\n=> {:a=>{:b=>\"Hello!\"}}\nirb(main):020:0> Dennis.meta&.[](:a)&.[](:b)\n=> \"Hello!\"\nirb(main):021:0> Dennis.meta&.[](:c)\n=> nil\nirb(main):022:0> Dennis.meta[:a][:b]\n=> \"Hello!\"\n# does not work with undefined methods\nirb(main):023:0> Dennis&.not_real\nTraceback (most recent call last):\n        4: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in \\`<main>'\n        3: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/bin/irb:23:in \\`load'\n        2: from /Users/dennis.okeeffe/.asdf/installs/ruby/2.6.2/lib/ruby/gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in \\`<top (required)>'\n        1: from (irb):23\nNoMethodError (undefined method \\`not_real' for #<Person:0x00007fad170c11f8 @meta={:a=>{:b=>\"Hello!\"}}>)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}