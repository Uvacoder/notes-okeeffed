{"expireTime":9007200852878333000,"key":"gatsby-plugin-mdx-entire-payload-27baa159bc6cd981b09af1c2bb15bce0-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"gRPC with Golang","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":19,"offset":185},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":19,"offset":185},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":190},"end":{"line":10,"column":13,"offset":199},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":187},"end":{"line":10,"column":13,"offset":199},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.udemy.com/course/grpc-golang/","children":[{"type":"text","value":"gRPC course Udemy","position":{"start":{"line":12,"column":5,"offset":205},"end":{"line":12,"column":22,"offset":222},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":204},"end":{"line":12,"column":66,"offset":266},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":204},"end":{"line":12,"column":66,"offset":266},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":201},"end":{"line":12,"column":66,"offset":266},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://grpc.io/","children":[{"type":"text","value":"gRPC.io","position":{"start":{"line":13,"column":5,"offset":271},"end":{"line":13,"column":12,"offset":278},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":270},"end":{"line":13,"column":31,"offset":297},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":270},"end":{"line":13,"column":31,"offset":297},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":267},"end":{"line":13,"column":31,"offset":297},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://imagekit.io/demo/http2-vs-http1","children":[{"type":"text","value":"HTTP2 vs HTTP1 image loading website","position":{"start":{"line":14,"column":5,"offset":302},"end":{"line":14,"column":41,"offset":338},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":301},"end":{"line":14,"column":83,"offset":380},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":301},"end":{"line":14,"column":83,"offset":380},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":298},"end":{"line":14,"column":83,"offset":380},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/grpc/grpc-go","children":[{"type":"text","value":"gRPC-Go","position":{"start":{"line":15,"column":5,"offset":385},"end":{"line":15,"column":12,"offset":392},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":384},"end":{"line":15,"column":46,"offset":426},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":384},"end":{"line":15,"column":46,"offset":426},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":381},"end":{"line":15,"column":46,"offset":426},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/golang/protobuf","children":[{"type":"text","value":"Go Protobuf","position":{"start":{"line":16,"column":5,"offset":431},"end":{"line":16,"column":16,"offset":442},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":430},"end":{"line":16,"column":53,"offset":479},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":430},"end":{"line":16,"column":53,"offset":479},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":427},"end":{"line":16,"column":53,"offset":479},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://blog.coinbase.com/grpc-to-aws-lambda-is-it-possible-4b29a9171d7f","children":[{"type":"text","value":"gRPC with Lambda","position":{"start":{"line":17,"column":5,"offset":484},"end":{"line":17,"column":21,"offset":500},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":483},"end":{"line":17,"column":96,"offset":575},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":483},"end":{"line":17,"column":96,"offset":575},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":480},"end":{"line":17,"column":96,"offset":575},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/twitchtv/twirp","children":[{"type":"text","value":"Twirp","position":{"start":{"line":18,"column":5,"offset":580},"end":{"line":18,"column":10,"offset":585},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":579},"end":{"line":18,"column":46,"offset":621},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":579},"end":{"line":18,"column":46,"offset":621},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":576},"end":{"line":18,"column":46,"offset":621},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://rynop.com/2018/01/23/twirpl-twirp-go-framework-running-completely-serverless/","children":[{"type":"text","value":"Twirpl 2018 post","position":{"start":{"line":19,"column":5,"offset":626},"end":{"line":19,"column":21,"offset":642},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":625},"end":{"line":19,"column":109,"offset":730},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":625},"end":{"line":19,"column":109,"offset":730},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":622},"end":{"line":19,"column":109,"offset":730},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":201},"end":{"line":19,"column":109,"offset":730},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Intro","position":{"start":{"line":21,"column":4,"offset":735},"end":{"line":21,"column":9,"offset":740},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":732},"end":{"line":21,"column":9,"offset":740},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"gRPC is there to attempt to solve the difficulties of API design.","position":{"start":{"line":23,"column":1,"offset":742},"end":{"line":23,"column":66,"offset":807},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":742},"end":{"line":23,"column":66,"offset":807},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"gRPC is an open-source framework developed by Google which is now part of CNCF.","position":{"start":{"line":25,"column":1,"offset":809},"end":{"line":25,"column":80,"offset":888},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":809},"end":{"line":25,"column":80,"offset":888},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At a high level, it allows you to define REQUEST and RESPONSE for RPCs and handles the rest.","position":{"start":{"line":27,"column":1,"offset":890},"end":{"line":27,"column":93,"offset":982},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":890},"end":{"line":27,"column":93,"offset":982},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Benefits","position":{"start":{"line":29,"column":5,"offset":988},"end":{"line":29,"column":13,"offset":996},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":984},"end":{"line":29,"column":13,"offset":996},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Fast + efficient","position":{"start":{"line":31,"column":4,"offset":1001},"end":{"line":31,"column":20,"offset":1017},"indent":[]}}],"position":{"start":{"line":31,"column":4,"offset":1001},"end":{"line":31,"column":20,"offset":1017},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":998},"end":{"line":31,"column":20,"offset":1017},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Built on HTTP/2","position":{"start":{"line":32,"column":4,"offset":1021},"end":{"line":32,"column":19,"offset":1036},"indent":[]}}],"position":{"start":{"line":32,"column":4,"offset":1021},"end":{"line":32,"column":19,"offset":1036},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1018},"end":{"line":32,"column":19,"offset":1036},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Low latenvy","position":{"start":{"line":33,"column":4,"offset":1040},"end":{"line":33,"column":15,"offset":1051},"indent":[]}}],"position":{"start":{"line":33,"column":4,"offset":1040},"end":{"line":33,"column":15,"offset":1051},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1037},"end":{"line":33,"column":15,"offset":1051},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Supports streaming","position":{"start":{"line":34,"column":4,"offset":1055},"end":{"line":34,"column":22,"offset":1073},"indent":[]}}],"position":{"start":{"line":34,"column":4,"offset":1055},"end":{"line":34,"column":22,"offset":1073},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1052},"end":{"line":34,"column":22,"offset":1073},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Language independent","position":{"start":{"line":35,"column":4,"offset":1077},"end":{"line":35,"column":24,"offset":1097},"indent":[]}}],"position":{"start":{"line":35,"column":4,"offset":1077},"end":{"line":35,"column":24,"offset":1097},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1074},"end":{"line":35,"column":24,"offset":1097},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Easy to plug in with integrated auth, load balancing, logging and monitoring","position":{"start":{"line":36,"column":4,"offset":1101},"end":{"line":36,"column":80,"offset":1177},"indent":[]}}],"position":{"start":{"line":36,"column":4,"offset":1101},"end":{"line":36,"column":80,"offset":1177},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1098},"end":{"line":36,"column":80,"offset":1177},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":998},"end":{"line":36,"column":80,"offset":1177},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Remote Procedural Call","position":{"start":{"line":38,"column":4,"offset":1182},"end":{"line":38,"column":26,"offset":1204},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1179},"end":{"line":38,"column":26,"offset":1204},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the CLIENT code, it looks like you're just callng a function on the SERVER.","position":{"start":{"line":40,"column":1,"offset":1206},"end":{"line":40,"column":79,"offset":1284},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1206},"end":{"line":40,"column":79,"offset":1284},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With gRPC, it is implemented cleanly and solves a lot of problems.","position":{"start":{"line":42,"column":1,"offset":1286},"end":{"line":42,"column":67,"offset":1352},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1286},"end":{"line":42,"column":67,"offset":1352},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Getting started","position":{"start":{"line":44,"column":4,"offset":1357},"end":{"line":44,"column":19,"offset":1372},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1354},"end":{"line":44,"column":19,"offset":1372},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At the core of gRPC, you need to define the messages and services using ","position":{"start":{"line":46,"column":1,"offset":1374},"end":{"line":46,"column":73,"offset":1446},"indent":[]}},{"type":"inlineCode","value":"Protocol Buffers","position":{"start":{"line":46,"column":73,"offset":1446},"end":{"line":46,"column":91,"offset":1464},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":46,"column":91,"offset":1464},"end":{"line":46,"column":92,"offset":1465},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1374},"end":{"line":46,"column":92,"offset":1465},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The rest of the gRPC code will be generated for you and you'll have to provide and implementation for it.","position":{"start":{"line":48,"column":1,"offset":1467},"end":{"line":48,"column":106,"offset":1572},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1467},"end":{"line":48,"column":106,"offset":1572},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"One ","position":{"start":{"line":50,"column":3,"offset":1576},"end":{"line":50,"column":7,"offset":1580},"indent":[]}},{"type":"inlineCode","value":".proto","position":{"start":{"line":50,"column":7,"offset":1580},"end":{"line":50,"column":15,"offset":1588},"indent":[]}},{"type":"text","value":" file can be used for over 12 different languages.","position":{"start":{"line":50,"column":15,"offset":1588},"end":{"line":50,"column":65,"offset":1638},"indent":[]}}],"position":{"start":{"line":50,"column":3,"offset":1576},"end":{"line":50,"column":65,"offset":1638},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1574},"end":{"line":50,"column":65,"offset":1638},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example proto file","position":{"start":{"line":52,"column":5,"offset":1644},"end":{"line":52,"column":23,"offset":1662},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1640},"end":{"line":52,"column":23,"offset":1662},"indent":[]}},{"type":"code","lang":"proto","meta":null,"value":"syntax = 'proto3';\n\nmessage Greeting {\n  string first_name = 1;\n}\n\nmessage GreetRequest {\n  Greeting greeting = 1;\n}\n\nmessage Greeting {\n  string result = 1;\n}\n\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {};\n}","position":{"start":{"line":54,"column":1,"offset":1664},"end":{"line":72,"column":4,"offset":1916},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Why Protocol Buffers?","position":{"start":{"line":74,"column":4,"offset":1921},"end":{"line":74,"column":25,"offset":1942},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1918},"end":{"line":74,"column":25,"offset":1942},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Language agnostic.","position":{"start":{"line":76,"column":3,"offset":1946},"end":{"line":76,"column":21,"offset":1964},"indent":[]}}],"position":{"start":{"line":76,"column":3,"offset":1946},"end":{"line":76,"column":21,"offset":1964},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":1944},"end":{"line":76,"column":21,"offset":1964},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Code can be generated for pretty much any language.","position":{"start":{"line":77,"column":3,"offset":1967},"end":{"line":77,"column":54,"offset":2018},"indent":[]}}],"position":{"start":{"line":77,"column":3,"offset":1967},"end":{"line":77,"column":54,"offset":2018},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":1965},"end":{"line":77,"column":54,"offset":2018},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Data is binary and efficiently serialized (small payloads).","position":{"start":{"line":78,"column":3,"offset":2021},"end":{"line":78,"column":62,"offset":2080},"indent":[]}}],"position":{"start":{"line":78,"column":3,"offset":2021},"end":{"line":78,"column":62,"offset":2080},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2019},"end":{"line":78,"column":62,"offset":2080},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Very convenient for transporting a lot of data.","position":{"start":{"line":79,"column":3,"offset":2083},"end":{"line":79,"column":50,"offset":2130},"indent":[]}}],"position":{"start":{"line":79,"column":3,"offset":2083},"end":{"line":79,"column":50,"offset":2130},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":2081},"end":{"line":79,"column":50,"offset":2130},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Protocol Buffers allows for easy API evolution using rules.","position":{"start":{"line":80,"column":3,"offset":2133},"end":{"line":80,"column":62,"offset":2192},"indent":[]}}],"position":{"start":{"line":80,"column":3,"offset":2133},"end":{"line":80,"column":62,"offset":2192},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2131},"end":{"line":80,"column":62,"offset":2192},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Easy to write messag definition.","position":{"start":{"line":81,"column":3,"offset":2195},"end":{"line":81,"column":35,"offset":2227},"indent":[]}}],"position":{"start":{"line":81,"column":3,"offset":2195},"end":{"line":81,"column":35,"offset":2227},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2193},"end":{"line":81,"column":35,"offset":2227},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Definition of API independent from implementation.","position":{"start":{"line":82,"column":3,"offset":2230},"end":{"line":82,"column":53,"offset":2280},"indent":[]}}],"position":{"start":{"line":82,"column":3,"offset":2230},"end":{"line":82,"column":53,"offset":2280},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2228},"end":{"line":82,"column":53,"offset":2280},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A hug amount of code can be generated, in any language, from a simple ","position":{"start":{"line":83,"column":3,"offset":2283},"end":{"line":83,"column":73,"offset":2353},"indent":[]}},{"type":"inlineCode","value":".proto","position":{"start":{"line":83,"column":73,"offset":2353},"end":{"line":83,"column":81,"offset":2361},"indent":[]}},{"type":"text","value":" file.","position":{"start":{"line":83,"column":81,"offset":2361},"end":{"line":83,"column":87,"offset":2367},"indent":[]}}],"position":{"start":{"line":83,"column":3,"offset":2283},"end":{"line":83,"column":87,"offset":2367},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2281},"end":{"line":83,"column":87,"offset":2367},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Payload is binary, therefore very efficient to send/receive on a network and serialize/de-serialize on a CPU.","position":{"start":{"line":84,"column":3,"offset":2370},"end":{"line":84,"column":112,"offset":2479},"indent":[]}}],"position":{"start":{"line":84,"column":3,"offset":2370},"end":{"line":84,"column":112,"offset":2479},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2368},"end":{"line":84,"column":112,"offset":2479},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":1944},"end":{"line":84,"column":112,"offset":2479},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Protocol Buffers & Interoperability","position":{"start":{"line":86,"column":5,"offset":2485},"end":{"line":86,"column":40,"offset":2520},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":2481},"end":{"line":86,"column":40,"offset":2520},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One benefit Protobuf is used the size of the messsage and savings through network benefit. A JSON comparison of an object for \"person\" vs a Protobuf shows a 55 byte vs 20 byte difference, event with small messages.","position":{"start":{"line":88,"column":1,"offset":2522},"end":{"line":88,"column":215,"offset":2736},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2522},"end":{"line":88,"column":215,"offset":2736},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Parsing Protocol Buggers (binary format) means faster and more efficient communication. This has added benefit for mobile devices with slower CPUs.","position":{"start":{"line":90,"column":1,"offset":2738},"end":{"line":90,"column":148,"offset":2885},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":2738},"end":{"line":90,"column":148,"offset":2885},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"gRPC languages","position":{"start":{"line":92,"column":5,"offset":2891},"end":{"line":92,"column":19,"offset":2905},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2887},"end":{"line":92,"column":19,"offset":2905},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Java, Go and C have native, pure bindings. The rest rely on GRPC-C.","position":{"start":{"line":94,"column":1,"offset":2907},"end":{"line":94,"column":68,"offset":2974},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":2907},"end":{"line":94,"column":68,"offset":2974},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"HTTP/2 vs HTTP/1","position":{"start":{"line":96,"column":4,"offset":2979},"end":{"line":96,"column":20,"offset":2995},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":2976},"end":{"line":96,"column":20,"offset":2995},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"HTTP/1","position":{"start":{"line":98,"column":5,"offset":3001},"end":{"line":98,"column":11,"offset":3007},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2997},"end":{"line":98,"column":11,"offset":3007},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Released in 1997.","position":{"start":{"line":100,"column":3,"offset":3011},"end":{"line":100,"column":20,"offset":3028},"indent":[]}}],"position":{"start":{"line":100,"column":3,"offset":3011},"end":{"line":100,"column":20,"offset":3028},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":3009},"end":{"line":100,"column":20,"offset":3028},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Opens a new TCP connection for each request.","position":{"start":{"line":101,"column":3,"offset":3031},"end":{"line":101,"column":47,"offset":3075},"indent":[]}}],"position":{"start":{"line":101,"column":3,"offset":3031},"end":{"line":101,"column":47,"offset":3075},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":3029},"end":{"line":101,"column":47,"offset":3075},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Does not compress headers (which are plaintext).","position":{"start":{"line":102,"column":3,"offset":3078},"end":{"line":102,"column":51,"offset":3126},"indent":[]}}],"position":{"start":{"line":102,"column":3,"offset":3078},"end":{"line":102,"column":51,"offset":3126},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":3076},"end":{"line":102,"column":51,"offset":3126},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Only works with Req/Res mechanism (no server push).","position":{"start":{"line":103,"column":3,"offset":3129},"end":{"line":103,"column":54,"offset":3180},"indent":[]}}],"position":{"start":{"line":103,"column":3,"offset":3129},"end":{"line":103,"column":54,"offset":3180},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3127},"end":{"line":103,"column":54,"offset":3180},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Original composed of GET and POST.","position":{"start":{"line":104,"column":3,"offset":3183},"end":{"line":104,"column":37,"offset":3217},"indent":[]}}],"position":{"start":{"line":104,"column":3,"offset":3183},"end":{"line":104,"column":37,"offset":3217},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":3181},"end":{"line":104,"column":37,"offset":3217},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"80 assets for load will request headers sent for every request. 80 assets = 80 TCP connections. Inefficient for latency and increases network packet size.","position":{"start":{"line":105,"column":3,"offset":3220},"end":{"line":105,"column":157,"offset":3374},"indent":[]}}],"position":{"start":{"line":105,"column":3,"offset":3220},"end":{"line":105,"column":157,"offset":3374},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":3218},"end":{"line":105,"column":157,"offset":3374},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":3009},"end":{"line":105,"column":157,"offset":3374},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"HTTP/2","position":{"start":{"line":107,"column":5,"offset":3380},"end":{"line":107,"column":11,"offset":3386},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3376},"end":{"line":107,"column":11,"offset":3386},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"2015 release but battle tested by Google.","position":{"start":{"line":109,"column":3,"offset":3390},"end":{"line":109,"column":44,"offset":3431},"indent":[]}}],"position":{"start":{"line":109,"column":3,"offset":3390},"end":{"line":109,"column":44,"offset":3431},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":3388},"end":{"line":109,"column":44,"offset":3431},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Supports multiplexing (parallel messages pushed).","position":{"start":{"line":110,"column":3,"offset":3434},"end":{"line":110,"column":52,"offset":3483},"indent":[]}}],"position":{"start":{"line":110,"column":3,"offset":3434},"end":{"line":110,"column":52,"offset":3483},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":3432},"end":{"line":110,"column":52,"offset":3483},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Supports server push (multiple messages for one client request).","position":{"start":{"line":111,"column":3,"offset":3486},"end":{"line":111,"column":67,"offset":3550},"indent":[]}}],"position":{"start":{"line":111,"column":3,"offset":3486},"end":{"line":111,"column":67,"offset":3550},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":3484},"end":{"line":111,"column":67,"offset":3550},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Supports header compression.","position":{"start":{"line":112,"column":3,"offset":3553},"end":{"line":112,"column":31,"offset":3581},"indent":[]}}],"position":{"start":{"line":112,"column":3,"offset":3553},"end":{"line":112,"column":31,"offset":3581},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":3551},"end":{"line":112,"column":31,"offset":3581},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"HTTP/2 is binary. Any binary protocol is a great match.","position":{"start":{"line":113,"column":3,"offset":3584},"end":{"line":113,"column":58,"offset":3639},"indent":[]}}],"position":{"start":{"line":113,"column":3,"offset":3584},"end":{"line":113,"column":58,"offset":3639},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":3582},"end":{"line":113,"column":58,"offset":3639},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"HTTP/2 is secure (SSL not required by recommended by default).","position":{"start":{"line":114,"column":3,"offset":3642},"end":{"line":114,"column":65,"offset":3704},"indent":[]}}],"position":{"start":{"line":114,"column":3,"offset":3642},"end":{"line":114,"column":65,"offset":3704},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":3640},"end":{"line":114,"column":65,"offset":3704},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"\"Less chatter\". Less bandwidth, reduced latency, increased security.","position":{"start":{"line":115,"column":3,"offset":3707},"end":{"line":115,"column":71,"offset":3775},"indent":[]}}],"position":{"start":{"line":115,"column":3,"offset":3707},"end":{"line":115,"column":71,"offset":3775},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":3705},"end":{"line":115,"column":71,"offset":3775},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":3388},"end":{"line":115,"column":71,"offset":3775},"indent":[1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"gRPC only uses HTTP/2.","position":{"start":{"line":117,"column":3,"offset":3779},"end":{"line":117,"column":25,"offset":3801},"indent":[]}}],"position":{"start":{"line":117,"column":3,"offset":3779},"end":{"line":117,"column":25,"offset":3801},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":3777},"end":{"line":117,"column":25,"offset":3801},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"4 Types of API in gRPC","position":{"start":{"line":119,"column":4,"offset":3806},"end":{"line":119,"column":26,"offset":3828},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":3803},"end":{"line":119,"column":26,"offset":3828},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Unary","position":{"start":{"line":121,"column":4,"offset":3833},"end":{"line":121,"column":9,"offset":3838},"indent":[]}}],"position":{"start":{"line":121,"column":4,"offset":3833},"end":{"line":121,"column":9,"offset":3838},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":3830},"end":{"line":121,"column":9,"offset":3838},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Server streaming","position":{"start":{"line":122,"column":4,"offset":3842},"end":{"line":122,"column":20,"offset":3858},"indent":[]}}],"position":{"start":{"line":122,"column":4,"offset":3842},"end":{"line":122,"column":20,"offset":3858},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":3839},"end":{"line":122,"column":20,"offset":3858},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Client streaming","position":{"start":{"line":123,"column":4,"offset":3862},"end":{"line":123,"column":20,"offset":3878},"indent":[]}}],"position":{"start":{"line":123,"column":4,"offset":3862},"end":{"line":123,"column":20,"offset":3878},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3859},"end":{"line":123,"column":20,"offset":3878},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Bi-directional streaming","position":{"start":{"line":124,"column":4,"offset":3882},"end":{"line":124,"column":28,"offset":3906},"indent":[]}}],"position":{"start":{"line":124,"column":4,"offset":3882},"end":{"line":124,"column":28,"offset":3906},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":3879},"end":{"line":124,"column":28,"offset":3906},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":3830},"end":{"line":124,"column":28,"offset":3906},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The following shows how easy it is to define the streaming contracts:","position":{"start":{"line":126,"column":1,"offset":3908},"end":{"line":126,"column":70,"offset":3977},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":3908},"end":{"line":126,"column":70,"offset":3977},"indent":[]}},{"type":"code","lang":"proto","meta":"vs","value":"service GreetService {\n  // Unary\n  rpc Greet(GreetRequest) returns (GreetResponse) {};\n\n  // Streaming Server\n  rpc GreetManyTimes(GreetManyTimesRequest) returns (stream GreetManyTimesResponse) {};\n\n  // Streaming Client\n  rpc LongGreet(stream LongGreetRequest) returns (LongGreetResponse) {};\n\n  // Bidirectional Streaming\n  rpc GreetEveryone(stream GreetEveryoneRequest) returns (stream GreetEveryoneResponse) {};\n}","position":{"start":{"line":128,"column":1,"offset":3979},"end":{"line":142,"column":4,"offset":4413},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"gRPC Scalability","position":{"start":{"line":144,"column":4,"offset":4418},"end":{"line":144,"column":20,"offset":4434},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":4415},"end":{"line":144,"column":20,"offset":4434},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Async by default (ie non-blocking).","position":{"start":{"line":146,"column":3,"offset":4438},"end":{"line":146,"column":38,"offset":4473},"indent":[]}}],"position":{"start":{"line":146,"column":3,"offset":4438},"end":{"line":146,"column":38,"offset":4473},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":4436},"end":{"line":146,"column":38,"offset":4473},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can serve millions of reqs in parallel.","position":{"start":{"line":147,"column":3,"offset":4476},"end":{"line":147,"column":42,"offset":4515},"indent":[]}}],"position":{"start":{"line":147,"column":3,"offset":4476},"end":{"line":147,"column":42,"offset":4515},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":4474},"end":{"line":147,"column":42,"offset":4515},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"gRPC clients can be async or sync. Client decides on modal best for performance needs.","position":{"start":{"line":148,"column":3,"offset":4518},"end":{"line":148,"column":89,"offset":4604},"indent":[]}}],"position":{"start":{"line":148,"column":3,"offset":4518},"end":{"line":148,"column":89,"offset":4604},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":4516},"end":{"line":148,"column":89,"offset":4604},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"gRPC Clients can perform clientside load balancing.","position":{"start":{"line":149,"column":3,"offset":4607},"end":{"line":149,"column":54,"offset":4658},"indent":[]}}],"position":{"start":{"line":149,"column":3,"offset":4607},"end":{"line":149,"column":54,"offset":4658},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":4605},"end":{"line":149,"column":54,"offset":4658},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":4436},"end":{"line":149,"column":54,"offset":4658},"indent":[1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Google have 10 billion gRPC reqs per second internally.","position":{"start":{"line":151,"column":3,"offset":4662},"end":{"line":151,"column":58,"offset":4717},"indent":[]}}],"position":{"start":{"line":151,"column":3,"offset":4662},"end":{"line":151,"column":58,"offset":4717},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":4660},"end":{"line":151,"column":58,"offset":4717},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"gRPC Security","position":{"start":{"line":153,"column":4,"offset":4722},"end":{"line":153,"column":17,"offset":4735},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":4719},"end":{"line":153,"column":17,"offset":4735},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Strongly advocats for SSL in API.","position":{"start":{"line":155,"column":3,"offset":4739},"end":{"line":155,"column":36,"offset":4772},"indent":[]}}],"position":{"start":{"line":155,"column":3,"offset":4739},"end":{"line":155,"column":36,"offset":4772},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":4737},"end":{"line":155,"column":36,"offset":4772},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"gRPC has security as a first class citizen.","position":{"start":{"line":156,"column":3,"offset":4775},"end":{"line":156,"column":46,"offset":4818},"indent":[]}}],"position":{"start":{"line":156,"column":3,"offset":4775},"end":{"line":156,"column":46,"offset":4818},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":4773},"end":{"line":156,"column":46,"offset":4818},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ach language will provide an API to load gRPC with required certificates and provide encyption out-of-the-box.","position":{"start":{"line":157,"column":3,"offset":4821},"end":{"line":157,"column":113,"offset":4931},"indent":[]}}],"position":{"start":{"line":157,"column":3,"offset":4821},"end":{"line":157,"column":113,"offset":4931},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":4819},"end":{"line":157,"column":113,"offset":4931},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Additionally using Intercepts, can provide auth.","position":{"start":{"line":158,"column":3,"offset":4934},"end":{"line":158,"column":51,"offset":4982},"indent":[]}}],"position":{"start":{"line":158,"column":3,"offset":4934},"end":{"line":158,"column":51,"offset":4982},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":4932},"end":{"line":158,"column":51,"offset":4982},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":4737},"end":{"line":158,"column":51,"offset":4982},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Getting Started with gRPC Go","position":{"start":{"line":160,"column":4,"offset":4987},"end":{"line":160,"column":32,"offset":5015},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":4984},"end":{"line":160,"column":32,"offset":5015},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"go get -u google.golang.org/grpc\ngo get -u google.golang.org/protobuf","position":{"start":{"line":162,"column":1,"offset":5017},"end":{"line":165,"column":4,"offset":5095},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"After cloning ","position":{"start":{"line":167,"column":1,"offset":5097},"end":{"line":167,"column":15,"offset":5111},"indent":[]}},{"type":"inlineCode","value":"https://github.com/simplesteph/grpc-go-course","position":{"start":{"line":167,"column":15,"offset":5111},"end":{"line":167,"column":62,"offset":5158},"indent":[]}},{"type":"text","value":" and changing into ","position":{"start":{"line":167,"column":62,"offset":5158},"end":{"line":167,"column":81,"offset":5177},"indent":[]}},{"type":"inlineCode","value":"Greet/greetpb","position":{"start":{"line":167,"column":81,"offset":5177},"end":{"line":167,"column":96,"offset":5192},"indent":[]}},{"type":"text","value":", we can run ","position":{"start":{"line":167,"column":96,"offset":5192},"end":{"line":167,"column":109,"offset":5205},"indent":[]}},{"type":"inlineCode","value":"protoc greet.proto --go_out=plugins=grpc:.","position":{"start":{"line":167,"column":109,"offset":5205},"end":{"line":167,"column":153,"offset":5249},"indent":[]}},{"type":"text","value":" to test the code generation.","position":{"start":{"line":167,"column":153,"offset":5249},"end":{"line":167,"column":182,"offset":5278},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":5097},"end":{"line":167,"column":182,"offset":5278},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Running ","position":{"start":{"line":169,"column":3,"offset":5282},"end":{"line":169,"column":11,"offset":5290},"indent":[]}},{"type":"inlineCode","value":"protoc greet/greetpb/greet.proto --go_out=plugins=grpc:.","position":{"start":{"line":169,"column":11,"offset":5290},"end":{"line":169,"column":69,"offset":5348},"indent":[]}},{"type":"text","value":" will output the file to ","position":{"start":{"line":169,"column":69,"offset":5348},"end":{"line":169,"column":94,"offset":5373},"indent":[]}},{"type":"inlineCode","value":"greet/greetpb/greet.pb.go","position":{"start":{"line":169,"column":94,"offset":5373},"end":{"line":169,"column":121,"offset":5400},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":169,"column":121,"offset":5400},"end":{"line":169,"column":122,"offset":5401},"indent":[]}}],"position":{"start":{"line":169,"column":3,"offset":5282},"end":{"line":169,"column":122,"offset":5401},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":5280},"end":{"line":169,"column":122,"offset":5401},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"A Hello Service","position":{"start":{"line":171,"column":5,"offset":5407},"end":{"line":171,"column":20,"offset":5422},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":5403},"end":{"line":171,"column":20,"offset":5422},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of installing the above, you can do it manually. Inside of ","position":{"start":{"line":173,"column":1,"offset":5424},"end":{"line":173,"column":68,"offset":5491},"indent":[]}},{"type":"inlineCode","value":"hello/hellopb/hello.proto","position":{"start":{"line":173,"column":68,"offset":5491},"end":{"line":173,"column":95,"offset":5518},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":173,"column":95,"offset":5518},"end":{"line":173,"column":96,"offset":5519},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":5424},"end":{"line":173,"column":96,"offset":5519},"indent":[]}},{"type":"code","lang":"proto","meta":null,"value":"syntax = \"proto3\";\n\npackage hello;\noption go_package = \"hello/hellopb\";\n\nservice HelloService {}","position":{"start":{"line":175,"column":1,"offset":5521},"end":{"line":182,"column":4,"offset":5630},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Run ","position":{"start":{"line":184,"column":1,"offset":5632},"end":{"line":184,"column":5,"offset":5636},"indent":[]}},{"type":"inlineCode","value":"protoc hello/hellopb/hello.proto --go_out=plugins=grpc:.","position":{"start":{"line":184,"column":5,"offset":5636},"end":{"line":184,"column":63,"offset":5694},"indent":[]}},{"type":"text","value":" to generate ","position":{"start":{"line":184,"column":63,"offset":5694},"end":{"line":184,"column":76,"offset":5707},"indent":[]}},{"type":"inlineCode","value":"hello/hellopb/hello.pb.go","position":{"start":{"line":184,"column":76,"offset":5707},"end":{"line":184,"column":103,"offset":5734},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":184,"column":103,"offset":5734},"end":{"line":184,"column":104,"offset":5735},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":5632},"end":{"line":184,"column":104,"offset":5735},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Server Boilerplate","position":{"start":{"line":186,"column":4,"offset":5740},"end":{"line":186,"column":22,"offset":5758},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":5737},"end":{"line":186,"column":22,"offset":5758},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This will show how to properly start & stop the Server on the defined ","position":{"start":{"line":188,"column":1,"offset":5760},"end":{"line":188,"column":71,"offset":5830},"indent":[]}},{"type":"inlineCode","value":"port","position":{"start":{"line":188,"column":71,"offset":5830},"end":{"line":188,"column":77,"offset":5836},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":188,"column":77,"offset":5836},"end":{"line":188,"column":78,"offset":5837},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":5760},"end":{"line":188,"column":78,"offset":5837},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"You may need to run ","position":{"start":{"line":190,"column":3,"offset":5841},"end":{"line":190,"column":23,"offset":5861},"indent":[]}},{"type":"inlineCode","value":"go mod init github.com/okeeffed/project-name","position":{"start":{"line":190,"column":23,"offset":5861},"end":{"line":190,"column":69,"offset":5907},"indent":[]}},{"type":"text","value":" at the root of the directory prior.","position":{"start":{"line":190,"column":69,"offset":5907},"end":{"line":190,"column":105,"offset":5943},"indent":[]}}],"position":{"start":{"line":190,"column":3,"offset":5841},"end":{"line":190,"column":105,"offset":5943},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":5839},"end":{"line":190,"column":105,"offset":5943},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/okeeffed/grpc-go-course/hello/hellopb\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype server struct{}\n\nfunc main() {\n\tfmt.Println(\"Hello world\")\n\t// :50051 is default gRPC port\n\tlis, err := net.Listen(\"tcp\", \"0.0.0.0:50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer()\n\thellopb.RegisterHelloServiceServer(s, &server{})\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}","position":{"start":{"line":192,"column":1,"offset":5945},"end":{"line":222,"column":4,"offset":6446},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Client Boilerplate","position":{"start":{"line":224,"column":4,"offset":6451},"end":{"line":224,"column":22,"offset":6469},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":6448},"end":{"line":224,"column":22,"offset":6469},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/okeeffed/grpc-go-course/hello/hellopb\"\n\t\"google.golang.org/grpc\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello from the client\")\n\t// WithInsecure for now as we don't have SSL certificates\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Could not connect: %v\", err)\n\t}\n\n\tdefer conn.Close()\n\n\tc := hellopb.NewHelloServiceClient(conn)\n\tfmt.Printf(\"Created client: %f\", c)\n}","position":{"start":{"line":226,"column":1,"offset":6471},"end":{"line":250,"column":4,"offset":6940},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now if we start the server and client in two different tabs we can see that we connect!","position":{"start":{"line":252,"column":1,"offset":6942},"end":{"line":252,"column":88,"offset":7029},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":6942},"end":{"line":252,"column":88,"offset":7029},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"# Tab 1\n> go run hello/hello_server/server.go\nHello world\n\n# Tab 2\n>  go run hello/hello_client/client.go\nHello from the client\nCreated client: &{%!f(*grpc.ClientConn=&{0xc0001beb00 0x10e0e70 localhost:50051 {passthrough  localhost:50051} localhost:50051 {<nil> <nil> [] [] <nil> <nil> {{1000000000 1.6 0.2 120000000000}} false false true 0 <nil>  {grpc-go/1.31.0 0x1470140 false [] <nil> <nil> {0 0 false} <nil> 0 0 32768 32768 0 <nil>} [] <nil> 0 false true false <nil> <nil> <nil> <nil> 0x1472400 [] true} 0xc0001aaf40 {<nil> <nil> 0x1470140 0 {passthrough  localhost:50051}} 0xc0002529f0 {{0 0} 0 0 0 0} 0xc0001b2900 0xc00018e6e0 map[0xc0001eb8c0:{}] {0 0 false} pick_first 0xc0001bec00 {<nil>} 0xc0001aaf20 0 0xc0001b6700 {0 0} <nil>})}%","position":{"start":{"line":254,"column":1,"offset":7031},"end":{"line":263,"column":4,"offset":7782},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Creating a Unary API call","position":{"start":{"line":265,"column":4,"offset":7787},"end":{"line":265,"column":29,"offset":7812},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":7784},"end":{"line":265,"column":29,"offset":7812},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We need to create a ","position":{"start":{"line":267,"column":1,"offset":7814},"end":{"line":267,"column":21,"offset":7834},"indent":[]}},{"type":"inlineCode","value":"Request","position":{"start":{"line":267,"column":21,"offset":7834},"end":{"line":267,"column":30,"offset":7843},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":267,"column":30,"offset":7843},"end":{"line":267,"column":35,"offset":7848},"indent":[]}},{"type":"inlineCode","value":"Response","position":{"start":{"line":267,"column":35,"offset":7848},"end":{"line":267,"column":45,"offset":7858},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":267,"column":45,"offset":7858},"end":{"line":267,"column":46,"offset":7859},"indent":[]}}],"position":{"start":{"line":267,"column":1,"offset":7814},"end":{"line":267,"column":46,"offset":7859},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We start by writing the definition - here I will do one for \"Hello\".","position":{"start":{"line":269,"column":1,"offset":7861},"end":{"line":269,"column":69,"offset":7929},"indent":[]}}],"position":{"start":{"line":269,"column":1,"offset":7861},"end":{"line":269,"column":69,"offset":7929},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We update our ","position":{"start":{"line":271,"column":1,"offset":7931},"end":{"line":271,"column":15,"offset":7945},"indent":[]}},{"type":"inlineCode","value":"Hello","position":{"start":{"line":271,"column":15,"offset":7945},"end":{"line":271,"column":22,"offset":7952},"indent":[]}},{"type":"text","value":" Protobuffer to define ","position":{"start":{"line":271,"column":22,"offset":7952},"end":{"line":271,"column":45,"offset":7975},"indent":[]}},{"type":"inlineCode","value":"Greeting","position":{"start":{"line":271,"column":45,"offset":7975},"end":{"line":271,"column":55,"offset":7985},"indent":[]}},{"type":"text","value":" and a Request + Response:","position":{"start":{"line":271,"column":55,"offset":7985},"end":{"line":271,"column":81,"offset":8011},"indent":[]}}],"position":{"start":{"line":271,"column":1,"offset":7931},"end":{"line":271,"column":81,"offset":8011},"indent":[]}},{"type":"code","lang":"proto","meta":null,"value":"syntax = \"proto3\";\n\npackage hello;\noption go_package = \"hello/hellopb\";\n\nmessage Hello {\n  string first_name = 1;\n  string last_name = 2;\n}\n\nmessage HelloRequest { Hello hello = 1; }\n\nmessage HelloResponse { string result = 1; }\n\nservice HelloService {\n  // Unary\n  rpc Hello(HelloRequest) returns (HelloResponse) {}\n}","position":{"start":{"line":273,"column":1,"offset":8013},"end":{"line":292,"column":4,"offset":8344},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can now update the ","position":{"start":{"line":294,"column":1,"offset":8346},"end":{"line":294,"column":23,"offset":8368},"indent":[]}},{"type":"inlineCode","value":"server.go","position":{"start":{"line":294,"column":23,"offset":8368},"end":{"line":294,"column":34,"offset":8379},"indent":[]}},{"type":"text","value":" file to now handle our call from the Client:","position":{"start":{"line":294,"column":34,"offset":8379},"end":{"line":294,"column":79,"offset":8424},"indent":[]}}],"position":{"start":{"line":294,"column":1,"offset":8346},"end":{"line":294,"column":79,"offset":8424},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func (*server) Hello(ctx context.Context, req *hellopb.HelloRequest) (*hellopb.HelloResponse, error) {\n\t// from the auto generated info\n\tfirstName := req.GetHello().GetFirstName()\n\n\tresult := \"Hello \" + firstName\n\tres := &hellopb.HelloResponse{\n\t\tResult: result,\n\t}\n\n\treturn res, nil\n}","position":{"start":{"line":296,"column":1,"offset":8426},"end":{"line":308,"column":4,"offset":8721},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can now update the client to get the simple response example.","position":{"start":{"line":310,"column":1,"offset":8723},"end":{"line":310,"column":65,"offset":8787},"indent":[]}}],"position":{"start":{"line":310,"column":1,"offset":8723},"end":{"line":310,"column":65,"offset":8787},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Updating the client to get a response","position":{"start":{"line":312,"column":4,"offset":8792},"end":{"line":312,"column":41,"offset":8829},"indent":[]}}],"position":{"start":{"line":312,"column":1,"offset":8789},"end":{"line":312,"column":41,"offset":8829},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/okeeffed/grpc-go-course/hello/hellopb\"\n\t\"google.golang.org/grpc\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello from the client\")\n\t// WithInsecure for now as we don't have SSL certificates\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Could not connect: %v\", err)\n\t}\n\n\tdefer conn.Close()\n\n\tc := hellopb.NewHelloServiceClient(conn)\n\tdoUnary(c)\n}\n\nfunc doUnary(c hellopb.HelloServiceClient) {\n\tfmt.Println(\"Starting doUnary RPC\")\n\n\t// Create a request that takes the \"Hello\" struct\n\treq := &hellopb.HelloRequest{\n\t\tHello: &hellopb.Hello{\n\t\t\tFirstName: \"Dennis\",\n\t\t\tLastName:  \"O'Keeffe\",\n\t\t},\n\t}\n\tres, err := c.Hello(context.Background(), req)\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Error calling greet %v\", err)\n\t}\n\tlog.Printf(\"Response from Greet: %v\", res.Result)\n}","position":{"start":{"line":314,"column":1,"offset":8831},"end":{"line":357,"column":4,"offset":9701},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we now start the server and client, you will see the response.","position":{"start":{"line":359,"column":1,"offset":9703},"end":{"line":359,"column":66,"offset":9768},"indent":[]}}],"position":{"start":{"line":359,"column":1,"offset":9703},"end":{"line":359,"column":66,"offset":9768},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"# Tab 1\n> go run hello/hello_server/server.go\nHello world\n# Tab 2\n> go run hello/hello_client/client.go\nHello from the client\nStarting doUnary RPC\n2020/08/10 13:47:24 Response from Greet: Hello Dennis","position":{"start":{"line":361,"column":1,"offset":9770},"end":{"line":370,"column":4,"offset":9979},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Server Streaming","position":{"start":{"line":372,"column":4,"offset":9984},"end":{"line":372,"column":20,"offset":10000},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":9981},"end":{"line":372,"column":20,"offset":10000},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Take \"one\" request and return many responses.","position":{"start":{"line":374,"column":1,"offset":10002},"end":{"line":374,"column":46,"offset":10047},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":10002},"end":{"line":374,"column":46,"offset":10047},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the API, we need to add a receiver function for the server that takes a request and a stream:","position":{"start":{"line":376,"column":1,"offset":10049},"end":{"line":376,"column":98,"offset":10146},"indent":[]}}],"position":{"start":{"line":376,"column":1,"offset":10049},"end":{"line":376,"column":98,"offset":10146},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func (*server) HelloManyTimes(req *hellopb.HelloManyTimesRequest, stream hellopb.HelloService_HelloManyTimesServer) error {\n\tfmt.Printf(\"Greet many times function was invoked with %v\", req)\n\n\t// from the auto generated info\n\tfirstName := req.GetHello().GetFirstName()\n\n\tfor i := 0; i < 10; i++ {\n\t\tresult := \"Hello \" + firstName + \" number \" + strconv.Itoa(i)\n\t\tres := &hellopb.HelloManyTimesResponse{\n\t\t\tResult: result,\n\t\t}\n\t\tstream.Send(res)\n\t\ttime.Sleep(1000 * time.Millisecond)\n\t}\n\n\treturn nil\n}","position":{"start":{"line":378,"column":1,"offset":10148},"end":{"line":396,"column":4,"offset":10657},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For the client, it is fairly simple:","position":{"start":{"line":398,"column":1,"offset":10659},"end":{"line":398,"column":37,"offset":10695},"indent":[]}}],"position":{"start":{"line":398,"column":1,"offset":10659},"end":{"line":398,"column":37,"offset":10695},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\n\t\"github.com/okeeffed/grpc-go-course/hello/hellopb\"\n\t\"google.golang.org/grpc\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello from the client\")\n\t// WithInsecure for now as we don't have SSL certificates\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Could not connect: %v\", err)\n\t}\n\n\tdefer conn.Close()\n\n\tc := hellopb.NewHelloServiceClient(conn)\n\tdoServerStreaming(c)\n}\n\nfunc doServerStreaming(c hellopb.HelloServiceClient) {\n\tfmt.Println(\"Starting a Server Streaming RPC\")\n\n\t// Create a request that takes the \"Hello\" struct\n\treq := &hellopb.HelloManyTimesRequest{\n\t\tHello: &hellopb.Hello{\n\t\t\tFirstName: \"Dennis\",\n\t\t\tLastName:  \"O'Keeffe\",\n\t\t},\n\t}\n\n\t// returns client and err\n\tresStream, err := c.HelloManyTimes(context.Background(), req)\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Error calling greet %v\", err)\n\t}\n\tfor {\n\t\tmsg, err := resStream.Recv()\n\t\tif err == io.EOF {\n\t\t\t// reached the end\n\t\t\tbreak\n\t\t}\n\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error calling greet %v\", err)\n\t\t}\n\n\t\tlog.Printf(\"Response from GreetManyTimes: %v\", msg.GetResult())\n\t}\n}","position":{"start":{"line":400,"column":1,"offset":10697},"end":{"line":458,"column":4,"offset":11837},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Client Streaming","position":{"start":{"line":460,"column":4,"offset":11842},"end":{"line":460,"column":20,"offset":11858},"indent":[]}}],"position":{"start":{"line":460,"column":1,"offset":11839},"end":{"line":460,"column":20,"offset":11858},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The updated Protobuffer:","position":{"start":{"line":462,"column":1,"offset":11860},"end":{"line":462,"column":25,"offset":11884},"indent":[]}}],"position":{"start":{"line":462,"column":1,"offset":11860},"end":{"line":462,"column":25,"offset":11884},"indent":[]}},{"type":"code","lang":"proto","meta":null,"value":"// ... rest omitted\n\n// Streaming Client\nmessage LongGreetRequest { Hello hello = 1; }\n\nmessage LongGreetResponse { string result = 1; }\n\nservice HelloService {\n  // ... rest omitted\n\n  // Streaming Client\n  rpc LongGreet(stream LongGreetRequest) returns (LongGreetResponse) {}\n}","position":{"start":{"line":464,"column":1,"offset":11886},"end":{"line":478,"column":4,"offset":12178},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Updating the API:","position":{"start":{"line":480,"column":1,"offset":12180},"end":{"line":480,"column":18,"offset":12197},"indent":[]}}],"position":{"start":{"line":480,"column":1,"offset":12180},"end":{"line":480,"column":18,"offset":12197},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// only take a stream this time\nfunc (*server) LongHello(stream hellopb.HelloService_LongHelloServer) error {\n\tfmt.Printf(\"LongHello func invoked with streaming req\")\n\tresult := \"Hello \"\n\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\t// we finished\n\t\t\treturn stream.SendAndClose(&hellopb.LongHelloResponse{\n\t\t\t\tResult: result,\n\t\t\t})\n\t\t}\n\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error while reading client stream: %v\", err)\n\t\t}\n\n\t\tfirstName := req.GetHello().GetFirstName()\n\t\tresult += \"Hello \" + firstName + \"! \"\n\t}\n}","position":{"start":{"line":482,"column":1,"offset":12199},"end":{"line":505,"column":4,"offset":12732},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As for the client:","position":{"start":{"line":507,"column":1,"offset":12734},"end":{"line":507,"column":19,"offset":12752},"indent":[]}}],"position":{"start":{"line":507,"column":1,"offset":12734},"end":{"line":507,"column":19,"offset":12752},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func doClientStreaming(c hellopb.HelloServiceClient) {\n\tstream, err := c.LongHello(context.Background())\n\n\trequests := []*hellopb.LongHelloRequest{\n\t\t&hellopb.LongHelloRequest{\n\t\t\tHello: &hellopb.Hello{\n\t\t\t\tFirstName: \"Dennis\",\n\t\t\t}\n\t\t},\n\t\t&hellopb.LongHelloRequest{\n\t\t\tHello: &hellopb.Hello{\n\t\t\t\tFirstName: \"Stacy\",\n\t\t\t}\n\t\t},\n\t\t&hellopb.LongHelloRequest{\n\t\t\tHello: &hellopb.Hello{\n\t\t\t\tFirstName: \"Tracy\",\n\t\t\t}\n\t\t},\n\t\t&hellopb.LongHelloRequest{\n\t\t\tHello: &hellopb.Hello{\n\t\t\t\tFirstName: \"Macy\",\n\t\t\t}\n\t\t}\n\t}\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Error calling hello %v\", err)\n\t}\n\n\t// iterate over slice and send message individually\n\tfor _, req := range requests {\n\t\tstream.Send(req)\n\t}\n\n\tstream.Send(*hellopb.HelloManyTimesRequest)\n}","position":{"start":{"line":509,"column":1,"offset":12754},"end":{"line":547,"column":4,"offset":13490},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"BiDi Streaming","position":{"start":{"line":549,"column":4,"offset":13495},"end":{"line":549,"column":18,"offset":13509},"indent":[]}}],"position":{"start":{"line":549,"column":1,"offset":13492},"end":{"line":549,"column":18,"offset":13509},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BiDi is new thanks to HTTP/2. It can be used for things such as chat, etc.","position":{"start":{"line":551,"column":1,"offset":13511},"end":{"line":551,"column":75,"offset":13585},"indent":[]}}],"position":{"start":{"line":551,"column":1,"offset":13511},"end":{"line":551,"column":75,"offset":13585},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can also use it for a long-running client where we want to stream back and forward.","position":{"start":{"line":553,"column":1,"offset":13587},"end":{"line":553,"column":87,"offset":13673},"indent":[]}}],"position":{"start":{"line":553,"column":1,"offset":13587},"end":{"line":553,"column":87,"offset":13673},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the Protocol Buffer:","position":{"start":{"line":555,"column":1,"offset":13675},"end":{"line":555,"column":25,"offset":13699},"indent":[]}}],"position":{"start":{"line":555,"column":1,"offset":13675},"end":{"line":555,"column":25,"offset":13699},"indent":[]}},{"type":"code","lang":"proto","meta":null,"value":"// BiDi\nmessage HelloEveryoneRequest { Hello hello = 1; }\n\nmessage HelloEveryoneResponse { Hello result = 1; }\n\nservice HelloService {\n  // ... rest omitted\n\n  // BiDi\n  rpc HelloEveryone(stream HelloEveryoneRequest)\n      returns (stream HelloEveryoneResponse) {}\n}","position":{"start":{"line":557,"column":1,"offset":13701},"end":{"line":570,"column":4,"offset":13980},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For server:","position":{"start":{"line":572,"column":1,"offset":13982},"end":{"line":572,"column":12,"offset":13993},"indent":[]}}],"position":{"start":{"line":572,"column":1,"offset":13982},"end":{"line":572,"column":12,"offset":13993},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func (*server) HelloEveryone(stream hellopb.HelloService_HelloEveryoneServer) error {\n\tfmt.Printf(\"HelloEveryone fn invoked w/ streaming req\\n\")\n\tresult := \"\"\n\tfor {\n\t\treq, err := stream.Recv()\n\n\t\tif err == io.EOF {\n\t\t\t// we finished\n\t\t\treturn stream.Send(&hellopb.HelloEveryoneResponse{\n\t\t\t\tResult: result,\n\t\t\t})\n\t\t}\n\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error reading client stream: %v\", err)\n\t\t\treturn err\n\t\t}\n\n\t\tfirstName := req.GetHello().GetFirstName()\n\t\tresult += \"Hello \" + firstName + \"! \"\n\t}\n}","position":{"start":{"line":574,"column":1,"offset":13995},"end":{"line":597,"column":4,"offset":14504},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For client:","position":{"start":{"line":599,"column":1,"offset":14506},"end":{"line":599,"column":12,"offset":14517},"indent":[]}}],"position":{"start":{"line":599,"column":1,"offset":14506},"end":{"line":599,"column":12,"offset":14517},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func doBiDiStreaming(c hellopb.HelloServiceClient) {\n\tfmt.Println(\"Starting to do BiDi Streaming RPC\")\n\n\t// we create a stream by invoking the client\n\tstream, err := c.HelloEveryone(context.Background())\n\tif err != nil {\n\t\tlog.Fatalf(\"Error while creating stream: %v\", err)\n\t\treturn\n\t}\n\n\trequests := []*hellopb.HelloEveryoneRequest{\n\t\t&hellopb.HelloEveryoneRequest{\n\t\t\tHello: &hellopb.Hello{\n\t\t\t\tFirstName: \"Dennis\",\n\t\t\t},\n\t\t},\n\t\t&hellopb.HelloEveryoneRequest{\n\t\t\tHello: &hellopb.Hello{\n\t\t\t\tFirstName: \"Stacy\",\n\t\t\t},\n\t\t},\n\t\t&hellopb.HelloEveryoneRequest{\n\t\t\tHello: &hellopb.Hello{\n\t\t\t\tFirstName: \"Tracy\",\n\t\t\t},\n\t\t},\n\t\t&hellopb.HelloEveryoneRequest{\n\t\t\tHello: &hellopb.Hello{\n\t\t\t\tFirstName: \"Macy\",\n\t\t\t},\n\t\t},\n\t}\n\n\twaitc := make(chan struct{})\n\t// we send a bunch of messages to the client\n\tgo func() {\n\t\t// func to send a bunch\n\t\tfor _, req := range requests {\n\t\t\tfmt.Printf(\"Sending message: %v\\n\", req)\n\t\t\tstream.Send(req)\n\t\t}\n\t\tstream.CloseSend()\n\t}()\n\n\t// we receive a bunch\n\tgo func() {\n\t\tfor {\n\t\t\tres, err := stream.Recv()\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"Error while receiving: %v\", err)\n\t\t\t}\n\n\t\t\tfmt.Printf(\"Received: %v\", res.GetResult())\n\t\t}\n\n\t\tclose(waitc)\n\t}()\n\n\t// block until everything is done\n\t<-waitc\n}","position":{"start":{"line":601,"column":1,"offset":14519},"end":{"line":667,"column":4,"offset":15788},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":670,"column":1,"offset":15791},"end":{"line":670,"column":31,"offset":15821},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":670,"column":31,"offset":15821}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"grpc-with-golang\"\n    }}>{`gRPC with Golang`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.udemy.com/course/grpc-golang/\"\n        }}>{`gRPC course Udemy`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://grpc.io/\"\n        }}>{`gRPC.io`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://imagekit.io/demo/http2-vs-http1\"\n        }}>{`HTTP2 vs HTTP1 image loading website`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/grpc/grpc-go\"\n        }}>{`gRPC-Go`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/golang/protobuf\"\n        }}>{`Go Protobuf`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://blog.coinbase.com/grpc-to-aws-lambda-is-it-possible-4b29a9171d7f\"\n        }}>{`gRPC with Lambda`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/twitchtv/twirp\"\n        }}>{`Twirp`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://rynop.com/2018/01/23/twirpl-twirp-go-framework-running-completely-serverless/\"\n        }}>{`Twirpl 2018 post`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"intro\"\n    }}>{`Intro`}</h2>\n    <p>{`gRPC is there to attempt to solve the difficulties of API design.`}</p>\n    <p>{`gRPC is an open-source framework developed by Google which is now part of CNCF.`}</p>\n    <p>{`At a high level, it allows you to define REQUEST and RESPONSE for RPCs and handles the rest.`}</p>\n    <h3 {...{\n      \"id\": \"benefits\"\n    }}>{`Benefits`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Fast + efficient`}</li>\n      <li parentName=\"ol\">{`Built on HTTP/2`}</li>\n      <li parentName=\"ol\">{`Low latenvy`}</li>\n      <li parentName=\"ol\">{`Supports streaming`}</li>\n      <li parentName=\"ol\">{`Language independent`}</li>\n      <li parentName=\"ol\">{`Easy to plug in with integrated auth, load balancing, logging and monitoring`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"remote-procedural-call\"\n    }}>{`Remote Procedural Call`}</h2>\n    <p>{`In the CLIENT code, it looks like you're just callng a function on the SERVER.`}</p>\n    <p>{`With gRPC, it is implemented cleanly and solves a lot of problems.`}</p>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting started`}</h2>\n    <p>{`At the core of gRPC, you need to define the messages and services using `}<inlineCode parentName=\"p\">{`Protocol Buffers`}</inlineCode>{`.`}</p>\n    <p>{`The rest of the gRPC code will be generated for you and you'll have to provide and implementation for it.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`One `}<inlineCode parentName=\"p\">{`.proto`}</inlineCode>{` file can be used for over 12 different languages.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"example-proto-file\"\n    }}>{`Example proto file`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-proto\"\n      }}>{`syntax = 'proto3';\n\nmessage Greeting {\n  string first_name = 1;\n}\n\nmessage GreetRequest {\n  Greeting greeting = 1;\n}\n\nmessage Greeting {\n  string result = 1;\n}\n\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {};\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"why-protocol-buffers\"\n    }}>{`Why Protocol Buffers?`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Language agnostic.`}</li>\n      <li parentName=\"ul\">{`Code can be generated for pretty much any language.`}</li>\n      <li parentName=\"ul\">{`Data is binary and efficiently serialized (small payloads).`}</li>\n      <li parentName=\"ul\">{`Very convenient for transporting a lot of data.`}</li>\n      <li parentName=\"ul\">{`Protocol Buffers allows for easy API evolution using rules.`}</li>\n      <li parentName=\"ul\">{`Easy to write messag definition.`}</li>\n      <li parentName=\"ul\">{`Definition of API independent from implementation.`}</li>\n      <li parentName=\"ul\">{`A hug amount of code can be generated, in any language, from a simple `}<inlineCode parentName=\"li\">{`.proto`}</inlineCode>{` file.`}</li>\n      <li parentName=\"ul\">{`Payload is binary, therefore very efficient to send/receive on a network and serialize/de-serialize on a CPU.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"protocol-buffers--interoperability\"\n    }}>{`Protocol Buffers & Interoperability`}</h3>\n    <p>{`One benefit Protobuf is used the size of the messsage and savings through network benefit. A JSON comparison of an object for \"person\" vs a Protobuf shows a 55 byte vs 20 byte difference, event with small messages.`}</p>\n    <p>{`Parsing Protocol Buggers (binary format) means faster and more efficient communication. This has added benefit for mobile devices with slower CPUs.`}</p>\n    <h3 {...{\n      \"id\": \"grpc-languages\"\n    }}>{`gRPC languages`}</h3>\n    <p>{`Java, Go and C have native, pure bindings. The rest rely on GRPC-C.`}</p>\n    <h2 {...{\n      \"id\": \"http2-vs-http1\"\n    }}>{`HTTP/2 vs HTTP/1`}</h2>\n    <h3 {...{\n      \"id\": \"http1\"\n    }}>{`HTTP/1`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Released in 1997.`}</li>\n      <li parentName=\"ul\">{`Opens a new TCP connection for each request.`}</li>\n      <li parentName=\"ul\">{`Does not compress headers (which are plaintext).`}</li>\n      <li parentName=\"ul\">{`Only works with Req/Res mechanism (no server push).`}</li>\n      <li parentName=\"ul\">{`Original composed of GET and POST.`}</li>\n      <li parentName=\"ul\">{`80 assets for load will request headers sent for every request. 80 assets = 80 TCP connections. Inefficient for latency and increases network packet size.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"http2\"\n    }}>{`HTTP/2`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`2015 release but battle tested by Google.`}</li>\n      <li parentName=\"ul\">{`Supports multiplexing (parallel messages pushed).`}</li>\n      <li parentName=\"ul\">{`Supports server push (multiple messages for one client request).`}</li>\n      <li parentName=\"ul\">{`Supports header compression.`}</li>\n      <li parentName=\"ul\">{`HTTP/2 is binary. Any binary protocol is a great match.`}</li>\n      <li parentName=\"ul\">{`HTTP/2 is secure (SSL not required by recommended by default).`}</li>\n      <li parentName=\"ul\">{`\"Less chatter\". Less bandwidth, reduced latency, increased security.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`gRPC only uses HTTP/2.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"4-types-of-api-in-grpc\"\n    }}>{`4 Types of API in gRPC`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Unary`}</li>\n      <li parentName=\"ol\">{`Server streaming`}</li>\n      <li parentName=\"ol\">{`Client streaming`}</li>\n      <li parentName=\"ol\">{`Bi-directional streaming`}</li>\n    </ol>\n    <p>{`The following shows how easy it is to define the streaming contracts:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-proto\",\n        \"metastring\": \"vs\",\n        \"vs\": true\n      }}>{`service GreetService {\n  // Unary\n  rpc Greet(GreetRequest) returns (GreetResponse) {};\n\n  // Streaming Server\n  rpc GreetManyTimes(GreetManyTimesRequest) returns (stream GreetManyTimesResponse) {};\n\n  // Streaming Client\n  rpc LongGreet(stream LongGreetRequest) returns (LongGreetResponse) {};\n\n  // Bidirectional Streaming\n  rpc GreetEveryone(stream GreetEveryoneRequest) returns (stream GreetEveryoneResponse) {};\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"grpc-scalability\"\n    }}>{`gRPC Scalability`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Async by default (ie non-blocking).`}</li>\n      <li parentName=\"ul\">{`Can serve millions of reqs in parallel.`}</li>\n      <li parentName=\"ul\">{`gRPC clients can be async or sync. Client decides on modal best for performance needs.`}</li>\n      <li parentName=\"ul\">{`gRPC Clients can perform clientside load balancing.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Google have 10 billion gRPC reqs per second internally.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"grpc-security\"\n    }}>{`gRPC Security`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Strongly advocats for SSL in API.`}</li>\n      <li parentName=\"ul\">{`gRPC has security as a first class citizen.`}</li>\n      <li parentName=\"ul\">{`ach language will provide an API to load gRPC with required certificates and provide encyption out-of-the-box.`}</li>\n      <li parentName=\"ul\">{`Additionally using Intercepts, can provide auth.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"getting-started-with-grpc-go\"\n    }}>{`Getting Started with gRPC Go`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`go get -u google.golang.org/grpc\ngo get -u google.golang.org/protobuf\n`}</code></pre>\n    <p>{`After cloning `}<inlineCode parentName=\"p\">{`https://github.com/simplesteph/grpc-go-course`}</inlineCode>{` and changing into `}<inlineCode parentName=\"p\">{`Greet/greetpb`}</inlineCode>{`, we can run `}<inlineCode parentName=\"p\">{`protoc greet.proto --go_out=plugins=grpc:.`}</inlineCode>{` to test the code generation.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Running `}<inlineCode parentName=\"p\">{`protoc greet/greetpb/greet.proto --go_out=plugins=grpc:.`}</inlineCode>{` will output the file to `}<inlineCode parentName=\"p\">{`greet/greetpb/greet.pb.go`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"a-hello-service\"\n    }}>{`A Hello Service`}</h3>\n    <p>{`Instead of installing the above, you can do it manually. Inside of `}<inlineCode parentName=\"p\">{`hello/hellopb/hello.proto`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-proto\"\n      }}>{`syntax = \"proto3\";\n\npackage hello;\noption go_package = \"hello/hellopb\";\n\nservice HelloService {}\n`}</code></pre>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`protoc hello/hellopb/hello.proto --go_out=plugins=grpc:.`}</inlineCode>{` to generate `}<inlineCode parentName=\"p\">{`hello/hellopb/hello.pb.go`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"server-boilerplate\"\n    }}>{`Server Boilerplate`}</h2>\n    <p>{`This will show how to properly start & stop the Server on the defined `}<inlineCode parentName=\"p\">{`port`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You may need to run `}<inlineCode parentName=\"p\">{`go mod init github.com/okeeffed/project-name`}</inlineCode>{` at the root of the directory prior.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net\"\n\n    \"github.com/okeeffed/grpc-go-course/hello/hellopb\"\n\n    \"google.golang.org/grpc\"\n)\n\ntype server struct{}\n\nfunc main() {\n    fmt.Println(\"Hello world\")\n    // :50051 is default gRPC port\n    lis, err := net.Listen(\"tcp\", \"0.0.0.0:50051\")\n    if err != nil {\n        log.Fatalf(\"Failed to listen: %v\", err)\n    }\n\n    s := grpc.NewServer()\n    hellopb.RegisterHelloServiceServer(s, &server{})\n\n    if err := s.Serve(lis); err != nil {\n        log.Fatalf(\"Failed to serve: %v\", err)\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"client-boilerplate\"\n    }}>{`Client Boilerplate`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"log\"\n\n    \"github.com/okeeffed/grpc-go-course/hello/hellopb\"\n    \"google.golang.org/grpc\"\n)\n\nfunc main() {\n    fmt.Println(\"Hello from the client\")\n    // WithInsecure for now as we don't have SSL certificates\n    conn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n    if err != nil {\n        log.Fatalf(\"Could not connect: %v\", err)\n    }\n\n    defer conn.Close()\n\n    c := hellopb.NewHelloServiceClient(conn)\n    fmt.Printf(\"Created client: %f\", c)\n}\n`}</code></pre>\n    <p>{`Now if we start the server and client in two different tabs we can see that we connect!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`# Tab 1\n> go run hello/hello_server/server.go\nHello world\n\n# Tab 2\n>  go run hello/hello_client/client.go\nHello from the client\nCreated client: &{%!f(*grpc.ClientConn=&{0xc0001beb00 0x10e0e70 localhost:50051 {passthrough  localhost:50051} localhost:50051 {<nil> <nil> [] [] <nil> <nil> {{1000000000 1.6 0.2 120000000000}} false false true 0 <nil>  {grpc-go/1.31.0 0x1470140 false [] <nil> <nil> {0 0 false} <nil> 0 0 32768 32768 0 <nil>} [] <nil> 0 false true false <nil> <nil> <nil> <nil> 0x1472400 [] true} 0xc0001aaf40 {<nil> <nil> 0x1470140 0 {passthrough  localhost:50051}} 0xc0002529f0 {{0 0} 0 0 0 0} 0xc0001b2900 0xc00018e6e0 map[0xc0001eb8c0:{}] {0 0 false} pick_first 0xc0001bec00 {<nil>} 0xc0001aaf20 0 0xc0001b6700 {0 0} <nil>})}%\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-a-unary-api-call\"\n    }}>{`Creating a Unary API call`}</h2>\n    <p>{`We need to create a `}<inlineCode parentName=\"p\">{`Request`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Response`}</inlineCode>{`.`}</p>\n    <p>{`We start by writing the definition - here I will do one for \"Hello\".`}</p>\n    <p>{`We update our `}<inlineCode parentName=\"p\">{`Hello`}</inlineCode>{` Protobuffer to define `}<inlineCode parentName=\"p\">{`Greeting`}</inlineCode>{` and a Request + Response:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-proto\"\n      }}>{`syntax = \"proto3\";\n\npackage hello;\noption go_package = \"hello/hellopb\";\n\nmessage Hello {\n  string first_name = 1;\n  string last_name = 2;\n}\n\nmessage HelloRequest { Hello hello = 1; }\n\nmessage HelloResponse { string result = 1; }\n\nservice HelloService {\n  // Unary\n  rpc Hello(HelloRequest) returns (HelloResponse) {}\n}\n`}</code></pre>\n    <p>{`We can now update the `}<inlineCode parentName=\"p\">{`server.go`}</inlineCode>{` file to now handle our call from the Client:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func (*server) Hello(ctx context.Context, req *hellopb.HelloRequest) (*hellopb.HelloResponse, error) {\n    // from the auto generated info\n    firstName := req.GetHello().GetFirstName()\n\n    result := \"Hello \" + firstName\n    res := &hellopb.HelloResponse{\n        Result: result,\n    }\n\n    return res, nil\n}\n`}</code></pre>\n    <p>{`We can now update the client to get the simple response example.`}</p>\n    <h2 {...{\n      \"id\": \"updating-the-client-to-get-a-response\"\n    }}>{`Updating the client to get a response`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"github.com/okeeffed/grpc-go-course/hello/hellopb\"\n    \"google.golang.org/grpc\"\n)\n\nfunc main() {\n    fmt.Println(\"Hello from the client\")\n    // WithInsecure for now as we don't have SSL certificates\n    conn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n    if err != nil {\n        log.Fatalf(\"Could not connect: %v\", err)\n    }\n\n    defer conn.Close()\n\n    c := hellopb.NewHelloServiceClient(conn)\n    doUnary(c)\n}\n\nfunc doUnary(c hellopb.HelloServiceClient) {\n    fmt.Println(\"Starting doUnary RPC\")\n\n    // Create a request that takes the \"Hello\" struct\n    req := &hellopb.HelloRequest{\n        Hello: &hellopb.Hello{\n            FirstName: \"Dennis\",\n            LastName:  \"O'Keeffe\",\n        },\n    }\n    res, err := c.Hello(context.Background(), req)\n\n    if err != nil {\n        log.Fatalf(\"Error calling greet %v\", err)\n    }\n    log.Printf(\"Response from Greet: %v\", res.Result)\n}\n`}</code></pre>\n    <p>{`If we now start the server and client, you will see the response.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`# Tab 1\n> go run hello/hello_server/server.go\nHello world\n# Tab 2\n> go run hello/hello_client/client.go\nHello from the client\nStarting doUnary RPC\n2020/08/10 13:47:24 Response from Greet: Hello Dennis\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"server-streaming\"\n    }}>{`Server Streaming`}</h2>\n    <p>{`Take \"one\" request and return many responses.`}</p>\n    <p>{`For the API, we need to add a receiver function for the server that takes a request and a stream:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func (*server) HelloManyTimes(req *hellopb.HelloManyTimesRequest, stream hellopb.HelloService_HelloManyTimesServer) error {\n    fmt.Printf(\"Greet many times function was invoked with %v\", req)\n\n    // from the auto generated info\n    firstName := req.GetHello().GetFirstName()\n\n    for i := 0; i < 10; i++ {\n        result := \"Hello \" + firstName + \" number \" + strconv.Itoa(i)\n        res := &hellopb.HelloManyTimesResponse{\n            Result: result,\n        }\n        stream.Send(res)\n        time.Sleep(1000 * time.Millisecond)\n    }\n\n    return nil\n}\n`}</code></pre>\n    <p>{`For the client, it is fairly simple:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"io\"\n    \"log\"\n\n    \"github.com/okeeffed/grpc-go-course/hello/hellopb\"\n    \"google.golang.org/grpc\"\n)\n\nfunc main() {\n    fmt.Println(\"Hello from the client\")\n    // WithInsecure for now as we don't have SSL certificates\n    conn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n    if err != nil {\n        log.Fatalf(\"Could not connect: %v\", err)\n    }\n\n    defer conn.Close()\n\n    c := hellopb.NewHelloServiceClient(conn)\n    doServerStreaming(c)\n}\n\nfunc doServerStreaming(c hellopb.HelloServiceClient) {\n    fmt.Println(\"Starting a Server Streaming RPC\")\n\n    // Create a request that takes the \"Hello\" struct\n    req := &hellopb.HelloManyTimesRequest{\n        Hello: &hellopb.Hello{\n            FirstName: \"Dennis\",\n            LastName:  \"O'Keeffe\",\n        },\n    }\n\n    // returns client and err\n    resStream, err := c.HelloManyTimes(context.Background(), req)\n\n    if err != nil {\n        log.Fatalf(\"Error calling greet %v\", err)\n    }\n    for {\n        msg, err := resStream.Recv()\n        if err == io.EOF {\n            // reached the end\n            break\n        }\n\n        if err != nil {\n            log.Fatalf(\"Error calling greet %v\", err)\n        }\n\n        log.Printf(\"Response from GreetManyTimes: %v\", msg.GetResult())\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"client-streaming\"\n    }}>{`Client Streaming`}</h2>\n    <p>{`The updated Protobuffer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-proto\"\n      }}>{`// ... rest omitted\n\n// Streaming Client\nmessage LongGreetRequest { Hello hello = 1; }\n\nmessage LongGreetResponse { string result = 1; }\n\nservice HelloService {\n  // ... rest omitted\n\n  // Streaming Client\n  rpc LongGreet(stream LongGreetRequest) returns (LongGreetResponse) {}\n}\n`}</code></pre>\n    <p>{`Updating the API:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// only take a stream this time\nfunc (*server) LongHello(stream hellopb.HelloService_LongHelloServer) error {\n    fmt.Printf(\"LongHello func invoked with streaming req\")\n    result := \"Hello \"\n\n    for {\n        req, err := stream.Recv()\n        if err == io.EOF {\n            // we finished\n            return stream.SendAndClose(&hellopb.LongHelloResponse{\n                Result: result,\n            })\n        }\n\n        if err != nil {\n            log.Fatalf(\"Error while reading client stream: %v\", err)\n        }\n\n        firstName := req.GetHello().GetFirstName()\n        result += \"Hello \" + firstName + \"! \"\n    }\n}\n`}</code></pre>\n    <p>{`As for the client:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func doClientStreaming(c hellopb.HelloServiceClient) {\n    stream, err := c.LongHello(context.Background())\n\n    requests := []*hellopb.LongHelloRequest{\n        &hellopb.LongHelloRequest{\n            Hello: &hellopb.Hello{\n                FirstName: \"Dennis\",\n            }\n        },\n        &hellopb.LongHelloRequest{\n            Hello: &hellopb.Hello{\n                FirstName: \"Stacy\",\n            }\n        },\n        &hellopb.LongHelloRequest{\n            Hello: &hellopb.Hello{\n                FirstName: \"Tracy\",\n            }\n        },\n        &hellopb.LongHelloRequest{\n            Hello: &hellopb.Hello{\n                FirstName: \"Macy\",\n            }\n        }\n    }\n\n    if err != nil {\n        log.Fatalf(\"Error calling hello %v\", err)\n    }\n\n    // iterate over slice and send message individually\n    for _, req := range requests {\n        stream.Send(req)\n    }\n\n    stream.Send(*hellopb.HelloManyTimesRequest)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"bidi-streaming\"\n    }}>{`BiDi Streaming`}</h2>\n    <p>{`BiDi is new thanks to HTTP/2. It can be used for things such as chat, etc.`}</p>\n    <p>{`We can also use it for a long-running client where we want to stream back and forward.`}</p>\n    <p>{`For the Protocol Buffer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-proto\"\n      }}>{`// BiDi\nmessage HelloEveryoneRequest { Hello hello = 1; }\n\nmessage HelloEveryoneResponse { Hello result = 1; }\n\nservice HelloService {\n  // ... rest omitted\n\n  // BiDi\n  rpc HelloEveryone(stream HelloEveryoneRequest)\n      returns (stream HelloEveryoneResponse) {}\n}\n`}</code></pre>\n    <p>{`For server:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func (*server) HelloEveryone(stream hellopb.HelloService_HelloEveryoneServer) error {\n    fmt.Printf(\"HelloEveryone fn invoked w/ streaming req\\\\n\")\n    result := \"\"\n    for {\n        req, err := stream.Recv()\n\n        if err == io.EOF {\n            // we finished\n            return stream.Send(&hellopb.HelloEveryoneResponse{\n                Result: result,\n            })\n        }\n\n        if err != nil {\n            log.Fatalf(\"Error reading client stream: %v\", err)\n            return err\n        }\n\n        firstName := req.GetHello().GetFirstName()\n        result += \"Hello \" + firstName + \"! \"\n    }\n}\n`}</code></pre>\n    <p>{`For client:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func doBiDiStreaming(c hellopb.HelloServiceClient) {\n    fmt.Println(\"Starting to do BiDi Streaming RPC\")\n\n    // we create a stream by invoking the client\n    stream, err := c.HelloEveryone(context.Background())\n    if err != nil {\n        log.Fatalf(\"Error while creating stream: %v\", err)\n        return\n    }\n\n    requests := []*hellopb.HelloEveryoneRequest{\n        &hellopb.HelloEveryoneRequest{\n            Hello: &hellopb.Hello{\n                FirstName: \"Dennis\",\n            },\n        },\n        &hellopb.HelloEveryoneRequest{\n            Hello: &hellopb.Hello{\n                FirstName: \"Stacy\",\n            },\n        },\n        &hellopb.HelloEveryoneRequest{\n            Hello: &hellopb.Hello{\n                FirstName: \"Tracy\",\n            },\n        },\n        &hellopb.HelloEveryoneRequest{\n            Hello: &hellopb.Hello{\n                FirstName: \"Macy\",\n            },\n        },\n    }\n\n    waitc := make(chan struct{})\n    // we send a bunch of messages to the client\n    go func() {\n        // func to send a bunch\n        for _, req := range requests {\n            fmt.Printf(\"Sending message: %v\\\\n\", req)\n            stream.Send(req)\n        }\n        stream.CloseSend()\n    }()\n\n    // we receive a bunch\n    go func() {\n        for {\n            res, err := stream.Recv()\n            if err == io.EOF {\n                break\n            }\n\n            if err != nil {\n                log.Fatalf(\"Error while receiving: %v\", err)\n            }\n\n            fmt.Printf(\"Received: %v\", res.GetResult())\n        }\n\n        close(waitc)\n    }()\n\n    // block until everything is done\n    <-waitc\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}