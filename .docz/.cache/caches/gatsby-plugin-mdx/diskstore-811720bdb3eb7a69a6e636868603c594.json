{"expireTime":9007200867335963000,"key":"gatsby-plugin-mdx-entire-payload-11275fc5d9d0a91a07aad948906de13e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Testing React Apps","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":21,"offset":187},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":21,"offset":187},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Simple Test with ReactDOM","position":{"start":{"line":10,"column":4,"offset":192},"end":{"line":10,"column":29,"offset":217},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":189},"end":{"line":10,"column":29,"offset":217},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"\"The more your tests resemble the way your software is used, the more\nconfidence they can give you.\" -\n","position":{"start":{"line":12,"column":3,"offset":221},"end":{"line":14,"column":3,"offset":328},"indent":[3,3]}},{"type":"link","title":null,"url":"https://twitter.com/kentcdodds/status/977018512689455106","children":[{"type":"text","value":"@kentcdodds","position":{"start":{"line":14,"column":4,"offset":329},"end":{"line":14,"column":15,"offset":340},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":328},"end":{"line":14,"column":74,"offset":399},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":221},"end":{"line":14,"column":74,"offset":399},"indent":[3,3]}}],"position":{"start":{"line":12,"column":1,"offset":219},"end":{"line":14,"column":74,"offset":399},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To just get a basic component logging to our terminal during a test, we can have:","position":{"start":{"line":16,"column":1,"offset":401},"end":{"line":16,"column":82,"offset":482},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":401},"end":{"line":16,"column":82,"offset":482},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  // 🐨 create a div to render your component to (💰 document.createElement)\n  const div = document.createElement('div');\n  // 🐨 append the div to document.body (💰 document.body.append)\n  document.body.append(div);\n  // 🐨 use ReactDOM.render to render the <Counter /> to the div\n  ReactDOM.render(<Counter />, div);\n  console.log(document.body.innerHTML);\n});","position":{"start":{"line":18,"column":1,"offset":484},"end":{"line":32,"column":4,"offset":1050},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To start validating messages from the div we created, we could do the following (for the example of the counter with a single text element):","position":{"start":{"line":34,"column":1,"offset":1052},"end":{"line":34,"column":141,"offset":1192},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1052},"end":{"line":34,"column":141,"offset":1192},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// simple test with ReactDOM\n// http://localhost:3000/counter\n\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  // 🐨 create a div to render your component to (💰 document.createElement)\n  const div = document.createElement('div');\n  // 🐨 append the div to document.body (💰 document.body.append)\n  document.body.append(div);\n  // 🐨 use ReactDOM.render to render the <Counter /> to the div\n  ReactDOM.render(<Counter />, div);\n\n  // 🐨 get a reference to the message div:\n  const message = div.firstChild.querySelector('div');\n  //\n  // 🐨 expect the message.textContent toBe 'Current count: 0'\n  expect(message.textContent).toBe('Current count: 0');\n});","position":{"start":{"line":36,"column":1,"offset":1194},"end":{"line":58,"column":4,"offset":2007},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To now test the clicking of the buttons, we can do the following:","position":{"start":{"line":60,"column":1,"offset":2009},"end":{"line":60,"column":66,"offset":2074},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2009},"end":{"line":60,"column":66,"offset":2074},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// simple test with ReactDOM\n// http://localhost:3000/counter\n\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  // 🐨 create a div to render your component to (💰 document.createElement)\n  const div = document.createElement('div');\n  // 🐨 append the div to document.body (💰 document.body.append)\n  document.body.append(div);\n  // 🐨 use ReactDOM.render to render the <Counter /> to the div\n  ReactDOM.render(<Counter />, div);\n  // 🐨 get a reference to the increment and decrement buttons:\n  const [decrement, increment] = div.querySelectorAll('button');\n\n  // 🐨 get a reference to the message div:\n  //   💰 div.firstChild.querySelector('div')\n  const message = div.firstChild.querySelector('div');\n  //\n  // 🐨 expect the message.textContent toBe 'Current count: 0'\n  expect(message.textContent).toBe('Current count: 0');\n  // 🐨 click the increment button (💰 increment.click())\n  increment.click();\n  // 🐨 assert the message.textContent\n  expect(message.textContent).toBe('Current count: 1');\n  // 🐨 click the decrement button (💰 decrement.click())\n  decrement.click();\n  // 🐨 assert the message.textContent\n  expect(message.textContent).toBe('Current count: 0');\n  //\n  // 🐨 cleanup by removing the div from the page (💰 div.remove())\n  // 🦉 If you don't cleanup, then it could impact other tests and/or cause a memory leak\n  div.remove();\n});","position":{"start":{"line":62,"column":1,"offset":2076},"end":{"line":99,"column":4,"offset":3591},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"But instead of ","position":{"start":{"line":101,"column":1,"offset":3593},"end":{"line":101,"column":16,"offset":3608},"indent":[]}},{"type":"inlineCode","value":"div.remove","position":{"start":{"line":101,"column":16,"offset":3608},"end":{"line":101,"column":28,"offset":3620},"indent":[]}},{"type":"text","value":", it is better for us to set a before hook. The reason being that if a test fails, it could cause subsequent failures at the clean up did not occur.","position":{"start":{"line":101,"column":28,"offset":3620},"end":{"line":101,"column":176,"offset":3768},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":3593},"end":{"line":101,"column":176,"offset":3768},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"beforeEach(() => (document.body.innerHTML = ''));","position":{"start":{"line":103,"column":1,"offset":3770},"end":{"line":105,"column":4,"offset":3829},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Use dispatchEvent","position":{"start":{"line":107,"column":5,"offset":3835},"end":{"line":107,"column":22,"offset":3852},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3831},"end":{"line":107,"column":22,"offset":3852},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To follow more closely with what happens when the user clicks in React, we change to use ","position":{"start":{"line":109,"column":1,"offset":3854},"end":{"line":109,"column":90,"offset":3943},"indent":[]}},{"type":"inlineCode","value":"dispatchEvent","position":{"start":{"line":109,"column":90,"offset":3943},"end":{"line":109,"column":105,"offset":3958},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":109,"column":105,"offset":3958},"end":{"line":109,"column":106,"offset":3959},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":3854},"end":{"line":109,"column":106,"offset":3959},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// simple test with ReactDOM\n// http://localhost:3000/counter\n\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport Counter from '../../components/counter';\n\nbeforeEach(() => (document.body.innerHTML = ''));\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  // 🐨 create a div to render your component to (💰 document.createElement)\n  const div = document.createElement('div');\n  // 🐨 append the div to document.body (💰 document.body.append)\n  document.body.append(div);\n  // 🐨 use ReactDOM.render to render the <Counter /> to the div\n  ReactDOM.render(<Counter />, div);\n  // 🐨 get a reference to the increment and decrement buttons:\n  const [decrement, increment] = div.querySelectorAll('button');\n\n  const incrementClickEvent = new MouseEvent('click', {\n    // required for event delgation to work (required by React)\n    bubbles: true,\n    cancelable: true,\n    button: 0,\n  });\n\n  const decrementClickEvent = new MouseEvent('click', {\n    // required for event delgation to work (required by React)\n    bubbles: true,\n    cancelable: true,\n    button: 0,\n  });\n\n  // 🐨 get a reference to the message div:\n  //   💰 div.firstChild.querySelector('div')\n  const message = div.firstChild.querySelector('div');\n  //\n  // 🐨 expect the message.textContent toBe 'Current count: 0'\n  expect(message.textContent).toBe('Current count: 0');\n  increment.dispatchEvent(incrementClickEvent);\n  // 🐨 assert the message.textContent\n  expect(message.textContent).toBe('Current count: 1');\n  // 🐨 click the decrement button (💰 decrement.click())\n  decrement.dispatchEvent(decrementClickEvent);\n  // 🐨 assert the message.textContent\n  expect(message.textContent).toBe('Current count: 0');\n  //\n  // 🐨 cleanup by removing the div from the page (💰 div.remove())\n  // 🦉 If you don't cleanup, then it could impact other tests and/or cause a memory leak\n  div.remove();\n});","position":{"start":{"line":111,"column":1,"offset":3961},"end":{"line":163,"column":4,"offset":5889},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Simple Test With React Testing Library","position":{"start":{"line":165,"column":4,"offset":5894},"end":{"line":165,"column":42,"offset":5932},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":5891},"end":{"line":165,"column":42,"offset":5932},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Liked the above example, but did not enjoy the boilerplate. Implementing ","position":{"start":{"line":167,"column":1,"offset":5934},"end":{"line":167,"column":74,"offset":6007},"indent":[]}},{"type":"inlineCode","value":"react-testing-library","position":{"start":{"line":167,"column":74,"offset":6007},"end":{"line":167,"column":97,"offset":6030},"indent":[]}},{"type":"text","value":" looks like so:","position":{"start":{"line":167,"column":97,"offset":6030},"end":{"line":167,"column":112,"offset":6045},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":5934},"end":{"line":167,"column":112,"offset":6045},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// simple test with React Testing Library\n// http://localhost:3000/counter\n\nimport * as React from 'react';\n// 🐨 import the `render` and `fireEvent` utilities from '@testing-library/react'\nimport { render, fireEvent } from '@testing-library/react';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  // 🐨 swap ReactDOM.render with React Testing Library's render\n  // Note that React Testing Library's render doesn't need you to pass a `div`\n  // so you only need to pass one argument. render returns an object with a\n  // bunch of utilities on it. For now, let's just grab `container` which is\n  // the div that React Testing Library creates for us.\n  const { container } = render(<Counter />);\n\n  // 🐨 instead of `div` here you'll want to use the `container` you get back\n  // from React Testing Library\n  const [decrement, increment] = container.querySelectorAll('button');\n  const message = container.firstChild.querySelector('div');\n\n  expect(message.textContent).toBe('Current count: 0');\n\n  // 🐨 replace the next two statements with `fireEvent.click(button)`\n  fireEvent.click(increment);\n  expect(message.textContent).toBe('Current count: 1');\n  fireEvent.click(decrement);\n  expect(message.textContent).toBe('Current count: 0');\n});","position":{"start":{"line":169,"column":1,"offset":6047},"end":{"line":199,"column":4,"offset":7380},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"One of the slight differences is that fireEvent is automatically wrapped in ReactTestUtils act() function. If you ever see an act warning, then that's absolutely something that you probably need to deal with, but you never need to wrap a call to fireEvent in act.\nThe only reason I'm mentioning that to you is because I see it all the time. If you ever come across an act warning, your solution is not to wrap the fireEvent call in act. The solution will be something else entirely.","position":{"start":{"line":201,"column":3,"offset":7384},"end":{"line":202,"column":221,"offset":7868},"indent":[3]}}],"position":{"start":{"line":201,"column":3,"offset":7384},"end":{"line":202,"column":221,"offset":7868},"indent":[3]}}],"position":{"start":{"line":201,"column":1,"offset":7382},"end":{"line":202,"column":221,"offset":7868},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Using jest-dom for better messages","position":{"start":{"line":204,"column":5,"offset":7874},"end":{"line":204,"column":39,"offset":7908},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":7870},"end":{"line":204,"column":39,"offset":7908},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can import ","position":{"start":{"line":206,"column":1,"offset":7910},"end":{"line":206,"column":15,"offset":7924},"indent":[]}},{"type":"inlineCode","value":"@testing-library/jest-dom","position":{"start":{"line":206,"column":15,"offset":7924},"end":{"line":206,"column":42,"offset":7951},"indent":[]}},{"type":"text","value":" into the file (or in a setup file) to extend our Jest assertions to include things such as ","position":{"start":{"line":206,"column":42,"offset":7951},"end":{"line":206,"column":134,"offset":8043},"indent":[]}},{"type":"inlineCode","value":".toHaveTextContent","position":{"start":{"line":206,"column":134,"offset":8043},"end":{"line":206,"column":154,"offset":8063},"indent":[]}},{"type":"text","value":" for better error messaging. Once done we can update our code to look like so:","position":{"start":{"line":206,"column":154,"offset":8063},"end":{"line":206,"column":232,"offset":8141},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":7910},"end":{"line":206,"column":232,"offset":8141},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// simple test with React Testing Library\n// http://localhost:3000/counter\n\nimport * as React from 'react';\n// 🐨 import the `render` and `fireEvent` utilities from '@testing-library/react'\nimport { render, fireEvent } from '@testing-library/react';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  // 🐨 swap ReactDOM.render with React Testing Library's render\n  // Note that React Testing Library's render doesn't need you to pass a `div`\n  // so you only need to pass one argument. render returns an object with a\n  // bunch of utilities on it. For now, let's just grab `container` which is\n  // the div that React Testing Library creates for us.\n  const { container } = render(<Counter />);\n\n  // 🐨 instead of `div` here you'll want to use the `container` you get back\n  // from React Testing Library\n  const [decrement, increment] = container.querySelectorAll('button');\n  const message = container.firstChild.querySelector('div');\n\n  expect(message).toHaveTextContent('Current count: 0');\n\n  // 🐨 replace the next two statements with `fireEvent.click(button)`\n  fireEvent.click(increment);\n  expect(message).toHaveTextContent('Current count: 1');\n  fireEvent.click(decrement);\n  expect(message).toHaveTextContent('Current count: 0');\n});","position":{"start":{"line":208,"column":1,"offset":8143},"end":{"line":238,"column":4,"offset":9479},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Avoid Implementation Details","position":{"start":{"line":240,"column":4,"offset":9484},"end":{"line":240,"column":32,"offset":9512},"indent":[]}}],"position":{"start":{"line":240,"column":1,"offset":9481},"end":{"line":240,"column":32,"offset":9512},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The implementation of your abstractions does not matter to the users of your abstraction and if you want to have confidence that it continues to work through refactors then ","position":{"start":{"line":242,"column":3,"offset":9516},"end":{"line":242,"column":176,"offset":9689},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"neither should your tests.","position":{"start":{"line":242,"column":178,"offset":9691},"end":{"line":242,"column":204,"offset":9717},"indent":[]}}],"position":{"start":{"line":242,"column":176,"offset":9689},"end":{"line":242,"column":206,"offset":9719},"indent":[]}}],"position":{"start":{"line":242,"column":3,"offset":9516},"end":{"line":242,"column":206,"offset":9719},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":9514},"end":{"line":242,"column":206,"offset":9719},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's a React example of this:","position":{"start":{"line":244,"column":1,"offset":9721},"end":{"line":244,"column":32,"offset":9752},"indent":[]}}],"position":{"start":{"line":244,"column":1,"offset":9721},"end":{"line":244,"column":32,"offset":9752},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function Counter() {\n  const [count, setCount] = React.useState(0);\n  const increment = () => setCount(c => c + 1);\n  return <button onClick={increment}>{count}</button>;\n}","position":{"start":{"line":246,"column":1,"offset":9754},"end":{"line":252,"column":4,"offset":9944},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here's one way you might access that ","position":{"start":{"line":254,"column":1,"offset":9946},"end":{"line":254,"column":38,"offset":9983},"indent":[]}},{"type":"inlineCode","value":"button","position":{"start":{"line":254,"column":38,"offset":9983},"end":{"line":254,"column":46,"offset":9991},"indent":[]}},{"type":"text","value":" to click and assert on it:","position":{"start":{"line":254,"column":46,"offset":9991},"end":{"line":254,"column":73,"offset":10018},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":9946},"end":{"line":254,"column":73,"offset":10018},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const { container } = render(<Counter />);\ncontainer.firstChild; // <-- that's the button","position":{"start":{"line":256,"column":1,"offset":10020},"end":{"line":259,"column":4,"offset":10127},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"However, what if we changed it a bit:","position":{"start":{"line":261,"column":1,"offset":10129},"end":{"line":261,"column":38,"offset":10166},"indent":[]}}],"position":{"start":{"line":261,"column":1,"offset":10129},"end":{"line":261,"column":38,"offset":10166},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function Counter() {\n  const [count, setCount] = React.useState(0);\n  const increment = () => setCount(c => c + 1);\n  return (\n    <span>\n      <button onClick={increment}>{count}</button>\n    </span>\n  );\n}","position":{"start":{"line":263,"column":1,"offset":10168},"end":{"line":273,"column":4,"offset":10393},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Our tests would break!","position":{"start":{"line":275,"column":1,"offset":10395},"end":{"line":275,"column":23,"offset":10417},"indent":[]}}],"position":{"start":{"line":275,"column":1,"offset":10395},"end":{"line":275,"column":23,"offset":10417},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The only difference between these implementations is one wraps the button in a\n","position":{"start":{"line":277,"column":1,"offset":10419},"end":{"line":278,"column":1,"offset":10498},"indent":[1]}},{"type":"inlineCode","value":"span","position":{"start":{"line":278,"column":1,"offset":10498},"end":{"line":278,"column":7,"offset":10504},"indent":[]}},{"type":"text","value":" and the other does not. The user does not observe or care about this\ndifference, so we should write our tests in a way that passes in either case.","position":{"start":{"line":278,"column":7,"offset":10504},"end":{"line":279,"column":78,"offset":10651},"indent":[1]}}],"position":{"start":{"line":277,"column":1,"offset":10419},"end":{"line":279,"column":78,"offset":10651},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So here's a better way to search for that button in our test that's\nimplementation detail free and refactor friendly:","position":{"start":{"line":281,"column":1,"offset":10653},"end":{"line":282,"column":50,"offset":10770},"indent":[1]}}],"position":{"start":{"line":281,"column":1,"offset":10653},"end":{"line":282,"column":50,"offset":10770},"indent":[1]}},{"type":"code","lang":"javascript","meta":null,"value":"render(<Counter />);\nscreen.getByText('0'); // <-- that's the button\n// or (even better) you can do this:\nscreen.getByRole('button', { name: '0' }); // <-- that's the button","position":{"start":{"line":284,"column":1,"offset":10772},"end":{"line":289,"column":4,"offset":10963},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the example, we did the following change:","position":{"start":{"line":291,"column":1,"offset":10965},"end":{"line":291,"column":45,"offset":11009},"indent":[]}}],"position":{"start":{"line":291,"column":1,"offset":10965},"end":{"line":291,"column":45,"offset":11009},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// Avoid implementation details\n// INITIAL CODE\n\nimport * as React from 'react';\n// 🐨 add `screen` to the import here:\nimport { render, fireEvent } from '@testing-library/react';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  const { container } = render(<Counter />);\n  // 🐨 replace these with screen queries\n  // 💰 you can use `getByText` for each of these (`getByRole` can work for the button too)\n  const [decrement, increment] = container.querySelectorAll('button');\n  const message = container.firstChild.querySelector('div');\n\n  expect(message).toHaveTextContent('Current count: 0');\n  fireEvent.click(increment);\n  expect(message).toHaveTextContent('Current count: 1');\n  fireEvent.click(decrement);\n  expect(message).toHaveTextContent('Current count: 0');\n});\n\n// Avoid implementation details\n// FIRST CHANGE\n\nimport * as React from 'react';\n// 🐨 add `screen` to the import here:\nimport { render, fireEvent, screen } from '@testing-library/react';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  render(<Counter />);\n  // 🐨 replace these with screen queries\n  const decrement = screen.getByText('Decrement');\n  const increment = screen.getByText('Increment');\n  const message = screen.getByText('Current count: 0');\n\n  expect(message).toHaveTextContent('Current count: 0');\n  fireEvent.click(increment);\n  expect(message).toHaveTextContent('Current count: 1');\n  fireEvent.click(decrement);\n  expect(message).toHaveTextContent('Current count: 0');\n});\n\n// Avoid implementation details\n// FINAL CHANGE\n\nimport * as React from 'react';\n// 🐨 add `screen` to the import here:\nimport { render, fireEvent, screen } from '@testing-library/react';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  render(<Counter />);\n  // 🐨 replace these with screen queries\n  const decrement = screen.getByRole('button', { text: /decrement/i });\n  const increment = screen.getByRole('button', { text: /increment/i });\n  const message = screen.getByText(/current count/i);\n\n  expect(message).toHaveTextContent('Current count: 0');\n  fireEvent.click(increment);\n  expect(message).toHaveTextContent('Current count: 1');\n  fireEvent.click(decrement);\n  expect(message).toHaveTextContent('Current count: 0');\n});","position":{"start":{"line":293,"column":1,"offset":11011},"end":{"line":359,"column":4,"offset":13467},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":361,"column":1,"offset":13469},"end":{"line":361,"column":5,"offset":13473},"indent":[]}},{"type":"inlineCode","value":"screen","position":{"start":{"line":361,"column":5,"offset":13473},"end":{"line":361,"column":13,"offset":13481},"indent":[]}},{"type":"text","value":" utility can be used to find computations based on attributes that can found using the ","position":{"start":{"line":361,"column":13,"offset":13481},"end":{"line":361,"column":100,"offset":13568},"indent":[]}},{"type":"inlineCode","value":"accessibility","position":{"start":{"line":361,"column":100,"offset":13568},"end":{"line":361,"column":115,"offset":13583},"indent":[]}},{"type":"text","value":" tab.","position":{"start":{"line":361,"column":115,"offset":13583},"end":{"line":361,"column":120,"offset":13588},"indent":[]}}],"position":{"start":{"line":361,"column":1,"offset":13469},"end":{"line":361,"column":120,"offset":13588},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There is information on priority for testing implementation details that can be found ","position":{"start":{"line":363,"column":1,"offset":13590},"end":{"line":363,"column":87,"offset":13676},"indent":[]}},{"type":"link","title":null,"url":"https://testing-library.com/docs/queries/about/","children":[{"type":"text","value":"here","position":{"start":{"line":363,"column":88,"offset":13677},"end":{"line":363,"column":92,"offset":13681},"indent":[]}}],"position":{"start":{"line":363,"column":87,"offset":13676},"end":{"line":363,"column":142,"offset":13731},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":363,"column":142,"offset":13731},"end":{"line":363,"column":143,"offset":13732},"indent":[]}}],"position":{"start":{"line":363,"column":1,"offset":13590},"end":{"line":363,"column":143,"offset":13732},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Browser events (handling more than just a click)","position":{"start":{"line":365,"column":5,"offset":13738},"end":{"line":365,"column":53,"offset":13786},"indent":[]}}],"position":{"start":{"line":365,"column":1,"offset":13734},"end":{"line":365,"column":53,"offset":13786},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the implementation detail is changed for the event that fires it (by is a subtle relation to a click), our tests will break. To be resilient to this (or to test similar interactions) then we can do the following:","position":{"start":{"line":367,"column":1,"offset":13788},"end":{"line":367,"column":216,"offset":14003},"indent":[]}}],"position":{"start":{"line":367,"column":1,"offset":13788},"end":{"line":367,"column":216,"offset":14003},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// Avoid implementation details\n// http://localhost:3000/counter\n\nimport * as React from 'react';\n// 🐨 add `screen` to the import here:\nimport { render, userEvent, screen } from '@testing-library/react';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  render(<Counter />);\n  // 🐨 replace these with screen queries\n  const decrement = screen.getByRole('button', { text: /decrement/i });\n  const increment = screen.getByRole('button', { text: /increment/i });\n  const message = screen.getByText(/current count/i);\n\n  expect(message).toHaveTextContent('Current count: 0');\n  userEvent.click(increment);\n  expect(message).toHaveTextContent('Current count: 1');\n  userEvent.click(decrement);\n  expect(message).toHaveTextContent('Current count: 0');\n});","position":{"start":{"line":369,"column":1,"offset":14005},"end":{"line":391,"column":4,"offset":14846},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All we need to change is ","position":{"start":{"line":393,"column":1,"offset":14848},"end":{"line":393,"column":26,"offset":14873},"indent":[]}},{"type":"inlineCode","value":"fireEvent","position":{"start":{"line":393,"column":26,"offset":14873},"end":{"line":393,"column":37,"offset":14884},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":393,"column":37,"offset":14884},"end":{"line":393,"column":41,"offset":14888},"indent":[]}},{"type":"inlineCode","value":"userEvent","position":{"start":{"line":393,"column":41,"offset":14888},"end":{"line":393,"column":52,"offset":14899},"indent":[]}},{"type":"text","value":". When running ","position":{"start":{"line":393,"column":52,"offset":14899},"end":{"line":393,"column":67,"offset":14914},"indent":[]}},{"type":"inlineCode","value":"click","position":{"start":{"line":393,"column":67,"offset":14914},"end":{"line":393,"column":74,"offset":14921},"indent":[]}},{"type":"text","value":" with a ","position":{"start":{"line":393,"column":74,"offset":14921},"end":{"line":393,"column":82,"offset":14929},"indent":[]}},{"type":"inlineCode","value":"userEvent","position":{"start":{"line":393,"column":82,"offset":14929},"end":{"line":393,"column":93,"offset":14940},"indent":[]}},{"type":"text","value":", it will fire all kinds of events for us to test these different scenarions that a user may make.","position":{"start":{"line":393,"column":93,"offset":14940},"end":{"line":393,"column":191,"offset":15038},"indent":[]}}],"position":{"start":{"line":393,"column":1,"offset":14848},"end":{"line":393,"column":191,"offset":15038},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Form Testing","position":{"start":{"line":395,"column":4,"offset":15043},"end":{"line":395,"column":16,"offset":15055},"indent":[]}}],"position":{"start":{"line":395,"column":1,"offset":15040},"end":{"line":395,"column":16,"offset":15055},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To test our form, we can first debug what is on the screen to render our the current HTML from the component that is rendered:","position":{"start":{"line":397,"column":1,"offset":15057},"end":{"line":397,"column":127,"offset":15183},"indent":[]}}],"position":{"start":{"line":397,"column":1,"offset":15057},"end":{"line":397,"column":127,"offset":15183},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// form testing\n// http://localhost:3000/login\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Login from '../../components/login';\n\ntest('submitting the form calls onSubmit with username and password', () => {\n  render(<Login />);\n  screen.debug();\n});","position":{"start":{"line":399,"column":1,"offset":15185},"end":{"line":412,"column":4,"offset":15550},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can assert that our form works as expected by updating the code to the following:","position":{"start":{"line":414,"column":1,"offset":15552},"end":{"line":414,"column":85,"offset":15636},"indent":[]}}],"position":{"start":{"line":414,"column":1,"offset":15552},"end":{"line":414,"column":85,"offset":15636},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// form testing\n// http://localhost:3000/login\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Login from '../../components/login';\n\ntest('submitting the form calls onSubmit with username and password', () => {\n  let submittedData;\n  const handleSubmit = data => (submittedData = data);\n  render(<Login onSubmit={handleSubmit} />);\n  const username = 'chucknorris';\n  const password = 'i need no password';\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  expect(submittedData).toEqual({\n    username,\n    password,\n  });\n});","position":{"start":{"line":416,"column":1,"offset":15638},"end":{"line":441,"column":4,"offset":16426},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Using a Jest Mock function","position":{"start":{"line":443,"column":5,"offset":16432},"end":{"line":443,"column":31,"offset":16458},"indent":[]}}],"position":{"start":{"line":443,"column":1,"offset":16428},"end":{"line":443,"column":31,"offset":16458},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is us listening and assert what the ","position":{"start":{"line":445,"column":1,"offset":16460},"end":{"line":445,"column":42,"offset":16501},"indent":[]}},{"type":"inlineCode","value":"onSubmit","position":{"start":{"line":445,"column":42,"offset":16501},"end":{"line":445,"column":52,"offset":16511},"indent":[]}},{"type":"text","value":" function call is passed and how many times it is fired:","position":{"start":{"line":445,"column":52,"offset":16511},"end":{"line":445,"column":108,"offset":16567},"indent":[]}}],"position":{"start":{"line":445,"column":1,"offset":16460},"end":{"line":445,"column":108,"offset":16567},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// form testing\n// 💯 use a jest mock function\n// http://localhost:3000/login\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Login from '../../components/login';\n\ntest('submitting the form calls onSubmit with username and password', () => {\n  const handleSubmit = jest.fn();\n  render(<Login onSubmit={handleSubmit} />);\n  const username = 'chucknorris';\n  const password = 'i need no password';\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  expect(handleSubmit).toHaveBeenCalledWith({\n    username,\n    password,\n  });\n  expect(handleSubmit).toHaveBeenCalledTimes(1);\n});","position":{"start":{"line":447,"column":1,"offset":16569},"end":{"line":473,"column":4,"offset":17407},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Generate test data","position":{"start":{"line":475,"column":5,"offset":17413},"end":{"line":475,"column":23,"offset":17431},"indent":[]}}],"position":{"start":{"line":475,"column":1,"offset":17409},"end":{"line":475,"column":23,"offset":17431},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"\"Something to keep in mind is that people are going to be reading this test in the future. They may not know the implementation of login and what decisions were made and what's important. Everything that they see in the test, they're going to assume it's important. They're going to assume that it's important that we render the login with an onSubmit prop.\"","position":{"start":{"line":477,"column":3,"offset":17435},"end":{"line":477,"column":361,"offset":17793},"indent":[]}}],"position":{"start":{"line":477,"column":3,"offset":17435},"end":{"line":477,"column":361,"offset":17793},"indent":[]}}],"position":{"start":{"line":477,"column":1,"offset":17433},"end":{"line":477,"column":361,"offset":17793},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can use Faker to help the user know that the implementation value is not important.","position":{"start":{"line":479,"column":1,"offset":17795},"end":{"line":479,"column":87,"offset":17881},"indent":[]}}],"position":{"start":{"line":479,"column":1,"offset":17795},"end":{"line":479,"column":87,"offset":17881},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// form testing\n// 💯 generate test data\n// http://localhost:3000/login\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport faker from 'faker';\nimport Login from '../../components/login';\n\nfunction buildLoginForm() {\n  return {\n    username: faker.internet.userName(),\n    password: faker.internet.password(),\n  };\n}\n\ntest('submitting the form calls onSubmit with username and password', () => {\n  const handleSubmit = jest.fn();\n  render(<Login onSubmit={handleSubmit} />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  expect(handleSubmit).toHaveBeenCalledWith({\n    username,\n    password,\n  });\n  expect(handleSubmit).toHaveBeenCalledTimes(1);\n});","position":{"start":{"line":481,"column":1,"offset":17883},"end":{"line":514,"column":4,"offset":18847},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Allow for overrides","position":{"start":{"line":516,"column":5,"offset":18853},"end":{"line":516,"column":24,"offset":18872},"indent":[]}}],"position":{"start":{"line":516,"column":1,"offset":18849},"end":{"line":516,"column":24,"offset":18872},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We just allow overrides so that a user can handle special cases.","position":{"start":{"line":518,"column":1,"offset":18874},"end":{"line":518,"column":65,"offset":18938},"indent":[]}}],"position":{"start":{"line":518,"column":1,"offset":18874},"end":{"line":518,"column":65,"offset":18938},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// form testing\n// 💯 allow for overrides\n// http://localhost:3000/login\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport faker from 'faker';\nimport Login from '../../components/login';\n\n// overrides is the important part\nfunction buildLoginForm(overrides) {\n  return {\n    username: faker.internet.userName(),\n    password: faker.internet.password(),\n    ...overrides,\n  };\n}\n\ntest('submitting the form calls onSubmit with username and password', () => {\n  const handleSubmit = jest.fn();\n  render(<Login onSubmit={handleSubmit} />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  expect(handleSubmit).toHaveBeenCalledWith({\n    username,\n    password,\n  });\n  expect(handleSubmit).toHaveBeenCalledTimes(1);\n});","position":{"start":{"line":520,"column":1,"offset":18940},"end":{"line":555,"column":4,"offset":19967},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Use Test Data Bot","position":{"start":{"line":557,"column":5,"offset":19973},"end":{"line":557,"column":22,"offset":19990},"indent":[]}}],"position":{"start":{"line":557,"column":1,"offset":19969},"end":{"line":557,"column":22,"offset":19990},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is using a test data bot utility ","position":{"start":{"line":559,"column":1,"offset":19992},"end":{"line":559,"column":39,"offset":20030},"indent":[]}},{"type":"inlineCode","value":"@jackfranklin/test-data-bot","position":{"start":{"line":559,"column":39,"offset":20030},"end":{"line":559,"column":68,"offset":20059},"indent":[]}},{"type":"text","value":" to help create test factories that can automatically be overriden.","position":{"start":{"line":559,"column":68,"offset":20059},"end":{"line":559,"column":135,"offset":20126},"indent":[]}}],"position":{"start":{"line":559,"column":1,"offset":19992},"end":{"line":559,"column":135,"offset":20126},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// form testing\n// 💯 use Test Data Bot\n// http://localhost:3000/login\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport Login from '../../components/login';\n\nconst buildLoginForm = build({\n  fields: {\n    username: fake(f => f.internet.userName()),\n    password: fake(f => f.internet.password()),\n  },\n});\n\ntest('submitting the form calls onSubmit with username and password', () => {\n  const handleSubmit = jest.fn();\n  render(<Login onSubmit={handleSubmit} />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  expect(handleSubmit).toHaveBeenCalledWith({\n    username,\n    password,\n  });\n  expect(handleSubmit).toHaveBeenCalledTimes(1);\n});","position":{"start":{"line":561,"column":1,"offset":20128},"end":{"line":594,"column":4,"offset":21143},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Mocking HTTP Requests","position":{"start":{"line":596,"column":4,"offset":21148},"end":{"line":596,"column":25,"offset":21169},"indent":[]}}],"position":{"start":{"line":596,"column":1,"offset":21145},"end":{"line":596,"column":25,"offset":21169},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We use ","position":{"start":{"line":598,"column":1,"offset":21171},"end":{"line":598,"column":8,"offset":21178},"indent":[]}},{"type":"inlineCode","value":"msw","position":{"start":{"line":598,"column":8,"offset":21178},"end":{"line":598,"column":13,"offset":21183},"indent":[]}},{"type":"text","value":" to intercept web requests.","position":{"start":{"line":598,"column":13,"offset":21183},"end":{"line":598,"column":40,"offset":21210},"indent":[]}}],"position":{"start":{"line":598,"column":1,"offset":21171},"end":{"line":598,"column":40,"offset":21210},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We setup the server like so:","position":{"start":{"line":600,"column":1,"offset":21212},"end":{"line":600,"column":29,"offset":21240},"indent":[]}}],"position":{"start":{"line":600,"column":1,"offset":21212},"end":{"line":600,"column":29,"offset":21240},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const server = setupServer(\n  rest.post(\n    'https://auth-provider.example.com/api/login',\n    async (req, res, ctx) => {\n      if (!req.body.password) {\n        return res(ctx.status(400), ctx.json({ message: 'password required' }));\n      }\n      if (!req.body.username) {\n        return res(ctx.status(400), ctx.json({ message: 'username required' }));\n      }\n      return res(ctx.json({ username: req.body.username }));\n    },\n  ),\n);\n\nbeforeAll(() => server.listen());\nafterAll(() => server.close());","position":{"start":{"line":602,"column":1,"offset":21242},"end":{"line":620,"column":4,"offset":21759},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The code provided can handle the route to intercept along with the return values.","position":{"start":{"line":622,"column":1,"offset":21761},"end":{"line":622,"column":82,"offset":21842},"indent":[]}}],"position":{"start":{"line":622,"column":1,"offset":21761},"end":{"line":622,"column":82,"offset":21842},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// mocking HTTP requests\n// http://localhost:3000/login-submission\n\nimport * as React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\nimport Login from '../../components/login-submission';\n\nconst buildLoginForm = build({\n  fields: {\n    username: fake(f => f.internet.userName()),\n    password: fake(f => f.internet.password()),\n  },\n});\n\nconst server = setupServer(\n  rest.post(\n    'https://auth-provider.example.com/api/login',\n    async (req, res, ctx) => {\n      if (!req.body.password) {\n        return res(ctx.status(400), ctx.json({ message: 'password required' }));\n      }\n      if (!req.body.username) {\n        return res(ctx.status(400), ctx.json({ message: 'username required' }));\n      }\n      return res(ctx.json({ username: req.body.username }));\n    },\n  ),\n);\n\nbeforeAll(() => server.listen());\nafterAll(() => server.close());\n\ntest(`logging in displays the user's username`, async () => {\n  render(<Login />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByText(username)).toBeInTheDocument();\n});","position":{"start":{"line":624,"column":1,"offset":21844},"end":{"line":677,"column":4,"offset":23409},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Mocked Responses","position":{"start":{"line":679,"column":5,"offset":23415},"end":{"line":679,"column":21,"offset":23431},"indent":[]}}],"position":{"start":{"line":679,"column":1,"offset":23411},"end":{"line":679,"column":21,"offset":23431},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Essentially here we are abstracting the handlers to another file.","position":{"start":{"line":681,"column":1,"offset":23433},"end":{"line":681,"column":66,"offset":23498},"indent":[]}}],"position":{"start":{"line":681,"column":1,"offset":23433},"end":{"line":681,"column":66,"offset":23498},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// test/server-handlers.js\nimport { rest } from 'msw';\n\nconst delay = process.env.NODE_ENV === 'test' ? 0 : 1500;\n\nconst handlers = [\n  rest.post(\n    'https://auth-provider.example.com/api/login',\n    async (req, res, ctx) => {\n      if (!req.body.password) {\n        return res(\n          ctx.delay(delay),\n          ctx.status(400),\n          ctx.json({ message: 'password required' }),\n        );\n      }\n      if (!req.body.username) {\n        return res(\n          ctx.delay(delay),\n          ctx.status(400),\n          ctx.json({ message: 'username required' }),\n        );\n      }\n      return res(ctx.delay(delay), ctx.json({ username: req.body.username }));\n    },\n  ),\n];\n\nexport { handlers };","position":{"start":{"line":683,"column":1,"offset":23500},"end":{"line":713,"column":4,"offset":24214},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"js","meta":null,"value":"// mocking HTTP requests\n// 💯 reuse server request handlers\n// http://localhost:3000/login-submission\n\nimport * as React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { setupServer } from 'msw/node';\nimport { handlers } from 'test/server-handlers';\nimport Login from '../../components/login-submission';\n\nconst buildLoginForm = build({\n  fields: {\n    username: fake(f => f.internet.userName()),\n    password: fake(f => f.internet.password()),\n  },\n});\n\nconst server = setupServer(...handlers);\n\nbeforeAll(() => server.listen());\nafterAll(() => server.close());\n\ntest(`logging in displays the user's username`, async () => {\n  render(<Login />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByText(username)).toBeInTheDocument();\n});","position":{"start":{"line":715,"column":1,"offset":24216},"end":{"line":756,"column":4,"offset":25438},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Testing the unhappy path","position":{"start":{"line":758,"column":5,"offset":25444},"end":{"line":758,"column":29,"offset":25468},"indent":[]}}],"position":{"start":{"line":758,"column":1,"offset":25440},"end":{"line":758,"column":29,"offset":25468},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// mocking HTTP requests\n// 💯 test the unhappy path\n// http://localhost:3000/login-submission\n\nimport * as React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { setupServer } from 'msw/node';\nimport { handlers } from 'test/server-handlers';\nimport Login from '../../components/login-submission';\n\nconst buildLoginForm = build({\n  fields: {\n    username: fake(f => f.internet.userName()),\n    password: fake(f => f.internet.password()),\n  },\n});\n\nconst server = setupServer(...handlers);\n\nbeforeAll(() => server.listen());\nafterAll(() => server.close());\n\ntest(`logging in displays the user's username`, async () => {\n  render(<Login />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByText(username)).toBeInTheDocument();\n});\n\ntest('omitting the password results in an error', async () => {\n  render(<Login />);\n  const { username } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  // don't type in the password\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByRole('alert')).toHaveTextContent('password required');\n});","position":{"start":{"line":760,"column":1,"offset":25470},"end":{"line":814,"column":4,"offset":27134},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Use inline snapshots","position":{"start":{"line":816,"column":4,"offset":27139},"end":{"line":816,"column":24,"offset":27159},"indent":[]}}],"position":{"start":{"line":816,"column":1,"offset":27136},"end":{"line":816,"column":24,"offset":27159},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It is not great to hardcode things such as \"error messages\" in case the error message ever changes.","position":{"start":{"line":818,"column":1,"offset":27161},"end":{"line":818,"column":100,"offset":27260},"indent":[]}}],"position":{"start":{"line":818,"column":1,"offset":27161},"end":{"line":818,"column":100,"offset":27260},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// mocking HTTP requests\n// 💯 use inline snapshots for error messages\n// http://localhost:3000/login-submission\n\nimport * as React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { setupServer } from 'msw/node';\nimport { handlers } from 'test/server-handlers';\nimport Login from '../../components/login-submission';\n\nconst buildLoginForm = build({\n  fields: {\n    username: fake(f => f.internet.userName()),\n    password: fake(f => f.internet.password()),\n  },\n});\n\nconst server = setupServer(...handlers);\n\nbeforeAll(() => server.listen());\nafterAll(() => server.close());\n\ntest(`logging in displays the user's username`, async () => {\n  render(<Login />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByText(username)).toBeInTheDocument();\n});\n\ntest('omitting the password results in an error', async () => {\n  render(<Login />);\n  const { username } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  // don't type in the password\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByRole('alert').textContent).toMatchInlineSnapshot(\n    `\"password required\"`,\n  );\n});","position":{"start":{"line":820,"column":1,"offset":27262},"end":{"line":876,"column":4,"offset":28971},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Using one-off server handlers","position":{"start":{"line":878,"column":5,"offset":28977},"end":{"line":878,"column":34,"offset":29006},"indent":[]}}],"position":{"start":{"line":878,"column":1,"offset":28973},"end":{"line":878,"column":34,"offset":29006},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is an ability to override the current handlers that have been implemented.","position":{"start":{"line":880,"column":1,"offset":29008},"end":{"line":880,"column":80,"offset":29087},"indent":[]}}],"position":{"start":{"line":880,"column":1,"offset":29008},"end":{"line":880,"column":80,"offset":29087},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// mocking HTTP requests\n// 💯 use one-off server handlers\n// http://localhost:3000/login-submission\n\nimport * as React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\nimport { handlers } from 'test/server-handlers';\nimport Login from '../../components/login-submission';\n\nconst buildLoginForm = build({\n  fields: {\n    username: fake(f => f.internet.userName()),\n    password: fake(f => f.internet.password()),\n  },\n});\n\nconst server = setupServer(...handlers);\n\nbeforeAll(() => server.listen());\nafterAll(() => server.close());\nafterEach(() => server.resetHandlers());\n\ntest(`logging in displays the user's username`, async () => {\n  render(<Login />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByText(username)).toBeInTheDocument();\n});\n\ntest('omitting the password results in an error', async () => {\n  render(<Login />);\n  const { username } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  // don't type in the password\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByRole('alert').textContent).toMatchInlineSnapshot(\n    `\"password required\"`,\n  );\n});\n\ntest('unknown server error displays the error message', async () => {\n  const testErrorMessage = 'Oh no, something bad happened';\n  server.use(\n    rest.post(\n      'https://auth-provider.example.com/api/login',\n      async (req, res, ctx) => {\n        return res(ctx.status(500), ctx.json({ message: testErrorMessage }));\n      },\n    ),\n  );\n  render(<Login />);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByRole('alert')).toHaveTextContent(testErrorMessage);\n});","position":{"start":{"line":882,"column":1,"offset":29089},"end":{"line":958,"column":4,"offset":31444},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Mocking Browser APIs and Modules","position":{"start":{"line":960,"column":4,"offset":31449},"end":{"line":960,"column":36,"offset":31481},"indent":[]}}],"position":{"start":{"line":960,"column":1,"offset":31446},"end":{"line":960,"column":36,"offset":31481},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Mocking HTTP requests is one thing, but sometimes you have entire Browser APIs\nor modules that you need to mock. Every time you create a fake version of what\nyour code actually uses, you're \"poking a hole in reality\" and you lose some\nconfidence as a result (which is why E2E tests are critical). Remember, we're\ndoing it and recognizing that we're trading confidence for some practicality or\nconvenience in our testing. (Read more about this in my blog post:\n","position":{"start":{"line":962,"column":3,"offset":31485},"end":{"line":968,"column":3,"offset":31957},"indent":[3,3,3,3,3,3]}},{"type":"link","title":null,"url":"https://kentcdodds.com/blog/the-merits-of-mocking","children":[{"type":"text","value":"The Merits of Mocking","position":{"start":{"line":968,"column":4,"offset":31958},"end":{"line":968,"column":25,"offset":31979},"indent":[]}}],"position":{"start":{"line":968,"column":3,"offset":31957},"end":{"line":968,"column":77,"offset":32031},"indent":[]}},{"type":"text","value":").\nTo learn more about what \"mocking\" even is, take a look at my blog post\n","position":{"start":{"line":968,"column":77,"offset":32031},"end":{"line":970,"column":3,"offset":32110},"indent":[3,3]}},{"type":"link","title":null,"url":"https://kentcdodds.com/blog/but-really-what-is-a-javascript-mock","children":[{"type":"text","value":"But really, what is a JavaScript mock?","position":{"start":{"line":970,"column":4,"offset":32111},"end":{"line":970,"column":42,"offset":32149},"indent":[]}}],"position":{"start":{"line":970,"column":3,"offset":32110},"end":{"line":970,"column":109,"offset":32216},"indent":[]}}],"position":{"start":{"line":962,"column":3,"offset":31485},"end":{"line":970,"column":109,"offset":32216},"indent":[3,3,3,3,3,3,3,3]}}],"position":{"start":{"line":962,"column":1,"offset":31483},"end":{"line":970,"column":109,"offset":32216},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"An example is when Kent needed to mock the browser ","position":{"start":{"line":972,"column":1,"offset":32218},"end":{"line":972,"column":52,"offset":32269},"indent":[]}},{"type":"inlineCode","value":"window.resizeTo","position":{"start":{"line":972,"column":52,"offset":32269},"end":{"line":972,"column":69,"offset":32286},"indent":[]}},{"type":"text","value":" and polyfill ","position":{"start":{"line":972,"column":69,"offset":32286},"end":{"line":972,"column":83,"offset":32300},"indent":[]}},{"type":"inlineCode","value":"window.matchMedia","position":{"start":{"line":972,"column":83,"offset":32300},"end":{"line":972,"column":102,"offset":32319},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":972,"column":102,"offset":32319},"end":{"line":972,"column":103,"offset":32320},"indent":[]}}],"position":{"start":{"line":972,"column":1,"offset":32218},"end":{"line":972,"column":103,"offset":32320},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import matchMediaPolyfill from 'mq-polyfill';\n\nbeforeAll(() => {\n  matchMediaPolyfill(window);\n  window.resizeTo = function resizeTo(width, height) {\n    Object.assign(this, {\n      innerWidth: width,\n      innerHeight: height,\n      outerWidth: width,\n      outerHeight: height,\n    }).dispatchEvent(new this.Event('resize'));\n  };\n});","position":{"start":{"line":974,"column":1,"offset":32322},"end":{"line":988,"column":4,"offset":32668},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This allows to capability of continuing to test in Jest while not running in a browser.","position":{"start":{"line":990,"column":1,"offset":32670},"end":{"line":990,"column":88,"offset":32757},"indent":[]}}],"position":{"start":{"line":990,"column":1,"offset":32670},"end":{"line":990,"column":88,"offset":32757},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sometimes, a module is doing something you don't want to actually do in tests.\nJest makes it relatively simple to mock a module:","position":{"start":{"line":992,"column":1,"offset":32759},"end":{"line":993,"column":50,"offset":32887},"indent":[1]}}],"position":{"start":{"line":992,"column":1,"offset":32759},"end":{"line":993,"column":50,"offset":32887},"indent":[1]}},{"type":"code","lang":"javascript","meta":null,"value":"// math.js\nexport const add = (a, b) => a + b;\nexport const subtract = (a, b) => a - b;\n\n// __tests__/some-test.js\nimport { add, subtract } from '../math';\n\njest.mock('../math');\n\n// now all the function exports from the \"math.js\" module are jest mock functions\n// so we can call .mockImplementation(...) on them\n// and make assertions like .toHaveBeenCalledTimes(...)","position":{"start":{"line":995,"column":1,"offset":32889},"end":{"line":1008,"column":4,"offset":33275},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Additionally, if you'd like to mock only ","position":{"start":{"line":1010,"column":1,"offset":33277},"end":{"line":1010,"column":42,"offset":33318},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"parts","position":{"start":{"line":1010,"column":43,"offset":33319},"end":{"line":1010,"column":48,"offset":33324},"indent":[]}}],"position":{"start":{"line":1010,"column":42,"offset":33318},"end":{"line":1010,"column":49,"offset":33325},"indent":[]}},{"type":"text","value":" of a module, you can provide\nyour own \"mock module getter\" function:","position":{"start":{"line":1010,"column":49,"offset":33325},"end":{"line":1011,"column":40,"offset":33394},"indent":[1]}}],"position":{"start":{"line":1010,"column":1,"offset":33277},"end":{"line":1011,"column":40,"offset":33394},"indent":[1]}},{"type":"code","lang":"javascript","meta":null,"value":"jest.mock('../math', () => {\n  const actualMath = jest.requireActual('../math');\n  return {\n    ...actualMath,\n    subtract: jest.fn(),\n  };\n});\n\n// now the `add` export is the normal function,\n// but the `subtract` export is a mock function.","position":{"start":{"line":1013,"column":1,"offset":33396},"end":{"line":1024,"column":4,"offset":33656},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Mocking in action:","position":{"start":{"line":1026,"column":1,"offset":33658},"end":{"line":1026,"column":19,"offset":33676},"indent":[]}}],"position":{"start":{"line":1026,"column":1,"offset":33658},"end":{"line":1026,"column":19,"offset":33676},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// mocking Browser APIs and modules\n// http://localhost:3000/location\n\nimport * as React from 'react';\nimport { render, screen, act } from '@testing-library/react';\nimport Location from '../../examples/location';\n\nbeforeAll(() => {\n  window.navigator.geolocation = {\n    getCurrentPosition: jest.fn(),\n  };\n});\n\nfunction deferred() {\n  let resolve, reject;\n  const promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return { promise, resolve, reject };\n}\n\ntest('displays the users current location', async () => {\n  const fakePosition = {\n    coords: {\n      latitude: 35,\n      longitude: 139,\n    },\n  };\n  const { promise, resolve } = deferred();\n  window.navigator.geolocation.getCurrentPosition.mockImplementation(\n    callback => {\n      promise.then(() => callback(fakePosition));\n    },\n  );\n\n  render(<Location />);\n\n  expect(screen.getByLabelText(/loading/i)).toBeInTheDocument();\n\n  await act(async () => {\n    resolve();\n    await promise;\n  });\n\n  expect(screen.queryByLabelText(/loading/i)).not.toBeInTheDocument();\n\n  expect(screen.getByText(/latitude/i)).toHaveTextContent(\n    `Latitude: ${fakePosition.coords.latitude}`,\n  );\n  expect(screen.getByText(/longitude/i)).toHaveTextContent(\n    `Longitude: ${fakePosition.coords.longitude}`,\n  );\n});","position":{"start":{"line":1028,"column":1,"offset":33678},"end":{"line":1083,"column":4,"offset":34983},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The act function is placed around the resolve (you'll see the error show up in the console) and it happens because the callback is updating the state in a 3rd-party component being used.","position":{"start":{"line":1085,"column":1,"offset":34985},"end":{"line":1085,"column":187,"offset":35171},"indent":[]}}],"position":{"start":{"line":1085,"column":1,"offset":34985},"end":{"line":1085,"column":187,"offset":35171},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We need to ensure all the side-effects are flushed before we continuing with the tests (effects that may be inperceivable to us).","position":{"start":{"line":1087,"column":1,"offset":35173},"end":{"line":1087,"column":130,"offset":35302},"indent":[]}}],"position":{"start":{"line":1087,"column":1,"offset":35173},"end":{"line":1087,"column":130,"offset":35302},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It will now ensure that UI is stable. It is one of the few places where you need to use the ","position":{"start":{"line":1089,"column":1,"offset":35304},"end":{"line":1089,"column":93,"offset":35396},"indent":[]}},{"type":"inlineCode","value":"act","position":{"start":{"line":1089,"column":93,"offset":35396},"end":{"line":1089,"column":98,"offset":35401},"indent":[]}},{"type":"text","value":" API.","position":{"start":{"line":1089,"column":98,"offset":35401},"end":{"line":1089,"column":103,"offset":35406},"indent":[]}}],"position":{"start":{"line":1089,"column":1,"offset":35304},"end":{"line":1089,"column":103,"offset":35406},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Act Function","position":{"start":{"line":1091,"column":5,"offset":35412},"end":{"line":1091,"column":17,"offset":35424},"indent":[]}}],"position":{"start":{"line":1091,"column":1,"offset":35408},"end":{"line":1091,"column":17,"offset":35424},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the above.","position":{"start":{"line":1093,"column":1,"offset":35426},"end":{"line":1093,"column":14,"offset":35439},"indent":[]}}],"position":{"start":{"line":1093,"column":1,"offset":35426},"end":{"line":1093,"column":14,"offset":35439},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// mocking Browser APIs and modules\n// 💯 test the unhappy path\n// http://localhost:3000/location\n\nimport React from 'react';\nimport { render, screen, act } from '@testing-library/react';\nimport Location from '../../examples/location';\n\nbeforeAll(() => {\n  window.navigator.geolocation = {\n    getCurrentPosition: jest.fn(),\n  };\n});\n\nfunction deferred() {\n  let resolve, reject;\n  const promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return { promise, resolve, reject };\n}\n\ntest('displays the users current location', async () => {\n  const fakePosition = {\n    coords: {\n      latitude: 35,\n      longitude: 139,\n    },\n  };\n  const { promise, resolve } = deferred();\n  window.navigator.geolocation.getCurrentPosition.mockImplementation(\n    callback => {\n      promise.then(() => callback(fakePosition));\n    },\n  );\n\n  render(<Location />);\n\n  expect(screen.getByLabelText(/loading/i)).toBeInTheDocument();\n\n  await act(async () => {\n    resolve();\n    await promise;\n  });\n\n  expect(screen.queryByLabelText(/loading/i)).not.toBeInTheDocument();\n\n  expect(screen.getByText(/latitude/i)).toHaveTextContent(\n    `Latitude: ${fakePosition.coords.latitude}`,\n  );\n  expect(screen.getByText(/longitude/i)).toHaveTextContent(\n    `Longitude: ${fakePosition.coords.longitude}`,\n  );\n});\n\ntest('displays error message when geolocation is not supported', async () => {\n  const fakeError = new Error(\n    'Geolocation is not supported or permission denied',\n  );\n  const { promise, reject } = deferred();\n\n  window.navigator.geolocation.getCurrentPosition.mockImplementation(\n    (successCallback, errorCallback) => {\n      promise.catch(() => errorCallback(fakeError));\n    },\n  );\n\n  render(<Location />);\n\n  expect(screen.getByLabelText(/loading/i)).toBeInTheDocument();\n\n  await act(async () => {\n    reject();\n  });\n\n  expect(screen.queryByLabelText(/loading/i)).not.toBeInTheDocument();\n\n  expect(screen.getByRole('alert')).toHaveTextContent(fakeError.message);\n});","position":{"start":{"line":1095,"column":1,"offset":35441},"end":{"line":1176,"column":4,"offset":37451},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Mock the module","position":{"start":{"line":1178,"column":5,"offset":37457},"end":{"line":1178,"column":20,"offset":37472},"indent":[]}}],"position":{"start":{"line":1178,"column":1,"offset":37453},"end":{"line":1178,"column":20,"offset":37472},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is an alternative way to solve the problem through mocking.","position":{"start":{"line":1180,"column":1,"offset":37474},"end":{"line":1180,"column":65,"offset":37538},"indent":[]}}],"position":{"start":{"line":1180,"column":1,"offset":37474},"end":{"line":1180,"column":65,"offset":37538},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// mocking Browser APIs and modules\n// 💯 mock the module\n// http://localhost:3000/location\n\nimport * as React from 'react';\nimport { render, screen, act } from '@testing-library/react';\nimport { useCurrentPosition } from 'react-use-geolocation';\nimport Location from '../../examples/location';\n\njest.mock('react-use-geolocation');\n\ntest('displays the users current location', async () => {\n  const fakePosition = {\n    coords: {\n      latitude: 35,\n      longitude: 139,\n    },\n  };\n\n  let setReturnValue;\n  function useMockCurrentPosition() {\n    const state = React.useState([]);\n    setReturnValue = state[1];\n    return state[0];\n  }\n  useCurrentPosition.mockImplementation(useMockCurrentPosition);\n\n  render(<Location />);\n  expect(screen.getByLabelText(/loading/i)).toBeInTheDocument();\n\n  act(() => {\n    setReturnValue([fakePosition]);\n  });\n\n  expect(screen.queryByLabelText(/loading/i)).not.toBeInTheDocument();\n  expect(screen.getByText(/latitude/i)).toHaveTextContent(\n    `Latitude: ${fakePosition.coords.latitude}`,\n  );\n  expect(screen.getByText(/longitude/i)).toHaveTextContent(\n    `Longitude: ${fakePosition.coords.longitude}`,\n  );\n});","position":{"start":{"line":1182,"column":1,"offset":37540},"end":{"line":1225,"column":4,"offset":38705},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Context and Custom Render Method","position":{"start":{"line":1227,"column":4,"offset":38710},"end":{"line":1227,"column":36,"offset":38742},"indent":[]}}],"position":{"start":{"line":1227,"column":1,"offset":38707},"end":{"line":1227,"column":36,"offset":38742},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"How to test components that use context.","position":{"start":{"line":1229,"column":1,"offset":38744},"end":{"line":1229,"column":41,"offset":38784},"indent":[]}}],"position":{"start":{"line":1229,"column":1,"offset":38744},"end":{"line":1229,"column":41,"offset":38784},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"From the lesson:","position":{"start":{"line":1231,"column":1,"offset":38786},"end":{"line":1231,"column":17,"offset":38802},"indent":[]}}],"position":{"start":{"line":1231,"column":1,"offset":38786},"end":{"line":1231,"column":17,"offset":38802},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A common question when testing React components is what to do with React\ncomponents that use context values. If you take a step back and consider the\nguiding testing philosophy of writing tests that resemble the way our software\nis used, then you'll know that you want to render your component with the\nprovider:","position":{"start":{"line":1233,"column":1,"offset":38804},"end":{"line":1237,"column":10,"offset":39116},"indent":[1,1,1,1]}}],"position":{"start":{"line":1233,"column":1,"offset":38804},"end":{"line":1237,"column":10,"offset":39116},"indent":[1,1,1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"render(\n  <ContextProvider>\n    <ComponentToTest />\n  </ContextProvider>,\n);","position":{"start":{"line":1239,"column":1,"offset":39118},"end":{"line":1245,"column":4,"offset":39212},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The one problem with this is if you want to re-render the ","position":{"start":{"line":1247,"column":1,"offset":39214},"end":{"line":1247,"column":59,"offset":39272},"indent":[]}},{"type":"inlineCode","value":"<ComponentToTest />","position":{"start":{"line":1247,"column":59,"offset":39272},"end":{"line":1247,"column":80,"offset":39293},"indent":[]}},{"type":"text","value":"\n(for example, to give it new props and test how it responds to updated props),\nthen you have to include the context providers:","position":{"start":{"line":1247,"column":80,"offset":39293},"end":{"line":1249,"column":48,"offset":39420},"indent":[1,1]}}],"position":{"start":{"line":1247,"column":1,"offset":39214},"end":{"line":1249,"column":48,"offset":39420},"indent":[1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"const { rerender } = render(\n  <ContextProvider>\n    <ComponentToTest />\n  </ContextProvider>,\n);\n\nrerender(\n  <ContextProvider>\n    <ComponentToTest newProp={true} />\n  </ContextProvider>,\n);","position":{"start":{"line":1251,"column":1,"offset":39422},"end":{"line":1263,"column":4,"offset":39632},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is kind of annoying, so instead, you can provide a ","position":{"start":{"line":1265,"column":1,"offset":39634},"end":{"line":1265,"column":57,"offset":39690},"indent":[]}},{"type":"inlineCode","value":"wrapper","position":{"start":{"line":1265,"column":57,"offset":39690},"end":{"line":1265,"column":66,"offset":39699},"indent":[]}},{"type":"text","value":" option and\nthat will ensure that rerenders are wrapped as well:","position":{"start":{"line":1265,"column":66,"offset":39699},"end":{"line":1266,"column":53,"offset":39763},"indent":[1]}}],"position":{"start":{"line":1265,"column":1,"offset":39634},"end":{"line":1266,"column":53,"offset":39763},"indent":[1]}},{"type":"code","lang":"javascript","meta":null,"value":"function Wrapper({ children }) {\n  return <ContextProvider>{children}</ContextProvider>;\n}\n\nconst { rerender } = render(<ComponentToTest />, { wrapper: Wrapper });\n\nrerender(<ComponentToTest newProp={true} />);","position":{"start":{"line":1268,"column":1,"offset":39765},"end":{"line":1276,"column":4,"offset":39993},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"📜 ","position":{"start":{"line":1278,"column":1,"offset":39995},"end":{"line":1278,"column":4,"offset":39998},"indent":[]}},{"type":"link","title":null,"url":"https://testing-library.com/docs/react-testing-library/api#wrapper","children":[{"type":"text","value":"https://testing-library.com/docs/react-testing-library/api#wrapper","position":{"start":{"line":1278,"column":4,"offset":39998},"end":{"line":1278,"column":70,"offset":40064},"indent":[]}}],"position":{"start":{"line":1278,"column":4,"offset":39998},"end":{"line":1278,"column":70,"offset":40064},"indent":[]}}],"position":{"start":{"line":1278,"column":1,"offset":39995},"end":{"line":1278,"column":70,"offset":40064},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This ","position":{"start":{"line":1280,"column":1,"offset":40066},"end":{"line":1280,"column":6,"offset":40071},"indent":[]}},{"type":"inlineCode","value":"Wrapper","position":{"start":{"line":1280,"column":6,"offset":40071},"end":{"line":1280,"column":15,"offset":40080},"indent":[]}},{"type":"text","value":" could include providers for all your context providers in your\napp: Router, Theme, Authentication, etc.","position":{"start":{"line":1280,"column":15,"offset":40080},"end":{"line":1281,"column":41,"offset":40184},"indent":[1]}}],"position":{"start":{"line":1280,"column":1,"offset":40066},"end":{"line":1281,"column":41,"offset":40184},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"To take it further, you could create your own custom render method that does\nthis automatically:","position":{"start":{"line":1283,"column":1,"offset":40186},"end":{"line":1284,"column":20,"offset":40282},"indent":[1]}}],"position":{"start":{"line":1283,"column":1,"offset":40186},"end":{"line":1284,"column":20,"offset":40282},"indent":[1]}},{"type":"code","lang":"javascript","meta":null,"value":"import { render as rtlRender } from '@testing-library/react';\n// \"rtl\" is short for \"react testing library\" not \"right-to-left\" 😅\n\nfunction render(ui, options) {\n  return rtlRender(ui, { wrapper: Wrapper, ...options });\n}\n\n// then in your tests, you don't need to worry about context at all:\nconst { rerender } = render(<ComponentToTest />);\n\nrerender(<ComponentToTest newProp={true} />);","position":{"start":{"line":1286,"column":1,"offset":40284},"end":{"line":1298,"column":4,"offset":40691},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"From there, you can put that custom render function in your own module and use\nyour custom render method instead of the built-in one from React Testing\nLibrary. Learn more about this from the docs:","position":{"start":{"line":1300,"column":1,"offset":40693},"end":{"line":1302,"column":46,"offset":40890},"indent":[1,1]}}],"position":{"start":{"line":1300,"column":1,"offset":40693},"end":{"line":1302,"column":46,"offset":40890},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"📜 ","position":{"start":{"line":1304,"column":1,"offset":40892},"end":{"line":1304,"column":4,"offset":40895},"indent":[]}},{"type":"link","title":null,"url":"https://testing-library.com/docs/react-testing-library/setup","children":[{"type":"text","value":"https://testing-library.com/docs/react-testing-library/setup","position":{"start":{"line":1304,"column":4,"offset":40895},"end":{"line":1304,"column":64,"offset":40955},"indent":[]}}],"position":{"start":{"line":1304,"column":4,"offset":40895},"end":{"line":1304,"column":64,"offset":40955},"indent":[]}}],"position":{"start":{"line":1304,"column":1,"offset":40892},"end":{"line":1304,"column":64,"offset":40955},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A basic example of this in practise (not the custom setup):","position":{"start":{"line":1306,"column":1,"offset":40957},"end":{"line":1306,"column":60,"offset":41016},"indent":[]}}],"position":{"start":{"line":1306,"column":1,"offset":40957},"end":{"line":1306,"column":60,"offset":41016},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// testing with context and a custom render method\n// http://localhost:3000/easy-button\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { ThemeProvider } from '../../components/theme';\nimport EasyButton from '../../components/easy-button';\n\ntest('renders with the light styles for the light theme', () => {\n  const Wrapper = ({ children }) => (\n    <ThemeProvider initialTheme=\"light\">{children}</ThemeProvider>\n  );\n  render(<EasyButton>Easy</EasyButton>, { wrapper: Wrapper });\n  const button = screen.getByRole('button', { name: /easy/i });\n  expect(button).toHaveStyle(`\n    background-color: white;\n    color: black;\n  `);\n});","position":{"start":{"line":1308,"column":1,"offset":41018},"end":{"line":1328,"column":4,"offset":41708},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Render Method","position":{"start":{"line":1330,"column":5,"offset":41714},"end":{"line":1330,"column":18,"offset":41727},"indent":[]}}],"position":{"start":{"line":1330,"column":1,"offset":41710},"end":{"line":1330,"column":18,"offset":41727},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This will be a special render function to encaspsulate the duplication.","position":{"start":{"line":1332,"column":1,"offset":41729},"end":{"line":1332,"column":72,"offset":41800},"indent":[]}}],"position":{"start":{"line":1332,"column":1,"offset":41729},"end":{"line":1332,"column":72,"offset":41800},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// testing with context and a custom render method\n// 💯 create a custom render method\n// http://localhost:3000/easy-button\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { ThemeProvider } from '../../components/theme';\nimport EasyButton from '../../components/easy-button';\n\nfunction renderWithProviders(ui, { theme = 'light', ...options } = {}) {\n  const Wrapper = ({ children }) => (\n    <ThemeProvider value={[theme, () => {}]}>{children}</ThemeProvider>\n  );\n  return render(ui, { wrapper: Wrapper, ...options });\n}\n\ntest('renders with the light styles for the light theme', () => {\n  renderWithProviders(<EasyButton>Easy</EasyButton>);\n  const button = screen.getByRole('button', { name: /easy/i });\n  expect(button).toHaveStyle(`\n    background-color: white;\n    color: black;\n  `);\n});\n\ntest('renders with the dark styles for the dark theme', () => {\n  renderWithProviders(<EasyButton>Easy</EasyButton>, {\n    theme: 'dark',\n  });\n  const button = screen.getByRole('button', { name: /easy/i });\n  expect(button).toHaveStyle(`\n    background-color: black;\n    color: white;\n  `);\n});","position":{"start":{"line":1334,"column":1,"offset":41802},"end":{"line":1370,"column":4,"offset":42952},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"App Test Utils","position":{"start":{"line":1372,"column":5,"offset":42958},"end":{"line":1372,"column":19,"offset":42972},"indent":[]}}],"position":{"start":{"line":1372,"column":1,"offset":42954},"end":{"line":1372,"column":19,"offset":42972},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"\"Now, we want to swap the @testing-library/react module with our app-test-utils. What I recommend for every application that's using React Testing Library, your test should not import @testing-library/react.","position":{"start":{"line":1374,"column":4,"offset":42977},"end":{"line":1374,"column":211,"offset":43184},"indent":[]}}],"position":{"start":{"line":1374,"column":3,"offset":42976},"end":{"line":1374,"column":212,"offset":43185},"indent":[]}},{"type":"text","value":" > ","position":{"start":{"line":1374,"column":212,"offset":43185},"end":{"line":1374,"column":215,"offset":43188},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"\"Instead, you should make your own module that re-exports everything from @testing-library/react and has a render() with providers type of function. We've already got this if we go to our test directory and then test-utils. Then right in here, we are doing something that looks a little familiar.\"","position":{"start":{"line":1374,"column":216,"offset":43189},"end":{"line":1374,"column":513,"offset":43486},"indent":[]}}],"position":{"start":{"line":1374,"column":215,"offset":43188},"end":{"line":1374,"column":514,"offset":43487},"indent":[]}}],"position":{"start":{"line":1374,"column":3,"offset":42976},"end":{"line":1374,"column":514,"offset":43487},"indent":[]}}],"position":{"start":{"line":1374,"column":1,"offset":42974},"end":{"line":1374,"column":514,"offset":43487},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// testing with context and a custom render method\n// 💯 swap @testing-library/react with app test utils\n// http://localhost:3000/easy-button\n\nimport * as React from 'react';\nimport { render, screen } from 'test/test-utils';\nimport EasyButton from '../../components/easy-button';\n\ntest('renders with the light styles for the light theme', () => {\n  render(<EasyButton>Easy</EasyButton>, { theme: 'light' });\n  const button = screen.getByRole('button', { name: /easy/i });\n  expect(button).toHaveStyle(`\n    background-color: white;\n    color: black;\n  `);\n});\n\ntest('renders with the dark styles for the dark theme', () => {\n  render(<EasyButton>Easy</EasyButton>, { theme: 'dark' });\n  const button = screen.getByRole('button', { name: /easy/i });\n  expect(button).toHaveStyle(`\n    background-color: black;\n    color: white;\n  `);\n});","position":{"start":{"line":1376,"column":1,"offset":43489},"end":{"line":1402,"column":4,"offset":44335},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can setup the relative path to be absolute if you setup you ","position":{"start":{"line":1404,"column":1,"offset":44337},"end":{"line":1404,"column":65,"offset":44401},"indent":[]}},{"type":"inlineCode","value":"jest.config.js","position":{"start":{"line":1404,"column":65,"offset":44401},"end":{"line":1404,"column":81,"offset":44417},"indent":[]}},{"type":"text","value":" file correctly to handle it under ","position":{"start":{"line":1404,"column":81,"offset":44417},"end":{"line":1404,"column":116,"offset":44452},"indent":[]}},{"type":"inlineCode","value":"moduleDirectories","position":{"start":{"line":1404,"column":116,"offset":44452},"end":{"line":1404,"column":135,"offset":44471},"indent":[]}},{"type":"text","value":"!","position":{"start":{"line":1404,"column":135,"offset":44471},"end":{"line":1404,"column":136,"offset":44472},"indent":[]}}],"position":{"start":{"line":1404,"column":1,"offset":44337},"end":{"line":1404,"column":136,"offset":44472},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Docs can be found on the ","position":{"start":{"line":1406,"column":1,"offset":44474},"end":{"line":1406,"column":26,"offset":44499},"indent":[]}},{"type":"link","title":null,"url":"https://jestjs.io/docs/en/configuration","children":[{"type":"text","value":"Jest website","position":{"start":{"line":1406,"column":27,"offset":44500},"end":{"line":1406,"column":39,"offset":44512},"indent":[]}}],"position":{"start":{"line":1406,"column":26,"offset":44499},"end":{"line":1406,"column":81,"offset":44554},"indent":[]}}],"position":{"start":{"line":1406,"column":1,"offset":44474},"end":{"line":1406,"column":81,"offset":44554},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Testing Custom Hooks","position":{"start":{"line":1408,"column":4,"offset":44559},"end":{"line":1408,"column":24,"offset":44579},"indent":[]}}],"position":{"start":{"line":1408,"column":1,"offset":44556},"end":{"line":1408,"column":24,"offset":44579},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"\"Testing custom hooks is probably something you shouldn't do. You should just test those components.\"","position":{"start":{"line":1410,"column":4,"offset":44584},"end":{"line":1410,"column":105,"offset":44685},"indent":[]}}],"position":{"start":{"line":1410,"column":3,"offset":44583},"end":{"line":1410,"column":106,"offset":44686},"indent":[]}}],"position":{"start":{"line":1410,"column":3,"offset":44583},"end":{"line":1410,"column":106,"offset":44686},"indent":[]}}],"position":{"start":{"line":1410,"column":1,"offset":44581},"end":{"line":1410,"column":106,"offset":44686},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Kent considers it to be more of an implementation detail.","position":{"start":{"line":1412,"column":1,"offset":44688},"end":{"line":1412,"column":58,"offset":44745},"indent":[]}}],"position":{"start":{"line":1412,"column":1,"offset":44688},"end":{"line":1412,"column":58,"offset":44745},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Going with the first option of testing the component using it, we have the following code:","position":{"start":{"line":1414,"column":1,"offset":44747},"end":{"line":1414,"column":91,"offset":44837},"indent":[]}}],"position":{"start":{"line":1414,"column":1,"offset":44747},"end":{"line":1414,"column":91,"offset":44837},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// testing custom hooks\n// http://localhost:3000/counter-hook\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport useCounter from '../../components/use-counter';\n\nfunction UseCounterHookExample() {\n  const { count, increment, decrement } = useCounter();\n  return (\n    <div>\n      <div>Current count: {count}</div>\n      <button onClick={decrement}>Decrement</button>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n\ntest('exposes the count and increment/decrement functions', () => {\n  render(<UseCounterHookExample />);\n  const increment = screen.getByRole('button', { name: /increment/i });\n  const decrement = screen.getByRole('button', { name: /decrement/i });\n  const message = screen.getByText(/current count/i);\n\n  expect(message).toHaveTextContent('Current count: 0');\n  userEvent.click(increment);\n  expect(message).toHaveTextContent('Current count: 1');\n  userEvent.click(decrement);\n  expect(message).toHaveTextContent('Current count: 0');\n});","position":{"start":{"line":1416,"column":1,"offset":44839},"end":{"line":1448,"column":4,"offset":45925},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Kent mentions that this is the type of test that he would write.","position":{"start":{"line":1450,"column":1,"offset":45927},"end":{"line":1450,"column":65,"offset":45991},"indent":[]}}],"position":{"start":{"line":1450,"column":1,"offset":45927},"end":{"line":1450,"column":65,"offset":45991},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Using a fake component","position":{"start":{"line":1452,"column":5,"offset":45997},"end":{"line":1452,"column":27,"offset":46019},"indent":[]}}],"position":{"start":{"line":1452,"column":1,"offset":45993},"end":{"line":1452,"column":27,"offset":46019},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This removes the use an example component altogether. This is useful for complicated custom hooks.","position":{"start":{"line":1454,"column":1,"offset":46021},"end":{"line":1454,"column":99,"offset":46119},"indent":[]}}],"position":{"start":{"line":1454,"column":1,"offset":46021},"end":{"line":1454,"column":99,"offset":46119},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// testing custom hooks\n// 💯 fake component\n// http://localhost:3000/counter-hook\n\nimport * as React from 'react';\nimport { render, act } from '@testing-library/react';\nimport useCounter from '../../components/use-counter';\n\ntest('exposes the count and increment/decrement functions', () => {\n  let result;\n  function TestComponent() {\n    result = useCounter();\n    return null;\n  }\n  render(<TestComponent />);\n  expect(result.count).toBe(0);\n  act(() => result.increment());\n  expect(result.count).toBe(1);\n  act(() => result.decrement());\n  expect(result.count).toBe(0);\n});","position":{"start":{"line":1456,"column":1,"offset":46121},"end":{"line":1478,"column":4,"offset":46710},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Using a setup function and implementing more tests","position":{"start":{"line":1480,"column":5,"offset":46716},"end":{"line":1480,"column":55,"offset":46766},"indent":[]}}],"position":{"start":{"line":1480,"column":1,"offset":46712},"end":{"line":1480,"column":55,"offset":46766},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is for abstraction of reused faking.","position":{"start":{"line":1482,"column":1,"offset":46768},"end":{"line":1482,"column":42,"offset":46809},"indent":[]}}],"position":{"start":{"line":1482,"column":1,"offset":46768},"end":{"line":1482,"column":42,"offset":46809},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We need to also ues ","position":{"start":{"line":1484,"column":1,"offset":46811},"end":{"line":1484,"column":21,"offset":46831},"indent":[]}},{"type":"inlineCode","value":"result.current","position":{"start":{"line":1484,"column":21,"offset":46831},"end":{"line":1484,"column":37,"offset":46847},"indent":[]}},{"type":"text","value":" due to referential binding. Without it, each re-render for ","position":{"start":{"line":1484,"column":37,"offset":46847},"end":{"line":1484,"column":97,"offset":46907},"indent":[]}},{"type":"inlineCode","value":"TestComponent","position":{"start":{"line":1484,"column":97,"offset":46907},"end":{"line":1484,"column":112,"offset":46922},"indent":[]}},{"type":"text","value":" would reset the ","position":{"start":{"line":1484,"column":112,"offset":46922},"end":{"line":1484,"column":129,"offset":46939},"indent":[]}},{"type":"inlineCode","value":"result","position":{"start":{"line":1484,"column":129,"offset":46939},"end":{"line":1484,"column":137,"offset":46947},"indent":[]}},{"type":"text","value":" variable in setup.","position":{"start":{"line":1484,"column":137,"offset":46947},"end":{"line":1484,"column":156,"offset":46966},"indent":[]}}],"position":{"start":{"line":1484,"column":1,"offset":46811},"end":{"line":1484,"column":156,"offset":46966},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// testing custom hooks\n// 💯 setup function\n// http://localhost:3000/counter-hook\n\nimport * as React from 'react';\nimport { render, act } from '@testing-library/react';\nimport useCounter from '../../components/use-counter';\n\nfunction setup({ initialProps } = {}) {\n  const result = {};\n  function TestComponent(props) {\n    result.current = useCounter(props);\n    return null;\n  }\n  render(<TestComponent {...initialProps} />);\n  return result;\n}\n\ntest('exposes the count and increment/decrement functions', () => {\n  const result = setup();\n  expect(result.current.count).toBe(0);\n  act(() => result.current.increment());\n  expect(result.current.count).toBe(1);\n  act(() => result.current.decrement());\n  expect(result.current.count).toBe(0);\n});\n\ntest('allows customization of the initial count', () => {\n  const result = setup({ initialProps: { initialCount: 3 } });\n  expect(result.current.count).toBe(3);\n});\n\ntest('allows customization of the step', () => {\n  const result = setup({ initialProps: { step: 2 } });\n  expect(result.current.count).toBe(0);\n  act(() => result.current.increment());\n  expect(result.current.count).toBe(2);\n  act(() => result.current.decrement());\n  expect(result.current.count).toBe(0);\n});","position":{"start":{"line":1486,"column":1,"offset":46968},"end":{"line":1527,"column":4,"offset":48203},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Using React-Hooks Testing Library","position":{"start":{"line":1529,"column":5,"offset":48209},"end":{"line":1529,"column":38,"offset":48242},"indent":[]}}],"position":{"start":{"line":1529,"column":1,"offset":48205},"end":{"line":1529,"column":38,"offset":48242},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The final option is to avoid all the complexity and just use the React-Hooks testing library:","position":{"start":{"line":1531,"column":1,"offset":48244},"end":{"line":1531,"column":94,"offset":48337},"indent":[]}}],"position":{"start":{"line":1531,"column":1,"offset":48244},"end":{"line":1531,"column":94,"offset":48337},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// testing custom hooks\n// 💯 using react-hooks testing library\n// http://localhost:3000/counter-hook\n\nimport { renderHook, act } from '@testing-library/react-hooks';\nimport useCounter from '../../components/use-counter';\n\ntest('exposes the count and increment/decrement functions', () => {\n  const { result } = renderHook(useCounter);\n  expect(result.current.count).toBe(0);\n  act(() => result.current.increment());\n  expect(result.current.count).toBe(1);\n  act(() => result.current.decrement());\n  expect(result.current.count).toBe(0);\n});\n\ntest('allows customization of the initial count', () => {\n  const { result } = renderHook(useCounter, {\n    initialProps: { initialCount: 3 },\n  });\n  expect(result.current.count).toBe(3);\n});\n\ntest('allows customization of the step', () => {\n  const { result } = renderHook(useCounter, { initialProps: { step: 2 } });\n  expect(result.current.count).toBe(0);\n  act(() => result.current.increment());\n  expect(result.current.count).toBe(2);\n  act(() => result.current.decrement());\n  expect(result.current.count).toBe(0);\n});\n\ntest('the step can be changed', () => {\n  const { result, rerender } = renderHook(useCounter, {\n    initialProps: { step: 3 },\n  });\n  expect(result.current.count).toBe(0);\n  act(() => result.current.increment());\n  expect(result.current.count).toBe(3);\n  rerender({ step: 2 });\n  act(() => result.current.decrement());\n  expect(result.current.count).toBe(1);\n});","position":{"start":{"line":1533,"column":1,"offset":48339},"end":{"line":1577,"column":4,"offset":49781},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":1580,"column":1,"offset":49784},"end":{"line":1580,"column":31,"offset":49814},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1580,"column":31,"offset":49814}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"testing-react-apps\"\n    }}>{`Testing React Apps`}</h1>\n    <h2 {...{\n      \"id\": \"simple-test-with-reactdom\"\n    }}>{`Simple Test with ReactDOM`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`\"The more your tests resemble the way your software is used, the more\nconfidence they can give you.\" -\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://twitter.com/kentcdodds/status/977018512689455106\"\n        }}>{`@kentcdodds`}</a></p>\n    </blockquote>\n    <p>{`To just get a basic component logging to our terminal during a test, we can have:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  // 🐨 create a div to render your component to (💰 document.createElement)\n  const div = document.createElement('div');\n  // 🐨 append the div to document.body (💰 document.body.append)\n  document.body.append(div);\n  // 🐨 use ReactDOM.render to render the <Counter /> to the div\n  ReactDOM.render(<Counter />, div);\n  console.log(document.body.innerHTML);\n});\n`}</code></pre>\n    <p>{`To start validating messages from the div we created, we could do the following (for the example of the counter with a single text element):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// simple test with ReactDOM\n// http://localhost:3000/counter\n\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  // 🐨 create a div to render your component to (💰 document.createElement)\n  const div = document.createElement('div');\n  // 🐨 append the div to document.body (💰 document.body.append)\n  document.body.append(div);\n  // 🐨 use ReactDOM.render to render the <Counter /> to the div\n  ReactDOM.render(<Counter />, div);\n\n  // 🐨 get a reference to the message div:\n  const message = div.firstChild.querySelector('div');\n  //\n  // 🐨 expect the message.textContent toBe 'Current count: 0'\n  expect(message.textContent).toBe('Current count: 0');\n});\n`}</code></pre>\n    <p>{`To now test the clicking of the buttons, we can do the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// simple test with ReactDOM\n// http://localhost:3000/counter\n\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  // 🐨 create a div to render your component to (💰 document.createElement)\n  const div = document.createElement('div');\n  // 🐨 append the div to document.body (💰 document.body.append)\n  document.body.append(div);\n  // 🐨 use ReactDOM.render to render the <Counter /> to the div\n  ReactDOM.render(<Counter />, div);\n  // 🐨 get a reference to the increment and decrement buttons:\n  const [decrement, increment] = div.querySelectorAll('button');\n\n  // 🐨 get a reference to the message div:\n  //   💰 div.firstChild.querySelector('div')\n  const message = div.firstChild.querySelector('div');\n  //\n  // 🐨 expect the message.textContent toBe 'Current count: 0'\n  expect(message.textContent).toBe('Current count: 0');\n  // 🐨 click the increment button (💰 increment.click())\n  increment.click();\n  // 🐨 assert the message.textContent\n  expect(message.textContent).toBe('Current count: 1');\n  // 🐨 click the decrement button (💰 decrement.click())\n  decrement.click();\n  // 🐨 assert the message.textContent\n  expect(message.textContent).toBe('Current count: 0');\n  //\n  // 🐨 cleanup by removing the div from the page (💰 div.remove())\n  // 🦉 If you don't cleanup, then it could impact other tests and/or cause a memory leak\n  div.remove();\n});\n`}</code></pre>\n    <p>{`But instead of `}<inlineCode parentName=\"p\">{`div.remove`}</inlineCode>{`, it is better for us to set a before hook. The reason being that if a test fails, it could cause subsequent failures at the clean up did not occur.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`beforeEach(() => (document.body.innerHTML = ''));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-dispatchevent\"\n    }}>{`Use dispatchEvent`}</h3>\n    <p>{`To follow more closely with what happens when the user clicks in React, we change to use `}<inlineCode parentName=\"p\">{`dispatchEvent`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// simple test with ReactDOM\n// http://localhost:3000/counter\n\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport Counter from '../../components/counter';\n\nbeforeEach(() => (document.body.innerHTML = ''));\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  // 🐨 create a div to render your component to (💰 document.createElement)\n  const div = document.createElement('div');\n  // 🐨 append the div to document.body (💰 document.body.append)\n  document.body.append(div);\n  // 🐨 use ReactDOM.render to render the <Counter /> to the div\n  ReactDOM.render(<Counter />, div);\n  // 🐨 get a reference to the increment and decrement buttons:\n  const [decrement, increment] = div.querySelectorAll('button');\n\n  const incrementClickEvent = new MouseEvent('click', {\n    // required for event delgation to work (required by React)\n    bubbles: true,\n    cancelable: true,\n    button: 0,\n  });\n\n  const decrementClickEvent = new MouseEvent('click', {\n    // required for event delgation to work (required by React)\n    bubbles: true,\n    cancelable: true,\n    button: 0,\n  });\n\n  // 🐨 get a reference to the message div:\n  //   💰 div.firstChild.querySelector('div')\n  const message = div.firstChild.querySelector('div');\n  //\n  // 🐨 expect the message.textContent toBe 'Current count: 0'\n  expect(message.textContent).toBe('Current count: 0');\n  increment.dispatchEvent(incrementClickEvent);\n  // 🐨 assert the message.textContent\n  expect(message.textContent).toBe('Current count: 1');\n  // 🐨 click the decrement button (💰 decrement.click())\n  decrement.dispatchEvent(decrementClickEvent);\n  // 🐨 assert the message.textContent\n  expect(message.textContent).toBe('Current count: 0');\n  //\n  // 🐨 cleanup by removing the div from the page (💰 div.remove())\n  // 🦉 If you don't cleanup, then it could impact other tests and/or cause a memory leak\n  div.remove();\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"simple-test-with-react-testing-library\"\n    }}>{`Simple Test With React Testing Library`}</h2>\n    <p>{`Liked the above example, but did not enjoy the boilerplate. Implementing `}<inlineCode parentName=\"p\">{`react-testing-library`}</inlineCode>{` looks like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// simple test with React Testing Library\n// http://localhost:3000/counter\n\nimport * as React from 'react';\n// 🐨 import the \\`render\\` and \\`fireEvent\\` utilities from '@testing-library/react'\nimport { render, fireEvent } from '@testing-library/react';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  // 🐨 swap ReactDOM.render with React Testing Library's render\n  // Note that React Testing Library's render doesn't need you to pass a \\`div\\`\n  // so you only need to pass one argument. render returns an object with a\n  // bunch of utilities on it. For now, let's just grab \\`container\\` which is\n  // the div that React Testing Library creates for us.\n  const { container } = render(<Counter />);\n\n  // 🐨 instead of \\`div\\` here you'll want to use the \\`container\\` you get back\n  // from React Testing Library\n  const [decrement, increment] = container.querySelectorAll('button');\n  const message = container.firstChild.querySelector('div');\n\n  expect(message.textContent).toBe('Current count: 0');\n\n  // 🐨 replace the next two statements with \\`fireEvent.click(button)\\`\n  fireEvent.click(increment);\n  expect(message.textContent).toBe('Current count: 1');\n  fireEvent.click(decrement);\n  expect(message.textContent).toBe('Current count: 0');\n});\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`One of the slight differences is that fireEvent is automatically wrapped in ReactTestUtils act() function. If you ever see an act warning, then that's absolutely something that you probably need to deal with, but you never need to wrap a call to fireEvent in act.\nThe only reason I'm mentioning that to you is because I see it all the time. If you ever come across an act warning, your solution is not to wrap the fireEvent call in act. The solution will be something else entirely.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"using-jest-dom-for-better-messages\"\n    }}>{`Using jest-dom for better messages`}</h3>\n    <p>{`We can import `}<inlineCode parentName=\"p\">{`@testing-library/jest-dom`}</inlineCode>{` into the file (or in a setup file) to extend our Jest assertions to include things such as `}<inlineCode parentName=\"p\">{`.toHaveTextContent`}</inlineCode>{` for better error messaging. Once done we can update our code to look like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// simple test with React Testing Library\n// http://localhost:3000/counter\n\nimport * as React from 'react';\n// 🐨 import the \\`render\\` and \\`fireEvent\\` utilities from '@testing-library/react'\nimport { render, fireEvent } from '@testing-library/react';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  // 🐨 swap ReactDOM.render with React Testing Library's render\n  // Note that React Testing Library's render doesn't need you to pass a \\`div\\`\n  // so you only need to pass one argument. render returns an object with a\n  // bunch of utilities on it. For now, let's just grab \\`container\\` which is\n  // the div that React Testing Library creates for us.\n  const { container } = render(<Counter />);\n\n  // 🐨 instead of \\`div\\` here you'll want to use the \\`container\\` you get back\n  // from React Testing Library\n  const [decrement, increment] = container.querySelectorAll('button');\n  const message = container.firstChild.querySelector('div');\n\n  expect(message).toHaveTextContent('Current count: 0');\n\n  // 🐨 replace the next two statements with \\`fireEvent.click(button)\\`\n  fireEvent.click(increment);\n  expect(message).toHaveTextContent('Current count: 1');\n  fireEvent.click(decrement);\n  expect(message).toHaveTextContent('Current count: 0');\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"avoid-implementation-details\"\n    }}>{`Avoid Implementation Details`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The implementation of your abstractions does not matter to the users of your abstraction and if you want to have confidence that it continues to work through refactors then `}<strong parentName=\"p\">{`neither should your tests.`}</strong></p>\n    </blockquote>\n    <p>{`Here's a React example of this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function Counter() {\n  const [count, setCount] = React.useState(0);\n  const increment = () => setCount(c => c + 1);\n  return <button onClick={increment}>{count}</button>;\n}\n`}</code></pre>\n    <p>{`Here's one way you might access that `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` to click and assert on it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { container } = render(<Counter />);\ncontainer.firstChild; // <-- that's the button\n`}</code></pre>\n    <p>{`However, what if we changed it a bit:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function Counter() {\n  const [count, setCount] = React.useState(0);\n  const increment = () => setCount(c => c + 1);\n  return (\n    <span>\n      <button onClick={increment}>{count}</button>\n    </span>\n  );\n}\n`}</code></pre>\n    <p>{`Our tests would break!`}</p>\n    <p>{`The only difference between these implementations is one wraps the button in a\n`}<inlineCode parentName=\"p\">{`span`}</inlineCode>{` and the other does not. The user does not observe or care about this\ndifference, so we should write our tests in a way that passes in either case.`}</p>\n    <p>{`So here's a better way to search for that button in our test that's\nimplementation detail free and refactor friendly:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`render(<Counter />);\nscreen.getByText('0'); // <-- that's the button\n// or (even better) you can do this:\nscreen.getByRole('button', { name: '0' }); // <-- that's the button\n`}</code></pre>\n    <p>{`In the example, we did the following change:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Avoid implementation details\n// INITIAL CODE\n\nimport * as React from 'react';\n// 🐨 add \\`screen\\` to the import here:\nimport { render, fireEvent } from '@testing-library/react';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  const { container } = render(<Counter />);\n  // 🐨 replace these with screen queries\n  // 💰 you can use \\`getByText\\` for each of these (\\`getByRole\\` can work for the button too)\n  const [decrement, increment] = container.querySelectorAll('button');\n  const message = container.firstChild.querySelector('div');\n\n  expect(message).toHaveTextContent('Current count: 0');\n  fireEvent.click(increment);\n  expect(message).toHaveTextContent('Current count: 1');\n  fireEvent.click(decrement);\n  expect(message).toHaveTextContent('Current count: 0');\n});\n\n// Avoid implementation details\n// FIRST CHANGE\n\nimport * as React from 'react';\n// 🐨 add \\`screen\\` to the import here:\nimport { render, fireEvent, screen } from '@testing-library/react';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  render(<Counter />);\n  // 🐨 replace these with screen queries\n  const decrement = screen.getByText('Decrement');\n  const increment = screen.getByText('Increment');\n  const message = screen.getByText('Current count: 0');\n\n  expect(message).toHaveTextContent('Current count: 0');\n  fireEvent.click(increment);\n  expect(message).toHaveTextContent('Current count: 1');\n  fireEvent.click(decrement);\n  expect(message).toHaveTextContent('Current count: 0');\n});\n\n// Avoid implementation details\n// FINAL CHANGE\n\nimport * as React from 'react';\n// 🐨 add \\`screen\\` to the import here:\nimport { render, fireEvent, screen } from '@testing-library/react';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  render(<Counter />);\n  // 🐨 replace these with screen queries\n  const decrement = screen.getByRole('button', { text: /decrement/i });\n  const increment = screen.getByRole('button', { text: /increment/i });\n  const message = screen.getByText(/current count/i);\n\n  expect(message).toHaveTextContent('Current count: 0');\n  fireEvent.click(increment);\n  expect(message).toHaveTextContent('Current count: 1');\n  fireEvent.click(decrement);\n  expect(message).toHaveTextContent('Current count: 0');\n});\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`screen`}</inlineCode>{` utility can be used to find computations based on attributes that can found using the `}<inlineCode parentName=\"p\">{`accessibility`}</inlineCode>{` tab.`}</p>\n    <p>{`There is information on priority for testing implementation details that can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://testing-library.com/docs/queries/about/\"\n      }}>{`here`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"browser-events-handling-more-than-just-a-click\"\n    }}>{`Browser events (handling more than just a click)`}</h3>\n    <p>{`If the implementation detail is changed for the event that fires it (by is a subtle relation to a click), our tests will break. To be resilient to this (or to test similar interactions) then we can do the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Avoid implementation details\n// http://localhost:3000/counter\n\nimport * as React from 'react';\n// 🐨 add \\`screen\\` to the import here:\nimport { render, userEvent, screen } from '@testing-library/react';\nimport Counter from '../../components/counter';\n\ntest('counter increments and decrements when the buttons are clicked', () => {\n  render(<Counter />);\n  // 🐨 replace these with screen queries\n  const decrement = screen.getByRole('button', { text: /decrement/i });\n  const increment = screen.getByRole('button', { text: /increment/i });\n  const message = screen.getByText(/current count/i);\n\n  expect(message).toHaveTextContent('Current count: 0');\n  userEvent.click(increment);\n  expect(message).toHaveTextContent('Current count: 1');\n  userEvent.click(decrement);\n  expect(message).toHaveTextContent('Current count: 0');\n});\n`}</code></pre>\n    <p>{`All we need to change is `}<inlineCode parentName=\"p\">{`fireEvent`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`userEvent`}</inlineCode>{`. When running `}<inlineCode parentName=\"p\">{`click`}</inlineCode>{` with a `}<inlineCode parentName=\"p\">{`userEvent`}</inlineCode>{`, it will fire all kinds of events for us to test these different scenarions that a user may make.`}</p>\n    <h2 {...{\n      \"id\": \"form-testing\"\n    }}>{`Form Testing`}</h2>\n    <p>{`To test our form, we can first debug what is on the screen to render our the current HTML from the component that is rendered:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// form testing\n// http://localhost:3000/login\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Login from '../../components/login';\n\ntest('submitting the form calls onSubmit with username and password', () => {\n  render(<Login />);\n  screen.debug();\n});\n`}</code></pre>\n    <p>{`We can assert that our form works as expected by updating the code to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// form testing\n// http://localhost:3000/login\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Login from '../../components/login';\n\ntest('submitting the form calls onSubmit with username and password', () => {\n  let submittedData;\n  const handleSubmit = data => (submittedData = data);\n  render(<Login onSubmit={handleSubmit} />);\n  const username = 'chucknorris';\n  const password = 'i need no password';\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  expect(submittedData).toEqual({\n    username,\n    password,\n  });\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"using-a-jest-mock-function\"\n    }}>{`Using a Jest Mock function`}</h3>\n    <p>{`This is us listening and assert what the `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` function call is passed and how many times it is fired:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// form testing\n// 💯 use a jest mock function\n// http://localhost:3000/login\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Login from '../../components/login';\n\ntest('submitting the form calls onSubmit with username and password', () => {\n  const handleSubmit = jest.fn();\n  render(<Login onSubmit={handleSubmit} />);\n  const username = 'chucknorris';\n  const password = 'i need no password';\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  expect(handleSubmit).toHaveBeenCalledWith({\n    username,\n    password,\n  });\n  expect(handleSubmit).toHaveBeenCalledTimes(1);\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"generate-test-data\"\n    }}>{`Generate test data`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`\"Something to keep in mind is that people are going to be reading this test in the future. They may not know the implementation of login and what decisions were made and what's important. Everything that they see in the test, they're going to assume it's important. They're going to assume that it's important that we render the login with an onSubmit prop.\"`}</p>\n    </blockquote>\n    <p>{`We can use Faker to help the user know that the implementation value is not important.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// form testing\n// 💯 generate test data\n// http://localhost:3000/login\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport faker from 'faker';\nimport Login from '../../components/login';\n\nfunction buildLoginForm() {\n  return {\n    username: faker.internet.userName(),\n    password: faker.internet.password(),\n  };\n}\n\ntest('submitting the form calls onSubmit with username and password', () => {\n  const handleSubmit = jest.fn();\n  render(<Login onSubmit={handleSubmit} />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  expect(handleSubmit).toHaveBeenCalledWith({\n    username,\n    password,\n  });\n  expect(handleSubmit).toHaveBeenCalledTimes(1);\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"allow-for-overrides\"\n    }}>{`Allow for overrides`}</h3>\n    <p>{`We just allow overrides so that a user can handle special cases.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// form testing\n// 💯 allow for overrides\n// http://localhost:3000/login\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport faker from 'faker';\nimport Login from '../../components/login';\n\n// overrides is the important part\nfunction buildLoginForm(overrides) {\n  return {\n    username: faker.internet.userName(),\n    password: faker.internet.password(),\n    ...overrides,\n  };\n}\n\ntest('submitting the form calls onSubmit with username and password', () => {\n  const handleSubmit = jest.fn();\n  render(<Login onSubmit={handleSubmit} />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  expect(handleSubmit).toHaveBeenCalledWith({\n    username,\n    password,\n  });\n  expect(handleSubmit).toHaveBeenCalledTimes(1);\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-test-data-bot\"\n    }}>{`Use Test Data Bot`}</h3>\n    <p>{`This is using a test data bot utility `}<inlineCode parentName=\"p\">{`@jackfranklin/test-data-bot`}</inlineCode>{` to help create test factories that can automatically be overriden.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// form testing\n// 💯 use Test Data Bot\n// http://localhost:3000/login\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport Login from '../../components/login';\n\nconst buildLoginForm = build({\n  fields: {\n    username: fake(f => f.internet.userName()),\n    password: fake(f => f.internet.password()),\n  },\n});\n\ntest('submitting the form calls onSubmit with username and password', () => {\n  const handleSubmit = jest.fn();\n  render(<Login onSubmit={handleSubmit} />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  expect(handleSubmit).toHaveBeenCalledWith({\n    username,\n    password,\n  });\n  expect(handleSubmit).toHaveBeenCalledTimes(1);\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mocking-http-requests\"\n    }}>{`Mocking HTTP Requests`}</h2>\n    <p>{`We use `}<inlineCode parentName=\"p\">{`msw`}</inlineCode>{` to intercept web requests.`}</p>\n    <p>{`We setup the server like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const server = setupServer(\n  rest.post(\n    'https://auth-provider.example.com/api/login',\n    async (req, res, ctx) => {\n      if (!req.body.password) {\n        return res(ctx.status(400), ctx.json({ message: 'password required' }));\n      }\n      if (!req.body.username) {\n        return res(ctx.status(400), ctx.json({ message: 'username required' }));\n      }\n      return res(ctx.json({ username: req.body.username }));\n    },\n  ),\n);\n\nbeforeAll(() => server.listen());\nafterAll(() => server.close());\n`}</code></pre>\n    <p>{`The code provided can handle the route to intercept along with the return values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// mocking HTTP requests\n// http://localhost:3000/login-submission\n\nimport * as React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\nimport Login from '../../components/login-submission';\n\nconst buildLoginForm = build({\n  fields: {\n    username: fake(f => f.internet.userName()),\n    password: fake(f => f.internet.password()),\n  },\n});\n\nconst server = setupServer(\n  rest.post(\n    'https://auth-provider.example.com/api/login',\n    async (req, res, ctx) => {\n      if (!req.body.password) {\n        return res(ctx.status(400), ctx.json({ message: 'password required' }));\n      }\n      if (!req.body.username) {\n        return res(ctx.status(400), ctx.json({ message: 'username required' }));\n      }\n      return res(ctx.json({ username: req.body.username }));\n    },\n  ),\n);\n\nbeforeAll(() => server.listen());\nafterAll(() => server.close());\n\ntest(\\`logging in displays the user's username\\`, async () => {\n  render(<Login />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByText(username)).toBeInTheDocument();\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mocked-responses\"\n    }}>{`Mocked Responses`}</h3>\n    <p>{`Essentially here we are abstracting the handlers to another file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// test/server-handlers.js\nimport { rest } from 'msw';\n\nconst delay = process.env.NODE_ENV === 'test' ? 0 : 1500;\n\nconst handlers = [\n  rest.post(\n    'https://auth-provider.example.com/api/login',\n    async (req, res, ctx) => {\n      if (!req.body.password) {\n        return res(\n          ctx.delay(delay),\n          ctx.status(400),\n          ctx.json({ message: 'password required' }),\n        );\n      }\n      if (!req.body.username) {\n        return res(\n          ctx.delay(delay),\n          ctx.status(400),\n          ctx.json({ message: 'username required' }),\n        );\n      }\n      return res(ctx.delay(delay), ctx.json({ username: req.body.username }));\n    },\n  ),\n];\n\nexport { handlers };\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// mocking HTTP requests\n// 💯 reuse server request handlers\n// http://localhost:3000/login-submission\n\nimport * as React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { setupServer } from 'msw/node';\nimport { handlers } from 'test/server-handlers';\nimport Login from '../../components/login-submission';\n\nconst buildLoginForm = build({\n  fields: {\n    username: fake(f => f.internet.userName()),\n    password: fake(f => f.internet.password()),\n  },\n});\n\nconst server = setupServer(...handlers);\n\nbeforeAll(() => server.listen());\nafterAll(() => server.close());\n\ntest(\\`logging in displays the user's username\\`, async () => {\n  render(<Login />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByText(username)).toBeInTheDocument();\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"testing-the-unhappy-path\"\n    }}>{`Testing the unhappy path`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// mocking HTTP requests\n// 💯 test the unhappy path\n// http://localhost:3000/login-submission\n\nimport * as React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { setupServer } from 'msw/node';\nimport { handlers } from 'test/server-handlers';\nimport Login from '../../components/login-submission';\n\nconst buildLoginForm = build({\n  fields: {\n    username: fake(f => f.internet.userName()),\n    password: fake(f => f.internet.password()),\n  },\n});\n\nconst server = setupServer(...handlers);\n\nbeforeAll(() => server.listen());\nafterAll(() => server.close());\n\ntest(\\`logging in displays the user's username\\`, async () => {\n  render(<Login />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByText(username)).toBeInTheDocument();\n});\n\ntest('omitting the password results in an error', async () => {\n  render(<Login />);\n  const { username } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  // don't type in the password\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByRole('alert')).toHaveTextContent('password required');\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-inline-snapshots\"\n    }}>{`Use inline snapshots`}</h2>\n    <p>{`It is not great to hardcode things such as \"error messages\" in case the error message ever changes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// mocking HTTP requests\n// 💯 use inline snapshots for error messages\n// http://localhost:3000/login-submission\n\nimport * as React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { setupServer } from 'msw/node';\nimport { handlers } from 'test/server-handlers';\nimport Login from '../../components/login-submission';\n\nconst buildLoginForm = build({\n  fields: {\n    username: fake(f => f.internet.userName()),\n    password: fake(f => f.internet.password()),\n  },\n});\n\nconst server = setupServer(...handlers);\n\nbeforeAll(() => server.listen());\nafterAll(() => server.close());\n\ntest(\\`logging in displays the user's username\\`, async () => {\n  render(<Login />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByText(username)).toBeInTheDocument();\n});\n\ntest('omitting the password results in an error', async () => {\n  render(<Login />);\n  const { username } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  // don't type in the password\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByRole('alert').textContent).toMatchInlineSnapshot(\n    \\`\"password required\"\\`,\n  );\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"using-one-off-server-handlers\"\n    }}>{`Using one-off server handlers`}</h3>\n    <p>{`This is an ability to override the current handlers that have been implemented.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// mocking HTTP requests\n// 💯 use one-off server handlers\n// http://localhost:3000/login-submission\n\nimport * as React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\nimport { handlers } from 'test/server-handlers';\nimport Login from '../../components/login-submission';\n\nconst buildLoginForm = build({\n  fields: {\n    username: fake(f => f.internet.userName()),\n    password: fake(f => f.internet.password()),\n  },\n});\n\nconst server = setupServer(...handlers);\n\nbeforeAll(() => server.listen());\nafterAll(() => server.close());\nafterEach(() => server.resetHandlers());\n\ntest(\\`logging in displays the user's username\\`, async () => {\n  render(<Login />);\n  const { username, password } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  userEvent.type(screen.getByLabelText(/password/i), password);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByText(username)).toBeInTheDocument();\n});\n\ntest('omitting the password results in an error', async () => {\n  render(<Login />);\n  const { username } = buildLoginForm();\n\n  userEvent.type(screen.getByLabelText(/username/i), username);\n  // don't type in the password\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByRole('alert').textContent).toMatchInlineSnapshot(\n    \\`\"password required\"\\`,\n  );\n});\n\ntest('unknown server error displays the error message', async () => {\n  const testErrorMessage = 'Oh no, something bad happened';\n  server.use(\n    rest.post(\n      'https://auth-provider.example.com/api/login',\n      async (req, res, ctx) => {\n        return res(ctx.status(500), ctx.json({ message: testErrorMessage }));\n      },\n    ),\n  );\n  render(<Login />);\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  await waitForElementToBeRemoved(() => screen.getByLabelText(/loading/i));\n\n  expect(screen.getByRole('alert')).toHaveTextContent(testErrorMessage);\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mocking-browser-apis-and-modules\"\n    }}>{`Mocking Browser APIs and Modules`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Mocking HTTP requests is one thing, but sometimes you have entire Browser APIs\nor modules that you need to mock. Every time you create a fake version of what\nyour code actually uses, you're \"poking a hole in reality\" and you lose some\nconfidence as a result (which is why E2E tests are critical). Remember, we're\ndoing it and recognizing that we're trading confidence for some practicality or\nconvenience in our testing. (Read more about this in my blog post:\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://kentcdodds.com/blog/the-merits-of-mocking\"\n        }}>{`The Merits of Mocking`}</a>{`).\nTo learn more about what \"mocking\" even is, take a look at my blog post\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://kentcdodds.com/blog/but-really-what-is-a-javascript-mock\"\n        }}>{`But really, what is a JavaScript mock?`}</a></p>\n    </blockquote>\n    <p>{`An example is when Kent needed to mock the browser `}<inlineCode parentName=\"p\">{`window.resizeTo`}</inlineCode>{` and polyfill `}<inlineCode parentName=\"p\">{`window.matchMedia`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import matchMediaPolyfill from 'mq-polyfill';\n\nbeforeAll(() => {\n  matchMediaPolyfill(window);\n  window.resizeTo = function resizeTo(width, height) {\n    Object.assign(this, {\n      innerWidth: width,\n      innerHeight: height,\n      outerWidth: width,\n      outerHeight: height,\n    }).dispatchEvent(new this.Event('resize'));\n  };\n});\n`}</code></pre>\n    <p>{`This allows to capability of continuing to test in Jest while not running in a browser.`}</p>\n    <p>{`Sometimes, a module is doing something you don't want to actually do in tests.\nJest makes it relatively simple to mock a module:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// math.js\nexport const add = (a, b) => a + b;\nexport const subtract = (a, b) => a - b;\n\n// __tests__/some-test.js\nimport { add, subtract } from '../math';\n\njest.mock('../math');\n\n// now all the function exports from the \"math.js\" module are jest mock functions\n// so we can call .mockImplementation(...) on them\n// and make assertions like .toHaveBeenCalledTimes(...)\n`}</code></pre>\n    <p>{`Additionally, if you'd like to mock only `}<em parentName=\"p\">{`parts`}</em>{` of a module, you can provide\nyour own \"mock module getter\" function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`jest.mock('../math', () => {\n  const actualMath = jest.requireActual('../math');\n  return {\n    ...actualMath,\n    subtract: jest.fn(),\n  };\n});\n\n// now the \\`add\\` export is the normal function,\n// but the \\`subtract\\` export is a mock function.\n`}</code></pre>\n    <p>{`Mocking in action:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// mocking Browser APIs and modules\n// http://localhost:3000/location\n\nimport * as React from 'react';\nimport { render, screen, act } from '@testing-library/react';\nimport Location from '../../examples/location';\n\nbeforeAll(() => {\n  window.navigator.geolocation = {\n    getCurrentPosition: jest.fn(),\n  };\n});\n\nfunction deferred() {\n  let resolve, reject;\n  const promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return { promise, resolve, reject };\n}\n\ntest('displays the users current location', async () => {\n  const fakePosition = {\n    coords: {\n      latitude: 35,\n      longitude: 139,\n    },\n  };\n  const { promise, resolve } = deferred();\n  window.navigator.geolocation.getCurrentPosition.mockImplementation(\n    callback => {\n      promise.then(() => callback(fakePosition));\n    },\n  );\n\n  render(<Location />);\n\n  expect(screen.getByLabelText(/loading/i)).toBeInTheDocument();\n\n  await act(async () => {\n    resolve();\n    await promise;\n  });\n\n  expect(screen.queryByLabelText(/loading/i)).not.toBeInTheDocument();\n\n  expect(screen.getByText(/latitude/i)).toHaveTextContent(\n    \\`Latitude: \\${fakePosition.coords.latitude}\\`,\n  );\n  expect(screen.getByText(/longitude/i)).toHaveTextContent(\n    \\`Longitude: \\${fakePosition.coords.longitude}\\`,\n  );\n});\n`}</code></pre>\n    <p>{`The act function is placed around the resolve (you'll see the error show up in the console) and it happens because the callback is updating the state in a 3rd-party component being used.`}</p>\n    <p>{`We need to ensure all the side-effects are flushed before we continuing with the tests (effects that may be inperceivable to us).`}</p>\n    <p>{`It will now ensure that UI is stable. It is one of the few places where you need to use the `}<inlineCode parentName=\"p\">{`act`}</inlineCode>{` API.`}</p>\n    <h3 {...{\n      \"id\": \"act-function\"\n    }}>{`Act Function`}</h3>\n    <p>{`In the above.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// mocking Browser APIs and modules\n// 💯 test the unhappy path\n// http://localhost:3000/location\n\nimport React from 'react';\nimport { render, screen, act } from '@testing-library/react';\nimport Location from '../../examples/location';\n\nbeforeAll(() => {\n  window.navigator.geolocation = {\n    getCurrentPosition: jest.fn(),\n  };\n});\n\nfunction deferred() {\n  let resolve, reject;\n  const promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return { promise, resolve, reject };\n}\n\ntest('displays the users current location', async () => {\n  const fakePosition = {\n    coords: {\n      latitude: 35,\n      longitude: 139,\n    },\n  };\n  const { promise, resolve } = deferred();\n  window.navigator.geolocation.getCurrentPosition.mockImplementation(\n    callback => {\n      promise.then(() => callback(fakePosition));\n    },\n  );\n\n  render(<Location />);\n\n  expect(screen.getByLabelText(/loading/i)).toBeInTheDocument();\n\n  await act(async () => {\n    resolve();\n    await promise;\n  });\n\n  expect(screen.queryByLabelText(/loading/i)).not.toBeInTheDocument();\n\n  expect(screen.getByText(/latitude/i)).toHaveTextContent(\n    \\`Latitude: \\${fakePosition.coords.latitude}\\`,\n  );\n  expect(screen.getByText(/longitude/i)).toHaveTextContent(\n    \\`Longitude: \\${fakePosition.coords.longitude}\\`,\n  );\n});\n\ntest('displays error message when geolocation is not supported', async () => {\n  const fakeError = new Error(\n    'Geolocation is not supported or permission denied',\n  );\n  const { promise, reject } = deferred();\n\n  window.navigator.geolocation.getCurrentPosition.mockImplementation(\n    (successCallback, errorCallback) => {\n      promise.catch(() => errorCallback(fakeError));\n    },\n  );\n\n  render(<Location />);\n\n  expect(screen.getByLabelText(/loading/i)).toBeInTheDocument();\n\n  await act(async () => {\n    reject();\n  });\n\n  expect(screen.queryByLabelText(/loading/i)).not.toBeInTheDocument();\n\n  expect(screen.getByRole('alert')).toHaveTextContent(fakeError.message);\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mock-the-module\"\n    }}>{`Mock the module`}</h3>\n    <p>{`This is an alternative way to solve the problem through mocking.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// mocking Browser APIs and modules\n// 💯 mock the module\n// http://localhost:3000/location\n\nimport * as React from 'react';\nimport { render, screen, act } from '@testing-library/react';\nimport { useCurrentPosition } from 'react-use-geolocation';\nimport Location from '../../examples/location';\n\njest.mock('react-use-geolocation');\n\ntest('displays the users current location', async () => {\n  const fakePosition = {\n    coords: {\n      latitude: 35,\n      longitude: 139,\n    },\n  };\n\n  let setReturnValue;\n  function useMockCurrentPosition() {\n    const state = React.useState([]);\n    setReturnValue = state[1];\n    return state[0];\n  }\n  useCurrentPosition.mockImplementation(useMockCurrentPosition);\n\n  render(<Location />);\n  expect(screen.getByLabelText(/loading/i)).toBeInTheDocument();\n\n  act(() => {\n    setReturnValue([fakePosition]);\n  });\n\n  expect(screen.queryByLabelText(/loading/i)).not.toBeInTheDocument();\n  expect(screen.getByText(/latitude/i)).toHaveTextContent(\n    \\`Latitude: \\${fakePosition.coords.latitude}\\`,\n  );\n  expect(screen.getByText(/longitude/i)).toHaveTextContent(\n    \\`Longitude: \\${fakePosition.coords.longitude}\\`,\n  );\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"context-and-custom-render-method\"\n    }}>{`Context and Custom Render Method`}</h2>\n    <p>{`How to test components that use context.`}</p>\n    <p>{`From the lesson:`}</p>\n    <p>{`A common question when testing React components is what to do with React\ncomponents that use context values. If you take a step back and consider the\nguiding testing philosophy of writing tests that resemble the way our software\nis used, then you'll know that you want to render your component with the\nprovider:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`render(\n  <ContextProvider>\n    <ComponentToTest />\n  </ContextProvider>,\n);\n`}</code></pre>\n    <p>{`The one problem with this is if you want to re-render the `}<inlineCode parentName=\"p\">{`<ComponentToTest />`}</inlineCode>{`\n(for example, to give it new props and test how it responds to updated props),\nthen you have to include the context providers:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { rerender } = render(\n  <ContextProvider>\n    <ComponentToTest />\n  </ContextProvider>,\n);\n\nrerender(\n  <ContextProvider>\n    <ComponentToTest newProp={true} />\n  </ContextProvider>,\n);\n`}</code></pre>\n    <p>{`This is kind of annoying, so instead, you can provide a `}<inlineCode parentName=\"p\">{`wrapper`}</inlineCode>{` option and\nthat will ensure that rerenders are wrapped as well:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function Wrapper({ children }) {\n  return <ContextProvider>{children}</ContextProvider>;\n}\n\nconst { rerender } = render(<ComponentToTest />, { wrapper: Wrapper });\n\nrerender(<ComponentToTest newProp={true} />);\n`}</code></pre>\n    <p>{`📜 `}<a parentName=\"p\" {...{\n        \"href\": \"https://testing-library.com/docs/react-testing-library/api#wrapper\"\n      }}>{`https://testing-library.com/docs/react-testing-library/api#wrapper`}</a></p>\n    <p>{`This `}<inlineCode parentName=\"p\">{`Wrapper`}</inlineCode>{` could include providers for all your context providers in your\napp: Router, Theme, Authentication, etc.`}</p>\n    <p>{`To take it further, you could create your own custom render method that does\nthis automatically:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { render as rtlRender } from '@testing-library/react';\n// \"rtl\" is short for \"react testing library\" not \"right-to-left\" 😅\n\nfunction render(ui, options) {\n  return rtlRender(ui, { wrapper: Wrapper, ...options });\n}\n\n// then in your tests, you don't need to worry about context at all:\nconst { rerender } = render(<ComponentToTest />);\n\nrerender(<ComponentToTest newProp={true} />);\n`}</code></pre>\n    <p>{`From there, you can put that custom render function in your own module and use\nyour custom render method instead of the built-in one from React Testing\nLibrary. Learn more about this from the docs:`}</p>\n    <p>{`📜 `}<a parentName=\"p\" {...{\n        \"href\": \"https://testing-library.com/docs/react-testing-library/setup\"\n      }}>{`https://testing-library.com/docs/react-testing-library/setup`}</a></p>\n    <p>{`A basic example of this in practise (not the custom setup):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// testing with context and a custom render method\n// http://localhost:3000/easy-button\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { ThemeProvider } from '../../components/theme';\nimport EasyButton from '../../components/easy-button';\n\ntest('renders with the light styles for the light theme', () => {\n  const Wrapper = ({ children }) => (\n    <ThemeProvider initialTheme=\"light\">{children}</ThemeProvider>\n  );\n  render(<EasyButton>Easy</EasyButton>, { wrapper: Wrapper });\n  const button = screen.getByRole('button', { name: /easy/i });\n  expect(button).toHaveStyle(\\`\n    background-color: white;\n    color: black;\n  \\`);\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"render-method\"\n    }}>{`Render Method`}</h3>\n    <p>{`This will be a special render function to encaspsulate the duplication.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// testing with context and a custom render method\n// 💯 create a custom render method\n// http://localhost:3000/easy-button\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { ThemeProvider } from '../../components/theme';\nimport EasyButton from '../../components/easy-button';\n\nfunction renderWithProviders(ui, { theme = 'light', ...options } = {}) {\n  const Wrapper = ({ children }) => (\n    <ThemeProvider value={[theme, () => {}]}>{children}</ThemeProvider>\n  );\n  return render(ui, { wrapper: Wrapper, ...options });\n}\n\ntest('renders with the light styles for the light theme', () => {\n  renderWithProviders(<EasyButton>Easy</EasyButton>);\n  const button = screen.getByRole('button', { name: /easy/i });\n  expect(button).toHaveStyle(\\`\n    background-color: white;\n    color: black;\n  \\`);\n});\n\ntest('renders with the dark styles for the dark theme', () => {\n  renderWithProviders(<EasyButton>Easy</EasyButton>, {\n    theme: 'dark',\n  });\n  const button = screen.getByRole('button', { name: /easy/i });\n  expect(button).toHaveStyle(\\`\n    background-color: black;\n    color: white;\n  \\`);\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"app-test-utils\"\n    }}>{`App Test Utils`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`\"Now, we want to swap the @testing-library/react module with our app-test-utils. What I recommend for every application that's using React Testing Library, your test should not import @testing-library/react.`}</em>{` > `}<em parentName=\"p\">{`\"Instead, you should make your own module that re-exports everything from @testing-library/react and has a render() with providers type of function. We've already got this if we go to our test directory and then test-utils. Then right in here, we are doing something that looks a little familiar.\"`}</em></p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// testing with context and a custom render method\n// 💯 swap @testing-library/react with app test utils\n// http://localhost:3000/easy-button\n\nimport * as React from 'react';\nimport { render, screen } from 'test/test-utils';\nimport EasyButton from '../../components/easy-button';\n\ntest('renders with the light styles for the light theme', () => {\n  render(<EasyButton>Easy</EasyButton>, { theme: 'light' });\n  const button = screen.getByRole('button', { name: /easy/i });\n  expect(button).toHaveStyle(\\`\n    background-color: white;\n    color: black;\n  \\`);\n});\n\ntest('renders with the dark styles for the dark theme', () => {\n  render(<EasyButton>Easy</EasyButton>, { theme: 'dark' });\n  const button = screen.getByRole('button', { name: /easy/i });\n  expect(button).toHaveStyle(\\`\n    background-color: black;\n    color: white;\n  \\`);\n});\n`}</code></pre>\n    <p>{`You can setup the relative path to be absolute if you setup you `}<inlineCode parentName=\"p\">{`jest.config.js`}</inlineCode>{` file correctly to handle it under `}<inlineCode parentName=\"p\">{`moduleDirectories`}</inlineCode>{`!`}</p>\n    <p>{`Docs can be found on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://jestjs.io/docs/en/configuration\"\n      }}>{`Jest website`}</a></p>\n    <h2 {...{\n      \"id\": \"testing-custom-hooks\"\n    }}>{`Testing Custom Hooks`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`\"Testing custom hooks is probably something you shouldn't do. You should just test those components.\"`}</em></p>\n    </blockquote>\n    <p>{`Kent considers it to be more of an implementation detail.`}</p>\n    <p>{`Going with the first option of testing the component using it, we have the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// testing custom hooks\n// http://localhost:3000/counter-hook\n\nimport * as React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport useCounter from '../../components/use-counter';\n\nfunction UseCounterHookExample() {\n  const { count, increment, decrement } = useCounter();\n  return (\n    <div>\n      <div>Current count: {count}</div>\n      <button onClick={decrement}>Decrement</button>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n\ntest('exposes the count and increment/decrement functions', () => {\n  render(<UseCounterHookExample />);\n  const increment = screen.getByRole('button', { name: /increment/i });\n  const decrement = screen.getByRole('button', { name: /decrement/i });\n  const message = screen.getByText(/current count/i);\n\n  expect(message).toHaveTextContent('Current count: 0');\n  userEvent.click(increment);\n  expect(message).toHaveTextContent('Current count: 1');\n  userEvent.click(decrement);\n  expect(message).toHaveTextContent('Current count: 0');\n});\n`}</code></pre>\n    <p>{`Kent mentions that this is the type of test that he would write.`}</p>\n    <h3 {...{\n      \"id\": \"using-a-fake-component\"\n    }}>{`Using a fake component`}</h3>\n    <p>{`This removes the use an example component altogether. This is useful for complicated custom hooks.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// testing custom hooks\n// 💯 fake component\n// http://localhost:3000/counter-hook\n\nimport * as React from 'react';\nimport { render, act } from '@testing-library/react';\nimport useCounter from '../../components/use-counter';\n\ntest('exposes the count and increment/decrement functions', () => {\n  let result;\n  function TestComponent() {\n    result = useCounter();\n    return null;\n  }\n  render(<TestComponent />);\n  expect(result.count).toBe(0);\n  act(() => result.increment());\n  expect(result.count).toBe(1);\n  act(() => result.decrement());\n  expect(result.count).toBe(0);\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"using-a-setup-function-and-implementing-more-tests\"\n    }}>{`Using a setup function and implementing more tests`}</h3>\n    <p>{`This is for abstraction of reused faking.`}</p>\n    <p>{`We need to also ues `}<inlineCode parentName=\"p\">{`result.current`}</inlineCode>{` due to referential binding. Without it, each re-render for `}<inlineCode parentName=\"p\">{`TestComponent`}</inlineCode>{` would reset the `}<inlineCode parentName=\"p\">{`result`}</inlineCode>{` variable in setup.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// testing custom hooks\n// 💯 setup function\n// http://localhost:3000/counter-hook\n\nimport * as React from 'react';\nimport { render, act } from '@testing-library/react';\nimport useCounter from '../../components/use-counter';\n\nfunction setup({ initialProps } = {}) {\n  const result = {};\n  function TestComponent(props) {\n    result.current = useCounter(props);\n    return null;\n  }\n  render(<TestComponent {...initialProps} />);\n  return result;\n}\n\ntest('exposes the count and increment/decrement functions', () => {\n  const result = setup();\n  expect(result.current.count).toBe(0);\n  act(() => result.current.increment());\n  expect(result.current.count).toBe(1);\n  act(() => result.current.decrement());\n  expect(result.current.count).toBe(0);\n});\n\ntest('allows customization of the initial count', () => {\n  const result = setup({ initialProps: { initialCount: 3 } });\n  expect(result.current.count).toBe(3);\n});\n\ntest('allows customization of the step', () => {\n  const result = setup({ initialProps: { step: 2 } });\n  expect(result.current.count).toBe(0);\n  act(() => result.current.increment());\n  expect(result.current.count).toBe(2);\n  act(() => result.current.decrement());\n  expect(result.current.count).toBe(0);\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"using-react-hooks-testing-library\"\n    }}>{`Using React-Hooks Testing Library`}</h3>\n    <p>{`The final option is to avoid all the complexity and just use the React-Hooks testing library:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// testing custom hooks\n// 💯 using react-hooks testing library\n// http://localhost:3000/counter-hook\n\nimport { renderHook, act } from '@testing-library/react-hooks';\nimport useCounter from '../../components/use-counter';\n\ntest('exposes the count and increment/decrement functions', () => {\n  const { result } = renderHook(useCounter);\n  expect(result.current.count).toBe(0);\n  act(() => result.current.increment());\n  expect(result.current.count).toBe(1);\n  act(() => result.current.decrement());\n  expect(result.current.count).toBe(0);\n});\n\ntest('allows customization of the initial count', () => {\n  const { result } = renderHook(useCounter, {\n    initialProps: { initialCount: 3 },\n  });\n  expect(result.current.count).toBe(3);\n});\n\ntest('allows customization of the step', () => {\n  const { result } = renderHook(useCounter, { initialProps: { step: 2 } });\n  expect(result.current.count).toBe(0);\n  act(() => result.current.increment());\n  expect(result.current.count).toBe(2);\n  act(() => result.current.decrement());\n  expect(result.current.count).toBe(0);\n});\n\ntest('the step can be changed', () => {\n  const { result, rerender } = renderHook(useCounter, {\n    initialProps: { step: 3 },\n  });\n  expect(result.current.count).toBe(0);\n  act(() => result.current.increment());\n  expect(result.current.count).toBe(3);\n  rerender({ step: 2 });\n  act(() => result.current.decrement());\n  expect(result.current.count).toBe(1);\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}