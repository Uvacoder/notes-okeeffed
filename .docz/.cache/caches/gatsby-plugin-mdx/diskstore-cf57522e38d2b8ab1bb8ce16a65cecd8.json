{"expireTime":9007200852878359000,"key":"gatsby-plugin-mdx-entire-payload-851aa0c066b6f8adcefffce0242d81f6-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Node.js SaaS with Stripe","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":27,"offset":193},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":27,"offset":193},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The basics plan is to:","position":{"start":{"line":10,"column":1,"offset":195},"end":{"line":10,"column":23,"offset":217},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":195},"end":{"line":10,"column":23,"offset":217},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a test customer for the subscription.","position":{"start":{"line":12,"column":4,"offset":222},"end":{"line":12,"column":48,"offset":266},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":222},"end":{"line":12,"column":48,"offset":266},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":219},"end":{"line":12,"column":48,"offset":266},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a product.","position":{"start":{"line":13,"column":4,"offset":270},"end":{"line":13,"column":21,"offset":287},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":270},"end":{"line":13,"column":21,"offset":287},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":267},"end":{"line":13,"column":21,"offset":287},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a plan for that product.","position":{"start":{"line":14,"column":4,"offset":291},"end":{"line":14,"column":35,"offset":322},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":291},"end":{"line":14,"column":35,"offset":322},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":288},"end":{"line":14,"column":35,"offset":322},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a subscription for that plan.","position":{"start":{"line":15,"column":4,"offset":326},"end":{"line":15,"column":40,"offset":362},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":326},"end":{"line":15,"column":40,"offset":362},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":323},"end":{"line":15,"column":40,"offset":362},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Repeating for a few products.","position":{"start":{"line":16,"column":4,"offset":366},"end":{"line":16,"column":33,"offset":395},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":366},"end":{"line":16,"column":33,"offset":395},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":363},"end":{"line":16,"column":33,"offset":395},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Writing a test script to do all this.","position":{"start":{"line":17,"column":4,"offset":399},"end":{"line":17,"column":41,"offset":436},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":399},"end":{"line":17,"column":41,"offset":436},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":396},"end":{"line":17,"column":41,"offset":436},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Fetching back a list of subscriptions for that particular user.","position":{"start":{"line":18,"column":4,"offset":440},"end":{"line":18,"column":67,"offset":503},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":440},"end":{"line":18,"column":67,"offset":503},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":437},"end":{"line":18,"column":67,"offset":503},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Writing out an example using Express servers.","position":{"start":{"line":19,"column":4,"offset":507},"end":{"line":19,"column":49,"offset":552},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":507},"end":{"line":19,"column":49,"offset":552},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":504},"end":{"line":19,"column":49,"offset":552},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":219},"end":{"line":19,"column":49,"offset":552},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Building out the base functions to use for the Express app","position":{"start":{"line":21,"column":4,"offset":557},"end":{"line":21,"column":62,"offset":615},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":554},"end":{"line":21,"column":62,"offset":615},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// controllers/stripe/index.js\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n\n/**\n * Create a new customer based off an email address.\n *\n * @param {string} email\n * @returns {Promise} Result of attempting to create a customer.\n */\nfunction customerCreate(email) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const customer = await stripe.customers.create({ email: email });\n      resolve(customer);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Register a new product.\n * @example\n * {\n * name: 'My SaaS Platform',\n * type: 'service'\n * }\n *\n * @param {Object} data Name and type of product\n * @returns {Promise} Request to create new product\n */\nfunction productCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.products.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Create a new plan with a product.\n * @example\n * {\n * currency: 'usd',\n * interval: 'month',\n * product: 'prod_id',\n * nickname: 'Pro Plan',\n * amount: 12\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction planCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.plans.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Create a new subscription for a user based on * a plan.\n * @example\n * {\n * customer: 'customer_id',\n * items: [\n *   {\n *     plan: 'plan_abc',\n *     quantity: 2\n *   }\n * ]\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction subscriptionCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.subscriptions.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Fetch the subscription list.\n * @example\n * {\n * { limit: 99 },\n * customer: 'cus_id'\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction subscriptionList(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.subscriptions.list(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}","position":{"start":{"line":23,"column":1,"offset":617},"end":{"line":139,"column":4,"offset":2790},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":142,"column":1,"offset":2793},"end":{"line":142,"column":31,"offset":2823},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":142,"column":31,"offset":2823}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"nodejs-saas-with-stripe\"\n    }}>{`Node.js SaaS with Stripe`}</h1>\n    <p>{`The basics plan is to:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a test customer for the subscription.`}</li>\n      <li parentName=\"ol\">{`Create a product.`}</li>\n      <li parentName=\"ol\">{`Create a plan for that product.`}</li>\n      <li parentName=\"ol\">{`Create a subscription for that plan.`}</li>\n      <li parentName=\"ol\">{`Repeating for a few products.`}</li>\n      <li parentName=\"ol\">{`Writing a test script to do all this.`}</li>\n      <li parentName=\"ol\">{`Fetching back a list of subscriptions for that particular user.`}</li>\n      <li parentName=\"ol\">{`Writing out an example using Express servers.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"building-out-the-base-functions-to-use-for-the-express-app\"\n    }}>{`Building out the base functions to use for the Express app`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// controllers/stripe/index.js\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n\n/**\n * Create a new customer based off an email address.\n *\n * @param {string} email\n * @returns {Promise} Result of attempting to create a customer.\n */\nfunction customerCreate(email) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const customer = await stripe.customers.create({ email: email });\n      resolve(customer);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Register a new product.\n * @example\n * {\n * name: 'My SaaS Platform',\n * type: 'service'\n * }\n *\n * @param {Object} data Name and type of product\n * @returns {Promise} Request to create new product\n */\nfunction productCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.products.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Create a new plan with a product.\n * @example\n * {\n * currency: 'usd',\n * interval: 'month',\n * product: 'prod_id',\n * nickname: 'Pro Plan',\n * amount: 12\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction planCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.plans.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Create a new subscription for a user based on * a plan.\n * @example\n * {\n * customer: 'customer_id',\n * items: [\n *   {\n *     plan: 'plan_abc',\n *     quantity: 2\n *   }\n * ]\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction subscriptionCreate(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.subscriptions.create(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Fetch the subscription list.\n * @example\n * {\n * { limit: 99 },\n * customer: 'cus_id'\n * }\n *\n * @param {*} data\n * @returns\n */\nfunction subscriptionList(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await stripe.subscriptions.list(data);\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}