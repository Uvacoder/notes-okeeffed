{"expireTime":9007200867243027000,"key":"gatsby-plugin-mdx-entire-payload-6281b83ad2239cd068b4f2ae42e815c3-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Duck Typing in TypeScript","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":28,"offset":194},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":28,"offset":194},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is an example of typing in TS:","position":{"start":{"line":10,"column":1,"offset":196},"end":{"line":10,"column":36,"offset":231},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":196},"end":{"line":10,"column":36,"offset":231},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"interface Vehicle {\n  model: number;\n}\n\ninterface StrVehicle {\n  model: string;\n}\n\nclass Car {\n  model;\n\n  constructor(model) {\n    this.model = model;\n  }\n\n  getModel() {\n    return this.model;\n  }\n}\n\nconst otherCar: Vehicle = new Car(4);\notherCar.model;\n\nconst strCar: StrVehicle = new Car('mitsubishi');\nstrCar.model;\n\nclass StrictCar implements Vehicle {\n  model: number;\n\n  constructor(props) {\n    this.model = model;\n  }\n\n  getModel() {\n    return this.model;\n  }\n}\n\nconst otherCar2: Vehicle = new StrictCar(4);\notherCar.model;\n\n// Throws error: `StrVehicle not assignable to StrictCar`\nconst strCar2: StrVehicle = new StrictCar('mitsubishi');\nstrCar.model;","position":{"start":{"line":12,"column":1,"offset":233},"end":{"line":57,"column":4,"offset":907},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":60,"column":1,"offset":910},"end":{"line":60,"column":31,"offset":940},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":60,"column":31,"offset":940}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"duck-typing-in-typescript\"\n    }}>{`Duck Typing in TypeScript`}</h1>\n    <p>{`This is an example of typing in TS:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface Vehicle {\n  model: number;\n}\n\ninterface StrVehicle {\n  model: string;\n}\n\nclass Car {\n  model;\n\n  constructor(model) {\n    this.model = model;\n  }\n\n  getModel() {\n    return this.model;\n  }\n}\n\nconst otherCar: Vehicle = new Car(4);\notherCar.model;\n\nconst strCar: StrVehicle = new Car('mitsubishi');\nstrCar.model;\n\nclass StrictCar implements Vehicle {\n  model: number;\n\n  constructor(props) {\n    this.model = model;\n  }\n\n  getModel() {\n    return this.model;\n  }\n}\n\nconst otherCar2: Vehicle = new StrictCar(4);\notherCar.model;\n\n// Throws error: \\`StrVehicle not assignable to StrictCar\\`\nconst strCar2: StrVehicle = new StrictCar('mitsubishi');\nstrCar.model;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}