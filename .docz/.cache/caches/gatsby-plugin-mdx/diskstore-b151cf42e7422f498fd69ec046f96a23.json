{"expireTime":9007200849425595000,"key":"gatsby-plugin-mdx-entire-payload-682fb48432a7b0cbd7d7696006570a2f-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Autocompletion","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":17,"offset":183},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":17,"offset":183},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":188},"end":{"line":10,"column":13,"offset":197},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":185},"end":{"line":10,"column":13,"offset":197},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://iridakos.com/programming/2018/03/01/bash-programmable-completion-tutorial","children":[{"type":"text","value":"Bash Autocompletion","position":{"start":{"line":12,"column":5,"offset":203},"end":{"line":12,"column":24,"offset":222},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":202},"end":{"line":12,"column":108,"offset":306},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":202},"end":{"line":12,"column":108,"offset":306},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":199},"end":{"line":12,"column":108,"offset":306},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":199},"end":{"line":12,"column":108,"offset":306},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":14,"column":4,"offset":311},"end":{"line":14,"column":11,"offset":318},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":308},"end":{"line":14,"column":11,"offset":318},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Write a bash file. This Example autocompletes words for ","position":{"start":{"line":16,"column":1,"offset":320},"end":{"line":16,"column":57,"offset":376},"indent":[]}},{"type":"inlineCode","value":"example","position":{"start":{"line":16,"column":57,"offset":376},"end":{"line":16,"column":66,"offset":385},"indent":[]}},{"type":"text","value":" with one of \"init install store search deploy bump push pull help sync info remove version autocomplete\", and then repeats a similar ordeal for the second word if it is ","position":{"start":{"line":16,"column":66,"offset":385},"end":{"line":16,"column":236,"offset":555},"indent":[]}},{"type":"inlineCode","value":"store","position":{"start":{"line":16,"column":236,"offset":555},"end":{"line":16,"column":243,"offset":562},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":16,"column":243,"offset":562},"end":{"line":16,"column":247,"offset":566},"indent":[]}},{"type":"inlineCode","value":"show","position":{"start":{"line":16,"column":247,"offset":566},"end":{"line":16,"column":253,"offset":572},"indent":[]}},{"type":"text","value":" to autocomplete to the list \"test\".","position":{"start":{"line":16,"column":253,"offset":572},"end":{"line":16,"column":289,"offset":608},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":320},"end":{"line":16,"column":289,"offset":608},"indent":[]}},{"type":"code","lang":"sh","meta":null,"value":"#!/bin/bash\n_example_options()\n{\n   local cur prev\n\n   cur=${COMP_WORDS[COMP_CWORD]}\n   prev=${COMP_WORDS[COMP_CWORD-1]}\n\n   case ${COMP_CWORD} in\n       1)\n           COMPREPLY=($(compgen -W \"init install store search deploy bump push pull help sync info remove version autocomplete\" -- ${cur}))\n       ;;\n       2)\n           case ${prev} in\n               store)\n                   COMPREPLY=($(compgen -W \"test\" -- ${cur}))\n               ;;\n               show)\n                   COMPREPLY=($(compgen -W \"test\" -- ${cur}))\n               ;;\n           esac\n       ;;\n       *)\n           COMPREPLY=()\n       ;;\n   esac\n}\n\ncomplete -F _example_options example","position":{"start":{"line":18,"column":1,"offset":610},"end":{"line":48,"column":4,"offset":1284},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Once completed, you can run ","position":{"start":{"line":50,"column":1,"offset":1286},"end":{"line":50,"column":29,"offset":1314},"indent":[]}},{"type":"inlineCode","value":"source path/to/file","position":{"start":{"line":50,"column":29,"offset":1314},"end":{"line":50,"column":50,"offset":1335},"indent":[]}},{"type":"text","value":" and have the commands available for the session.","position":{"start":{"line":50,"column":50,"offset":1335},"end":{"line":50,"column":99,"offset":1384},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1286},"end":{"line":50,"column":99,"offset":1384},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":53,"column":1,"offset":1387},"end":{"line":53,"column":31,"offset":1417},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":53,"column":31,"offset":1417}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"autocompletion\"\n    }}>{`Autocompletion`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://iridakos.com/programming/2018/03/01/bash-programmable-completion-tutorial\"\n        }}>{`Bash Autocompletion`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Write a bash file. This Example autocompletes words for `}<inlineCode parentName=\"p\">{`example`}</inlineCode>{` with one of \"init install store search deploy bump push pull help sync info remove version autocomplete\", and then repeats a similar ordeal for the second word if it is `}<inlineCode parentName=\"p\">{`store`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`show`}</inlineCode>{` to autocomplete to the list \"test\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`#!/bin/bash\n_example_options()\n{\n   local cur prev\n\n   cur=\\${COMP_WORDS[COMP_CWORD]}\n   prev=\\${COMP_WORDS[COMP_CWORD-1]}\n\n   case \\${COMP_CWORD} in\n       1)\n           COMPREPLY=($(compgen -W \"init install store search deploy bump push pull help sync info remove version autocomplete\" -- \\${cur}))\n       ;;\n       2)\n           case \\${prev} in\n               store)\n                   COMPREPLY=($(compgen -W \"test\" -- \\${cur}))\n               ;;\n               show)\n                   COMPREPLY=($(compgen -W \"test\" -- \\${cur}))\n               ;;\n           esac\n       ;;\n       *)\n           COMPREPLY=()\n       ;;\n   esac\n}\n\ncomplete -F _example_options example\n`}</code></pre>\n    <p>{`Once completed, you can run `}<inlineCode parentName=\"p\">{`source path/to/file`}</inlineCode>{` and have the commands available for the session.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}