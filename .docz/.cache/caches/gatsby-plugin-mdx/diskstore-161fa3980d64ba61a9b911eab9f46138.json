{"expireTime":9007200852878380000,"key":"gatsby-plugin-mdx-entire-payload-eebf0888743e8868d4741e107fb6f04f-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"PHP Array Method Applications","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":32,"offset":198},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":32,"offset":198},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This covers the basic actions of applying a push, pop, shift and unshift function with PHP.","position":{"start":{"line":10,"column":1,"offset":200},"end":{"line":10,"column":92,"offset":291},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":200},"end":{"line":10,"column":92,"offset":291},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These functions are incredibly useful for data structure implementations.","position":{"start":{"line":12,"column":1,"offset":293},"end":{"line":12,"column":74,"offset":366},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":293},"end":{"line":12,"column":74,"offset":366},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Push","position":{"start":{"line":14,"column":4,"offset":371},"end":{"line":14,"column":8,"offset":375},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":368},"end":{"line":14,"column":8,"offset":375},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using ","position":{"start":{"line":16,"column":1,"offset":377},"end":{"line":16,"column":7,"offset":383},"indent":[]}},{"type":"inlineCode","value":"array_push","position":{"start":{"line":16,"column":7,"offset":383},"end":{"line":16,"column":19,"offset":395},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":16,"column":19,"offset":395},"end":{"line":16,"column":20,"offset":396},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":377},"end":{"line":16,"column":20,"offset":396},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// create our array with 1 element\n$arr = array(\"one\");\n// $count will be 3 and $arr will now be array(\"one\",\"two\",\"three\");\n$count = array_push($arr,\"two\",\"three\");","position":{"start":{"line":18,"column":1,"offset":398},"end":{"line":23,"column":4,"offset":574},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternative using ","position":{"start":{"line":25,"column":1,"offset":576},"end":{"line":25,"column":19,"offset":594},"indent":[]}},{"type":"inlineCode","value":"$arr[]","position":{"start":{"line":25,"column":19,"offset":594},"end":{"line":25,"column":27,"offset":602},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":25,"column":27,"offset":602},"end":{"line":25,"column":28,"offset":603},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":576},"end":{"line":25,"column":28,"offset":603},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// create our array with 1 element\n$arr = array(\"one\");\n// $arr will now be array(\"one\",\"two\");\n$arr[] = \"two\";\n// $arr will now be array(\"one\",\"two\",\"three\");\n$arr[] = \"three\";\n// $count will be 3\n$count = count($arr)","position":{"start":{"line":27,"column":1,"offset":605},"end":{"line":36,"column":4,"offset":834},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternative using ","position":{"start":{"line":38,"column":1,"offset":836},"end":{"line":38,"column":19,"offset":854},"indent":[]}},{"type":"inlineCode","value":"$array_merge()","position":{"start":{"line":38,"column":19,"offset":854},"end":{"line":38,"column":35,"offset":870},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":38,"column":35,"offset":870},"end":{"line":38,"column":36,"offset":871},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":836},"end":{"line":38,"column":36,"offset":871},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// create our array with 1 element\n$arr = array(\"one\");\n// alternate method using array_merge()\n$arr = array_merge($arr,array(\"two\",\"three\")); // $arr will now be array(\"one\",\"two\",\"three\");\n$count = count($arr); // $count will be 3","position":{"start":{"line":40,"column":1,"offset":873},"end":{"line":46,"column":4,"offset":1116},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pop","position":{"start":{"line":48,"column":4,"offset":1121},"end":{"line":48,"column":7,"offset":1124},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1118},"end":{"line":48,"column":7,"offset":1124},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// create our array with 3 elements\n$arr = array(\"one\",\"two\",\"three\");\n// $value will be \"three\" and array's value will now be array(\"one\",\"two\");\n$value = array_pop($arr);","position":{"start":{"line":50,"column":1,"offset":1126},"end":{"line":55,"column":4,"offset":1309},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Shift","position":{"start":{"line":57,"column":4,"offset":1314},"end":{"line":57,"column":9,"offset":1319},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1311},"end":{"line":57,"column":9,"offset":1319},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// create our array with 3 elements\n$arr = array(\"one\",\"two\",\"three\");\n// $value will be \"one\" and array's value will now be array(\"two\",\"three\");\n$value = array_shift($arr);","position":{"start":{"line":59,"column":1,"offset":1321},"end":{"line":64,"column":4,"offset":1506},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Unshift","position":{"start":{"line":66,"column":4,"offset":1511},"end":{"line":66,"column":11,"offset":1518},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1508},"end":{"line":66,"column":11,"offset":1518},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"// create our array with 3 elements\n$arr = array(\"three\",\"four\",\"five\");\n// $count will now be 5 and array will hold one - five\n$count = array_unshift($arr,\"one\",\"two\");","position":{"start":{"line":68,"column":1,"offset":1520},"end":{"line":73,"column":4,"offset":1700},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example: Basic Tree Implementation","position":{"start":{"line":75,"column":4,"offset":1705},"end":{"line":75,"column":38,"offset":1739},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":1702},"end":{"line":75,"column":38,"offset":1739},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"<?php\n\nclass Tree {\n    function __construct($root = null) {\n        $this->root = $root;\n    }\n\n    public function bfs() {\n        // 1. shift val\n        // 2. if children, append to arr\n        // 3. append data to array to compare\n        if ($this->root == null) {\n            throw new Error(\"No tree root\");\n        }\n\n        $arr = array($this->root);\n        $res = [];\n\n        while (count($arr) > 0) {\n            $x = array_shift($arr);\n            if ($x->children != null) {\n                $arr = array_merge($arr, $x->children);\n            }\n\n            array_push($res, $x->data);\n        }\n        return $res;\n    }\n\n    public function dfs() {\n        // shift from arr\n        // if children exist, unshift array\n        // add data to res array\n\n        $res = [];\n        $arr = array($this->root);\n\n        while (count($arr) > 0) {\n            $x = array_shift($arr);\n            if ($x->children != null) {\n                $arr = array_merge($x->children, $arr);\n            }\n\n            array_push($res, $x->data);\n        }\n\n        return $res;\n    }\n}\n\nclass Node {\n    function __construct($data = null, $children = null) {\n        $this->data = $data;\n        $this->children = $children;\n    }\n}","position":{"start":{"line":77,"column":1,"offset":1741},"end":{"line":134,"column":4,"offset":2987},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources + Extra Reading","position":{"start":{"line":136,"column":4,"offset":2992},"end":{"line":136,"column":29,"offset":3017},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":2989},"end":{"line":136,"column":29,"offset":3017},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://www.thecave.info/php-array-push-pop-shift-and-unshift/","children":[{"type":"text","value":"http://www.thecave.info/php-array-push-pop-shift-and-unshift/","position":{"start":{"line":138,"column":1,"offset":3019},"end":{"line":138,"column":62,"offset":3080},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":3019},"end":{"line":138,"column":62,"offset":3080},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":3019},"end":{"line":138,"column":62,"offset":3080},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":141,"column":1,"offset":3083},"end":{"line":141,"column":31,"offset":3113},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":141,"column":31,"offset":3113}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"php-array-method-applications\"\n    }}>{`PHP Array Method Applications`}</h1>\n    <p>{`This covers the basic actions of applying a push, pop, shift and unshift function with PHP.`}</p>\n    <p>{`These functions are incredibly useful for data structure implementations.`}</p>\n    <h2 {...{\n      \"id\": \"push\"\n    }}>{`Push`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`array_push`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// create our array with 1 element\n$arr = array(\"one\");\n// $count will be 3 and $arr will now be array(\"one\",\"two\",\"three\");\n$count = array_push($arr,\"two\",\"three\");\n`}</code></pre>\n    <p>{`Alternative using `}<inlineCode parentName=\"p\">{`$arr[]`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// create our array with 1 element\n$arr = array(\"one\");\n// $arr will now be array(\"one\",\"two\");\n$arr[] = \"two\";\n// $arr will now be array(\"one\",\"two\",\"three\");\n$arr[] = \"three\";\n// $count will be 3\n$count = count($arr)\n`}</code></pre>\n    <p>{`Alternative using `}<inlineCode parentName=\"p\">{`$array_merge()`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// create our array with 1 element\n$arr = array(\"one\");\n// alternate method using array_merge()\n$arr = array_merge($arr,array(\"two\",\"three\")); // $arr will now be array(\"one\",\"two\",\"three\");\n$count = count($arr); // $count will be 3\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pop\"\n    }}>{`Pop`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// create our array with 3 elements\n$arr = array(\"one\",\"two\",\"three\");\n// $value will be \"three\" and array's value will now be array(\"one\",\"two\");\n$value = array_pop($arr);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shift\"\n    }}>{`Shift`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// create our array with 3 elements\n$arr = array(\"one\",\"two\",\"three\");\n// $value will be \"one\" and array's value will now be array(\"two\",\"three\");\n$value = array_shift($arr);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"unshift\"\n    }}>{`Unshift`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// create our array with 3 elements\n$arr = array(\"three\",\"four\",\"five\");\n// $count will now be 5 and array will hold one - five\n$count = array_unshift($arr,\"one\",\"two\");\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example-basic-tree-implementation\"\n    }}>{`Example: Basic Tree Implementation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\nclass Tree {\n    function __construct($root = null) {\n        $this->root = $root;\n    }\n\n    public function bfs() {\n        // 1. shift val\n        // 2. if children, append to arr\n        // 3. append data to array to compare\n        if ($this->root == null) {\n            throw new Error(\"No tree root\");\n        }\n\n        $arr = array($this->root);\n        $res = [];\n\n        while (count($arr) > 0) {\n            $x = array_shift($arr);\n            if ($x->children != null) {\n                $arr = array_merge($arr, $x->children);\n            }\n\n            array_push($res, $x->data);\n        }\n        return $res;\n    }\n\n    public function dfs() {\n        // shift from arr\n        // if children exist, unshift array\n        // add data to res array\n\n        $res = [];\n        $arr = array($this->root);\n\n        while (count($arr) > 0) {\n            $x = array_shift($arr);\n            if ($x->children != null) {\n                $arr = array_merge($x->children, $arr);\n            }\n\n            array_push($res, $x->data);\n        }\n\n        return $res;\n    }\n}\n\nclass Node {\n    function __construct($data = null, $children = null) {\n        $this->data = $data;\n        $this->children = $children;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources--extra-reading\"\n    }}>{`Resources + Extra Reading`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://www.thecave.info/php-array-push-pop-shift-and-unshift/\"\n      }}>{`http://www.thecave.info/php-array-push-pop-shift-and-unshift/`}</a></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}