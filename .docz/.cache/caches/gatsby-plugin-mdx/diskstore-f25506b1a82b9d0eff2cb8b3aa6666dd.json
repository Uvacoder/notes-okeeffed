{"expireTime":9007200867336010000,"key":"gatsby-plugin-mdx-entire-payload-5afdf87ecb109ea501b52920900a3ec5-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Alexa NodeJS Skill","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":21,"offset":187},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":21,"offset":187},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":192},"end":{"line":10,"column":13,"offset":201},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":189},"end":{"line":10,"column":13,"offset":201},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/alexa/skill-sample-nodejs-howto/blob/master/instructions","children":[{"type":"text","value":"Sample NodeJS Howto","position":{"start":{"line":12,"column":5,"offset":207},"end":{"line":12,"column":24,"offset":226},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":206},"end":{"line":12,"column":102,"offset":304},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":206},"end":{"line":12,"column":102,"offset":304},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":203},"end":{"line":12,"column":102,"offset":304},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-event-sources-readme.html","children":[{"type":"text","value":"CDK Event Sources","position":{"start":{"line":13,"column":5,"offset":309},"end":{"line":13,"column":22,"offset":326},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":308},"end":{"line":13,"column":109,"offset":413},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":308},"end":{"line":13,"column":109,"offset":413},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":305},"end":{"line":13,"column":109,"offset":413},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://docs.aws.amazon.com/lambda/latest/dg/lambda-services.html","children":[{"type":"text","value":"Lambdba Event Targets","position":{"start":{"line":14,"column":5,"offset":418},"end":{"line":14,"column":26,"offset":439},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":417},"end":{"line":14,"column":94,"offset":507},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":417},"end":{"line":14,"column":94,"offset":507},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":414},"end":{"line":14,"column":94,"offset":507},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":203},"end":{"line":14,"column":94,"offset":507},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"tl;dr","position":{"start":{"line":16,"column":4,"offset":512},"end":{"line":16,"column":9,"offset":517},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":509},"end":{"line":16,"column":9,"offset":517},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create Lambda Function","position":{"start":{"line":18,"column":4,"offset":522},"end":{"line":18,"column":26,"offset":544},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":522},"end":{"line":18,"column":26,"offset":544},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":519},"end":{"line":18,"column":26,"offset":544},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add ","position":{"start":{"line":19,"column":4,"offset":548},"end":{"line":19,"column":8,"offset":552},"indent":[]}},{"type":"inlineCode","value":"Alexa Skillskit","position":{"start":{"line":19,"column":8,"offset":552},"end":{"line":19,"column":25,"offset":569},"indent":[]}},{"type":"text","value":" trigger","position":{"start":{"line":19,"column":25,"offset":569},"end":{"line":19,"column":33,"offset":577},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":548},"end":{"line":19,"column":33,"offset":577},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":545},"end":{"line":19,"column":33,"offset":577},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add the code (examples) below","position":{"start":{"line":20,"column":4,"offset":581},"end":{"line":20,"column":33,"offset":610},"indent":[]}}],"position":{"start":{"line":20,"column":4,"offset":581},"end":{"line":20,"column":33,"offset":610},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":578},"end":{"line":20,"column":33,"offset":610},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Grab the ARN from the top-right and add it the Alexa developer portal","position":{"start":{"line":21,"column":4,"offset":614},"end":{"line":21,"column":73,"offset":683},"indent":[]}}],"position":{"start":{"line":21,"column":4,"offset":614},"end":{"line":21,"column":73,"offset":683},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":611},"end":{"line":21,"column":73,"offset":683},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":519},"end":{"line":21,"column":73,"offset":683},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Notes","position":{"start":{"line":23,"column":4,"offset":688},"end":{"line":23,"column":9,"offset":693},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":685},"end":{"line":23,"column":9,"offset":693},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You may need to add the ","position":{"start":{"line":25,"column":1,"offset":695},"end":{"line":25,"column":25,"offset":719},"indent":[]}},{"type":"inlineCode","value":"trigger","position":{"start":{"line":25,"column":25,"offset":719},"end":{"line":25,"column":34,"offset":728},"indent":[]}},{"type":"text","value":" yourself to the Lambda function.","position":{"start":{"line":25,"column":34,"offset":728},"end":{"line":25,"column":67,"offset":761},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":695},"end":{"line":25,"column":67,"offset":761},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example code","position":{"start":{"line":27,"column":4,"offset":766},"end":{"line":27,"column":16,"offset":778},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":763},"end":{"line":27,"column":16,"offset":778},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"index.js","position":{"start":{"line":29,"column":1,"offset":780},"end":{"line":29,"column":11,"offset":790},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":29,"column":11,"offset":790},"end":{"line":29,"column":12,"offset":791},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":780},"end":{"line":29,"column":12,"offset":791},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/* eslint-disable  func-names */\n/* eslint-disable  no-console */\n\nconst Alexa = require('ask-sdk-core');\nconst recipes = require('./recipes');\nconst i18n = require('i18next');\nconst sprintf = require('i18next-sprintf-postprocessor');\n\n/* INTENT HANDLERS */\nconst LaunchRequestHandler = {\n  canHandle(handlerInput) {\n    return handlerInput.requestEnvelope.request.type === 'LaunchRequest';\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    const item = requestAttributes.t(\n      getRandomItem(Object.keys(recipes.RECIPE_EN_US)),\n    );\n\n    const speakOutput = requestAttributes.t(\n      'WELCOME_MESSAGE',\n      requestAttributes.t('SKILL_NAME'),\n      item,\n    );\n    const repromptOutput = requestAttributes.t('WELCOME_REPROMPT');\n\n    handlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n\n    return handlerInput.responseBuilder\n      .speak(speakOutput)\n      .reprompt(repromptOutput)\n      .getResponse();\n  },\n};\n\nconst RecipeHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      handlerInput.requestEnvelope.request.intent.name === 'RecipeIntent'\n    );\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    const itemSlot = handlerInput.requestEnvelope.request.intent.slots.Item;\n    let itemName;\n    if (itemSlot && itemSlot.value) {\n      itemName = itemSlot.value.toLowerCase();\n    }\n\n    const cardTitle = requestAttributes.t(\n      'DISPLAY_CARD_TITLE',\n      requestAttributes.t('SKILL_NAME'),\n      itemName,\n    );\n    const myRecipes = requestAttributes.t('RECIPES');\n    const recipe = myRecipes[itemName];\n    let speakOutput = '';\n\n    if (recipe) {\n      sessionAttributes.speakOutput = recipe;\n      // uncomment the _2_ reprompt lines if you want to repeat the info\n      // and prompt for a subsequent action\n      // sessionAttributes.repromptSpeech = requestAttributes.t('RECIPE_REPEAT_MESSAGE');\n      handlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n\n      return (\n        handlerInput.responseBuilder\n          .speak(sessionAttributes.speakOutput)\n          // .reprompt(sessionAttributes.repromptSpeech)\n          .withSimpleCard(cardTitle, recipe)\n          .getResponse()\n      );\n    }\n    const repromptSpeech = requestAttributes.t('RECIPE_NOT_FOUND_REPROMPT');\n    if (itemName) {\n      speakOutput += requestAttributes.t(\n        'RECIPE_NOT_FOUND_WITH_ITEM_NAME',\n        itemName,\n      );\n    } else {\n      speakOutput += requestAttributes.t('RECIPE_NOT_FOUND_WITHOUT_ITEM_NAME');\n    }\n    speakOutput += repromptSpeech;\n\n    // save outputs to attributes, so we can use it to repeat\n    sessionAttributes.speakOutput = speakOutput;\n    sessionAttributes.repromptSpeech = repromptSpeech;\n\n    handlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n\n    return handlerInput.responseBuilder\n      .speak(sessionAttributes.speakOutput)\n      .reprompt(sessionAttributes.repromptSpeech)\n      .getResponse();\n  },\n};\n\nconst HelpHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      handlerInput.requestEnvelope.request.intent.name === 'AMAZON.HelpIntent'\n    );\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    const item = requestAttributes.t(\n      getRandomItem(Object.keys(recipes.RECIPE_EN_US)),\n    );\n\n    sessionAttributes.speakOutput = requestAttributes.t('HELP_MESSAGE', item);\n    sessionAttributes.repromptSpeech = requestAttributes.t(\n      'HELP_REPROMPT',\n      item,\n    );\n\n    return handlerInput.responseBuilder\n      .speak(sessionAttributes.speakOutput)\n      .reprompt(sessionAttributes.repromptSpeech)\n      .getResponse();\n  },\n};\n\nconst RepeatHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      handlerInput.requestEnvelope.request.intent.name === 'AMAZON.RepeatIntent'\n    );\n  },\n  handle(handlerInput) {\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    return handlerInput.responseBuilder\n      .speak(sessionAttributes.speakOutput)\n      .reprompt(sessionAttributes.repromptSpeech)\n      .getResponse();\n  },\n};\n\nconst ExitHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      (handlerInput.requestEnvelope.request.intent.name ===\n        'AMAZON.StopIntent' ||\n        handlerInput.requestEnvelope.request.intent.name ===\n          'AMAZON.CancelIntent')\n    );\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const speakOutput = requestAttributes.t(\n      'STOP_MESSAGE',\n      requestAttributes.t('SKILL_NAME'),\n    );\n\n    return handlerInput.responseBuilder.speak(speakOutput).getResponse();\n  },\n};\n\nconst SessionEndedRequestHandler = {\n  canHandle(handlerInput) {\n    console.log('Inside SessionEndedRequestHandler');\n    return handlerInput.requestEnvelope.request.type === 'SessionEndedRequest';\n  },\n  handle(handlerInput) {\n    console.log(\n      `Session ended with reason: ${JSON.stringify(\n        handlerInput.requestEnvelope,\n      )}`,\n    );\n    return handlerInput.responseBuilder.getResponse();\n  },\n};\n\nconst ErrorHandler = {\n  canHandle() {\n    return true;\n  },\n  handle(handlerInput, error) {\n    console.log(`Error handled: ${error.message}`);\n\n    return handlerInput.responseBuilder\n      .speak(\"Sorry, I can't understand the command. Please say again.\")\n      .reprompt(\"Sorry, I can't understand the command. Please say again.\")\n      .getResponse();\n  },\n};\n\n/* Helper Functions */\n\n// Finding the locale of the user\nconst LocalizationInterceptor = {\n  process(handlerInput) {\n    const localizationClient = i18n.use(sprintf).init({\n      lng: handlerInput.requestEnvelope.request.locale,\n      overloadTranslationOptionHandler:\n        sprintf.overloadTranslationOptionHandler,\n      resources: languageStrings,\n      returnObjects: true,\n    });\n\n    const attributes = handlerInput.attributesManager.getRequestAttributes();\n    attributes.t = function(...args) {\n      return localizationClient.t(...args);\n    };\n  },\n};\n\n// getRandomItem\nfunction getRandomItem(arrayOfItems) {\n  // the argument is an array [] of words or phrases\n  let i = 0;\n  i = Math.floor(Math.random() * arrayOfItems.length);\n  return arrayOfItems[i];\n}\n\n/* LAMBDA SETUP */\nconst skillBuilder = Alexa.SkillBuilders.custom();\nexports.handler = skillBuilder\n  .addRequestHandlers(\n    LaunchRequestHandler,\n    RecipeHandler,\n    HelpHandler,\n    RepeatHandler,\n    ExitHandler,\n    SessionEndedRequestHandler,\n  )\n  .addRequestInterceptors(LocalizationInterceptor)\n  .addErrorHandlers(ErrorHandler)\n  .lambda();\n\n// langauge strings for localization\n// TODO: The items below this comment need your attention\n\nconst languageStrings = {\n  en: {\n    translation: {\n      RECIPES: recipes.RECIPE_EN_US,\n      SKILL_NAME: 'Minecraft Helper',\n      WELCOME_MESSAGE:\n        \"Welcome to %s. You can ask a question like, what's the recipe for a %s? ... Now, what can I help you with?\",\n      WELCOME_REPROMPT:\n        'For instructions on what you can say, please say help me.',\n      DISPLAY_CARD_TITLE: '%s  - Recipe for %s.',\n      HELP_MESSAGE:\n        \"You can ask questions such as, what's the recipe for a %s, or, you can say exit...Now, what can I help you with?\",\n      HELP_REPROMPT:\n        \"You can say things like, what's the recipe for a %s, or you can say exit...Now, what can I help you with?\",\n      STOP_MESSAGE: 'Goodbye!',\n      RECIPE_REPEAT_MESSAGE: 'Try saying repeat.',\n      RECIPE_NOT_FOUND_WITH_ITEM_NAME:\n        \"I'm sorry, I currently do not know the recipe for %s. \",\n      RECIPE_NOT_FOUND_WITHOUT_ITEM_NAME:\n        \"I'm sorry, I currently do not know that recipe. \",\n      RECIPE_NOT_FOUND_REPROMPT: 'What else can I help with?',\n    },\n  },\n  'en-US': {\n    translation: {\n      RECIPES: recipes.RECIPE_EN_US,\n      SKILL_NAME: 'American Minecraft Helper',\n    },\n  },\n  'en-GB': {\n    translation: {\n      RECIPES: recipes.RECIPE_EN_GB,\n      SKILL_NAME: 'British Minecraft Helper',\n    },\n  },\n  de: {\n    translation: {\n      RECIPES: recipes.RECIPE_DE_DE,\n      SKILL_NAME: 'Assistent für Minecraft in Deutsch',\n      WELCOME_MESSAGE:\n        'Willkommen bei %s. Du kannst beispielsweise die Frage stellen: Welche Rezepte gibt es für eine %s? ... Nun, womit kann ich dir helfen?',\n      WELCOME_REPROMPT:\n        'Wenn du wissen möchtest, was du sagen kannst, sag einfach „Hilf mir“.',\n      DISPLAY_CARD_TITLE: '%s - Rezept für %s.',\n      HELP_MESSAGE:\n        'Du kannst beispielsweise Fragen stellen wie „Wie geht das Rezept für eine %s“ oder du kannst „Beenden“ sagen ... Wie kann ich dir helfen?',\n      HELP_REPROMPT:\n        'Du kannst beispielsweise Sachen sagen wie „Wie geht das Rezept für eine %s“ oder du kannst „Beenden“ sagen ... Wie kann ich dir helfen?',\n      STOP_MESSAGE: 'Auf Wiedersehen!',\n      RECIPE_REPEAT_MESSAGE: 'Sage einfach „Wiederholen“.',\n      RECIPE_NOT_FOUND_WITH_ITEM_NAME:\n        'Tut mir leid, ich kenne derzeit das Rezept für %s nicht. ',\n      RECIPE_NOT_FOUND_WITHOUT_ITEM_NAME:\n        'Tut mir leid, ich kenne derzeit dieses Rezept nicht. ',\n      RECIPE_NOT_FOUND_REPROMPT: 'Womit kann ich dir sonst helfen?',\n    },\n  },\n};","position":{"start":{"line":31,"column":1,"offset":793},"end":{"line":333,"column":4,"offset":10625},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"recipes.js","position":{"start":{"line":335,"column":1,"offset":10627},"end":{"line":335,"column":13,"offset":10639},"indent":[]}}],"position":{"start":{"line":335,"column":1,"offset":10627},"end":{"line":335,"column":13,"offset":10639},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/* eslint-disable  func-names */\n/* eslint-disable max-len */\n/* eslint quote-props: ['error', 'consistent'] */\n// TODO: Replace this data with your own.\nmodule.exports = {\n  RECIPE_EN_GB: {\n    'snow golem':\n      'A snow golem can be created by placing a pumpkin on top of  two snow blocks on the ground.',\n    'pillar quartz block':\n      'A pillar of quartz can be obtained by placing a block of quartz on top of a block of quartz in mine craft.',\n    // ...omittd\n  },\n};","position":{"start":{"line":337,"column":1,"offset":10641},"end":{"line":351,"column":4,"offset":11127},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example package.json","position":{"start":{"line":353,"column":4,"offset":11132},"end":{"line":353,"column":24,"offset":11152},"indent":[]}}],"position":{"start":{"line":353,"column":1,"offset":11129},"end":{"line":353,"column":24,"offset":11152},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"name\": \"how-to\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"ask-sdk-core\": \"^2.0.0\",\n    \"ask-sdk-model\": \"^1.0.0\",\n    \"i18next\": \"^10.5.0\",\n    \"i18next-sprintf-postprocessor\": \"^0.2.2\"\n  }\n}","position":{"start":{"line":355,"column":1,"offset":11154},"end":{"line":373,"column":4,"offset":11525},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":376,"column":1,"offset":11528},"end":{"line":376,"column":31,"offset":11558},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":376,"column":31,"offset":11558}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"alexa-nodejs-skill\"\n    }}>{`Alexa NodeJS Skill`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/alexa/skill-sample-nodejs-howto/blob/master/instructions\"\n        }}>{`Sample NodeJS Howto`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-event-sources-readme.html\"\n        }}>{`CDK Event Sources`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.aws.amazon.com/lambda/latest/dg/lambda-services.html\"\n        }}>{`Lambdba Event Targets`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Create Lambda Function`}</li>\n      <li parentName=\"ol\">{`Add `}<inlineCode parentName=\"li\">{`Alexa Skillskit`}</inlineCode>{` trigger`}</li>\n      <li parentName=\"ol\">{`Add the code (examples) below`}</li>\n      <li parentName=\"ol\">{`Grab the ARN from the top-right and add it the Alexa developer portal`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"notes\"\n    }}>{`Notes`}</h2>\n    <p>{`You may need to add the `}<inlineCode parentName=\"p\">{`trigger`}</inlineCode>{` yourself to the Lambda function.`}</p>\n    <h2 {...{\n      \"id\": \"example-code\"\n    }}>{`Example code`}</h2>\n    <p><inlineCode parentName=\"p\">{`index.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* eslint-disable  func-names */\n/* eslint-disable  no-console */\n\nconst Alexa = require('ask-sdk-core');\nconst recipes = require('./recipes');\nconst i18n = require('i18next');\nconst sprintf = require('i18next-sprintf-postprocessor');\n\n/* INTENT HANDLERS */\nconst LaunchRequestHandler = {\n  canHandle(handlerInput) {\n    return handlerInput.requestEnvelope.request.type === 'LaunchRequest';\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    const item = requestAttributes.t(\n      getRandomItem(Object.keys(recipes.RECIPE_EN_US)),\n    );\n\n    const speakOutput = requestAttributes.t(\n      'WELCOME_MESSAGE',\n      requestAttributes.t('SKILL_NAME'),\n      item,\n    );\n    const repromptOutput = requestAttributes.t('WELCOME_REPROMPT');\n\n    handlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n\n    return handlerInput.responseBuilder\n      .speak(speakOutput)\n      .reprompt(repromptOutput)\n      .getResponse();\n  },\n};\n\nconst RecipeHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      handlerInput.requestEnvelope.request.intent.name === 'RecipeIntent'\n    );\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    const itemSlot = handlerInput.requestEnvelope.request.intent.slots.Item;\n    let itemName;\n    if (itemSlot && itemSlot.value) {\n      itemName = itemSlot.value.toLowerCase();\n    }\n\n    const cardTitle = requestAttributes.t(\n      'DISPLAY_CARD_TITLE',\n      requestAttributes.t('SKILL_NAME'),\n      itemName,\n    );\n    const myRecipes = requestAttributes.t('RECIPES');\n    const recipe = myRecipes[itemName];\n    let speakOutput = '';\n\n    if (recipe) {\n      sessionAttributes.speakOutput = recipe;\n      // uncomment the _2_ reprompt lines if you want to repeat the info\n      // and prompt for a subsequent action\n      // sessionAttributes.repromptSpeech = requestAttributes.t('RECIPE_REPEAT_MESSAGE');\n      handlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n\n      return (\n        handlerInput.responseBuilder\n          .speak(sessionAttributes.speakOutput)\n          // .reprompt(sessionAttributes.repromptSpeech)\n          .withSimpleCard(cardTitle, recipe)\n          .getResponse()\n      );\n    }\n    const repromptSpeech = requestAttributes.t('RECIPE_NOT_FOUND_REPROMPT');\n    if (itemName) {\n      speakOutput += requestAttributes.t(\n        'RECIPE_NOT_FOUND_WITH_ITEM_NAME',\n        itemName,\n      );\n    } else {\n      speakOutput += requestAttributes.t('RECIPE_NOT_FOUND_WITHOUT_ITEM_NAME');\n    }\n    speakOutput += repromptSpeech;\n\n    // save outputs to attributes, so we can use it to repeat\n    sessionAttributes.speakOutput = speakOutput;\n    sessionAttributes.repromptSpeech = repromptSpeech;\n\n    handlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n\n    return handlerInput.responseBuilder\n      .speak(sessionAttributes.speakOutput)\n      .reprompt(sessionAttributes.repromptSpeech)\n      .getResponse();\n  },\n};\n\nconst HelpHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      handlerInput.requestEnvelope.request.intent.name === 'AMAZON.HelpIntent'\n    );\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    const item = requestAttributes.t(\n      getRandomItem(Object.keys(recipes.RECIPE_EN_US)),\n    );\n\n    sessionAttributes.speakOutput = requestAttributes.t('HELP_MESSAGE', item);\n    sessionAttributes.repromptSpeech = requestAttributes.t(\n      'HELP_REPROMPT',\n      item,\n    );\n\n    return handlerInput.responseBuilder\n      .speak(sessionAttributes.speakOutput)\n      .reprompt(sessionAttributes.repromptSpeech)\n      .getResponse();\n  },\n};\n\nconst RepeatHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      handlerInput.requestEnvelope.request.intent.name === 'AMAZON.RepeatIntent'\n    );\n  },\n  handle(handlerInput) {\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    return handlerInput.responseBuilder\n      .speak(sessionAttributes.speakOutput)\n      .reprompt(sessionAttributes.repromptSpeech)\n      .getResponse();\n  },\n};\n\nconst ExitHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      (handlerInput.requestEnvelope.request.intent.name ===\n        'AMAZON.StopIntent' ||\n        handlerInput.requestEnvelope.request.intent.name ===\n          'AMAZON.CancelIntent')\n    );\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const speakOutput = requestAttributes.t(\n      'STOP_MESSAGE',\n      requestAttributes.t('SKILL_NAME'),\n    );\n\n    return handlerInput.responseBuilder.speak(speakOutput).getResponse();\n  },\n};\n\nconst SessionEndedRequestHandler = {\n  canHandle(handlerInput) {\n    console.log('Inside SessionEndedRequestHandler');\n    return handlerInput.requestEnvelope.request.type === 'SessionEndedRequest';\n  },\n  handle(handlerInput) {\n    console.log(\n      \\`Session ended with reason: \\${JSON.stringify(\n        handlerInput.requestEnvelope,\n      )}\\`,\n    );\n    return handlerInput.responseBuilder.getResponse();\n  },\n};\n\nconst ErrorHandler = {\n  canHandle() {\n    return true;\n  },\n  handle(handlerInput, error) {\n    console.log(\\`Error handled: \\${error.message}\\`);\n\n    return handlerInput.responseBuilder\n      .speak(\"Sorry, I can't understand the command. Please say again.\")\n      .reprompt(\"Sorry, I can't understand the command. Please say again.\")\n      .getResponse();\n  },\n};\n\n/* Helper Functions */\n\n// Finding the locale of the user\nconst LocalizationInterceptor = {\n  process(handlerInput) {\n    const localizationClient = i18n.use(sprintf).init({\n      lng: handlerInput.requestEnvelope.request.locale,\n      overloadTranslationOptionHandler:\n        sprintf.overloadTranslationOptionHandler,\n      resources: languageStrings,\n      returnObjects: true,\n    });\n\n    const attributes = handlerInput.attributesManager.getRequestAttributes();\n    attributes.t = function(...args) {\n      return localizationClient.t(...args);\n    };\n  },\n};\n\n// getRandomItem\nfunction getRandomItem(arrayOfItems) {\n  // the argument is an array [] of words or phrases\n  let i = 0;\n  i = Math.floor(Math.random() * arrayOfItems.length);\n  return arrayOfItems[i];\n}\n\n/* LAMBDA SETUP */\nconst skillBuilder = Alexa.SkillBuilders.custom();\nexports.handler = skillBuilder\n  .addRequestHandlers(\n    LaunchRequestHandler,\n    RecipeHandler,\n    HelpHandler,\n    RepeatHandler,\n    ExitHandler,\n    SessionEndedRequestHandler,\n  )\n  .addRequestInterceptors(LocalizationInterceptor)\n  .addErrorHandlers(ErrorHandler)\n  .lambda();\n\n// langauge strings for localization\n// TODO: The items below this comment need your attention\n\nconst languageStrings = {\n  en: {\n    translation: {\n      RECIPES: recipes.RECIPE_EN_US,\n      SKILL_NAME: 'Minecraft Helper',\n      WELCOME_MESSAGE:\n        \"Welcome to %s. You can ask a question like, what's the recipe for a %s? ... Now, what can I help you with?\",\n      WELCOME_REPROMPT:\n        'For instructions on what you can say, please say help me.',\n      DISPLAY_CARD_TITLE: '%s  - Recipe for %s.',\n      HELP_MESSAGE:\n        \"You can ask questions such as, what's the recipe for a %s, or, you can say exit...Now, what can I help you with?\",\n      HELP_REPROMPT:\n        \"You can say things like, what's the recipe for a %s, or you can say exit...Now, what can I help you with?\",\n      STOP_MESSAGE: 'Goodbye!',\n      RECIPE_REPEAT_MESSAGE: 'Try saying repeat.',\n      RECIPE_NOT_FOUND_WITH_ITEM_NAME:\n        \"I'm sorry, I currently do not know the recipe for %s. \",\n      RECIPE_NOT_FOUND_WITHOUT_ITEM_NAME:\n        \"I'm sorry, I currently do not know that recipe. \",\n      RECIPE_NOT_FOUND_REPROMPT: 'What else can I help with?',\n    },\n  },\n  'en-US': {\n    translation: {\n      RECIPES: recipes.RECIPE_EN_US,\n      SKILL_NAME: 'American Minecraft Helper',\n    },\n  },\n  'en-GB': {\n    translation: {\n      RECIPES: recipes.RECIPE_EN_GB,\n      SKILL_NAME: 'British Minecraft Helper',\n    },\n  },\n  de: {\n    translation: {\n      RECIPES: recipes.RECIPE_DE_DE,\n      SKILL_NAME: 'Assistent für Minecraft in Deutsch',\n      WELCOME_MESSAGE:\n        'Willkommen bei %s. Du kannst beispielsweise die Frage stellen: Welche Rezepte gibt es für eine %s? ... Nun, womit kann ich dir helfen?',\n      WELCOME_REPROMPT:\n        'Wenn du wissen möchtest, was du sagen kannst, sag einfach „Hilf mir“.',\n      DISPLAY_CARD_TITLE: '%s - Rezept für %s.',\n      HELP_MESSAGE:\n        'Du kannst beispielsweise Fragen stellen wie „Wie geht das Rezept für eine %s“ oder du kannst „Beenden“ sagen ... Wie kann ich dir helfen?',\n      HELP_REPROMPT:\n        'Du kannst beispielsweise Sachen sagen wie „Wie geht das Rezept für eine %s“ oder du kannst „Beenden“ sagen ... Wie kann ich dir helfen?',\n      STOP_MESSAGE: 'Auf Wiedersehen!',\n      RECIPE_REPEAT_MESSAGE: 'Sage einfach „Wiederholen“.',\n      RECIPE_NOT_FOUND_WITH_ITEM_NAME:\n        'Tut mir leid, ich kenne derzeit das Rezept für %s nicht. ',\n      RECIPE_NOT_FOUND_WITHOUT_ITEM_NAME:\n        'Tut mir leid, ich kenne derzeit dieses Rezept nicht. ',\n      RECIPE_NOT_FOUND_REPROMPT: 'Womit kann ich dir sonst helfen?',\n    },\n  },\n};\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`recipes.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* eslint-disable  func-names */\n/* eslint-disable max-len */\n/* eslint quote-props: ['error', 'consistent'] */\n// TODO: Replace this data with your own.\nmodule.exports = {\n  RECIPE_EN_GB: {\n    'snow golem':\n      'A snow golem can be created by placing a pumpkin on top of  two snow blocks on the ground.',\n    'pillar quartz block':\n      'A pillar of quartz can be obtained by placing a block of quartz on top of a block of quartz in mine craft.',\n    // ...omittd\n  },\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example-packagejson\"\n    }}>{`Example package.json`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"name\": \"how-to\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"ask-sdk-core\": \"^2.0.0\",\n    \"ask-sdk-model\": \"^1.0.0\",\n    \"i18next\": \"^10.5.0\",\n    \"i18next-sprintf-postprocessor\": \"^0.2.2\"\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}