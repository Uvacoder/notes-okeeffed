{"expireTime":9007200867335922000,"key":"gatsby-plugin-mdx-entire-payload-b9e3044f107e8335cf9090546875ce71-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"msw with React","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":17,"offset":183},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":17,"offset":183},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":188},"end":{"line":10,"column":13,"offset":197},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":185},"end":{"line":10,"column":13,"offset":197},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/mswjs/examples/tree/master/examples/rest-react","children":[{"type":"text","value":"React MSW Example - GitHub","position":{"start":{"line":12,"column":5,"offset":203},"end":{"line":12,"column":31,"offset":229},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":202},"end":{"line":12,"column":99,"offset":297},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":202},"end":{"line":12,"column":99,"offset":297},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":199},"end":{"line":12,"column":99,"offset":297},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://kentcdodds.com/blog/stop-mocking-fetch","children":[{"type":"text","value":"Stop mocking fetch - Kent C Dodds","position":{"start":{"line":13,"column":5,"offset":302},"end":{"line":13,"column":38,"offset":335},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":301},"end":{"line":13,"column":87,"offset":384},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":301},"end":{"line":13,"column":87,"offset":384},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":298},"end":{"line":13,"column":87,"offset":384},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":199},"end":{"line":13,"column":87,"offset":384},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting up","position":{"start":{"line":15,"column":4,"offset":389},"end":{"line":15,"column":14,"offset":399},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":386},"end":{"line":15,"column":14,"offset":399},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You need to have msw generate a ","position":{"start":{"line":17,"column":1,"offset":401},"end":{"line":17,"column":33,"offset":433},"indent":[]}},{"type":"inlineCode","value":"mockServiceWorker.js","position":{"start":{"line":17,"column":33,"offset":433},"end":{"line":17,"column":55,"offset":455},"indent":[]}},{"type":"text","value":" file for you in the ","position":{"start":{"line":17,"column":55,"offset":455},"end":{"line":17,"column":76,"offset":476},"indent":[]}},{"type":"inlineCode","value":"public","position":{"start":{"line":17,"column":76,"offset":476},"end":{"line":17,"column":84,"offset":484},"indent":[]}},{"type":"text","value":" directory.","position":{"start":{"line":17,"column":84,"offset":484},"end":{"line":17,"column":95,"offset":495},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":401},"end":{"line":17,"column":95,"offset":495},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"npx msw init public","position":{"start":{"line":19,"column":1,"offset":497},"end":{"line":21,"column":4,"offset":525},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Creating you mock handlers","position":{"start":{"line":23,"column":4,"offset":530},"end":{"line":23,"column":30,"offset":556},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":527},"end":{"line":23,"column":30,"offset":556},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create file ","position":{"start":{"line":25,"column":1,"offset":558},"end":{"line":25,"column":13,"offset":570},"indent":[]}},{"type":"inlineCode","value":"src/mocks/handlers.js","position":{"start":{"line":25,"column":13,"offset":570},"end":{"line":25,"column":36,"offset":593},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":558},"end":{"line":25,"column":36,"offset":593},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import { rest } from 'msw';\n\nexport const handlers = [\n  rest.get('/api/v1/todos', (_, res, ctx) => {\n    return res(\n      ctx.delay(1500),\n      ctx.json([\n        {\n          id: '1',\n          title: 'Mocked API',\n          done: false,\n        },\n        {\n          id: '2',\n          title: 'Task Two',\n          done: false,\n        },\n        {\n          id: '3',\n          title: 'Task Three',\n          done: false,\n        },\n      ]),\n    );\n  }),\n];","position":{"start":{"line":27,"column":1,"offset":595},"end":{"line":54,"column":4,"offset":1068},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting up for the browser","position":{"start":{"line":56,"column":4,"offset":1073},"end":{"line":56,"column":30,"offset":1099},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1070},"end":{"line":56,"column":30,"offset":1099},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create file ","position":{"start":{"line":58,"column":1,"offset":1101},"end":{"line":58,"column":13,"offset":1113},"indent":[]}},{"type":"inlineCode","value":"src/mocks/browser.js","position":{"start":{"line":58,"column":13,"offset":1113},"end":{"line":58,"column":35,"offset":1135},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1101},"end":{"line":58,"column":35,"offset":1135},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import { setupWorker } from 'msw';\nimport { handlers } from './handlers';\n\nexport const worker = setupWorker(...handlers);","position":{"start":{"line":60,"column":1,"offset":1137},"end":{"line":65,"column":4,"offset":1269},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Within your index file for the React application:","position":{"start":{"line":67,"column":1,"offset":1271},"end":{"line":67,"column":50,"offset":1320},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1271},"end":{"line":67,"column":50,"offset":1320},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// ...\n\n// Start the mocking conditionally.\nif (process.env.NODE_ENV === 'development') {\n  const { worker } = require('./mocks/browser');\n  worker.start();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// ...","position":{"start":{"line":69,"column":1,"offset":1322},"end":{"line":86,"column":4,"offset":1610},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting up for Node (and testing)","position":{"start":{"line":88,"column":4,"offset":1615},"end":{"line":88,"column":37,"offset":1648},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":1612},"end":{"line":88,"column":37,"offset":1648},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create file ","position":{"start":{"line":90,"column":1,"offset":1650},"end":{"line":90,"column":13,"offset":1662},"indent":[]}},{"type":"inlineCode","value":"src/mocks/server.js","position":{"start":{"line":90,"column":13,"offset":1662},"end":{"line":90,"column":34,"offset":1683},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":90,"column":34,"offset":1683},"end":{"line":90,"column":35,"offset":1684},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":1650},"end":{"line":90,"column":35,"offset":1684},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import { setupServer } from 'msw/node';\nimport { handlers } from './handlers';\n\n// Setup requests interception using the given handlers.\nexport const server = setupServer(...handlers);","position":{"start":{"line":92,"column":1,"offset":1686},"end":{"line":98,"column":4,"offset":1880},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When setting up for tests, you'll need to setup some Jest config in ","position":{"start":{"line":100,"column":1,"offset":1882},"end":{"line":100,"column":69,"offset":1950},"indent":[]}},{"type":"inlineCode","value":"src/setupTests.ts","position":{"start":{"line":100,"column":69,"offset":1950},"end":{"line":100,"column":88,"offset":1969},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":100,"column":88,"offset":1969},"end":{"line":100,"column":89,"offset":1970},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":1882},"end":{"line":100,"column":89,"offset":1970},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// src/test/setup-env.js\n\n// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n// test/setup-env.js\n// add this to your setupFilesAfterEnv config in jest so it's imported for every test file\nimport { server } from './mocks/server.js';\n\nbeforeAll(() => server.listen());\n// if you need to add a handler after calling setupServer for some specific test\n// this will remove that handler for the rest of them\n// (which is important for test isolation):\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());","position":{"start":{"line":102,"column":1,"offset":1972},"end":{"line":120,"column":4,"offset":2691},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"An example test of running a lifecycle that is being stubbed by ","position":{"start":{"line":122,"column":1,"offset":2693},"end":{"line":122,"column":65,"offset":2757},"indent":[]}},{"type":"inlineCode","value":"msw","position":{"start":{"line":122,"column":65,"offset":2757},"end":{"line":122,"column":70,"offset":2762},"indent":[]}},{"type":"text","value":" looks like the following:","position":{"start":{"line":122,"column":70,"offset":2762},"end":{"line":122,"column":96,"offset":2788},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":2693},"end":{"line":122,"column":96,"offset":2788},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport App from './App';\n\ndescribe('rendering the App component', () => {\n  describe('rendering the Todo List', () => {\n    test('shows todo items on successful state cycle', async () => {\n      render(<App />);\n\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n      await waitForElementToBeRemoved(() => screen.getByText(/loading/i));\n      expect(screen.getByText(/mocked api/i)).toBeInTheDocument();\n    });\n  });\n});","position":{"start":{"line":124,"column":1,"offset":2790},"end":{"line":144,"column":4,"offset":3354},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For overriding tests with a different response, we can inline the server:","position":{"start":{"line":146,"column":1,"offset":3356},"end":{"line":146,"column":74,"offset":3429},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":3356},"end":{"line":146,"column":74,"offset":3429},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import React from 'react';\nimport { render, screen, waitForElementToBeRemoved } from '../test/test-utils';\nimport { TodoList } from './App';\nimport { rest } from 'msw';\nimport { server } from './mocks/server';\n\ndescribe('rendering the App component', () => {\n  describe('rendering the Todo List', () => {\n    test('shows todo items on successful state cycle', async () => {\n      render(<TodoList />);\n\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n      await waitForElementToBeRemoved(() => screen.getByText(/loading/i));\n      expect(screen.getByText(/mocked api/i)).toBeInTheDocument();\n    });\n\n    test('shows a failed request message when server request fails', async () => {\n      server.use(\n        rest.get('/api/v1/todos', (_, res, ctx) => {\n          return res(ctx.status(500), ctx.json({ message: 'Internal error' }));\n        }),\n      );\n\n      render(<TodoList />);\n\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n      await waitForElementToBeRemoved(() => screen.getByText(/loading/i));\n      expect(screen.getByText(/request failed/i)).toBeInTheDocument();\n      screen.debug();\n    });\n  });\n});","position":{"start":{"line":148,"column":1,"offset":3431},"end":{"line":181,"column":4,"offset":4593},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":184,"column":1,"offset":4596},"end":{"line":184,"column":31,"offset":4626},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":184,"column":31,"offset":4626}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"msw-with-react\"\n    }}>{`msw with React`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mswjs/examples/tree/master/examples/rest-react\"\n        }}>{`React MSW Example - GitHub`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/stop-mocking-fetch\"\n        }}>{`Stop mocking fetch - Kent C Dodds`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"setting-up\"\n    }}>{`Setting up`}</h2>\n    <p>{`You need to have msw generate a `}<inlineCode parentName=\"p\">{`mockServiceWorker.js`}</inlineCode>{` file for you in the `}<inlineCode parentName=\"p\">{`public`}</inlineCode>{` directory.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`npx msw init public\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"creating-you-mock-handlers\"\n    }}>{`Creating you mock handlers`}</h2>\n    <p>{`Create file `}<inlineCode parentName=\"p\">{`src/mocks/handlers.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { rest } from 'msw';\n\nexport const handlers = [\n  rest.get('/api/v1/todos', (_, res, ctx) => {\n    return res(\n      ctx.delay(1500),\n      ctx.json([\n        {\n          id: '1',\n          title: 'Mocked API',\n          done: false,\n        },\n        {\n          id: '2',\n          title: 'Task Two',\n          done: false,\n        },\n        {\n          id: '3',\n          title: 'Task Three',\n          done: false,\n        },\n      ]),\n    );\n  }),\n];\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-for-the-browser\"\n    }}>{`Setting up for the browser`}</h2>\n    <p>{`Create file `}<inlineCode parentName=\"p\">{`src/mocks/browser.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { setupWorker } from 'msw';\nimport { handlers } from './handlers';\n\nexport const worker = setupWorker(...handlers);\n`}</code></pre>\n    <p>{`Within your index file for the React application:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ...\n\n// Start the mocking conditionally.\nif (process.env.NODE_ENV === 'development') {\n  const { worker } = require('./mocks/browser');\n  worker.start();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// ...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-for-node-and-testing\"\n    }}>{`Setting up for Node (and testing)`}</h2>\n    <p>{`Create file `}<inlineCode parentName=\"p\">{`src/mocks/server.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { setupServer } from 'msw/node';\nimport { handlers } from './handlers';\n\n// Setup requests interception using the given handlers.\nexport const server = setupServer(...handlers);\n`}</code></pre>\n    <p>{`When setting up for tests, you'll need to setup some Jest config in `}<inlineCode parentName=\"p\">{`src/setupTests.ts`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// src/test/setup-env.js\n\n// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n// test/setup-env.js\n// add this to your setupFilesAfterEnv config in jest so it's imported for every test file\nimport { server } from './mocks/server.js';\n\nbeforeAll(() => server.listen());\n// if you need to add a handler after calling setupServer for some specific test\n// this will remove that handler for the rest of them\n// (which is important for test isolation):\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n`}</code></pre>\n    <p>{`An example test of running a lifecycle that is being stubbed by `}<inlineCode parentName=\"p\">{`msw`}</inlineCode>{` looks like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport App from './App';\n\ndescribe('rendering the App component', () => {\n  describe('rendering the Todo List', () => {\n    test('shows todo items on successful state cycle', async () => {\n      render(<App />);\n\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n      await waitForElementToBeRemoved(() => screen.getByText(/loading/i));\n      expect(screen.getByText(/mocked api/i)).toBeInTheDocument();\n    });\n  });\n});\n`}</code></pre>\n    <p>{`For overriding tests with a different response, we can inline the server:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from 'react';\nimport { render, screen, waitForElementToBeRemoved } from '../test/test-utils';\nimport { TodoList } from './App';\nimport { rest } from 'msw';\nimport { server } from './mocks/server';\n\ndescribe('rendering the App component', () => {\n  describe('rendering the Todo List', () => {\n    test('shows todo items on successful state cycle', async () => {\n      render(<TodoList />);\n\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n      await waitForElementToBeRemoved(() => screen.getByText(/loading/i));\n      expect(screen.getByText(/mocked api/i)).toBeInTheDocument();\n    });\n\n    test('shows a failed request message when server request fails', async () => {\n      server.use(\n        rest.get('/api/v1/todos', (_, res, ctx) => {\n          return res(ctx.status(500), ctx.json({ message: 'Internal error' }));\n        }),\n      );\n\n      render(<TodoList />);\n\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n      await waitForElementToBeRemoved(() => screen.getByText(/loading/i));\n      expect(screen.getByText(/request failed/i)).toBeInTheDocument();\n      screen.debug();\n    });\n  });\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}