{"expireTime":9007200867335956000,"key":"gatsby-plugin-mdx-entire-payload-bbe757ac3a29e842d7f556a3cb8dffa6-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Go Cheat Sheet","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":17,"offset":183},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":17,"offset":183},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"References","position":{"start":{"line":10,"column":4,"offset":188},"end":{"line":10,"column":14,"offset":198},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":185},"end":{"line":10,"column":14,"offset":198},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/a8m/go-lang-cheat-sheet","children":[{"type":"text","value":"Golang Cheat Sheet","position":{"start":{"line":12,"column":5,"offset":204},"end":{"line":12,"column":23,"offset":222},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":203},"end":{"line":12,"column":68,"offset":267},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":203},"end":{"line":12,"column":68,"offset":267},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":200},"end":{"line":12,"column":68,"offset":267},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://hackernoon.com/time-to-go-learning-golang-through-examples-480a90c5e7f9","children":[{"type":"text","value":"Go by example","position":{"start":{"line":13,"column":5,"offset":272},"end":{"line":13,"column":18,"offset":285},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":271},"end":{"line":13,"column":100,"offset":367},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":271},"end":{"line":13,"column":100,"offset":367},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":268},"end":{"line":13,"column":100,"offset":367},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":200},"end":{"line":13,"column":100,"offset":367},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"In a nutshell","position":{"start":{"line":15,"column":4,"offset":372},"end":{"line":15,"column":17,"offset":385},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":369},"end":{"line":15,"column":17,"offset":385},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Imperative language","position":{"start":{"line":17,"column":3,"offset":389},"end":{"line":17,"column":22,"offset":408},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":389},"end":{"line":17,"column":22,"offset":408},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":387},"end":{"line":17,"column":22,"offset":408},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Statically typed","position":{"start":{"line":18,"column":3,"offset":411},"end":{"line":18,"column":19,"offset":427},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":411},"end":{"line":18,"column":19,"offset":427},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":409},"end":{"line":18,"column":19,"offset":427},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Syntax tokens similar to C (but less parentheses and no semicolons) and the structure to Oberon-2","position":{"start":{"line":19,"column":3,"offset":430},"end":{"line":19,"column":100,"offset":527},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":430},"end":{"line":19,"column":100,"offset":527},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":428},"end":{"line":19,"column":100,"offset":527},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Compiles to native code (no JVM)","position":{"start":{"line":20,"column":3,"offset":530},"end":{"line":20,"column":35,"offset":562},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":530},"end":{"line":20,"column":35,"offset":562},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":528},"end":{"line":20,"column":35,"offset":562},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No classes, but structs with methods","position":{"start":{"line":21,"column":3,"offset":565},"end":{"line":21,"column":39,"offset":601},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":565},"end":{"line":21,"column":39,"offset":601},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":563},"end":{"line":21,"column":39,"offset":601},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Interfaces","position":{"start":{"line":22,"column":3,"offset":604},"end":{"line":22,"column":13,"offset":614},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":604},"end":{"line":22,"column":13,"offset":614},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":602},"end":{"line":22,"column":13,"offset":614},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No implementation inheritance. There's type embedding, though.","position":{"start":{"line":23,"column":3,"offset":617},"end":{"line":23,"column":65,"offset":679},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":617},"end":{"line":23,"column":65,"offset":679},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":615},"end":{"line":23,"column":65,"offset":679},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Functions are first class citizens","position":{"start":{"line":24,"column":3,"offset":682},"end":{"line":24,"column":37,"offset":716},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":682},"end":{"line":24,"column":37,"offset":716},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":680},"end":{"line":24,"column":37,"offset":716},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Functions can return multiple values","position":{"start":{"line":25,"column":3,"offset":719},"end":{"line":25,"column":39,"offset":755},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":719},"end":{"line":25,"column":39,"offset":755},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":717},"end":{"line":25,"column":39,"offset":755},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Has closures","position":{"start":{"line":26,"column":3,"offset":758},"end":{"line":26,"column":15,"offset":770},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":758},"end":{"line":26,"column":15,"offset":770},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":756},"end":{"line":26,"column":15,"offset":770},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Pointers, but not pointer arithmetic","position":{"start":{"line":27,"column":3,"offset":773},"end":{"line":27,"column":39,"offset":809},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":773},"end":{"line":27,"column":39,"offset":809},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":771},"end":{"line":27,"column":39,"offset":809},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Built-in concurrency primitives: Goroutines and Channels","position":{"start":{"line":28,"column":3,"offset":812},"end":{"line":28,"column":59,"offset":868},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":812},"end":{"line":28,"column":59,"offset":868},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":810},"end":{"line":28,"column":59,"offset":868},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":387},"end":{"line":28,"column":59,"offset":868},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Basics","position":{"start":{"line":30,"column":4,"offset":873},"end":{"line":30,"column":10,"offset":879},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":870},"end":{"line":30,"column":10,"offset":879},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// hello.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello Go\")\n}","position":{"start":{"line":32,"column":1,"offset":881},"end":{"line":41,"column":4,"offset":974},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"shell","meta":null,"value":"go run hello.go","position":{"start":{"line":43,"column":1,"offset":976},"end":{"line":45,"column":4,"offset":1004},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Declarations","position":{"start":{"line":47,"column":4,"offset":1009},"end":{"line":47,"column":16,"offset":1021},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1006},"end":{"line":47,"column":16,"offset":1021},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"var foo int // declaration without initialization\nvar foo int = 42 // declaration with initialization\nvar foo, bar int = 42, 1302 // declare and init multiple vars at once\nvar foo = 42 // type omitted, will be inferred\nfoo := 42 // shorthand, only in func bodies, omit var keyword, type is always implicit\nconst constant = \"This is a constant\"","position":{"start":{"line":49,"column":1,"offset":1023},"end":{"line":56,"column":4,"offset":1376},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Functions","position":{"start":{"line":58,"column":4,"offset":1381},"end":{"line":58,"column":13,"offset":1390},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1378},"end":{"line":58,"column":13,"offset":1390},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"\n// a simple function\nfunc functionName() {}\n\n// function with parameters (again, types go after identifiers)\nfunc functionName(param1 string, param2 int) {}\n\n// multiple parameters of the same type\nfunc functionName(param1, param2 int) {}\n\n// return type declaration\nfunc functionName() int {\n    return 42\n}\n\n// Can return multiple values at once\nfunc returnMulti() (int, string) {\n    return 42, \"foobar\"\n}\nvar x, str = returnMulti()\n\n// Return multiple named results simply by return\nfunc returnMulti2() (n int, s string) {\n    n = 42\n    s = \"foobar\"\n    // n and s will be returned\n    return\n}\nvar x, str = returnMulti2()","position":{"start":{"line":60,"column":1,"offset":1392},"end":{"line":90,"column":4,"offset":2030},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Funcs as values and closures","position":{"start":{"line":92,"column":4,"offset":2035},"end":{"line":92,"column":32,"offset":2063},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2032},"end":{"line":92,"column":32,"offset":2063},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func main() {\n    // assign a function to a name\n    add := func(a, b int) int {\n        return a + b\n    }\n    // use the name to call the function\n    fmt.Println(add(3, 4))\n}\n\n// Closures, lexically scoped: Functions can access values that were\n// in scope when defining the function\nfunc scope() func() int {\n    outer_var := 2\n    foo := func() int { return outer_var}\n    return foo\n}\n\n\n// Closures\nfunc outer() (func() int, int) {\n    outer_var := 2\n    inner := func() int {\n        outer_var += 99 // outer_var from outer scope is mutated.\n        return outer_var\n    }\n    inner()\n    return inner, outer_var // return inner func and mutated outer_var 101\n}","position":{"start":{"line":94,"column":1,"offset":2065},"end":{"line":123,"column":4,"offset":2743},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":126,"column":1,"offset":2746},"end":{"line":126,"column":31,"offset":2776},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":126,"column":31,"offset":2776}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"go-cheat-sheet\"\n    }}>{`Go Cheat Sheet`}</h1>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/a8m/go-lang-cheat-sheet\"\n        }}>{`Golang Cheat Sheet`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://hackernoon.com/time-to-go-learning-golang-through-examples-480a90c5e7f9\"\n        }}>{`Go by example`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"in-a-nutshell\"\n    }}>{`In a nutshell`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Imperative language`}</li>\n      <li parentName=\"ul\">{`Statically typed`}</li>\n      <li parentName=\"ul\">{`Syntax tokens similar to C (but less parentheses and no semicolons) and the structure to Oberon-2`}</li>\n      <li parentName=\"ul\">{`Compiles to native code (no JVM)`}</li>\n      <li parentName=\"ul\">{`No classes, but structs with methods`}</li>\n      <li parentName=\"ul\">{`Interfaces`}</li>\n      <li parentName=\"ul\">{`No implementation inheritance. There's type embedding, though.`}</li>\n      <li parentName=\"ul\">{`Functions are first class citizens`}</li>\n      <li parentName=\"ul\">{`Functions can return multiple values`}</li>\n      <li parentName=\"ul\">{`Has closures`}</li>\n      <li parentName=\"ul\">{`Pointers, but not pointer arithmetic`}</li>\n      <li parentName=\"ul\">{`Built-in concurrency primitives: Goroutines and Channels`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"basics\"\n    }}>{`Basics`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// hello.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello Go\")\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`go run hello.go\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"declarations\"\n    }}>{`Declarations`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`var foo int // declaration without initialization\nvar foo int = 42 // declaration with initialization\nvar foo, bar int = 42, 1302 // declare and init multiple vars at once\nvar foo = 42 // type omitted, will be inferred\nfoo := 42 // shorthand, only in func bodies, omit var keyword, type is always implicit\nconst constant = \"This is a constant\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`\n// a simple function\nfunc functionName() {}\n\n// function with parameters (again, types go after identifiers)\nfunc functionName(param1 string, param2 int) {}\n\n// multiple parameters of the same type\nfunc functionName(param1, param2 int) {}\n\n// return type declaration\nfunc functionName() int {\n    return 42\n}\n\n// Can return multiple values at once\nfunc returnMulti() (int, string) {\n    return 42, \"foobar\"\n}\nvar x, str = returnMulti()\n\n// Return multiple named results simply by return\nfunc returnMulti2() (n int, s string) {\n    n = 42\n    s = \"foobar\"\n    // n and s will be returned\n    return\n}\nvar x, str = returnMulti2()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"funcs-as-values-and-closures\"\n    }}>{`Funcs as values and closures`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func main() {\n    // assign a function to a name\n    add := func(a, b int) int {\n        return a + b\n    }\n    // use the name to call the function\n    fmt.Println(add(3, 4))\n}\n\n// Closures, lexically scoped: Functions can access values that were\n// in scope when defining the function\nfunc scope() func() int {\n    outer_var := 2\n    foo := func() int { return outer_var}\n    return foo\n}\n\n\n// Closures\nfunc outer() (func() int, int) {\n    outer_var := 2\n    inner := func() int {\n        outer_var += 99 // outer_var from outer scope is mutated.\n        return outer_var\n    }\n    inner()\n    return inner, outer_var // return inner func and mutated outer_var 101\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}