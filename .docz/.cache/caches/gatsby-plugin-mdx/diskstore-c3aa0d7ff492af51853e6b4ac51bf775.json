{"expireTime":9007200867335954000,"key":"gatsby-plugin-mdx-entire-payload-5b398868b22744242c70becb7c51c4da-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Fizz Buzz in Golang","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":22,"offset":188},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":22,"offset":188},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A basic implementation of the infamous Fizz Buzz with unit testing.","position":{"start":{"line":10,"column":1,"offset":190},"end":{"line":10,"column":68,"offset":257},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":190},"end":{"line":10,"column":68,"offset":257},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting up the test","position":{"start":{"line":12,"column":4,"offset":262},"end":{"line":12,"column":23,"offset":281},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":259},"end":{"line":12,"column":23,"offset":281},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Set up ","position":{"start":{"line":14,"column":1,"offset":283},"end":{"line":14,"column":8,"offset":290},"indent":[]}},{"type":"inlineCode","value":"fizz_buzz_test.go","position":{"start":{"line":14,"column":8,"offset":290},"end":{"line":14,"column":27,"offset":309},"indent":[]}},{"type":"text","value":" with the following file:","position":{"start":{"line":14,"column":27,"offset":309},"end":{"line":14,"column":52,"offset":334},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":283},"end":{"line":14,"column":52,"offset":334},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package fizzbuzz\n\nimport \"testing\"\n\nfunc TestReturnString(t *testing.T) {\n\texpected := \"2\"\n\tif observed := FizzBuzz(2); observed != expected {\n\t\tt.Fatalf(\"FizzBuzz(2)) = %v, want %v\", observed, expected)\n\t}\n}\nfunc TestFizz(t *testing.T) {\n\texpected := \"Fizz\"\n\tif observed := FizzBuzz(3); observed != expected {\n\t\tt.Fatalf(\"FizzBuzz(3)) = %v, want %v\", observed, expected)\n\t}\n}\n\nfunc TestBuzz(t *testing.T) {\n\texpected := \"Buzz\"\n\tif observed := FizzBuzz(5); observed != expected {\n\t\tt.Fatalf(\"FizzBuzz(5)) = %v, want %v\", observed, expected)\n\t}\n}\n\nfunc TestFizzBuzz(t *testing.T) {\n\texpected := \"FizzBuzz\"\n\tif observed := FizzBuzz(15); observed != expected {\n\t\tt.Fatalf(\"FizzBuzz(15)) = %v, want %v\", observed, expected)\n\t}\n}\n\n// BenchmarkFizzBuzz() is a benchmarking function. These functions follow the\n// form `func BenchmarkXxx(*testing.B)` and can be used to test the performance\n// of your implementation. They may not be present in every exercise, but when\n// they are you can run them by including the `-bench` flag with the `go test`\n// command, like so: `go test -v --bench . --benchmem`\n//\n// You will see output similar to the following:\n//\n// BenchmarkFizzBuzz   \t2000000000\t         0.46 ns/op\n//\n// This means that the loop ran 2000000000 times at a speed of 0.46 ns per loop.\n//\n// While benchmarking can be useful to compare different iterations of the same\n// exercise, keep in mind that others will run the same benchmarks on different\n// machines, with different specs, so the results from these benchmark tests may\n// vary.\nfunc BenchmarkFizzBuzz(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tFizzBuzz(15)\n\t}\n}","position":{"start":{"line":16,"column":1,"offset":336},"end":{"line":69,"column":4,"offset":1976},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Fizz Buzz implementation","position":{"start":{"line":71,"column":4,"offset":1981},"end":{"line":71,"column":28,"offset":2005},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":1978},"end":{"line":71,"column":28,"offset":2005},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We will use the interger-to-ASCII function ","position":{"start":{"line":73,"column":1,"offset":2007},"end":{"line":73,"column":44,"offset":2050},"indent":[]}},{"type":"inlineCode","value":"itoa","position":{"start":{"line":73,"column":44,"offset":2050},"end":{"line":73,"column":50,"offset":2056},"indent":[]}},{"type":"text","value":" from the ","position":{"start":{"line":73,"column":50,"offset":2056},"end":{"line":73,"column":60,"offset":2066},"indent":[]}},{"type":"inlineCode","value":"strings","position":{"start":{"line":73,"column":60,"offset":2066},"end":{"line":73,"column":69,"offset":2075},"indent":[]}},{"type":"text","value":" library.","position":{"start":{"line":73,"column":69,"offset":2075},"end":{"line":73,"column":78,"offset":2084},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":2007},"end":{"line":73,"column":78,"offset":2084},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package fizzbuzz\n\nimport \"strconv\"\n\n// FizzBuzz should have a comment documenting it.\nfunc FizzBuzz(i int) string {\n\tswitch true {\n\tcase i%15 == 0:\n\t\treturn \"FizzBuzz\"\n\tcase i%3 == 0:\n\t\treturn \"Fizz\"\n\tcase i%5 == 0:\n\t\treturn \"Buzz\"\n\tdefault:\n\t\treturn strconv.Itoa(i)\n\t}\n}","position":{"start":{"line":75,"column":1,"offset":2086},"end":{"line":93,"column":4,"offset":2367},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Running Tests","position":{"start":{"line":95,"column":4,"offset":2372},"end":{"line":95,"column":17,"offset":2385},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2369},"end":{"line":95,"column":17,"offset":2385},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the directory, run ","position":{"start":{"line":97,"column":1,"offset":2387},"end":{"line":97,"column":23,"offset":2409},"indent":[]}},{"type":"inlineCode","value":"go test","position":{"start":{"line":97,"column":23,"offset":2409},"end":{"line":97,"column":32,"offset":2418},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":97,"column":32,"offset":2418},"end":{"line":97,"column":33,"offset":2419},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2387},"end":{"line":97,"column":33,"offset":2419},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":100,"column":1,"offset":2422},"end":{"line":100,"column":31,"offset":2452},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":100,"column":31,"offset":2452}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fizz-buzz-in-golang\"\n    }}>{`Fizz Buzz in Golang`}</h1>\n    <p>{`A basic implementation of the infamous Fizz Buzz with unit testing.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up-the-test\"\n    }}>{`Setting up the test`}</h2>\n    <p>{`Set up `}<inlineCode parentName=\"p\">{`fizz_buzz_test.go`}</inlineCode>{` with the following file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package fizzbuzz\n\nimport \"testing\"\n\nfunc TestReturnString(t *testing.T) {\n    expected := \"2\"\n    if observed := FizzBuzz(2); observed != expected {\n        t.Fatalf(\"FizzBuzz(2)) = %v, want %v\", observed, expected)\n    }\n}\nfunc TestFizz(t *testing.T) {\n    expected := \"Fizz\"\n    if observed := FizzBuzz(3); observed != expected {\n        t.Fatalf(\"FizzBuzz(3)) = %v, want %v\", observed, expected)\n    }\n}\n\nfunc TestBuzz(t *testing.T) {\n    expected := \"Buzz\"\n    if observed := FizzBuzz(5); observed != expected {\n        t.Fatalf(\"FizzBuzz(5)) = %v, want %v\", observed, expected)\n    }\n}\n\nfunc TestFizzBuzz(t *testing.T) {\n    expected := \"FizzBuzz\"\n    if observed := FizzBuzz(15); observed != expected {\n        t.Fatalf(\"FizzBuzz(15)) = %v, want %v\", observed, expected)\n    }\n}\n\n// BenchmarkFizzBuzz() is a benchmarking function. These functions follow the\n// form \\`func BenchmarkXxx(*testing.B)\\` and can be used to test the performance\n// of your implementation. They may not be present in every exercise, but when\n// they are you can run them by including the \\`-bench\\` flag with the \\`go test\\`\n// command, like so: \\`go test -v --bench . --benchmem\\`\n//\n// You will see output similar to the following:\n//\n// BenchmarkFizzBuzz    2000000000           0.46 ns/op\n//\n// This means that the loop ran 2000000000 times at a speed of 0.46 ns per loop.\n//\n// While benchmarking can be useful to compare different iterations of the same\n// exercise, keep in mind that others will run the same benchmarks on different\n// machines, with different specs, so the results from these benchmark tests may\n// vary.\nfunc BenchmarkFizzBuzz(b *testing.B) {\n    for i := 0; i < b.N; i++ {\n        FizzBuzz(15)\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"fizz-buzz-implementation\"\n    }}>{`Fizz Buzz implementation`}</h2>\n    <p>{`We will use the interger-to-ASCII function `}<inlineCode parentName=\"p\">{`itoa`}</inlineCode>{` from the `}<inlineCode parentName=\"p\">{`strings`}</inlineCode>{` library.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package fizzbuzz\n\nimport \"strconv\"\n\n// FizzBuzz should have a comment documenting it.\nfunc FizzBuzz(i int) string {\n    switch true {\n    case i%15 == 0:\n        return \"FizzBuzz\"\n    case i%3 == 0:\n        return \"Fizz\"\n    case i%5 == 0:\n        return \"Buzz\"\n    default:\n        return strconv.Itoa(i)\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"running-tests\"\n    }}>{`Running Tests`}</h2>\n    <p>{`In the directory, run `}<inlineCode parentName=\"p\">{`go test`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}