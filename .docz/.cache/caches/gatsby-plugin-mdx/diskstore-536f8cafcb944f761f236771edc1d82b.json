{"expireTime":9007200848610917000,"key":"gatsby-plugin-mdx-entire-payload-e625fa4600ebd11f0bef0d58e8511f35-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Docker Quickstart","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":20,"offset":185},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":20,"offset":185},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":9,"column":1,"offset":187},"end":{"line":9,"column":4,"offset":190},"indent":[]}},{"type":"jsx","value":"<!-- TOC -->","position":{"start":{"line":11,"column":1,"offset":192},"end":{"line":11,"column":13,"offset":204},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#docker-quickstart","children":[{"type":"text","value":"Docker Quickstart","position":{"start":{"line":13,"column":6,"offset":211},"end":{"line":13,"column":23,"offset":228},"indent":[]}}],"position":{"start":{"line":13,"column":5,"offset":210},"end":{"line":13,"column":44,"offset":249},"indent":[]}}],"position":{"start":{"line":13,"column":5,"offset":210},"end":{"line":13,"column":44,"offset":249},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#basic-commands","children":[{"type":"text","value":"Basic commands","position":{"start":{"line":14,"column":10,"offset":259},"end":{"line":14,"column":24,"offset":273},"indent":[]}}],"position":{"start":{"line":14,"column":9,"offset":258},"end":{"line":14,"column":42,"offset":291},"indent":[]}}],"position":{"start":{"line":14,"column":9,"offset":258},"end":{"line":14,"column":42,"offset":291},"indent":[]}}],"position":{"start":{"line":14,"column":5,"offset":254},"end":{"line":14,"column":42,"offset":291},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#running-the-whalesay-container","children":[{"type":"text","value":"Running the whalesay container","position":{"start":{"line":15,"column":10,"offset":301},"end":{"line":15,"column":40,"offset":331},"indent":[]}}],"position":{"start":{"line":15,"column":9,"offset":300},"end":{"line":15,"column":74,"offset":365},"indent":[]}}],"position":{"start":{"line":15,"column":9,"offset":300},"end":{"line":15,"column":74,"offset":365},"indent":[]}}],"position":{"start":{"line":15,"column":5,"offset":296},"end":{"line":15,"column":74,"offset":365},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#inspecting-docker-images","children":[{"type":"text","value":"Inspecting Docker images","position":{"start":{"line":16,"column":10,"offset":375},"end":{"line":16,"column":34,"offset":399},"indent":[]}}],"position":{"start":{"line":16,"column":9,"offset":374},"end":{"line":16,"column":62,"offset":427},"indent":[]}}],"position":{"start":{"line":16,"column":9,"offset":374},"end":{"line":16,"column":62,"offset":427},"indent":[]}}],"position":{"start":{"line":16,"column":5,"offset":370},"end":{"line":16,"column":62,"offset":427},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#container-lifecycle","children":[{"type":"text","value":"Container Lifecycle","position":{"start":{"line":17,"column":10,"offset":437},"end":{"line":17,"column":29,"offset":456},"indent":[]}}],"position":{"start":{"line":17,"column":9,"offset":436},"end":{"line":17,"column":52,"offset":479},"indent":[]}}],"position":{"start":{"line":17,"column":9,"offset":436},"end":{"line":17,"column":52,"offset":479},"indent":[]}}],"position":{"start":{"line":17,"column":5,"offset":432},"end":{"line":17,"column":52,"offset":479},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#image-and-container-management","children":[{"type":"text","value":"Image and Container Management","position":{"start":{"line":18,"column":10,"offset":489},"end":{"line":18,"column":40,"offset":519},"indent":[]}}],"position":{"start":{"line":18,"column":9,"offset":488},"end":{"line":18,"column":74,"offset":553},"indent":[]}}],"position":{"start":{"line":18,"column":9,"offset":488},"end":{"line":18,"column":74,"offset":553},"indent":[]}}],"position":{"start":{"line":18,"column":5,"offset":484},"end":{"line":18,"column":74,"offset":553},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#redirection---ports-and-volumes","children":[{"type":"text","value":"Redirection - Ports and Volumes","position":{"start":{"line":19,"column":10,"offset":563},"end":{"line":19,"column":41,"offset":594},"indent":[]}}],"position":{"start":{"line":19,"column":9,"offset":562},"end":{"line":19,"column":76,"offset":629},"indent":[]}}],"position":{"start":{"line":19,"column":9,"offset":562},"end":{"line":19,"column":76,"offset":629},"indent":[]}}],"position":{"start":{"line":19,"column":5,"offset":558},"end":{"line":19,"column":76,"offset":629},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#the-dockerfile","children":[{"type":"text","value":"The Dockerfile","position":{"start":{"line":20,"column":10,"offset":639},"end":{"line":20,"column":24,"offset":653},"indent":[]}}],"position":{"start":{"line":20,"column":9,"offset":638},"end":{"line":20,"column":42,"offset":671},"indent":[]}}],"position":{"start":{"line":20,"column":9,"offset":638},"end":{"line":20,"column":42,"offset":671},"indent":[]}}],"position":{"start":{"line":20,"column":5,"offset":634},"end":{"line":20,"column":42,"offset":671},"indent":[]}}],"position":{"start":{"line":14,"column":5,"offset":254},"end":{"line":20,"column":42,"offset":671},"indent":[5,5,5,5,5,5]}}],"position":{"start":{"line":13,"column":1,"offset":206},"end":{"line":20,"column":42,"offset":671},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":13,"column":1,"offset":206},"end":{"line":20,"column":42,"offset":671},"indent":[1,1,1,1,1,1,1]}},{"type":"jsx","value":"<!-- /TOC -->","position":{"start":{"line":22,"column":1,"offset":673},"end":{"line":22,"column":14,"offset":686},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Basic commands","position":{"start":{"line":24,"column":4,"offset":691},"end":{"line":24,"column":18,"offset":705},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":688},"end":{"line":24,"column":18,"offset":705},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Usage: docker [OPTIONS] COMMAND [arg...]\n       docker [ --help | -v | --version ]\n\nA self-sufficient runtime for containers.\n\nOptions:\n\n  --config=~/.docker              Location of client config files\n  -D, --debug                     Enable debug mode\n  -H, --host=[]                   Daemon socket(s) to connect to\n  -h, --help                      Print usage\n  -l, --log-level=info            Set the logging level\n  --tls                           Use TLS; implied by --tlsverify\n  --tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA\n  --tlscert=~/.docker/cert.pem    Path to TLS certificate file\n  --tlskey=~/.docker/key.pem      Path to TLS key file\n  --tlsverify                     Use TLS and verify the remote\n  -v, --version                   Print version information and quit\n\nCommands:\n    attach    Attach to a running container\n    build     Build an image from a Dockerfile\n    commit    Create a new image from a container's changes\n    cp        Copy files/folders between a container and the local filesystem\n    create    Create a new container\n    diff      Inspect changes on a container's filesystem\n    events    Get real time events from the server\n    exec      Run a command in a running container\n    export    Export a container's filesystem as a tar archive\n    history   Show the history of an image\n    images    List images\n    import    Import the contents from a tarball to create a filesystem image\n    info      Display system-wide information\n    inspect   Return low-level information on a container, image or task\n    kill      Kill one or more running containers\n    load      Load an image from a tar archive or STDIN\n    login     Log in to a Docker registry.\n    logout    Log out from a Docker registry.\n    logs      Fetch the logs of a container\n    network   Manage Docker networks\n    node      Manage Docker Swarm nodes\n    pause     Pause all processes within one or more containers\n    port      List port mappings or a specific mapping for the container\n    ps        List containers\n    pull      Pull an image or a repository from a registry\n    push      Push an image or a repository to a registry\n    rename    Rename a container\n    restart   Restart a container\n    rm        Remove one or more containers\n    rmi       Remove one or more images\n    run       Run a command in a new container\n    save      Save one or more images to a tar archive (streamed to STDOUT by default)\n    search    Search the Docker Hub for images\n    service   Manage Docker services\n    start     Start one or more stopped containers\n    stats     Display a live stream of container(s) resource usage statistics\n    stop      Stop one or more running containers\n    swarm     Manage Docker Swarm\n    tag       Tag an image into a repository\n    top       Display the running processes of a container\n    unpause   Unpause all processes within one or more containers\n    update    Update configuration of one or more containers\n    version   Show the Docker version information\n    volume    Manage Docker volumes\n    wait      Block until a container stops, then print its exit code","position":{"start":{"line":26,"column":1,"offset":707},"end":{"line":92,"column":4,"offset":3858},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Running the whalesay container","position":{"start":{"line":94,"column":4,"offset":3863},"end":{"line":94,"column":34,"offset":3893},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3860},"end":{"line":94,"column":34,"offset":3893},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Pull the image, run the image!","position":{"start":{"line":96,"column":1,"offset":3895},"end":{"line":96,"column":31,"offset":3925},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":3895},"end":{"line":96,"column":31,"offset":3925},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"docker pull docker/whalesay:latest\ndocker images\n\n### lists the images\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\nnginx                     latest              4efb2fcdb1ab        3 months ago        183.4 MB\nhello-world               latest              c54a2cc56cbb        4 months ago        1.848 kB\nmendlik/docker-whalesay   latest              552104437e78        8 months ago        172.3 MB\ndocker/whalesay           latest              6b362a9f73eb        18 months ago       247 MB\n\ndocker run docker/whalesay cowsay ayyyyyy mate\n ___________\n< ayyy mate >\n -----------\n    \\\n     \\\n      \\\n                    ##        .\n              ## ## ##       ==\n           ## ## ## ##      ===\n       /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n       \\______ o          __/\n        \\    \\        __/\n          \\____\\______/","position":{"start":{"line":98,"column":1,"offset":3927},"end":{"line":124,"column":4,"offset":4833},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Inspecting Docker images","position":{"start":{"line":126,"column":4,"offset":4838},"end":{"line":126,"column":28,"offset":4862},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":4835},"end":{"line":126,"column":28,"offset":4862},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"docker inspect whalesay\n[\n    {\n        \"Id\": \"sha256:6b362a9f73eb8c33b48c95f4fcce1b6637fc25646728cf7fb0679b2da273c3f4\",\n        \"RepoTags\": [\n            \"docker/whalesay:latest\"\n        ],\n        \"RepoDigests\": [\n            \"docker/whalesay@sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b\"\n        ],\n        \"Parent\": \"\",\n        \"Comment\": \"\",\n        \"Created\": \"2015-05-25T22:04:23.303454458Z\",\n        \"Container\": \"5460b2353ce4e2b3e3e81b4a523a61c5adc238ae21d3ec3a5774674652e6317f\",\n        \"ContainerConfig\": {\n            \"Hostname\": \"9ec8c01a6a48\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": [\n                \"/bin/sh\",\n                \"-c\",\n                \"#(nop) ENV PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Image\": \"5d5bd9951e26ca0301423625b19764bda914ae39c3f2bfd6f1824bf5354d10ee\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"/cowsay\",\n            \"Entrypoint\": null,\n            \"OnBuild\": [],\n            \"Labels\": {}\n        },\n        \"DockerVersion\": \"1.6.0\",\n        \"Author\": \"\",\n        \"Config\": {\n            \"Hostname\": \"9ec8c01a6a48\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": [\n                \"/bin/bash\"\n            ],\n            \"Image\": \"5d5bd9951e26ca0301423625b19764bda914ae39c3f2bfd6f1824bf5354d10ee\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"/cowsay\",\n            \"Entrypoint\": null,\n            \"OnBuild\": [],\n            \"Labels\": {}\n        },\n        \"Architecture\": \"amd64\",\n        \"Os\": \"linux\",\n        \"Size\": 247049019,\n        \"VirtualSize\": 247049019,\n        \"GraphDriver\": {\n            \"Name\": \"aufs\",\n            \"Data\": null\n        },\n        \"RootFS\": {\n            \"Type\": \"layers\",\n            \"Layers\": [\n                \"sha256:1154ba695078d29ea6c4e1adb55c463959cd77509adf09710e2315827d66271a\",\n                \"sha256:528c8710fd95f61d40b8bb8a549fa8dfa737d9b9c7c7b2ae55f745c972dddacd\",\n                \"sha256:37ee47034d9b78f10f0c5ce3a25e6b6e58997fcadaf5f896c603a10c5f35fb31\",\n                \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\",\n                \"sha256:b26122d57afa5c4a2dc8db3f986410805bc8792af3a4fa73cfde5eed0a8e5b6d\",\n                \"sha256:091abc5148e4d32cecb5522067509d7ffc1e8ac272ff75d2775138639a6c50ca\",\n                \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\",\n                \"sha256:d511ed9e12e17ab4bfc3e80ed7ce86d4aac82769b42f42b753a338ed9b8a566d\",\n                \"sha256:d061ee1340ecc8d03ca25e6ca7f7502275f558764c1ab46bd1f37854c74c5b3f\",\n                \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\"\n            ]\n        }\n    }\n]","position":{"start":{"line":128,"column":1,"offset":4864},"end":{"line":218,"column":4,"offset":8318},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":220,"column":1,"offset":8320},"end":{"line":220,"column":4,"offset":8323},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Container Lifecycle","position":{"start":{"line":222,"column":4,"offset":8328},"end":{"line":222,"column":23,"offset":8347},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":8325},"end":{"line":222,"column":23,"offset":8347},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There is a lifecycle associated with starting, stopping, restarting etc.","position":{"start":{"line":224,"column":1,"offset":8349},"end":{"line":224,"column":73,"offset":8421},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":8349},"end":{"line":224,"column":73,"offset":8421},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"docker run -d --name LifeCycle1 nginx:latest\ndocker attach LifeCycle1\n\n// exec if the container started indirectly\ndocker exec -it LifeCycle1 /bin/bash","position":{"start":{"line":226,"column":1,"offset":8423},"end":{"line":232,"column":4,"offset":8582},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We don't have to attach to the container with the ","position":{"start":{"line":234,"column":1,"offset":8584},"end":{"line":234,"column":51,"offset":8634},"indent":[]}},{"type":"inlineCode","value":"exec","position":{"start":{"line":234,"column":51,"offset":8634},"end":{"line":234,"column":57,"offset":8640},"indent":[]}},{"type":"text","value":" command. We can just connect to is just to execute a command - like a ","position":{"start":{"line":234,"column":57,"offset":8640},"end":{"line":234,"column":128,"offset":8711},"indent":[]}},{"type":"inlineCode","value":"ssh","position":{"start":{"line":234,"column":128,"offset":8711},"end":{"line":234,"column":133,"offset":8716},"indent":[]}},{"type":"text","value":" prompt!","position":{"start":{"line":234,"column":133,"offset":8716},"end":{"line":234,"column":141,"offset":8724},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":8584},"end":{"line":234,"column":141,"offset":8724},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":236,"column":1,"offset":8726},"end":{"line":236,"column":4,"offset":8729},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Image and Container Management","position":{"start":{"line":238,"column":4,"offset":8734},"end":{"line":238,"column":34,"offset":8764},"indent":[]}}],"position":{"start":{"line":238,"column":1,"offset":8731},"end":{"line":238,"column":34,"offset":8764},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"# remove the image\ndocker rmi image-name\n\n# remove all containers\ndocker rm `docker ps -a -q`","position":{"start":{"line":240,"column":1,"offset":8766},"end":{"line":246,"column":4,"offset":8867},"indent":[1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":248,"column":1,"offset":8869},"end":{"line":248,"column":4,"offset":8872},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Redirection - Ports and Volumes","position":{"start":{"line":250,"column":4,"offset":8877},"end":{"line":250,"column":35,"offset":8908},"indent":[]}}],"position":{"start":{"line":250,"column":1,"offset":8874},"end":{"line":250,"column":35,"offset":8908},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Ports","position":{"start":{"line":252,"column":3,"offset":8912},"end":{"line":252,"column":8,"offset":8917},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":8910},"end":{"line":252,"column":10,"offset":8919},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":8910},"end":{"line":252,"column":10,"offset":8919},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ports are exposed in a container so that you can connect via the container IP but must be exposed via the ","position":{"start":{"line":254,"column":1,"offset":8921},"end":{"line":254,"column":107,"offset":9027},"indent":[]}},{"type":"inlineCode","value":"dockerfile","position":{"start":{"line":254,"column":107,"offset":9027},"end":{"line":254,"column":119,"offset":9039},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":254,"column":119,"offset":9039},"end":{"line":254,"column":120,"offset":9040},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":8921},"end":{"line":254,"column":120,"offset":9040},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can direct the port for a http container to a port on the underlying host.","position":{"start":{"line":256,"column":1,"offset":9042},"end":{"line":256,"column":78,"offset":9119},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":9042},"end":{"line":256,"column":78,"offset":9119},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"docker run -d -P --name:webserver nginx:latest","position":{"start":{"line":258,"column":1,"offset":9121},"end":{"line":258,"column":49,"offset":9169},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":9121},"end":{"line":258,"column":49,"offset":9169},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To find all the address redirection, we can write ","position":{"start":{"line":260,"column":1,"offset":9171},"end":{"line":260,"column":51,"offset":9221},"indent":[]}},{"type":"inlineCode","value":"docker port WebServer1 $CONTAINERPORT","position":{"start":{"line":260,"column":51,"offset":9221},"end":{"line":260,"column":90,"offset":9260},"indent":[]}}],"position":{"start":{"line":260,"column":1,"offset":9171},"end":{"line":260,"column":90,"offset":9260},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"okeeffe_d@dok ~$ docker port WebServer1 $CONTAINERPORT\n\n443/tcp -> 0.0.0.0:32768\n80/tcp -> 0.0.0.0:32769","position":{"start":{"line":262,"column":1,"offset":9262},"end":{"line":267,"column":4,"offset":9374},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"docker run -d -p 8080:80 --name=webserver nginx:latest","position":{"start":{"line":269,"column":1,"offset":9376},"end":{"line":269,"column":57,"offset":9432},"indent":[]}},{"type":"text","value":" is also useful for a variety of reasons.","position":{"start":{"line":269,"column":57,"offset":9432},"end":{"line":269,"column":98,"offset":9473},"indent":[]}}],"position":{"start":{"line":269,"column":1,"offset":9376},"end":{"line":269,"column":98,"offset":9473},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We no longer have to worry about routing - we can do dev/set up the correct ports. We no longer have to do any static routing.","position":{"start":{"line":271,"column":1,"offset":9475},"end":{"line":271,"column":127,"offset":9601},"indent":[]}}],"position":{"start":{"line":271,"column":1,"offset":9475},"end":{"line":271,"column":127,"offset":9601},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"No we can pass stuff to the host without having to copy it.","position":{"start":{"line":273,"column":1,"offset":9603},"end":{"line":273,"column":60,"offset":9662},"indent":[]}}],"position":{"start":{"line":273,"column":1,"offset":9603},"end":{"line":273,"column":60,"offset":9662},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This means we can mount underlying directories.","position":{"start":{"line":275,"column":1,"offset":9664},"end":{"line":275,"column":48,"offset":9711},"indent":[]}}],"position":{"start":{"line":275,"column":1,"offset":9664},"end":{"line":275,"column":48,"offset":9711},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"docker run -d -p 8080:80 --name=webserver -v /mnt/data nginx:latest # mount data","position":{"start":{"line":277,"column":1,"offset":9713},"end":{"line":279,"column":4,"offset":9801},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Good practise is to keep the container as emphemeral as possible. It should not contain things that won't stick around. We want to run a command and start a container without a complex configuration.","position":{"start":{"line":281,"column":1,"offset":9803},"end":{"line":281,"column":200,"offset":10002},"indent":[]}}],"position":{"start":{"line":281,"column":1,"offset":9803},"end":{"line":281,"column":200,"offset":10002},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"// 15 min mark","position":{"start":{"line":283,"column":1,"offset":10004},"end":{"line":283,"column":15,"offset":10018},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":10004},"end":{"line":283,"column":15,"offset":10018},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we create a basic file and create a HTML page, we could then run","position":{"start":{"line":285,"column":1,"offset":10020},"end":{"line":285,"column":68,"offset":10087},"indent":[]}}],"position":{"start":{"line":285,"column":1,"offset":10020},"end":{"line":285,"column":68,"offset":10087},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"docker run -d -p 8080:80 --name=webserver -v /home/user/www:/usr/share/nginx/html nginx:latest\n\n// this will mount the file and mount it to that directory. We can push multiple mounts!","position":{"start":{"line":287,"column":1,"offset":10089},"end":{"line":291,"column":4,"offset":10281},"indent":[1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":293,"column":1,"offset":10283},"end":{"line":293,"column":4,"offset":10286},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The Dockerfile","position":{"start":{"line":295,"column":4,"offset":10291},"end":{"line":295,"column":18,"offset":10305},"indent":[]}}],"position":{"start":{"line":295,"column":1,"offset":10288},"end":{"line":295,"column":18,"offset":10305},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Very few times will you start with a generic list of packages for a base image and creating it from nothing.","position":{"start":{"line":297,"column":1,"offset":10307},"end":{"line":297,"column":109,"offset":10415},"indent":[]}}],"position":{"start":{"line":297,"column":1,"offset":10307},"end":{"line":297,"column":109,"offset":10415},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You'll base on it on things like ","position":{"start":{"line":299,"column":1,"offset":10417},"end":{"line":299,"column":34,"offset":10450},"indent":[]}},{"type":"inlineCode","value":"debian, ubuntu","position":{"start":{"line":299,"column":34,"offset":10450},"end":{"line":299,"column":50,"offset":10466},"indent":[]}},{"type":"text","value":" etc.","position":{"start":{"line":299,"column":50,"offset":10466},"end":{"line":299,"column":55,"offset":10471},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":10417},"end":{"line":299,"column":55,"offset":10471},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Dockerfile is an easy to read, easy to write script to build an image following instructions.","position":{"start":{"line":301,"column":1,"offset":10473},"end":{"line":301,"column":98,"offset":10570},"indent":[]}}],"position":{"start":{"line":301,"column":1,"offset":10473},"end":{"line":301,"column":98,"offset":10570},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can name it whatever, but will probably just be stored in ","position":{"start":{"line":303,"column":1,"offset":10572},"end":{"line":303,"column":63,"offset":10634},"indent":[]}},{"type":"inlineCode","value":"Dockerfile","position":{"start":{"line":303,"column":63,"offset":10634},"end":{"line":303,"column":75,"offset":10646},"indent":[]}},{"type":"text","value":" anyway.","position":{"start":{"line":303,"column":75,"offset":10646},"end":{"line":303,"column":83,"offset":10654},"indent":[]}}],"position":{"start":{"line":303,"column":1,"offset":10572},"end":{"line":303,"column":83,"offset":10654},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note, things will cache if they've already been done!","position":{"start":{"line":305,"column":1,"offset":10656},"end":{"line":305,"column":54,"offset":10709},"indent":[]}}],"position":{"start":{"line":305,"column":1,"offset":10656},"end":{"line":305,"column":54,"offset":10709},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example Dockerfile:","position":{"start":{"line":307,"column":1,"offset":10711},"end":{"line":307,"column":20,"offset":10730},"indent":[]}}],"position":{"start":{"line":307,"column":1,"offset":10711},"end":{"line":307,"column":20,"offset":10730},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"# most have FROM which image\nFROM debian:stable\nMAINTAINER dockerhubid <email>\n\n# best practise is to combined commands\nRUN apt-get update && age-get upgrade - y && apt-get install -y apache2 telnet elinks ssh openssh-server\nENV MYVALUE my-value","position":{"start":{"line":309,"column":1,"offset":10732},"end":{"line":317,"column":4,"offset":10985},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then docker run!","position":{"start":{"line":319,"column":1,"offset":10987},"end":{"line":319,"column":17,"offset":11003},"indent":[]}}],"position":{"start":{"line":319,"column":1,"offset":10987},"end":{"line":319,"column":17,"offset":11003},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"docker run -it dockerhubid/myapache:latest /bin/bash\n\n> echo MYVALUE\nmy-value","position":{"start":{"line":321,"column":1,"offset":11005},"end":{"line":326,"column":4,"offset":11090},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Exposing or preventing exposing ports","position":{"start":{"line":328,"column":3,"offset":11094},"end":{"line":328,"column":40,"offset":11131},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":11092},"end":{"line":328,"column":42,"offset":11133},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":11092},"end":{"line":328,"column":42,"offset":11133},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"# most have FROM which image\nFROM debian:stable\nMAINTAINER dockerhubid <email>\n\n# best practise is to combined commands\nRUN apt-get update && age-get upgrade - y && apt-get install -y apache2 telnet elinks ssh openssh-server\nENV MYVALUE my-value\n\nEXPOSE 80\nEXPOSE 22\n\nCMD [\"/usr/sbin/apache2tl\",\"-D\",\"FOREGROUND\"]","position":{"start":{"line":330,"column":1,"offset":11135},"end":{"line":343,"column":4,"offset":11456},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now if we Docker inspect on the file and find the IPAddr, we can see that the Apache website is now running!","position":{"start":{"line":345,"column":1,"offset":11458},"end":{"line":345,"column":109,"offset":11566},"indent":[]}}],"position":{"start":{"line":345,"column":1,"offset":11458},"end":{"line":345,"column":109,"offset":11566},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":348,"column":1,"offset":11569},"end":{"line":348,"column":31,"offset":11599},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":348,"column":31,"offset":11599}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"docker-quickstart\"\n    }}>{`Docker Quickstart`}</h1>\n    <hr></hr>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#docker-quickstart\"\n        }}>{`Docker Quickstart`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#basic-commands\"\n            }}>{`Basic commands`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#running-the-whalesay-container\"\n            }}>{`Running the whalesay container`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#inspecting-docker-images\"\n            }}>{`Inspecting Docker images`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#container-lifecycle\"\n            }}>{`Container Lifecycle`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#image-and-container-management\"\n            }}>{`Image and Container Management`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#redirection---ports-and-volumes\"\n            }}>{`Redirection - Ports and Volumes`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#the-dockerfile\"\n            }}>{`The Dockerfile`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"basic-commands\"\n    }}>{`Basic commands`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Usage: docker [OPTIONS] COMMAND [arg...]\n       docker [ --help | -v | --version ]\n\nA self-sufficient runtime for containers.\n\nOptions:\n\n  --config=~/.docker              Location of client config files\n  -D, --debug                     Enable debug mode\n  -H, --host=[]                   Daemon socket(s) to connect to\n  -h, --help                      Print usage\n  -l, --log-level=info            Set the logging level\n  --tls                           Use TLS; implied by --tlsverify\n  --tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA\n  --tlscert=~/.docker/cert.pem    Path to TLS certificate file\n  --tlskey=~/.docker/key.pem      Path to TLS key file\n  --tlsverify                     Use TLS and verify the remote\n  -v, --version                   Print version information and quit\n\nCommands:\n    attach    Attach to a running container\n    build     Build an image from a Dockerfile\n    commit    Create a new image from a container's changes\n    cp        Copy files/folders between a container and the local filesystem\n    create    Create a new container\n    diff      Inspect changes on a container's filesystem\n    events    Get real time events from the server\n    exec      Run a command in a running container\n    export    Export a container's filesystem as a tar archive\n    history   Show the history of an image\n    images    List images\n    import    Import the contents from a tarball to create a filesystem image\n    info      Display system-wide information\n    inspect   Return low-level information on a container, image or task\n    kill      Kill one or more running containers\n    load      Load an image from a tar archive or STDIN\n    login     Log in to a Docker registry.\n    logout    Log out from a Docker registry.\n    logs      Fetch the logs of a container\n    network   Manage Docker networks\n    node      Manage Docker Swarm nodes\n    pause     Pause all processes within one or more containers\n    port      List port mappings or a specific mapping for the container\n    ps        List containers\n    pull      Pull an image or a repository from a registry\n    push      Push an image or a repository to a registry\n    rename    Rename a container\n    restart   Restart a container\n    rm        Remove one or more containers\n    rmi       Remove one or more images\n    run       Run a command in a new container\n    save      Save one or more images to a tar archive (streamed to STDOUT by default)\n    search    Search the Docker Hub for images\n    service   Manage Docker services\n    start     Start one or more stopped containers\n    stats     Display a live stream of container(s) resource usage statistics\n    stop      Stop one or more running containers\n    swarm     Manage Docker Swarm\n    tag       Tag an image into a repository\n    top       Display the running processes of a container\n    unpause   Unpause all processes within one or more containers\n    update    Update configuration of one or more containers\n    version   Show the Docker version information\n    volume    Manage Docker volumes\n    wait      Block until a container stops, then print its exit code\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"running-the-whalesay-container\"\n    }}>{`Running the whalesay container`}</h2>\n    <p>{`Pull the image, run the image!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker pull docker/whalesay:latest\ndocker images\n\n### lists the images\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\nnginx                     latest              4efb2fcdb1ab        3 months ago        183.4 MB\nhello-world               latest              c54a2cc56cbb        4 months ago        1.848 kB\nmendlik/docker-whalesay   latest              552104437e78        8 months ago        172.3 MB\ndocker/whalesay           latest              6b362a9f73eb        18 months ago       247 MB\n\ndocker run docker/whalesay cowsay ayyyyyy mate\n ___________\n< ayyy mate >\n -----------\n    \\\\\n     \\\\\n      \\\\\n                    ##        .\n              ## ## ##       ==\n           ## ## ## ##      ===\n       /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n       \\\\______ o          __/\n        \\\\    \\\\        __/\n          \\\\____\\\\______/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"inspecting-docker-images\"\n    }}>{`Inspecting Docker images`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`docker inspect whalesay\n[\n    {\n        \"Id\": \"sha256:6b362a9f73eb8c33b48c95f4fcce1b6637fc25646728cf7fb0679b2da273c3f4\",\n        \"RepoTags\": [\n            \"docker/whalesay:latest\"\n        ],\n        \"RepoDigests\": [\n            \"docker/whalesay@sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b\"\n        ],\n        \"Parent\": \"\",\n        \"Comment\": \"\",\n        \"Created\": \"2015-05-25T22:04:23.303454458Z\",\n        \"Container\": \"5460b2353ce4e2b3e3e81b4a523a61c5adc238ae21d3ec3a5774674652e6317f\",\n        \"ContainerConfig\": {\n            \"Hostname\": \"9ec8c01a6a48\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": [\n                \"/bin/sh\",\n                \"-c\",\n                \"#(nop) ENV PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Image\": \"5d5bd9951e26ca0301423625b19764bda914ae39c3f2bfd6f1824bf5354d10ee\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"/cowsay\",\n            \"Entrypoint\": null,\n            \"OnBuild\": [],\n            \"Labels\": {}\n        },\n        \"DockerVersion\": \"1.6.0\",\n        \"Author\": \"\",\n        \"Config\": {\n            \"Hostname\": \"9ec8c01a6a48\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": [\n                \"/bin/bash\"\n            ],\n            \"Image\": \"5d5bd9951e26ca0301423625b19764bda914ae39c3f2bfd6f1824bf5354d10ee\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"/cowsay\",\n            \"Entrypoint\": null,\n            \"OnBuild\": [],\n            \"Labels\": {}\n        },\n        \"Architecture\": \"amd64\",\n        \"Os\": \"linux\",\n        \"Size\": 247049019,\n        \"VirtualSize\": 247049019,\n        \"GraphDriver\": {\n            \"Name\": \"aufs\",\n            \"Data\": null\n        },\n        \"RootFS\": {\n            \"Type\": \"layers\",\n            \"Layers\": [\n                \"sha256:1154ba695078d29ea6c4e1adb55c463959cd77509adf09710e2315827d66271a\",\n                \"sha256:528c8710fd95f61d40b8bb8a549fa8dfa737d9b9c7c7b2ae55f745c972dddacd\",\n                \"sha256:37ee47034d9b78f10f0c5ce3a25e6b6e58997fcadaf5f896c603a10c5f35fb31\",\n                \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\",\n                \"sha256:b26122d57afa5c4a2dc8db3f986410805bc8792af3a4fa73cfde5eed0a8e5b6d\",\n                \"sha256:091abc5148e4d32cecb5522067509d7ffc1e8ac272ff75d2775138639a6c50ca\",\n                \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\",\n                \"sha256:d511ed9e12e17ab4bfc3e80ed7ce86d4aac82769b42f42b753a338ed9b8a566d\",\n                \"sha256:d061ee1340ecc8d03ca25e6ca7f7502275f558764c1ab46bd1f37854c74c5b3f\",\n                \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\"\n            ]\n        }\n    }\n]\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"container-lifecycle\"\n    }}>{`Container Lifecycle`}</h2>\n    <p>{`There is a lifecycle associated with starting, stopping, restarting etc.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -d --name LifeCycle1 nginx:latest\ndocker attach LifeCycle1\n\n// exec if the container started indirectly\ndocker exec -it LifeCycle1 /bin/bash\n`}</code></pre>\n    <p>{`We don't have to attach to the container with the `}<inlineCode parentName=\"p\">{`exec`}</inlineCode>{` command. We can just connect to is just to execute a command - like a `}<inlineCode parentName=\"p\">{`ssh`}</inlineCode>{` prompt!`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"image-and-container-management\"\n    }}>{`Image and Container Management`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`# remove the image\ndocker rmi image-name\n\n# remove all containers\ndocker rm \\`docker ps -a -q\\`\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"redirection---ports-and-volumes\"\n    }}>{`Redirection - Ports and Volumes`}</h2>\n    <p><strong parentName=\"p\">{`Ports`}</strong></p>\n    <p>{`Ports are exposed in a container so that you can connect via the container IP but must be exposed via the `}<inlineCode parentName=\"p\">{`dockerfile`}</inlineCode>{`.`}</p>\n    <p>{`We can direct the port for a http container to a port on the underlying host.`}</p>\n    <p><inlineCode parentName=\"p\">{`docker run -d -P --name:webserver nginx:latest`}</inlineCode></p>\n    <p>{`To find all the address redirection, we can write `}<inlineCode parentName=\"p\">{`docker port WebServer1 $CONTAINERPORT`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`okeeffe_d@dok ~$ docker port WebServer1 $CONTAINERPORT\n\n443/tcp -> 0.0.0.0:32768\n80/tcp -> 0.0.0.0:32769\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`docker run -d -p 8080:80 --name=webserver nginx:latest`}</inlineCode>{` is also useful for a variety of reasons.`}</p>\n    <p>{`We no longer have to worry about routing - we can do dev/set up the correct ports. We no longer have to do any static routing.`}</p>\n    <p>{`No we can pass stuff to the host without having to copy it.`}</p>\n    <p>{`This means we can mount underlying directories.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -d -p 8080:80 --name=webserver -v /mnt/data nginx:latest # mount data\n`}</code></pre>\n    <p>{`Good practise is to keep the container as emphemeral as possible. It should not contain things that won't stick around. We want to run a command and start a container without a complex configuration.`}</p>\n    <p>{`// 15 min mark`}</p>\n    <p>{`If we create a basic file and create a HTML page, we could then run`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -d -p 8080:80 --name=webserver -v /home/user/www:/usr/share/nginx/html nginx:latest\n\n// this will mount the file and mount it to that directory. We can push multiple mounts!\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"the-dockerfile\"\n    }}>{`The Dockerfile`}</h2>\n    <p>{`Very few times will you start with a generic list of packages for a base image and creating it from nothing.`}</p>\n    <p>{`You'll base on it on things like `}<inlineCode parentName=\"p\">{`debian, ubuntu`}</inlineCode>{` etc.`}</p>\n    <p>{`The Dockerfile is an easy to read, easy to write script to build an image following instructions.`}</p>\n    <p>{`You can name it whatever, but will probably just be stored in `}<inlineCode parentName=\"p\">{`Dockerfile`}</inlineCode>{` anyway.`}</p>\n    <p>{`Note, things will cache if they've already been done!`}</p>\n    <p>{`Example Dockerfile:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# most have FROM which image\nFROM debian:stable\nMAINTAINER dockerhubid <email>\n\n# best practise is to combined commands\nRUN apt-get update && age-get upgrade - y && apt-get install -y apache2 telnet elinks ssh openssh-server\nENV MYVALUE my-value\n`}</code></pre>\n    <p>{`Then docker run!`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -it dockerhubid/myapache:latest /bin/bash\n\n> echo MYVALUE\nmy-value\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Exposing or preventing exposing ports`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`# most have FROM which image\nFROM debian:stable\nMAINTAINER dockerhubid <email>\n\n# best practise is to combined commands\nRUN apt-get update && age-get upgrade - y && apt-get install -y apache2 telnet elinks ssh openssh-server\nENV MYVALUE my-value\n\nEXPOSE 80\nEXPOSE 22\n\nCMD [\"/usr/sbin/apache2tl\",\"-D\",\"FOREGROUND\"]\n`}</code></pre>\n    <p>{`Now if we Docker inspect on the file and find the IPAddr, we can see that the Apache website is now running!`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}