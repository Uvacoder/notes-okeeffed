{"expireTime":9007200848610927000,"key":"gatsby-plugin-mdx-entire-payload-fe6a9c5f5aa677fb31034950b07725ff-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Contentful JS API","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":20,"offset":186},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":20,"offset":186},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Installation","position":{"start":{"line":10,"column":4,"offset":191},"end":{"line":10,"column":16,"offset":203},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":16,"offset":203},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"yarn add contentful","position":{"start":{"line":12,"column":1,"offset":205},"end":{"line":14,"column":4,"offset":237},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Quickstart","position":{"start":{"line":16,"column":4,"offset":242},"end":{"line":16,"column":14,"offset":252},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":239},"end":{"line":16,"column":14,"offset":252},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create a ","position":{"start":{"line":18,"column":1,"offset":254},"end":{"line":18,"column":10,"offset":263},"indent":[]}},{"type":"inlineCode","value":".env","position":{"start":{"line":18,"column":10,"offset":263},"end":{"line":18,"column":16,"offset":269},"indent":[]}},{"type":"text","value":" file with following values:","position":{"start":{"line":18,"column":16,"offset":269},"end":{"line":18,"column":44,"offset":297},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":254},"end":{"line":18,"column":44,"offset":297},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"CONTENTFUL_SPACE_ID=FILL_IN\nCONTENTFUL_API_KEY=FILL_IN","position":{"start":{"line":20,"column":1,"offset":299},"end":{"line":23,"column":4,"offset":366},"indent":[1,1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"require('dotenv').config();\nconst contentful = require('contentful');\nconst fs = require('fs-extra');\n\nvar client = contentful.createClient({\n  space: process.env.CONTENTFUL_SPACE_ID,\n  accessToken: process.env.CONTENTFUL_API_KEY\n});\n\nclient.getEntries().then(function(entries) {\n  const obj = {};\n  // log the title for all the entries that have it\n  entries.items.forEach(function(entry) {\n    console.log(entry.fields);\n  });\n\n  fs.writeJsonSync('./data.json', entries);\n});","position":{"start":{"line":25,"column":1,"offset":368},"end":{"line":44,"column":4,"offset":863},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Getting specific entries","position":{"start":{"line":46,"column":4,"offset":868},"end":{"line":46,"column":28,"offset":892},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":865},"end":{"line":46,"column":28,"offset":892},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"require('dotenv').config();\nconst contentful = require('contentful');\nconst fs = require('fs-extra');\n\nvar client = contentful.createClient({\n  space: process.env.CONTENTFUL_SPACE_ID,\n  accessToken: process.env.CONTENTFUL_API_KEY\n});\n\n// example content type could be a blog post etc\nclient\n  .getEntries({\n    'fields.sku': '<sku_value>',\n    content_type: '<product_content_type_id>'\n  })\n  .then(function(entries) {\n    entries.items.forEach(function(entry) {\n      console.log(JSON.stringify(entry.fields.sku));\n    });\n  });","position":{"start":{"line":48,"column":1,"offset":894},"end":{"line":69,"column":4,"offset":1441},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Structure","position":{"start":{"line":71,"column":4,"offset":1446},"end":{"line":71,"column":13,"offset":1455},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":1443},"end":{"line":71,"column":13,"offset":1455},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The importantant part of the recursive structure is that each field that requires another type is place under the ","position":{"start":{"line":73,"column":1,"offset":1457},"end":{"line":73,"column":115,"offset":1571},"indent":[]}},{"type":"inlineCode","value":"fields","position":{"start":{"line":73,"column":115,"offset":1571},"end":{"line":73,"column":123,"offset":1579},"indent":[]}},{"type":"text","value":" JSON type.","position":{"start":{"line":73,"column":123,"offset":1579},"end":{"line":73,"column":134,"offset":1590},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":1457},"end":{"line":73,"column":134,"offset":1590},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":76,"column":1,"offset":1593},"end":{"line":76,"column":31,"offset":1623},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":76,"column":31,"offset":1623}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"contentful-js-api\"\n    }}>{`Contentful JS API`}</h1>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add contentful\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"quickstart\"\n    }}>{`Quickstart`}</h2>\n    <p>{`Create a `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file with following values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`CONTENTFUL_SPACE_ID=FILL_IN\nCONTENTFUL_API_KEY=FILL_IN\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`require('dotenv').config();\nconst contentful = require('contentful');\nconst fs = require('fs-extra');\n\nvar client = contentful.createClient({\n  space: process.env.CONTENTFUL_SPACE_ID,\n  accessToken: process.env.CONTENTFUL_API_KEY\n});\n\nclient.getEntries().then(function(entries) {\n  const obj = {};\n  // log the title for all the entries that have it\n  entries.items.forEach(function(entry) {\n    console.log(entry.fields);\n  });\n\n  fs.writeJsonSync('./data.json', entries);\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"getting-specific-entries\"\n    }}>{`Getting specific entries`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`require('dotenv').config();\nconst contentful = require('contentful');\nconst fs = require('fs-extra');\n\nvar client = contentful.createClient({\n  space: process.env.CONTENTFUL_SPACE_ID,\n  accessToken: process.env.CONTENTFUL_API_KEY\n});\n\n// example content type could be a blog post etc\nclient\n  .getEntries({\n    'fields.sku': '<sku_value>',\n    content_type: '<product_content_type_id>'\n  })\n  .then(function(entries) {\n    entries.items.forEach(function(entry) {\n      console.log(JSON.stringify(entry.fields.sku));\n    });\n  });\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"structure\"\n    }}>{`Structure`}</h2>\n    <p>{`The importantant part of the recursive structure is that each field that requires another type is place under the `}<inlineCode parentName=\"p\">{`fields`}</inlineCode>{` JSON type.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}