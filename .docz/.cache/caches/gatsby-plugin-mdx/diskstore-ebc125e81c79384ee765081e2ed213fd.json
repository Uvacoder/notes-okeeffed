{"expireTime":9007200848610914000,"key":"gatsby-plugin-mdx-entire-payload-2d0aaf11b05e95749d40a6a618b1896a-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Functional Architecture Patterns","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":35,"offset":201},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":35,"offset":201},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":206},"end":{"line":10,"column":13,"offset":215},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":203},"end":{"line":10,"column":13,"offset":215},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://frontendmasters.com/workshops/functional-architecture-patterns","children":[{"type":"text","value":"FE Masters Workshop","position":{"start":{"line":12,"column":5,"offset":221},"end":{"line":12,"column":24,"offset":240},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":220},"end":{"line":12,"column":97,"offset":313},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":220},"end":{"line":12,"column":97,"offset":313},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":217},"end":{"line":12,"column":97,"offset":313},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.amazon.com.au/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215","children":[{"type":"text","value":"Domain-Driven Design","position":{"start":{"line":13,"column":5,"offset":318},"end":{"line":13,"column":25,"offset":338},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":317},"end":{"line":13,"column":117,"offset":430},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":317},"end":{"line":13,"column":117,"offset":430},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":314},"end":{"line":13,"column":117,"offset":430},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":217},"end":{"line":13,"column":117,"offset":430},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Architecture","position":{"start":{"line":15,"column":4,"offset":435},"end":{"line":15,"column":16,"offset":447},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":432},"end":{"line":15,"column":16,"offset":447},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"You can't teach it in a meaningful way with meaningful architectures... as there is a tension between realistics examples that show the benefits vs something easy to understand.","position":{"start":{"line":17,"column":3,"offset":451},"end":{"line":17,"column":180,"offset":628},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":451},"end":{"line":17,"column":180,"offset":628},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":449},"end":{"line":17,"column":180,"offset":628},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Architecture is subjective, but tries to encompass or trade off to be:","position":{"start":{"line":19,"column":1,"offset":630},"end":{"line":19,"column":71,"offset":700},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":630},"end":{"line":19,"column":71,"offset":700},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Modular","position":{"start":{"line":21,"column":4,"offset":705},"end":{"line":21,"column":11,"offset":712},"indent":[]}}],"position":{"start":{"line":21,"column":4,"offset":705},"end":{"line":21,"column":11,"offset":712},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":702},"end":{"line":21,"column":11,"offset":712},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Extendable","position":{"start":{"line":22,"column":4,"offset":716},"end":{"line":22,"column":14,"offset":726},"indent":[]}}],"position":{"start":{"line":22,"column":4,"offset":716},"end":{"line":22,"column":14,"offset":726},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":713},"end":{"line":22,"column":14,"offset":726},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Performant","position":{"start":{"line":23,"column":4,"offset":730},"end":{"line":23,"column":14,"offset":740},"indent":[]}}],"position":{"start":{"line":23,"column":4,"offset":730},"end":{"line":23,"column":14,"offset":740},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":727},"end":{"line":23,"column":14,"offset":740},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Maintainable","position":{"start":{"line":24,"column":4,"offset":744},"end":{"line":24,"column":16,"offset":756},"indent":[]}}],"position":{"start":{"line":24,"column":4,"offset":744},"end":{"line":24,"column":16,"offset":756},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":741},"end":{"line":24,"column":16,"offset":756},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Readable","position":{"start":{"line":25,"column":4,"offset":760},"end":{"line":25,"column":12,"offset":768},"indent":[]}}],"position":{"start":{"line":25,"column":4,"offset":760},"end":{"line":25,"column":12,"offset":768},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":757},"end":{"line":25,"column":12,"offset":768},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":702},"end":{"line":25,"column":12,"offset":768},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"The history of procedures","position":{"start":{"line":27,"column":5,"offset":774},"end":{"line":27,"column":30,"offset":799},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":770},"end":{"line":27,"column":30,"offset":799},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the beginning, there we procedures that we began to group and work on. There is a reference to ","position":{"start":{"line":29,"column":1,"offset":801},"end":{"line":29,"column":99,"offset":899},"indent":[]}},{"type":"inlineCode","value":"Domain-Driven Design","position":{"start":{"line":29,"column":99,"offset":899},"end":{"line":29,"column":121,"offset":921},"indent":[]}},{"type":"text","value":", which is reference as the path we start going down.","position":{"start":{"line":29,"column":121,"offset":921},"end":{"line":29,"column":174,"offset":974},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":801},"end":{"line":29,"column":174,"offset":974},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Having procedures groups that don't scale well make people wonder why we do abstracting the first place.","position":{"start":{"line":31,"column":1,"offset":976},"end":{"line":31,"column":105,"offset":1080},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":976},"end":{"line":31,"column":105,"offset":1080},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Properties of FP","position":{"start":{"line":33,"column":4,"offset":1085},"end":{"line":33,"column":20,"offset":1101},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1082},"end":{"line":33,"column":20,"offset":1101},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// associative\nadd(add(1, 1), 4) === add(1, add(1, 4));\n// communitive\nadd(1, 4) === add(4, 1);\n// identity\nadd(n, 0) === n;\n// distributive\nmultiply(2, add(3, 4)) === add(multiply(2, 3), multiply(2, 4));","position":{"start":{"line":35,"column":1,"offset":1103},"end":{"line":44,"column":4,"offset":1325},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"const joinWithSpace = joinable => joinable.join(' ');","position":{"start":{"line":46,"column":1,"offset":1327},"end":{"line":48,"column":4,"offset":1398},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":51,"column":1,"offset":1401},"end":{"line":51,"column":31,"offset":1431},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":51,"column":31,"offset":1431}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"functional-architecture-patterns\"\n    }}>{`Functional Architecture Patterns`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/workshops/functional-architecture-patterns\"\n        }}>{`FE Masters Workshop`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.amazon.com.au/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215\"\n        }}>{`Domain-Driven Design`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"architecture\"\n    }}>{`Architecture`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You can't teach it in a meaningful way with meaningful architectures... as there is a tension between realistics examples that show the benefits vs something easy to understand.`}</p>\n    </blockquote>\n    <p>{`Architecture is subjective, but tries to encompass or trade off to be:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Modular`}</li>\n      <li parentName=\"ol\">{`Extendable`}</li>\n      <li parentName=\"ol\">{`Performant`}</li>\n      <li parentName=\"ol\">{`Maintainable`}</li>\n      <li parentName=\"ol\">{`Readable`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"the-history-of-procedures\"\n    }}>{`The history of procedures`}</h3>\n    <p>{`In the beginning, there we procedures that we began to group and work on. There is a reference to `}<inlineCode parentName=\"p\">{`Domain-Driven Design`}</inlineCode>{`, which is reference as the path we start going down.`}</p>\n    <p>{`Having procedures groups that don't scale well make people wonder why we do abstracting the first place.`}</p>\n    <h2 {...{\n      \"id\": \"properties-of-fp\"\n    }}>{`Properties of FP`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// associative\nadd(add(1, 1), 4) === add(1, add(1, 4));\n// communitive\nadd(1, 4) === add(4, 1);\n// identity\nadd(n, 0) === n;\n// distributive\nmultiply(2, add(3, 4)) === add(multiply(2, 3), multiply(2, 4));\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const joinWithSpace = joinable => joinable.join(' ');\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}