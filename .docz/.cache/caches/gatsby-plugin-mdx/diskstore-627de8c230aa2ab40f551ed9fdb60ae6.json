{"expireTime":9007200848610924000,"key":"gatsby-plugin-mdx-entire-payload-9609203390818d1429bd6413f44c5159-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Command","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":10,"offset":176},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":10,"offset":176},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"A behavioural design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. -- Wikipedia","position":{"start":{"line":10,"column":3,"offset":180},"end":{"line":10,"column":167,"offset":344},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":180},"end":{"line":10,"column":167,"offset":344},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":178},"end":{"line":10,"column":167,"offset":344},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Terminology","position":{"start":{"line":12,"column":4,"offset":349},"end":{"line":12,"column":15,"offset":360},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":346},"end":{"line":12,"column":15,"offset":360},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Command: Knows about ","position":{"start":{"line":14,"column":3,"offset":364},"end":{"line":14,"column":24,"offset":385},"indent":[]}},{"type":"inlineCode","value":"receiver","position":{"start":{"line":14,"column":24,"offset":385},"end":{"line":14,"column":34,"offset":395},"indent":[]}},{"type":"text","value":" and invokes a method of the ","position":{"start":{"line":14,"column":34,"offset":395},"end":{"line":14,"column":63,"offset":424},"indent":[]}},{"type":"inlineCode","value":"receiver","position":{"start":{"line":14,"column":63,"offset":424},"end":{"line":14,"column":73,"offset":434},"indent":[]}},{"type":"text","value":". Values for params of the receiver method are stored in the command. Values for receiver method params are stored in command.","position":{"start":{"line":14,"column":73,"offset":434},"end":{"line":14,"column":199,"offset":560},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":364},"end":{"line":14,"column":199,"offset":560},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":362},"end":{"line":14,"column":199,"offset":560},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Receiver: Does the work when ","position":{"start":{"line":15,"column":3,"offset":563},"end":{"line":15,"column":32,"offset":592},"indent":[]}},{"type":"inlineCode","value":"execute()","position":{"start":{"line":15,"column":32,"offset":592},"end":{"line":15,"column":43,"offset":603},"indent":[]}},{"type":"text","value":" is called in ","position":{"start":{"line":15,"column":43,"offset":603},"end":{"line":15,"column":57,"offset":617},"indent":[]}},{"type":"inlineCode","value":"command","position":{"start":{"line":15,"column":57,"offset":617},"end":{"line":15,"column":66,"offset":626},"indent":[]}},{"type":"text","value":" object.","position":{"start":{"line":15,"column":66,"offset":626},"end":{"line":15,"column":74,"offset":634},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":563},"end":{"line":15,"column":74,"offset":634},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":561},"end":{"line":15,"column":74,"offset":634},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Invoker: Knows how to execute a command and optionally does bookkeeping about command execution. Does not know anything about a concrete command, only the command interface.","position":{"start":{"line":16,"column":3,"offset":637},"end":{"line":16,"column":176,"offset":810},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":637},"end":{"line":16,"column":176,"offset":810},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":635},"end":{"line":16,"column":176,"offset":810},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Client: Holds the ","position":{"start":{"line":17,"column":3,"offset":813},"end":{"line":17,"column":21,"offset":831},"indent":[]}},{"type":"inlineCode","value":"command","position":{"start":{"line":17,"column":21,"offset":831},"end":{"line":17,"column":30,"offset":840},"indent":[]}},{"type":"text","value":" objects and ","position":{"start":{"line":17,"column":30,"offset":840},"end":{"line":17,"column":43,"offset":853},"indent":[]}},{"type":"inlineCode","value":"receiver","position":{"start":{"line":17,"column":43,"offset":853},"end":{"line":17,"column":53,"offset":863},"indent":[]}},{"type":"text","value":" objects and assigns commands to the ","position":{"start":{"line":17,"column":53,"offset":863},"end":{"line":17,"column":90,"offset":900},"indent":[]}},{"type":"inlineCode","value":"invoker","position":{"start":{"line":17,"column":90,"offset":900},"end":{"line":17,"column":99,"offset":909},"indent":[]}},{"type":"text","value":". The client is also responsible for executing which commands at which points. It passes the ","position":{"start":{"line":17,"column":99,"offset":909},"end":{"line":17,"column":192,"offset":1002},"indent":[]}},{"type":"inlineCode","value":"command","position":{"start":{"line":17,"column":192,"offset":1002},"end":{"line":17,"column":201,"offset":1011},"indent":[]}},{"type":"text","value":" object to the ","position":{"start":{"line":17,"column":201,"offset":1011},"end":{"line":17,"column":216,"offset":1026},"indent":[]}},{"type":"inlineCode","value":"invoker","position":{"start":{"line":17,"column":216,"offset":1026},"end":{"line":17,"column":225,"offset":1035},"indent":[]}},{"type":"text","value":" object.","position":{"start":{"line":17,"column":225,"offset":1035},"end":{"line":17,"column":233,"offset":1043},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":813},"end":{"line":17,"column":233,"offset":1043},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":811},"end":{"line":17,"column":233,"offset":1043},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":362},"end":{"line":17,"column":233,"offset":1043},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"GitHub Repo Example","position":{"start":{"line":19,"column":4,"offset":1048},"end":{"line":19,"column":23,"offset":1067},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1045},"end":{"line":19,"column":23,"offset":1067},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This example is an extension to some code taken directly from ","position":{"start":{"line":21,"column":1,"offset":1069},"end":{"line":21,"column":63,"offset":1131},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/gztchan/design-patterns-in-typescript/blob/master/command/command.ts","children":[{"type":"text","value":"gztchan's GitHub repo","position":{"start":{"line":21,"column":64,"offset":1132},"end":{"line":21,"column":85,"offset":1153},"indent":[]}}],"position":{"start":{"line":21,"column":63,"offset":1131},"end":{"line":21,"column":175,"offset":1243},"indent":[]}},{"type":"text","value":" as it gives a nice and simple example.","position":{"start":{"line":21,"column":175,"offset":1243},"end":{"line":21,"column":214,"offset":1282},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1069},"end":{"line":21,"column":214,"offset":1282},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An extension made it to create a ","position":{"start":{"line":23,"column":1,"offset":1284},"end":{"line":23,"column":34,"offset":1317},"indent":[]}},{"type":"inlineCode","value":"FireCommand","position":{"start":{"line":23,"column":34,"offset":1317},"end":{"line":23,"column":47,"offset":1330},"indent":[]}},{"type":"text","value":" to emulate how something like the Command Design could be used for a game.","position":{"start":{"line":23,"column":47,"offset":1330},"end":{"line":23,"column":122,"offset":1405},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1284},"end":{"line":23,"column":122,"offset":1405},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This simpler example focuses on the main participants: Handler (command interface), ConcreteHandler (commands), CommandReceiver (receiver), Invoker (invoker class), Client (invoker instance).","position":{"start":{"line":25,"column":1,"offset":1407},"end":{"line":25,"column":192,"offset":1598},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1407},"end":{"line":25,"column":192,"offset":1598},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"// Receiver\ninterface Receive {\n  action(): void;\n}\n\nclass CommandReceiver implements Receive {\n  action(): void {\n    console.log('Receiver takes action');\n  }\n}\n\n// Command\ninterface Command {\n  execute(): void;\n}\n\n// ConcreteCommands\nclass LaunchCommand implements Command {\n  private receiver: Receive;\n\n  // NOTE: commands know about receiver\n  constructor(receiver: Receive) {\n    this.receiver = receiver;\n  }\n\n  execute(): void {\n    console.log('Launch!!!');\n    this.receiver.action();\n  }\n}\n\nclass FireCommand implements Command {\n  private receiver: Receive;\n\n  // NOTE: commands know about receiver\n  constructor(receiver: Receive) {\n    this.receiver = receiver;\n  }\n\n  execute(): void {\n    console.log('Fire!');\n    this.receiver.action();\n  }\n}\n\nclass StopCommand implements Command {\n  private receiver: Receive;\n\n  // NOTE: commands know about receiver\n  constructor(receiver: Receive) {\n    this.receiver = receiver;\n  }\n\n  execute(): void {\n    console.log('Stop!!!');\n    this.receiver.action();\n  }\n}\n\n// Invoker\ninterface Invoke {\n  runCommand(command?: Command): void;\n}\n\nclass Invoker implements Invoke {\n  private commands: Command[];\n\n  constructor() {\n    this.commands = [];\n  }\n\n  addCommand(command: Command) {\n    this.commands.push(command);\n  }\n\n  runCommand(command?: Command) {\n    if (command) {\n      this.commands.push(command);\n    }\n    const command = this.commands.shift();\n    command.execute();\n  }\n}\n\n(function main() {\n  // 1. We create a receiver\n  const receiver = new CommandReceiver();\n\n  // 2. We create commands that implement the base command interface and pass the receiver object to the command\n  const launch = new LaunchCommand(receiver);\n  const fire = new FireCommand(receiver);\n  const stop = new StopCommand(receiver);\n\n  // 3. We create the invoker client to add commands to\n  const invoker = new Invoker();\n\n  // Example of adding and then running a command\n  invoker.addCommand(launch);\n  invoker.runCommand();\n\n  invoker.addCommand(fire);\n  invoker.runCommand();\n\n  invoker.addCommand(stop);\n  invoker.runCommand();\n\n  // Example of adding multiple commands and then running multiple executions\n  invoker.addCommand(launch);\n  invoker.addCommand(fire);\n  invoker.addCommand(fire);\n  invoker.addCommand(fire);\n  invoker.addCommand(stop);\n\n  invoker.runCommand();\n  invoker.runCommand();\n  invoker.runCommand();\n  invoker.runCommand();\n  invoker.runCommand();\n})();","position":{"start":{"line":27,"column":1,"offset":1600},"end":{"line":147,"column":4,"offset":4048},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":149,"column":4,"offset":4053},"end":{"line":149,"column":13,"offset":4062},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":4050},"end":{"line":149,"column":13,"offset":4062},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/gztchan/design-patterns-in-typescript/blob/master/command/command.ts","children":[{"type":"text","value":"Command Design Pattern on Github","position":{"start":{"line":151,"column":4,"offset":4067},"end":{"line":151,"column":36,"offset":4099},"indent":[]}}],"position":{"start":{"line":151,"column":3,"offset":4066},"end":{"line":151,"column":126,"offset":4189},"indent":[]}}],"position":{"start":{"line":151,"column":3,"offset":4066},"end":{"line":151,"column":126,"offset":4189},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":4064},"end":{"line":151,"column":126,"offset":4189},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Command_pattern","children":[{"type":"text","value":"Wikipedia Resource","position":{"start":{"line":152,"column":4,"offset":4193},"end":{"line":152,"column":22,"offset":4211},"indent":[]}}],"position":{"start":{"line":152,"column":3,"offset":4192},"end":{"line":152,"column":70,"offset":4259},"indent":[]}}],"position":{"start":{"line":152,"column":3,"offset":4192},"end":{"line":152,"column":70,"offset":4259},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":4190},"end":{"line":152,"column":70,"offset":4259},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":4064},"end":{"line":152,"column":70,"offset":4259},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":155,"column":1,"offset":4262},"end":{"line":155,"column":31,"offset":4292},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":155,"column":31,"offset":4292}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"command\"\n    }}>{`Command`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`A behavioural design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. -- Wikipedia`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"terminology\"\n    }}>{`Terminology`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Command: Knows about `}<inlineCode parentName=\"li\">{`receiver`}</inlineCode>{` and invokes a method of the `}<inlineCode parentName=\"li\">{`receiver`}</inlineCode>{`. Values for params of the receiver method are stored in the command. Values for receiver method params are stored in command.`}</li>\n      <li parentName=\"ul\">{`Receiver: Does the work when `}<inlineCode parentName=\"li\">{`execute()`}</inlineCode>{` is called in `}<inlineCode parentName=\"li\">{`command`}</inlineCode>{` object.`}</li>\n      <li parentName=\"ul\">{`Invoker: Knows how to execute a command and optionally does bookkeeping about command execution. Does not know anything about a concrete command, only the command interface.`}</li>\n      <li parentName=\"ul\">{`Client: Holds the `}<inlineCode parentName=\"li\">{`command`}</inlineCode>{` objects and `}<inlineCode parentName=\"li\">{`receiver`}</inlineCode>{` objects and assigns commands to the `}<inlineCode parentName=\"li\">{`invoker`}</inlineCode>{`. The client is also responsible for executing which commands at which points. It passes the `}<inlineCode parentName=\"li\">{`command`}</inlineCode>{` object to the `}<inlineCode parentName=\"li\">{`invoker`}</inlineCode>{` object.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"github-repo-example\"\n    }}>{`GitHub Repo Example`}</h2>\n    <p>{`This example is an extension to some code taken directly from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/gztchan/design-patterns-in-typescript/blob/master/command/command.ts\"\n      }}>{`gztchan's GitHub repo`}</a>{` as it gives a nice and simple example.`}</p>\n    <p>{`An extension made it to create a `}<inlineCode parentName=\"p\">{`FireCommand`}</inlineCode>{` to emulate how something like the Command Design could be used for a game.`}</p>\n    <p>{`This simpler example focuses on the main participants: Handler (command interface), ConcreteHandler (commands), CommandReceiver (receiver), Invoker (invoker class), Client (invoker instance).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Receiver\ninterface Receive {\n  action(): void;\n}\n\nclass CommandReceiver implements Receive {\n  action(): void {\n    console.log('Receiver takes action');\n  }\n}\n\n// Command\ninterface Command {\n  execute(): void;\n}\n\n// ConcreteCommands\nclass LaunchCommand implements Command {\n  private receiver: Receive;\n\n  // NOTE: commands know about receiver\n  constructor(receiver: Receive) {\n    this.receiver = receiver;\n  }\n\n  execute(): void {\n    console.log('Launch!!!');\n    this.receiver.action();\n  }\n}\n\nclass FireCommand implements Command {\n  private receiver: Receive;\n\n  // NOTE: commands know about receiver\n  constructor(receiver: Receive) {\n    this.receiver = receiver;\n  }\n\n  execute(): void {\n    console.log('Fire!');\n    this.receiver.action();\n  }\n}\n\nclass StopCommand implements Command {\n  private receiver: Receive;\n\n  // NOTE: commands know about receiver\n  constructor(receiver: Receive) {\n    this.receiver = receiver;\n  }\n\n  execute(): void {\n    console.log('Stop!!!');\n    this.receiver.action();\n  }\n}\n\n// Invoker\ninterface Invoke {\n  runCommand(command?: Command): void;\n}\n\nclass Invoker implements Invoke {\n  private commands: Command[];\n\n  constructor() {\n    this.commands = [];\n  }\n\n  addCommand(command: Command) {\n    this.commands.push(command);\n  }\n\n  runCommand(command?: Command) {\n    if (command) {\n      this.commands.push(command);\n    }\n    const command = this.commands.shift();\n    command.execute();\n  }\n}\n\n(function main() {\n  // 1. We create a receiver\n  const receiver = new CommandReceiver();\n\n  // 2. We create commands that implement the base command interface and pass the receiver object to the command\n  const launch = new LaunchCommand(receiver);\n  const fire = new FireCommand(receiver);\n  const stop = new StopCommand(receiver);\n\n  // 3. We create the invoker client to add commands to\n  const invoker = new Invoker();\n\n  // Example of adding and then running a command\n  invoker.addCommand(launch);\n  invoker.runCommand();\n\n  invoker.addCommand(fire);\n  invoker.runCommand();\n\n  invoker.addCommand(stop);\n  invoker.runCommand();\n\n  // Example of adding multiple commands and then running multiple executions\n  invoker.addCommand(launch);\n  invoker.addCommand(fire);\n  invoker.addCommand(fire);\n  invoker.addCommand(fire);\n  invoker.addCommand(stop);\n\n  invoker.runCommand();\n  invoker.runCommand();\n  invoker.runCommand();\n  invoker.runCommand();\n  invoker.runCommand();\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/gztchan/design-patterns-in-typescript/blob/master/command/command.ts\"\n        }}>{`Command Design Pattern on Github`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Command_pattern\"\n        }}>{`Wikipedia Resource`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}