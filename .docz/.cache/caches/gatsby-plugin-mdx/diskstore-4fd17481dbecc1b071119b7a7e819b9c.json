{"expireTime":9007200867336000000,"key":"gatsby-plugin-mdx-entire-payload-6fa6aaaa4f2fa04d30aa0e7b856954a2-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Longest Word","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":15,"offset":181},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":15,"offset":181},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":186},"end":{"line":10,"column":13,"offset":195},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":183},"end":{"line":10,"column":13,"offset":195},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.coderbyte.com/editor/Longest%20Word:JavaScript","children":[{"type":"text","value":"CoderByte","position":{"start":{"line":12,"column":5,"offset":201},"end":{"line":12,"column":14,"offset":210},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":200},"end":{"line":12,"column":75,"offset":271},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":200},"end":{"line":12,"column":75,"offset":271},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":197},"end":{"line":12,"column":75,"offset":271},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":197},"end":{"line":12,"column":75,"offset":271},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Question","position":{"start":{"line":14,"column":4,"offset":276},"end":{"line":14,"column":12,"offset":284},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":273},"end":{"line":14,"column":12,"offset":284},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Have the function LongestWord(sen) take the sen parameter being passed and return the largest word in the string. If there are two or more words that are the same length, return the first word from the string with that length. Ignore punctuation and assume sen will not be empty.","position":{"start":{"line":16,"column":1,"offset":286},"end":{"line":16,"column":280,"offset":565},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":286},"end":{"line":16,"column":280,"offset":565},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples","position":{"start":{"line":18,"column":4,"offset":570},"end":{"line":18,"column":12,"offset":578},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":567},"end":{"line":18,"column":12,"offset":578},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"Input: \"fun&!! time\"\nOutput: time","position":{"start":{"line":20,"column":1,"offset":580},"end":{"line":23,"column":4,"offset":626},"indent":[1,1,1]}},{"type":"code","lang":"shell","meta":null,"value":"Input: \"I love dogs\"\nOutput: love","position":{"start":{"line":25,"column":1,"offset":628},"end":{"line":28,"column":4,"offset":674},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Answer","position":{"start":{"line":30,"column":4,"offset":679},"end":{"line":30,"column":10,"offset":685},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":676},"end":{"line":30,"column":10,"offset":685},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function LongestWord(sen) {\n  const words = sen.split(' ');\n  let maxWord = '';\n  let max = 0;\n\n  for (let word of words) {\n    const filteredWord = word.replace(/[^a-zA-Z0-9]/gi, '');\n    if (filteredWord.length > max) {\n      maxWord = filteredWord;\n      max = filteredWord.length;\n    }\n  }\n\n  // code goes here\n  return maxWord;\n}","position":{"start":{"line":32,"column":1,"offset":687},"end":{"line":49,"column":4,"offset":1040},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":52,"column":1,"offset":1043},"end":{"line":52,"column":31,"offset":1073},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":52,"column":31,"offset":1073}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"longest-word\"\n    }}>{`Longest Word`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.coderbyte.com/editor/Longest%20Word:JavaScript\"\n        }}>{`CoderByte`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"question\"\n    }}>{`Question`}</h2>\n    <p>{`Have the function LongestWord(sen) take the sen parameter being passed and return the largest word in the string. If there are two or more words that are the same length, return the first word from the string with that length. Ignore punctuation and assume sen will not be empty.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Input: \"fun&!! time\"\nOutput: time\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Input: \"I love dogs\"\nOutput: love\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function LongestWord(sen) {\n  const words = sen.split(' ');\n  let maxWord = '';\n  let max = 0;\n\n  for (let word of words) {\n    const filteredWord = word.replace(/[^a-zA-Z0-9]/gi, '');\n    if (filteredWord.length > max) {\n      maxWord = filteredWord;\n      max = filteredWord.length;\n    }\n  }\n\n  // code goes here\n  return maxWord;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}