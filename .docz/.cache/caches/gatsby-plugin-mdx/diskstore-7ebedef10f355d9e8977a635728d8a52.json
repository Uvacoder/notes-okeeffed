{"expireTime":9007200867335920000,"key":"gatsby-plugin-mdx-entire-payload-ce0677e49763e98c8c5da8d50374def3-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"PHP Constructors","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":19,"offset":185},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":19,"offset":185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The important method is the ","position":{"start":{"line":10,"column":1,"offset":187},"end":{"line":10,"column":29,"offset":215},"indent":[]}},{"type":"inlineCode","value":"__construct","position":{"start":{"line":10,"column":29,"offset":215},"end":{"line":10,"column":42,"offset":228},"indent":[]}},{"type":"text","value":" method.","position":{"start":{"line":10,"column":42,"offset":228},"end":{"line":10,"column":50,"offset":236},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":187},"end":{"line":10,"column":50,"offset":236},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"class LinkedList {\n    public $size = 0;\n    public $head;\n\n    function __construct($head = null) {\n        $this->head = $head;\n\n        if ($head != null) {\n            $this->size = 1;\n        } else {\n            $this->size = 0;\n        }\n    }\n\n    public function insertFirst($n) {\n        if ($this->head != null) {\n            $tmp = $this->head;\n            $this->head = $n;\n            $n->setNext($tmp);\n        } else {\n            $this->head = $n;\n        }\n        $this->size++;\n    }\n\n    public function getFirst() {\n        return $this->head;\n    }\n}\n\nclass Node {\n    private $data;\n    private $next;\n\n    function __construct($data = null) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n\n    public function setData($data) {\n        $this->data = $data;\n    }\n\n    public function getNext() {\n        return $this->next;\n    }\n\n    public function setNext($next) {\n        $this->next = $next;\n    }\n}\n\n$n1 = new Node(1);\n$n2 = new Node(2);\n$ll = new LinkedList($n1);\n$ll->insertFirst($n2);","position":{"start":{"line":12,"column":1,"offset":238},"end":{"line":72,"column":4,"offset":1322},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":75,"column":1,"offset":1325},"end":{"line":75,"column":31,"offset":1355},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":75,"column":31,"offset":1355}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"php-constructors\"\n    }}>{`PHP Constructors`}</h1>\n    <p>{`The important method is the `}<inlineCode parentName=\"p\">{`__construct`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class LinkedList {\n    public $size = 0;\n    public $head;\n\n    function __construct($head = null) {\n        $this->head = $head;\n\n        if ($head != null) {\n            $this->size = 1;\n        } else {\n            $this->size = 0;\n        }\n    }\n\n    public function insertFirst($n) {\n        if ($this->head != null) {\n            $tmp = $this->head;\n            $this->head = $n;\n            $n->setNext($tmp);\n        } else {\n            $this->head = $n;\n        }\n        $this->size++;\n    }\n\n    public function getFirst() {\n        return $this->head;\n    }\n}\n\nclass Node {\n    private $data;\n    private $next;\n\n    function __construct($data = null) {\n        $this->data = $data;\n    }\n\n    public function getData() {\n        return $this->data;\n    }\n\n    public function setData($data) {\n        $this->data = $data;\n    }\n\n    public function getNext() {\n        return $this->next;\n    }\n\n    public function setNext($next) {\n        $this->next = $next;\n    }\n}\n\n$n1 = new Node(1);\n$n2 = new Node(2);\n$ll = new LinkedList($n1);\n$ll->insertFirst($n2);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}