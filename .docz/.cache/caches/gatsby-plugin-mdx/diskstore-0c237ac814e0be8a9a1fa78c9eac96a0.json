{"expireTime":9007200852878387000,"key":"gatsby-plugin-mdx-entire-payload-8ac95865cd3e6107b85e2089e8e0884a-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Decision Trees","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":17,"offset":182},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":17,"offset":182},"indent":[]}},{"type":"jsx","value":"<!-- TOC -->","position":{"start":{"line":9,"column":1,"offset":184},"end":{"line":9,"column":13,"offset":196},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#decision-trees","children":[{"type":"text","value":"Decision Trees","position":{"start":{"line":11,"column":6,"offset":203},"end":{"line":11,"column":20,"offset":217},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":202},"end":{"line":11,"column":38,"offset":235},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":202},"end":{"line":11,"column":38,"offset":235},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#intuition","children":[{"type":"text","value":"Intuition","position":{"start":{"line":12,"column":10,"offset":245},"end":{"line":12,"column":19,"offset":254},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":244},"end":{"line":12,"column":32,"offset":267},"indent":[]}}],"position":{"start":{"line":12,"column":9,"offset":244},"end":{"line":12,"column":32,"offset":267},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":240},"end":{"line":12,"column":32,"offset":267},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#decision-tree-regression-in-python","children":[{"type":"text","value":"Decision Tree Regression in Python","position":{"start":{"line":13,"column":10,"offset":277},"end":{"line":13,"column":44,"offset":311},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":276},"end":{"line":13,"column":82,"offset":349},"indent":[]}}],"position":{"start":{"line":13,"column":9,"offset":276},"end":{"line":13,"column":82,"offset":349},"indent":[]}}],"position":{"start":{"line":13,"column":5,"offset":272},"end":{"line":13,"column":82,"offset":349},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":240},"end":{"line":13,"column":82,"offset":349},"indent":[5]}}],"position":{"start":{"line":11,"column":1,"offset":198},"end":{"line":13,"column":82,"offset":349},"indent":[1,1]}}],"position":{"start":{"line":11,"column":1,"offset":198},"end":{"line":13,"column":82,"offset":349},"indent":[1,1]}},{"type":"jsx","value":"<!-- /TOC -->","position":{"start":{"line":15,"column":1,"offset":351},"end":{"line":15,"column":14,"offset":364},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Intuition","position":{"start":{"line":17,"column":4,"offset":369},"end":{"line":17,"column":13,"offset":378},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":366},"end":{"line":17,"column":13,"offset":378},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"CART: Classification and Regression Trees","position":{"start":{"line":19,"column":3,"offset":382},"end":{"line":19,"column":44,"offset":423},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":380},"end":{"line":19,"column":46,"offset":425},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":380},"end":{"line":19,"column":46,"offset":425},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We speak about both types, but for now - focus on regression trees.","position":{"start":{"line":21,"column":1,"offset":427},"end":{"line":21,"column":68,"offset":494},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":427},"end":{"line":21,"column":68,"offset":494},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Regression trees are a bit more complex than classification trees.","position":{"start":{"line":23,"column":1,"offset":496},"end":{"line":23,"column":67,"offset":562},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":496},"end":{"line":23,"column":67,"offset":562},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Imagine a scatter plot with two IV and we are predicting an DV y (which you wouldn't be able to see on the chart). Essentially the DV would sit on the z axis.","position":{"start":{"line":25,"column":1,"offset":564},"end":{"line":25,"column":159,"offset":722},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":564},"end":{"line":25,"column":159,"offset":722},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once you run the regression decision tree algorithm, the scatter plot will be split up into segments.","position":{"start":{"line":27,"column":1,"offset":724},"end":{"line":27,"column":102,"offset":825},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":724},"end":{"line":27,"column":102,"offset":825},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, x1 might be split at 20. Another split may happen for x2 at 170, 200 etc.","position":{"start":{"line":29,"column":1,"offset":827},"end":{"line":29,"column":87,"offset":913},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":827},"end":{"line":29,"column":87,"offset":913},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The question, are the splits adding value to way we want to group our points?","position":{"start":{"line":31,"column":1,"offset":915},"end":{"line":31,"column":78,"offset":992},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":915},"end":{"line":31,"column":78,"offset":992},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Each split itself is known as a leaf.","position":{"start":{"line":33,"column":1,"offset":994},"end":{"line":33,"column":38,"offset":1031},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":994},"end":{"line":33,"column":38,"offset":1031},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The algorithm can handle mathematical issues and we can focus on the practical element of the algorithm.","position":{"start":{"line":35,"column":1,"offset":1033},"end":{"line":35,"column":105,"offset":1137},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1033},"end":{"line":35,"column":105,"offset":1137},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Splitting","position":{"start":{"line":37,"column":3,"offset":1141},"end":{"line":37,"column":12,"offset":1150},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1139},"end":{"line":37,"column":14,"offset":1152},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1139},"end":{"line":37,"column":14,"offset":1152},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we split ","position":{"start":{"line":39,"column":1,"offset":1154},"end":{"line":39,"column":13,"offset":1166},"indent":[]}},{"type":"inlineCode","value":"x[1] < 20","position":{"start":{"line":39,"column":13,"offset":1166},"end":{"line":39,"column":24,"offset":1177},"indent":[]}},{"type":"text","value":", we have two options (y/N). If we then split ","position":{"start":{"line":39,"column":24,"offset":1177},"end":{"line":39,"column":70,"offset":1223},"indent":[]}},{"type":"inlineCode","value":"x[2] < 170","position":{"start":{"line":39,"column":70,"offset":1223},"end":{"line":39,"column":82,"offset":1235},"indent":[]}},{"type":"text","value":", we add a child node to ","position":{"start":{"line":39,"column":82,"offset":1235},"end":{"line":39,"column":107,"offset":1260},"indent":[]}},{"type":"inlineCode","value":"x[1] < 20","position":{"start":{"line":39,"column":107,"offset":1260},"end":{"line":39,"column":118,"offset":1271},"indent":[]}},{"type":"text","value":" that checks y/N. If we then set `","position":{"start":{"line":39,"column":118,"offset":1271},"end":{"line":39,"column":152,"offset":1305},"indent":[]}},{"type":"inlineCode","value":"x[2] < 200","position":{"start":{"line":39,"column":152,"offset":1305},"end":{"line":39,"column":164,"offset":1317},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":39,"column":164,"offset":1317},"end":{"line":39,"column":165,"offset":1318},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1154},"end":{"line":39,"column":165,"offset":1318},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"After having a two child tree, if we set ","position":{"start":{"line":41,"column":1,"offset":1320},"end":{"line":41,"column":42,"offset":1361},"indent":[]}},{"type":"inlineCode","value":"x[1] < 40","position":{"start":{"line":41,"column":42,"offset":1361},"end":{"line":41,"column":53,"offset":1372},"indent":[]}},{"type":"text","value":" such that ","position":{"start":{"line":41,"column":53,"offset":1372},"end":{"line":41,"column":64,"offset":1383},"indent":[]}},{"type":"inlineCode","value":"x[1] < 20","position":{"start":{"line":41,"column":64,"offset":1383},"end":{"line":41,"column":75,"offset":1394},"indent":[]}},{"type":"text","value":" is not true and ","position":{"start":{"line":41,"column":75,"offset":1394},"end":{"line":41,"column":92,"offset":1411},"indent":[]}},{"type":"inlineCode","value":"x[2] < 170","position":{"start":{"line":41,"column":92,"offset":1411},"end":{"line":41,"column":104,"offset":1423},"indent":[]}},{"type":"text","value":" is true, we can then set ","position":{"start":{"line":41,"column":104,"offset":1423},"end":{"line":41,"column":130,"offset":1449},"indent":[]}},{"type":"inlineCode","value":"x[1] < 40","position":{"start":{"line":41,"column":130,"offset":1449},"end":{"line":41,"column":141,"offset":1460},"indent":[]}},{"type":"text","value":" as the child to ","position":{"start":{"line":41,"column":141,"offset":1460},"end":{"line":41,"column":158,"offset":1477},"indent":[]}},{"type":"inlineCode","value":"x[2] < 170","position":{"start":{"line":41,"column":158,"offset":1477},"end":{"line":41,"column":170,"offset":1489},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":41,"column":170,"offset":1489},"end":{"line":41,"column":171,"offset":1490},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1320},"end":{"line":41,"column":171,"offset":1490},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once we start this tree, what do we populate into those boxes? Well, we decide how we predict ","position":{"start":{"line":43,"column":1,"offset":1492},"end":{"line":43,"column":95,"offset":1586},"indent":[]}},{"type":"inlineCode","value":"y","position":{"start":{"line":43,"column":95,"offset":1586},"end":{"line":43,"column":98,"offset":1589},"indent":[]}},{"type":"text","value":" with a new observation added to the plane x","position":{"start":{"line":43,"column":98,"offset":1589},"end":{"line":43,"column":142,"offset":1633},"indent":[]}},{"type":"linkReference","identifier":"1","label":"1","referenceType":"shortcut","children":[{"type":"text","value":"1","position":{"start":{"line":43,"column":143,"offset":1634},"end":{"line":43,"column":144,"offset":1635},"indent":[]}}],"position":{"start":{"line":43,"column":142,"offset":1633},"end":{"line":43,"column":145,"offset":1636},"indent":[]}},{"type":"text","value":" and x","position":{"start":{"line":43,"column":145,"offset":1636},"end":{"line":43,"column":151,"offset":1642},"indent":[]}},{"type":"linkReference","identifier":"2","label":"2","referenceType":"shortcut","children":[{"type":"text","value":"2","position":{"start":{"line":43,"column":152,"offset":1643},"end":{"line":43,"column":153,"offset":1644},"indent":[]}}],"position":{"start":{"line":43,"column":151,"offset":1642},"end":{"line":43,"column":154,"offset":1645},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":43,"column":154,"offset":1645},"end":{"line":43,"column":155,"offset":1646},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1492},"end":{"line":43,"column":155,"offset":1646},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Key note: ","position":{"start":{"line":45,"column":1,"offset":1648},"end":{"line":45,"column":11,"offset":1658},"indent":[]}},{"type":"inlineCode","value":"Adding splits adds information","position":{"start":{"line":45,"column":11,"offset":1658},"end":{"line":45,"column":43,"offset":1690},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":45,"column":43,"offset":1690},"end":{"line":45,"column":44,"offset":1691},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1648},"end":{"line":45,"column":44,"offset":1691},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"What we do is that for each terminal leaf, we take the average and assign the value that we give to any new element that falls into that leaf.","position":{"start":{"line":47,"column":1,"offset":1693},"end":{"line":47,"column":143,"offset":1835},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1693},"end":{"line":47,"column":143,"offset":1835},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now, if we have a new value, we check the decision tree where it falls and then assign the new element the value of where it falls as a prediction.","position":{"start":{"line":49,"column":1,"offset":1837},"end":{"line":49,"column":148,"offset":1984},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1837},"end":{"line":49,"column":148,"offset":1984},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Decision Tree Regression in Python","position":{"start":{"line":51,"column":4,"offset":1989},"end":{"line":51,"column":38,"offset":2023},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1986},"end":{"line":51,"column":38,"offset":2023},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Warning for the decision tree, because we need to consider the entropy and split the result into data points. If we stick to one dimension, how do we have a line that is not horizontal? If the splits are made, they should remain a constant.","position":{"start":{"line":53,"column":1,"offset":2025},"end":{"line":53,"column":241,"offset":2265},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2025},"end":{"line":53,"column":241,"offset":2265},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Either the intervals are infinite (which they are not), or the model has an issue.","position":{"start":{"line":55,"column":1,"offset":2267},"end":{"line":55,"column":83,"offset":2349},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2267},"end":{"line":55,"column":83,"offset":2349},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The reason the issue came up, is because of what we have used to create the plot since this is no longer linear.","position":{"start":{"line":57,"column":1,"offset":2351},"end":{"line":57,"column":113,"offset":2463},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":2351},"end":{"line":57,"column":113,"offset":2463},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is now a non-linear, non-continuous regression model.","position":{"start":{"line":59,"column":1,"offset":2465},"end":{"line":59,"column":59,"offset":2523},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":2465},"end":{"line":59,"column":59,"offset":2523},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"What is the best way to view something non-continuous?","position":{"start":{"line":61,"column":1,"offset":2525},"end":{"line":61,"column":55,"offset":2579},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":2525},"end":{"line":61,"column":55,"offset":2579},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"# Visualising the Decision Tree results\nX_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape(len(X_grid), 1)\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\nplt.title('Truth or Bluff (Decision Tree Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.savefig('decision-tree.png')\nplt.show()","position":{"start":{"line":63,"column":1,"offset":2581},"end":{"line":74,"column":4,"offset":2957},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As for getting the decision tree code to run:","position":{"start":{"line":76,"column":1,"offset":2959},"end":{"line":76,"column":46,"offset":3004},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":2959},"end":{"line":76,"column":46,"offset":3004},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"# Prediciting the Decision Tree results\n# Create the Regressor\nfrom sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state=0)\nregressor.fit(X, y)\n\ny_pred = regressor.predict(6.5)","position":{"start":{"line":78,"column":1,"offset":3006},"end":{"line":86,"column":4,"offset":3232},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Ensure you have a higher resolution in order to visualize the splits. Given that the example in the tutorial has just 1 DV and 1 IV, it will come out like steps as the only splits will occur on the x axis.","position":{"start":{"line":88,"column":1,"offset":3234},"end":{"line":88,"column":206,"offset":3439},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":3234},"end":{"line":88,"column":206,"offset":3439},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The model itself is not necessarily that interesting in 1D, but over many dimensions it becomes far more interesting.","position":{"start":{"line":90,"column":1,"offset":3441},"end":{"line":90,"column":118,"offset":3558},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":3441},"end":{"line":90,"column":118,"offset":3558},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"What happens when you use a random forest?","position":{"start":{"line":92,"column":3,"offset":3562},"end":{"line":92,"column":45,"offset":3604},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":3560},"end":{"line":92,"column":47,"offset":3606},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":3560},"end":{"line":92,"column":47,"offset":3606},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A Random Forest is a team of decision trees. What happens with a team of 10 trees? 50 trees? 500 trees?","position":{"start":{"line":94,"column":1,"offset":3608},"end":{"line":94,"column":104,"offset":3711},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3608},"end":{"line":94,"column":104,"offset":3711},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":97,"column":1,"offset":3714},"end":{"line":97,"column":31,"offset":3744},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":97,"column":31,"offset":3744}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"decision-trees\"\n    }}>{`Decision Trees`}</h1>\n    {\n      /* TOC */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#decision-trees\"\n        }}>{`Decision Trees`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#intuition\"\n            }}>{`Intuition`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#decision-tree-regression-in-python\"\n            }}>{`Decision Tree Regression in Python`}</a></li>\n        </ul></li>\n    </ul>\n    {\n      /* /TOC */\n    }\n    <h2 {...{\n      \"id\": \"intuition\"\n    }}>{`Intuition`}</h2>\n    <p><strong parentName=\"p\">{`CART: Classification and Regression Trees`}</strong></p>\n    <p>{`We speak about both types, but for now - focus on regression trees.`}</p>\n    <p>{`Regression trees are a bit more complex than classification trees.`}</p>\n    <p>{`Imagine a scatter plot with two IV and we are predicting an DV y (which you wouldn't be able to see on the chart). Essentially the DV would sit on the z axis.`}</p>\n    <p>{`Once you run the regression decision tree algorithm, the scatter plot will be split up into segments.`}</p>\n    <p>{`For example, x1 might be split at 20. Another split may happen for x2 at 170, 200 etc.`}</p>\n    <p>{`The question, are the splits adding value to way we want to group our points?`}</p>\n    <p>{`Each split itself is known as a leaf.`}</p>\n    <p>{`The algorithm can handle mathematical issues and we can focus on the practical element of the algorithm.`}</p>\n    <p><strong parentName=\"p\">{`Splitting`}</strong></p>\n    <p>{`If we split `}<inlineCode parentName=\"p\">{`x[1] < 20`}</inlineCode>{`, we have two options (y/N). If we then split `}<inlineCode parentName=\"p\">{`x[2] < 170`}</inlineCode>{`, we add a child node to `}<inlineCode parentName=\"p\">{`x[1] < 20`}</inlineCode>{` that checks y/N. If we then set \\``}<inlineCode parentName=\"p\">{`x[2] < 200`}</inlineCode>{`.`}</p>\n    <p>{`After having a two child tree, if we set `}<inlineCode parentName=\"p\">{`x[1] < 40`}</inlineCode>{` such that `}<inlineCode parentName=\"p\">{`x[1] < 20`}</inlineCode>{` is not true and `}<inlineCode parentName=\"p\">{`x[2] < 170`}</inlineCode>{` is true, we can then set `}<inlineCode parentName=\"p\">{`x[1] < 40`}</inlineCode>{` as the child to `}<inlineCode parentName=\"p\">{`x[2] < 170`}</inlineCode>{`.`}</p>\n    <p>{`Once we start this tree, what do we populate into those boxes? Well, we decide how we predict `}<inlineCode parentName=\"p\">{`y`}</inlineCode>{` with a new observation added to the plane x`}{`[1]`}{` and x`}{`[2]`}{`.`}</p>\n    <p>{`Key note: `}<inlineCode parentName=\"p\">{`Adding splits adds information`}</inlineCode>{`.`}</p>\n    <p>{`What we do is that for each terminal leaf, we take the average and assign the value that we give to any new element that falls into that leaf.`}</p>\n    <p>{`Now, if we have a new value, we check the decision tree where it falls and then assign the new element the value of where it falls as a prediction.`}</p>\n    <h2 {...{\n      \"id\": \"decision-tree-regression-in-python\"\n    }}>{`Decision Tree Regression in Python`}</h2>\n    <p>{`Warning for the decision tree, because we need to consider the entropy and split the result into data points. If we stick to one dimension, how do we have a line that is not horizontal? If the splits are made, they should remain a constant.`}</p>\n    <p>{`Either the intervals are infinite (which they are not), or the model has an issue.`}</p>\n    <p>{`The reason the issue came up, is because of what we have used to create the plot since this is no longer linear.`}</p>\n    <p>{`This is now a non-linear, non-continuous regression model.`}</p>\n    <p>{`What is the best way to view something non-continuous?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Visualising the Decision Tree results\nX_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape(len(X_grid), 1)\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\nplt.title('Truth or Bluff (Decision Tree Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.savefig('decision-tree.png')\nplt.show()\n`}</code></pre>\n    <p>{`As for getting the decision tree code to run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Prediciting the Decision Tree results\n# Create the Regressor\nfrom sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state=0)\nregressor.fit(X, y)\n\ny_pred = regressor.predict(6.5)\n`}</code></pre>\n    <p>{`Ensure you have a higher resolution in order to visualize the splits. Given that the example in the tutorial has just 1 DV and 1 IV, it will come out like steps as the only splits will occur on the x axis.`}</p>\n    <p>{`The model itself is not necessarily that interesting in 1D, but over many dimensions it becomes far more interesting.`}</p>\n    <p><strong parentName=\"p\">{`What happens when you use a random forest?`}</strong></p>\n    <p>{`A Random Forest is a team of decision trees. What happens with a team of 10 trees? 50 trees? 500 trees?`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}