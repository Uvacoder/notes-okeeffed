{"expireTime":9007200848610892000,"key":"gatsby-plugin-mdx-entire-payload-5e748aa5473b6dede6a4cf99f10bf9e1-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Kotlin Lambdas","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":17,"offset":183},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":17,"offset":183},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Also known as anonymous functions - name deriving from lambda calculus of Alonzo Church where all functions are anonymous.","position":{"start":{"line":10,"column":1,"offset":185},"end":{"line":10,"column":123,"offset":307},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":185},"end":{"line":10,"column":123,"offset":307},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Also synonymous with closures.","position":{"start":{"line":12,"column":1,"offset":309},"end":{"line":12,"column":31,"offset":339},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":309},"end":{"line":12,"column":31,"offset":339},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"// declaration of a var that can hold a lambda\nvar multiplyLambda: (Int, Int) -> Int\n\nmultiplyLambda = { a: Int, b: Int -> Int\n  a*b\n}\n\nval lambdaResult = multiplyLambda(4, 2) // 8","position":{"start":{"line":14,"column":1,"offset":341},"end":{"line":23,"column":4,"offset":535},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Shorthand Syntax","position":{"start":{"line":25,"column":4,"offset":540},"end":{"line":25,"column":20,"offset":556},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":537},"end":{"line":25,"column":20,"offset":556},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"multiplyLambda = { a, b ->\n  a*b\n}\n\n// using it keyword for argument\nvar doubleLambda = { a: Int ->\n  2*a\n}\ndoubleLambda = { 2 * it }\n\n// in declaration\nval square: (Int) -> Int = { it * it }","position":{"start":{"line":27,"column":1,"offset":558},"end":{"line":40,"column":4,"offset":763},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Lambdas As Arguments","position":{"start":{"line":42,"column":4,"offset":768},"end":{"line":42,"column":24,"offset":788},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":765},"end":{"line":42,"column":24,"offset":788},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"fun operateOnNumbers(a: Int, b: Int, operation: (Int, Int) -> Int): Int {\n  val result = operation(a, b)\n  println(result)\n  return result\n}\n\n// in use\nval addLambda = { a: Int, b: Int ->\na+b }\noperateOnNumbers(4, 2, operation = addLambda) // 6\n\n// more usual\nfun addFunction(a: Int, b:Int) = a + b\noperateOnNumbers(4, 2, operation = ::addFunction) // 6\n\n// or even\noperateOnNumbers(4, 2, operation = { a: Int, b: Int ->\n  a+b\n})","position":{"start":{"line":44,"column":1,"offset":790},"end":{"line":64,"column":4,"offset":1233},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Lambdas with no meaningful return","position":{"start":{"line":66,"column":4,"offset":1238},"end":{"line":66,"column":37,"offset":1271},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1235},"end":{"line":66,"column":37,"offset":1271},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"var unitLambda: () -> Unit = {\n  println(\"Kotlin Apprentice is awesome!\")\n}\nunitLambda()","position":{"start":{"line":68,"column":1,"offset":1273},"end":{"line":73,"column":4,"offset":1375},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you literally want no value returnedm you need to use the ","position":{"start":{"line":75,"column":1,"offset":1377},"end":{"line":75,"column":62,"offset":1438},"indent":[]}},{"type":"inlineCode","value":"Nothing","position":{"start":{"line":75,"column":62,"offset":1438},"end":{"line":75,"column":71,"offset":1447},"indent":[]}},{"type":"text","value":" type:","position":{"start":{"line":75,"column":71,"offset":1447},"end":{"line":75,"column":77,"offset":1453},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":1377},"end":{"line":75,"column":77,"offset":1453},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"var nothingLambda: () -> Nothing = { throw NullPointerException() }","position":{"start":{"line":77,"column":1,"offset":1455},"end":{"line":79,"column":4,"offset":1536},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Iterating over collections with lambdas","position":{"start":{"line":81,"column":4,"offset":1541},"end":{"line":81,"column":43,"offset":1580},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":1538},"end":{"line":81,"column":43,"offset":1580},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val values = listOf(1, 2, 3, 4, 5, 6)\nvalues.forEach {\n  println(\"$it: ${it * it}\")\n}\n// > 1: 1\n// > 2: 4\n// > 3: 9\n// > 4: 16\n// > 5: 25\n// > 6: 36","position":{"start":{"line":83,"column":1,"offset":1582},"end":{"line":94,"column":4,"offset":1744},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To filter some of these out:","position":{"start":{"line":96,"column":1,"offset":1746},"end":{"line":96,"column":29,"offset":1774},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":1746},"end":{"line":96,"column":29,"offset":1774},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"var prices = listOf(1.5, 10.0, 4.99, 2.30, 8.19)\nval largePrices = prices.filter {\n  it > 5.0\n}\n\n// the above function looks like so\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean):\nList<T>\n\nval userInput = listOf(\"0\", \"11\", \"haha\", \"42\")\nval numbers = userInput.map {\n  it.toIntOrNull()\n}\nprintln(numbers) // > [0, 11, null, 42]\n\n// array [1,2,3,4]\nsum = prices.reduce { a, b ->\n  a + b\n}\nprintln(sum) // 10\n\n// similar but takes initial value\nvar sum = prices.fold(0.0) { a, b -> a + b }","position":{"start":{"line":98,"column":1,"offset":1776},"end":{"line":122,"column":4,"offset":2299},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":125,"column":1,"offset":2302},"end":{"line":125,"column":31,"offset":2332},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":125,"column":31,"offset":2332}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"kotlin-lambdas\"\n    }}>{`Kotlin Lambdas`}</h1>\n    <p>{`Also known as anonymous functions - name deriving from lambda calculus of Alonzo Church where all functions are anonymous.`}</p>\n    <p>{`Also synonymous with closures.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// declaration of a var that can hold a lambda\nvar multiplyLambda: (Int, Int) -> Int\n\nmultiplyLambda = { a: Int, b: Int -> Int\n  a*b\n}\n\nval lambdaResult = multiplyLambda(4, 2) // 8\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shorthand-syntax\"\n    }}>{`Shorthand Syntax`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`multiplyLambda = { a, b ->\n  a*b\n}\n\n// using it keyword for argument\nvar doubleLambda = { a: Int ->\n  2*a\n}\ndoubleLambda = { 2 * it }\n\n// in declaration\nval square: (Int) -> Int = { it * it }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lambdas-as-arguments\"\n    }}>{`Lambdas As Arguments`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun operateOnNumbers(a: Int, b: Int, operation: (Int, Int) -> Int): Int {\n  val result = operation(a, b)\n  println(result)\n  return result\n}\n\n// in use\nval addLambda = { a: Int, b: Int ->\na+b }\noperateOnNumbers(4, 2, operation = addLambda) // 6\n\n// more usual\nfun addFunction(a: Int, b:Int) = a + b\noperateOnNumbers(4, 2, operation = ::addFunction) // 6\n\n// or even\noperateOnNumbers(4, 2, operation = { a: Int, b: Int ->\n  a+b\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lambdas-with-no-meaningful-return\"\n    }}>{`Lambdas with no meaningful return`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var unitLambda: () -> Unit = {\n  println(\"Kotlin Apprentice is awesome!\")\n}\nunitLambda()\n`}</code></pre>\n    <p>{`If you literally want no value returnedm you need to use the `}<inlineCode parentName=\"p\">{`Nothing`}</inlineCode>{` type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var nothingLambda: () -> Nothing = { throw NullPointerException() }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iterating-over-collections-with-lambdas\"\n    }}>{`Iterating over collections with lambdas`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val values = listOf(1, 2, 3, 4, 5, 6)\nvalues.forEach {\n  println(\"$it: \\${it * it}\")\n}\n// > 1: 1\n// > 2: 4\n// > 3: 9\n// > 4: 16\n// > 5: 25\n// > 6: 36\n`}</code></pre>\n    <p>{`To filter some of these out:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var prices = listOf(1.5, 10.0, 4.99, 2.30, 8.19)\nval largePrices = prices.filter {\n  it > 5.0\n}\n\n// the above function looks like so\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean):\nList<T>\n\nval userInput = listOf(\"0\", \"11\", \"haha\", \"42\")\nval numbers = userInput.map {\n  it.toIntOrNull()\n}\nprintln(numbers) // > [0, 11, null, 42]\n\n// array [1,2,3,4]\nsum = prices.reduce { a, b ->\n  a + b\n}\nprintln(sum) // 10\n\n// similar but takes initial value\nvar sum = prices.fold(0.0) { a, b -> a + b }\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}