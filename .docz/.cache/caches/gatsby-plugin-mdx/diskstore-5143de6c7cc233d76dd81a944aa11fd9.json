{"expireTime":9007200852878473000,"key":"gatsby-plugin-mdx-entire-payload-8de84210199c6ab95d8042d22874805f-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"An Introduction","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":18,"offset":184},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":18,"offset":184},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Tips and tricks","position":{"start":{"line":10,"column":4,"offset":189},"end":{"line":10,"column":19,"offset":204},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":186},"end":{"line":10,"column":19,"offset":204},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"READ THE QUESTION THOROUGHLY","position":{"start":{"line":12,"column":4,"offset":209},"end":{"line":12,"column":32,"offset":237},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":209},"end":{"line":12,"column":32,"offset":237},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":206},"end":{"line":12,"column":32,"offset":237},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use hashmaps for O(1).","position":{"start":{"line":13,"column":4,"offset":241},"end":{"line":13,"column":26,"offset":263},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":241},"end":{"line":13,"column":26,"offset":263},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":238},"end":{"line":13,"column":26,"offset":263},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For array sorted, run O(n) with sorting by index swaps and not other options (like selection sort).","position":{"start":{"line":14,"column":4,"offset":267},"end":{"line":14,"column":103,"offset":366},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":267},"end":{"line":14,"column":103,"offset":366},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":264},"end":{"line":14,"column":103,"offset":366},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To find the midpoint of linked lists or something you cannot use length for, use the two pointers and iterate +1, +2 respectively and don't iterate through the entire list.","position":{"start":{"line":15,"column":4,"offset":370},"end":{"line":15,"column":176,"offset":542},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":370},"end":{"line":15,"column":176,"offset":542},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":367},"end":{"line":15,"column":176,"offset":542},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use Regexes wisely.","position":{"start":{"line":16,"column":4,"offset":546},"end":{"line":16,"column":23,"offset":565},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":546},"end":{"line":16,"column":23,"offset":565},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":543},"end":{"line":16,"column":23,"offset":565},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Understand converting and iterating through strings (ie understand types, side effects of casting etc)","position":{"start":{"line":17,"column":4,"offset":569},"end":{"line":17,"column":106,"offset":671},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":569},"end":{"line":17,"column":106,"offset":671},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":566},"end":{"line":17,"column":106,"offset":671},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":206},"end":{"line":17,"column":106,"offset":671},"indent":[1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":20,"column":1,"offset":674},"end":{"line":20,"column":31,"offset":704},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":20,"column":31,"offset":704}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"an-introduction\"\n    }}>{`An Introduction`}</h1>\n    <h2 {...{\n      \"id\": \"tips-and-tricks\"\n    }}>{`Tips and tricks`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`READ THE QUESTION THOROUGHLY`}</li>\n      <li parentName=\"ol\">{`Use hashmaps for O(1).`}</li>\n      <li parentName=\"ol\">{`For array sorted, run O(n) with sorting by index swaps and not other options (like selection sort).`}</li>\n      <li parentName=\"ol\">{`To find the midpoint of linked lists or something you cannot use length for, use the two pointers and iterate +1, +2 respectively and don't iterate through the entire list.`}</li>\n      <li parentName=\"ol\">{`Use Regexes wisely.`}</li>\n      <li parentName=\"ol\">{`Understand converting and iterating through strings (ie understand types, side effects of casting etc)`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}