{"expireTime":9007200867335984000,"key":"gatsby-plugin-mdx-entire-payload-ebc23d625d194bc6bf33fd1b725b006d-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Python Data Structures","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":25,"offset":191},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":25,"offset":191},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Array Chunks","position":{"start":{"line":10,"column":4,"offset":196},"end":{"line":10,"column":16,"offset":208},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":193},"end":{"line":10,"column":16,"offset":208},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"def arrayChunk(arr, size):\n    print(arr)\n    if (size == 0):\n        return []\n    if (len(arr) < size):\n        return [arr]\n    tmp = []\n    chunkedArr = []\n    for i, d in enumerate(arr):\n        tmp.append(d)\n        if (i % size == size - 1 or i == len(arr) - 1):\n            chunkedArr.append(tmp)\n            tmp = []\n    return chunkedArr","position":{"start":{"line":12,"column":1,"offset":210},"end":{"line":27,"column":4,"offset":571},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Palindromes","position":{"start":{"line":29,"column":4,"offset":576},"end":{"line":29,"column":15,"offset":587},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":573},"end":{"line":29,"column":15,"offset":587},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"import re\n\ndef isPalindrome(string):\n    reStr = re.sub(\"[^a-zA-Z]\", \"\", string).strip().lower()\n    return reStr[::-1] == reStr","position":{"start":{"line":31,"column":1,"offset":589},"end":{"line":37,"column":4,"offset":731},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":40,"column":1,"offset":734},"end":{"line":40,"column":31,"offset":764},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":40,"column":31,"offset":764}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"python-data-structures\"\n    }}>{`Python Data Structures`}</h1>\n    <h2 {...{\n      \"id\": \"array-chunks\"\n    }}>{`Array Chunks`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def arrayChunk(arr, size):\n    print(arr)\n    if (size == 0):\n        return []\n    if (len(arr) < size):\n        return [arr]\n    tmp = []\n    chunkedArr = []\n    for i, d in enumerate(arr):\n        tmp.append(d)\n        if (i % size == size - 1 or i == len(arr) - 1):\n            chunkedArr.append(tmp)\n            tmp = []\n    return chunkedArr\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"palindromes\"\n    }}>{`Palindromes`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import re\n\ndef isPalindrome(string):\n    reStr = re.sub(\"[^a-zA-Z]\", \"\", string).strip().lower()\n    return reStr[::-1] == reStr\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}