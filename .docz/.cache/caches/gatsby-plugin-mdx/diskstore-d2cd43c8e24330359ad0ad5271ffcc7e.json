{"expireTime":9007200867336000000,"key":"gatsby-plugin-mdx-entire-payload-51769fbb323a417a90925ceba66cbc33-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Minimum Swaps","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":16,"offset":182},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":16,"offset":182},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"How to","position":{"start":{"line":10,"column":4,"offset":187},"end":{"line":10,"column":10,"offset":193},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":184},"end":{"line":10,"column":10,"offset":193},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Given array ","position":{"start":{"line":12,"column":1,"offset":195},"end":{"line":12,"column":13,"offset":207},"indent":[]}},{"type":"inlineCode","value":"[7, 1, 3, 2, 4, 5, 6]","position":{"start":{"line":12,"column":13,"offset":207},"end":{"line":12,"column":36,"offset":230},"indent":[]}},{"type":"text","value":", what are the minimum swaps to sort this algorithm?","position":{"start":{"line":12,"column":36,"offset":230},"end":{"line":12,"column":88,"offset":282},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":195},"end":{"line":12,"column":88,"offset":282},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Notes","position":{"start":{"line":14,"column":4,"offset":287},"end":{"line":14,"column":9,"offset":292},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":284},"end":{"line":14,"column":9,"offset":292},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We want this to be efficient, so selection sort doesn't cut it.","position":{"start":{"line":16,"column":4,"offset":297},"end":{"line":16,"column":67,"offset":360},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":297},"end":{"line":16,"column":67,"offset":360},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":294},"end":{"line":16,"column":67,"offset":360},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":294},"end":{"line":16,"column":67,"offset":360},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Solution","position":{"start":{"line":18,"column":4,"offset":365},"end":{"line":18,"column":12,"offset":373},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":362},"end":{"line":18,"column":12,"offset":373},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Build an array of indexes for where the next ","position":{"start":{"line":20,"column":4,"offset":378},"end":{"line":20,"column":49,"offset":423},"indent":[]}},{"type":"inlineCode","value":"indexOf","position":{"start":{"line":20,"column":49,"offset":423},"end":{"line":20,"column":58,"offset":432},"indent":[]}},{"type":"text","value":" for the element you want is.","position":{"start":{"line":20,"column":58,"offset":432},"end":{"line":20,"column":87,"offset":461},"indent":[]}}],"position":{"start":{"line":20,"column":4,"offset":378},"end":{"line":20,"column":87,"offset":461},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":375},"end":{"line":20,"column":87,"offset":461},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For ","position":{"start":{"line":21,"column":4,"offset":465},"end":{"line":21,"column":8,"offset":469},"indent":[]}},{"type":"inlineCode","value":"i = 0..n-1","position":{"start":{"line":21,"column":8,"offset":469},"end":{"line":21,"column":20,"offset":481},"indent":[]}},{"type":"text","value":", if ","position":{"start":{"line":21,"column":20,"offset":481},"end":{"line":21,"column":25,"offset":486},"indent":[]}},{"type":"inlineCode","value":"arr[0] !== i + 1","position":{"start":{"line":21,"column":25,"offset":486},"end":{"line":21,"column":43,"offset":504},"indent":[]}},{"type":"text","value":", then swap ","position":{"start":{"line":21,"column":43,"offset":504},"end":{"line":21,"column":55,"offset":516},"indent":[]}},{"type":"inlineCode","value":"arr[i]","position":{"start":{"line":21,"column":55,"offset":516},"end":{"line":21,"column":63,"offset":524},"indent":[]}},{"type":"text","value":" with ","position":{"start":{"line":21,"column":63,"offset":524},"end":{"line":21,"column":69,"offset":530},"indent":[]}},{"type":"inlineCode","value":"arr[indexes[i]]","position":{"start":{"line":21,"column":69,"offset":530},"end":{"line":21,"column":86,"offset":547},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":21,"column":86,"offset":547},"end":{"line":21,"column":87,"offset":548},"indent":[]}}],"position":{"start":{"line":21,"column":4,"offset":465},"end":{"line":21,"column":87,"offset":548},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":462},"end":{"line":21,"column":87,"offset":548},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Finally, swap ","position":{"start":{"line":22,"column":4,"offset":552},"end":{"line":22,"column":18,"offset":566},"indent":[]}},{"type":"inlineCode","value":"indexes[arr[i] = 1]","position":{"start":{"line":22,"column":18,"offset":566},"end":{"line":22,"column":39,"offset":587},"indent":[]}},{"type":"text","value":" with the new position ","position":{"start":{"line":22,"column":39,"offset":587},"end":{"line":22,"column":62,"offset":610},"indent":[]}},{"type":"inlineCode","value":"indexes[i]","position":{"start":{"line":22,"column":62,"offset":610},"end":{"line":22,"column":74,"offset":622},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":22,"column":74,"offset":622},"end":{"line":22,"column":75,"offset":623},"indent":[]}}],"position":{"start":{"line":22,"column":4,"offset":552},"end":{"line":22,"column":75,"offset":623},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":549},"end":{"line":22,"column":75,"offset":623},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Increment swaps.","position":{"start":{"line":23,"column":4,"offset":627},"end":{"line":23,"column":20,"offset":643},"indent":[]}}],"position":{"start":{"line":23,"column":4,"offset":627},"end":{"line":23,"column":20,"offset":643},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":624},"end":{"line":23,"column":20,"offset":643},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Continue.","position":{"start":{"line":24,"column":4,"offset":647},"end":{"line":24,"column":13,"offset":656},"indent":[]}}],"position":{"start":{"line":24,"column":4,"offset":647},"end":{"line":24,"column":13,"offset":656},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":644},"end":{"line":24,"column":13,"offset":656},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":375},"end":{"line":24,"column":13,"offset":656},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This solution will have a run time of ","position":{"start":{"line":26,"column":1,"offset":658},"end":{"line":26,"column":39,"offset":696},"indent":[]}},{"type":"inlineCode","value":"n","position":{"start":{"line":26,"column":39,"offset":696},"end":{"line":26,"column":42,"offset":699},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":26,"column":42,"offset":699},"end":{"line":26,"column":43,"offset":700},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":658},"end":{"line":26,"column":43,"offset":700},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// Complete the minimumSwaps function below.\nfunction minimumSwaps(arr) {\n  let swaps = 0;\n  // Build an array of indexes for where the next `indexOf` for the element you want is.\n  const indexes = arr.map((_, i) => arr.indexOf(i + 1));\n\n  for (let i = 0; i < arr.length; i++) {\n    // if !== 1\n    if (arr[i] !== i + 1) {\n      // 7\n      const temp = arr[i];\n      // set arr[1] to 1\n      arr[i] = arr[indexes[i]];\n      // set arr[1] to 7\n      arr[indexes[i]] = temp;\n      // set indexes[6] to\n      indexes[temp - 1] = indexes[i];\n      // increment swaps\n      swaps++;\n    }\n  }\n\n  return swaps;\n}","position":{"start":{"line":28,"column":1,"offset":702},"end":{"line":53,"column":4,"offset":1326},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":56,"column":1,"offset":1329},"end":{"line":56,"column":31,"offset":1359},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":56,"column":31,"offset":1359}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"minimum-swaps\"\n    }}>{`Minimum Swaps`}</h1>\n    <h2 {...{\n      \"id\": \"how-to\"\n    }}>{`How to`}</h2>\n    <p>{`Given array `}<inlineCode parentName=\"p\">{`[7, 1, 3, 2, 4, 5, 6]`}</inlineCode>{`, what are the minimum swaps to sort this algorithm?`}</p>\n    <h2 {...{\n      \"id\": \"notes\"\n    }}>{`Notes`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`We want this to be efficient, so selection sort doesn't cut it.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"solution\"\n    }}>{`Solution`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Build an array of indexes for where the next `}<inlineCode parentName=\"li\">{`indexOf`}</inlineCode>{` for the element you want is.`}</li>\n      <li parentName=\"ol\">{`For `}<inlineCode parentName=\"li\">{`i = 0..n-1`}</inlineCode>{`, if `}<inlineCode parentName=\"li\">{`arr[0] !== i + 1`}</inlineCode>{`, then swap `}<inlineCode parentName=\"li\">{`arr[i]`}</inlineCode>{` with `}<inlineCode parentName=\"li\">{`arr[indexes[i]]`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Finally, swap `}<inlineCode parentName=\"li\">{`indexes[arr[i] = 1]`}</inlineCode>{` with the new position `}<inlineCode parentName=\"li\">{`indexes[i]`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Increment swaps.`}</li>\n      <li parentName=\"ol\">{`Continue.`}</li>\n    </ol>\n    <p>{`This solution will have a run time of `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Complete the minimumSwaps function below.\nfunction minimumSwaps(arr) {\n  let swaps = 0;\n  // Build an array of indexes for where the next \\`indexOf\\` for the element you want is.\n  const indexes = arr.map((_, i) => arr.indexOf(i + 1));\n\n  for (let i = 0; i < arr.length; i++) {\n    // if !== 1\n    if (arr[i] !== i + 1) {\n      // 7\n      const temp = arr[i];\n      // set arr[1] to 1\n      arr[i] = arr[indexes[i]];\n      // set arr[1] to 7\n      arr[indexes[i]] = temp;\n      // set indexes[6] to\n      indexes[temp - 1] = indexes[i];\n      // increment swaps\n      swaps++;\n    }\n  }\n\n  return swaps;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}