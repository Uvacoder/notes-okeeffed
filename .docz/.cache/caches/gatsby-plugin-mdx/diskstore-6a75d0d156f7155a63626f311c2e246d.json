{"expireTime":9007200867335902000,"key":"gatsby-plugin-mdx-entire-payload-345048367a801754ab9202689ec6c544-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Indexing Example","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":19,"offset":185},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":19,"offset":185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following is done on PostgresSQL 12.","position":{"start":{"line":10,"column":1,"offset":187},"end":{"line":10,"column":41,"offset":227},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":187},"end":{"line":10,"column":41,"offset":227},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":12,"column":4,"offset":232},"end":{"line":12,"column":13,"offset":241},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":229},"end":{"line":12,"column":13,"offset":241},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.db-fiddle.com/","children":[{"type":"text","value":"DB Fiddle","position":{"start":{"line":14,"column":5,"offset":247},"end":{"line":14,"column":14,"offset":256},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":246},"end":{"line":14,"column":43,"offset":285},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":246},"end":{"line":14,"column":43,"offset":285},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":243},"end":{"line":14,"column":43,"offset":285},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":243},"end":{"line":14,"column":43,"offset":285},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Without Indexing","position":{"start":{"line":16,"column":4,"offset":290},"end":{"line":16,"column":20,"offset":306},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":287},"end":{"line":16,"column":20,"offset":306},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":"CREATE TABLE test (\n  id INT,\n  count INT\n);\nINSERT INTO test (id, count) VALUES (1,1);\nINSERT INTO test (id, count) VALUES (2,2);\nINSERT INTO test (id, count) VALUES (3,3);\n\nCREATE TABLE test_two (\n  id INT,\n  count INT\n);\nINSERT INTO test_two (id, count) VALUES (1,1);\nINSERT INTO test_two (id, count) VALUES (2,2);\nINSERT INTO test_two (id, count) VALUES (3,3);\nCREATE INDEX ON test_two(count)\n\nEXPLAIN ANALYZE\nSELECT * FROM test JOIN test_two ON (test.id = test_two.id)","position":{"start":{"line":18,"column":1,"offset":308},"end":{"line":38,"column":4,"offset":792},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The QUERY PLAN returns:","position":{"start":{"line":40,"column":1,"offset":794},"end":{"line":40,"column":24,"offset":817},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":794},"end":{"line":40,"column":24,"offset":817},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":"Merge Join (cost=317.01..711.38 rows=25538 width=16) (actual time=0.050..0.052 rows=3 loops=1)\nMerge Cond: (test.id = test_two.id)\n-> Sort (cost=158.51..164.16 rows=2260 width=8) (actual time=0.029..0.030 rows=3 loops=1)\nSort Key: test.id\nSort Method: quicksort Memory: 25kB\n-> Seq Scan on test (cost=0.00..32.60 rows=2260 width=8) (actual time=0.005..0.005 rows=3 loops=1)\n-> Sort (cost=158.51..164.16 rows=2260 width=8) (actual time=0.018..0.018 rows=3 loops=1)\nSort Key: test_two.id\nSort Method: quicksort Memory: 25kB\n-> Seq Scan on test_two (cost=0.00..32.60 rows=2260 width=8) (actual time=0.006..0.006 rows=3 loops=1)\nPlanning Time: 0.301 ms\nExecution Time: 0.132 ms","position":{"start":{"line":42,"column":1,"offset":819},"end":{"line":55,"column":4,"offset":1503},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"With Indexing","position":{"start":{"line":57,"column":4,"offset":1508},"end":{"line":57,"column":17,"offset":1521},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1505},"end":{"line":57,"column":17,"offset":1521},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":"CREATE TABLE test (\n  id INT,\n  count INT\n);\nINSERT INTO test (id, count) VALUES (1,1);\nINSERT INTO test (id, count) VALUES (2,2);\nINSERT INTO test (id, count) VALUES (3,3);\n\nCREATE TABLE test_two (\n  id INT,\n  count INT\n);\nINSERT INTO test_two (id, count) VALUES (1,1);\nINSERT INTO test_two (id, count) VALUES (2,2);\nINSERT INTO test_two (id, count) VALUES (3,3);\nCREATE INDEX ON test_two(count)\n\nEXPLAIN ANALYZE\nSELECT * FROM test JOIN test_two ON (test.id = test_two.id)","position":{"start":{"line":59,"column":1,"offset":1523},"end":{"line":79,"column":4,"offset":2007},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The QUERY PLAN returns:","position":{"start":{"line":81,"column":1,"offset":2009},"end":{"line":81,"column":24,"offset":2032},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2009},"end":{"line":81,"column":24,"offset":2032},"indent":[]}},{"type":"code","lang":"sql","meta":null,"value":"Hash Join (cost=1.07..42.48 rows=34 width=16) (actual time=0.058..0.059 rows=3 loops=1)\nHash Cond: (test.id = test_two.id)\n-> Seq Scan on test (cost=0.00..32.60 rows=2260 width=8) (actual time=0.003..0.004 rows=3 loops=1)\n-> Hash (cost=1.03..1.03 rows=3 width=8) (actual time=0.011..0.011 rows=3 loops=1)\nBuckets: 1024 Batches: 1 Memory Usage: 9kB\n-> Seq Scan on test_two (cost=0.00..1.03 rows=3 width=8) (actual time=0.001..0.002 rows=3 loops=1)\nPlanning Time: 0.443 ms\nExecution Time: 0.121 ms","position":{"start":{"line":83,"column":1,"offset":2034},"end":{"line":92,"column":4,"offset":2540},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":95,"column":1,"offset":2543},"end":{"line":95,"column":31,"offset":2573},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":95,"column":31,"offset":2573}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"indexing-example\"\n    }}>{`Indexing Example`}</h1>\n    <p>{`The following is done on PostgresSQL 12.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.db-fiddle.com/\"\n        }}>{`DB Fiddle`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"without-indexing\"\n    }}>{`Without Indexing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`CREATE TABLE test (\n  id INT,\n  count INT\n);\nINSERT INTO test (id, count) VALUES (1,1);\nINSERT INTO test (id, count) VALUES (2,2);\nINSERT INTO test (id, count) VALUES (3,3);\n\nCREATE TABLE test_two (\n  id INT,\n  count INT\n);\nINSERT INTO test_two (id, count) VALUES (1,1);\nINSERT INTO test_two (id, count) VALUES (2,2);\nINSERT INTO test_two (id, count) VALUES (3,3);\nCREATE INDEX ON test_two(count)\n\nEXPLAIN ANALYZE\nSELECT * FROM test JOIN test_two ON (test.id = test_two.id)\n`}</code></pre>\n    <p>{`The QUERY PLAN returns:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`Merge Join (cost=317.01..711.38 rows=25538 width=16) (actual time=0.050..0.052 rows=3 loops=1)\nMerge Cond: (test.id = test_two.id)\n-> Sort (cost=158.51..164.16 rows=2260 width=8) (actual time=0.029..0.030 rows=3 loops=1)\nSort Key: test.id\nSort Method: quicksort Memory: 25kB\n-> Seq Scan on test (cost=0.00..32.60 rows=2260 width=8) (actual time=0.005..0.005 rows=3 loops=1)\n-> Sort (cost=158.51..164.16 rows=2260 width=8) (actual time=0.018..0.018 rows=3 loops=1)\nSort Key: test_two.id\nSort Method: quicksort Memory: 25kB\n-> Seq Scan on test_two (cost=0.00..32.60 rows=2260 width=8) (actual time=0.006..0.006 rows=3 loops=1)\nPlanning Time: 0.301 ms\nExecution Time: 0.132 ms\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"with-indexing\"\n    }}>{`With Indexing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`CREATE TABLE test (\n  id INT,\n  count INT\n);\nINSERT INTO test (id, count) VALUES (1,1);\nINSERT INTO test (id, count) VALUES (2,2);\nINSERT INTO test (id, count) VALUES (3,3);\n\nCREATE TABLE test_two (\n  id INT,\n  count INT\n);\nINSERT INTO test_two (id, count) VALUES (1,1);\nINSERT INTO test_two (id, count) VALUES (2,2);\nINSERT INTO test_two (id, count) VALUES (3,3);\nCREATE INDEX ON test_two(count)\n\nEXPLAIN ANALYZE\nSELECT * FROM test JOIN test_two ON (test.id = test_two.id)\n`}</code></pre>\n    <p>{`The QUERY PLAN returns:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`Hash Join (cost=1.07..42.48 rows=34 width=16) (actual time=0.058..0.059 rows=3 loops=1)\nHash Cond: (test.id = test_two.id)\n-> Seq Scan on test (cost=0.00..32.60 rows=2260 width=8) (actual time=0.003..0.004 rows=3 loops=1)\n-> Hash (cost=1.03..1.03 rows=3 width=8) (actual time=0.011..0.011 rows=3 loops=1)\nBuckets: 1024 Batches: 1 Memory Usage: 9kB\n-> Seq Scan on test_two (cost=0.00..1.03 rows=3 width=8) (actual time=0.001..0.002 rows=3 loops=1)\nPlanning Time: 0.443 ms\nExecution Time: 0.121 ms\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}