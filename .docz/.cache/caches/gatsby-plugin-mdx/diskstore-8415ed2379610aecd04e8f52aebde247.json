{"expireTime":9007200867336003000,"key":"gatsby-plugin-mdx-entire-payload-66022104159fe9b0769a8cb2f503dd18-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Case Swap","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":12,"offset":178},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":12,"offset":178},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":183},"end":{"line":10,"column":13,"offset":192},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":180},"end":{"line":10,"column":13,"offset":192},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.coderbyte.com/editor/Swap%20Case:Kotlin","children":[{"type":"text","value":"CoderByte - Kotlin","position":{"start":{"line":12,"column":5,"offset":198},"end":{"line":12,"column":23,"offset":216},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":197},"end":{"line":12,"column":77,"offset":270},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":197},"end":{"line":12,"column":77,"offset":270},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":194},"end":{"line":12,"column":77,"offset":270},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":194},"end":{"line":12,"column":77,"offset":270},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Question","position":{"start":{"line":14,"column":4,"offset":275},"end":{"line":14,"column":12,"offset":283},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":272},"end":{"line":14,"column":12,"offset":283},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Have the function ","position":{"start":{"line":16,"column":1,"offset":285},"end":{"line":16,"column":19,"offset":303},"indent":[]}},{"type":"inlineCode","value":"SwapCase(str)","position":{"start":{"line":16,"column":19,"offset":303},"end":{"line":16,"column":34,"offset":318},"indent":[]}},{"type":"text","value":" take the str parameter and swap the case of each character. For example: if str is \"Hello World\" the output should be ","position":{"start":{"line":16,"column":34,"offset":318},"end":{"line":16,"column":153,"offset":437},"indent":[]}},{"type":"inlineCode","value":"hELLO wORLD","position":{"start":{"line":16,"column":153,"offset":437},"end":{"line":16,"column":166,"offset":450},"indent":[]}},{"type":"text","value":". Let numbers and symbols stay the way they are.","position":{"start":{"line":16,"column":166,"offset":450},"end":{"line":16,"column":214,"offset":498},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":285},"end":{"line":16,"column":214,"offset":498},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples","position":{"start":{"line":18,"column":4,"offset":503},"end":{"line":18,"column":12,"offset":511},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":500},"end":{"line":18,"column":12,"offset":511},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"Input: \"Hello-LOL\"\nOutput: hELLO-lol","position":{"start":{"line":20,"column":1,"offset":513},"end":{"line":23,"column":4,"offset":562},"indent":[1,1,1]}},{"type":"code","lang":"shell","meta":null,"value":"Input: \"Sup DUDE!!?\"\nOutput: sUP dude!!?","position":{"start":{"line":25,"column":1,"offset":564},"end":{"line":28,"column":4,"offset":617},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Answer","position":{"start":{"line":30,"column":4,"offset":622},"end":{"line":30,"column":10,"offset":628},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":619},"end":{"line":30,"column":10,"offset":628},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In JavaScript:","position":{"start":{"line":32,"column":1,"offset":630},"end":{"line":32,"column":15,"offset":644},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":630},"end":{"line":32,"column":15,"offset":644},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function SwapCase(str) {\n  let retStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (/[a-z]/.test(str[i])) {\n      retStr += str[i].toUpperCase();\n    } else if (/[A-Z]/.test(str[i])) {\n      retStr += str[i].toLowerCase();\n    } else {\n      retStr += str[i];\n    }\n  }\n  // code goes here\n  return retStr;\n}","position":{"start":{"line":34,"column":1,"offset":646},"end":{"line":49,"column":4,"offset":981},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In Kotlin:","position":{"start":{"line":51,"column":1,"offset":983},"end":{"line":51,"column":11,"offset":993},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":983},"end":{"line":51,"column":11,"offset":993},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"fun SwapCase(str: String): String {\n  val regexLower = Regex(pattern = \"[a-z]\")\n  val regexUpper = Regex(pattern = \"[A-Z]\")\n  val list = mutableListOf<String>()\n\n  for (i in str.indices) {\n    if (regexLower.containsMatchIn(str[i].toString())) {\n      list.add(str[i].toString().toUpperCase())\n    } else if (regexUpper.containsMatchIn(str[i].toString())) {\n      list.add(str[i].toString().toLowerCase())\n    } else {\n      list.add(str[i].toString())\n    }\n  }\n  // code goes here\n  return list.joinToString(\"\").trim();\n}\n\nfun main(args: Array<String>) {\n  println(SwapCase(readLine()))\n}","position":{"start":{"line":53,"column":1,"offset":995},"end":{"line":75,"column":4,"offset":1599},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":78,"column":1,"offset":1602},"end":{"line":78,"column":31,"offset":1632},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":78,"column":31,"offset":1632}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"case-swap\"\n    }}>{`Case Swap`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.coderbyte.com/editor/Swap%20Case:Kotlin\"\n        }}>{`CoderByte - Kotlin`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"question\"\n    }}>{`Question`}</h2>\n    <p>{`Have the function `}<inlineCode parentName=\"p\">{`SwapCase(str)`}</inlineCode>{` take the str parameter and swap the case of each character. For example: if str is \"Hello World\" the output should be `}<inlineCode parentName=\"p\">{`hELLO wORLD`}</inlineCode>{`. Let numbers and symbols stay the way they are.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Input: \"Hello-LOL\"\nOutput: hELLO-lol\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`Input: \"Sup DUDE!!?\"\nOutput: sUP dude!!?\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <p>{`In JavaScript:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function SwapCase(str) {\n  let retStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (/[a-z]/.test(str[i])) {\n      retStr += str[i].toUpperCase();\n    } else if (/[A-Z]/.test(str[i])) {\n      retStr += str[i].toLowerCase();\n    } else {\n      retStr += str[i];\n    }\n  }\n  // code goes here\n  return retStr;\n}\n`}</code></pre>\n    <p>{`In Kotlin:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun SwapCase(str: String): String {\n  val regexLower = Regex(pattern = \"[a-z]\")\n  val regexUpper = Regex(pattern = \"[A-Z]\")\n  val list = mutableListOf<String>()\n\n  for (i in str.indices) {\n    if (regexLower.containsMatchIn(str[i].toString())) {\n      list.add(str[i].toString().toUpperCase())\n    } else if (regexUpper.containsMatchIn(str[i].toString())) {\n      list.add(str[i].toString().toLowerCase())\n    } else {\n      list.add(str[i].toString())\n    }\n  }\n  // code goes here\n  return list.joinToString(\"\").trim();\n}\n\nfun main(args: Array<String>) {\n  println(SwapCase(readLine()))\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}