{"expireTime":9007200852878462000,"key":"gatsby-plugin-mdx-entire-payload-82d660caae5ed9b07329f2ded6944307-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Containers vs VMs","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":20,"offset":186},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":20,"offset":186},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":191},"end":{"line":10,"column":13,"offset":200},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":13,"offset":200},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://blog.netapp.com/blogs/containers-vs-vms/","children":[{"type":"text","value":"NetApp Blog","position":{"start":{"line":12,"column":5,"offset":206},"end":{"line":12,"column":16,"offset":217},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":205},"end":{"line":12,"column":67,"offset":268},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":205},"end":{"line":12,"column":67,"offset":268},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":202},"end":{"line":12,"column":67,"offset":268},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":202},"end":{"line":12,"column":67,"offset":268},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"What are Virtual Machines","position":{"start":{"line":14,"column":4,"offset":273},"end":{"line":14,"column":29,"offset":298},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":270},"end":{"line":14,"column":29,"offset":298},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"VMs were born to run software on top of physical servers to emulate a particular hardware system. A hypervisor, or a virtual machine monitor, is software, firmware, or hardware that creates and runs VMs. It’s what sits between the hardware and the virtual machine and is necessary to virtualize the server.","position":{"start":{"line":16,"column":1,"offset":300},"end":{"line":16,"column":307,"offset":606},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":300},"end":{"line":16,"column":307,"offset":606},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Within each virtual machine runs a unique guest operating system. VMs with different operating systems can run on the same physical server — a UNIX VM can sit alongside a Linux VM, and so on. Each VM has its own binaries, libraries, and applications that it services, and the VM may be many gigabytes in size.","position":{"start":{"line":18,"column":1,"offset":608},"end":{"line":18,"column":310,"offset":917},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":608},"end":{"line":18,"column":310,"offset":917},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Some of the benefits of VMs is the ability to consolidate applications onto a single system.","position":{"start":{"line":20,"column":1,"offset":919},"end":{"line":20,"column":93,"offset":1011},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":919},"end":{"line":20,"column":93,"offset":1011},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Each VM includes a separate operating system image, which adds overhead in memory and storage footprint. As it turns out, this issue adds complexity to all stages of a software development lifecycle—from development and test to production and disaster recovery. This approach also severely limits the portability of applications between public clouds, private clouds, and traditional data centers.","position":{"start":{"line":22,"column":1,"offset":1013},"end":{"line":22,"column":398,"offset":1410},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1013},"end":{"line":22,"column":398,"offset":1410},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"What are Containers","position":{"start":{"line":24,"column":4,"offset":1415},"end":{"line":24,"column":23,"offset":1434},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1412},"end":{"line":24,"column":23,"offset":1434},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Containers provide a way to run isolated systems on a single server or host OS.","position":{"start":{"line":26,"column":1,"offset":1436},"end":{"line":26,"column":80,"offset":1515},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1436},"end":{"line":26,"column":80,"offset":1515},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Containers sit on top of a physical server and its host OS.","position":{"start":{"line":28,"column":1,"offset":1517},"end":{"line":28,"column":60,"offset":1576},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1517},"end":{"line":28,"column":60,"offset":1576},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Running containers share the host OS kernel and, usually, the binaries and libraries.","position":{"start":{"line":30,"column":1,"offset":1578},"end":{"line":30,"column":86,"offset":1663},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1578},"end":{"line":30,"column":86,"offset":1663},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Shared components are read-only, therefore containers are considered \"light\". They are only megabytes in size and take just seconds to start, versus gigabytes and minutes for a VM. This enables use cases such as serveless applications to become very possible for deploying a container to run a specific function.","position":{"start":{"line":32,"column":1,"offset":1665},"end":{"line":32,"column":313,"offset":1977},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1665},"end":{"line":32,"column":313,"offset":1977},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"What's the difference","position":{"start":{"line":34,"column":4,"offset":1982},"end":{"line":34,"column":25,"offset":2003},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1979},"end":{"line":34,"column":25,"offset":2003},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The main difference is that containers provide a way to virtualise an operating system so that multiple workloads can run on a single OS instance.","position":{"start":{"line":36,"column":1,"offset":2005},"end":{"line":36,"column":147,"offset":2151},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2005},"end":{"line":36,"column":147,"offset":2151},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With VMs, the hardware is being virtualised to run multiple OS instances.","position":{"start":{"line":38,"column":1,"offset":2153},"end":{"line":38,"column":74,"offset":2226},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2153},"end":{"line":38,"column":74,"offset":2226},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":41,"column":1,"offset":2229},"end":{"line":41,"column":31,"offset":2259},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":41,"column":31,"offset":2259}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"containers-vs-vms\"\n    }}>{`Containers vs VMs`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://blog.netapp.com/blogs/containers-vs-vms/\"\n        }}>{`NetApp Blog`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"what-are-virtual-machines\"\n    }}>{`What are Virtual Machines`}</h2>\n    <p>{`VMs were born to run software on top of physical servers to emulate a particular hardware system. A hypervisor, or a virtual machine monitor, is software, firmware, or hardware that creates and runs VMs. It’s what sits between the hardware and the virtual machine and is necessary to virtualize the server.`}</p>\n    <p>{`Within each virtual machine runs a unique guest operating system. VMs with different operating systems can run on the same physical server — a UNIX VM can sit alongside a Linux VM, and so on. Each VM has its own binaries, libraries, and applications that it services, and the VM may be many gigabytes in size.`}</p>\n    <p>{`Some of the benefits of VMs is the ability to consolidate applications onto a single system.`}</p>\n    <p>{`Each VM includes a separate operating system image, which adds overhead in memory and storage footprint. As it turns out, this issue adds complexity to all stages of a software development lifecycle—from development and test to production and disaster recovery. This approach also severely limits the portability of applications between public clouds, private clouds, and traditional data centers.`}</p>\n    <h2 {...{\n      \"id\": \"what-are-containers\"\n    }}>{`What are Containers`}</h2>\n    <p>{`Containers provide a way to run isolated systems on a single server or host OS.`}</p>\n    <p>{`Containers sit on top of a physical server and its host OS.`}</p>\n    <p>{`Running containers share the host OS kernel and, usually, the binaries and libraries.`}</p>\n    <p>{`Shared components are read-only, therefore containers are considered \"light\". They are only megabytes in size and take just seconds to start, versus gigabytes and minutes for a VM. This enables use cases such as serveless applications to become very possible for deploying a container to run a specific function.`}</p>\n    <h2 {...{\n      \"id\": \"whats-the-difference\"\n    }}>{`What's the difference`}</h2>\n    <p>{`The main difference is that containers provide a way to virtualise an operating system so that multiple workloads can run on a single OS instance.`}</p>\n    <p>{`With VMs, the hardware is being virtualised to run multiple OS instances.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}