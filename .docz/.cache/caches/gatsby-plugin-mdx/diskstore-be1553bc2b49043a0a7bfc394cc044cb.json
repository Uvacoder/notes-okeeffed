{"expireTime":9007200849425559000,"key":"gatsby-plugin-mdx-entire-payload-50e7696cf7297b889c6f08af72c35902-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Syntax in Functions","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":22,"offset":188},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":22,"offset":188},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pattern matching","position":{"start":{"line":10,"column":4,"offset":193},"end":{"line":10,"column":20,"offset":209},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":190},"end":{"line":10,"column":20,"offset":209},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When defining functions, you can define separate function bodies for different patterns. This leads to really neat code that's simple and readable.","position":{"start":{"line":12,"column":1,"offset":211},"end":{"line":12,"column":148,"offset":358},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":211},"end":{"line":12,"column":148,"offset":358},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"lucky :: (Integral a) => a -> String\nlucky 7 = \"LUCKY NUMBER SEVEN!\"\nlucky x = \"Sorry, you're out of luck, pal!\"","position":{"start":{"line":14,"column":1,"offset":360},"end":{"line":18,"column":4,"offset":487},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here is a more useful example with factorials:","position":{"start":{"line":20,"column":1,"offset":489},"end":{"line":20,"column":47,"offset":535},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":489},"end":{"line":20,"column":47,"offset":535},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"factorial :: (Integral a) => a -> a\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)","position":{"start":{"line":22,"column":1,"offset":537},"end":{"line":26,"column":4,"offset":639},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note: Pattern matching can also fail if the fallback case is not defined.","position":{"start":{"line":28,"column":1,"offset":641},"end":{"line":28,"column":74,"offset":714},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":641},"end":{"line":28,"column":74,"offset":714},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Pattern matching can also happen with list comprehensions:","position":{"start":{"line":30,"column":1,"offset":716},"end":{"line":30,"column":59,"offset":774},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":716},"end":{"line":30,"column":59,"offset":774},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"ghci> let xs = [(1,3), (4,3), (2,4), (5,3), (5,6), (3,1)]\nghci> [a+b | (a,b) <- xs]\n[4,7,6,8,11,4]","position":{"start":{"line":32,"column":1,"offset":776},"end":{"line":36,"column":4,"offset":883},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Guards","position":{"start":{"line":38,"column":4,"offset":888},"end":{"line":38,"column":10,"offset":894},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":885},"end":{"line":38,"column":10,"offset":894},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"bmiTell :: (RealFloat a) => a -> String\nbmiTell bmi\n    | bmi <= 18.5 = \"You're underweight, you emo, you!\"\n    | bmi <= 25.0 = \"You're supposedly normal. Pffft, I bet you're ugly!\"\n    | bmi <= 30.0 = \"You're fat! Lose some weight, fatty!\"\n    | otherwise   = \"You're a whale, congratulations!\"","position":{"start":{"line":40,"column":1,"offset":896},"end":{"line":47,"column":4,"offset":1206},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"An example of a small ","position":{"start":{"line":49,"column":1,"offset":1208},"end":{"line":49,"column":23,"offset":1230},"indent":[]}},{"type":"inlineCode","value":"myCompare","position":{"start":{"line":49,"column":23,"offset":1230},"end":{"line":49,"column":34,"offset":1241},"indent":[]}},{"type":"text","value":" function:","position":{"start":{"line":49,"column":34,"offset":1241},"end":{"line":49,"column":44,"offset":1251},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1208},"end":{"line":49,"column":44,"offset":1251},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"myCompare :: (Ord a) => a -> a -> Ordering\na `myCompare` b\n    | a > b     = GT\n    | a == b    = EQ\n    | otherwise = LT\n-- 3 `myCompare` 2 -> GT","position":{"start":{"line":51,"column":1,"offset":1253},"end":{"line":58,"column":4,"offset":1414},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Where bindings","position":{"start":{"line":60,"column":4,"offset":1419},"end":{"line":60,"column":18,"offset":1433},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1416},"end":{"line":60,"column":18,"offset":1433},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"bmiTell :: (RealFloat a) => a -> a -> String\nbmiTell weight height\n    | bmi <= 18.5 = \"You're underweight, you emo, you!\"\n    | bmi <= 25.0 = \"You're supposedly normal. Pffft, I bet you're ugly!\"\n    | bmi <= 30.0 = \"You're fat! Lose some weight, fatty!\"\n    | otherwise   = \"You're a whale, congratulations!\"\n    where bmi = weight / height ^ 2","position":{"start":{"line":62,"column":1,"offset":1435},"end":{"line":70,"column":4,"offset":1796},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Let bindings","position":{"start":{"line":72,"column":4,"offset":1801},"end":{"line":72,"column":16,"offset":1813},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":1798},"end":{"line":72,"column":16,"offset":1813},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":75,"column":1,"offset":1816},"end":{"line":75,"column":31,"offset":1846},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":75,"column":31,"offset":1846}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"syntax-in-functions\"\n    }}>{`Syntax in Functions`}</h1>\n    <h2 {...{\n      \"id\": \"pattern-matching\"\n    }}>{`Pattern matching`}</h2>\n    <p>{`When defining functions, you can define separate function bodies for different patterns. This leads to really neat code that's simple and readable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`lucky :: (Integral a) => a -> String\nlucky 7 = \"LUCKY NUMBER SEVEN!\"\nlucky x = \"Sorry, you're out of luck, pal!\"\n`}</code></pre>\n    <p>{`Here is a more useful example with factorials:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`factorial :: (Integral a) => a -> a\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)\n`}</code></pre>\n    <p>{`Note: Pattern matching can also fail if the fallback case is not defined.`}</p>\n    <p>{`Pattern matching can also happen with list comprehensions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`ghci> let xs = [(1,3), (4,3), (2,4), (5,3), (5,6), (3,1)]\nghci> [a+b | (a,b) <- xs]\n[4,7,6,8,11,4]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"guards\"\n    }}>{`Guards`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`bmiTell :: (RealFloat a) => a -> String\nbmiTell bmi\n    | bmi <= 18.5 = \"You're underweight, you emo, you!\"\n    | bmi <= 25.0 = \"You're supposedly normal. Pffft, I bet you're ugly!\"\n    | bmi <= 30.0 = \"You're fat! Lose some weight, fatty!\"\n    | otherwise   = \"You're a whale, congratulations!\"\n`}</code></pre>\n    <p>{`An example of a small `}<inlineCode parentName=\"p\">{`myCompare`}</inlineCode>{` function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`myCompare :: (Ord a) => a -> a -> Ordering\na \\`myCompare\\` b\n    | a > b     = GT\n    | a == b    = EQ\n    | otherwise = LT\n-- 3 \\`myCompare\\` 2 -> GT\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"where-bindings\"\n    }}>{`Where bindings`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`bmiTell :: (RealFloat a) => a -> a -> String\nbmiTell weight height\n    | bmi <= 18.5 = \"You're underweight, you emo, you!\"\n    | bmi <= 25.0 = \"You're supposedly normal. Pffft, I bet you're ugly!\"\n    | bmi <= 30.0 = \"You're fat! Lose some weight, fatty!\"\n    | otherwise   = \"You're a whale, congratulations!\"\n    where bmi = weight / height ^ 2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"let-bindings\"\n    }}>{`Let bindings`}</h2>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}