{"expireTime":9007200866986930000,"key":"gatsby-plugin-mdx-entire-payload-1ad5d419caea3bf6e744e5e68691ee40-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Toy App","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":10,"offset":176},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":10,"offset":176},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The Users Resource","position":{"start":{"line":10,"column":4,"offset":181},"end":{"line":10,"column":22,"offset":199},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":178},"end":{"line":10,"column":22,"offset":199},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can scaffold the users resource with the following:","position":{"start":{"line":12,"column":1,"offset":201},"end":{"line":12,"column":55,"offset":255},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":201},"end":{"line":12,"column":55,"offset":255},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"rails generate scaffold User name:string email:string","position":{"start":{"line":14,"column":1,"offset":257},"end":{"line":16,"column":4,"offset":319},"indent":[1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Note: There is no need to create a parameter for ","position":{"start":{"line":18,"column":3,"offset":323},"end":{"line":18,"column":52,"offset":372},"indent":[]}},{"type":"inlineCode","value":"id","position":{"start":{"line":18,"column":52,"offset":372},"end":{"line":18,"column":56,"offset":376},"indent":[]}},{"type":"text","value":" - it is created for you.","position":{"start":{"line":18,"column":56,"offset":376},"end":{"line":18,"column":81,"offset":401},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":323},"end":{"line":18,"column":81,"offset":401},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":321},"end":{"line":18,"column":81,"offset":401},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Generally speaking, it is not a great idea to get too deep into scaffolding.","position":{"start":{"line":20,"column":1,"offset":403},"end":{"line":20,"column":77,"offset":479},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":403},"end":{"line":20,"column":77,"offset":479},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That generation will create a migration in ","position":{"start":{"line":22,"column":1,"offset":481},"end":{"line":22,"column":44,"offset":524},"indent":[]}},{"type":"inlineCode","value":"db/migrate","position":{"start":{"line":22,"column":44,"offset":524},"end":{"line":22,"column":56,"offset":536},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":22,"column":56,"offset":536},"end":{"line":22,"column":57,"offset":537},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":481},"end":{"line":22,"column":57,"offset":537},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"In Rails 6, you should use ","position":{"start":{"line":24,"column":3,"offset":541},"end":{"line":24,"column":30,"offset":568},"indent":[]}},{"type":"inlineCode","value":"rails","position":{"start":{"line":24,"column":30,"offset":568},"end":{"line":24,"column":37,"offset":575},"indent":[]}},{"type":"text","value":" in place of ","position":{"start":{"line":24,"column":37,"offset":575},"end":{"line":24,"column":50,"offset":588},"indent":[]}},{"type":"inlineCode","value":"rake","position":{"start":{"line":24,"column":50,"offset":588},"end":{"line":24,"column":56,"offset":594},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":24,"column":56,"offset":594},"end":{"line":24,"column":57,"offset":595},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":541},"end":{"line":24,"column":57,"offset":595},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":539},"end":{"line":24,"column":57,"offset":595},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That generation of the ","position":{"start":{"line":26,"column":1,"offset":597},"end":{"line":26,"column":24,"offset":620},"indent":[]}},{"type":"inlineCode","value":"User","position":{"start":{"line":26,"column":24,"offset":620},"end":{"line":26,"column":30,"offset":626},"indent":[]}},{"type":"text","value":" will create the routing for the following:","position":{"start":{"line":26,"column":30,"offset":626},"end":{"line":26,"column":73,"offset":669},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":597},"end":{"line":26,"column":73,"offset":669},"indent":[]}},{"type":"table","align":[null,null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"URL","position":{"start":{"line":28,"column":3,"offset":673},"end":{"line":28,"column":6,"offset":676},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":673},"end":{"line":28,"column":16,"offset":686},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Action","position":{"start":{"line":28,"column":19,"offset":689},"end":{"line":28,"column":25,"offset":695},"indent":[]}}],"position":{"start":{"line":28,"column":19,"offset":689},"end":{"line":28,"column":25,"offset":695},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Purpose","position":{"start":{"line":28,"column":28,"offset":698},"end":{"line":28,"column":35,"offset":705},"indent":[]}}],"position":{"start":{"line":28,"column":28,"offset":698},"end":{"line":28,"column":55,"offset":725},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":671},"end":{"line":28,"column":57,"offset":727},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"/users","position":{"start":{"line":30,"column":3,"offset":787},"end":{"line":30,"column":9,"offset":793},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":787},"end":{"line":30,"column":16,"offset":800},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"index","position":{"start":{"line":30,"column":19,"offset":803},"end":{"line":30,"column":24,"offset":808},"indent":[]}}],"position":{"start":{"line":30,"column":19,"offset":803},"end":{"line":30,"column":25,"offset":809},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"page to list all users","position":{"start":{"line":30,"column":28,"offset":812},"end":{"line":30,"column":50,"offset":834},"indent":[]}}],"position":{"start":{"line":30,"column":28,"offset":812},"end":{"line":30,"column":55,"offset":839},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":785},"end":{"line":30,"column":57,"offset":841},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"/users/1","position":{"start":{"line":31,"column":3,"offset":844},"end":{"line":31,"column":11,"offset":852},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":844},"end":{"line":31,"column":16,"offset":857},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"show","position":{"start":{"line":31,"column":19,"offset":860},"end":{"line":31,"column":23,"offset":864},"indent":[]}}],"position":{"start":{"line":31,"column":19,"offset":860},"end":{"line":31,"column":25,"offset":866},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"page to show user with id 1","position":{"start":{"line":31,"column":28,"offset":869},"end":{"line":31,"column":55,"offset":896},"indent":[]}}],"position":{"start":{"line":31,"column":28,"offset":869},"end":{"line":31,"column":55,"offset":896},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":842},"end":{"line":31,"column":57,"offset":898},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"/users/new","position":{"start":{"line":32,"column":3,"offset":901},"end":{"line":32,"column":13,"offset":911},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":901},"end":{"line":32,"column":16,"offset":914},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"new","position":{"start":{"line":32,"column":19,"offset":917},"end":{"line":32,"column":22,"offset":920},"indent":[]}}],"position":{"start":{"line":32,"column":19,"offset":917},"end":{"line":32,"column":25,"offset":923},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"page to make a new user","position":{"start":{"line":32,"column":28,"offset":926},"end":{"line":32,"column":51,"offset":949},"indent":[]}}],"position":{"start":{"line":32,"column":28,"offset":926},"end":{"line":32,"column":55,"offset":953},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":899},"end":{"line":32,"column":57,"offset":955},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"/users/1/edit","position":{"start":{"line":33,"column":3,"offset":958},"end":{"line":33,"column":16,"offset":971},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":958},"end":{"line":33,"column":16,"offset":971},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"edit","position":{"start":{"line":33,"column":19,"offset":974},"end":{"line":33,"column":23,"offset":978},"indent":[]}}],"position":{"start":{"line":33,"column":19,"offset":974},"end":{"line":33,"column":25,"offset":980},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"page to edit user with id 1","position":{"start":{"line":33,"column":28,"offset":983},"end":{"line":33,"column":55,"offset":1010},"indent":[]}}],"position":{"start":{"line":33,"column":28,"offset":983},"end":{"line":33,"column":55,"offset":1010},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":956},"end":{"line":33,"column":57,"offset":1012},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":671},"end":{"line":33,"column":57,"offset":1012},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the ","position":{"start":{"line":35,"column":1,"offset":1014},"end":{"line":35,"column":8,"offset":1021},"indent":[]}},{"type":"inlineCode","value":"config/routes.rb","position":{"start":{"line":35,"column":8,"offset":1021},"end":{"line":35,"column":26,"offset":1039},"indent":[]}},{"type":"text","value":", this comes under ","position":{"start":{"line":35,"column":26,"offset":1039},"end":{"line":35,"column":45,"offset":1058},"indent":[]}},{"type":"inlineCode","value":"resources :users","position":{"start":{"line":35,"column":45,"offset":1058},"end":{"line":35,"column":63,"offset":1076},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1014},"end":{"line":35,"column":63,"offset":1076},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"MVC in action","position":{"start":{"line":37,"column":4,"offset":1081},"end":{"line":37,"column":17,"offset":1094},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1078},"end":{"line":37,"column":17,"offset":1094},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At first, the users are fetched from the Rails Router as step (1) which finds the resource in the controller and correct action to take as step (2).","position":{"start":{"line":39,"column":1,"offset":1096},"end":{"line":39,"column":149,"offset":1244},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1096},"end":{"line":39,"column":149,"offset":1244},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"class UsersController < ApplicationController\n  before_action :set_user, only: %i[ show edit update destroy ]\n\n  # GET /users or /users.json\n  def index\n    @users = User.all\n  end\n\n  # GET /users/1 or /users/1.json\n  def show\n  end\n\n  # GET /users/new\n  def new\n    @user = User.new\n  end\n\n  # GET /users/1/edit\n  def edit\n  end\n\n  # POST /users or /users.json\n  def create\n    @user = User.new(user_params)\n\n    respond_to do |format|\n      if @user.save\n        format.html { redirect_to @user, notice: \"User was successfully created.\" }\n        format.json { render :show, status: :created, location: @user }\n      else\n        format.html { render :new, status: :unprocessable_entity }\n        format.json { render json: @user.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # PATCH/PUT /users/1 or /users/1.json\n  def update\n    respond_to do |format|\n      if @user.update(user_params)\n        format.html { redirect_to @user, notice: \"User was successfully updated.\" }\n        format.json { render :show, status: :ok, location: @user }\n      else\n        format.html { render :edit, status: :unprocessable_entity }\n        format.json { render json: @user.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # DELETE /users/1 or /users/1.json\n  def destroy\n    @user.destroy\n    respond_to do |format|\n      format.html { redirect_to users_url, notice: \"User was successfully destroyed.\" }\n      format.json { head :no_content }\n    end\n  end\n\n  private\n    # Use callbacks to share common setup or constraints between actions.\n    def set_user\n      @user = User.find(params[:id])\n    end\n\n    # Only allow a list of trusted parameters through.\n    def user_params\n      params.require(:user).permit(:name, :email)\n    end\nend","position":{"start":{"line":41,"column":1,"offset":1246},"end":{"line":111,"column":4,"offset":3025},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For the ","position":{"start":{"line":113,"column":1,"offset":3027},"end":{"line":113,"column":9,"offset":3035},"indent":[]}},{"type":"inlineCode","value":"index","position":{"start":{"line":113,"column":9,"offset":3035},"end":{"line":113,"column":16,"offset":3042},"indent":[]}},{"type":"text","value":" route, we get an instance variable assigned:","position":{"start":{"line":113,"column":16,"offset":3042},"end":{"line":113,"column":61,"offset":3087},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":3027},"end":{"line":113,"column":61,"offset":3087},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"# GET /users or /users.json\ndef index\n  @users = User.all\nend","position":{"start":{"line":115,"column":1,"offset":3089},"end":{"line":120,"column":4,"offset":3160},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Step (3) is to talk to the ","position":{"start":{"line":122,"column":1,"offset":3162},"end":{"line":122,"column":28,"offset":3189},"indent":[]}},{"type":"inlineCode","value":"User","position":{"start":{"line":122,"column":28,"offset":3189},"end":{"line":122,"column":34,"offset":3195},"indent":[]}},{"type":"text","value":" model, which you will notice is empty (but inherits all the functionality from ","position":{"start":{"line":122,"column":34,"offset":3195},"end":{"line":122,"column":114,"offset":3275},"indent":[]}},{"type":"inlineCode","value":"ApplicationRecord","position":{"start":{"line":122,"column":114,"offset":3275},"end":{"line":122,"column":133,"offset":3294},"indent":[]}},{"type":"text","value":"):","position":{"start":{"line":122,"column":133,"offset":3294},"end":{"line":122,"column":135,"offset":3296},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":3162},"end":{"line":122,"column":135,"offset":3296},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"class User < ApplicationRecord\nend","position":{"start":{"line":124,"column":1,"offset":3298},"end":{"line":127,"column":4,"offset":3342},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Step (4), the user model will then talk to the database.\nStep (5), the result is passed back to the controller.\nStep (6) is passing that data to the view.\nStep (7) returns HTML to the controller.\nStep (8) is the controller returning that HTML to the browser.","position":{"start":{"line":129,"column":1,"offset":3344},"end":{"line":133,"column":63,"offset":3602},"indent":[1,1,1,1]}}],"position":{"start":{"line":129,"column":1,"offset":3344},"end":{"line":133,"column":63,"offset":3602},"indent":[1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"He admits that step (8) may not happen - the view may be returned directly to the user. He likes the think the controller is in between.","position":{"start":{"line":135,"column":3,"offset":3606},"end":{"line":135,"column":139,"offset":3742},"indent":[]}}],"position":{"start":{"line":135,"column":3,"offset":3606},"end":{"line":135,"column":139,"offset":3742},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":3604},"end":{"line":135,"column":139,"offset":3742},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"It is conventional in Rails for the controller to be plural.","position":{"start":{"line":137,"column":3,"offset":3746},"end":{"line":137,"column":63,"offset":3806},"indent":[]}}],"position":{"start":{"line":137,"column":3,"offset":3746},"end":{"line":137,"column":63,"offset":3806},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":3744},"end":{"line":137,"column":63,"offset":3806},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Just know, that the set of URLs that Rails supplies is known as a ","position":{"start":{"line":139,"column":1,"offset":3808},"end":{"line":139,"column":67,"offset":3874},"indent":[]}},{"type":"inlineCode","value":"resource","position":{"start":{"line":139,"column":67,"offset":3874},"end":{"line":139,"column":77,"offset":3884},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":139,"column":77,"offset":3884},"end":{"line":139,"column":78,"offset":3885},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":3808},"end":{"line":139,"column":78,"offset":3885},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The weaknesses of our current Users resource","position":{"start":{"line":141,"column":4,"offset":3890},"end":{"line":141,"column":48,"offset":3934},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":3887},"end":{"line":141,"column":48,"offset":3934},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No validation.","position":{"start":{"line":143,"column":4,"offset":3939},"end":{"line":143,"column":18,"offset":3953},"indent":[]}}],"position":{"start":{"line":143,"column":4,"offset":3939},"end":{"line":143,"column":18,"offset":3953},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":3936},"end":{"line":143,"column":18,"offset":3953},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No authentication (and no way to prevent operations).","position":{"start":{"line":144,"column":4,"offset":3957},"end":{"line":144,"column":57,"offset":4010},"indent":[]}}],"position":{"start":{"line":144,"column":4,"offset":3957},"end":{"line":144,"column":57,"offset":4010},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":3954},"end":{"line":144,"column":57,"offset":4010},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No tests.","position":{"start":{"line":145,"column":4,"offset":4014},"end":{"line":145,"column":13,"offset":4023},"indent":[]}}],"position":{"start":{"line":145,"column":4,"offset":4014},"end":{"line":145,"column":13,"offset":4023},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":4011},"end":{"line":145,"column":13,"offset":4023},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No style or layout.","position":{"start":{"line":146,"column":4,"offset":4027},"end":{"line":146,"column":23,"offset":4046},"indent":[]}}],"position":{"start":{"line":146,"column":4,"offset":4027},"end":{"line":146,"column":23,"offset":4046},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":4024},"end":{"line":146,"column":23,"offset":4046},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No real understanding. If you understand the scaffold codem you probably shouldn't do this course/book.","position":{"start":{"line":147,"column":4,"offset":4050},"end":{"line":147,"column":107,"offset":4153},"indent":[]}}],"position":{"start":{"line":147,"column":4,"offset":4050},"end":{"line":147,"column":107,"offset":4153},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":4047},"end":{"line":147,"column":107,"offset":4153},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":3936},"end":{"line":147,"column":107,"offset":4153},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding the Microposts","position":{"start":{"line":149,"column":4,"offset":4158},"end":{"line":149,"column":25,"offset":4179},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":4155},"end":{"line":149,"column":25,"offset":4179},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We will use the scaffold again to create the microposts. Something worth noting here is that we are not going to use the \"foreign key\" type connection.","position":{"start":{"line":151,"column":1,"offset":4181},"end":{"line":151,"column":152,"offset":4332},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":4181},"end":{"line":151,"column":152,"offset":4332},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"rails generate scaffold Micropost content:text user_id:integer\n# again, run the migration\nrails db:migrate","position":{"start":{"line":153,"column":1,"offset":4334},"end":{"line":157,"column":4,"offset":4449},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note, if you mess up the initial generate, you can roll things back like so:","position":{"start":{"line":159,"column":1,"offset":4451},"end":{"line":159,"column":77,"offset":4527},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":4451},"end":{"line":159,"column":77,"offset":4527},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"# If you migrated the db\nrails db:migrate\n# Destory scaffold files\nrails destroy scaffold Micropost","position":{"start":{"line":161,"column":1,"offset":4529},"end":{"line":166,"column":4,"offset":4638},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We want the content to be short (140 chars). To do this, we can do this in the ","position":{"start":{"line":168,"column":1,"offset":4640},"end":{"line":168,"column":80,"offset":4719},"indent":[]}},{"type":"inlineCode","value":"Micropost","position":{"start":{"line":168,"column":80,"offset":4719},"end":{"line":168,"column":91,"offset":4730},"indent":[]}},{"type":"text","value":" model:","position":{"start":{"line":168,"column":91,"offset":4730},"end":{"line":168,"column":98,"offset":4737},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":4640},"end":{"line":168,"column":98,"offset":4737},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"class Micropost < ApplicationRecord\n  validates :content, length: { maximum: 140 }\nend","position":{"start":{"line":170,"column":1,"offset":4739},"end":{"line":174,"column":4,"offset":4835},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"A user \"has_many\" microposts","position":{"start":{"line":176,"column":4,"offset":4840},"end":{"line":176,"column":32,"offset":4868},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":4837},"end":{"line":176,"column":32,"offset":4868},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To associate, we head to the User model and let is know is has many microposts:","position":{"start":{"line":178,"column":1,"offset":4870},"end":{"line":178,"column":80,"offset":4949},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":4870},"end":{"line":178,"column":80,"offset":4949},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"# app/models/user.rb\nclass User < ApplicationRecord\n  has_many :microposts\nend\n\n# app/models/micropost.rb\nclass Micropost < ApplicationRecord\n  belongs_to :user\n  validates :content, length: { maximum: 140 }\nend","position":{"start":{"line":180,"column":1,"offset":4951},"end":{"line":191,"column":4,"offset":5172},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Later on, we can express that relationship through the web interface. For now, we will see how it works on the Rails Console.","position":{"start":{"line":193,"column":1,"offset":5174},"end":{"line":193,"column":126,"offset":5299},"indent":[]}}],"position":{"start":{"line":193,"column":1,"offset":5174},"end":{"line":193,"column":126,"offset":5299},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This can be accessed with ","position":{"start":{"line":195,"column":1,"offset":5301},"end":{"line":195,"column":27,"offset":5327},"indent":[]}},{"type":"inlineCode","value":"rails console","position":{"start":{"line":195,"column":27,"offset":5327},"end":{"line":195,"column":42,"offset":5342},"indent":[]}},{"type":"text","value":" (or ","position":{"start":{"line":195,"column":42,"offset":5342},"end":{"line":195,"column":47,"offset":5347},"indent":[]}},{"type":"inlineCode","value":"rails c","position":{"start":{"line":195,"column":47,"offset":5347},"end":{"line":195,"column":56,"offset":5356},"indent":[]}},{"type":"text","value":" for short).","position":{"start":{"line":195,"column":56,"offset":5356},"end":{"line":195,"column":68,"offset":5368},"indent":[]}}],"position":{"start":{"line":195,"column":1,"offset":5301},"end":{"line":195,"column":68,"offset":5368},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can find the first user in the console with ","position":{"start":{"line":197,"column":1,"offset":5370},"end":{"line":197,"column":48,"offset":5417},"indent":[]}},{"type":"inlineCode","value":"User.first","position":{"start":{"line":197,"column":48,"offset":5417},"end":{"line":197,"column":60,"offset":5429},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":197,"column":60,"offset":5429},"end":{"line":197,"column":61,"offset":5430},"indent":[]}}],"position":{"start":{"line":197,"column":1,"offset":5370},"end":{"line":197,"column":61,"offset":5430},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Note: you can assign the previous result with ","position":{"start":{"line":199,"column":3,"offset":5434},"end":{"line":199,"column":49,"offset":5480},"indent":[]}},{"type":"inlineCode","value":"_","position":{"start":{"line":199,"column":49,"offset":5480},"end":{"line":199,"column":52,"offset":5483},"indent":[]}},{"type":"text","value":" so ","position":{"start":{"line":199,"column":52,"offset":5483},"end":{"line":199,"column":56,"offset":5487},"indent":[]}},{"type":"inlineCode","value":"first_user = _","position":{"start":{"line":199,"column":56,"offset":5487},"end":{"line":199,"column":72,"offset":5503},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":199,"column":72,"offset":5503},"end":{"line":199,"column":73,"offset":5504},"indent":[]}}],"position":{"start":{"line":199,"column":3,"offset":5434},"end":{"line":199,"column":73,"offset":5504},"indent":[]}}],"position":{"start":{"line":199,"column":1,"offset":5432},"end":{"line":199,"column":73,"offset":5504},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"irb(main):001:0> User.first\n   (0.6ms)  SELECT sqlite_version(*)\n  User Load (0.1ms)  SELECT \"users\".* FROM \"users\" ORDER BY \"users\".\"id\" ASC LIMIT ?  [[\"LIMIT\", 1]]\n=> #<User id: 1, name: \"Dennis O'Keeffe\", email: \"hello@dennisokeeffe.com\", created_at: \"2021-02-02 04:36:03.016350000 +0000\", updated_at: \"2021-02-02 04:36:41.666319000 +0000\">\nirb(main):002:0> first_user = _\n=> #<User id: 1, name: \"Dennis O'Keeffe\", email: \"hello@dennisokeeffe.com\", created_at: \"2021-02-02 04:36:03.016350000 +0000\", updated_at: \"2021-02-02 04:36:41.666319000 +0000\">\nirb(main):008:0> first_user.microposts\n  Micropost Load (0.2ms)  SELECT \"microposts\".* FROM \"microposts\" WHERE \"microposts\".\"user_id\" = ? /* loading for inspect */ LIMIT ?  [[\"user_id\", 1], [\"LIMIT\", 11]]\n=> #<ActiveRecord::Associations::CollectionProxy [#<Micropost id: 1, content: \"Hello, world!\", user_id: 1, created_at: \"2021-02-02 05:19:30.508188000 +0000\", updated_at: \"2021-02-02 05:19:30.508188000 +0000\">]>\nirb(main):010:0> first_micropost = first_user.microposts.first\n  Micropost Load (0.2ms)  SELECT \"microposts\".* FROM \"microposts\" WHERE \"microposts\".\"user_id\" = ? ORDER BY \"microposts\".\"id\" ASC LIMIT ?  [[\"user_id\", 1], [\"LIMIT\", 1]]\n=> #<Micropost id: 1, content: \"Hello, world!\", user_id: 1, created_at: \"2021-02-02 05:19:30.508188000 +0000\", updated_at: \"2021-02-02 05:19:30.508188000 +0000\">\nirb(main):011:0> first_micropost.user\n=> #<User id: 1, name: \"Dennis O'Keeffe\", email: \"hello@dennisokeeffe.com\", created_at: \"2021-02-02 04:36:03.016350000 +0000\", updated_at: \"2021-02-02 04:36:41.666319000 +0000\">","position":{"start":{"line":201,"column":1,"offset":5506},"end":{"line":216,"column":4,"offset":7096},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As a final input (back in regards to our forms to create a new micropost), you can also validate that fields have a value present using ","position":{"start":{"line":218,"column":1,"offset":7098},"end":{"line":218,"column":137,"offset":7234},"indent":[]}},{"type":"inlineCode","value":"presence","position":{"start":{"line":218,"column":137,"offset":7234},"end":{"line":218,"column":147,"offset":7244},"indent":[]}},{"type":"text","value":" in the data model:","position":{"start":{"line":218,"column":147,"offset":7244},"end":{"line":218,"column":166,"offset":7263},"indent":[]}}],"position":{"start":{"line":218,"column":1,"offset":7098},"end":{"line":218,"column":166,"offset":7263},"indent":[]}},{"type":"code","lang":"rb","meta":null,"value":"class Micropost < ApplicationRecord\n  belongs_to :user\n  validates :content, length: { maximum: 140 },\n                      presence: true\nend","position":{"start":{"line":220,"column":1,"offset":7265},"end":{"line":226,"column":4,"offset":7418},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Inheritance hierarchies","position":{"start":{"line":228,"column":4,"offset":7423},"end":{"line":228,"column":27,"offset":7446},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":7420},"end":{"line":228,"column":27,"offset":7446},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is mainly for those with backgrounds in OOP.","position":{"start":{"line":230,"column":1,"offset":7448},"end":{"line":230,"column":50,"offset":7497},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":7448},"end":{"line":230,"column":50,"offset":7497},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This section just speaks to the inheritance heirarchy for the controllers, models, etc.","position":{"start":{"line":232,"column":1,"offset":7499},"end":{"line":232,"column":88,"offset":7586},"indent":[]}}],"position":{"start":{"line":232,"column":1,"offset":7499},"end":{"line":232,"column":88,"offset":7586},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the ","position":{"start":{"line":234,"column":1,"offset":7588},"end":{"line":234,"column":9,"offset":7596},"indent":[]}},{"type":"inlineCode","value":"ApplicationController","position":{"start":{"line":234,"column":9,"offset":7596},"end":{"line":234,"column":32,"offset":7619},"indent":[]}},{"type":"text","value":" that everything else inherits from, it is due to the convenience of adding things to the ","position":{"start":{"line":234,"column":32,"offset":7619},"end":{"line":234,"column":122,"offset":7709},"indent":[]}},{"type":"inlineCode","value":"ApplicationController","position":{"start":{"line":234,"column":122,"offset":7709},"end":{"line":234,"column":145,"offset":7732},"indent":[]}},{"type":"text","value":" that apply to all the other controllers in the application.","position":{"start":{"line":234,"column":145,"offset":7732},"end":{"line":234,"column":205,"offset":7792},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":7588},"end":{"line":234,"column":205,"offset":7792},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":237,"column":1,"offset":7795},"end":{"line":237,"column":31,"offset":7825},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":237,"column":31,"offset":7825}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"toy-app\"\n    }}>{`Toy App`}</h1>\n    <h2 {...{\n      \"id\": \"the-users-resource\"\n    }}>{`The Users Resource`}</h2>\n    <p>{`We can scaffold the users resource with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`rails generate scaffold User name:string email:string\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: There is no need to create a parameter for `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` - it is created for you.`}</p>\n    </blockquote>\n    <p>{`Generally speaking, it is not a great idea to get too deep into scaffolding.`}</p>\n    <p>{`That generation will create a migration in `}<inlineCode parentName=\"p\">{`db/migrate`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`In Rails 6, you should use `}<inlineCode parentName=\"p\">{`rails`}</inlineCode>{` in place of `}<inlineCode parentName=\"p\">{`rake`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <p>{`That generation of the `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{` will create the routing for the following:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`URL`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Action`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Purpose`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`/users`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`index`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`page to list all users`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`/users/1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`show`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`page to show user with id 1`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`/users/new`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`new`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`page to make a new user`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`/users/1/edit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`edit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`page to edit user with id 1`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`config/routes.rb`}</inlineCode>{`, this comes under `}<inlineCode parentName=\"p\">{`resources :users`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"mvc-in-action\"\n    }}>{`MVC in action`}</h2>\n    <p>{`At first, the users are fetched from the Rails Router as step (1) which finds the resource in the controller and correct action to take as step (2).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class UsersController < ApplicationController\n  before_action :set_user, only: %i[ show edit update destroy ]\n\n  # GET /users or /users.json\n  def index\n    @users = User.all\n  end\n\n  # GET /users/1 or /users/1.json\n  def show\n  end\n\n  # GET /users/new\n  def new\n    @user = User.new\n  end\n\n  # GET /users/1/edit\n  def edit\n  end\n\n  # POST /users or /users.json\n  def create\n    @user = User.new(user_params)\n\n    respond_to do |format|\n      if @user.save\n        format.html { redirect_to @user, notice: \"User was successfully created.\" }\n        format.json { render :show, status: :created, location: @user }\n      else\n        format.html { render :new, status: :unprocessable_entity }\n        format.json { render json: @user.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # PATCH/PUT /users/1 or /users/1.json\n  def update\n    respond_to do |format|\n      if @user.update(user_params)\n        format.html { redirect_to @user, notice: \"User was successfully updated.\" }\n        format.json { render :show, status: :ok, location: @user }\n      else\n        format.html { render :edit, status: :unprocessable_entity }\n        format.json { render json: @user.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # DELETE /users/1 or /users/1.json\n  def destroy\n    @user.destroy\n    respond_to do |format|\n      format.html { redirect_to users_url, notice: \"User was successfully destroyed.\" }\n      format.json { head :no_content }\n    end\n  end\n\n  private\n    # Use callbacks to share common setup or constraints between actions.\n    def set_user\n      @user = User.find(params[:id])\n    end\n\n    # Only allow a list of trusted parameters through.\n    def user_params\n      params.require(:user).permit(:name, :email)\n    end\nend\n`}</code></pre>\n    <p>{`For the `}<inlineCode parentName=\"p\">{`index`}</inlineCode>{` route, we get an instance variable assigned:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`# GET /users or /users.json\ndef index\n  @users = User.all\nend\n`}</code></pre>\n    <p>{`Step (3) is to talk to the `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{` model, which you will notice is empty (but inherits all the functionality from `}<inlineCode parentName=\"p\">{`ApplicationRecord`}</inlineCode>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class User < ApplicationRecord\nend\n`}</code></pre>\n    <p>{`Step (4), the user model will then talk to the database.\nStep (5), the result is passed back to the controller.\nStep (6) is passing that data to the view.\nStep (7) returns HTML to the controller.\nStep (8) is the controller returning that HTML to the browser.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`He admits that step (8) may not happen - the view may be returned directly to the user. He likes the think the controller is in between.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`It is conventional in Rails for the controller to be plural.`}</p>\n    </blockquote>\n    <p>{`Just know, that the set of URLs that Rails supplies is known as a `}<inlineCode parentName=\"p\">{`resource`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"the-weaknesses-of-our-current-users-resource\"\n    }}>{`The weaknesses of our current Users resource`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`No validation.`}</li>\n      <li parentName=\"ol\">{`No authentication (and no way to prevent operations).`}</li>\n      <li parentName=\"ol\">{`No tests.`}</li>\n      <li parentName=\"ol\">{`No style or layout.`}</li>\n      <li parentName=\"ol\">{`No real understanding. If you understand the scaffold codem you probably shouldn't do this course/book.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"adding-the-microposts\"\n    }}>{`Adding the Microposts`}</h2>\n    <p>{`We will use the scaffold again to create the microposts. Something worth noting here is that we are not going to use the \"foreign key\" type connection.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`rails generate scaffold Micropost content:text user_id:integer\n# again, run the migration\nrails db:migrate\n`}</code></pre>\n    <p>{`Note, if you mess up the initial generate, you can roll things back like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`# If you migrated the db\nrails db:migrate\n# Destory scaffold files\nrails destroy scaffold Micropost\n`}</code></pre>\n    <p>{`We want the content to be short (140 chars). To do this, we can do this in the `}<inlineCode parentName=\"p\">{`Micropost`}</inlineCode>{` model:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class Micropost < ApplicationRecord\n  validates :content, length: { maximum: 140 }\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"a-user-has_many-microposts\"\n    }}>{`A user \"has_many\" microposts`}</h2>\n    <p>{`To associate, we head to the User model and let is know is has many microposts:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`# app/models/user.rb\nclass User < ApplicationRecord\n  has_many :microposts\nend\n\n# app/models/micropost.rb\nclass Micropost < ApplicationRecord\n  belongs_to :user\n  validates :content, length: { maximum: 140 }\nend\n`}</code></pre>\n    <p>{`Later on, we can express that relationship through the web interface. For now, we will see how it works on the Rails Console.`}</p>\n    <p>{`This can be accessed with `}<inlineCode parentName=\"p\">{`rails console`}</inlineCode>{` (or `}<inlineCode parentName=\"p\">{`rails c`}</inlineCode>{` for short).`}</p>\n    <p>{`We can find the first user in the console with `}<inlineCode parentName=\"p\">{`User.first`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: you can assign the previous result with `}<inlineCode parentName=\"p\">{`_`}</inlineCode>{` so `}<inlineCode parentName=\"p\">{`first_user = _`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`irb(main):001:0> User.first\n   (0.6ms)  SELECT sqlite_version(*)\n  User Load (0.1ms)  SELECT \"users\".* FROM \"users\" ORDER BY \"users\".\"id\" ASC LIMIT ?  [[\"LIMIT\", 1]]\n=> #<User id: 1, name: \"Dennis O'Keeffe\", email: \"hello@dennisokeeffe.com\", created_at: \"2021-02-02 04:36:03.016350000 +0000\", updated_at: \"2021-02-02 04:36:41.666319000 +0000\">\nirb(main):002:0> first_user = _\n=> #<User id: 1, name: \"Dennis O'Keeffe\", email: \"hello@dennisokeeffe.com\", created_at: \"2021-02-02 04:36:03.016350000 +0000\", updated_at: \"2021-02-02 04:36:41.666319000 +0000\">\nirb(main):008:0> first_user.microposts\n  Micropost Load (0.2ms)  SELECT \"microposts\".* FROM \"microposts\" WHERE \"microposts\".\"user_id\" = ? /* loading for inspect */ LIMIT ?  [[\"user_id\", 1], [\"LIMIT\", 11]]\n=> #<ActiveRecord::Associations::CollectionProxy [#<Micropost id: 1, content: \"Hello, world!\", user_id: 1, created_at: \"2021-02-02 05:19:30.508188000 +0000\", updated_at: \"2021-02-02 05:19:30.508188000 +0000\">]>\nirb(main):010:0> first_micropost = first_user.microposts.first\n  Micropost Load (0.2ms)  SELECT \"microposts\".* FROM \"microposts\" WHERE \"microposts\".\"user_id\" = ? ORDER BY \"microposts\".\"id\" ASC LIMIT ?  [[\"user_id\", 1], [\"LIMIT\", 1]]\n=> #<Micropost id: 1, content: \"Hello, world!\", user_id: 1, created_at: \"2021-02-02 05:19:30.508188000 +0000\", updated_at: \"2021-02-02 05:19:30.508188000 +0000\">\nirb(main):011:0> first_micropost.user\n=> #<User id: 1, name: \"Dennis O'Keeffe\", email: \"hello@dennisokeeffe.com\", created_at: \"2021-02-02 04:36:03.016350000 +0000\", updated_at: \"2021-02-02 04:36:41.666319000 +0000\">\n`}</code></pre>\n    <p>{`As a final input (back in regards to our forms to create a new micropost), you can also validate that fields have a value present using `}<inlineCode parentName=\"p\">{`presence`}</inlineCode>{` in the data model:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rb\"\n      }}>{`class Micropost < ApplicationRecord\n  belongs_to :user\n  validates :content, length: { maximum: 140 },\n                      presence: true\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"inheritance-hierarchies\"\n    }}>{`Inheritance hierarchies`}</h2>\n    <p>{`This is mainly for those with backgrounds in OOP.`}</p>\n    <p>{`This section just speaks to the inheritance heirarchy for the controllers, models, etc.`}</p>\n    <p>{`For the `}<inlineCode parentName=\"p\">{`ApplicationController`}</inlineCode>{` that everything else inherits from, it is due to the convenience of adding things to the `}<inlineCode parentName=\"p\">{`ApplicationController`}</inlineCode>{` that apply to all the other controllers in the application.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}