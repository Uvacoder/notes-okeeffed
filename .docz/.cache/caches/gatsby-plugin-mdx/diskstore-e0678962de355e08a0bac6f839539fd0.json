{"expireTime":9007200852878452000,"key":"gatsby-plugin-mdx-entire-payload-f3021d6661413986b4d5c9359358dd0a-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Mediator","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":11,"offset":177},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":11,"offset":177},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Mediator is a behavioural design pattern which helps when there are many objects communicating with each other.","position":{"start":{"line":10,"column":1,"offset":179},"end":{"line":10,"column":112,"offset":290},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":179},"end":{"line":10,"column":112,"offset":290},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Mediator itself is an object that encapsulates how one or more objects interact with each other. It controls how these object communication and resticts dependencies required to manage.","position":{"start":{"line":12,"column":1,"offset":292},"end":{"line":12,"column":190,"offset":481},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":292},"end":{"line":12,"column":190,"offset":481},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Components","position":{"start":{"line":14,"column":4,"offset":486},"end":{"line":14,"column":14,"offset":496},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":483},"end":{"line":14,"column":14,"offset":496},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Mediator: Defines interface for communication between ","position":{"start":{"line":16,"column":3,"offset":500},"end":{"line":16,"column":57,"offset":554},"indent":[]}},{"type":"inlineCode","value":"Colleague","position":{"start":{"line":16,"column":57,"offset":554},"end":{"line":16,"column":68,"offset":565},"indent":[]}},{"type":"text","value":" objects.","position":{"start":{"line":16,"column":68,"offset":565},"end":{"line":16,"column":77,"offset":574},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":500},"end":{"line":16,"column":77,"offset":574},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":498},"end":{"line":16,"column":77,"offset":574},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ConcreteMediator: Implements ","position":{"start":{"line":17,"column":3,"offset":577},"end":{"line":17,"column":32,"offset":606},"indent":[]}},{"type":"inlineCode","value":"Mediator","position":{"start":{"line":17,"column":32,"offset":606},"end":{"line":17,"column":42,"offset":616},"indent":[]}},{"type":"text","value":", has awareness of ","position":{"start":{"line":17,"column":42,"offset":616},"end":{"line":17,"column":61,"offset":635},"indent":[]}},{"type":"inlineCode","value":"colleagues","position":{"start":{"line":17,"column":61,"offset":635},"end":{"line":17,"column":73,"offset":647},"indent":[]}},{"type":"text","value":" and facilitates communication between.","position":{"start":{"line":17,"column":73,"offset":647},"end":{"line":17,"column":112,"offset":686},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":577},"end":{"line":17,"column":112,"offset":686},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":575},"end":{"line":17,"column":112,"offset":686},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Colleague: Defines interface for communication with other ","position":{"start":{"line":18,"column":3,"offset":689},"end":{"line":18,"column":61,"offset":747},"indent":[]}},{"type":"inlineCode","value":"Colleagues","position":{"start":{"line":18,"column":61,"offset":747},"end":{"line":18,"column":73,"offset":759},"indent":[]}},{"type":"text","value":" through the ","position":{"start":{"line":18,"column":73,"offset":759},"end":{"line":18,"column":86,"offset":772},"indent":[]}},{"type":"inlineCode","value":"Mediator","position":{"start":{"line":18,"column":86,"offset":772},"end":{"line":18,"column":96,"offset":782},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":18,"column":96,"offset":782},"end":{"line":18,"column":97,"offset":783},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":689},"end":{"line":18,"column":97,"offset":783},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":687},"end":{"line":18,"column":97,"offset":783},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ConcreteColleague: Implements the ","position":{"start":{"line":19,"column":3,"offset":786},"end":{"line":19,"column":37,"offset":820},"indent":[]}},{"type":"inlineCode","value":"Colleague","position":{"start":{"line":19,"column":37,"offset":820},"end":{"line":19,"column":48,"offset":831},"indent":[]}},{"type":"text","value":" interface an communicates to other colleagues through its ","position":{"start":{"line":19,"column":48,"offset":831},"end":{"line":19,"column":107,"offset":890},"indent":[]}},{"type":"inlineCode","value":"Mediator","position":{"start":{"line":19,"column":107,"offset":890},"end":{"line":19,"column":117,"offset":900},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":19,"column":117,"offset":900},"end":{"line":19,"column":118,"offset":901},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":786},"end":{"line":19,"column":118,"offset":901},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":784},"end":{"line":19,"column":118,"offset":901},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":498},"end":{"line":19,"column":118,"offset":901},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":21,"column":4,"offset":906},"end":{"line":21,"column":11,"offset":913},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":903},"end":{"line":21,"column":11,"offset":913},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, we will have a ","position":{"start":{"line":23,"column":1,"offset":915},"end":{"line":23,"column":33,"offset":947},"indent":[]}},{"type":"inlineCode","value":"ConcreteMediator","position":{"start":{"line":23,"column":33,"offset":947},"end":{"line":23,"column":51,"offset":965},"indent":[]}},{"type":"text","value":" that will ensure certain ","position":{"start":{"line":23,"column":51,"offset":965},"end":{"line":23,"column":77,"offset":991},"indent":[]}},{"type":"inlineCode","value":"Participants","position":{"start":{"line":23,"column":77,"offset":991},"end":{"line":23,"column":91,"offset":1005},"indent":[]}},{"type":"text","value":" receive a message based on the ","position":{"start":{"line":23,"column":91,"offset":1005},"end":{"line":23,"column":123,"offset":1037},"indent":[]}},{"type":"inlineCode","value":"Participant","position":{"start":{"line":23,"column":123,"offset":1037},"end":{"line":23,"column":136,"offset":1050},"indent":[]}},{"type":"text","value":" sending the ","position":{"start":{"line":23,"column":136,"offset":1050},"end":{"line":23,"column":149,"offset":1063},"indent":[]}},{"type":"inlineCode","value":"Broadcast","position":{"start":{"line":23,"column":149,"offset":1063},"end":{"line":23,"column":160,"offset":1074},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":23,"column":160,"offset":1074},"end":{"line":23,"column":161,"offset":1075},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":915},"end":{"line":23,"column":161,"offset":1075},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We will use the mediator to ensure messages sent from the ","position":{"start":{"line":25,"column":1,"offset":1077},"end":{"line":25,"column":59,"offset":1135},"indent":[]}},{"type":"inlineCode","value":"FirstParticipant","position":{"start":{"line":25,"column":59,"offset":1135},"end":{"line":25,"column":77,"offset":1153},"indent":[]}},{"type":"text","value":" is broadcasted to both ","position":{"start":{"line":25,"column":77,"offset":1153},"end":{"line":25,"column":101,"offset":1177},"indent":[]}},{"type":"inlineCode","value":"FirstParticipant","position":{"start":{"line":25,"column":101,"offset":1177},"end":{"line":25,"column":119,"offset":1195},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":25,"column":119,"offset":1195},"end":{"line":25,"column":124,"offset":1200},"indent":[]}},{"type":"inlineCode","value":"SecondParticipant","position":{"start":{"line":25,"column":124,"offset":1200},"end":{"line":25,"column":143,"offset":1219},"indent":[]}},{"type":"text","value":" while messages from the ","position":{"start":{"line":25,"column":143,"offset":1219},"end":{"line":25,"column":168,"offset":1244},"indent":[]}},{"type":"inlineCode","value":"SecondParticipant","position":{"start":{"line":25,"column":168,"offset":1244},"end":{"line":25,"column":187,"offset":1263},"indent":[]}},{"type":"text","value":" are only reached by the ","position":{"start":{"line":25,"column":187,"offset":1263},"end":{"line":25,"column":212,"offset":1288},"indent":[]}},{"type":"inlineCode","value":"FirstPartiicpant","position":{"start":{"line":25,"column":212,"offset":1288},"end":{"line":25,"column":230,"offset":1306},"indent":[]}},{"type":"text","value":" and not itself.","position":{"start":{"line":25,"column":230,"offset":1306},"end":{"line":25,"column":246,"offset":1322},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1077},"end":{"line":25,"column":246,"offset":1322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The abstract ","position":{"start":{"line":27,"column":1,"offset":1324},"end":{"line":27,"column":14,"offset":1337},"indent":[]}},{"type":"inlineCode","value":"Participant","position":{"start":{"line":27,"column":14,"offset":1337},"end":{"line":27,"column":27,"offset":1350},"indent":[]}},{"type":"text","value":" class in this example is the ","position":{"start":{"line":27,"column":27,"offset":1350},"end":{"line":27,"column":57,"offset":1380},"indent":[]}},{"type":"inlineCode","value":"Colleague","position":{"start":{"line":27,"column":57,"offset":1380},"end":{"line":27,"column":68,"offset":1391},"indent":[]}},{"type":"text","value":" and the subclasses are the ","position":{"start":{"line":27,"column":68,"offset":1391},"end":{"line":27,"column":96,"offset":1419},"indent":[]}},{"type":"inlineCode","value":"ConcreteColleague","position":{"start":{"line":27,"column":96,"offset":1419},"end":{"line":27,"column":115,"offset":1438},"indent":[]}},{"type":"text","value":" classes.","position":{"start":{"line":27,"column":115,"offset":1438},"end":{"line":27,"column":124,"offset":1447},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1324},"end":{"line":27,"column":124,"offset":1447},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"interface Mediator {\n  broadcast(msg: String, sender: Participant): void;\n}\n\nclass ConcreteMediator implements Mediator {\n  public firstParticipant: Participant;\n  public secondParticipant: Participant;\n\n  broadcast(msg: String, sender: Participant): void {\n    if (sender === this.firstParticipant) {\n      this.firstParticipant.receiveMsg(msg);\n      this.secondParticipant.receiveMsg(msg);\n    }\n\n    if (sender === this.secondParticipant) {\n      this.firstParticipant.receiveMsg(msg);\n    }\n  }\n}\n\nabstract class Participant {\n  public mediator: Mediator;\n\n  constructor(mediator: Mediator) {\n    this.mediator = mediator;\n  }\n\n  broadcast(msg: String): void {\n    this.mediator.broadcast(msg, this);\n  }\n\n  receiveMsg(msg: String): void {\n    console.log('recieveMsg:', msg);\n  }\n}\n\nclass FirstParticipant extends Participant {\n  constructor(mediator: Mediator) {\n    super(mediator);\n  }\n\n  broadcast(msg: String) {\n    console.log('First participant customized logic');\n    super.broadcast(msg);\n  }\n}\n\nclass SecondParticipant extends Participant {\n  constructor(mediator: Mediator) {\n    super(mediator);\n  }\n\n  broadcast(msg: String) {\n    console.log('Second participant customized logic');\n    super.broadcast(msg);\n  }\n}\n\n(function main() {\n  const mediator = new ConcreteMediator();\n  const firstParticipant = new FirstParticipant(mediator);\n  const secondParticipant = new SecondParticipant(mediator);\n\n  mediator.firstParticipant = firstParticipant;\n  mediator.secondParticipant = secondParticipant;\n\n  firstParticipant.broadcast(\n    'FirstParticipant sends message to FirstParticipant, SecondParticipant'\n  );\n  secondParticipant.broadcast(\n    'SecondParticipant sends message to FirstParticipant'\n  );\n})();","position":{"start":{"line":29,"column":1,"offset":1449},"end":{"line":103,"column":4,"offset":3194},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":105,"column":4,"offset":3199},"end":{"line":105,"column":13,"offset":3208},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":3196},"end":{"line":105,"column":13,"offset":3208},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.infoworld.com/article/3204528/how-to-use-the-mediator-design-pattern-in-c.html","children":[{"type":"text","value":"Mediator in C#","position":{"start":{"line":107,"column":4,"offset":3213},"end":{"line":107,"column":18,"offset":3227},"indent":[]}}],"position":{"start":{"line":107,"column":3,"offset":3212},"end":{"line":107,"column":111,"offset":3320},"indent":[]}}],"position":{"start":{"line":107,"column":3,"offset":3212},"end":{"line":107,"column":111,"offset":3320},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3210},"end":{"line":107,"column":111,"offset":3320},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3210},"end":{"line":107,"column":111,"offset":3320},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":110,"column":1,"offset":3323},"end":{"line":110,"column":31,"offset":3353},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":110,"column":31,"offset":3353}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mediator\"\n    }}>{`Mediator`}</h1>\n    <p>{`Mediator is a behavioural design pattern which helps when there are many objects communicating with each other.`}</p>\n    <p>{`The Mediator itself is an object that encapsulates how one or more objects interact with each other. It controls how these object communication and resticts dependencies required to manage.`}</p>\n    <h2 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Mediator: Defines interface for communication between `}<inlineCode parentName=\"li\">{`Colleague`}</inlineCode>{` objects.`}</li>\n      <li parentName=\"ul\">{`ConcreteMediator: Implements `}<inlineCode parentName=\"li\">{`Mediator`}</inlineCode>{`, has awareness of `}<inlineCode parentName=\"li\">{`colleagues`}</inlineCode>{` and facilitates communication between.`}</li>\n      <li parentName=\"ul\">{`Colleague: Defines interface for communication with other `}<inlineCode parentName=\"li\">{`Colleagues`}</inlineCode>{` through the `}<inlineCode parentName=\"li\">{`Mediator`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`ConcreteColleague: Implements the `}<inlineCode parentName=\"li\">{`Colleague`}</inlineCode>{` interface an communicates to other colleagues through its `}<inlineCode parentName=\"li\">{`Mediator`}</inlineCode>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`In this example, we will have a `}<inlineCode parentName=\"p\">{`ConcreteMediator`}</inlineCode>{` that will ensure certain `}<inlineCode parentName=\"p\">{`Participants`}</inlineCode>{` receive a message based on the `}<inlineCode parentName=\"p\">{`Participant`}</inlineCode>{` sending the `}<inlineCode parentName=\"p\">{`Broadcast`}</inlineCode>{`.`}</p>\n    <p>{`We will use the mediator to ensure messages sent from the `}<inlineCode parentName=\"p\">{`FirstParticipant`}</inlineCode>{` is broadcasted to both `}<inlineCode parentName=\"p\">{`FirstParticipant`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`SecondParticipant`}</inlineCode>{` while messages from the `}<inlineCode parentName=\"p\">{`SecondParticipant`}</inlineCode>{` are only reached by the `}<inlineCode parentName=\"p\">{`FirstPartiicpant`}</inlineCode>{` and not itself.`}</p>\n    <p>{`The abstract `}<inlineCode parentName=\"p\">{`Participant`}</inlineCode>{` class in this example is the `}<inlineCode parentName=\"p\">{`Colleague`}</inlineCode>{` and the subclasses are the `}<inlineCode parentName=\"p\">{`ConcreteColleague`}</inlineCode>{` classes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface Mediator {\n  broadcast(msg: String, sender: Participant): void;\n}\n\nclass ConcreteMediator implements Mediator {\n  public firstParticipant: Participant;\n  public secondParticipant: Participant;\n\n  broadcast(msg: String, sender: Participant): void {\n    if (sender === this.firstParticipant) {\n      this.firstParticipant.receiveMsg(msg);\n      this.secondParticipant.receiveMsg(msg);\n    }\n\n    if (sender === this.secondParticipant) {\n      this.firstParticipant.receiveMsg(msg);\n    }\n  }\n}\n\nabstract class Participant {\n  public mediator: Mediator;\n\n  constructor(mediator: Mediator) {\n    this.mediator = mediator;\n  }\n\n  broadcast(msg: String): void {\n    this.mediator.broadcast(msg, this);\n  }\n\n  receiveMsg(msg: String): void {\n    console.log('recieveMsg:', msg);\n  }\n}\n\nclass FirstParticipant extends Participant {\n  constructor(mediator: Mediator) {\n    super(mediator);\n  }\n\n  broadcast(msg: String) {\n    console.log('First participant customized logic');\n    super.broadcast(msg);\n  }\n}\n\nclass SecondParticipant extends Participant {\n  constructor(mediator: Mediator) {\n    super(mediator);\n  }\n\n  broadcast(msg: String) {\n    console.log('Second participant customized logic');\n    super.broadcast(msg);\n  }\n}\n\n(function main() {\n  const mediator = new ConcreteMediator();\n  const firstParticipant = new FirstParticipant(mediator);\n  const secondParticipant = new SecondParticipant(mediator);\n\n  mediator.firstParticipant = firstParticipant;\n  mediator.secondParticipant = secondParticipant;\n\n  firstParticipant.broadcast(\n    'FirstParticipant sends message to FirstParticipant, SecondParticipant'\n  );\n  secondParticipant.broadcast(\n    'SecondParticipant sends message to FirstParticipant'\n  );\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.infoworld.com/article/3204528/how-to-use-the-mediator-design-pattern-in-c.html\"\n        }}>{`Mediator in C#`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}