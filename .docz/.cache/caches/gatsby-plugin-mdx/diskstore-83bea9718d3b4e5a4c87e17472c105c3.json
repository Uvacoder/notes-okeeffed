{"expireTime":9007200867335966000,"key":"gatsby-plugin-mdx-entire-payload-b96cecac00984ec344bdeb2f46606f57-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Elixir Course Testing And Documentation","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":42,"offset":208},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":42,"offset":208},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Documentation","position":{"start":{"line":10,"column":4,"offset":213},"end":{"line":10,"column":17,"offset":226},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":210},"end":{"line":10,"column":17,"offset":226},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Two types:","position":{"start":{"line":12,"column":1,"offset":228},"end":{"line":12,"column":11,"offset":238},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":228},"end":{"line":12,"column":11,"offset":238},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Module documentation: purpose of module","position":{"start":{"line":14,"column":4,"offset":243},"end":{"line":14,"column":43,"offset":282},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":243},"end":{"line":14,"column":43,"offset":282},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":240},"end":{"line":14,"column":43,"offset":282},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Function documentation: purpose of individual functions","position":{"start":{"line":15,"column":4,"offset":286},"end":{"line":15,"column":59,"offset":341},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":286},"end":{"line":15,"column":59,"offset":341},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":283},"end":{"line":15,"column":59,"offset":341},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":240},"end":{"line":15,"column":59,"offset":341},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Using ","position":{"start":{"line":17,"column":1,"offset":343},"end":{"line":17,"column":7,"offset":349},"indent":[]}},{"type":"inlineCode","value":"ex_doc","position":{"start":{"line":17,"column":7,"offset":349},"end":{"line":17,"column":15,"offset":357},"indent":[]}},{"type":"text","value":" as the required module, add ","position":{"start":{"line":17,"column":15,"offset":357},"end":{"line":17,"column":44,"offset":386},"indent":[]}},{"type":"inlineCode","value":"{:ex_doc, \"~> 0.21.1\"},","position":{"start":{"line":17,"column":44,"offset":386},"end":{"line":17,"column":69,"offset":411},"indent":[]}},{"type":"text","value":" to you deps (or the latest version) and after fetching deps, run ","position":{"start":{"line":17,"column":69,"offset":411},"end":{"line":17,"column":135,"offset":477},"indent":[]}},{"type":"inlineCode","value":"mix docs","position":{"start":{"line":17,"column":135,"offset":477},"end":{"line":17,"column":145,"offset":487},"indent":[]}},{"type":"text","value":" to generate the documentation.","position":{"start":{"line":17,"column":145,"offset":487},"end":{"line":17,"column":176,"offset":518},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":343},"end":{"line":17,"column":176,"offset":518},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Documentation can then be found at ","position":{"start":{"line":19,"column":1,"offset":520},"end":{"line":19,"column":36,"offset":555},"indent":[]}},{"type":"inlineCode","value":"doc/index.html","position":{"start":{"line":19,"column":36,"offset":555},"end":{"line":19,"column":52,"offset":571},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":19,"column":52,"offset":571},"end":{"line":19,"column":53,"offset":572},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":520},"end":{"line":19,"column":53,"offset":572},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Examples:","position":{"start":{"line":21,"column":1,"offset":574},"end":{"line":21,"column":10,"offset":583},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":574},"end":{"line":21,"column":10,"offset":583},"indent":[]}},{"type":"code","lang":"elixir","meta":null,"value":"defmodule ModuleName.Queries do\n  @moduledoc \"\"\"\n  Provides Ecto queries for querying important Action Framework requirement.\n  \"\"\"\n\n  import Ecto.Query\n\n  @doc \"\"\"\n  Does a thing\n\n  ## Examples\n\n      iex> query = \"Hello, World!\"\n      iex> query\n      \"Hello, World!\"\n  \"\"\"\n  def hello_world() do\n    \"Hello, World!\"\n  end\nend","position":{"start":{"line":23,"column":1,"offset":585},"end":{"line":44,"column":4,"offset":927},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Elixir Testing","position":{"start":{"line":46,"column":4,"offset":932},"end":{"line":46,"column":18,"offset":946},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":929},"end":{"line":46,"column":18,"offset":946},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are two distinct types of tests we can write:","position":{"start":{"line":48,"column":1,"offset":948},"end":{"line":48,"column":52,"offset":999},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":948},"end":{"line":48,"column":52,"offset":999},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Assertion tests","position":{"start":{"line":50,"column":4,"offset":1004},"end":{"line":50,"column":19,"offset":1019},"indent":[]}}],"position":{"start":{"line":50,"column":4,"offset":1004},"end":{"line":50,"column":19,"offset":1019},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1001},"end":{"line":50,"column":19,"offset":1019},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Doc testing","position":{"start":{"line":51,"column":4,"offset":1023},"end":{"line":51,"column":15,"offset":1034},"indent":[]}}],"position":{"start":{"line":51,"column":4,"offset":1023},"end":{"line":51,"column":15,"offset":1034},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1020},"end":{"line":51,"column":15,"offset":1034},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1001},"end":{"line":51,"column":15,"offset":1034},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example Test","position":{"start":{"line":53,"column":4,"offset":1039},"end":{"line":53,"column":16,"offset":1051},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1036},"end":{"line":53,"column":16,"offset":1051},"indent":[]}},{"type":"code","lang":"elixir","meta":null,"value":"defmodule Cards do\n  def create_deck do\n    values = [\"Ace\", \"Two\"]\n    suits = [\"Spades\", \"Clubs\"]\n  end\n\n  # ... more\nend","position":{"start":{"line":55,"column":1,"offset":1053},"end":{"line":64,"column":4,"offset":1190},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Testing can be considered a first-class citizen. It comes built into Elixir.","position":{"start":{"line":66,"column":1,"offset":1192},"end":{"line":66,"column":77,"offset":1268},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1192},"end":{"line":66,"column":77,"offset":1268},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When you generate the project with ","position":{"start":{"line":68,"column":1,"offset":1270},"end":{"line":68,"column":36,"offset":1305},"indent":[]}},{"type":"inlineCode","value":"mix","position":{"start":{"line":68,"column":36,"offset":1305},"end":{"line":68,"column":41,"offset":1310},"indent":[]}},{"type":"text","value":", you get a test folder put in automatically.","position":{"start":{"line":68,"column":41,"offset":1310},"end":{"line":68,"column":86,"offset":1355},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1270},"end":{"line":68,"column":86,"offset":1355},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":70,"column":1,"offset":1357},"end":{"line":70,"column":5,"offset":1361},"indent":[]}},{"type":"inlineCode","value":"cards_test.exs","position":{"start":{"line":70,"column":5,"offset":1361},"end":{"line":70,"column":21,"offset":1377},"indent":[]}},{"type":"text","value":" file is specifically built for testing the functions used in ","position":{"start":{"line":70,"column":21,"offset":1377},"end":{"line":70,"column":83,"offset":1439},"indent":[]}},{"type":"inlineCode","value":"cards_test.exs","position":{"start":{"line":70,"column":83,"offset":1439},"end":{"line":70,"column":99,"offset":1455},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":70,"column":99,"offset":1455},"end":{"line":70,"column":100,"offset":1456},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1357},"end":{"line":70,"column":100,"offset":1456},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note that running ","position":{"start":{"line":72,"column":1,"offset":1458},"end":{"line":72,"column":19,"offset":1476},"indent":[]}},{"type":"inlineCode","value":"elixir test","position":{"start":{"line":72,"column":19,"offset":1476},"end":{"line":72,"column":32,"offset":1489},"indent":[]}},{"type":"text","value":" will end up with two tests run with 0 failures.","position":{"start":{"line":72,"column":32,"offset":1489},"end":{"line":72,"column":80,"offset":1537},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":1458},"end":{"line":72,"column":80,"offset":1537},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The \"mystery\" test cmes frm the ","position":{"start":{"line":74,"column":1,"offset":1539},"end":{"line":74,"column":33,"offset":1571},"indent":[]}},{"type":"inlineCode","value":"@doc","position":{"start":{"line":74,"column":33,"offset":1571},"end":{"line":74,"column":39,"offset":1577},"indent":[]}},{"type":"text","value":" tag ","position":{"start":{"line":74,"column":39,"offset":1577},"end":{"line":74,"column":44,"offset":1582},"indent":[]}},{"type":"inlineCode","value":"## Examples","position":{"start":{"line":74,"column":44,"offset":1582},"end":{"line":74,"column":57,"offset":1595},"indent":[]}},{"type":"text","value":" - it will run that chunk of code as if it is a test!","position":{"start":{"line":74,"column":57,"offset":1595},"end":{"line":74,"column":110,"offset":1648},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1539},"end":{"line":74,"column":110,"offset":1648},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example, the following code will run as a test:","position":{"start":{"line":76,"column":1,"offset":1650},"end":{"line":76,"column":48,"offset":1697},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":1650},"end":{"line":76,"column":48,"offset":1697},"indent":[]}},{"type":"code","lang":"elixir","meta":null,"value":"@doc \"\"\"\n  Divides a deck ito a hand and the remainder of the deck.\n\n## Examples\n\n    iex> deck = Card.create_deck\n    iex> {hand, deck} = Cards.deal(deck, 1)\n    iex> hand\n    [\"Ace of Spaces\"]\n\"\"\"\ndef deal(deck, hand_size) do\n  Enum.split(deck, hand_size)\nend","position":{"start":{"line":78,"column":1,"offset":1699},"end":{"line":92,"column":4,"offset":1974},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Important Tidbits","position":{"start":{"line":94,"column":4,"offset":1979},"end":{"line":94,"column":21,"offset":1996},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":1976},"end":{"line":94,"column":21,"offset":1996},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Worth noting for a basic Elixir test example:","position":{"start":{"line":96,"column":1,"offset":1998},"end":{"line":96,"column":46,"offset":2043},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":1998},"end":{"line":96,"column":46,"offset":2043},"indent":[]}},{"type":"code","lang":"elixir","meta":null,"value":"defmodule CardsTest do\n  use ExUnit.Case\n  doctest Cards\nend","position":{"start":{"line":98,"column":1,"offset":2045},"end":{"line":103,"column":4,"offset":2119},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"doctest","position":{"start":{"line":105,"column":1,"offset":2121},"end":{"line":105,"column":10,"offset":2130},"indent":[]}},{"type":"text","value":" is used for testing the documentation examples.","position":{"start":{"line":105,"column":10,"offset":2130},"end":{"line":105,"column":58,"offset":2178},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":2121},"end":{"line":105,"column":58,"offset":2178},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Case Tests","position":{"start":{"line":107,"column":4,"offset":2183},"end":{"line":107,"column":14,"offset":2193},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":2180},"end":{"line":107,"column":14,"offset":2193},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the terms ","position":{"start":{"line":109,"column":1,"offset":2195},"end":{"line":109,"column":15,"offset":2209},"indent":[]}},{"type":"inlineCode","value":"use ExUnit.Case","position":{"start":{"line":109,"column":15,"offset":2209},"end":{"line":109,"column":32,"offset":2226},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":109,"column":32,"offset":2226},"end":{"line":109,"column":33,"offset":2227},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":2195},"end":{"line":109,"column":33,"offset":2227},"indent":[]}},{"type":"code","lang":"elixir","meta":null,"value":"defmodule CardsTest do\n  use ExUnit.Case\n  doctest Cards\n\n  test \"create_deck makes 20 cards\" do\n    deck_length = length(Cards.create_deck)\n    assert deck_length == 20\n  end\nend","position":{"start":{"line":111,"column":1,"offset":2229},"end":{"line":121,"column":4,"offset":2422},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Assert vs Refute","position":{"start":{"line":123,"column":4,"offset":2427},"end":{"line":123,"column":20,"offset":2443},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":2424},"end":{"line":123,"column":20,"offset":2443},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":125,"column":1,"offset":2445},"end":{"line":125,"column":5,"offset":2449},"indent":[]}},{"type":"inlineCode","value":"refute","position":{"start":{"line":125,"column":5,"offset":2449},"end":{"line":125,"column":13,"offset":2457},"indent":[]}},{"type":"text","value":" keyword is just the opposite of ","position":{"start":{"line":125,"column":13,"offset":2457},"end":{"line":125,"column":46,"offset":2490},"indent":[]}},{"type":"inlineCode","value":"assert","position":{"start":{"line":125,"column":46,"offset":2490},"end":{"line":125,"column":54,"offset":2498},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":125,"column":54,"offset":2498},"end":{"line":125,"column":55,"offset":2499},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":2445},"end":{"line":125,"column":55,"offset":2499},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":128,"column":1,"offset":2502},"end":{"line":128,"column":31,"offset":2532},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":128,"column":31,"offset":2532}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"elixir-course-testing-and-documentation\"\n    }}>{`Elixir Course Testing And Documentation`}</h1>\n    <h2 {...{\n      \"id\": \"documentation\"\n    }}>{`Documentation`}</h2>\n    <p>{`Two types:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Module documentation: purpose of module`}</li>\n      <li parentName=\"ol\">{`Function documentation: purpose of individual functions`}</li>\n    </ol>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`ex_doc`}</inlineCode>{` as the required module, add `}<inlineCode parentName=\"p\">{`{:ex_doc, \"~> 0.21.1\"},`}</inlineCode>{` to you deps (or the latest version) and after fetching deps, run `}<inlineCode parentName=\"p\">{`mix docs`}</inlineCode>{` to generate the documentation.`}</p>\n    <p>{`Documentation can then be found at `}<inlineCode parentName=\"p\">{`doc/index.html`}</inlineCode>{`.`}</p>\n    <p>{`Examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule ModuleName.Queries do\n  @moduledoc \"\"\"\n  Provides Ecto queries for querying important Action Framework requirement.\n  \"\"\"\n\n  import Ecto.Query\n\n  @doc \"\"\"\n  Does a thing\n\n  ## Examples\n\n      iex> query = \"Hello, World!\"\n      iex> query\n      \"Hello, World!\"\n  \"\"\"\n  def hello_world() do\n    \"Hello, World!\"\n  end\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"elixir-testing\"\n    }}>{`Elixir Testing`}</h2>\n    <p>{`There are two distinct types of tests we can write:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Assertion tests`}</li>\n      <li parentName=\"ol\">{`Doc testing`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"example-test\"\n    }}>{`Example Test`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule Cards do\n  def create_deck do\n    values = [\"Ace\", \"Two\"]\n    suits = [\"Spades\", \"Clubs\"]\n  end\n\n  # ... more\nend\n`}</code></pre>\n    <p>{`Testing can be considered a first-class citizen. It comes built into Elixir.`}</p>\n    <p>{`When you generate the project with `}<inlineCode parentName=\"p\">{`mix`}</inlineCode>{`, you get a test folder put in automatically.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`cards_test.exs`}</inlineCode>{` file is specifically built for testing the functions used in `}<inlineCode parentName=\"p\">{`cards_test.exs`}</inlineCode>{`.`}</p>\n    <p>{`Note that running `}<inlineCode parentName=\"p\">{`elixir test`}</inlineCode>{` will end up with two tests run with 0 failures.`}</p>\n    <p>{`The \"mystery\" test cmes frm the `}<inlineCode parentName=\"p\">{`@doc`}</inlineCode>{` tag `}<inlineCode parentName=\"p\">{`## Examples`}</inlineCode>{` - it will run that chunk of code as if it is a test!`}</p>\n    <p>{`Example, the following code will run as a test:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`@doc \"\"\"\n  Divides a deck ito a hand and the remainder of the deck.\n\n## Examples\n\n    iex> deck = Card.create_deck\n    iex> {hand, deck} = Cards.deal(deck, 1)\n    iex> hand\n    [\"Ace of Spaces\"]\n\"\"\"\ndef deal(deck, hand_size) do\n  Enum.split(deck, hand_size)\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"important-tidbits\"\n    }}>{`Important Tidbits`}</h2>\n    <p>{`Worth noting for a basic Elixir test example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule CardsTest do\n  use ExUnit.Case\n  doctest Cards\nend\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`doctest`}</inlineCode>{` is used for testing the documentation examples.`}</p>\n    <h2 {...{\n      \"id\": \"case-tests\"\n    }}>{`Case Tests`}</h2>\n    <p>{`For the terms `}<inlineCode parentName=\"p\">{`use ExUnit.Case`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`defmodule CardsTest do\n  use ExUnit.Case\n  doctest Cards\n\n  test \"create_deck makes 20 cards\" do\n    deck_length = length(Cards.create_deck)\n    assert deck_length == 20\n  end\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"assert-vs-refute\"\n    }}>{`Assert vs Refute`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`refute`}</inlineCode>{` keyword is just the opposite of `}<inlineCode parentName=\"p\">{`assert`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}