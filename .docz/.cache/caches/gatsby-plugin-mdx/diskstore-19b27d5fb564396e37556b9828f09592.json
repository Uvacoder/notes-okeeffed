{"expireTime":9007200849425565000,"key":"gatsby-plugin-mdx-entire-payload-76db30d1af7890bad4772f0e79bf5c3d-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Basic String Functions","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":25,"offset":191},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":25,"offset":191},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is a simple example of the implementation of some basic functions using the ","position":{"start":{"line":10,"column":1,"offset":193},"end":{"line":10,"column":82,"offset":274},"indent":[]}},{"type":"inlineCode","value":"strings","position":{"start":{"line":10,"column":82,"offset":274},"end":{"line":10,"column":91,"offset":283},"indent":[]}},{"type":"text","value":" package. The ","position":{"start":{"line":10,"column":91,"offset":283},"end":{"line":10,"column":105,"offset":297},"indent":[]}},{"type":"inlineCode","value":"unicode","position":{"start":{"line":10,"column":105,"offset":297},"end":{"line":10,"column":114,"offset":306},"indent":[]}},{"type":"text","value":" package is used for the example using runes.","position":{"start":{"line":10,"column":114,"offset":306},"end":{"line":10,"column":159,"offset":351},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":193},"end":{"line":10,"column":159,"offset":351},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If building a file, ensure to have the correct imports and package name:","position":{"start":{"line":12,"column":1,"offset":353},"end":{"line":12,"column":73,"offset":425},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":353},"end":{"line":12,"column":73,"offset":425},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package stringexamples\n\nimport (\n\t\"strings\"\n\t\"unicode\"\n)","position":{"start":{"line":14,"column":1,"offset":427},"end":{"line":21,"column":4,"offset":493},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"...and for testing:","position":{"start":{"line":23,"column":1,"offset":495},"end":{"line":23,"column":20,"offset":514},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":495},"end":{"line":23,"column":20,"offset":514},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package stringexamples\n\nimport (\n\t\"testing\"\n)","position":{"start":{"line":25,"column":1,"offset":516},"end":{"line":31,"column":4,"offset":571},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Compare","position":{"start":{"line":33,"column":4,"offset":576},"end":{"line":33,"column":11,"offset":583},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":573},"end":{"line":33,"column":11,"offset":583},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// Test module\nfunc TestStringsCompare(t *testing.T) {\n\ta := \"Hello, World!\"\n\tb := \"Hello, World!\"\n\tif CompareStrings(a, b) != 0 {\n\t\tt.Fatalf(\"Expected 0\")\n\t}\n\n\ta = \"Hello, World!\"\n\tb = \"Hello, Worl!\"\n\tif CompareStrings(a, b) != 1 {\n\t\tt.Fatalf(\"Expected 1\")\n\t}\n\n\ta = \"Hello, World!\"\n\tb = \"Hello, World!!\"\n\tif CompareStrings(a, b) != -1 {\n\t\tt.Fatalf(\"Expected -1\")\n\t}\n}\n\n// CompareStrings compares two string values and returns an int\nfunc CompareStrings(a string, b string) int {\n\treturn strings.Compare(a, b)\n}","position":{"start":{"line":35,"column":1,"offset":585},"end":{"line":61,"column":4,"offset":1106},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Contains","position":{"start":{"line":63,"column":4,"offset":1111},"end":{"line":63,"column":12,"offset":1119},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1108},"end":{"line":63,"column":12,"offset":1119},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// Test module\nfunc TestContainsString(t *testing.T) {\n\ta := \"Hello, World!\"\n\tb := \"Hello, World\"\n\tif ContainsString(a, b) != true {\n\t\tt.Fatalf(\"Expected true\")\n\t}\n\n\ta = \"Hello, World!\"\n\tb = \"Hway\"\n\tif ContainsString(a, b) != false {\n\t\tt.Fatalf(\"Expected false\")\n\t}\n}\n\n// ContainsString checks if string contains substr\nfunc ContainsString(s string, substr string) bool {\n\treturn strings.Contains(s, substr)\n}","position":{"start":{"line":65,"column":1,"offset":1121},"end":{"line":85,"column":4,"offset":1540},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Join","position":{"start":{"line":87,"column":4,"offset":1545},"end":{"line":87,"column":8,"offset":1549},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":1542},"end":{"line":87,"column":8,"offset":1549},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// Test module\nfunc TestJoinString(t *testing.T) {\n\ta := []string{\"Hello\", \"World!\"}\n\tb := \"Hello, World!\"\n\n\tres := JoinString(a, \", \")\n\n\tif res != b {\n\t\tt.Fatalf(\"Expected %s but got %s\", b, res)\n\t}\n}\n\n// JoinString turns a string slice into a string\nfunc JoinString(str []string, de string) string {\n\treturn strings.Join(str, de)\n}","position":{"start":{"line":89,"column":1,"offset":1551},"end":{"line":106,"column":4,"offset":1894},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Split","position":{"start":{"line":108,"column":4,"offset":1899},"end":{"line":108,"column":9,"offset":1904},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":1896},"end":{"line":108,"column":9,"offset":1904},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// Test module\nfunc TestSplitString(t *testing.T) {\n\ta := \"Hello World!\"\n\tb := []string{\"Hello\", \"World!\"}\n\n\tres := SplitString(a, \" \")\n\n\tfor i, v := range res {\n\t\tif v != b[i] {\n\t\t\tt.Fatalf(\"Expected string %s but got %s\", v, b[i])\n\t\t}\n\t}\n}\n\n// SplitString turns a string in a []string with delimiter\nfunc SplitString(str string, de string) []string {\n\treturn strings.Split(str, de)\n}","position":{"start":{"line":110,"column":1,"offset":1906},"end":{"line":129,"column":4,"offset":2301},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Lower case a string using Map","position":{"start":{"line":131,"column":4,"offset":2306},"end":{"line":131,"column":33,"offset":2335},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":2303},"end":{"line":131,"column":33,"offset":2335},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// Test module\nfunc TestMapToLowerString(t *testing.T) {\n\ta := \"Hello, World!\"\n\tb := \"hello, world!\"\n\n\tres := MapOverStringToLower(a)\n\n\tif res != b {\n\t\tt.Fatalf(\"Expected %s but got %s\", b, res)\n\t}\n}\n\n// MapOverStringToLower uses map to lower case a string\nfunc MapOverStringToLower(str string) string {\n\ttoLower := func(r rune) rune {\n\t\treturn unicode.ToLower(r)\n\t}\n\n\treturn strings.Map(toLower, str)\n}","position":{"start":{"line":133,"column":1,"offset":2337},"end":{"line":154,"column":4,"offset":2750},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":157,"column":1,"offset":2753},"end":{"line":157,"column":31,"offset":2783},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":157,"column":31,"offset":2783}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"basic-string-functions\"\n    }}>{`Basic String Functions`}</h1>\n    <p>{`This is a simple example of the implementation of some basic functions using the `}<inlineCode parentName=\"p\">{`strings`}</inlineCode>{` package. The `}<inlineCode parentName=\"p\">{`unicode`}</inlineCode>{` package is used for the example using runes.`}</p>\n    <p>{`If building a file, ensure to have the correct imports and package name:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package stringexamples\n\nimport (\n    \"strings\"\n    \"unicode\"\n)\n`}</code></pre>\n    <p>{`...and for testing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package stringexamples\n\nimport (\n    \"testing\"\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"compare\"\n    }}>{`Compare`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestStringsCompare(t *testing.T) {\n    a := \"Hello, World!\"\n    b := \"Hello, World!\"\n    if CompareStrings(a, b) != 0 {\n        t.Fatalf(\"Expected 0\")\n    }\n\n    a = \"Hello, World!\"\n    b = \"Hello, Worl!\"\n    if CompareStrings(a, b) != 1 {\n        t.Fatalf(\"Expected 1\")\n    }\n\n    a = \"Hello, World!\"\n    b = \"Hello, World!!\"\n    if CompareStrings(a, b) != -1 {\n        t.Fatalf(\"Expected -1\")\n    }\n}\n\n// CompareStrings compares two string values and returns an int\nfunc CompareStrings(a string, b string) int {\n    return strings.Compare(a, b)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"contains\"\n    }}>{`Contains`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestContainsString(t *testing.T) {\n    a := \"Hello, World!\"\n    b := \"Hello, World\"\n    if ContainsString(a, b) != true {\n        t.Fatalf(\"Expected true\")\n    }\n\n    a = \"Hello, World!\"\n    b = \"Hway\"\n    if ContainsString(a, b) != false {\n        t.Fatalf(\"Expected false\")\n    }\n}\n\n// ContainsString checks if string contains substr\nfunc ContainsString(s string, substr string) bool {\n    return strings.Contains(s, substr)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"join\"\n    }}>{`Join`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestJoinString(t *testing.T) {\n    a := []string{\"Hello\", \"World!\"}\n    b := \"Hello, World!\"\n\n    res := JoinString(a, \", \")\n\n    if res != b {\n        t.Fatalf(\"Expected %s but got %s\", b, res)\n    }\n}\n\n// JoinString turns a string slice into a string\nfunc JoinString(str []string, de string) string {\n    return strings.Join(str, de)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"split\"\n    }}>{`Split`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestSplitString(t *testing.T) {\n    a := \"Hello World!\"\n    b := []string{\"Hello\", \"World!\"}\n\n    res := SplitString(a, \" \")\n\n    for i, v := range res {\n        if v != b[i] {\n            t.Fatalf(\"Expected string %s but got %s\", v, b[i])\n        }\n    }\n}\n\n// SplitString turns a string in a []string with delimiter\nfunc SplitString(str string, de string) []string {\n    return strings.Split(str, de)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lower-case-a-string-using-map\"\n    }}>{`Lower case a string using Map`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// Test module\nfunc TestMapToLowerString(t *testing.T) {\n    a := \"Hello, World!\"\n    b := \"hello, world!\"\n\n    res := MapOverStringToLower(a)\n\n    if res != b {\n        t.Fatalf(\"Expected %s but got %s\", b, res)\n    }\n}\n\n// MapOverStringToLower uses map to lower case a string\nfunc MapOverStringToLower(str string) string {\n    toLower := func(r rune) rune {\n        return unicode.ToLower(r)\n    }\n\n    return strings.Map(toLower, str)\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}