{"expireTime":9007200849425596000,"key":"gatsby-plugin-mdx-entire-payload-d13779ea665aba7fdec99abd9eb6afba-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Tree Constructor","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":19,"offset":185},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":19,"offset":185},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Answer","position":{"start":{"line":10,"column":4,"offset":190},"end":{"line":10,"column":10,"offset":196},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":187},"end":{"line":10,"column":10,"offset":196},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function TreeConstructor(strArr) {\n  // convert to intArr\n  const convertedDataArr = strArr.map(leafSet =>\n    leafSet\n      .replace(/[\\(\\)]/gi, '')\n      .split(',')\n      .map(char => parseInt(char)),\n  );\n\n  let treeMap = {};\n  let children = [];\n  let parents = [];\n  for (let [child, parent] of convertedDataArr) {\n    if (!treeMap[parent]) {\n      // set empty object\n      treeMap[parent] = {};\n      if (child < parent) {\n        treeMap[parent].min = child;\n      } else if (child > parent) {\n        treeMap[parent].max = child;\n      } else {\n        return false;\n      }\n    } else {\n      if (child < parent && !treeMap[parent].min) {\n        treeMap[parent].min = child;\n      } else if (child > parent && !treeMap[parent].max) {\n        treeMap[parent].max = child;\n      } else {\n        return false;\n      }\n    }\n\n    children.push(child);\n    parents.push(parent);\n  }\n\n  // handle multiple parents not connected\n  let diff = 0;\n  for (let parent of parents) {\n    if (!children.includes(parent)) {\n      diff++;\n    } else {\n      diff--;\n    }\n  }\n\n  if (diff > 1) {\n    return false;\n  }\n\n  // code goes here\n  return true;\n}","position":{"start":{"line":12,"column":1,"offset":198},"end":{"line":67,"column":4,"offset":1366},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":70,"column":1,"offset":1369},"end":{"line":70,"column":31,"offset":1399},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":70,"column":31,"offset":1399}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tree-constructor\"\n    }}>{`Tree Constructor`}</h1>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function TreeConstructor(strArr) {\n  // convert to intArr\n  const convertedDataArr = strArr.map(leafSet =>\n    leafSet\n      .replace(/[\\\\(\\\\)]/gi, '')\n      .split(',')\n      .map(char => parseInt(char)),\n  );\n\n  let treeMap = {};\n  let children = [];\n  let parents = [];\n  for (let [child, parent] of convertedDataArr) {\n    if (!treeMap[parent]) {\n      // set empty object\n      treeMap[parent] = {};\n      if (child < parent) {\n        treeMap[parent].min = child;\n      } else if (child > parent) {\n        treeMap[parent].max = child;\n      } else {\n        return false;\n      }\n    } else {\n      if (child < parent && !treeMap[parent].min) {\n        treeMap[parent].min = child;\n      } else if (child > parent && !treeMap[parent].max) {\n        treeMap[parent].max = child;\n      } else {\n        return false;\n      }\n    }\n\n    children.push(child);\n    parents.push(parent);\n  }\n\n  // handle multiple parents not connected\n  let diff = 0;\n  for (let parent of parents) {\n    if (!children.includes(parent)) {\n      diff++;\n    } else {\n      diff--;\n    }\n  }\n\n  if (diff > 1) {\n    return false;\n  }\n\n  // code goes here\n  return true;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}