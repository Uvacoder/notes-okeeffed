{"expireTime":9007200849425580000,"key":"gatsby-plugin-mdx-entire-payload-8fbc715869a83c39988352f39750e41b-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"State","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":8,"offset":174},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":8,"offset":174},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Object Behavioural Design Pattern.","position":{"start":{"line":10,"column":1,"offset":176},"end":{"line":10,"column":35,"offset":210},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":176},"end":{"line":10,"column":35,"offset":210},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":12,"column":4,"offset":215},"end":{"line":12,"column":11,"offset":222},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":212},"end":{"line":12,"column":11,"offset":222},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"interface ATMState {\n  name?: string;\n  takeCash(cash: number): void;\n}\n\nclass ATMHasCashState implements ATMState {\n  private _machine: ATMMachine;\n  name: string;\n  constructor(machine: ATMMachine, name: string) {\n    this.name = name;\n    this._machine = machine;\n  }\n\n  takeCash(cash: number): void {\n    if (this._machine.cash < cash) {\n      this._machine.state = this._machine.noCashState();\n      console.log('Not enough cash');\n      return;\n    } else if (this._machine.cash === cash) {\n      this._machine.state = this._machine.noCashState();\n      console.log('No cash after cash token');\n    }\n    console.log(\n      `[current machine total - cash]: ${this._machine.cash} - ${cash}`\n    );\n    this._machine.cash -= cash;\n  }\n}\n\nclass ATMNoCashState implements ATMState {\n  private _machine: ATMMachine;\n  name: string;\n  constructor(machine: ATMMachine, name: string) {\n    this.name = name;\n    this._machine = machine;\n  }\n\n  takeCash(cash: number): void {\n    throw new Error('ATMMachine has no cash');\n  }\n}\n\nclass ATMMachine implements ATMState {\n  private _hasCashState: ATMHasCashState;\n  private _noCashState: ATMNoCashState;\n\n  private _currentState: ATMState;\n\n  public cash: number;\n\n  constructor(cash: number) {\n    this.cash = cash;\n\n    this._hasCashState = new ATMHasCashState(this, 'HasCash');\n    this._noCashState = new ATMNoCashState(this, 'NoCash');\n\n    this._currentState = this.cash ? this._hasCashState : this._noCashState;\n  }\n\n  public set state(value: ATMState) {\n    console.log(`Current state is ${value.name}`);\n    this._currentState = value;\n  }\n\n  public get state() {\n    return this._currentState;\n  }\n\n  takeCash(cash: number): void {\n    this._currentState.takeCash(cash);\n  }\n\n  // Get states\n  public hasCashState() {\n    return this._hasCashState;\n  }\n\n  public noCashState() {\n    return this._noCashState;\n  }\n}\n\n(function main() {\n  const machine = new ATMMachine(1200);\n  machine.takeCash(200); // has cash\n  machine.takeCash(400); // has cash\n  machine.takeCash(1000); // not enough\n})();","position":{"start":{"line":14,"column":1,"offset":224},"end":{"line":103,"column":4,"offset":2290},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":106,"column":1,"offset":2293},"end":{"line":106,"column":31,"offset":2323},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":106,"column":31,"offset":2323}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"state\"\n    }}>{`State`}</h1>\n    <p>{`Object Behavioural Design Pattern.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface ATMState {\n  name?: string;\n  takeCash(cash: number): void;\n}\n\nclass ATMHasCashState implements ATMState {\n  private _machine: ATMMachine;\n  name: string;\n  constructor(machine: ATMMachine, name: string) {\n    this.name = name;\n    this._machine = machine;\n  }\n\n  takeCash(cash: number): void {\n    if (this._machine.cash < cash) {\n      this._machine.state = this._machine.noCashState();\n      console.log('Not enough cash');\n      return;\n    } else if (this._machine.cash === cash) {\n      this._machine.state = this._machine.noCashState();\n      console.log('No cash after cash token');\n    }\n    console.log(\n      \\`[current machine total - cash]: \\${this._machine.cash} - \\${cash}\\`\n    );\n    this._machine.cash -= cash;\n  }\n}\n\nclass ATMNoCashState implements ATMState {\n  private _machine: ATMMachine;\n  name: string;\n  constructor(machine: ATMMachine, name: string) {\n    this.name = name;\n    this._machine = machine;\n  }\n\n  takeCash(cash: number): void {\n    throw new Error('ATMMachine has no cash');\n  }\n}\n\nclass ATMMachine implements ATMState {\n  private _hasCashState: ATMHasCashState;\n  private _noCashState: ATMNoCashState;\n\n  private _currentState: ATMState;\n\n  public cash: number;\n\n  constructor(cash: number) {\n    this.cash = cash;\n\n    this._hasCashState = new ATMHasCashState(this, 'HasCash');\n    this._noCashState = new ATMNoCashState(this, 'NoCash');\n\n    this._currentState = this.cash ? this._hasCashState : this._noCashState;\n  }\n\n  public set state(value: ATMState) {\n    console.log(\\`Current state is \\${value.name}\\`);\n    this._currentState = value;\n  }\n\n  public get state() {\n    return this._currentState;\n  }\n\n  takeCash(cash: number): void {\n    this._currentState.takeCash(cash);\n  }\n\n  // Get states\n  public hasCashState() {\n    return this._hasCashState;\n  }\n\n  public noCashState() {\n    return this._noCashState;\n  }\n}\n\n(function main() {\n  const machine = new ATMMachine(1200);\n  machine.takeCash(200); // has cash\n  machine.takeCash(400); // has cash\n  machine.takeCash(1000); // not enough\n})();\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}