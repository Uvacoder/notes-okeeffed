{"expireTime":9007200867335903000,"key":"gatsby-plugin-mdx-entire-payload-36c70f03fad49bd3b1342763242a4d54-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Scala Values, Variables and Types","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":36,"offset":202},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":36,"offset":202},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The presumes you have Scala installed on the local system.","position":{"start":{"line":10,"column":1,"offset":204},"end":{"line":10,"column":59,"offset":262},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":204},"end":{"line":10,"column":59,"offset":262},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is just the basics on declaring variables in Scala and what data types are available.","position":{"start":{"line":12,"column":1,"offset":264},"end":{"line":12,"column":91,"offset":354},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":264},"end":{"line":12,"column":91,"offset":354},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Declaring Variables","position":{"start":{"line":14,"column":4,"offset":359},"end":{"line":14,"column":23,"offset":378},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":356},"end":{"line":14,"column":23,"offset":378},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create file ","position":{"start":{"line":16,"column":1,"offset":380},"end":{"line":16,"column":13,"offset":392},"indent":[]}},{"type":"inlineCode","value":"src/main/scala/Playground.scala","position":{"start":{"line":16,"column":13,"offset":392},"end":{"line":16,"column":46,"offset":425},"indent":[]}},{"type":"text","value":" with the following.","position":{"start":{"line":16,"column":46,"offset":425},"end":{"line":16,"column":66,"offset":445},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":380},"end":{"line":16,"column":66,"offset":445},"indent":[]}},{"type":"code","lang":"scala","meta":null,"value":"object Playground extends App {\n  val x: Int = 42\n  println(x)\n}","position":{"start":{"line":18,"column":1,"offset":447},"end":{"line":23,"column":4,"offset":524},"indent":[1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"println","position":{"start":{"line":25,"column":3,"offset":528},"end":{"line":25,"column":12,"offset":537},"indent":[]}},{"type":"text","value":" will allow us to print to the console.","position":{"start":{"line":25,"column":12,"offset":537},"end":{"line":25,"column":51,"offset":576},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":528},"end":{"line":25,"column":51,"offset":576},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":526},"end":{"line":25,"column":51,"offset":576},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Extending ","position":{"start":{"line":26,"column":3,"offset":579},"end":{"line":26,"column":13,"offset":589},"indent":[]}},{"type":"inlineCode","value":"App","position":{"start":{"line":26,"column":13,"offset":589},"end":{"line":26,"column":18,"offset":594},"indent":[]}},{"type":"text","value":" allows us to run the file in the command line correctly.","position":{"start":{"line":26,"column":18,"offset":594},"end":{"line":26,"column":75,"offset":651},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":579},"end":{"line":26,"column":75,"offset":651},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":577},"end":{"line":26,"column":75,"offset":651},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"val","position":{"start":{"line":27,"column":3,"offset":654},"end":{"line":27,"column":8,"offset":659},"indent":[]}},{"type":"text","value":" are immutable - this is the Scala and functional programming way.","position":{"start":{"line":27,"column":8,"offset":659},"end":{"line":27,"column":74,"offset":725},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":654},"end":{"line":27,"column":74,"offset":725},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":652},"end":{"line":27,"column":74,"offset":725},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":526},"end":{"line":27,"column":74,"offset":725},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Say we remove the explicit type:","position":{"start":{"line":29,"column":1,"offset":727},"end":{"line":29,"column":33,"offset":759},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":727},"end":{"line":29,"column":33,"offset":759},"indent":[]}},{"type":"code","lang":"scala","meta":null,"value":"object Playground extends App {\n  val x = 42\n  println(x)\n}","position":{"start":{"line":31,"column":1,"offset":761},"end":{"line":36,"column":4,"offset":833},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This still works as the compiler infers the type to be an ","position":{"start":{"line":38,"column":1,"offset":835},"end":{"line":38,"column":59,"offset":893},"indent":[]}},{"type":"inlineCode","value":"Int","position":{"start":{"line":38,"column":59,"offset":893},"end":{"line":38,"column":64,"offset":898},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":38,"column":64,"offset":898},"end":{"line":38,"column":65,"offset":899},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":835},"end":{"line":38,"column":65,"offset":899},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Declaring various types","position":{"start":{"line":40,"column":4,"offset":904},"end":{"line":40,"column":27,"offset":927},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":901},"end":{"line":40,"column":27,"offset":927},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Below we will run through a declaration of each type.","position":{"start":{"line":42,"column":1,"offset":929},"end":{"line":42,"column":54,"offset":982},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":929},"end":{"line":42,"column":54,"offset":982},"indent":[]}},{"type":"code","lang":"scala","meta":null,"value":"object Playground extends App {\n  val x: Int = 42\n  val y: String = \"Hello, Friend!\"\n  val z: Boolean = true\n  val a: Char = 'a' // Note single quotes\n  val b: Short = 1234\n  val c: Long = 1234123412341234L // Note the L - similar to Java longs\n  val d: Float = 2.0f // Note the f - similar to Java\n  val e: Double = 2.14 // No marker needed\n\n  /* in order to mutate a variable */\n  var f: Int = 1\n  f = 2 // this is known as a side effect\n}","position":{"start":{"line":44,"column":1,"offset":984},"end":{"line":59,"column":4,"offset":1438},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note that the ","position":{"start":{"line":61,"column":1,"offset":1440},"end":{"line":61,"column":15,"offset":1454},"indent":[]}},{"type":"inlineCode","value":"val","position":{"start":{"line":61,"column":15,"offset":1454},"end":{"line":61,"column":20,"offset":1459},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":61,"column":20,"offset":1459},"end":{"line":61,"column":25,"offset":1464},"indent":[]}},{"type":"inlineCode","value":"var","position":{"start":{"line":61,"column":25,"offset":1464},"end":{"line":61,"column":30,"offset":1469},"indent":[]}},{"type":"text","value":" keywords have different meanings. ","position":{"start":{"line":61,"column":30,"offset":1469},"end":{"line":61,"column":65,"offset":1504},"indent":[]}},{"type":"inlineCode","value":"val","position":{"start":{"line":61,"column":65,"offset":1504},"end":{"line":61,"column":70,"offset":1509},"indent":[]}},{"type":"text","value":" is a constant and follows functional, immutable conventions while ","position":{"start":{"line":61,"column":70,"offset":1509},"end":{"line":61,"column":137,"offset":1576},"indent":[]}},{"type":"inlineCode","value":"var","position":{"start":{"line":61,"column":137,"offset":1576},"end":{"line":61,"column":142,"offset":1581},"indent":[]}},{"type":"text","value":" is mutable and changing a mutable variable is known as a side effect.","position":{"start":{"line":61,"column":142,"offset":1581},"end":{"line":61,"column":212,"offset":1651},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1440},"end":{"line":61,"column":212,"offset":1651},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":64,"column":1,"offset":1654},"end":{"line":64,"column":31,"offset":1684},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":64,"column":31,"offset":1684}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"scala-values-variables-and-types\"\n    }}>{`Scala Values, Variables and Types`}</h1>\n    <p>{`The presumes you have Scala installed on the local system.`}</p>\n    <p>{`This is just the basics on declaring variables in Scala and what data types are available.`}</p>\n    <h2 {...{\n      \"id\": \"declaring-variables\"\n    }}>{`Declaring Variables`}</h2>\n    <p>{`Create file `}<inlineCode parentName=\"p\">{`src/main/scala/Playground.scala`}</inlineCode>{` with the following.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`object Playground extends App {\n  val x: Int = 42\n  println(x)\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`println`}</inlineCode>{` will allow us to print to the console.`}</li>\n      <li parentName=\"ul\">{`Extending `}<inlineCode parentName=\"li\">{`App`}</inlineCode>{` allows us to run the file in the command line correctly.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`val`}</inlineCode>{` are immutable - this is the Scala and functional programming way.`}</li>\n    </ul>\n    <p>{`Say we remove the explicit type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`object Playground extends App {\n  val x = 42\n  println(x)\n}\n`}</code></pre>\n    <p>{`This still works as the compiler infers the type to be an `}<inlineCode parentName=\"p\">{`Int`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"declaring-various-types\"\n    }}>{`Declaring various types`}</h2>\n    <p>{`Below we will run through a declaration of each type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`object Playground extends App {\n  val x: Int = 42\n  val y: String = \"Hello, Friend!\"\n  val z: Boolean = true\n  val a: Char = 'a' // Note single quotes\n  val b: Short = 1234\n  val c: Long = 1234123412341234L // Note the L - similar to Java longs\n  val d: Float = 2.0f // Note the f - similar to Java\n  val e: Double = 2.14 // No marker needed\n\n  /* in order to mutate a variable */\n  var f: Int = 1\n  f = 2 // this is known as a side effect\n}\n`}</code></pre>\n    <p>{`Note that the `}<inlineCode parentName=\"p\">{`val`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{` keywords have different meanings. `}<inlineCode parentName=\"p\">{`val`}</inlineCode>{` is a constant and follows functional, immutable conventions while `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{` is mutable and changing a mutable variable is known as a side effect.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}