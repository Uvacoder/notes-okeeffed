{"expireTime":9007200849425598000,"key":"gatsby-plugin-mdx-entire-payload-b4cef80403fb82102300044acbb779af-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Dash Insert II","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":17,"offset":183},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":17,"offset":183},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Answer","position":{"start":{"line":10,"column":4,"offset":188},"end":{"line":10,"column":10,"offset":194},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":185},"end":{"line":10,"column":10,"offset":194},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Short Answer","position":{"start":{"line":12,"column":5,"offset":200},"end":{"line":12,"column":17,"offset":212},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":196},"end":{"line":12,"column":17,"offset":212},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function DashInsertII(num) {\n  const resString = num.toString(10);\n  return resString\n    .replace(/([2468])(?=[2468])/g, '$1*')\n    .replace(/([13579])(?=[13579])/g, '$1-');\n}","position":{"start":{"line":14,"column":1,"offset":214},"end":{"line":21,"column":4,"offset":408},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Long Answer","position":{"start":{"line":23,"column":5,"offset":414},"end":{"line":23,"column":16,"offset":425},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":410},"end":{"line":23,"column":16,"offset":425},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function DashInsertII(num) {\n  // convert to string\n  const str = num.toString();\n  if (str.length < 2) {\n    return str;\n  }\n\n  let dashString = '';\n  // iterate through and compare prev to next\n  for (let i = 1; i < str.length; i++) {\n    // check odd, then check even\n    if (str[i - 1] === '0' || str[i] === '0') {\n      dashString += str[i - 1];\n    } else if (str[i - 1] % 2 === 1 && str[i] % 2 === 1) {\n      dashString += `${str[i - 1]}-`;\n    } else if (str[i - 1] % 2 === 0 && str[i] % 2 === 0) {\n      dashString += `${str[i - 1]}*`;\n    } else {\n      dashString += str[i - 1];\n    }\n  }\n\n  // add final el\n  dashString += str[str.length - 1];\n\n  // return str\n  return dashString;\n}","position":{"start":{"line":25,"column":1,"offset":427},"end":{"line":54,"column":4,"offset":1140},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":57,"column":1,"offset":1143},"end":{"line":57,"column":31,"offset":1173},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":57,"column":31,"offset":1173}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dash-insert-ii\"\n    }}>{`Dash Insert II`}</h1>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <h3 {...{\n      \"id\": \"short-answer\"\n    }}>{`Short Answer`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function DashInsertII(num) {\n  const resString = num.toString(10);\n  return resString\n    .replace(/([2468])(?=[2468])/g, '$1*')\n    .replace(/([13579])(?=[13579])/g, '$1-');\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"long-answer\"\n    }}>{`Long Answer`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function DashInsertII(num) {\n  // convert to string\n  const str = num.toString();\n  if (str.length < 2) {\n    return str;\n  }\n\n  let dashString = '';\n  // iterate through and compare prev to next\n  for (let i = 1; i < str.length; i++) {\n    // check odd, then check even\n    if (str[i - 1] === '0' || str[i] === '0') {\n      dashString += str[i - 1];\n    } else if (str[i - 1] % 2 === 1 && str[i] % 2 === 1) {\n      dashString += \\`\\${str[i - 1]}-\\`;\n    } else if (str[i - 1] % 2 === 0 && str[i] % 2 === 0) {\n      dashString += \\`\\${str[i - 1]}*\\`;\n    } else {\n      dashString += str[i - 1];\n    }\n  }\n\n  // add final el\n  dashString += str[str.length - 1];\n\n  // return str\n  return dashString;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}