{"expireTime":9007200852878371000,"key":"gatsby-plugin-mdx-entire-payload-dcdd193dee00da6ec4a7f6bbdceb3802-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"React Testing Library","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":24,"offset":190},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":24,"offset":190},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An example of the library in action:","position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":10,"column":37,"offset":228},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":10,"column":37,"offset":228},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"import * as React from 'react';\nimport { render, fireEvent } from '@testing-library/react';\nimport TeamDropdown from '../TeamDropdown';\n\nconst stubProps = {\n  isArchiveable: false,\n  editAction: jest.fn(),\n  archiveAction: jest.fn(),\n  deleteAction: jest.fn(),\n};\n\nconst Wrapper = (props: any = {}) => <TeamDropdown {...stubProps} {...props} />;\n\ndescribe('team dropdown state', () => {\n  test('should not be archivable when isArchiveable is false', () => {\n    const component = render(<Wrapper />);\n    fireEvent.click(component.getByText('Open menu'));\n\n    expect(component.queryByText('Archive')).toBeNull();\n  });\n\n  test('should be archivable when isArchiveable is true', () => {\n    const component = render(<Wrapper isArchiveable={true} />);\n    fireEvent.click(component.getByText('Open menu'));\n\n    expect(component.queryByText('Archive')).toBeTruthy();\n  });\n\n  test('should fire archive action', () => {\n    const component = render(<Wrapper isArchiveable={true} />);\n    fireEvent.click(component.getByText('Open menu'));\n    expect(component.queryByText('Archive')).toBeTruthy();\n\n    fireEvent.click(component.getByText('Archive'));\n    expect(stubProps.archiveAction).toBeCalled();\n  });\n\n  test('should fire edit action', () => {\n    const component = render(<Wrapper />);\n    fireEvent.click(component.getByText('Open menu'));\n    fireEvent.click(component.getByText('Edit'));\n    expect(stubProps.editAction).toBeCalled();\n  });\n\n  test('should fire delete action', () => {\n    const component = render(<Wrapper />);\n    fireEvent.click(component.getByText('Open menu'));\n    fireEvent.click(component.getByText('Delete'));\n    expect(stubProps.deleteAction).toBeCalled();\n  });\n});","position":{"start":{"line":12,"column":1,"offset":230},"end":{"line":64,"column":4,"offset":1951},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Mocking","position":{"start":{"line":66,"column":4,"offset":1956},"end":{"line":66,"column":11,"offset":1963},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1953},"end":{"line":66,"column":11,"offset":1963},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"// Component.tsx\n// super basic example w/ no types\nimport useAPIHook from 'path/to/hook';\nconst Component = () => {\n  const { data, loading } = useAPIHook(); // whatever you are getting destructured from the hook\n\n  if (loading) return <p data-automation-id=\"example-loading\">Loading</p>;\n\n  return <p data-automation-id=\"example-data\">Doing cool stuff with {data}</p>;\n};\n\n// Component.test.tsx\nimport Component from 'path/to/component';\nimport useAPIHook from 'path/to/hook';\njest.mock('path/to/hook');\ndescribe('useful description', () => {\n  test('component does this when data available', async () => {\n    useAPIHook.mockImplementation(() => ({\n      data: 'mocks',\n      loading: false,\n    }));\n    const { getByTestId } = await render(<Component />);\n    expect(getByTestId('example-data')).toBeTruthy();\n  });\n\n  test('component shows loading when API loading', async () => {\n    useAPIHook.mockImplementation(() => ({\n      data: 'mocks',\n      loading: true,\n    }));\n    const { getByTestId } = await render(<Component />);\n    expect(getByTestId('example-loading')).toBeTruthy();\n  });\n});","position":{"start":{"line":68,"column":1,"offset":1965},"end":{"line":103,"column":4,"offset":3087},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":106,"column":1,"offset":3090},"end":{"line":106,"column":31,"offset":3120},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":106,"column":31,"offset":3120}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-testing-library\"\n    }}>{`React Testing Library`}</h1>\n    <p>{`An example of the library in action:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import * as React from 'react';\nimport { render, fireEvent } from '@testing-library/react';\nimport TeamDropdown from '../TeamDropdown';\n\nconst stubProps = {\n  isArchiveable: false,\n  editAction: jest.fn(),\n  archiveAction: jest.fn(),\n  deleteAction: jest.fn(),\n};\n\nconst Wrapper = (props: any = {}) => <TeamDropdown {...stubProps} {...props} />;\n\ndescribe('team dropdown state', () => {\n  test('should not be archivable when isArchiveable is false', () => {\n    const component = render(<Wrapper />);\n    fireEvent.click(component.getByText('Open menu'));\n\n    expect(component.queryByText('Archive')).toBeNull();\n  });\n\n  test('should be archivable when isArchiveable is true', () => {\n    const component = render(<Wrapper isArchiveable={true} />);\n    fireEvent.click(component.getByText('Open menu'));\n\n    expect(component.queryByText('Archive')).toBeTruthy();\n  });\n\n  test('should fire archive action', () => {\n    const component = render(<Wrapper isArchiveable={true} />);\n    fireEvent.click(component.getByText('Open menu'));\n    expect(component.queryByText('Archive')).toBeTruthy();\n\n    fireEvent.click(component.getByText('Archive'));\n    expect(stubProps.archiveAction).toBeCalled();\n  });\n\n  test('should fire edit action', () => {\n    const component = render(<Wrapper />);\n    fireEvent.click(component.getByText('Open menu'));\n    fireEvent.click(component.getByText('Edit'));\n    expect(stubProps.editAction).toBeCalled();\n  });\n\n  test('should fire delete action', () => {\n    const component = render(<Wrapper />);\n    fireEvent.click(component.getByText('Open menu'));\n    fireEvent.click(component.getByText('Delete'));\n    expect(stubProps.deleteAction).toBeCalled();\n  });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mocking\"\n    }}>{`Mocking`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Component.tsx\n// super basic example w/ no types\nimport useAPIHook from 'path/to/hook';\nconst Component = () => {\n  const { data, loading } = useAPIHook(); // whatever you are getting destructured from the hook\n\n  if (loading) return <p data-automation-id=\"example-loading\">Loading</p>;\n\n  return <p data-automation-id=\"example-data\">Doing cool stuff with {data}</p>;\n};\n\n// Component.test.tsx\nimport Component from 'path/to/component';\nimport useAPIHook from 'path/to/hook';\njest.mock('path/to/hook');\ndescribe('useful description', () => {\n  test('component does this when data available', async () => {\n    useAPIHook.mockImplementation(() => ({\n      data: 'mocks',\n      loading: false,\n    }));\n    const { getByTestId } = await render(<Component />);\n    expect(getByTestId('example-data')).toBeTruthy();\n  });\n\n  test('component shows loading when API loading', async () => {\n    useAPIHook.mockImplementation(() => ({\n      data: 'mocks',\n      loading: true,\n    }));\n    const { getByTestId } = await render(<Component />);\n    expect(getByTestId('example-loading')).toBeTruthy();\n  });\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}