{"expireTime":9007200852878356000,"key":"gatsby-plugin-mdx-entire-payload-6548f5d5de5a597763760479670d9cf4-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":4,"offset":169},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Author: Dennis O'Keeffe","position":{"start":{"line":8,"column":1,"offset":170},"end":{"line":8,"column":24,"offset":193},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":170},"end":{"line":8,"column":24,"offset":193},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Section: Testing","position":{"start":{"line":9,"column":1,"offset":194},"end":{"line":9,"column":17,"offset":210},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":194},"end":{"line":10,"column":4,"offset":214},"indent":[1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Puppeteer","position":{"start":{"line":12,"column":3,"offset":218},"end":{"line":12,"column":12,"offset":227},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":216},"end":{"line":12,"column":12,"offset":227},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":14,"column":4,"offset":232},"end":{"line":14,"column":13,"offset":241},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":229},"end":{"line":14,"column":13,"offset":241},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://mochajs.org/","children":[{"type":"text","value":"Mocha Website","position":{"start":{"line":16,"column":4,"offset":246},"end":{"line":16,"column":17,"offset":259},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":245},"end":{"line":16,"column":40,"offset":282},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":245},"end":{"line":16,"column":40,"offset":282},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":243},"end":{"line":16,"column":40,"offset":282},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://www.chaijs.com/api/","children":[{"type":"text","value":"Chai API","position":{"start":{"line":17,"column":4,"offset":286},"end":{"line":17,"column":12,"offset":294},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":285},"end":{"line":17,"column":41,"offset":323},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":285},"end":{"line":17,"column":41,"offset":323},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":283},"end":{"line":17,"column":41,"offset":323},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://airbnb.io/enzyme/docs/api/","children":[{"type":"text","value":"Enzyme API","position":{"start":{"line":18,"column":4,"offset":327},"end":{"line":18,"column":14,"offset":337},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":326},"end":{"line":18,"column":50,"offset":373},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":326},"end":{"line":18,"column":50,"offset":373},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":324},"end":{"line":18,"column":50,"offset":373},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md","children":[{"type":"text","value":"Puppeteer API","position":{"start":{"line":19,"column":4,"offset":377},"end":{"line":19,"column":17,"offset":390},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":376},"end":{"line":19,"column":85,"offset":458},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":376},"end":{"line":19,"column":85,"offset":458},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":374},"end":{"line":19,"column":85,"offset":458},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":243},"end":{"line":19,"column":85,"offset":458},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Usage","position":{"start":{"line":21,"column":4,"offset":463},"end":{"line":21,"column":9,"offset":468},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":460},"end":{"line":21,"column":9,"offset":468},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To test the UI itself, we can use Puppeteer, Chrome's Headless Browser to evaluate on the UI itself. Puppeteer can also be set to have ","position":{"start":{"line":23,"column":1,"offset":470},"end":{"line":23,"column":136,"offset":605},"indent":[]}},{"type":"inlineCode","value":"headless: false","position":{"start":{"line":23,"column":136,"offset":605},"end":{"line":23,"column":153,"offset":622},"indent":[]}},{"type":"text","value":", allowing the user to record or watch the test on their screen.","position":{"start":{"line":23,"column":153,"offset":622},"end":{"line":23,"column":217,"offset":686},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":470},"end":{"line":23,"column":217,"offset":686},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const puppeteer = require('puppeteer');\n\n// Test suite\ndescribe('PageHome functionality', () => {\n  // Test suite within another test suite - useful for subsectioning tests within a component/page\n  describe('Simple Puppeteer UI test for form elements', () => {\n    it('firstName and lastName from Puppeteer deep equal expected schema', async () => {\n      const expected = {\n        firstName: 'Hello',\n        lastName: 'World'\n      };\n\n      const browser = await puppeteer.launch({ headless: false });\n      const page = await browser.newPage();\n      await page.goto('http://localhost:3000');\n      await page.screenshot({ path: 'example.png' }); // create an example screenshot of current UI state\n      await page.type('input[name=\"firstName\"]', 'Hello');\n      const firstName = await page.$eval(\n        'input[name=\"firstName\"]',\n        (el) => el.value\n      );\n\n      await page.waitFor(500);\n      await page.click('#next');\n      await page.waitForSelector('input[name=\"lastName\"]');\n      await page.type('input[name=\"lastName\"]', 'World');\n      const lastName = await page.$eval(\n        'input[name=\"lastName\"]',\n        (el) => el.value\n      );\n\n      await page.waitFor(500);\n      const formData = {\n        firstName: firstName,\n        lastName: lastName\n      };\n\n      await browser.close();\n\n      expect(formData).to.deep.equal(expected); // evauates to true if form fields hold correct value\n    });\n  });\n});","position":{"start":{"line":25,"column":1,"offset":688},"end":{"line":69,"column":4,"offset":2146},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Logging","position":{"start":{"line":71,"column":4,"offset":2151},"end":{"line":71,"column":11,"offset":2158},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2148},"end":{"line":71,"column":11,"offset":2158},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// output logs\npage.on('console', msg => console.log('PAGE LOG:', msg.text()));\n\n// show devtools\nconst browser = await puppeteer.launch({devtools: true});","position":{"start":{"line":73,"column":1,"offset":2160},"end":{"line":79,"column":4,"offset":2323},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":82,"column":1,"offset":2326},"end":{"line":82,"column":31,"offset":2356},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":82,"column":31,"offset":2356}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <hr></hr>\n    <p>{`Author: Dennis O'Keeffe`}</p>\n    <h2 {...{\n      \"id\": \"section-testing\"\n    }}>{`Section: Testing`}</h2>\n    <h1 {...{\n      \"id\": \"puppeteer\"\n    }}>{`Puppeteer`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://mochajs.org/\"\n        }}>{`Mocha Website`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.chaijs.com/api/\"\n        }}>{`Chai API`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://airbnb.io/enzyme/docs/api/\"\n        }}>{`Enzyme API`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md\"\n        }}>{`Puppeteer API`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`To test the UI itself, we can use Puppeteer, Chrome's Headless Browser to evaluate on the UI itself. Puppeteer can also be set to have `}<inlineCode parentName=\"p\">{`headless: false`}</inlineCode>{`, allowing the user to record or watch the test on their screen.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const puppeteer = require('puppeteer');\n\n// Test suite\ndescribe('PageHome functionality', () => {\n  // Test suite within another test suite - useful for subsectioning tests within a component/page\n  describe('Simple Puppeteer UI test for form elements', () => {\n    it('firstName and lastName from Puppeteer deep equal expected schema', async () => {\n      const expected = {\n        firstName: 'Hello',\n        lastName: 'World'\n      };\n\n      const browser = await puppeteer.launch({ headless: false });\n      const page = await browser.newPage();\n      await page.goto('http://localhost:3000');\n      await page.screenshot({ path: 'example.png' }); // create an example screenshot of current UI state\n      await page.type('input[name=\"firstName\"]', 'Hello');\n      const firstName = await page.$eval(\n        'input[name=\"firstName\"]',\n        (el) => el.value\n      );\n\n      await page.waitFor(500);\n      await page.click('#next');\n      await page.waitForSelector('input[name=\"lastName\"]');\n      await page.type('input[name=\"lastName\"]', 'World');\n      const lastName = await page.$eval(\n        'input[name=\"lastName\"]',\n        (el) => el.value\n      );\n\n      await page.waitFor(500);\n      const formData = {\n        firstName: firstName,\n        lastName: lastName\n      };\n\n      await browser.close();\n\n      expect(formData).to.deep.equal(expected); // evauates to true if form fields hold correct value\n    });\n  });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"logging\"\n    }}>{`Logging`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// output logs\npage.on('console', msg => console.log('PAGE LOG:', msg.text()));\n\n// show devtools\nconst browser = await puppeteer.launch({devtools: true});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}