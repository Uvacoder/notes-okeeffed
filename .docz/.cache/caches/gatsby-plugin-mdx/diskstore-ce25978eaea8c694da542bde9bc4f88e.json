{"expireTime":9007200867336001000,"key":"gatsby-plugin-mdx-entire-payload-797b464c5a307b9567b0d5293e309429-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"LRU Caches","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":13,"offset":179},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":13,"offset":179},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Question","position":{"start":{"line":10,"column":4,"offset":184},"end":{"line":10,"column":12,"offset":192},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":181},"end":{"line":10,"column":12,"offset":192},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Have the function LRUCache(strArr) take the array of characters stored in strArr, which will contain characters ranging from A to Z in some arbitrary order, and determine what elements still remain in a virtual cache that can hold up to 5 elements with an LRU cache algorithm implemented. For example: if strArr is ","position":{"start":{"line":12,"column":1,"offset":194},"end":{"line":12,"column":316,"offset":509},"indent":[]}},{"type":"linkReference","identifier":"\"a\", \"b\", \"c\", \"d\", \"a\", \"e\", \"d\", \"z\"","label":"\"A\", \"B\", \"C\", \"D\", \"A\", \"E\", \"D\", \"Z\"","referenceType":"shortcut","children":[{"type":"text","value":"\"A\", \"B\", \"C\", \"D\", \"A\", \"E\", \"D\", \"Z\"","position":{"start":{"line":12,"column":317,"offset":510},"end":{"line":12,"column":355,"offset":548},"indent":[]}}],"position":{"start":{"line":12,"column":316,"offset":509},"end":{"line":12,"column":356,"offset":549},"indent":[]}},{"type":"text","value":", then the following steps are taken:","position":{"start":{"line":12,"column":356,"offset":549},"end":{"line":12,"column":393,"offset":586},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":194},"end":{"line":12,"column":393,"offset":586},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"(1) A does not exist in the cache, so access it and store it in the cache.\n(2) B does not exist in the cache, so access it and store it in the cache as well. So far the cache contains: ","position":{"start":{"line":14,"column":1,"offset":588},"end":{"line":15,"column":111,"offset":773},"indent":[1]}},{"type":"linkReference","identifier":"\"a\", \"b\"","label":"\"A\", \"B\"","referenceType":"shortcut","children":[{"type":"text","value":"\"A\", \"B\"","position":{"start":{"line":15,"column":112,"offset":774},"end":{"line":15,"column":120,"offset":782},"indent":[]}}],"position":{"start":{"line":15,"column":111,"offset":773},"end":{"line":15,"column":121,"offset":783},"indent":[]}},{"type":"text","value":".\n(3) Same goes for C, so the cache is now: ","position":{"start":{"line":15,"column":121,"offset":783},"end":{"line":16,"column":43,"offset":827},"indent":[1]}},{"type":"linkReference","identifier":"\"a\", \"b\", \"c\"","label":"\"A\", \"B\", \"C\"","referenceType":"shortcut","children":[{"type":"text","value":"\"A\", \"B\", \"C\"","position":{"start":{"line":16,"column":44,"offset":828},"end":{"line":16,"column":57,"offset":841},"indent":[]}}],"position":{"start":{"line":16,"column":43,"offset":827},"end":{"line":16,"column":58,"offset":842},"indent":[]}},{"type":"text","value":".\n(4) Same goes for D, so the cache is now: ","position":{"start":{"line":16,"column":58,"offset":842},"end":{"line":17,"column":43,"offset":886},"indent":[1]}},{"type":"linkReference","identifier":"\"a\", \"b\", \"c\", \"d\"","label":"\"A\", \"B\", \"C\", \"D\"","referenceType":"shortcut","children":[{"type":"text","value":"\"A\", \"B\", \"C\", \"D\"","position":{"start":{"line":17,"column":44,"offset":887},"end":{"line":17,"column":62,"offset":905},"indent":[]}}],"position":{"start":{"line":17,"column":43,"offset":886},"end":{"line":17,"column":63,"offset":906},"indent":[]}},{"type":"text","value":".\n(5) Now A is accessed again, but it exists in the cache already so it is brought to the front: ","position":{"start":{"line":17,"column":63,"offset":906},"end":{"line":18,"column":96,"offset":1003},"indent":[1]}},{"type":"linkReference","identifier":"\"b\", \"c\", \"d\", \"a\"","label":"\"B\", \"C\", \"D\", \"A\"","referenceType":"shortcut","children":[{"type":"text","value":"\"B\", \"C\", \"D\", \"A\"","position":{"start":{"line":18,"column":97,"offset":1004},"end":{"line":18,"column":115,"offset":1022},"indent":[]}}],"position":{"start":{"line":18,"column":96,"offset":1003},"end":{"line":18,"column":116,"offset":1023},"indent":[]}},{"type":"text","value":".\n(6) E does not exist in the cache, so access it and store it in the cache: ","position":{"start":{"line":18,"column":116,"offset":1023},"end":{"line":19,"column":76,"offset":1100},"indent":[1]}},{"type":"linkReference","identifier":"\"b\", \"c\", \"d\", \"a\", \"e\"","label":"\"B\", \"C\", \"D\", \"A\", \"E\"","referenceType":"shortcut","children":[{"type":"text","value":"\"B\", \"C\", \"D\", \"A\", \"E\"","position":{"start":{"line":19,"column":77,"offset":1101},"end":{"line":19,"column":100,"offset":1124},"indent":[]}}],"position":{"start":{"line":19,"column":76,"offset":1100},"end":{"line":19,"column":101,"offset":1125},"indent":[]}},{"type":"text","value":".\n(7) D is accessed again so it is brought to the front: ","position":{"start":{"line":19,"column":101,"offset":1125},"end":{"line":20,"column":56,"offset":1182},"indent":[1]}},{"type":"linkReference","identifier":"\"b\", \"c\", \"a\", \"e\", \"d\"","label":"\"B\", \"C\", \"A\", \"E\", \"D\"","referenceType":"shortcut","children":[{"type":"text","value":"\"B\", \"C\", \"A\", \"E\", \"D\"","position":{"start":{"line":20,"column":57,"offset":1183},"end":{"line":20,"column":80,"offset":1206},"indent":[]}}],"position":{"start":{"line":20,"column":56,"offset":1182},"end":{"line":20,"column":81,"offset":1207},"indent":[]}},{"type":"text","value":".\n(8) Z does not exist in the cache so add it to the front and remove the least recently used element: ","position":{"start":{"line":20,"column":81,"offset":1207},"end":{"line":21,"column":102,"offset":1310},"indent":[1]}},{"type":"linkReference","identifier":"\"c\", \"a\", \"e\", \"d\", \"z\"","label":"\"C\", \"A\", \"E\", \"D\", \"Z\"","referenceType":"shortcut","children":[{"type":"text","value":"\"C\", \"A\", \"E\", \"D\", \"Z\"","position":{"start":{"line":21,"column":103,"offset":1311},"end":{"line":21,"column":126,"offset":1334},"indent":[]}}],"position":{"start":{"line":21,"column":102,"offset":1310},"end":{"line":21,"column":127,"offset":1335},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":21,"column":127,"offset":1335},"end":{"line":21,"column":128,"offset":1336},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":588},"end":{"line":21,"column":128,"offset":1336},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now the caching steps have been completed and your program should return the order of the cache with the elements joined into a string, separated by a hyphen. Therefore, for the example above your program should return C-A-E-D-Z.","position":{"start":{"line":23,"column":1,"offset":1338},"end":{"line":23,"column":230,"offset":1567},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1338},"end":{"line":23,"column":230,"offset":1567},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use the Parameter Testing feature in the box below to test your code with different arguments.","position":{"start":{"line":25,"column":1,"offset":1569},"end":{"line":25,"column":95,"offset":1663},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1569},"end":{"line":25,"column":95,"offset":1663},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Answer","position":{"start":{"line":27,"column":4,"offset":1668},"end":{"line":27,"column":10,"offset":1674},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1665},"end":{"line":27,"column":10,"offset":1674},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function LRUCache(strArr) {\n  let cache = [];\n\n  for (let char of strArr) {\n    // handle exists in cache\n    if (cache.includes(char)) {\n      cache.splice(cache.indexOf(char), 1);\n    } else if (cache.length >= 5) {\n      // unshift first el and apped\n      cache.shift();\n    }\n\n    cache.push(char);\n  }\n\n  // code goes here\n  return cache.join('-');\n}","position":{"start":{"line":29,"column":1,"offset":1676},"end":{"line":48,"column":4,"offset":2050},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":51,"column":1,"offset":2053},"end":{"line":51,"column":31,"offset":2083},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":51,"column":31,"offset":2083}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lru-caches\"\n    }}>{`LRU Caches`}</h1>\n    <h2 {...{\n      \"id\": \"question\"\n    }}>{`Question`}</h2>\n    <p>{`Have the function LRUCache(strArr) take the array of characters stored in strArr, which will contain characters ranging from A to Z in some arbitrary order, and determine what elements still remain in a virtual cache that can hold up to 5 elements with an LRU cache algorithm implemented. For example: if strArr is `}{`[\"A\", \"B\", \"C\", \"D\", \"A\", \"E\", \"D\", \"Z\"]`}{`, then the following steps are taken:`}</p>\n    <p>{`(1) A does not exist in the cache, so access it and store it in the cache.\n(2) B does not exist in the cache, so access it and store it in the cache as well. So far the cache contains: `}{`[\"A\", \"B\"]`}{`.\n(3) Same goes for C, so the cache is now: `}{`[\"A\", \"B\", \"C\"]`}{`.\n(4) Same goes for D, so the cache is now: `}{`[\"A\", \"B\", \"C\", \"D\"]`}{`.\n(5) Now A is accessed again, but it exists in the cache already so it is brought to the front: `}{`[\"B\", \"C\", \"D\", \"A\"]`}{`.\n(6) E does not exist in the cache, so access it and store it in the cache: `}{`[\"B\", \"C\", \"D\", \"A\", \"E\"]`}{`.\n(7) D is accessed again so it is brought to the front: `}{`[\"B\", \"C\", \"A\", \"E\", \"D\"]`}{`.\n(8) Z does not exist in the cache so add it to the front and remove the least recently used element: `}{`[\"C\", \"A\", \"E\", \"D\", \"Z\"]`}{`.`}</p>\n    <p>{`Now the caching steps have been completed and your program should return the order of the cache with the elements joined into a string, separated by a hyphen. Therefore, for the example above your program should return C-A-E-D-Z.`}</p>\n    <p>{`Use the Parameter Testing feature in the box below to test your code with different arguments.`}</p>\n    <h2 {...{\n      \"id\": \"answer\"\n    }}>{`Answer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function LRUCache(strArr) {\n  let cache = [];\n\n  for (let char of strArr) {\n    // handle exists in cache\n    if (cache.includes(char)) {\n      cache.splice(cache.indexOf(char), 1);\n    } else if (cache.length >= 5) {\n      // unshift first el and apped\n      cache.shift();\n    }\n\n    cache.push(char);\n  }\n\n  // code goes here\n  return cache.join('-');\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}