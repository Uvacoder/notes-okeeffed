{"expireTime":9007200852878359000,"key":"gatsby-plugin-mdx-entire-payload-5465dc333fff7e6356325e474b9edeea-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Golang Gin Stripe Configuration","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":34,"offset":200},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":34,"offset":200},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is a small \"Hello, World!\" to show a charge being made for Golang + Gin web server.","position":{"start":{"line":10,"column":1,"offset":202},"end":{"line":10,"column":89,"offset":290},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":202},"end":{"line":10,"column":89,"offset":290},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":12,"column":4,"offset":295},"end":{"line":12,"column":13,"offset":304},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":292},"end":{"line":12,"column":13,"offset":304},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://godoc.org/github.com/stripe/stripe-go#CardParams","children":[{"type":"text","value":"Go Docs Stripe","position":{"start":{"line":14,"column":5,"offset":310},"end":{"line":14,"column":19,"offset":324},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":309},"end":{"line":14,"column":78,"offset":383},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":309},"end":{"line":14,"column":78,"offset":383},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":306},"end":{"line":14,"column":78,"offset":383},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://godoc.org/github.com/stripe/stripe-go#CardParams","children":[{"type":"text","value":"Stripe API","position":{"start":{"line":15,"column":5,"offset":388},"end":{"line":15,"column":15,"offset":398},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":387},"end":{"line":15,"column":74,"offset":457},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":387},"end":{"line":15,"column":74,"offset":457},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":384},"end":{"line":15,"column":74,"offset":457},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://stripe.com/docs/testing#cards","children":[{"type":"text","value":"Stripe Testing Cards","position":{"start":{"line":16,"column":5,"offset":462},"end":{"line":16,"column":25,"offset":482},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":461},"end":{"line":16,"column":65,"offset":522},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":461},"end":{"line":16,"column":65,"offset":522},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":458},"end":{"line":16,"column":65,"offset":522},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/stripe/stripe-go/blob/master/charge/client_test.go","children":[{"type":"text","value":"Github Stripe Go Charge Testing","position":{"start":{"line":17,"column":5,"offset":527},"end":{"line":17,"column":36,"offset":558},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":526},"end":{"line":17,"column":108,"offset":630},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":526},"end":{"line":17,"column":108,"offset":630},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":523},"end":{"line":17,"column":108,"offset":630},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/gin-gonic/gin","children":[{"type":"text","value":"Gin Github","position":{"start":{"line":18,"column":5,"offset":635},"end":{"line":18,"column":15,"offset":645},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":634},"end":{"line":18,"column":50,"offset":680},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":634},"end":{"line":18,"column":50,"offset":680},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":631},"end":{"line":18,"column":50,"offset":680},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/joho/godotenv","children":[{"type":"text","value":"Golang Dotenv Github","position":{"start":{"line":19,"column":5,"offset":685},"end":{"line":19,"column":25,"offset":705},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":684},"end":{"line":19,"column":60,"offset":740},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":684},"end":{"line":19,"column":60,"offset":740},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":681},"end":{"line":19,"column":60,"offset":740},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":306},"end":{"line":19,"column":60,"offset":740},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting up","position":{"start":{"line":21,"column":4,"offset":745},"end":{"line":21,"column":14,"offset":755},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":742},"end":{"line":21,"column":14,"offset":755},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We need a few libs to get this all going. Run the following to fetch prerequisite packages:","position":{"start":{"line":23,"column":1,"offset":757},"end":{"line":23,"column":92,"offset":848},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":757},"end":{"line":23,"column":92,"offset":848},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"# Gin server lib\ngo get -u github.com/gin-gonic/gin\n# Stripe Go API\ngo get github.com/stripe/stripe-go\n# Dotenv package for Golang\ngo get github.com/joho/godotenv","position":{"start":{"line":25,"column":1,"offset":850},"end":{"line":32,"column":4,"offset":1025},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting up main.go","position":{"start":{"line":34,"column":4,"offset":1030},"end":{"line":34,"column":22,"offset":1048},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1027},"end":{"line":34,"column":22,"offset":1048},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Golang API (in my opinion) has some more complexity as opposed to others for setting up a basic charge.","position":{"start":{"line":36,"column":1,"offset":1050},"end":{"line":36,"column":108,"offset":1157},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1050},"end":{"line":36,"column":108,"offset":1157},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Reading over their tests (like resource ","position":{"start":{"line":38,"column":1,"offset":1159},"end":{"line":38,"column":41,"offset":1199},"indent":[]}},{"type":"linkReference","identifier":"4","label":"4","referenceType":"shortcut","children":[{"type":"text","value":"4","position":{"start":{"line":38,"column":42,"offset":1200},"end":{"line":38,"column":43,"offset":1201},"indent":[]}}],"position":{"start":{"line":38,"column":41,"offset":1199},"end":{"line":38,"column":44,"offset":1202},"indent":[]}},{"type":"text","value":") is the perfect way to see how to conform and adhere to the types -- particularly for our basic example.","position":{"start":{"line":38,"column":44,"offset":1202},"end":{"line":38,"column":149,"offset":1307},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1159},"end":{"line":38,"column":149,"offset":1307},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\nimport (\n        \"log\"\n        \"net/http\"\n        \"os\"\n\n        \"github.com/gin-gonic/gin\"\n        \"github.com/joho/godotenv\"\n        \"github.com/stripe/stripe-go\"\n        \"github.com/stripe/stripe-go/charge\"\n)\n\n// ChargeJSON incoming data for Stripe API\ntype ChargeJSON struct {\n        Amount       int64  `json:\"amount\"`\n        ReceiptEmail string `json:\"receiptEmail\"`\n}\n\nfunc main() {\n  // load .env file\n  err := godotenv.Load()\n  if err != nil {\n    log.Fatal(\"Error loading .env file\")\n  }\n\n  // set up server\n  r := gin.Default()\n\n  // basic hello world GET route\n  r.GET(\"/\", func(c *gin.Context) {\n    c.JSON(200, gin.H{\n            \"message\": \"Hello, World!\",\n    })\n  })\n\n  // our basic charge API route\n  r.POST(\"/api/charge\", func(c *gin.Context) {\n    // we will bind our JSON body to the `json` var\n    var json ChargeJSON\n    c.BindJSON(&json)\n\n    // Set Stripe API key\n    apiKey := os.Getenv(\"SK_TEST_KEY\")\n    stripe.Key = apiKey\n\n    // Attempt to make the charge.\n    // We are setting the charge response to _\n    // as we are not using it.\n    _, err := charge.New(&stripe.ChargeParams{\n      Amount:       stripe.Int64(json.Amount),\n      Currency:     stripe.String(string(stripe.CurrencyUSD)),\n      Source:       &stripe.SourceParams{Token: stripe.String(\"tok_visa\")}, // this should come from clientside\n      ReceiptEmail: stripe.String(json.ReceiptEmail)})\n\n    if err != nil {\n      // Handle any errors from attempt to charge\n      c.String(http.StatusBadRequest, \"Request failed\")\n      return\n    }\n\n    c.String(http.StatusCreated, \"Successfully charged\")\n  })\n\n  r.Run(\":8080\")\n}","position":{"start":{"line":40,"column":1,"offset":1309},"end":{"line":107,"column":4,"offset":2952},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Making A Test Charge","position":{"start":{"line":109,"column":4,"offset":2957},"end":{"line":109,"column":24,"offset":2977},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":2954},"end":{"line":109,"column":24,"offset":2977},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can run our server with the following:","position":{"start":{"line":111,"column":1,"offset":2979},"end":{"line":111,"column":42,"offset":3020},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":2979},"end":{"line":111,"column":42,"offset":3020},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"go run main.go","position":{"start":{"line":113,"column":1,"offset":3022},"end":{"line":115,"column":4,"offset":3049},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In another terminal, run ","position":{"start":{"line":117,"column":1,"offset":3051},"end":{"line":117,"column":26,"offset":3076},"indent":[]}},{"type":"inlineCode","value":"http POST http://localhost:8080/api/charge amount:=500 receiptEmail=hello@example.com","position":{"start":{"line":117,"column":26,"offset":3076},"end":{"line":117,"column":113,"offset":3163},"indent":[]}},{"type":"text","value":" (using HTTPie) and we will get back ","position":{"start":{"line":117,"column":113,"offset":3163},"end":{"line":117,"column":150,"offset":3200},"indent":[]}},{"type":"inlineCode","value":"Successfully charged","position":{"start":{"line":117,"column":150,"offset":3200},"end":{"line":117,"column":172,"offset":3222},"indent":[]}},{"type":"text","value":"! Hooray! We made it.","position":{"start":{"line":117,"column":172,"offset":3222},"end":{"line":117,"column":193,"offset":3243},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":3051},"end":{"line":117,"column":193,"offset":3243},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":120,"column":1,"offset":3246},"end":{"line":120,"column":31,"offset":3276},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":120,"column":31,"offset":3276}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"golang-gin-stripe-configuration\"\n    }}>{`Golang Gin Stripe Configuration`}</h1>\n    <p>{`This is a small \"Hello, World!\" to show a charge being made for Golang + Gin web server.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://godoc.org/github.com/stripe/stripe-go#CardParams\"\n        }}>{`Go Docs Stripe`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://godoc.org/github.com/stripe/stripe-go#CardParams\"\n        }}>{`Stripe API`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stripe.com/docs/testing#cards\"\n        }}>{`Stripe Testing Cards`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stripe/stripe-go/blob/master/charge/client_test.go\"\n        }}>{`Github Stripe Go Charge Testing`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/gin-gonic/gin\"\n        }}>{`Gin Github`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/joho/godotenv\"\n        }}>{`Golang Dotenv Github`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"setting-up\"\n    }}>{`Setting up`}</h2>\n    <p>{`We need a few libs to get this all going. Run the following to fetch prerequisite packages:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# Gin server lib\ngo get -u github.com/gin-gonic/gin\n# Stripe Go API\ngo get github.com/stripe/stripe-go\n# Dotenv package for Golang\ngo get github.com/joho/godotenv\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-maingo\"\n    }}>{`Setting up main.go`}</h2>\n    <p>{`The Golang API (in my opinion) has some more complexity as opposed to others for setting up a basic charge.`}</p>\n    <p>{`Reading over their tests (like resource `}{`[4]`}{`) is the perfect way to see how to conform and adhere to the types -- particularly for our basic example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n        \"log\"\n        \"net/http\"\n        \"os\"\n\n        \"github.com/gin-gonic/gin\"\n        \"github.com/joho/godotenv\"\n        \"github.com/stripe/stripe-go\"\n        \"github.com/stripe/stripe-go/charge\"\n)\n\n// ChargeJSON incoming data for Stripe API\ntype ChargeJSON struct {\n        Amount       int64  \\`json:\"amount\"\\`\n        ReceiptEmail string \\`json:\"receiptEmail\"\\`\n}\n\nfunc main() {\n  // load .env file\n  err := godotenv.Load()\n  if err != nil {\n    log.Fatal(\"Error loading .env file\")\n  }\n\n  // set up server\n  r := gin.Default()\n\n  // basic hello world GET route\n  r.GET(\"/\", func(c *gin.Context) {\n    c.JSON(200, gin.H{\n            \"message\": \"Hello, World!\",\n    })\n  })\n\n  // our basic charge API route\n  r.POST(\"/api/charge\", func(c *gin.Context) {\n    // we will bind our JSON body to the \\`json\\` var\n    var json ChargeJSON\n    c.BindJSON(&json)\n\n    // Set Stripe API key\n    apiKey := os.Getenv(\"SK_TEST_KEY\")\n    stripe.Key = apiKey\n\n    // Attempt to make the charge.\n    // We are setting the charge response to _\n    // as we are not using it.\n    _, err := charge.New(&stripe.ChargeParams{\n      Amount:       stripe.Int64(json.Amount),\n      Currency:     stripe.String(string(stripe.CurrencyUSD)),\n      Source:       &stripe.SourceParams{Token: stripe.String(\"tok_visa\")}, // this should come from clientside\n      ReceiptEmail: stripe.String(json.ReceiptEmail)})\n\n    if err != nil {\n      // Handle any errors from attempt to charge\n      c.String(http.StatusBadRequest, \"Request failed\")\n      return\n    }\n\n    c.String(http.StatusCreated, \"Successfully charged\")\n  })\n\n  r.Run(\":8080\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"making-a-test-charge\"\n    }}>{`Making A Test Charge`}</h2>\n    <p>{`We can run our server with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`go run main.go\n`}</code></pre>\n    <p>{`In another terminal, run `}<inlineCode parentName=\"p\">{`http POST http://localhost:8080/api/charge amount:=500 receiptEmail=hello@example.com`}</inlineCode>{` (using HTTPie) and we will get back `}<inlineCode parentName=\"p\">{`Successfully charged`}</inlineCode>{`! Hooray! We made it.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}