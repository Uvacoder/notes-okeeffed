{"expireTime":9007200867335897000,"key":"gatsby-plugin-mdx-entire-payload-78a8dfeeedda127cde47dd6acca3abac-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Swift 3 OOP","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":14,"offset":180},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":14,"offset":180},"indent":[]}},{"type":"jsx","value":"<!-- TOC -->autoauto- [Swift 3 OOP](#swift-3-oop)auto  - [Structs](#structs)auto  - [Instances of Objects](#instances-of-objects)auto  - [Methods](#methods)auto  - [Initialisers and Self](#initialisers-and-self)auto  - [Class](#class)auto  - [Inheritance](#inheritance)auto  - [Structs vs Classes](#structs-vs-classes)auto  - [Value type vs Reference type](#value-type-vs-reference-type)autoauto<!-- /TOC -->","position":{"start":{"line":10,"column":1,"offset":182},"end":{"line":10,"column":409,"offset":590},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":12,"column":1,"offset":592},"end":{"line":12,"column":4,"offset":595},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Structs","position":{"start":{"line":14,"column":4,"offset":600},"end":{"line":14,"column":11,"offset":607},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":597},"end":{"line":14,"column":11,"offset":607},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let coordinate1: (x: Int, y: Int) = (1,0) //tuple\ncoordinate1.x\n\n// structs are the blueprints\nstruct Point {\n  let x: Int\n  let y: Int\n}\n\n// when defining structs, define the params\nlet p1 = Point(x: 1, y: 0)\np1","position":{"start":{"line":16,"column":1,"offset":609},"end":{"line":29,"column":4,"offset":829},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":31,"column":1,"offset":831},"end":{"line":31,"column":4,"offset":834},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Instances of Objects","position":{"start":{"line":33,"column":4,"offset":839},"end":{"line":33,"column":24,"offset":859},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":836},"end":{"line":33,"column":24,"offset":859},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// when defining structs, define the params\nlet p1 = Point(x: 1, y: 0)\np1\np1.x\np1.y\n\nstruct User {\n  let username: String\n  let password: String\n}\n\nlet Login = User(username: \"example@mail.com\", password: \"123pass\")\nLogin.username\nLogin.password","position":{"start":{"line":35,"column":1,"offset":861},"end":{"line":50,"column":4,"offset":1114},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":54,"column":1,"offset":1118},"end":{"line":54,"column":4,"offset":1121},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Methods","position":{"start":{"line":56,"column":4,"offset":1126},"end":{"line":56,"column":11,"offset":1133},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1123},"end":{"line":56,"column":11,"offset":1133},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Declaring empty arrays that infer a type ","position":{"start":{"line":58,"column":3,"offset":1137},"end":{"line":58,"column":44,"offset":1178},"indent":[]}},{"type":"inlineCode","value":"var results: [Point] = []","position":{"start":{"line":58,"column":44,"offset":1178},"end":{"line":58,"column":71,"offset":1205},"indent":[]}}],"position":{"start":{"line":58,"column":3,"offset":1137},"end":{"line":58,"column":71,"offset":1205},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1135},"end":{"line":58,"column":71,"offset":1205},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Declaring it the preferred way ","position":{"start":{"line":59,"column":3,"offset":1208},"end":{"line":59,"column":34,"offset":1239},"indent":[]}},{"type":"inlineCode","value":"var results = [Point]()","position":{"start":{"line":59,"column":34,"offset":1239},"end":{"line":59,"column":59,"offset":1264},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":1208},"end":{"line":59,"column":59,"offset":1264},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1206},"end":{"line":59,"column":59,"offset":1264},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1135},"end":{"line":59,"column":59,"offset":1264},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"struct PointTwo {\n  let x: Int\n  let y: Int\n\n  // three slashes helps with definitions\n\n  /// Returns the surrounding points in range of\n  /// the current one\n  func points(inRange range: Int = 1) -> [PointTwo] {\n    var results = [PointTwo]()\n\n    let lowerBoundOfXRange = x - range\n    let upperBoundOfXRange = x + range\n\n    let lowerBoundOfYRange = y - range\n    let upperBoundOfYRange = y + range\n\n    for xCoordinate in lowerBoundOfXRange...upperBoundOfXRange {\n      for yCoordinate in lowerBoundOfYRange...upperBoundOfYRange {\n        let coordinatePoint = PointTwo(x: xCoordinate, y: yCoordinate)\n        results.append(coordinatePoint)\n      }\n    }\n\n    return results\n  }\n}\n\nlet p2 = PointTwo(x: 1, y: 0)\np2.x\np2.y\n\nlet rangeReturn = p2.points(inRange: 3)\nrangeReturn[0].x\nrangeReturn[3].y\n\nstruct Person {\n    let firstName: String\n    let lastName: String\n\n    func fullName() -> String {\n      return firstName + \" \" + lastName\n    }\n}\n\nlet aPerson = Person(firstName: \"Billy\", lastName: \"Bob\")\nlet myFullName = aPerson.fullName()","position":{"start":{"line":61,"column":1,"offset":1266},"end":{"line":109,"column":4,"offset":2319},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":111,"column":1,"offset":2321},"end":{"line":111,"column":4,"offset":2324},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Initialisers and Self","position":{"start":{"line":113,"column":4,"offset":2329},"end":{"line":113,"column":25,"offset":2350},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":2326},"end":{"line":113,"column":25,"offset":2350},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Self is generally only used in Swift in the init method or when differentiating","position":{"start":{"line":115,"column":1,"offset":2352},"end":{"line":115,"column":80,"offset":2431},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":2352},"end":{"line":115,"column":80,"offset":2431},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"struct Point {\n  let x: Int\n  let y: Int\n\n  init(x: Int, y: Int) {\n    self.x = x;\n    self.y = x;\n  }\n}\n\nstruct RGBColor {\n  let red: Double\n  let green: Double\n  let blue: Double\n  let alpha: Double\n\n  let description: String\n\n  // Add your code below\n  init(red: Double, green: Double, blue: Double, alpha: Double) {\n    self.red = red\n    self.green = green\n    self.blue = blue\n    self.alpha = alpha\n\n    self.description = \"red: \\(self.red), green: \\(self.green), blue: \\(self.blue), alpha: \\(self.alpha)\"\n  }\n}\n\nlet test = RGBColor(red: 16.0, green: 5.0, blue: 4.3, alpha: 3.0)\ntest.description","position":{"start":{"line":117,"column":1,"offset":2433},"end":{"line":149,"column":4,"offset":3043},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":153,"column":1,"offset":3047},"end":{"line":153,"column":4,"offset":3050},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Class","position":{"start":{"line":155,"column":4,"offset":3055},"end":{"line":155,"column":9,"offset":3060},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":3052},"end":{"line":155,"column":9,"offset":3060},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"class Enemy {\n  var life: Int = 2\n  let position: Point\n\n  init(x: Int, y: Int) {\n    self.position = Point(x: x, y: y)\n  }\n\n  func decreaseLife(by factor: Int) {\n    life -= factor\n  }\n\n}\n\nstruct Location {\n  let latitude: Double\n  let longitude: Double\n}\n\nclass Business {\n  var name: String\n  var location: Location\n\n  init(name: String, location: Location) {\n    self.name = name\n    self.location = location\n  }\n}\n\nlet someBusiness = Business(name: \"Quiry\", location: Location(latitude: 341, longitude: 82))","position":{"start":{"line":157,"column":1,"offset":3062},"end":{"line":188,"column":4,"offset":3587},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":192,"column":1,"offset":3591},"end":{"line":192,"column":4,"offset":3594},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Inheritance","position":{"start":{"line":194,"column":4,"offset":3599},"end":{"line":194,"column":15,"offset":3610},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":3596},"end":{"line":194,"column":15,"offset":3610},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"class SuperEnemy: Enemy {\n  let isSuper: Bool = true\n\n  override init(x: Int, y: Int) {\n    super.init(x: x, y: y)\n    self.life = 50\n  }\n}","position":{"start":{"line":196,"column":1,"offset":3612},"end":{"line":205,"column":4,"offset":3759},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"class Vehicle {\n  var numberOfDoors: Int\n  var numberOfWheels: Int\n\n  init(withDoors doors: Int, andWheels wheels: Int) {\n      self.numberOfDoors = doors\n      self.numberOfWheels = wheels\n  }\n}\n\nclass Car: Vehicle {\n  var numberOfSeats: Int = 4\n\n  override init(withDoors doors: Int, andWheels wheels: Int) {\n    super.init(withDoors: doors, andWheels: wheels)\n  }\n\n}\n\nlet someCar = Car(withDoors: 4, andWheels: 4)","position":{"start":{"line":207,"column":1,"offset":3761},"end":{"line":228,"column":4,"offset":4185},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"class Person {\n  let firstName: String\n  let lastName: String\n\n  init(firstName: String, lastName: String) {\n    self.firstName = firstName\n    self.lastName = lastName\n  }\n\n  func fullName() -> String {\n    return \"\\(firstName) \\(lastName)\"\n  }\n}\n\n// Enter your code below\nclass Doctor: Person {\n\n  override init(firstName: String, lastName: String) {\n    super.init(firstName: firstName, lastName: lastName)\n  }\n\n  override func fullName() -> String {\n    return \"Dr. \\(lastName)\"\n  }\n}\n\nlet someDoctor = Doctor(firstName: \"Sam\", lastName: \"Smith\")","position":{"start":{"line":230,"column":1,"offset":4187},"end":{"line":258,"column":4,"offset":4745},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":262,"column":1,"offset":4749},"end":{"line":262,"column":4,"offset":4752},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Structs vs Classes","position":{"start":{"line":264,"column":4,"offset":4757},"end":{"line":264,"column":22,"offset":4775},"indent":[]}}],"position":{"start":{"line":264,"column":1,"offset":4754},"end":{"line":264,"column":22,"offset":4775},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Distinct line in the sand.","position":{"start":{"line":266,"column":1,"offset":4777},"end":{"line":266,"column":27,"offset":4803},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":4777},"end":{"line":266,"column":27,"offset":4803},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"import UIKit\n\nvar str = \"Hello, playground\"\n\n\nstruct User {\n  var fullName: String\n  var email: String\n  var age: Int\n}\n\nvar someUser = User(fullName: \"Denis O'Keeffe\", email: \"test@test\", age: 24)\nvar anotherUser = someUser\n\nsomeUser.email = \"newemail@email\"\n\n// remains as test@test\nanotherUser.email\n\nclass Person {\n  var fullName: String\n  var email: String\n  var age: Int\n\n  init(name: String, email: String, age: Int) {\n    self.fullName = name\n    self.email = email\n    self.age = age\n  }\n}\n\nvar somePerson = Person(name: \"Tim Cook\", email: \"tc@apple.com\", age: 54)\n\nvar anotherPerson = somePerson\n\nsomePerson.email = \"newemail@email\"\n\n// newemail@email -> points to the same reference\nanotherPerson.email","position":{"start":{"line":268,"column":1,"offset":4805},"end":{"line":308,"column":4,"offset":5531},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Value type vs Reference type","position":{"start":{"line":312,"column":4,"offset":5538},"end":{"line":312,"column":32,"offset":5566},"indent":[]}}],"position":{"start":{"line":312,"column":1,"offset":5535},"end":{"line":312,"column":32,"offset":5566},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Values are copied across, references are not. All ","position":{"start":{"line":314,"column":1,"offset":5568},"end":{"line":314,"column":51,"offset":5618},"indent":[]}},{"type":"inlineCode","value":"structs","position":{"start":{"line":314,"column":51,"offset":5618},"end":{"line":314,"column":60,"offset":5627},"indent":[]}},{"type":"text","value":" are value types.","position":{"start":{"line":314,"column":60,"offset":5627},"end":{"line":314,"column":77,"offset":5644},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":5568},"end":{"line":314,"column":77,"offset":5644},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":317,"column":1,"offset":5647},"end":{"line":317,"column":31,"offset":5677},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":317,"column":31,"offset":5677}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"swift-3-oop\"\n    }}>{`Swift 3 OOP`}</h1>\n    {\n      /* TOC -->autoauto- [Swift 3 OOP](#swift-3-oop)auto  - [Structs](#structs)auto  - [Instances of Objects](#instances-of-objects)auto  - [Methods](#methods)auto  - [Initialisers and Self](#initialisers-and-self)auto  - [Class](#class)auto  - [Inheritance](#inheritance)auto  - [Structs vs Classes](#structs-vs-classes)auto  - [Value type vs Reference type](#value-type-vs-reference-type)autoauto<!-- /TOC */\n    }\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"structs\"\n    }}>{`Structs`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`let coordinate1: (x: Int, y: Int) = (1,0) //tuple\ncoordinate1.x\n\n// structs are the blueprints\nstruct Point {\n  let x: Int\n  let y: Int\n}\n\n// when defining structs, define the params\nlet p1 = Point(x: 1, y: 0)\np1\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"instances-of-objects\"\n    }}>{`Instances of Objects`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// when defining structs, define the params\nlet p1 = Point(x: 1, y: 0)\np1\np1.x\np1.y\n\nstruct User {\n  let username: String\n  let password: String\n}\n\nlet Login = User(username: \"example@mail.com\", password: \"123pass\")\nLogin.username\nLogin.password\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Declaring empty arrays that infer a type `}<inlineCode parentName=\"li\">{`var results: [Point] = []`}</inlineCode></li>\n      <li parentName=\"ul\">{`Declaring it the preferred way `}<inlineCode parentName=\"li\">{`var results = [Point]()`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`struct PointTwo {\n  let x: Int\n  let y: Int\n\n  // three slashes helps with definitions\n\n  /// Returns the surrounding points in range of\n  /// the current one\n  func points(inRange range: Int = 1) -> [PointTwo] {\n    var results = [PointTwo]()\n\n    let lowerBoundOfXRange = x - range\n    let upperBoundOfXRange = x + range\n\n    let lowerBoundOfYRange = y - range\n    let upperBoundOfYRange = y + range\n\n    for xCoordinate in lowerBoundOfXRange...upperBoundOfXRange {\n      for yCoordinate in lowerBoundOfYRange...upperBoundOfYRange {\n        let coordinatePoint = PointTwo(x: xCoordinate, y: yCoordinate)\n        results.append(coordinatePoint)\n      }\n    }\n\n    return results\n  }\n}\n\nlet p2 = PointTwo(x: 1, y: 0)\np2.x\np2.y\n\nlet rangeReturn = p2.points(inRange: 3)\nrangeReturn[0].x\nrangeReturn[3].y\n\nstruct Person {\n    let firstName: String\n    let lastName: String\n\n    func fullName() -> String {\n      return firstName + \" \" + lastName\n    }\n}\n\nlet aPerson = Person(firstName: \"Billy\", lastName: \"Bob\")\nlet myFullName = aPerson.fullName()\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"initialisers-and-self\"\n    }}>{`Initialisers and Self`}</h2>\n    <p>{`Self is generally only used in Swift in the init method or when differentiating`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`struct Point {\n  let x: Int\n  let y: Int\n\n  init(x: Int, y: Int) {\n    self.x = x;\n    self.y = x;\n  }\n}\n\nstruct RGBColor {\n  let red: Double\n  let green: Double\n  let blue: Double\n  let alpha: Double\n\n  let description: String\n\n  // Add your code below\n  init(red: Double, green: Double, blue: Double, alpha: Double) {\n    self.red = red\n    self.green = green\n    self.blue = blue\n    self.alpha = alpha\n\n    self.description = \"red: \\\\(self.red), green: \\\\(self.green), blue: \\\\(self.blue), alpha: \\\\(self.alpha)\"\n  }\n}\n\nlet test = RGBColor(red: 16.0, green: 5.0, blue: 4.3, alpha: 3.0)\ntest.description\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"class\"\n    }}>{`Class`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class Enemy {\n  var life: Int = 2\n  let position: Point\n\n  init(x: Int, y: Int) {\n    self.position = Point(x: x, y: y)\n  }\n\n  func decreaseLife(by factor: Int) {\n    life -= factor\n  }\n\n}\n\nstruct Location {\n  let latitude: Double\n  let longitude: Double\n}\n\nclass Business {\n  var name: String\n  var location: Location\n\n  init(name: String, location: Location) {\n    self.name = name\n    self.location = location\n  }\n}\n\nlet someBusiness = Business(name: \"Quiry\", location: Location(latitude: 341, longitude: 82))\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"inheritance\"\n    }}>{`Inheritance`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`class SuperEnemy: Enemy {\n  let isSuper: Bool = true\n\n  override init(x: Int, y: Int) {\n    super.init(x: x, y: y)\n    self.life = 50\n  }\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`class Vehicle {\n  var numberOfDoors: Int\n  var numberOfWheels: Int\n\n  init(withDoors doors: Int, andWheels wheels: Int) {\n      self.numberOfDoors = doors\n      self.numberOfWheels = wheels\n  }\n}\n\nclass Car: Vehicle {\n  var numberOfSeats: Int = 4\n\n  override init(withDoors doors: Int, andWheels wheels: Int) {\n    super.init(withDoors: doors, andWheels: wheels)\n  }\n\n}\n\nlet someCar = Car(withDoors: 4, andWheels: 4)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`class Person {\n  let firstName: String\n  let lastName: String\n\n  init(firstName: String, lastName: String) {\n    self.firstName = firstName\n    self.lastName = lastName\n  }\n\n  func fullName() -> String {\n    return \"\\\\(firstName) \\\\(lastName)\"\n  }\n}\n\n// Enter your code below\nclass Doctor: Person {\n\n  override init(firstName: String, lastName: String) {\n    super.init(firstName: firstName, lastName: lastName)\n  }\n\n  override func fullName() -> String {\n    return \"Dr. \\\\(lastName)\"\n  }\n}\n\nlet someDoctor = Doctor(firstName: \"Sam\", lastName: \"Smith\")\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"structs-vs-classes\"\n    }}>{`Structs vs Classes`}</h2>\n    <p>{`Distinct line in the sand.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import UIKit\n\nvar str = \"Hello, playground\"\n\n\nstruct User {\n  var fullName: String\n  var email: String\n  var age: Int\n}\n\nvar someUser = User(fullName: \"Denis O'Keeffe\", email: \"test@test\", age: 24)\nvar anotherUser = someUser\n\nsomeUser.email = \"newemail@email\"\n\n// remains as test@test\nanotherUser.email\n\nclass Person {\n  var fullName: String\n  var email: String\n  var age: Int\n\n  init(name: String, email: String, age: Int) {\n    self.fullName = name\n    self.email = email\n    self.age = age\n  }\n}\n\nvar somePerson = Person(name: \"Tim Cook\", email: \"tc@apple.com\", age: 54)\n\nvar anotherPerson = somePerson\n\nsomePerson.email = \"newemail@email\"\n\n// newemail@email -> points to the same reference\nanotherPerson.email\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"value-type-vs-reference-type\"\n    }}>{`Value type vs Reference type`}</h2>\n    <p>{`Values are copied across, references are not. All `}<inlineCode parentName=\"p\">{`structs`}</inlineCode>{` are value types.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}