{"expireTime":9007200848610905000,"key":"gatsby-plugin-mdx-entire-payload-c790a1be4e4de19de125fb5e94b63aef-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Learn You A Haskell","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":22,"offset":188},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":22,"offset":188},"indent":[]}},{"type":"import","value":"import 'katex/dist/katex.min.css';\nimport { BlockMath } from 'react-katex';","position":{"start":{"line":10,"column":1,"offset":190},"end":{"line":11,"column":41,"offset":265},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Everything here comes from the learning resources found at the ","position":{"start":{"line":13,"column":1,"offset":267},"end":{"line":13,"column":64,"offset":330},"indent":[]}},{"type":"link","title":null,"url":"http://learnyouahaskell.com/","children":[{"type":"text","value":"Learn You A Haskell","position":{"start":{"line":13,"column":65,"offset":331},"end":{"line":13,"column":84,"offset":350},"indent":[]}}],"position":{"start":{"line":13,"column":64,"offset":330},"end":{"line":13,"column":115,"offset":381},"indent":[]}},{"type":"text","value":" website.","position":{"start":{"line":13,"column":115,"offset":381},"end":{"line":13,"column":124,"offset":390},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":267},"end":{"line":13,"column":124,"offset":390},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Interactive prompt","position":{"start":{"line":15,"column":4,"offset":395},"end":{"line":15,"column":22,"offset":413},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":392},"end":{"line":15,"column":22,"offset":413},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Command","position":{"start":{"line":17,"column":3,"offset":417},"end":{"line":17,"column":10,"offset":424},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":417},"end":{"line":17,"column":17,"offset":431},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Definition","position":{"start":{"line":17,"column":20,"offset":434},"end":{"line":17,"column":30,"offset":444},"indent":[]}}],"position":{"start":{"line":17,"column":20,"offset":434},"end":{"line":17,"column":68,"offset":482},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":415},"end":{"line":17,"column":70,"offset":484},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"stack ghci","position":{"start":{"line":19,"column":3,"offset":557},"end":{"line":19,"column":13,"offset":567},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":557},"end":{"line":19,"column":17,"offset":571},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Begin Haskell REPL","position":{"start":{"line":19,"column":20,"offset":574},"end":{"line":19,"column":38,"offset":592},"indent":[]}}],"position":{"start":{"line":19,"column":20,"offset":574},"end":{"line":19,"column":68,"offset":622},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":555},"end":{"line":19,"column":70,"offset":624},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":":l myfunctions","position":{"start":{"line":20,"column":3,"offset":627},"end":{"line":20,"column":17,"offset":641},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":627},"end":{"line":20,"column":17,"offset":641},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Import defined functions from ","position":{"start":{"line":20,"column":20,"offset":644},"end":{"line":20,"column":50,"offset":674},"indent":[]}},{"type":"inlineCode","value":"./myfunctions.hs","position":{"start":{"line":20,"column":50,"offset":674},"end":{"line":20,"column":68,"offset":692},"indent":[]}}],"position":{"start":{"line":20,"column":20,"offset":644},"end":{"line":20,"column":68,"offset":692},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":625},"end":{"line":20,"column":70,"offset":694},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":":r","position":{"start":{"line":21,"column":3,"offset":697},"end":{"line":21,"column":5,"offset":699},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":697},"end":{"line":21,"column":17,"offset":711},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Reloads current script","position":{"start":{"line":21,"column":20,"offset":714},"end":{"line":21,"column":42,"offset":736},"indent":[]}}],"position":{"start":{"line":21,"column":20,"offset":714},"end":{"line":21,"column":68,"offset":762},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":695},"end":{"line":21,"column":70,"offset":764},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":":quit","position":{"start":{"line":22,"column":3,"offset":767},"end":{"line":22,"column":8,"offset":772},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":767},"end":{"line":22,"column":17,"offset":781},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Quick the REPL","position":{"start":{"line":22,"column":20,"offset":784},"end":{"line":22,"column":34,"offset":798},"indent":[]}}],"position":{"start":{"line":22,"column":20,"offset":784},"end":{"line":22,"column":68,"offset":832},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":765},"end":{"line":22,"column":70,"offset":834},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":415},"end":{"line":22,"column":70,"offset":834},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Bootstrap Learning Haskell","position":{"start":{"line":24,"column":4,"offset":839},"end":{"line":24,"column":30,"offset":865},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":836},"end":{"line":24,"column":30,"offset":865},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Command","position":{"start":{"line":26,"column":3,"offset":869},"end":{"line":26,"column":10,"offset":876},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":869},"end":{"line":26,"column":18,"offset":884},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Definition","position":{"start":{"line":26,"column":21,"offset":887},"end":{"line":26,"column":31,"offset":897},"indent":[]}}],"position":{"start":{"line":26,"column":21,"offset":887},"end":{"line":26,"column":52,"offset":918},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":867},"end":{"line":26,"column":54,"offset":920},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"+ - * /","position":{"start":{"line":28,"column":3,"offset":977},"end":{"line":28,"column":12,"offset":986},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":977},"end":{"line":28,"column":18,"offset":992},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Simple arithmetic","position":{"start":{"line":28,"column":21,"offset":995},"end":{"line":28,"column":38,"offset":1012},"indent":[]}}],"position":{"start":{"line":28,"column":21,"offset":995},"end":{"line":28,"column":52,"offset":1026},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":975},"end":{"line":28,"column":54,"offset":1028},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"True && False","position":{"start":{"line":29,"column":3,"offset":1031},"end":{"line":29,"column":18,"offset":1046},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":1031},"end":{"line":29,"column":18,"offset":1046},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Booleans - evaluates to ","position":{"start":{"line":29,"column":21,"offset":1049},"end":{"line":29,"column":45,"offset":1073},"indent":[]}},{"type":"inlineCode","value":"False","position":{"start":{"line":29,"column":45,"offset":1073},"end":{"line":29,"column":52,"offset":1080},"indent":[]}}],"position":{"start":{"line":29,"column":21,"offset":1049},"end":{"line":29,"column":52,"offset":1080},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1029},"end":{"line":29,"column":54,"offset":1082},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"inlineCode","value":"==","position":{"start":{"line":30,"column":3,"offset":1085},"end":{"line":30,"column":7,"offset":1089},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":30,"column":7,"offset":1089},"end":{"line":30,"column":12,"offset":1094},"indent":[]}},{"type":"inlineCode","value":"/=","position":{"start":{"line":30,"column":12,"offset":1094},"end":{"line":30,"column":16,"offset":1098},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1085},"end":{"line":30,"column":18,"offset":1100},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Equals, not equals","position":{"start":{"line":30,"column":21,"offset":1103},"end":{"line":30,"column":39,"offset":1121},"indent":[]}}],"position":{"start":{"line":30,"column":21,"offset":1103},"end":{"line":30,"column":52,"offset":1134},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1083},"end":{"line":30,"column":54,"offset":1136},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":867},"end":{"line":30,"column":54,"offset":1136},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Functions","position":{"start":{"line":32,"column":4,"offset":1141},"end":{"line":32,"column":13,"offset":1150},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1138},"end":{"line":32,"column":13,"offset":1150},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"*","position":{"start":{"line":34,"column":1,"offset":1152},"end":{"line":34,"column":4,"offset":1155},"indent":[]}},{"type":"text","value":" is a function that takes two numbers and multiplies them. This is an ","position":{"start":{"line":34,"column":4,"offset":1155},"end":{"line":34,"column":74,"offset":1225},"indent":[]}},{"type":"inlineCode","value":"infix","position":{"start":{"line":34,"column":74,"offset":1225},"end":{"line":34,"column":81,"offset":1232},"indent":[]}},{"type":"text","value":" function. Most functions that aren't used with numbers are ","position":{"start":{"line":34,"column":81,"offset":1232},"end":{"line":34,"column":141,"offset":1292},"indent":[]}},{"type":"inlineCode","value":"prefix","position":{"start":{"line":34,"column":141,"offset":1292},"end":{"line":34,"column":149,"offset":1300},"indent":[]}},{"type":"text","value":" functions.","position":{"start":{"line":34,"column":149,"offset":1300},"end":{"line":34,"column":160,"offset":1311},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1152},"end":{"line":34,"column":160,"offset":1311},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, take ","position":{"start":{"line":36,"column":1,"offset":1313},"end":{"line":36,"column":19,"offset":1331},"indent":[]}},{"type":"inlineCode","value":"min","position":{"start":{"line":36,"column":19,"offset":1331},"end":{"line":36,"column":24,"offset":1336},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":36,"column":24,"offset":1336},"end":{"line":36,"column":28,"offset":1340},"indent":[]}},{"type":"inlineCode","value":"max","position":{"start":{"line":36,"column":28,"offset":1340},"end":{"line":36,"column":33,"offset":1345},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":36,"column":33,"offset":1345},"end":{"line":36,"column":34,"offset":1346},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1313},"end":{"line":36,"column":34,"offset":1346},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"min 9 10\n-- ^ 9\nmax 9 10\n-- ^ 10","position":{"start":{"line":38,"column":1,"offset":1348},"end":{"line":43,"column":4,"offset":1395},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note that ","position":{"start":{"line":45,"column":1,"offset":1397},"end":{"line":45,"column":11,"offset":1407},"indent":[]}},{"type":"inlineCode","value":"function application","position":{"start":{"line":45,"column":11,"offset":1407},"end":{"line":45,"column":33,"offset":1429},"indent":[]}},{"type":"text","value":" (calling a function by putting a space after it and then typing out the parameters) has the highest precedence of them all. What that means for us is that these two statements are equivalent.","position":{"start":{"line":45,"column":33,"offset":1429},"end":{"line":45,"column":225,"offset":1621},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1397},"end":{"line":45,"column":225,"offset":1621},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"ghci> succ 9 + max 5 4 + 1\n16\nghci> (succ 9) + (max 5 4) + 1\n16","position":{"start":{"line":47,"column":1,"offset":1623},"end":{"line":52,"column":4,"offset":1695},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Writing Functions","position":{"start":{"line":54,"column":4,"offset":1700},"end":{"line":54,"column":21,"offset":1717},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1697},"end":{"line":54,"column":21,"offset":1717},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Functions are defined in a similar manner to how they are called.","position":{"start":{"line":56,"column":1,"offset":1719},"end":{"line":56,"column":66,"offset":1784},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1719},"end":{"line":56,"column":66,"offset":1784},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"doubleMe x = x + x\ndoubleMe 4\n-- ^ returns 8","position":{"start":{"line":58,"column":1,"offset":1786},"end":{"line":62,"column":4,"offset":1845},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To write it as a module, touch ","position":{"start":{"line":64,"column":1,"offset":1847},"end":{"line":64,"column":32,"offset":1878},"indent":[]}},{"type":"inlineCode","value":"DoubleMe.hs","position":{"start":{"line":64,"column":32,"offset":1878},"end":{"line":64,"column":45,"offset":1891},"indent":[]}},{"type":"text","value":" and add:","position":{"start":{"line":64,"column":45,"offset":1891},"end":{"line":64,"column":54,"offset":1900},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":1847},"end":{"line":64,"column":54,"offset":1900},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"module DoubleMe (\n  doubleMe\n) where\n\ndoubleMe :: Int -> Int\ndoubleMe x = x + x","position":{"start":{"line":66,"column":1,"offset":1902},"end":{"line":73,"column":4,"offset":1996},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then, inside the REPL, run ","position":{"start":{"line":75,"column":1,"offset":1998},"end":{"line":75,"column":28,"offset":2025},"indent":[]}},{"type":"inlineCode","value":":l DoubleMe.hs","position":{"start":{"line":75,"column":28,"offset":2025},"end":{"line":75,"column":44,"offset":2041},"indent":[]}},{"type":"text","value":" and it will load the ","position":{"start":{"line":75,"column":44,"offset":2041},"end":{"line":75,"column":66,"offset":2063},"indent":[]}},{"type":"inlineCode","value":"doubleMe","position":{"start":{"line":75,"column":66,"offset":2063},"end":{"line":75,"column":76,"offset":2073},"indent":[]}},{"type":"text","value":" function for you to run.","position":{"start":{"line":75,"column":76,"offset":2073},"end":{"line":75,"column":101,"offset":2098},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":1998},"end":{"line":75,"column":101,"offset":2098},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the above example, we've done a simple typing as well for how ","position":{"start":{"line":77,"column":1,"offset":2100},"end":{"line":77,"column":66,"offset":2165},"indent":[]}},{"type":"inlineCode","value":"doubleMe","position":{"start":{"line":77,"column":66,"offset":2165},"end":{"line":77,"column":76,"offset":2175},"indent":[]}},{"type":"text","value":" will run.","position":{"start":{"line":77,"column":76,"offset":2175},"end":{"line":77,"column":86,"offset":2185},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":2100},"end":{"line":77,"column":86,"offset":2185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Declaring a function that incorporates more functions can look like the following:","position":{"start":{"line":79,"column":1,"offset":2187},"end":{"line":79,"column":83,"offset":2269},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":2187},"end":{"line":79,"column":83,"offset":2269},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"doubleUs x y = doubleMe x + doubleMe y","position":{"start":{"line":81,"column":1,"offset":2271},"end":{"line":83,"column":4,"offset":2324},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For a simple use case of if else in a function:","position":{"start":{"line":85,"column":1,"offset":2326},"end":{"line":85,"column":48,"offset":2373},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":2326},"end":{"line":85,"column":48,"offset":2373},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"doubleSmallNumber x = if x > 100\n                        then x\n                        else x*2","position":{"start":{"line":87,"column":1,"offset":2375},"end":{"line":91,"column":4,"offset":2486},"indent":[1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The difference between Haskell's if statement and if statements in imperative languages is that the else part is mandatory in Haskell. In imperative languages you can just skip a couple of steps if the condition isn't satisfied but in Haskell every expression and function must return something.","position":{"start":{"line":93,"column":3,"offset":2490},"end":{"line":93,"column":298,"offset":2785},"indent":[]}}],"position":{"start":{"line":93,"column":3,"offset":2490},"end":{"line":93,"column":298,"offset":2785},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2488},"end":{"line":93,"column":298,"offset":2785},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Expressions","position":{"start":{"line":95,"column":4,"offset":2790},"end":{"line":95,"column":15,"offset":2801},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2787},"end":{"line":95,"column":15,"offset":2801},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note that ","position":{"start":{"line":97,"column":1,"offset":2803},"end":{"line":97,"column":11,"offset":2813},"indent":[]}},{"type":"inlineCode","value":"5","position":{"start":{"line":97,"column":11,"offset":2813},"end":{"line":97,"column":14,"offset":2816},"indent":[]}},{"type":"text","value":" is an expression in Haskell, as is ","position":{"start":{"line":97,"column":14,"offset":2816},"end":{"line":97,"column":50,"offset":2852},"indent":[]}},{"type":"inlineCode","value":"4 + 8","position":{"start":{"line":97,"column":50,"offset":2852},"end":{"line":97,"column":57,"offset":2859},"indent":[]}},{"type":"text","value":" etc. If we wanted to add one to every result from an ","position":{"start":{"line":97,"column":57,"offset":2859},"end":{"line":97,"column":111,"offset":2913},"indent":[]}},{"type":"inlineCode","value":"if/else","position":{"start":{"line":97,"column":111,"offset":2913},"end":{"line":97,"column":120,"offset":2922},"indent":[]}},{"type":"text","value":" block we could have put:","position":{"start":{"line":97,"column":120,"offset":2922},"end":{"line":97,"column":145,"offset":2947},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2803},"end":{"line":97,"column":145,"offset":2947},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"doubleSmallNumber' x = (if x > 100 then x else x*2) + 1","position":{"start":{"line":99,"column":1,"offset":2949},"end":{"line":101,"column":4,"offset":3019},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note the ","position":{"start":{"line":103,"column":1,"offset":3021},"end":{"line":103,"column":10,"offset":3030},"indent":[]}},{"type":"inlineCode","value":"'","position":{"start":{"line":103,"column":10,"offset":3030},"end":{"line":103,"column":13,"offset":3033},"indent":[]}},{"type":"text","value":" at the end of the function name. That apostrophe doesn't have any special meaning in Haskell's syntax. It's a valid character to use in a function name. We usually use ","position":{"start":{"line":103,"column":13,"offset":3033},"end":{"line":103,"column":182,"offset":3202},"indent":[]}},{"type":"inlineCode","value":"'","position":{"start":{"line":103,"column":182,"offset":3202},"end":{"line":103,"column":185,"offset":3205},"indent":[]}},{"type":"text","value":" to either denote a strict version of a function (one that isn't lazy) or a slightly modified version of a function or a variable. Because ","position":{"start":{"line":103,"column":185,"offset":3205},"end":{"line":103,"column":324,"offset":3344},"indent":[]}},{"type":"inlineCode","value":"'","position":{"start":{"line":103,"column":324,"offset":3344},"end":{"line":103,"column":327,"offset":3347},"indent":[]}},{"type":"text","value":" is a valid character in functions, we could write:","position":{"start":{"line":103,"column":327,"offset":3347},"end":{"line":103,"column":378,"offset":3398},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3021},"end":{"line":103,"column":378,"offset":3398},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"-- Completely valid syntax\nconanO'Brien = \"It's a-me, Conan O'Brien!\"","position":{"start":{"line":105,"column":1,"offset":3400},"end":{"line":108,"column":4,"offset":3484},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Lists","position":{"start":{"line":110,"column":4,"offset":3489},"end":{"line":110,"column":9,"offset":3494},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":3486},"end":{"line":110,"column":9,"offset":3494},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In Haskell, lists are a homogenous data structure. It stores several elements of the same type.","position":{"start":{"line":112,"column":1,"offset":3496},"end":{"line":112,"column":96,"offset":3591},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":3496},"end":{"line":112,"column":96,"offset":3591},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"let lostNumbers = [1,2,3,4,5]","position":{"start":{"line":114,"column":1,"offset":3593},"end":{"line":116,"column":4,"offset":3637},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lists can be compared if the stuff they contain can be compared.","position":{"start":{"line":118,"column":1,"offset":3639},"end":{"line":118,"column":65,"offset":3703},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":3639},"end":{"line":118,"column":65,"offset":3703},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"[3,2,1] > [2,1,0]\n-- ^ True","position":{"start":{"line":120,"column":1,"offset":3705},"end":{"line":123,"column":4,"offset":3747},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Some useful list operations:","position":{"start":{"line":125,"column":1,"offset":3749},"end":{"line":125,"column":29,"offset":3777},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":3749},"end":{"line":125,"column":29,"offset":3777},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Function","position":{"start":{"line":127,"column":3,"offset":3781},"end":{"line":127,"column":11,"offset":3789},"indent":[]}}],"position":{"start":{"line":127,"column":3,"offset":3781},"end":{"line":127,"column":18,"offset":3796},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Definition","position":{"start":{"line":127,"column":21,"offset":3799},"end":{"line":127,"column":31,"offset":3809},"indent":[]}}],"position":{"start":{"line":127,"column":21,"offset":3799},"end":{"line":127,"column":63,"offset":3841},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":3779},"end":{"line":127,"column":65,"offset":3843},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"head","position":{"start":{"line":129,"column":3,"offset":3911},"end":{"line":129,"column":7,"offset":3915},"indent":[]}}],"position":{"start":{"line":129,"column":3,"offset":3911},"end":{"line":129,"column":18,"offset":3926},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Returns first element","position":{"start":{"line":129,"column":21,"offset":3929},"end":{"line":129,"column":42,"offset":3950},"indent":[]}}],"position":{"start":{"line":129,"column":21,"offset":3929},"end":{"line":129,"column":63,"offset":3971},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":3909},"end":{"line":129,"column":65,"offset":3973},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"tail","position":{"start":{"line":130,"column":3,"offset":3976},"end":{"line":130,"column":7,"offset":3980},"indent":[]}}],"position":{"start":{"line":130,"column":3,"offset":3976},"end":{"line":130,"column":18,"offset":3991},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Returns ","position":{"start":{"line":130,"column":21,"offset":3994},"end":{"line":130,"column":29,"offset":4002},"indent":[]}},{"type":"inlineCode","value":"[1:]","position":{"start":{"line":130,"column":29,"offset":4002},"end":{"line":130,"column":35,"offset":4008},"indent":[]}},{"type":"text","value":" elements","position":{"start":{"line":130,"column":35,"offset":4008},"end":{"line":130,"column":44,"offset":4017},"indent":[]}}],"position":{"start":{"line":130,"column":21,"offset":3994},"end":{"line":130,"column":63,"offset":4036},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":3974},"end":{"line":130,"column":65,"offset":4038},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"last","position":{"start":{"line":131,"column":3,"offset":4041},"end":{"line":131,"column":7,"offset":4045},"indent":[]}}],"position":{"start":{"line":131,"column":3,"offset":4041},"end":{"line":131,"column":18,"offset":4056},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Returns last element","position":{"start":{"line":131,"column":21,"offset":4059},"end":{"line":131,"column":41,"offset":4079},"indent":[]}}],"position":{"start":{"line":131,"column":21,"offset":4059},"end":{"line":131,"column":63,"offset":4101},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":4039},"end":{"line":131,"column":65,"offset":4103},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"init","position":{"start":{"line":132,"column":3,"offset":4106},"end":{"line":132,"column":7,"offset":4110},"indent":[]}}],"position":{"start":{"line":132,"column":3,"offset":4106},"end":{"line":132,"column":18,"offset":4121},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Returns ","position":{"start":{"line":132,"column":21,"offset":4124},"end":{"line":132,"column":29,"offset":4132},"indent":[]}},{"type":"inlineCode","value":"[:-1]","position":{"start":{"line":132,"column":29,"offset":4132},"end":{"line":132,"column":36,"offset":4139},"indent":[]}},{"type":"text","value":" elements","position":{"start":{"line":132,"column":36,"offset":4139},"end":{"line":132,"column":45,"offset":4148},"indent":[]}}],"position":{"start":{"line":132,"column":21,"offset":4124},"end":{"line":132,"column":63,"offset":4166},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":4104},"end":{"line":132,"column":65,"offset":4168},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"length","position":{"start":{"line":133,"column":3,"offset":4171},"end":{"line":133,"column":9,"offset":4177},"indent":[]}}],"position":{"start":{"line":133,"column":3,"offset":4171},"end":{"line":133,"column":18,"offset":4186},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Get list length","position":{"start":{"line":133,"column":21,"offset":4189},"end":{"line":133,"column":36,"offset":4204},"indent":[]}}],"position":{"start":{"line":133,"column":21,"offset":4189},"end":{"line":133,"column":63,"offset":4231},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":4169},"end":{"line":133,"column":65,"offset":4233},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"null","position":{"start":{"line":134,"column":3,"offset":4236},"end":{"line":134,"column":7,"offset":4240},"indent":[]}}],"position":{"start":{"line":134,"column":3,"offset":4236},"end":{"line":134,"column":18,"offset":4251},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Check if list is empty","position":{"start":{"line":134,"column":21,"offset":4254},"end":{"line":134,"column":43,"offset":4276},"indent":[]}}],"position":{"start":{"line":134,"column":21,"offset":4254},"end":{"line":134,"column":63,"offset":4296},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":4234},"end":{"line":134,"column":65,"offset":4298},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"reverse","position":{"start":{"line":135,"column":3,"offset":4301},"end":{"line":135,"column":10,"offset":4308},"indent":[]}}],"position":{"start":{"line":135,"column":3,"offset":4301},"end":{"line":135,"column":18,"offset":4316},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Self-explanatory","position":{"start":{"line":135,"column":21,"offset":4319},"end":{"line":135,"column":37,"offset":4335},"indent":[]}}],"position":{"start":{"line":135,"column":21,"offset":4319},"end":{"line":135,"column":63,"offset":4361},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":4299},"end":{"line":135,"column":65,"offset":4363},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"take n","position":{"start":{"line":136,"column":3,"offset":4366},"end":{"line":136,"column":9,"offset":4372},"indent":[]}}],"position":{"start":{"line":136,"column":3,"offset":4366},"end":{"line":136,"column":18,"offset":4381},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Take first n elements","position":{"start":{"line":136,"column":21,"offset":4384},"end":{"line":136,"column":42,"offset":4405},"indent":[]}}],"position":{"start":{"line":136,"column":21,"offset":4384},"end":{"line":136,"column":63,"offset":4426},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":4364},"end":{"line":136,"column":65,"offset":4428},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"drop n","position":{"start":{"line":137,"column":3,"offset":4431},"end":{"line":137,"column":9,"offset":4437},"indent":[]}}],"position":{"start":{"line":137,"column":3,"offset":4431},"end":{"line":137,"column":18,"offset":4446},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Drop first n elements and return rest","position":{"start":{"line":137,"column":21,"offset":4449},"end":{"line":137,"column":58,"offset":4486},"indent":[]}}],"position":{"start":{"line":137,"column":21,"offset":4449},"end":{"line":137,"column":63,"offset":4491},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":4429},"end":{"line":137,"column":65,"offset":4493},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"minimum","position":{"start":{"line":138,"column":3,"offset":4496},"end":{"line":138,"column":10,"offset":4503},"indent":[]}}],"position":{"start":{"line":138,"column":3,"offset":4496},"end":{"line":138,"column":18,"offset":4511},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Self-explanatory","position":{"start":{"line":138,"column":21,"offset":4514},"end":{"line":138,"column":37,"offset":4530},"indent":[]}}],"position":{"start":{"line":138,"column":21,"offset":4514},"end":{"line":138,"column":63,"offset":4556},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":4494},"end":{"line":138,"column":65,"offset":4558},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"maximum","position":{"start":{"line":139,"column":3,"offset":4561},"end":{"line":139,"column":10,"offset":4568},"indent":[]}}],"position":{"start":{"line":139,"column":3,"offset":4561},"end":{"line":139,"column":18,"offset":4576},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Self-explanatory","position":{"start":{"line":139,"column":21,"offset":4579},"end":{"line":139,"column":37,"offset":4595},"indent":[]}}],"position":{"start":{"line":139,"column":21,"offset":4579},"end":{"line":139,"column":63,"offset":4621},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":4559},"end":{"line":139,"column":65,"offset":4623},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"sum","position":{"start":{"line":140,"column":3,"offset":4626},"end":{"line":140,"column":6,"offset":4629},"indent":[]}}],"position":{"start":{"line":140,"column":3,"offset":4626},"end":{"line":140,"column":18,"offset":4641},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Self-explanatory","position":{"start":{"line":140,"column":21,"offset":4644},"end":{"line":140,"column":37,"offset":4660},"indent":[]}}],"position":{"start":{"line":140,"column":21,"offset":4644},"end":{"line":140,"column":63,"offset":4686},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":4624},"end":{"line":140,"column":65,"offset":4688},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"product","position":{"start":{"line":141,"column":3,"offset":4691},"end":{"line":141,"column":10,"offset":4698},"indent":[]}}],"position":{"start":{"line":141,"column":3,"offset":4691},"end":{"line":141,"column":18,"offset":4706},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Self-explanatory","position":{"start":{"line":141,"column":21,"offset":4709},"end":{"line":141,"column":37,"offset":4725},"indent":[]}}],"position":{"start":{"line":141,"column":21,"offset":4709},"end":{"line":141,"column":63,"offset":4751},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":4689},"end":{"line":141,"column":65,"offset":4753},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"n ","position":{"start":{"line":142,"column":3,"offset":4756},"end":{"line":142,"column":5,"offset":4758},"indent":[]}},{"type":"text","value":"`","position":{"start":{"line":142,"column":5,"offset":4758},"end":{"line":142,"column":7,"offset":4760},"indent":[]}},{"type":"text","value":"elem","position":{"start":{"line":142,"column":7,"offset":4760},"end":{"line":142,"column":11,"offset":4764},"indent":[]}},{"type":"text","value":"`","position":{"start":{"line":142,"column":11,"offset":4764},"end":{"line":142,"column":13,"offset":4766},"indent":[]}},{"type":"text","value":" list","position":{"start":{"line":142,"column":13,"offset":4766},"end":{"line":142,"column":18,"offset":4771},"indent":[]}}],"position":{"start":{"line":142,"column":3,"offset":4756},"end":{"line":142,"column":18,"offset":4771},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Infix function to tell if n exists in list","position":{"start":{"line":142,"column":21,"offset":4774},"end":{"line":142,"column":63,"offset":4816},"indent":[]}}],"position":{"start":{"line":142,"column":21,"offset":4774},"end":{"line":142,"column":63,"offset":4816},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":4754},"end":{"line":142,"column":65,"offset":4818},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":3779},"end":{"line":142,"column":65,"offset":4818},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Concatenation","position":{"start":{"line":144,"column":4,"offset":4823},"end":{"line":144,"column":17,"offset":4836},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":4820},"end":{"line":144,"column":17,"offset":4836},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"ghci> [1,2,3,4] ++ [9,10,11,12]\n[1,2,3,4,9,10,11,12]\nghci> \"hello\" ++ \" \" ++ \"world\"\n\"hello world\"\nghci> ['w','o'] ++ ['o','t']\n\"woot\"","position":{"start":{"line":146,"column":1,"offset":4838},"end":{"line":153,"column":4,"offset":4981},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Putting something at the beginning of a list using the ","position":{"start":{"line":155,"column":1,"offset":4983},"end":{"line":155,"column":56,"offset":5038},"indent":[]}},{"type":"inlineCode","value":":","position":{"start":{"line":155,"column":56,"offset":5038},"end":{"line":155,"column":59,"offset":5041},"indent":[]}},{"type":"text","value":" operator (also called the cons operator) is instantaneous.","position":{"start":{"line":155,"column":59,"offset":5041},"end":{"line":155,"column":118,"offset":5100},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":4983},"end":{"line":155,"column":118,"offset":5100},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"ghci> 'A':\" SMALL CAT\"\n\"A SMALL CAT\"\nghci> 5:[1,2,3,4,5]\n[5,1,2,3,4,5]","position":{"start":{"line":157,"column":1,"offset":5102},"end":{"line":162,"column":4,"offset":5181},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"[1,2,3]","position":{"start":{"line":164,"column":1,"offset":5183},"end":{"line":164,"column":10,"offset":5192},"indent":[]}},{"type":"text","value":" is actually just syntactic sugar for ","position":{"start":{"line":164,"column":10,"offset":5192},"end":{"line":164,"column":48,"offset":5230},"indent":[]}},{"type":"inlineCode","value":"1:2:3:[]","position":{"start":{"line":164,"column":48,"offset":5230},"end":{"line":164,"column":58,"offset":5240},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":5183},"end":{"line":164,"column":58,"offset":5240},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Get At Index","position":{"start":{"line":166,"column":4,"offset":5245},"end":{"line":166,"column":16,"offset":5257},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":5242},"end":{"line":166,"column":16,"offset":5257},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use ","position":{"start":{"line":168,"column":1,"offset":5259},"end":{"line":168,"column":5,"offset":5263},"indent":[]}},{"type":"inlineCode","value":"!!","position":{"start":{"line":168,"column":5,"offset":5263},"end":{"line":168,"column":9,"offset":5267},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":168,"column":9,"offset":5267},"end":{"line":168,"column":10,"offset":5268},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":5259},"end":{"line":168,"column":10,"offset":5268},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"ghci> \"Steve Buscemi\" !! 6\n'B'\nghci> [9.4,33.2,96.2,11.2,23.25] !! 1\n33.2","position":{"start":{"line":170,"column":1,"offset":5270},"end":{"line":175,"column":4,"offset":5352},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Ranges","position":{"start":{"line":177,"column":4,"offset":5357},"end":{"line":177,"column":10,"offset":5363},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":5354},"end":{"line":177,"column":10,"offset":5363},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can use ","position":{"start":{"line":179,"column":1,"offset":5365},"end":{"line":179,"column":12,"offset":5376},"indent":[]}},{"type":"inlineCode","value":"..","position":{"start":{"line":179,"column":12,"offset":5376},"end":{"line":179,"column":16,"offset":5380},"indent":[]}},{"type":"text","value":" within lists as a shortcut for some ranges.","position":{"start":{"line":179,"column":16,"offset":5380},"end":{"line":179,"column":60,"offset":5424},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":5365},"end":{"line":179,"column":60,"offset":5424},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"ghci> [1..20]\n[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nghci> ['a'..'z']\n\"abcdefghijklmnopqrstuvwxyz\"\nghci> ['K'..'Z']\n\"KLMNOPQRSTUVWXYZ\"\nghci> [2,4..8]\n[2,4,6,8]\nghci> take 24 [13,26..]\n[13,26,39,52,65,78,91,104,117,130,143,156,169,182,195,208,221,234,247,260,273,286,299,312]\nghci> take 10 (repeat 5)\n[5,5,5,5,5,5,5,5,5,5]\nghci> replicate 3 10\n[10,10,10]","position":{"start":{"line":181,"column":1,"offset":5426},"end":{"line":196,"column":4,"offset":5802},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"List Comprehension","position":{"start":{"line":198,"column":4,"offset":5807},"end":{"line":198,"column":22,"offset":5825},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":5804},"end":{"line":198,"column":22,"offset":5825},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In mathematics, take the following:","position":{"start":{"line":200,"column":1,"offset":5827},"end":{"line":200,"column":36,"offset":5862},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":5827},"end":{"line":200,"column":36,"offset":5862},"indent":[]}},{"type":"jsx","value":"<BlockMath math=\"S = \\{ 2 \\cdot x \\space | \\space x \\in \\mathbb{N} , \\space x \\leq 10 \\}\" />","position":{"start":{"line":202,"column":1,"offset":5864},"end":{"line":202,"column":93,"offset":5956},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To represent this in Haskell, we can have the following:","position":{"start":{"line":204,"column":1,"offset":5958},"end":{"line":204,"column":57,"offset":6014},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":5958},"end":{"line":204,"column":57,"offset":6014},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"ghci> [x*2 | x <- [1..10]]\n[2,4,6,8,10,12,14,16,18,20]\n# Now let's add a condition (or a predicate) to that comprehension.\nghci> [x*2 | x <- [1..10], x*2 >= 12]\n[12,14,16,18,20]\n# All numbers between 50 and 100 whos remainer when divided with 7 is 3\nghci> [ x | x <- [50..100], x `mod` 7 == 3]\n[52,59,66,73,80,87,94]\n# We can include multiple predicates\nghci> [ x | x <- [10..20], x /= 13, x /= 15, x /= 19]\n[10,11,12,14,16,17,18,20]\n# You can also draw from several lists\nghci> [ x*y | x <- [2,5,10], y <- [8,10,11]]\n[16,20,22,40,50,55,80,100,110]","position":{"start":{"line":206,"column":1,"offset":6016},"end":{"line":221,"column":4,"offset":6573},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We could take everything that we learned above and create a neat little function out of it!","position":{"start":{"line":223,"column":1,"offset":6575},"end":{"line":223,"column":92,"offset":6666},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":6575},"end":{"line":223,"column":92,"offset":6666},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"boomBangs xs = [ if x < 10 then \"BOOM!\" else \"BANG!\" | x <- xs, odd x]","position":{"start":{"line":225,"column":1,"offset":6668},"end":{"line":227,"column":4,"offset":6753},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Because strings are lists, we can use list comprehensions to process and produce strings. Here's a function that takes a string and removes everything except uppercase letters from it.","position":{"start":{"line":229,"column":1,"offset":6755},"end":{"line":229,"column":185,"offset":6939},"indent":[]}}],"position":{"start":{"line":229,"column":1,"offset":6755},"end":{"line":229,"column":185,"offset":6939},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]\nremoveNonUppercase \"Hahaha! Ahahaha!\"\n-- \"HA\"\nremoveNonUppercase \"IdontLIKEFROGS\"\n-- \"ILIKEFROGS\"","position":{"start":{"line":231,"column":1,"offset":6941},"end":{"line":237,"column":4,"offset":7113},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"List comprehensions also work on a list of lists:","position":{"start":{"line":239,"column":1,"offset":7115},"end":{"line":239,"column":50,"offset":7164},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":7115},"end":{"line":239,"column":50,"offset":7164},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"ghci> let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]\nghci> [ [ x | x <- xs, even x ] | xs <- xxs]\n[[2,2,4],[2,4,6,8],[2,4,2,6,2,6]]","position":{"start":{"line":241,"column":1,"offset":7166},"end":{"line":245,"column":4,"offset":7337},"indent":[1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"You can write list comprehensions across several lines. So if you're not in GHCI, it's better to split longer list comprehensions across multiple lines, especially if they're nested.","position":{"start":{"line":247,"column":3,"offset":7341},"end":{"line":247,"column":185,"offset":7523},"indent":[]}}],"position":{"start":{"line":247,"column":3,"offset":7341},"end":{"line":247,"column":185,"offset":7523},"indent":[]}}],"position":{"start":{"line":247,"column":1,"offset":7339},"end":{"line":247,"column":185,"offset":7523},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Tuples","position":{"start":{"line":249,"column":4,"offset":7528},"end":{"line":249,"column":10,"offset":7534},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":7525},"end":{"line":249,"column":10,"offset":7534},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"A list of numbers is a list of numbers. That's its type and it doesn't matter if it has only one number in it or an infinite amount of numbers. Tuples, however, are used when you know exactly how many values you want to combine and its type depends on how many components it has and the types of the components.","position":{"start":{"line":251,"column":3,"offset":7538},"end":{"line":251,"column":314,"offset":7849},"indent":[]}}],"position":{"start":{"line":251,"column":3,"offset":7538},"end":{"line":251,"column":314,"offset":7849},"indent":[]}}],"position":{"start":{"line":251,"column":1,"offset":7536},"end":{"line":251,"column":314,"offset":7849},"indent":[]}},{"type":"code","lang":"s","meta":null,"value":"ghci> fst (8,11)\n8\nghci> fst (\"Wow\", False)\n\"Wow\"\nghci> snd (8,11)\n11\nghci> snd (\"Wow\", False)\nFalse","position":{"start":{"line":253,"column":1,"offset":7851},"end":{"line":262,"column":4,"offset":7960},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Function","position":{"start":{"line":264,"column":3,"offset":7964},"end":{"line":264,"column":11,"offset":7972},"indent":[]}}],"position":{"start":{"line":264,"column":3,"offset":7964},"end":{"line":264,"column":11,"offset":7972},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Definition","position":{"start":{"line":264,"column":14,"offset":7975},"end":{"line":264,"column":24,"offset":7985},"indent":[]}}],"position":{"start":{"line":264,"column":14,"offset":7975},"end":{"line":264,"column":56,"offset":8017},"indent":[]}}],"position":{"start":{"line":264,"column":1,"offset":7962},"end":{"line":264,"column":58,"offset":8019},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"fst","position":{"start":{"line":266,"column":3,"offset":8080},"end":{"line":266,"column":6,"offset":8083},"indent":[]}}],"position":{"start":{"line":266,"column":3,"offset":8080},"end":{"line":266,"column":11,"offset":8088},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"First element of tuple","position":{"start":{"line":266,"column":14,"offset":8091},"end":{"line":266,"column":36,"offset":8113},"indent":[]}}],"position":{"start":{"line":266,"column":14,"offset":8091},"end":{"line":266,"column":56,"offset":8133},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":8078},"end":{"line":266,"column":58,"offset":8135},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"snd","position":{"start":{"line":267,"column":3,"offset":8138},"end":{"line":267,"column":6,"offset":8141},"indent":[]}}],"position":{"start":{"line":267,"column":3,"offset":8138},"end":{"line":267,"column":11,"offset":8146},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Second element of tuple","position":{"start":{"line":267,"column":14,"offset":8149},"end":{"line":267,"column":37,"offset":8172},"indent":[]}}],"position":{"start":{"line":267,"column":14,"offset":8149},"end":{"line":267,"column":56,"offset":8191},"indent":[]}}],"position":{"start":{"line":267,"column":1,"offset":8136},"end":{"line":267,"column":58,"offset":8193},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"zip","position":{"start":{"line":268,"column":3,"offset":8196},"end":{"line":268,"column":6,"offset":8199},"indent":[]}}],"position":{"start":{"line":268,"column":3,"offset":8196},"end":{"line":268,"column":11,"offset":8204},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Take two lists and return a bunch of pairs","position":{"start":{"line":268,"column":14,"offset":8207},"end":{"line":268,"column":56,"offset":8249},"indent":[]}}],"position":{"start":{"line":268,"column":14,"offset":8207},"end":{"line":268,"column":56,"offset":8249},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":8194},"end":{"line":268,"column":58,"offset":8251},"indent":[]}}],"position":{"start":{"line":264,"column":1,"offset":7962},"end":{"line":268,"column":58,"offset":8251},"indent":[1,1,1,1]}},{"type":"code","lang":"s","meta":null,"value":"ghci> zip [1,2,3,4,5] [5,5,5,5,5]\n[(1,5),(2,5),(3,5),(4,5),(5,5)]\nghci> zip [1 .. 5] [\"one\", \"two\", \"three\", \"four\", \"five\"]\n[(1,\"one\"),(2,\"two\"),(3,\"three\"),(4,\"four\"),(5,\"five\")]\nghci> zip [5,3,2,6,2,7,2,5,4,6,6] [\"im\",\"a\",\"turtle\"]\n[(5,\"im\"),(3,\"a\"),(2,\"turtle\")]\nghci> zip [1..] [\"apple\", \"orange\", \"cherry\", \"mango\"]\n[(1,\"apple\"),(2,\"orange\"),(3,\"cherry\"),(4,\"mango\")]","position":{"start":{"line":270,"column":1,"offset":8253},"end":{"line":279,"column":4,"offset":8635},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here's a problem that combines tuples and list comprehensions: which right triangle that has integers for all sides and all sides equal to or smaller than 10 has a perimeter of 24?","position":{"start":{"line":281,"column":1,"offset":8637},"end":{"line":281,"column":181,"offset":8817},"indent":[]}}],"position":{"start":{"line":281,"column":1,"offset":8637},"end":{"line":281,"column":181,"offset":8817},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"let rightTriangles' = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2, a+b+c == 24]\nrightTriangles'\n-- [(6,8,10)]","position":{"start":{"line":283,"column":1,"offset":8819},"end":{"line":287,"column":4,"offset":8968},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":290,"column":1,"offset":8971},"end":{"line":290,"column":31,"offset":9001},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":290,"column":31,"offset":9001}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport 'katex/dist/katex.min.css';\nimport { BlockMath } from 'react-katex';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"learn-you-a-haskell\"\n    }}>{`Learn You A Haskell`}</h1>\n\n    <p>{`Everything here comes from the learning resources found at the `}<a parentName=\"p\" {...{\n        \"href\": \"http://learnyouahaskell.com/\"\n      }}>{`Learn You A Haskell`}</a>{` website.`}</p>\n    <h2 {...{\n      \"id\": \"interactive-prompt\"\n    }}>{`Interactive prompt`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Command`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`stack ghci`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Begin Haskell REPL`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`:l myfunctions`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Import defined functions from `}<inlineCode parentName=\"td\">{`./myfunctions.hs`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`:r`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Reloads current script`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`:quit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Quick the REPL`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"bootstrap-learning-haskell\"\n    }}>{`Bootstrap Learning Haskell`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Command`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`+ - * /`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Simple arithmetic`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`True && False`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Booleans - evaluates to `}<inlineCode parentName=\"td\">{`False`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`==`}</inlineCode>{` and `}<inlineCode parentName=\"td\">{`/=`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Equals, not equals`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <p><inlineCode parentName=\"p\">{`*`}</inlineCode>{` is a function that takes two numbers and multiplies them. This is an `}<inlineCode parentName=\"p\">{`infix`}</inlineCode>{` function. Most functions that aren't used with numbers are `}<inlineCode parentName=\"p\">{`prefix`}</inlineCode>{` functions.`}</p>\n    <p>{`For example, take `}<inlineCode parentName=\"p\">{`min`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`min 9 10\n-- ^ 9\nmax 9 10\n-- ^ 10\n`}</code></pre>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`function application`}</inlineCode>{` (calling a function by putting a space after it and then typing out the parameters) has the highest precedence of them all. What that means for us is that these two statements are equivalent.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`ghci> succ 9 + max 5 4 + 1\n16\nghci> (succ 9) + (max 5 4) + 1\n16\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-functions\"\n    }}>{`Writing Functions`}</h2>\n    <p>{`Functions are defined in a similar manner to how they are called.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`doubleMe x = x + x\ndoubleMe 4\n-- ^ returns 8\n`}</code></pre>\n    <p>{`To write it as a module, touch `}<inlineCode parentName=\"p\">{`DoubleMe.hs`}</inlineCode>{` and add:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`module DoubleMe (\n  doubleMe\n) where\n\ndoubleMe :: Int -> Int\ndoubleMe x = x + x\n`}</code></pre>\n    <p>{`Then, inside the REPL, run `}<inlineCode parentName=\"p\">{`:l DoubleMe.hs`}</inlineCode>{` and it will load the `}<inlineCode parentName=\"p\">{`doubleMe`}</inlineCode>{` function for you to run.`}</p>\n    <p>{`In the above example, we've done a simple typing as well for how `}<inlineCode parentName=\"p\">{`doubleMe`}</inlineCode>{` will run.`}</p>\n    <p>{`Declaring a function that incorporates more functions can look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`doubleUs x y = doubleMe x + doubleMe y\n`}</code></pre>\n    <p>{`For a simple use case of if else in a function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`doubleSmallNumber x = if x > 100\n                        then x\n                        else x*2\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The difference between Haskell's if statement and if statements in imperative languages is that the else part is mandatory in Haskell. In imperative languages you can just skip a couple of steps if the condition isn't satisfied but in Haskell every expression and function must return something.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"expressions\"\n    }}>{`Expressions`}</h2>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`5`}</inlineCode>{` is an expression in Haskell, as is `}<inlineCode parentName=\"p\">{`4 + 8`}</inlineCode>{` etc. If we wanted to add one to every result from an `}<inlineCode parentName=\"p\">{`if/else`}</inlineCode>{` block we could have put:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`doubleSmallNumber' x = (if x > 100 then x else x*2) + 1\n`}</code></pre>\n    <p>{`Note the `}<inlineCode parentName=\"p\">{`'`}</inlineCode>{` at the end of the function name. That apostrophe doesn't have any special meaning in Haskell's syntax. It's a valid character to use in a function name. We usually use `}<inlineCode parentName=\"p\">{`'`}</inlineCode>{` to either denote a strict version of a function (one that isn't lazy) or a slightly modified version of a function or a variable. Because `}<inlineCode parentName=\"p\">{`'`}</inlineCode>{` is a valid character in functions, we could write:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`-- Completely valid syntax\nconanO'Brien = \"It's a-me, Conan O'Brien!\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lists\"\n    }}>{`Lists`}</h2>\n    <p>{`In Haskell, lists are a homogenous data structure. It stores several elements of the same type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`let lostNumbers = [1,2,3,4,5]\n`}</code></pre>\n    <p>{`Lists can be compared if the stuff they contain can be compared.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`[3,2,1] > [2,1,0]\n-- ^ True\n`}</code></pre>\n    <p>{`Some useful list operations:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Function`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`head`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Returns first element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`tail`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Returns `}<inlineCode parentName=\"td\">{`[1:]`}</inlineCode>{` elements`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`last`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Returns last element`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`init`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Returns `}<inlineCode parentName=\"td\">{`[:-1]`}</inlineCode>{` elements`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`length`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Get list length`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`null`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Check if list is empty`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`reverse`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Self-explanatory`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`take n`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Take first n elements`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`drop n`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Drop first n elements and return rest`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`minimum`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Self-explanatory`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`maximum`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Self-explanatory`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`sum`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Self-explanatory`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`product`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Self-explanatory`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`n `}{`\\``}{`elem`}{`\\``}{` list`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Infix function to tell if n exists in list`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"concatenation\"\n    }}>{`Concatenation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`ghci> [1,2,3,4] ++ [9,10,11,12]\n[1,2,3,4,9,10,11,12]\nghci> \"hello\" ++ \" \" ++ \"world\"\n\"hello world\"\nghci> ['w','o'] ++ ['o','t']\n\"woot\"\n`}</code></pre>\n    <p>{`Putting something at the beginning of a list using the `}<inlineCode parentName=\"p\">{`:`}</inlineCode>{` operator (also called the cons operator) is instantaneous.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`ghci> 'A':\" SMALL CAT\"\n\"A SMALL CAT\"\nghci> 5:[1,2,3,4,5]\n[5,1,2,3,4,5]\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`[1,2,3]`}</inlineCode>{` is actually just syntactic sugar for `}<inlineCode parentName=\"p\">{`1:2:3:[]`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"get-at-index\"\n    }}>{`Get At Index`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`!!`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`ghci> \"Steve Buscemi\" !! 6\n'B'\nghci> [9.4,33.2,96.2,11.2,23.25] !! 1\n33.2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ranges\"\n    }}>{`Ranges`}</h2>\n    <p>{`We can use `}<inlineCode parentName=\"p\">{`..`}</inlineCode>{` within lists as a shortcut for some ranges.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`ghci> [1..20]\n[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nghci> ['a'..'z']\n\"abcdefghijklmnopqrstuvwxyz\"\nghci> ['K'..'Z']\n\"KLMNOPQRSTUVWXYZ\"\nghci> [2,4..8]\n[2,4,6,8]\nghci> take 24 [13,26..]\n[13,26,39,52,65,78,91,104,117,130,143,156,169,182,195,208,221,234,247,260,273,286,299,312]\nghci> take 10 (repeat 5)\n[5,5,5,5,5,5,5,5,5,5]\nghci> replicate 3 10\n[10,10,10]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"list-comprehension\"\n    }}>{`List Comprehension`}</h2>\n    <p>{`In mathematics, take the following:`}</p>\n    <BlockMath math=\"S = \\{ 2 \\cdot x \\space | \\space x \\in \\mathbb{N} , \\space x \\leq 10 \\}\" mdxType=\"BlockMath\" />\n    <p>{`To represent this in Haskell, we can have the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`ghci> [x*2 | x <- [1..10]]\n[2,4,6,8,10,12,14,16,18,20]\n# Now let's add a condition (or a predicate) to that comprehension.\nghci> [x*2 | x <- [1..10], x*2 >= 12]\n[12,14,16,18,20]\n# All numbers between 50 and 100 whos remainer when divided with 7 is 3\nghci> [ x | x <- [50..100], x \\`mod\\` 7 == 3]\n[52,59,66,73,80,87,94]\n# We can include multiple predicates\nghci> [ x | x <- [10..20], x /= 13, x /= 15, x /= 19]\n[10,11,12,14,16,17,18,20]\n# You can also draw from several lists\nghci> [ x*y | x <- [2,5,10], y <- [8,10,11]]\n[16,20,22,40,50,55,80,100,110]\n`}</code></pre>\n    <p>{`We could take everything that we learned above and create a neat little function out of it!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`boomBangs xs = [ if x < 10 then \"BOOM!\" else \"BANG!\" | x <- xs, odd x]\n`}</code></pre>\n    <p>{`Because strings are lists, we can use list comprehensions to process and produce strings. Here's a function that takes a string and removes everything except uppercase letters from it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`removeNonUppercase st = [ c | c <- st, c \\`elem\\` ['A'..'Z']]\nremoveNonUppercase \"Hahaha! Ahahaha!\"\n-- \"HA\"\nremoveNonUppercase \"IdontLIKEFROGS\"\n-- \"ILIKEFROGS\"\n`}</code></pre>\n    <p>{`List comprehensions also work on a list of lists:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`ghci> let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]\nghci> [ [ x | x <- xs, even x ] | xs <- xxs]\n[[2,2,4],[2,4,6,8],[2,4,2,6,2,6]]\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You can write list comprehensions across several lines. So if you're not in GHCI, it's better to split longer list comprehensions across multiple lines, especially if they're nested.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"tuples\"\n    }}>{`Tuples`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`A list of numbers is a list of numbers. That's its type and it doesn't matter if it has only one number in it or an infinite amount of numbers. Tuples, however, are used when you know exactly how many values you want to combine and its type depends on how many components it has and the types of the components.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`ghci> fst (8,11)\n8\nghci> fst (\"Wow\", False)\n\"Wow\"\nghci> snd (8,11)\n11\nghci> snd (\"Wow\", False)\nFalse\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Function`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Definition`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`fst`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`First element of tuple`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`snd`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Second element of tuple`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`zip`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Take two lists and return a bunch of pairs`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`ghci> zip [1,2,3,4,5] [5,5,5,5,5]\n[(1,5),(2,5),(3,5),(4,5),(5,5)]\nghci> zip [1 .. 5] [\"one\", \"two\", \"three\", \"four\", \"five\"]\n[(1,\"one\"),(2,\"two\"),(3,\"three\"),(4,\"four\"),(5,\"five\")]\nghci> zip [5,3,2,6,2,7,2,5,4,6,6] [\"im\",\"a\",\"turtle\"]\n[(5,\"im\"),(3,\"a\"),(2,\"turtle\")]\nghci> zip [1..] [\"apple\", \"orange\", \"cherry\", \"mango\"]\n[(1,\"apple\"),(2,\"orange\"),(3,\"cherry\"),(4,\"mango\")]\n`}</code></pre>\n    <p>{`Here's a problem that combines tuples and list comprehensions: which right triangle that has integers for all sides and all sides equal to or smaller than 10 has a perimeter of 24?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`let rightTriangles' = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2, a+b+c == 24]\nrightTriangles'\n-- [(6,8,10)]\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}