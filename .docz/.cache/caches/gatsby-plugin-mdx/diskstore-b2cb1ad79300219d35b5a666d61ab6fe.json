{"expireTime":9007200867335894000,"key":"gatsby-plugin-mdx-entire-payload-f7b573f396402a2b08b2958ee2c51ae6-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"UI Testing Web","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":17,"offset":182},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":17,"offset":182},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For web, we can test UI elements by making the most of Puppeteer and both the Emitter and Recorder JS packages from Kratos and the ","position":{"start":{"line":9,"column":1,"offset":184},"end":{"line":9,"column":132,"offset":315},"indent":[]}},{"type":"inlineCode","value":"json-server","position":{"start":{"line":9,"column":132,"offset":315},"end":{"line":9,"column":145,"offset":328},"indent":[]}},{"type":"text","value":" js-controller package from Kratos.","position":{"start":{"line":9,"column":145,"offset":328},"end":{"line":9,"column":180,"offset":363},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":184},"end":{"line":9,"column":180,"offset":363},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Getting started","position":{"start":{"line":11,"column":4,"offset":368},"end":{"line":11,"column":19,"offset":383},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":365},"end":{"line":11,"column":19,"offset":383},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"kratos install js-controllers json-server\nkratos install js Emitter\nkratos install js Recorder\n# install puppeteer, mocha, json-server etc if required - should be bootstrappable","position":{"start":{"line":13,"column":1,"offset":385},"end":{"line":18,"column":4,"offset":575},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting up for the tests","position":{"start":{"line":20,"column":4,"offset":580},"end":{"line":20,"column":28,"offset":604},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":577},"end":{"line":20,"column":28,"offset":604},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Within the component module you want to target, create a ","position":{"start":{"line":22,"column":1,"offset":606},"end":{"line":22,"column":58,"offset":663},"indent":[]}},{"type":"inlineCode","value":".puppeteer.js","position":{"start":{"line":22,"column":58,"offset":663},"end":{"line":22,"column":73,"offset":678},"indent":[]}},{"type":"text","value":" file and a ","position":{"start":{"line":22,"column":73,"offset":678},"end":{"line":22,"column":85,"offset":690},"indent":[]}},{"type":"inlineCode","value":"db.json","position":{"start":{"line":22,"column":85,"offset":690},"end":{"line":22,"column":94,"offset":699},"indent":[]}},{"type":"text","value":" file.","position":{"start":{"line":22,"column":94,"offset":699},"end":{"line":22,"column":100,"offset":705},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":606},"end":{"line":22,"column":100,"offset":705},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The component file","position":{"start":{"line":24,"column":4,"offset":710},"end":{"line":24,"column":22,"offset":728},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":707},"end":{"line":24,"column":22,"offset":728},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We use the ","position":{"start":{"line":26,"column":1,"offset":730},"end":{"line":26,"column":12,"offset":741},"indent":[]}},{"type":"inlineCode","value":"Emitter","position":{"start":{"line":26,"column":12,"offset":741},"end":{"line":26,"column":21,"offset":750},"indent":[]}},{"type":"text","value":" module to emit events to our file, which in turn will - if config is in ","position":{"start":{"line":26,"column":21,"offset":750},"end":{"line":26,"column":94,"offset":823},"indent":[]}},{"type":"inlineCode","value":"debug","position":{"start":{"line":26,"column":94,"offset":823},"end":{"line":26,"column":101,"offset":830},"indent":[]}},{"type":"text","value":" mode, pass on to JSON Server to generate our event emission file.","position":{"start":{"line":26,"column":101,"offset":830},"end":{"line":26,"column":167,"offset":896},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":730},"end":{"line":26,"column":167,"offset":896},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The component could look like this for example:","position":{"start":{"line":28,"column":1,"offset":898},"end":{"line":28,"column":48,"offset":945},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":898},"end":{"line":28,"column":48,"offset":945},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import React, { Component } from 'react';\nimport Emitter from 'common/Emitter';\nimport Config from 'src/app.json';\nimport Waypoint from 'react-waypoint';\n\n/**\n * Render the Component component\n *\n * @class Component\n * @extends {Component}\n */\nclass Component extends Component {\n  /**\n   * Handle primary button click event.\n   *\n   * @memberof Component\n   */\n  handlePrimaryClick = (e) => {\n    Emitter.emit('event', {\n      event: 'Component.handlePrimaryClick',\n      e: e.target\n    });\n\n    if (Config.debug) {\n      e.preventDefault();\n      return;\n    }\n\n    const { router } = this.props;\n    router.push(Config.baseUrl + '/test');\n  };\n\n  /**\n   * Handle component enter event.\n   *\n   * @memberof Component\n   */\n  handleWaypointEnter = (e) => {\n    Emitter.emit('event', { event: 'Component.handleWaypointEnter' });\n  };\n\n  /**\n   * Handle component exit event.\n   *\n   * @memberof Component\n   */\n  handleWaypointExit = (e) => {\n    Emitter.emit('event', { event: 'Component.handleWaypointExit' });\n  };\n\n  /**\n   * Render Component component\n   * @memberof Component\n   * @var {function} render Render Component component\n   * @returns {Object} component\n   */\n  render() {\n    const {\n      title,\n      subtitle,\n      buttonPrimary,\n      buttonSecondary,\n      imageMain\n    } = this.props.copy;\n\n    return (\n      <Waypoint\n        onEnter={this.handleWaypointEnter}\n        onLeave={this.handleWaypointExit}\n      >\n        <div className=\"component\">\n          <div className=\"container content\">\n            <button\n              onClick={this.handlePrimaryClick}\n              className=\"button primary f-primary cta animate\"\n            >\n              {buttonPrimary}\n            </button>\n          </div>\n        </div>\n      </Waypoint>\n    );\n  }\n}\n\nexport default Component;","position":{"start":{"line":30,"column":1,"offset":947},"end":{"line":117,"column":4,"offset":2772},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Recording the events manually on the web","position":{"start":{"line":119,"column":4,"offset":2777},"end":{"line":119,"column":44,"offset":2817},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":2774},"end":{"line":119,"column":44,"offset":2817},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use the Puppeteer recorder to do a runthrough of the events you want to cover. ","position":{"start":{"line":121,"column":1,"offset":2819},"end":{"line":121,"column":80,"offset":2898},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/checkly/puppeteer-recorder","children":[{"type":"text","value":"Check here","position":{"start":{"line":121,"column":81,"offset":2899},"end":{"line":121,"column":91,"offset":2909},"indent":[]}}],"position":{"start":{"line":121,"column":80,"offset":2898},"end":{"line":121,"column":139,"offset":2957},"indent":[]}},{"type":"text","value":" for more info.","position":{"start":{"line":121,"column":139,"offset":2957},"end":{"line":121,"column":154,"offset":2972},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2819},"end":{"line":121,"column":154,"offset":2972},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"After running through with the recorder, we should be able to modify the Puppeteer template. The end result could look like the following:","position":{"start":{"line":123,"column":1,"offset":2974},"end":{"line":123,"column":139,"offset":3112},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":2974},"end":{"line":123,"column":139,"offset":3112},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"/**\n * ComponentALLandingOne tests\n */\nconst puppeteer = require('puppeteer');\nconst json = require('./db.json');\nconst fs = require('fs-extra');\nconst cwd = process.cwd();\nconst server = require(cwd + '/controllers/json-server');\nconst wait = require('waait');\nconst Recorder = require(cwd + '/src/common/Recorder').default;\nlet dbJson;\nserver.listen(4444, () => console.log('JSON DB server started'));\n\ndescribe('ComponentALLandingFive UI functionality', () => {\n  describe('ComponentALLandingFive events', () => {\n    beforeEach(() => {\n      dbJson = fs.readJsonSync(cwd + '/db.json');\n      dbJson.events.map((e) => Recorder.delete(e.id));\n    });\n\n    it('Events emitted equals prerecording', async () => {\n      const browser = await puppeteer.launch();\n      const page = await browser.newPage();\n\n      await page.goto('http://localhost:3000/ComponentALLandingFive');\n      await page.waitForSelector(\n        '.grid > .item > .flex > .block-info > .primary'\n      );\n      await page.click('.grid > .item > .flex > .block-info > .primary');\n\n      await page.goto('http://localhost:3000/ComponentALLandingFive');\n\n      await browser.close();\n\n      await wait(300);\n      dbJson = fs.readJsonSync(cwd + '/db.json');\n\n      expect(dbJson).to.deep.equal(json);\n    });\n  });\n});","position":{"start":{"line":125,"column":1,"offset":3114},"end":{"line":167,"column":4,"offset":4419},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Init the component db.json file","position":{"start":{"line":169,"column":4,"offset":4424},"end":{"line":169,"column":35,"offset":4455},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":4421},"end":{"line":169,"column":35,"offset":4455},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"events\": []\n}","position":{"start":{"line":171,"column":1,"offset":4457},"end":{"line":175,"column":4,"offset":4487},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"First run through of the file","position":{"start":{"line":177,"column":4,"offset":4492},"end":{"line":177,"column":33,"offset":4521},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":4489},"end":{"line":177,"column":33,"offset":4521},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we decide to run that Puppeteer test","position":{"start":{"line":179,"column":1,"offset":4523},"end":{"line":179,"column":40,"offset":4562},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":4523},"end":{"line":179,"column":40,"offset":4562},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":182,"column":1,"offset":4565},"end":{"line":182,"column":31,"offset":4595},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":182,"column":31,"offset":4595}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"ui-testing-web\"\n    }}>{`UI Testing Web`}</h1>\n    <p>{`For web, we can test UI elements by making the most of Puppeteer and both the Emitter and Recorder JS packages from Kratos and the `}<inlineCode parentName=\"p\">{`json-server`}</inlineCode>{` js-controller package from Kratos.`}</p>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting started`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kratos install js-controllers json-server\nkratos install js Emitter\nkratos install js Recorder\n# install puppeteer, mocha, json-server etc if required - should be bootstrappable\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-for-the-tests\"\n    }}>{`Setting up for the tests`}</h2>\n    <p>{`Within the component module you want to target, create a `}<inlineCode parentName=\"p\">{`.puppeteer.js`}</inlineCode>{` file and a `}<inlineCode parentName=\"p\">{`db.json`}</inlineCode>{` file.`}</p>\n    <h2 {...{\n      \"id\": \"the-component-file\"\n    }}>{`The component file`}</h2>\n    <p>{`We use the `}<inlineCode parentName=\"p\">{`Emitter`}</inlineCode>{` module to emit events to our file, which in turn will - if config is in `}<inlineCode parentName=\"p\">{`debug`}</inlineCode>{` mode, pass on to JSON Server to generate our event emission file.`}</p>\n    <p>{`The component could look like this for example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport Emitter from 'common/Emitter';\nimport Config from 'src/app.json';\nimport Waypoint from 'react-waypoint';\n\n/**\n * Render the Component component\n *\n * @class Component\n * @extends {Component}\n */\nclass Component extends Component {\n  /**\n   * Handle primary button click event.\n   *\n   * @memberof Component\n   */\n  handlePrimaryClick = (e) => {\n    Emitter.emit('event', {\n      event: 'Component.handlePrimaryClick',\n      e: e.target\n    });\n\n    if (Config.debug) {\n      e.preventDefault();\n      return;\n    }\n\n    const { router } = this.props;\n    router.push(Config.baseUrl + '/test');\n  };\n\n  /**\n   * Handle component enter event.\n   *\n   * @memberof Component\n   */\n  handleWaypointEnter = (e) => {\n    Emitter.emit('event', { event: 'Component.handleWaypointEnter' });\n  };\n\n  /**\n   * Handle component exit event.\n   *\n   * @memberof Component\n   */\n  handleWaypointExit = (e) => {\n    Emitter.emit('event', { event: 'Component.handleWaypointExit' });\n  };\n\n  /**\n   * Render Component component\n   * @memberof Component\n   * @var {function} render Render Component component\n   * @returns {Object} component\n   */\n  render() {\n    const {\n      title,\n      subtitle,\n      buttonPrimary,\n      buttonSecondary,\n      imageMain\n    } = this.props.copy;\n\n    return (\n      <Waypoint\n        onEnter={this.handleWaypointEnter}\n        onLeave={this.handleWaypointExit}\n      >\n        <div className=\"component\">\n          <div className=\"container content\">\n            <button\n              onClick={this.handlePrimaryClick}\n              className=\"button primary f-primary cta animate\"\n            >\n              {buttonPrimary}\n            </button>\n          </div>\n        </div>\n      </Waypoint>\n    );\n  }\n}\n\nexport default Component;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"recording-the-events-manually-on-the-web\"\n    }}>{`Recording the events manually on the web`}</h2>\n    <p>{`Use the Puppeteer recorder to do a runthrough of the events you want to cover. `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/checkly/puppeteer-recorder\"\n      }}>{`Check here`}</a>{` for more info.`}</p>\n    <p>{`After running through with the recorder, we should be able to modify the Puppeteer template. The end result could look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * ComponentALLandingOne tests\n */\nconst puppeteer = require('puppeteer');\nconst json = require('./db.json');\nconst fs = require('fs-extra');\nconst cwd = process.cwd();\nconst server = require(cwd + '/controllers/json-server');\nconst wait = require('waait');\nconst Recorder = require(cwd + '/src/common/Recorder').default;\nlet dbJson;\nserver.listen(4444, () => console.log('JSON DB server started'));\n\ndescribe('ComponentALLandingFive UI functionality', () => {\n  describe('ComponentALLandingFive events', () => {\n    beforeEach(() => {\n      dbJson = fs.readJsonSync(cwd + '/db.json');\n      dbJson.events.map((e) => Recorder.delete(e.id));\n    });\n\n    it('Events emitted equals prerecording', async () => {\n      const browser = await puppeteer.launch();\n      const page = await browser.newPage();\n\n      await page.goto('http://localhost:3000/ComponentALLandingFive');\n      await page.waitForSelector(\n        '.grid > .item > .flex > .block-info > .primary'\n      );\n      await page.click('.grid > .item > .flex > .block-info > .primary');\n\n      await page.goto('http://localhost:3000/ComponentALLandingFive');\n\n      await browser.close();\n\n      await wait(300);\n      dbJson = fs.readJsonSync(cwd + '/db.json');\n\n      expect(dbJson).to.deep.equal(json);\n    });\n  });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"init-the-component-dbjson-file\"\n    }}>{`Init the component db.json file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"events\": []\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"first-run-through-of-the-file\"\n    }}>{`First run through of the file`}</h2>\n    <p>{`If we decide to run that Puppeteer test`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}