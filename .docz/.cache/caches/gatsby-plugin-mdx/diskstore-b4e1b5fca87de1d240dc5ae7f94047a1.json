{"expireTime":9007200852878332000,"key":"gatsby-plugin-mdx-entire-payload-ea464e09c305cd58c2c502fdb1637756-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"iOS Gaming Intro","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":19,"offset":185},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":19,"offset":185},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"IOSGAME-1: Ziggity Gag using SpriteKit","position":{"start":{"line":10,"column":4,"offset":190},"end":{"line":10,"column":42,"offset":228},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":187},"end":{"line":10,"column":42,"offset":228},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"IOSGAME-1.1: Creating the Scene","position":{"start":{"line":12,"column":4,"offset":233},"end":{"line":12,"column":35,"offset":264},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":230},"end":{"line":12,"column":35,"offset":264},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As a new Xcode Project, let's select Game, name, next and create!","position":{"start":{"line":14,"column":1,"offset":266},"end":{"line":14,"column":66,"offset":331},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":266},"end":{"line":14,"column":66,"offset":331},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When beginning, you will find a ","position":{"start":{"line":16,"column":1,"offset":333},"end":{"line":16,"column":33,"offset":365},"indent":[]}},{"type":"inlineCode","value":"GameViewController.swift","position":{"start":{"line":16,"column":33,"offset":365},"end":{"line":16,"column":59,"offset":391},"indent":[]}},{"type":"text","value":" file. Starting from scratch, remove everything such that it looks like the following:","position":{"start":{"line":16,"column":59,"offset":391},"end":{"line":16,"column":145,"offset":477},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":333},"end":{"line":16,"column":145,"offset":477},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"import UIKit\nimport SpriteKit\nimport GameplayKit\n\nclass GameViewController: UIViewController {\n\n\n}","position":{"start":{"line":18,"column":1,"offset":479},"end":{"line":27,"column":4,"offset":590},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then, we begin by creating the scene:","position":{"start":{"line":29,"column":1,"offset":592},"end":{"line":29,"column":38,"offset":629},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":592},"end":{"line":29,"column":38,"offset":629},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"import UIKit\nimport QuartzCore\nimport SceneKit\n\nclass GameViewController: UIViewController {\n\n  let scene = SCNScene()\n  // where the camera is kept essentially\n  let cameraNode = SCNNode()\n\n  let firstBox = SCNNode()\n\n  override func viewDidLoad() {\n    self.createScene()\n  }\n\n  func createScene() {\n    // adding objects onto this view that's on the storyboard\n    let sceneView = self.view as! SCNView\n\n    sceneView.scene = scene\n\n    // Create Camera\n    cameraNode.camera = SCNCamera()\n    cameraNode.camera?.usesOrthographicProjection = true\n    cameraNode.camera?.orthographicScale = 3\n    cameraNode.position = SCNVector3Make(20, 20, 20)\n    cameraNode.eulerAngles = SCNVector3Make(-45, 45, 0)\n    let constraint = SCNLookAtConstraint(target: firstBox)\n    constraint.isGimbalLockEnabled = true\n    self.cameraNode.constraints = [constraint]\n    scene.rootNode.addChildNode(cameraNode)\n\n    // Create Box\n    // This will be the first box that is created\n    // and every box create later will be due to this box\n    // chamferRadius is for the edge pointiness\n    let firstBoxGeo = SCNBox(width: 1, height: 1.5, length: 1, chamferRadius: 0)\n    firstBox.geometry = firstBoxGeo\n    firstBox.position = SCNVector3Make(0, 0, 0)\n    scene.rootNode.addChildNode(firstBox)\n\n    // createLight\n    // this will be used so that we can see our box\n\n    let light = SCNNode()\n    light.light = SCNLight()\n    light.light?.type = SCNLight.LightType.directional\n    light.eulerAngles = SCNVector3Make(-45, 45, 0)\n    scene.rootNode.addChildNode(light)\n  }\n\n}","position":{"start":{"line":31,"column":1,"offset":631},"end":{"line":85,"column":4,"offset":2201},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To explore how the camera works, feel free to head to ","position":{"start":{"line":87,"column":1,"offset":2203},"end":{"line":87,"column":55,"offset":2257},"indent":[]}},{"type":"inlineCode","value":"art.scnassets > ship.scn","position":{"start":{"line":87,"column":55,"offset":2257},"end":{"line":87,"column":81,"offset":2283},"indent":[]}},{"type":"text","value":" and throw in a camera to see how it works.","position":{"start":{"line":87,"column":81,"offset":2283},"end":{"line":87,"column":124,"offset":2326},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2203},"end":{"line":87,"column":124,"offset":2326},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"From this, you can head to position after adding a camera and chang the ","position":{"start":{"line":89,"column":1,"offset":2328},"end":{"line":89,"column":73,"offset":2400},"indent":[]}},{"type":"inlineCode","value":"Position","position":{"start":{"line":89,"column":73,"offset":2400},"end":{"line":89,"column":83,"offset":2410},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":89,"column":83,"offset":2410},"end":{"line":89,"column":88,"offset":2415},"indent":[]}},{"type":"inlineCode","value":"Euler","position":{"start":{"line":89,"column":88,"offset":2415},"end":{"line":89,"column":95,"offset":2422},"indent":[]}},{"type":"text","value":" to see the changes that this makes. ","position":{"start":{"line":89,"column":95,"offset":2422},"end":{"line":89,"column":132,"offset":2459},"indent":[]}},{"type":"inlineCode","value":"Euler","position":{"start":{"line":89,"column":132,"offset":2459},"end":{"line":89,"column":139,"offset":2466},"indent":[]}},{"type":"text","value":" essentially rotates it clockwise around the axis.","position":{"start":{"line":89,"column":139,"offset":2466},"end":{"line":89,"column":189,"offset":2516},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2328},"end":{"line":89,"column":189,"offset":2516},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"After changing this, you can select ","position":{"start":{"line":91,"column":1,"offset":2518},"end":{"line":91,"column":37,"offset":2554},"indent":[]}},{"type":"inlineCode","value":"camera","position":{"start":{"line":91,"column":37,"offset":2554},"end":{"line":91,"column":45,"offset":2562},"indent":[]}},{"type":"text","value":" from the bottom just to see how it looks.","position":{"start":{"line":91,"column":45,"offset":2562},"end":{"line":91,"column":87,"offset":2604},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2518},"end":{"line":91,"column":87,"offset":2604},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"IOSGAME-1.2: Adding Colors and a Person","position":{"start":{"line":93,"column":4,"offset":2609},"end":{"line":93,"column":43,"offset":2648},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2606},"end":{"line":93,"column":43,"offset":2648},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create a global node: ","position":{"start":{"line":95,"column":1,"offset":2650},"end":{"line":95,"column":23,"offset":2672},"indent":[]}},{"type":"inlineCode","value":"var person = SCNNode()","position":{"start":{"line":95,"column":23,"offset":2672},"end":{"line":95,"column":47,"offset":2696},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2650},"end":{"line":95,"column":47,"offset":2696},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Then, in ","position":{"start":{"line":97,"column":1,"offset":2698},"end":{"line":97,"column":10,"offset":2707},"indent":[]}},{"type":"inlineCode","value":"createScene()","position":{"start":{"line":97,"column":10,"offset":2707},"end":{"line":97,"column":25,"offset":2722},"indent":[]}},{"type":"text","value":" we can add","position":{"start":{"line":97,"column":25,"offset":2722},"end":{"line":97,"column":36,"offset":2733},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2698},"end":{"line":97,"column":36,"offset":2733},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"// Create Person\n\nlet personGeo = SCNSphere(radius: 0.2)\nperson = SCNNode(geometry: personGeo)\nlet personMat = SCNMaterial()\npersonMat.diffuse.contents = UIColor.red\npersonGeo.materials = [personMat]\nperson.position = SCNVector3Make(0, 1.1, 0)\nscene.rootNode.addChildNode(person)","position":{"start":{"line":99,"column":1,"offset":2735},"end":{"line":109,"column":4,"offset":3027},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For the actions, we can override the ","position":{"start":{"line":111,"column":1,"offset":3029},"end":{"line":111,"column":38,"offset":3066},"indent":[]}},{"type":"inlineCode","value":"touchesBegan()","position":{"start":{"line":111,"column":38,"offset":3066},"end":{"line":111,"column":54,"offset":3082},"indent":[]}},{"type":"text","value":" function and apply some logic. Ensure that you create the appropriate global Booleans.","position":{"start":{"line":111,"column":54,"offset":3082},"end":{"line":111,"column":141,"offset":3169},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":3029},"end":{"line":111,"column":141,"offset":3169},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if goingLeft == false {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(-100, 0, 0), duration: 20)))\n      goingLeft = true\n    } else {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(0, 0, -100), duration: 20)))\n      goingLeft = false\n    }\n  }","position":{"start":{"line":113,"column":1,"offset":3171},"end":{"line":125,"column":4,"offset":3641},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"After adjusting the constaint of what we want the camera to look at etc. we can now start using the camera to look our \"person\". The code up to the end of this section looks as follows:","position":{"start":{"line":127,"column":1,"offset":3643},"end":{"line":127,"column":186,"offset":3828},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":3643},"end":{"line":127,"column":186,"offset":3828},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"import UIKit\nimport QuartzCore\nimport SceneKit\n\nclass GameViewController: UIViewController {\n\n  let scene = SCNScene()\n  // where the camera is kept essentially\n  let cameraNode = SCNNode()\n\n  let firstBox = SCNNode()\n\n  var person = SCNNode()\n\n  var goingLeft = Bool()\n\n  override func viewDidLoad() {\n    self.createScene()\n  }\n\n  override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if goingLeft == false {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(-100, 0, 0), duration: 20)))\n      goingLeft = true\n    } else {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(0, 0, -100), duration: 20)))\n      goingLeft = false\n    }\n  }\n\n  func createScene() {\n\n    self.view.backgroundColor = UIColor.white\n\n    // adding objects onto this view that's on the storyboard\n    let sceneView = self.view as! SCNView\n\n    sceneView.scene = scene\n\n    // Create Person\n\n    let personGeo = SCNSphere(radius: 0.2)\n    person = SCNNode(geometry: personGeo)\n    let personMat = SCNMaterial()\n    personMat.diffuse.contents = UIColor.red\n    personGeo.materials = [personMat]\n    person.position = SCNVector3Make(0, 1.1, 0)\n    scene.rootNode.addChildNode(person)\n\n    // Create Camera\n    cameraNode.camera = SCNCamera()\n    cameraNode.camera?.usesOrthographicProjection = true\n    cameraNode.camera?.orthographicScale = 3\n    cameraNode.position = SCNVector3Make(20, 20, 20)\n    cameraNode.eulerAngles = SCNVector3Make(-45, 45, 0)\n    let constraint = SCNLookAtConstraint(target: person)\n    constraint.isGimbalLockEnabled = true\n    self.cameraNode.constraints = [constraint]\n    scene.rootNode.addChildNode(cameraNode)\n    person.addChildNode(cameraNode)\n\n    // Create Box\n    // This will be the first box that is created\n    // and every box create later will be due to this box\n    // chamferRadius is for the edge pointiness\n    let firstBoxGeo = SCNBox(width: 1, height: 1.5, length: 1, chamferRadius: 0)\n    firstBox.geometry = firstBoxGeo\n    let boxMaterial = SCNMaterial()\n    boxMaterial.diffuse.contents = UIColor(red: 0.2, green: 0.8, blue: 0.9, alpha: 1.0)\n    firstBoxGeo.materials = [boxMaterial]\n    firstBox.position = SCNVector3Make(0, 0, 0)\n    scene.rootNode.addChildNode(firstBox)\n\n    // Create Light\n    // this will be used so that we can see our box\n\n    let light = SCNNode()\n    light.light = SCNLight()\n    light.light?.type = SCNLight.LightType.directional\n    light.eulerAngles = SCNVector3Make(-45, 45, 0)\n    scene.rootNode.addChildNode(light)\n\n    let light2 = SCNNode()\n    light2.light = SCNLight()\n    light2.light?.type = SCNLight.LightType.directional\n    light2.eulerAngles = SCNVector3Make(45, 45, 0)\n    scene.rootNode.addChildNode(light2)\n  }\n}","position":{"start":{"line":129,"column":1,"offset":3830},"end":{"line":221,"column":4,"offset":6679},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"IOSGAME-1.3: Creating a Path","position":{"start":{"line":223,"column":4,"offset":6684},"end":{"line":223,"column":32,"offset":6712},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":6681},"end":{"line":223,"column":32,"offset":6712},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Creating the function createBox(), we can use a new SCNNode dynamically generated along with a switch on ","position":{"start":{"line":225,"column":1,"offset":6714},"end":{"line":225,"column":106,"offset":6819},"indent":[]}},{"type":"inlineCode","value":"arc4random","position":{"start":{"line":225,"column":106,"offset":6819},"end":{"line":225,"column":118,"offset":6831},"indent":[]}},{"type":"text","value":" in order to create new boxes.","position":{"start":{"line":225,"column":118,"offset":6831},"end":{"line":225,"column":148,"offset":6861},"indent":[]}}],"position":{"start":{"line":225,"column":1,"offset":6714},"end":{"line":225,"column":148,"offset":6861},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"func createBox() {\n    tempBox = SCNNode(geometry: firstBox.geometry)\n    let prevBox = scene.rootNode.childNode(withName: \"\\(boxNumber)\", recursively: true)\n\n    boxNumber += 1\n    tempBox.name = \"\\(boxNumber)\"\n\n    let randomNumber = arc4random() % 2\n\n    switch randomNumber {\n      case 0:\n        tempBox.position = SCNVector3Make((prevBox?.position.x)! - firstBox.scale.x, (prevBox?.position.y)!, (prevBox?.position.z)!)\n        break\n      case 1:\n        tempBox.position = SCNVector3Make((prevBox?.position.x)!, (prevBox?.position.y)!, (prevBox?.position.z)! - firstBox.scale.z)\n        break\n      default:\n        break\n    }\n\n    self.scene.rootNode.addChildNode(tempBox)\n  }","position":{"start":{"line":227,"column":1,"offset":6863},"end":{"line":250,"column":4,"offset":7558},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"By the end of this stage, you will end up having a path to follow that has 6 boxes ahead for you to see, but it will not decide whether or not you are on the box.","position":{"start":{"line":252,"column":1,"offset":7560},"end":{"line":252,"column":163,"offset":7722},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":7560},"end":{"line":252,"column":163,"offset":7722},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"import UIKit\nimport QuartzCore\nimport SceneKit\n\nclass GameViewController: UIViewController, SCNSceneRendererDelegate {\n\n  let scene = SCNScene()\n  // where the camera is kept essentially\n  let cameraNode = SCNNode()\n\n  let firstBox = SCNNode()\n\n  var person = SCNNode()\n\n  var goingLeft = Bool()\n\n  var tempBox = SCNNode()\n\n  var prevBoxNumber = Int()\n  var boxNumber = Int()\n\n  override func viewDidLoad() {\n    self.createScene()\n  }\n\n  // used to ensure ball is on the path\n  func renderer(_ renderer: SCNSceneRenderer, updateAtTime time: TimeInterval) {\n    let deleteBox = self.scene.rootNode.childNode(withName: \"\\(prevBoxNumber)\", recursively: true)\n\n    if (deleteBox?.position.x)! > person.position.x + 1 || (deleteBox?.position.z)! > person.position.z + 1 {\n      prevBoxNumber+=1\n\n      deleteBox?.removeFromParentNode()\n\n      createBox()\n    }\n  }\n\n  func createBox() {\n    tempBox = SCNNode(geometry: firstBox.geometry)\n    let prevBox = scene.rootNode.childNode(withName: \"\\(boxNumber)\", recursively: true)\n\n    boxNumber += 1\n    tempBox.name = \"\\(boxNumber)\"\n\n    let randomNumber = arc4random() % 2\n\n    switch randomNumber {\n      case 0:\n        tempBox.position = SCNVector3Make((prevBox?.position.x)! - firstBox.scale.x, (prevBox?.position.y)!, (prevBox?.position.z)!)\n        break\n      case 1:\n        tempBox.position = SCNVector3Make((prevBox?.position.x)!, (prevBox?.position.y)!, (prevBox?.position.z)! - firstBox.scale.z)\n        break\n      default:\n        break\n    }\n\n    self.scene.rootNode.addChildNode(tempBox)\n  }\n\n  override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if goingLeft == false {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(-100, 0, 0), duration: 20)))\n      goingLeft = true\n    } else {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(0, 0, -100), duration: 20)))\n      goingLeft = false\n    }\n  }\n\n  func createScene() {\n\n    prevBoxNumber = 0\n    boxNumber = 0\n\n    self.view.backgroundColor = UIColor.white\n\n    // adding objects onto this view that's on the storyboard\n    let sceneView = self.view as! SCNView\n    sceneView.delegate = self\n    sceneView.scene = scene\n\n    // Create Person\n    let personGeo = SCNSphere(radius: 0.2)\n    person = SCNNode(geometry: personGeo)\n    let personMat = SCNMaterial()\n    personMat.diffuse.contents = UIColor.red\n    personGeo.materials = [personMat]\n    person.position = SCNVector3Make(0, 1.1, 0)\n    scene.rootNode.addChildNode(person)\n\n    // Create Camera\n    cameraNode.camera = SCNCamera()\n    cameraNode.camera?.usesOrthographicProjection = true\n    cameraNode.camera?.orthographicScale = 3\n    cameraNode.position = SCNVector3Make(20, 20, 20)\n    cameraNode.eulerAngles = SCNVector3Make(-45, 45, 0)\n    let constraint = SCNLookAtConstraint(target: person)\n    constraint.isGimbalLockEnabled = true\n    self.cameraNode.constraints = [constraint]\n    scene.rootNode.addChildNode(cameraNode)\n    person.addChildNode(cameraNode)\n\n    // Create Box\n    // This will be the first box that is created\n    // and every box create later will be due to this box\n    // chamferRadius is for the edge pointiness\n    let firstBoxGeo = SCNBox(width: 1, height: 1.5, length: 1, chamferRadius: 0)\n    firstBox.geometry = firstBoxGeo\n    let boxMaterial = SCNMaterial()\n    boxMaterial.diffuse.contents = UIColor(red: 0.2, green: 0.8, blue: 0.9, alpha: 1.0)\n    firstBoxGeo.materials = [boxMaterial]\n    firstBox.position = SCNVector3Make(0, 0, 0)\n    scene.rootNode.addChildNode(firstBox)\n    firstBox.name = \"\\(boxNumber)\"\n\n    for i in 0...6 {\n      createBox()\n    }\n\n    // Create Light\n    // this will be used so that we can see our box\n\n    let light = SCNNode()\n    light.light = SCNLight()\n    light.light?.type = SCNLight.LightType.directional\n    light.eulerAngles = SCNVector3Make(-45, 45, 0)\n    scene.rootNode.addChildNode(light)\n\n    let light2 = SCNNode()\n    light2.light = SCNLight()\n    light2.light?.type = SCNLight.LightType.directional\n    light2.eulerAngles = SCNVector3Make(45, 45, 0)\n    scene.rootNode.addChildNode(light2)\n  }\n}","position":{"start":{"line":254,"column":1,"offset":7724},"end":{"line":394,"column":4,"offset":11945},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"IOSGAME-1.4: Keeping a person on the path","position":{"start":{"line":396,"column":4,"offset":11950},"end":{"line":396,"column":45,"offset":11991},"indent":[]}}],"position":{"start":{"line":396,"column":1,"offset":11947},"end":{"line":396,"column":45,"offset":11991},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":399,"column":1,"offset":11994},"end":{"line":399,"column":31,"offset":12024},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":399,"column":31,"offset":12024}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"ios-gaming-intro\"\n    }}>{`iOS Gaming Intro`}</h1>\n    <h2 {...{\n      \"id\": \"iosgame-1-ziggity-gag-using-spritekit\"\n    }}>{`IOSGAME-1: Ziggity Gag using SpriteKit`}</h2>\n    <h2 {...{\n      \"id\": \"iosgame-11-creating-the-scene\"\n    }}>{`IOSGAME-1.1: Creating the Scene`}</h2>\n    <p>{`As a new Xcode Project, let's select Game, name, next and create!`}</p>\n    <p>{`When beginning, you will find a `}<inlineCode parentName=\"p\">{`GameViewController.swift`}</inlineCode>{` file. Starting from scratch, remove everything such that it looks like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import UIKit\nimport SpriteKit\nimport GameplayKit\n\nclass GameViewController: UIViewController {\n\n\n}\n`}</code></pre>\n    <p>{`Then, we begin by creating the scene:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import UIKit\nimport QuartzCore\nimport SceneKit\n\nclass GameViewController: UIViewController {\n\n  let scene = SCNScene()\n  // where the camera is kept essentially\n  let cameraNode = SCNNode()\n\n  let firstBox = SCNNode()\n\n  override func viewDidLoad() {\n    self.createScene()\n  }\n\n  func createScene() {\n    // adding objects onto this view that's on the storyboard\n    let sceneView = self.view as! SCNView\n\n    sceneView.scene = scene\n\n    // Create Camera\n    cameraNode.camera = SCNCamera()\n    cameraNode.camera?.usesOrthographicProjection = true\n    cameraNode.camera?.orthographicScale = 3\n    cameraNode.position = SCNVector3Make(20, 20, 20)\n    cameraNode.eulerAngles = SCNVector3Make(-45, 45, 0)\n    let constraint = SCNLookAtConstraint(target: firstBox)\n    constraint.isGimbalLockEnabled = true\n    self.cameraNode.constraints = [constraint]\n    scene.rootNode.addChildNode(cameraNode)\n\n    // Create Box\n    // This will be the first box that is created\n    // and every box create later will be due to this box\n    // chamferRadius is for the edge pointiness\n    let firstBoxGeo = SCNBox(width: 1, height: 1.5, length: 1, chamferRadius: 0)\n    firstBox.geometry = firstBoxGeo\n    firstBox.position = SCNVector3Make(0, 0, 0)\n    scene.rootNode.addChildNode(firstBox)\n\n    // createLight\n    // this will be used so that we can see our box\n\n    let light = SCNNode()\n    light.light = SCNLight()\n    light.light?.type = SCNLight.LightType.directional\n    light.eulerAngles = SCNVector3Make(-45, 45, 0)\n    scene.rootNode.addChildNode(light)\n  }\n\n}\n`}</code></pre>\n    <p>{`To explore how the camera works, feel free to head to `}<inlineCode parentName=\"p\">{`art.scnassets > ship.scn`}</inlineCode>{` and throw in a camera to see how it works.`}</p>\n    <p>{`From this, you can head to position after adding a camera and chang the `}<inlineCode parentName=\"p\">{`Position`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Euler`}</inlineCode>{` to see the changes that this makes. `}<inlineCode parentName=\"p\">{`Euler`}</inlineCode>{` essentially rotates it clockwise around the axis.`}</p>\n    <p>{`After changing this, you can select `}<inlineCode parentName=\"p\">{`camera`}</inlineCode>{` from the bottom just to see how it looks.`}</p>\n    <h2 {...{\n      \"id\": \"iosgame-12-adding-colors-and-a-person\"\n    }}>{`IOSGAME-1.2: Adding Colors and a Person`}</h2>\n    <p>{`Create a global node: `}<inlineCode parentName=\"p\">{`var person = SCNNode()`}</inlineCode></p>\n    <p>{`Then, in `}<inlineCode parentName=\"p\">{`createScene()`}</inlineCode>{` we can add`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// Create Person\n\nlet personGeo = SCNSphere(radius: 0.2)\nperson = SCNNode(geometry: personGeo)\nlet personMat = SCNMaterial()\npersonMat.diffuse.contents = UIColor.red\npersonGeo.materials = [personMat]\nperson.position = SCNVector3Make(0, 1.1, 0)\nscene.rootNode.addChildNode(person)\n`}</code></pre>\n    <p>{`For the actions, we can override the `}<inlineCode parentName=\"p\">{`touchesBegan()`}</inlineCode>{` function and apply some logic. Ensure that you create the appropriate global Booleans.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if goingLeft == false {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(-100, 0, 0), duration: 20)))\n      goingLeft = true\n    } else {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(0, 0, -100), duration: 20)))\n      goingLeft = false\n    }\n  }\n`}</code></pre>\n    <p>{`After adjusting the constaint of what we want the camera to look at etc. we can now start using the camera to look our \"person\". The code up to the end of this section looks as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import UIKit\nimport QuartzCore\nimport SceneKit\n\nclass GameViewController: UIViewController {\n\n  let scene = SCNScene()\n  // where the camera is kept essentially\n  let cameraNode = SCNNode()\n\n  let firstBox = SCNNode()\n\n  var person = SCNNode()\n\n  var goingLeft = Bool()\n\n  override func viewDidLoad() {\n    self.createScene()\n  }\n\n  override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if goingLeft == false {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(-100, 0, 0), duration: 20)))\n      goingLeft = true\n    } else {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(0, 0, -100), duration: 20)))\n      goingLeft = false\n    }\n  }\n\n  func createScene() {\n\n    self.view.backgroundColor = UIColor.white\n\n    // adding objects onto this view that's on the storyboard\n    let sceneView = self.view as! SCNView\n\n    sceneView.scene = scene\n\n    // Create Person\n\n    let personGeo = SCNSphere(radius: 0.2)\n    person = SCNNode(geometry: personGeo)\n    let personMat = SCNMaterial()\n    personMat.diffuse.contents = UIColor.red\n    personGeo.materials = [personMat]\n    person.position = SCNVector3Make(0, 1.1, 0)\n    scene.rootNode.addChildNode(person)\n\n    // Create Camera\n    cameraNode.camera = SCNCamera()\n    cameraNode.camera?.usesOrthographicProjection = true\n    cameraNode.camera?.orthographicScale = 3\n    cameraNode.position = SCNVector3Make(20, 20, 20)\n    cameraNode.eulerAngles = SCNVector3Make(-45, 45, 0)\n    let constraint = SCNLookAtConstraint(target: person)\n    constraint.isGimbalLockEnabled = true\n    self.cameraNode.constraints = [constraint]\n    scene.rootNode.addChildNode(cameraNode)\n    person.addChildNode(cameraNode)\n\n    // Create Box\n    // This will be the first box that is created\n    // and every box create later will be due to this box\n    // chamferRadius is for the edge pointiness\n    let firstBoxGeo = SCNBox(width: 1, height: 1.5, length: 1, chamferRadius: 0)\n    firstBox.geometry = firstBoxGeo\n    let boxMaterial = SCNMaterial()\n    boxMaterial.diffuse.contents = UIColor(red: 0.2, green: 0.8, blue: 0.9, alpha: 1.0)\n    firstBoxGeo.materials = [boxMaterial]\n    firstBox.position = SCNVector3Make(0, 0, 0)\n    scene.rootNode.addChildNode(firstBox)\n\n    // Create Light\n    // this will be used so that we can see our box\n\n    let light = SCNNode()\n    light.light = SCNLight()\n    light.light?.type = SCNLight.LightType.directional\n    light.eulerAngles = SCNVector3Make(-45, 45, 0)\n    scene.rootNode.addChildNode(light)\n\n    let light2 = SCNNode()\n    light2.light = SCNLight()\n    light2.light?.type = SCNLight.LightType.directional\n    light2.eulerAngles = SCNVector3Make(45, 45, 0)\n    scene.rootNode.addChildNode(light2)\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iosgame-13-creating-a-path\"\n    }}>{`IOSGAME-1.3: Creating a Path`}</h2>\n    <p>{`Creating the function createBox(), we can use a new SCNNode dynamically generated along with a switch on `}<inlineCode parentName=\"p\">{`arc4random`}</inlineCode>{` in order to create new boxes.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`func createBox() {\n    tempBox = SCNNode(geometry: firstBox.geometry)\n    let prevBox = scene.rootNode.childNode(withName: \"\\\\(boxNumber)\", recursively: true)\n\n    boxNumber += 1\n    tempBox.name = \"\\\\(boxNumber)\"\n\n    let randomNumber = arc4random() % 2\n\n    switch randomNumber {\n      case 0:\n        tempBox.position = SCNVector3Make((prevBox?.position.x)! - firstBox.scale.x, (prevBox?.position.y)!, (prevBox?.position.z)!)\n        break\n      case 1:\n        tempBox.position = SCNVector3Make((prevBox?.position.x)!, (prevBox?.position.y)!, (prevBox?.position.z)! - firstBox.scale.z)\n        break\n      default:\n        break\n    }\n\n    self.scene.rootNode.addChildNode(tempBox)\n  }\n`}</code></pre>\n    <p>{`By the end of this stage, you will end up having a path to follow that has 6 boxes ahead for you to see, but it will not decide whether or not you are on the box.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import UIKit\nimport QuartzCore\nimport SceneKit\n\nclass GameViewController: UIViewController, SCNSceneRendererDelegate {\n\n  let scene = SCNScene()\n  // where the camera is kept essentially\n  let cameraNode = SCNNode()\n\n  let firstBox = SCNNode()\n\n  var person = SCNNode()\n\n  var goingLeft = Bool()\n\n  var tempBox = SCNNode()\n\n  var prevBoxNumber = Int()\n  var boxNumber = Int()\n\n  override func viewDidLoad() {\n    self.createScene()\n  }\n\n  // used to ensure ball is on the path\n  func renderer(_ renderer: SCNSceneRenderer, updateAtTime time: TimeInterval) {\n    let deleteBox = self.scene.rootNode.childNode(withName: \"\\\\(prevBoxNumber)\", recursively: true)\n\n    if (deleteBox?.position.x)! > person.position.x + 1 || (deleteBox?.position.z)! > person.position.z + 1 {\n      prevBoxNumber+=1\n\n      deleteBox?.removeFromParentNode()\n\n      createBox()\n    }\n  }\n\n  func createBox() {\n    tempBox = SCNNode(geometry: firstBox.geometry)\n    let prevBox = scene.rootNode.childNode(withName: \"\\\\(boxNumber)\", recursively: true)\n\n    boxNumber += 1\n    tempBox.name = \"\\\\(boxNumber)\"\n\n    let randomNumber = arc4random() % 2\n\n    switch randomNumber {\n      case 0:\n        tempBox.position = SCNVector3Make((prevBox?.position.x)! - firstBox.scale.x, (prevBox?.position.y)!, (prevBox?.position.z)!)\n        break\n      case 1:\n        tempBox.position = SCNVector3Make((prevBox?.position.x)!, (prevBox?.position.y)!, (prevBox?.position.z)! - firstBox.scale.z)\n        break\n      default:\n        break\n    }\n\n    self.scene.rootNode.addChildNode(tempBox)\n  }\n\n  override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if goingLeft == false {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(-100, 0, 0), duration: 20)))\n      goingLeft = true\n    } else {\n      person.removeAllActions()\n      person.runAction(SCNAction.repeatForever(SCNAction.move(by: SCNVector3Make(0, 0, -100), duration: 20)))\n      goingLeft = false\n    }\n  }\n\n  func createScene() {\n\n    prevBoxNumber = 0\n    boxNumber = 0\n\n    self.view.backgroundColor = UIColor.white\n\n    // adding objects onto this view that's on the storyboard\n    let sceneView = self.view as! SCNView\n    sceneView.delegate = self\n    sceneView.scene = scene\n\n    // Create Person\n    let personGeo = SCNSphere(radius: 0.2)\n    person = SCNNode(geometry: personGeo)\n    let personMat = SCNMaterial()\n    personMat.diffuse.contents = UIColor.red\n    personGeo.materials = [personMat]\n    person.position = SCNVector3Make(0, 1.1, 0)\n    scene.rootNode.addChildNode(person)\n\n    // Create Camera\n    cameraNode.camera = SCNCamera()\n    cameraNode.camera?.usesOrthographicProjection = true\n    cameraNode.camera?.orthographicScale = 3\n    cameraNode.position = SCNVector3Make(20, 20, 20)\n    cameraNode.eulerAngles = SCNVector3Make(-45, 45, 0)\n    let constraint = SCNLookAtConstraint(target: person)\n    constraint.isGimbalLockEnabled = true\n    self.cameraNode.constraints = [constraint]\n    scene.rootNode.addChildNode(cameraNode)\n    person.addChildNode(cameraNode)\n\n    // Create Box\n    // This will be the first box that is created\n    // and every box create later will be due to this box\n    // chamferRadius is for the edge pointiness\n    let firstBoxGeo = SCNBox(width: 1, height: 1.5, length: 1, chamferRadius: 0)\n    firstBox.geometry = firstBoxGeo\n    let boxMaterial = SCNMaterial()\n    boxMaterial.diffuse.contents = UIColor(red: 0.2, green: 0.8, blue: 0.9, alpha: 1.0)\n    firstBoxGeo.materials = [boxMaterial]\n    firstBox.position = SCNVector3Make(0, 0, 0)\n    scene.rootNode.addChildNode(firstBox)\n    firstBox.name = \"\\\\(boxNumber)\"\n\n    for i in 0...6 {\n      createBox()\n    }\n\n    // Create Light\n    // this will be used so that we can see our box\n\n    let light = SCNNode()\n    light.light = SCNLight()\n    light.light?.type = SCNLight.LightType.directional\n    light.eulerAngles = SCNVector3Make(-45, 45, 0)\n    scene.rootNode.addChildNode(light)\n\n    let light2 = SCNNode()\n    light2.light = SCNLight()\n    light2.light?.type = SCNLight.LightType.directional\n    light2.eulerAngles = SCNVector3Make(45, 45, 0)\n    scene.rootNode.addChildNode(light2)\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iosgame-14-keeping-a-person-on-the-path\"\n    }}>{`IOSGAME-1.4: Keeping a person on the path`}</h2>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}