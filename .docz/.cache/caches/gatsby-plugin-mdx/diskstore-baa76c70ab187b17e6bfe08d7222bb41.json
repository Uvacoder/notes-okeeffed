{"expireTime":9007200867335913000,"key":"gatsby-plugin-mdx-entire-payload-dbbe51654d554fba91f5ba3378377dd9-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Writing CSV Files","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":20,"offset":186},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":20,"offset":186},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":10,"column":4,"offset":191},"end":{"line":10,"column":11,"offset":198},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":11,"offset":198},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"\"\"\"\nBasic example to read and write a csv file\n\"\"\"\nimport random\nimport csv\nimport threading\ncsv_writer_lock = threading.Lock()\n\ndef handle_event(event):\n\ttry:\n    event_id: random.randrange(0,100) # used for example\n    issue_id: random.randrange(0,100)\n\t\trow_dict = {\n\t\t\t'issue_id': issue_id,\n\t\t\t'event_id': event_id,\n\t\t\t'console_output': ''\n\t\t}\n\n    row_dict['console_output'] = crumb\n    with csv_writer_lock:\n      writer.writerow(row_dict)\n\ntry:\n\twith open('./fetch_events_by_issue.csv', 'w') as output_file:\n\t\tfieldnames = ['issue_id', 'event_id', 'console_output']\n\t\twriter = csv.DictWriter(output_file, fieldnames=fieldnames)\n\n    # pretending we are reading another file\n\t\twith open('./project_issues.csv', 'r') as file:\n\t\t\tdata = file.read().splitlines()\n\t\t\tfor value in data:\n        handle_event(value)","position":{"start":{"line":12,"column":1,"offset":200},"end":{"line":45,"column":4,"offset":1029},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":48,"column":1,"offset":1032},"end":{"line":48,"column":31,"offset":1062},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":48,"column":31,"offset":1062}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"writing-csv-files\"\n    }}>{`Writing CSV Files`}</h1>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`\"\"\"\nBasic example to read and write a csv file\n\"\"\"\nimport random\nimport csv\nimport threading\ncsv_writer_lock = threading.Lock()\n\ndef handle_event(event):\n    try:\n    event_id: random.randrange(0,100) # used for example\n    issue_id: random.randrange(0,100)\n        row_dict = {\n            'issue_id': issue_id,\n            'event_id': event_id,\n            'console_output': ''\n        }\n\n    row_dict['console_output'] = crumb\n    with csv_writer_lock:\n      writer.writerow(row_dict)\n\ntry:\n    with open('./fetch_events_by_issue.csv', 'w') as output_file:\n        fieldnames = ['issue_id', 'event_id', 'console_output']\n        writer = csv.DictWriter(output_file, fieldnames=fieldnames)\n\n    # pretending we are reading another file\n        with open('./project_issues.csv', 'r') as file:\n            data = file.read().splitlines()\n            for value in data:\n        handle_event(value)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}