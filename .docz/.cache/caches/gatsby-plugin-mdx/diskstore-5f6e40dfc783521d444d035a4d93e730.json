{"expireTime":9007200852878456000,"key":"gatsby-plugin-mdx-entire-payload-dc11b1dd8eda8a01b11efffa68e41535-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Adapter Pattern","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":18,"offset":184},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":18,"offset":184},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// the base adapter\ninterface RequestAdapter {\n  request(newParam: string): void;\n}\n\n// The adapter utilising the old way\nclass InterfaceAdapter implements RequestAdapter {\n  request(newParam: string): void {\n    const old = new OldInterface();\n    old.requestInOldWay({\n      data: newParam\n    });\n  }\n}\n\nclass OldInterface {\n  requestInOldWay(oldParam: any): void {\n    console.log(oldParam);\n  }\n}\n\n(function main() {\n  const adapter = new InterfaceAdapter();\n  adapter.request('param');\n})();","position":{"start":{"line":10,"column":1,"offset":186},"end":{"line":36,"column":4,"offset":701},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Lightning To MicroUSB Adapter Example","position":{"start":{"line":38,"column":4,"offset":706},"end":{"line":38,"column":41,"offset":743},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":703},"end":{"line":38,"column":41,"offset":743},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A great Java example:","position":{"start":{"line":40,"column":1,"offset":745},"end":{"line":40,"column":22,"offset":766},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":745},"end":{"line":40,"column":22,"offset":766},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"interface LightningPhone {\n    void recharge();\n    void useLightning();\n}\n\ninterface MicroUsbPhone {\n    void recharge();\n    void useMicroUsb();\n}\n\nclass Iphone implements LightningPhone {\n    private boolean connector;\n\n    @Override\n    public void useLightning() {\n        connector = true;\n        System.out.println(\"Lightning connected\");\n    }\n\n    @Override\n    public void recharge() {\n        if (connector) {\n            System.out.println(\"Recharge started\");\n            System.out.println(\"Recharge finished\");\n        } else {\n            System.out.println(\"Connect Lightning first\");\n        }\n    }\n}\n\nclass Android implements MicroUsbPhone {\n    private boolean connector;\n\n    @Override\n    public void useMicroUsb() {\n        connector = true;\n        System.out.println(\"MicroUsb connected\");\n    }\n\n    @Override\n    public void recharge() {\n        if (connector) {\n            System.out.println(\"Recharge started\");\n            System.out.println(\"Recharge finished\");\n        } else {\n            System.out.println(\"Connect MicroUsb first\");\n        }\n    }\n}\n\nclass LightningToMicroUsbAdapter implements MicroUsbPhone {\n    private final LightningPhone lightningPhone;\n\n    public LightningToMicroUsbAdapter(LightningPhone lightningPhone) {\n        this.lightningPhone = lightningPhone;\n    }\n\n    @Override\n    public void useMicroUsb() {\n        System.out.println(\"MicroUsb connected\");\n        lightningPhone.useLightning();\n    }\n\n    @Override\n    public void recharge() {\n        lightningPhone.recharge();\n    }\n}\n\npublic class AdapterDemo {\n    static void rechargeMicroUsbPhone(MicroUsbPhone phone) {\n        phone.useMicroUsb();\n        phone.recharge();\n    }\n\n    static void rechargeLightningPhone(LightningPhone phone) {\n        phone.useLightning();\n        phone.recharge();\n    }\n\n    public static void main(String[] args) {\n        Android android = new Android();\n        Iphone iPhone = new Iphone();\n\n        System.out.println(\"Recharging android with MicroUsb\");\n        rechargeMicroUsbPhone(android);\n\n        System.out.println(\"Recharging iPhone with Lightning\");\n        rechargeLightningPhone(iPhone);\n\n        System.out.println(\"Recharging iPhone with MicroUsb\");\n        rechargeMicroUsbPhone(new LightningToMicroUsbAdapter(iPhone));\n    }\n}","position":{"start":{"line":42,"column":1,"offset":768},"end":{"line":137,"column":4,"offset":3086},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":140,"column":1,"offset":3089},"end":{"line":140,"column":31,"offset":3119},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":140,"column":31,"offset":3119}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"adapter-pattern\"\n    }}>{`Adapter Pattern`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// the base adapter\ninterface RequestAdapter {\n  request(newParam: string): void;\n}\n\n// The adapter utilising the old way\nclass InterfaceAdapter implements RequestAdapter {\n  request(newParam: string): void {\n    const old = new OldInterface();\n    old.requestInOldWay({\n      data: newParam\n    });\n  }\n}\n\nclass OldInterface {\n  requestInOldWay(oldParam: any): void {\n    console.log(oldParam);\n  }\n}\n\n(function main() {\n  const adapter = new InterfaceAdapter();\n  adapter.request('param');\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lightning-to-microusb-adapter-example\"\n    }}>{`Lightning To MicroUSB Adapter Example`}</h2>\n    <p>{`A great Java example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`interface LightningPhone {\n    void recharge();\n    void useLightning();\n}\n\ninterface MicroUsbPhone {\n    void recharge();\n    void useMicroUsb();\n}\n\nclass Iphone implements LightningPhone {\n    private boolean connector;\n\n    @Override\n    public void useLightning() {\n        connector = true;\n        System.out.println(\"Lightning connected\");\n    }\n\n    @Override\n    public void recharge() {\n        if (connector) {\n            System.out.println(\"Recharge started\");\n            System.out.println(\"Recharge finished\");\n        } else {\n            System.out.println(\"Connect Lightning first\");\n        }\n    }\n}\n\nclass Android implements MicroUsbPhone {\n    private boolean connector;\n\n    @Override\n    public void useMicroUsb() {\n        connector = true;\n        System.out.println(\"MicroUsb connected\");\n    }\n\n    @Override\n    public void recharge() {\n        if (connector) {\n            System.out.println(\"Recharge started\");\n            System.out.println(\"Recharge finished\");\n        } else {\n            System.out.println(\"Connect MicroUsb first\");\n        }\n    }\n}\n\nclass LightningToMicroUsbAdapter implements MicroUsbPhone {\n    private final LightningPhone lightningPhone;\n\n    public LightningToMicroUsbAdapter(LightningPhone lightningPhone) {\n        this.lightningPhone = lightningPhone;\n    }\n\n    @Override\n    public void useMicroUsb() {\n        System.out.println(\"MicroUsb connected\");\n        lightningPhone.useLightning();\n    }\n\n    @Override\n    public void recharge() {\n        lightningPhone.recharge();\n    }\n}\n\npublic class AdapterDemo {\n    static void rechargeMicroUsbPhone(MicroUsbPhone phone) {\n        phone.useMicroUsb();\n        phone.recharge();\n    }\n\n    static void rechargeLightningPhone(LightningPhone phone) {\n        phone.useLightning();\n        phone.recharge();\n    }\n\n    public static void main(String[] args) {\n        Android android = new Android();\n        Iphone iPhone = new Iphone();\n\n        System.out.println(\"Recharging android with MicroUsb\");\n        rechargeMicroUsbPhone(android);\n\n        System.out.println(\"Recharging iPhone with Lightning\");\n        rechargeLightningPhone(iPhone);\n\n        System.out.println(\"Recharging iPhone with MicroUsb\");\n        rechargeMicroUsbPhone(new LightningToMicroUsbAdapter(iPhone));\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}