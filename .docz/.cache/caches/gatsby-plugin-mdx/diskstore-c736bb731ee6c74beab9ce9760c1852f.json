{"expireTime":9007200848610875000,"key":"gatsby-plugin-mdx-entire-payload-3230ddd0e0c7a7e88cf943ee81319c4b-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Fonts CLI","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":12,"offset":177},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":12,"offset":177},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This tool is a wrapper to help download/rename fonts to fit with the font naming conventions.","position":{"start":{"line":9,"column":1,"offset":179},"end":{"line":9,"column":94,"offset":272},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":179},"end":{"line":9,"column":94,"offset":272},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Conventions","position":{"start":{"line":11,"column":4,"offset":277},"end":{"line":11,"column":15,"offset":288},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":274},"end":{"line":11,"column":15,"offset":288},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For naming files, ensure that names are in lowercase format and that the numerals are replaced with common weight names (the renaming can be done with code).","position":{"start":{"line":13,"column":1,"offset":290},"end":{"line":13,"column":158,"offset":447},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":290},"end":{"line":13,"column":158,"offset":447},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We keep things lower case for purposes of serving on web, and replacing the numerals with the common font name is just an addition.","position":{"start":{"line":15,"column":1,"offset":449},"end":{"line":15,"column":132,"offset":580},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":449},"end":{"line":15,"column":132,"offset":580},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To see the conventional name for font weights, ","position":{"start":{"line":17,"column":1,"offset":582},"end":{"line":17,"column":48,"offset":629},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e","children":[{"type":"text","value":"Mozilla has a reference here.","position":{"start":{"line":17,"column":49,"offset":630},"end":{"line":17,"column":78,"offset":659},"indent":[]}}],"position":{"start":{"line":17,"column":48,"offset":629},"end":{"line":17,"column":160,"offset":741},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":582},"end":{"line":17,"column":160,"offset":741},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Examples","position":{"start":{"line":19,"column":5,"offset":747},"end":{"line":19,"column":13,"offset":755},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":743},"end":{"line":19,"column":13,"offset":755},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Example name","position":{"start":{"line":21,"column":3,"offset":759},"end":{"line":21,"column":15,"offset":771},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":759},"end":{"line":21,"column":30,"offset":786},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"After renaming","position":{"start":{"line":21,"column":33,"offset":789},"end":{"line":21,"column":47,"offset":803},"indent":[]}}],"position":{"start":{"line":21,"column":33,"offset":789},"end":{"line":21,"column":71,"offset":827},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":757},"end":{"line":21,"column":73,"offset":829},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"SourceSansPro-200.ttf","position":{"start":{"line":23,"column":3,"offset":905},"end":{"line":23,"column":24,"offset":926},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":905},"end":{"line":23,"column":30,"offset":932},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"source-sans-pro-extra-light.ttf","position":{"start":{"line":23,"column":33,"offset":935},"end":{"line":23,"column":64,"offset":966},"indent":[]}}],"position":{"start":{"line":23,"column":33,"offset":935},"end":{"line":23,"column":71,"offset":973},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":903},"end":{"line":23,"column":73,"offset":975},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"SourceSansPro-200italic.ttf","position":{"start":{"line":24,"column":3,"offset":978},"end":{"line":24,"column":30,"offset":1005},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":978},"end":{"line":24,"column":30,"offset":1005},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"source-sans-pro-extra-light-italic.ttf","position":{"start":{"line":24,"column":33,"offset":1008},"end":{"line":24,"column":71,"offset":1046},"indent":[]}}],"position":{"start":{"line":24,"column":33,"offset":1008},"end":{"line":24,"column":71,"offset":1046},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":976},"end":{"line":24,"column":73,"offset":1048},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"SourceSansPro-regular.ttf","position":{"start":{"line":25,"column":3,"offset":1051},"end":{"line":25,"column":28,"offset":1076},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":1051},"end":{"line":25,"column":30,"offset":1078},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"source-sans-pro-regular.ttf","position":{"start":{"line":25,"column":33,"offset":1081},"end":{"line":25,"column":60,"offset":1108},"indent":[]}}],"position":{"start":{"line":25,"column":33,"offset":1081},"end":{"line":25,"column":71,"offset":1119},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1049},"end":{"line":25,"column":73,"offset":1121},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":757},"end":{"line":25,"column":73,"offset":1121},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Renaming","position":{"start":{"line":27,"column":4,"offset":1126},"end":{"line":27,"column":12,"offset":1134},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1123},"end":{"line":27,"column":12,"offset":1134},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Running the rename function will find the path of the fonts and return it in the condition we require for the convention.","position":{"start":{"line":29,"column":1,"offset":1136},"end":{"line":29,"column":122,"offset":1257},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1136},"end":{"line":29,"column":122,"offset":1257},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const oldNames = [\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-200.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-200italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-300.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-300italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-600.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-600italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-700.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-700italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-900.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-900italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-regular.ttf'\n];\n\n/*\n    // ! after renaming oldNames through function\n\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-extra-light.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-extra-light-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-light.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-light-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-semi-bold.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-semi-bold-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-bold.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-bold-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-black.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-black-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-regular.ttf\n*/","position":{"start":{"line":31,"column":1,"offset":1259},"end":{"line":63,"column":4,"offset":3332},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can use something like the following to do this:","position":{"start":{"line":65,"column":1,"offset":3334},"end":{"line":65,"column":53,"offset":3386},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":3334},"end":{"line":65,"column":53,"offset":3386},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const fs = require('fs-extra');\nconst cwd = process.cwd();\nconst recursive = require('recursive-readdir');\nconst kebabCase = require('lodash.kebabcase');\n\n/**\n * Replace names of fonts found within directory\n * with naming convention.\n *\n */\nconst updateFontNames = async() => {\n    /**\n     * ! Replace numeral with comment name - hack job.\n     *\n     * @param {string} name Name of the font to update\n     */\n    const commentWeightName = name => {\n        name = name.replace('100', 'thin');\n        name = name.replace('200', 'extra-light');\n        name = name.replace('300', 'light');\n        name = name.replace('400', 'normal');\n        name = name.replace('500', 'medium');\n        name = name.replace('600', 'semi-bold');\n        name = name.replace('700', 'bold');\n        name = name.replace('800', 'extra-bold');\n        name = name.replace('900', 'black');\n        return name;\n    }\n\n    const fontFiles = await recursive(cwd, ['node_modules', '!*.ttf']);\n    for (const fontPath of fontFiles) {\n        try {\n            const fontDirArr = fontPath.split('/');\n            const fontNameFull = fontDirArr.pop();\n            const font = fontNameFull.replace('.ttf', '');\n            const fontDir = fontDirArr.join('/');\n            let kebabFontName = kebabCase(font);\n            const newFontName = commentWeightName(kebabFontName);\n            const outputFilePath = fontDir + '/' + newFontName + '.ttf';\n            fs.moveSync(fontPath, outputFilePath, {overwrite: true});\n        } catch (err) {\n            console.error(err);\n        }\n    }\n};","position":{"start":{"line":67,"column":1,"offset":3388},"end":{"line":113,"column":4,"offset":4976},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Convention usage for Web","position":{"start":{"line":115,"column":4,"offset":4981},"end":{"line":115,"column":28,"offset":5005},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":4978},"end":{"line":115,"column":28,"offset":5005},"indent":[]}},{"type":"code","lang":"scss","meta":null,"value":"/* open sans - light */\n@font-face {\n    font-family: 'open-sans-regular';\n    font-style: normal;\n    font-weight: 300;\n    // local() just checks for local files first\n    src: local('OpenSans Regular'), local('OpenSans-Regular'),\n        url('/path/to/fonts/open-sans-regular.ttf') format('truetype'); /* Safari, Android, iOS */\n}\n\n// Font mixins\n@mixin f-opensans-regular {\n    font: {\n        family: 'open-sans-regular', sans-serif;\n    }\n}\n\n// optional - flexible usage\n@mixin f-primary-regular {\n    // option a)\n    @include f-opensans-regular;\n    // option b) - don't include the above mixin for this\n    font: {\n        family: 'open-sans-regular', sans-serif;\n    }\n}\n\n// usage for standard base class\np,\nli {\n    @include f-primary-regular;\n    font-size: 1.5rem;\n    line-height: 1.4;\n    margin-bottom: 10px;\n}","position":{"start":{"line":117,"column":1,"offset":5007},"end":{"line":153,"column":4,"offset":5845},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Convention usage for React Native (not Expo)","position":{"start":{"line":155,"column":4,"offset":5850},"end":{"line":155,"column":48,"offset":5894},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":5847},"end":{"line":155,"column":48,"offset":5894},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For React Native, fonts MUST be kept at the root in ","position":{"start":{"line":157,"column":1,"offset":5896},"end":{"line":157,"column":53,"offset":5948},"indent":[]}},{"type":"inlineCode","value":"assets/fonts","position":{"start":{"line":157,"column":53,"offset":5948},"end":{"line":157,"column":67,"offset":5962},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":157,"column":67,"offset":5962},"end":{"line":157,"column":68,"offset":5963},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":5896},"end":{"line":157,"column":68,"offset":5963},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using the convention here can be a little different. You need to use the full name of the font which can be found on Font Book (even when refencing the font file).","position":{"start":{"line":159,"column":1,"offset":5965},"end":{"line":159,"column":164,"offset":6128},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":5965},"end":{"line":159,"column":164,"offset":6128},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e","children":[{"type":"text","value":"Check here for more information on what to do.","position":{"start":{"line":161,"column":2,"offset":6131},"end":{"line":161,"column":48,"offset":6177},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":6130},"end":{"line":161,"column":130,"offset":6259},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":6130},"end":{"line":161,"column":130,"offset":6259},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Convention usage for Expo","position":{"start":{"line":163,"column":4,"offset":6264},"end":{"line":163,"column":29,"offset":6289},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":6261},"end":{"line":163,"column":29,"offset":6289},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For React Native, fonts MUST be kept at the root in ","position":{"start":{"line":165,"column":1,"offset":6291},"end":{"line":165,"column":53,"offset":6343},"indent":[]}},{"type":"inlineCode","value":"assets/fonts","position":{"start":{"line":165,"column":53,"offset":6343},"end":{"line":165,"column":67,"offset":6357},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":165,"column":67,"offset":6357},"end":{"line":165,"column":68,"offset":6358},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":6291},"end":{"line":165,"column":68,"offset":6358},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import { Font } from 'expo';\n\nexport default class App extends React.Component {\n  componentDidMount() {\n    Font.loadAsync({\n      'open-sans-regular': require('./assets/fonts/open-sans-regular.ttf'),\n    });\n  }\n\n  // ...\n}","position":{"start":{"line":167,"column":1,"offset":6360},"end":{"line":179,"column":4,"offset":6603},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":181,"column":1,"offset":6605},"end":{"line":181,"column":31,"offset":6635},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":181,"column":31,"offset":6635}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fonts-cli\"\n    }}>{`Fonts CLI`}</h1>\n    <p>{`This tool is a wrapper to help download/rename fonts to fit with the font naming conventions.`}</p>\n    <h2 {...{\n      \"id\": \"conventions\"\n    }}>{`Conventions`}</h2>\n    <p>{`For naming files, ensure that names are in lowercase format and that the numerals are replaced with common weight names (the renaming can be done with code).`}</p>\n    <p>{`We keep things lower case for purposes of serving on web, and replacing the numerals with the common font name is just an addition.`}</p>\n    <p>{`To see the conventional name for font weights, `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e\"\n      }}>{`Mozilla has a reference here.`}</a></p>\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Example name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`After renaming`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SourceSansPro-200.ttf`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`source-sans-pro-extra-light.ttf`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SourceSansPro-200italic.ttf`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`source-sans-pro-extra-light-italic.ttf`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SourceSansPro-regular.ttf`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`source-sans-pro-regular.ttf`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"renaming\"\n    }}>{`Renaming`}</h2>\n    <p>{`Running the rename function will find the path of the fonts and return it in the condition we require for the convention.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const oldNames = [\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-200.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-200italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-300.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-300italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-600.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-600italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-700.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-700italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-900.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-900italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-italic.ttf',\n  '/Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/SourceSansPro-regular.ttf'\n];\n\n/*\n    // ! after renaming oldNames through function\n\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-extra-light.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-extra-light-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-light.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-light-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-semi-bold.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-semi-bold-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-bold.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-bold-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-black.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-black-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-italic.ttf\n    /Users/okeeffe_d/Project-Imposter/hello-gfi/fonts/source-sans-pro-regular.ttf\n*/\n`}</code></pre>\n    <p>{`You can use something like the following to do this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const fs = require('fs-extra');\nconst cwd = process.cwd();\nconst recursive = require('recursive-readdir');\nconst kebabCase = require('lodash.kebabcase');\n\n/**\n * Replace names of fonts found within directory\n * with naming convention.\n *\n */\nconst updateFontNames = async() => {\n    /**\n     * ! Replace numeral with comment name - hack job.\n     *\n     * @param {string} name Name of the font to update\n     */\n    const commentWeightName = name => {\n        name = name.replace('100', 'thin');\n        name = name.replace('200', 'extra-light');\n        name = name.replace('300', 'light');\n        name = name.replace('400', 'normal');\n        name = name.replace('500', 'medium');\n        name = name.replace('600', 'semi-bold');\n        name = name.replace('700', 'bold');\n        name = name.replace('800', 'extra-bold');\n        name = name.replace('900', 'black');\n        return name;\n    }\n\n    const fontFiles = await recursive(cwd, ['node_modules', '!*.ttf']);\n    for (const fontPath of fontFiles) {\n        try {\n            const fontDirArr = fontPath.split('/');\n            const fontNameFull = fontDirArr.pop();\n            const font = fontNameFull.replace('.ttf', '');\n            const fontDir = fontDirArr.join('/');\n            let kebabFontName = kebabCase(font);\n            const newFontName = commentWeightName(kebabFontName);\n            const outputFilePath = fontDir + '/' + newFontName + '.ttf';\n            fs.moveSync(fontPath, outputFilePath, {overwrite: true});\n        } catch (err) {\n            console.error(err);\n        }\n    }\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"convention-usage-for-web\"\n    }}>{`Convention usage for Web`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`/* open sans - light */\n@font-face {\n    font-family: 'open-sans-regular';\n    font-style: normal;\n    font-weight: 300;\n    // local() just checks for local files first\n    src: local('OpenSans Regular'), local('OpenSans-Regular'),\n        url('/path/to/fonts/open-sans-regular.ttf') format('truetype'); /* Safari, Android, iOS */\n}\n\n// Font mixins\n@mixin f-opensans-regular {\n    font: {\n        family: 'open-sans-regular', sans-serif;\n    }\n}\n\n// optional - flexible usage\n@mixin f-primary-regular {\n    // option a)\n    @include f-opensans-regular;\n    // option b) - don't include the above mixin for this\n    font: {\n        family: 'open-sans-regular', sans-serif;\n    }\n}\n\n// usage for standard base class\np,\nli {\n    @include f-primary-regular;\n    font-size: 1.5rem;\n    line-height: 1.4;\n    margin-bottom: 10px;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"convention-usage-for-react-native-not-expo\"\n    }}>{`Convention usage for React Native (not Expo)`}</h2>\n    <p>{`For React Native, fonts MUST be kept at the root in `}<inlineCode parentName=\"p\">{`assets/fonts`}</inlineCode>{`.`}</p>\n    <p>{`Using the convention here can be a little different. You need to use the full name of the font which can be found on Font Book (even when refencing the font file).`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e\"\n      }}>{`Check here for more information on what to do.`}</a></p>\n    <h2 {...{\n      \"id\": \"convention-usage-for-expo\"\n    }}>{`Convention usage for Expo`}</h2>\n    <p>{`For React Native, fonts MUST be kept at the root in `}<inlineCode parentName=\"p\">{`assets/fonts`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Font } from 'expo';\n\nexport default class App extends React.Component {\n  componentDidMount() {\n    Font.loadAsync({\n      'open-sans-regular': require('./assets/fonts/open-sans-regular.ttf'),\n    });\n  }\n\n  // ...\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}