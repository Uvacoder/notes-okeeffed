{"expireTime":9007200848610848000,"key":"gatsby-plugin-mdx-entire-payload-325b7277199e13c5d0bae7441d22aba0-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"TypeScript + Github Example","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":30,"offset":196},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":30,"offset":196},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, we are going to create a Zeit Now project that we can use to update files on a repo based on what is passed.","position":{"start":{"line":10,"column":1,"offset":198},"end":{"line":10,"column":126,"offset":323},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":198},"end":{"line":10,"column":126,"offset":323},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting up","position":{"start":{"line":12,"column":4,"offset":328},"end":{"line":12,"column":14,"offset":338},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":325},"end":{"line":12,"column":14,"offset":338},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Initialise a project in a folder ","position":{"start":{"line":14,"column":1,"offset":340},"end":{"line":14,"column":34,"offset":373},"indent":[]}},{"type":"inlineCode","value":"yarn init -y","position":{"start":{"line":14,"column":34,"offset":373},"end":{"line":14,"column":48,"offset":387},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":14,"column":48,"offset":387},"end":{"line":14,"column":49,"offset":388},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":340},"end":{"line":14,"column":49,"offset":388},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Prerequisites:","position":{"start":{"line":16,"column":1,"offset":390},"end":{"line":16,"column":15,"offset":404},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":390},"end":{"line":16,"column":15,"offset":404},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"mkdir project\ncd project\nyarn init -y # or npm\nnpm i -g now # or yarn\nmkdir api\ntouch api/example.ts tsconfig.json now.json .env .gitignore test.json\nyarn add --dev @now/node @types/js-base64\nyarn add @octokit/rest js-base64","position":{"start":{"line":18,"column":1,"offset":406},"end":{"line":27,"column":4,"offset":643},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"API Setup","position":{"start":{"line":29,"column":4,"offset":648},"end":{"line":29,"column":13,"offset":657},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":645},"end":{"line":29,"column":13,"offset":657},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Add the following to ","position":{"start":{"line":31,"column":1,"offset":659},"end":{"line":31,"column":22,"offset":680},"indent":[]}},{"type":"inlineCode","value":"api/example.ts","position":{"start":{"line":31,"column":22,"offset":680},"end":{"line":31,"column":38,"offset":696},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":31,"column":38,"offset":696},"end":{"line":31,"column":39,"offset":697},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":659},"end":{"line":31,"column":39,"offset":697},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"import { NowRequest, NowResponse } from '@now/node';\nimport Octokit from '@octokit/rest';\nimport { Base64 } from 'js-base64';\n\nconst gh = new Octokit({\n  auth: process.env.GITHUB_TOKEN,\n});\nconst owner = 'your_github_user_name';\n\n// some helper functions for creating a repo\n// and writing a file - we won't update in this example\nconst createOrUpdateFile = async (\n  repo: string,\n  content: string,\n  sha?: string,\n) => {\n  try {\n    return gh.repos.createOrUpdateFile({\n      owner,\n      repo,\n      sha,\n      path: 'hello.json',\n      message: 'Updating the Hello JSON file',\n      content: Base64.encode(JSON.stringify(content)),\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nconst createRepo = async (repo: string) => {\n  try {\n    await gh.repos.createForAuthenticatedUser({\n      name: repo,\n      private: true,\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nexport default async (_req: NowRequest, res: NowResponse) => {\n  const { repoName, content } = _req.body;\n  const repo = await fetchRepo(repoName);\n  await createRepo(repoName);\n  const sha = upFile ? upFile.data.sha : undefined;\n  const updatedJson = await createOrUpdateFile(repoName, content, sha);\n  res.status(200).send({ success: true });\n};","position":{"start":{"line":33,"column":1,"offset":699},"end":{"line":87,"column":4,"offset":2061},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"TSConfig","position":{"start":{"line":89,"column":4,"offset":2066},"end":{"line":89,"column":12,"offset":2074},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2063},"end":{"line":89,"column":12,"offset":2074},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Add this is tsconfig.json (taken from ","position":{"start":{"line":91,"column":1,"offset":2076},"end":{"line":91,"column":39,"offset":2114},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/zeit/now-examples/blob/master/gatsby-functions/tsconfig.json","children":[{"type":"text","value":"this Zeit Now example","position":{"start":{"line":91,"column":40,"offset":2115},"end":{"line":91,"column":61,"offset":2136},"indent":[]}}],"position":{"start":{"line":91,"column":39,"offset":2114},"end":{"line":91,"column":143,"offset":2218},"indent":[]}},{"type":"text","value":"):","position":{"start":{"line":91,"column":143,"offset":2218},"end":{"line":91,"column":145,"offset":2220},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2076},"end":{"line":91,"column":145,"offset":2220},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"es2015\"],\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"strictBindCallApply\": true,\n    \"strictPropertyInitialization\": true,\n    \"noImplicitThis\": true,\n    \"alwaysStrict\": true,\n    \"esModuleInterop\": true\n  }\n}","position":{"start":{"line":93,"column":1,"offset":2222},"end":{"line":110,"column":4,"offset":2601},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Git Ignore","position":{"start":{"line":112,"column":4,"offset":2606},"end":{"line":112,"column":14,"offset":2616},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":2603},"end":{"line":112,"column":14,"offset":2616},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ignore npm modules + .env where we will store the local key in our ","position":{"start":{"line":114,"column":1,"offset":2618},"end":{"line":114,"column":68,"offset":2685},"indent":[]}},{"type":"inlineCode","value":".gitignore","position":{"start":{"line":114,"column":68,"offset":2685},"end":{"line":114,"column":80,"offset":2697},"indent":[]}},{"type":"text","value":" file:","position":{"start":{"line":114,"column":80,"offset":2697},"end":{"line":114,"column":86,"offset":2703},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":2618},"end":{"line":114,"column":86,"offset":2703},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"node_modules/\n.env","position":{"start":{"line":116,"column":1,"offset":2705},"end":{"line":119,"column":4,"offset":2736},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Dotenv","position":{"start":{"line":121,"column":4,"offset":2741},"end":{"line":121,"column":10,"offset":2747},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2738},"end":{"line":121,"column":10,"offset":2747},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the ","position":{"start":{"line":123,"column":1,"offset":2749},"end":{"line":123,"column":8,"offset":2756},"indent":[]}},{"type":"inlineCode","value":".env","position":{"start":{"line":123,"column":8,"offset":2756},"end":{"line":123,"column":14,"offset":2762},"indent":[]}},{"type":"text","value":" file, add a personal GitHub token that we will use for authentication. This token is required for programmatic operations via the API.","position":{"start":{"line":123,"column":14,"offset":2762},"end":{"line":123,"column":149,"offset":2897},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":2749},"end":{"line":123,"column":149,"offset":2897},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you need to create one, ","position":{"start":{"line":125,"column":1,"offset":2899},"end":{"line":125,"column":28,"offset":2926},"indent":[]}},{"type":"link","title":null,"url":"https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line","children":[{"type":"text","value":"follow this article from the GitHub site","position":{"start":{"line":125,"column":29,"offset":2927},"end":{"line":125,"column":69,"offset":2967},"indent":[]}}],"position":{"start":{"line":125,"column":28,"offset":2926},"end":{"line":125,"column":184,"offset":3082},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":125,"column":184,"offset":3082},"end":{"line":125,"column":185,"offset":3083},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":2899},"end":{"line":125,"column":185,"offset":3083},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"GITHUB_TOKEN=TOKEN_VALUE","position":{"start":{"line":127,"column":1,"offset":3085},"end":{"line":129,"column":4,"offset":3122},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Now.json","position":{"start":{"line":131,"column":4,"offset":3127},"end":{"line":131,"column":12,"offset":3135},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":3124},"end":{"line":131,"column":12,"offset":3135},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We will use ","position":{"start":{"line":133,"column":1,"offset":3137},"end":{"line":133,"column":13,"offset":3149},"indent":[]}},{"type":"inlineCode","value":"now.json","position":{"start":{"line":133,"column":13,"offset":3149},"end":{"line":133,"column":23,"offset":3159},"indent":[]}},{"type":"text","value":" to help define some env variables.","position":{"start":{"line":133,"column":23,"offset":3159},"end":{"line":133,"column":58,"offset":3194},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":3137},"end":{"line":133,"column":58,"offset":3194},"indent":[]}},{"type":"code","lang":"github","meta":null,"value":"{\n  \"name\": \"project-name\",\n  \"version\": 2,\n  \"env\": {\n    \"GITHUB_TOKEN\": \"@github-token\"\n  }\n}","position":{"start":{"line":135,"column":1,"offset":3196},"end":{"line":143,"column":4,"offset":3306},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Test JSON","position":{"start":{"line":145,"column":4,"offset":3311},"end":{"line":145,"column":13,"offset":3320},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":3308},"end":{"line":145,"column":13,"offset":3320},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For what we will upload, add this to ","position":{"start":{"line":147,"column":1,"offset":3322},"end":{"line":147,"column":38,"offset":3359},"indent":[]}},{"type":"inlineCode","value":"test.json","position":{"start":{"line":147,"column":38,"offset":3359},"end":{"line":147,"column":49,"offset":3370},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":147,"column":49,"offset":3370},"end":{"line":147,"column":50,"offset":3371},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":3322},"end":{"line":147,"column":50,"offset":3371},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"hello\": \"world\"\n}","position":{"start":{"line":149,"column":1,"offset":3373},"end":{"line":153,"column":4,"offset":3407},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Local Development","position":{"start":{"line":155,"column":4,"offset":3412},"end":{"line":155,"column":21,"offset":3429},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":3409},"end":{"line":155,"column":21,"offset":3429},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now we can develop locally. Run ","position":{"start":{"line":157,"column":1,"offset":3431},"end":{"line":157,"column":33,"offset":3463},"indent":[]}},{"type":"inlineCode","value":"now dev","position":{"start":{"line":157,"column":33,"offset":3463},"end":{"line":157,"column":42,"offset":3472},"indent":[]}},{"type":"text","value":" to get localhost running on port 3000.","position":{"start":{"line":157,"column":42,"offset":3472},"end":{"line":157,"column":81,"offset":3511},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":3431},"end":{"line":157,"column":81,"offset":3511},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once the port is running, we can ping ","position":{"start":{"line":159,"column":1,"offset":3513},"end":{"line":159,"column":39,"offset":3551},"indent":[]}},{"type":"inlineCode","value":"http://localhost:3000/api/example","position":{"start":{"line":159,"column":39,"offset":3551},"end":{"line":159,"column":74,"offset":3586},"indent":[]}},{"type":"text","value":" and pass some params to generate a new repo and add some JSON.","position":{"start":{"line":159,"column":74,"offset":3586},"end":{"line":159,"column":137,"offset":3649},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":3513},"end":{"line":159,"column":137,"offset":3649},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, I am using ","position":{"start":{"line":161,"column":1,"offset":3651},"end":{"line":161,"column":29,"offset":3679},"indent":[]}},{"type":"link","title":null,"url":"https://httpie.org/doc#json","children":[{"type":"text","value":"HTTPie","position":{"start":{"line":161,"column":30,"offset":3680},"end":{"line":161,"column":36,"offset":3686},"indent":[]}}],"position":{"start":{"line":161,"column":29,"offset":3679},"end":{"line":161,"column":66,"offset":3716},"indent":[]}},{"type":"text","value":" and running ","position":{"start":{"line":161,"column":66,"offset":3716},"end":{"line":161,"column":79,"offset":3729},"indent":[]}},{"type":"inlineCode","value":"http POST localhost:3000/api/example repoName=temp-zeit-a content:=@test.json","position":{"start":{"line":161,"column":79,"offset":3729},"end":{"line":161,"column":158,"offset":3808},"indent":[]}},{"type":"text","value":" on the command line will lead to the creation of a new private repo ","position":{"start":{"line":161,"column":158,"offset":3808},"end":{"line":161,"column":227,"offset":3877},"indent":[]}},{"type":"inlineCode","value":"temp-zeit-a","position":{"start":{"line":161,"column":227,"offset":3877},"end":{"line":161,"column":240,"offset":3890},"indent":[]}},{"type":"text","value":" with content from the ","position":{"start":{"line":161,"column":240,"offset":3890},"end":{"line":161,"column":263,"offset":3913},"indent":[]}},{"type":"inlineCode","value":"test.json","position":{"start":{"line":161,"column":263,"offset":3913},"end":{"line":161,"column":274,"offset":3924},"indent":[]}},{"type":"text","value":" local file saved into the ","position":{"start":{"line":161,"column":274,"offset":3924},"end":{"line":161,"column":301,"offset":3951},"indent":[]}},{"type":"inlineCode","value":"hello.json","position":{"start":{"line":161,"column":301,"offset":3951},"end":{"line":161,"column":313,"offset":3963},"indent":[]}},{"type":"text","value":" file on the repo.","position":{"start":{"line":161,"column":313,"offset":3963},"end":{"line":161,"column":331,"offset":3981},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":3651},"end":{"line":161,"column":331,"offset":3981},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Hooray!","position":{"start":{"line":163,"column":1,"offset":3983},"end":{"line":163,"column":8,"offset":3990},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":3983},"end":{"line":163,"column":8,"offset":3990},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Production","position":{"start":{"line":165,"column":4,"offset":3995},"end":{"line":165,"column":14,"offset":4005},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":3992},"end":{"line":165,"column":14,"offset":4005},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To deploy to production, we simply run ","position":{"start":{"line":167,"column":1,"offset":4007},"end":{"line":167,"column":40,"offset":4046},"indent":[]}},{"type":"inlineCode","value":"now","position":{"start":{"line":167,"column":40,"offset":4046},"end":{"line":167,"column":45,"offset":4051},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":167,"column":45,"offset":4051},"end":{"line":167,"column":46,"offset":4052},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":4007},"end":{"line":167,"column":46,"offset":4052},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Moving forward","position":{"start":{"line":169,"column":4,"offset":4057},"end":{"line":169,"column":18,"offset":4071},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":4054},"end":{"line":169,"column":18,"offset":4071},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Updating the file on Github requires the SHA, so use the other Octokit methods to help with all of these issues.","position":{"start":{"line":171,"column":1,"offset":4073},"end":{"line":171,"column":113,"offset":4185},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":4073},"end":{"line":171,"column":113,"offset":4185},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":174,"column":1,"offset":4188},"end":{"line":174,"column":31,"offset":4218},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":174,"column":31,"offset":4218}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"typescript--github-example\"\n    }}>{`TypeScript + Github Example`}</h1>\n    <p>{`In this example, we are going to create a Zeit Now project that we can use to update files on a repo based on what is passed.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up\"\n    }}>{`Setting up`}</h2>\n    <p>{`Initialise a project in a folder `}<inlineCode parentName=\"p\">{`yarn init -y`}</inlineCode>{`.`}</p>\n    <p>{`Prerequisites:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`mkdir project\ncd project\nyarn init -y # or npm\nnpm i -g now # or yarn\nmkdir api\ntouch api/example.ts tsconfig.json now.json .env .gitignore test.json\nyarn add --dev @now/node @types/js-base64\nyarn add @octokit/rest js-base64\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api-setup\"\n    }}>{`API Setup`}</h2>\n    <p>{`Add the following to `}<inlineCode parentName=\"p\">{`api/example.ts`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { NowRequest, NowResponse } from '@now/node';\nimport Octokit from '@octokit/rest';\nimport { Base64 } from 'js-base64';\n\nconst gh = new Octokit({\n  auth: process.env.GITHUB_TOKEN,\n});\nconst owner = 'your_github_user_name';\n\n// some helper functions for creating a repo\n// and writing a file - we won't update in this example\nconst createOrUpdateFile = async (\n  repo: string,\n  content: string,\n  sha?: string,\n) => {\n  try {\n    return gh.repos.createOrUpdateFile({\n      owner,\n      repo,\n      sha,\n      path: 'hello.json',\n      message: 'Updating the Hello JSON file',\n      content: Base64.encode(JSON.stringify(content)),\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nconst createRepo = async (repo: string) => {\n  try {\n    await gh.repos.createForAuthenticatedUser({\n      name: repo,\n      private: true,\n    });\n  } catch (err) {\n    // basic handling\n    console.error(err.message);\n    return undefined;\n  }\n};\n\nexport default async (_req: NowRequest, res: NowResponse) => {\n  const { repoName, content } = _req.body;\n  const repo = await fetchRepo(repoName);\n  await createRepo(repoName);\n  const sha = upFile ? upFile.data.sha : undefined;\n  const updatedJson = await createOrUpdateFile(repoName, content, sha);\n  res.status(200).send({ success: true });\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tsconfig\"\n    }}>{`TSConfig`}</h2>\n    <p>{`Add this is tsconfig.json (taken from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/zeit/now-examples/blob/master/gatsby-functions/tsconfig.json\"\n      }}>{`this Zeit Now example`}</a>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"es2015\"],\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"strictBindCallApply\": true,\n    \"strictPropertyInitialization\": true,\n    \"noImplicitThis\": true,\n    \"alwaysStrict\": true,\n    \"esModuleInterop\": true\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"git-ignore\"\n    }}>{`Git Ignore`}</h2>\n    <p>{`Ignore npm modules + .env where we will store the local key in our `}<inlineCode parentName=\"p\">{`.gitignore`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`node_modules/\n.env\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dotenv\"\n    }}>{`Dotenv`}</h2>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file, add a personal GitHub token that we will use for authentication. This token is required for programmatic operations via the API.`}</p>\n    <p>{`If you need to create one, `}<a parentName=\"p\" {...{\n        \"href\": \"https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line\"\n      }}>{`follow this article from the GitHub site`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`GITHUB_TOKEN=TOKEN_VALUE\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nowjson\"\n    }}>{`Now.json`}</h2>\n    <p>{`We will use `}<inlineCode parentName=\"p\">{`now.json`}</inlineCode>{` to help define some env variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-github\"\n      }}>{`{\n  \"name\": \"project-name\",\n  \"version\": 2,\n  \"env\": {\n    \"GITHUB_TOKEN\": \"@github-token\"\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"test-json\"\n    }}>{`Test JSON`}</h2>\n    <p>{`For what we will upload, add this to `}<inlineCode parentName=\"p\">{`test.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"hello\": \"world\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"local-development\"\n    }}>{`Local Development`}</h2>\n    <p>{`Now we can develop locally. Run `}<inlineCode parentName=\"p\">{`now dev`}</inlineCode>{` to get localhost running on port 3000.`}</p>\n    <p>{`Once the port is running, we can ping `}<inlineCode parentName=\"p\">{`http://localhost:3000/api/example`}</inlineCode>{` and pass some params to generate a new repo and add some JSON.`}</p>\n    <p>{`In this example, I am using `}<a parentName=\"p\" {...{\n        \"href\": \"https://httpie.org/doc#json\"\n      }}>{`HTTPie`}</a>{` and running `}<inlineCode parentName=\"p\">{`http POST localhost:3000/api/example repoName=temp-zeit-a content:=@test.json`}</inlineCode>{` on the command line will lead to the creation of a new private repo `}<inlineCode parentName=\"p\">{`temp-zeit-a`}</inlineCode>{` with content from the `}<inlineCode parentName=\"p\">{`test.json`}</inlineCode>{` local file saved into the `}<inlineCode parentName=\"p\">{`hello.json`}</inlineCode>{` file on the repo.`}</p>\n    <p>{`Hooray!`}</p>\n    <h2 {...{\n      \"id\": \"production\"\n    }}>{`Production`}</h2>\n    <p>{`To deploy to production, we simply run `}<inlineCode parentName=\"p\">{`now`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"moving-forward\"\n    }}>{`Moving forward`}</h2>\n    <p>{`Updating the file on Github requires the SHA, so use the other Octokit methods to help with all of these issues.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}