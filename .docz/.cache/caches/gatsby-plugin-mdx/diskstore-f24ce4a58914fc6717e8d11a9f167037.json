{"expireTime":9007200848610940000,"key":"gatsby-plugin-mdx-entire-payload-a7df13257c33b7c33cc9ccfed2fbb8ae-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Let's encrypt with CloudFront and S3","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":39,"offset":204},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":39,"offset":204},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use this as a reference ","position":{"start":{"line":10,"column":1,"offset":207},"end":{"line":10,"column":25,"offset":231},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@richardkall/setup-lets-encrypt-ssl-certificate-on-amazon-cloudfront-b217669987b2","children":[{"type":"text","value":"https://medium.com/@richardkall/setup-lets-encrypt-ssl-certificate-on-amazon-cloudfront-b217669987b2","position":{"start":{"line":10,"column":25,"offset":231},"end":{"line":10,"column":125,"offset":331},"indent":[]}}],"position":{"start":{"line":10,"column":25,"offset":231},"end":{"line":10,"column":125,"offset":331},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":207},"end":{"line":10,"column":125,"offset":331},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ensure in Route53 that your domain name resolves to the alias record of the CloudFront instance and then attach the cert to CloudFront.","position":{"start":{"line":12,"column":1,"offset":333},"end":{"line":12,"column":136,"offset":468},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":333},"end":{"line":12,"column":136,"offset":468},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":15,"column":1,"offset":471},"end":{"line":15,"column":31,"offset":501},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":15,"column":31,"offset":501}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lets-encrypt-with-cloudfront-and-s3\"\n    }}>{`Let's encrypt with CloudFront and S3`}</h1>\n    <p>{`Use this as a reference `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@richardkall/setup-lets-encrypt-ssl-certificate-on-amazon-cloudfront-b217669987b2\"\n      }}>{`https://medium.com/@richardkall/setup-lets-encrypt-ssl-certificate-on-amazon-cloudfront-b217669987b2`}</a></p>\n    <p>{`Ensure in Route53 that your domain name resolves to the alias record of the CloudFront instance and then attach the cert to CloudFront.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}