{"expireTime":9007200849425580000,"key":"gatsby-plugin-mdx-entire-payload-3e61431dc2e3ab3d850131464f160a67-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Prototype Pattern","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":20,"offset":186},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":20,"offset":186},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"GoF defines prototype pattern as \"Specify the kind of objects to create using a prototypical instance, and create new objects by copying this prototype.\"","position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":154,"offset":341},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":154,"offset":341},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The components used in this pattern:","position":{"start":{"line":12,"column":1,"offset":343},"end":{"line":12,"column":37,"offset":379},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":343},"end":{"line":12,"column":37,"offset":379},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Prototype: An interface or abstract classes that defined the method to clone itself.","position":{"start":{"line":14,"column":3,"offset":383},"end":{"line":14,"column":87,"offset":467},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":383},"end":{"line":14,"column":87,"offset":467},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":381},"end":{"line":14,"column":87,"offset":467},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ConcretePrototype: This is the concrete class that will clone itself.","position":{"start":{"line":15,"column":3,"offset":470},"end":{"line":15,"column":72,"offset":539},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":470},"end":{"line":15,"column":72,"offset":539},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":468},"end":{"line":15,"column":72,"offset":539},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Client: The application object that needs the cloned copies of the object.","position":{"start":{"line":16,"column":3,"offset":542},"end":{"line":16,"column":77,"offset":616},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":542},"end":{"line":16,"column":77,"offset":616},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":540},"end":{"line":16,"column":77,"offset":616},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":381},"end":{"line":16,"column":77,"offset":616},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"In code","position":{"start":{"line":18,"column":4,"offset":621},"end":{"line":18,"column":11,"offset":628},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":618},"end":{"line":18,"column":11,"offset":628},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"interface PersonPrototype {\n    name: string;\n    clone(): PersonPrototype;\n}\n\nclass Tom implements PersonPrototype {\n    private _name:string = 'Tom';\n\n    get name() {\n        return this._name;\n    }\n\n    clone(): PersonPrototype {\n        return new Tom();\n    }\n}\n\nclass Dick implements PersonPrototype {\n    private _name:string = 'Dick';\n\n    get name() {\n        return this._name;\n    }\n\n    clone(): PersonPrototype {\n        return new Dick();\n    }\n}\n\nclass Harry implements PersonPrototype {\n    private _name:string = 'Harry';\n\n    get name() {\n        return this._name;\n    }\n\n    clone(): PersonPrototype {\n        return new Harry();\n    }\n}\n\n// create factory\nabstract class PersonFactory {\n    abstract createPerson(person: string): PersonPrototype;\n}\n\n// concrete factories\nclass PlayerPersonFactory extends PersonFactory {\n    private players: { [player: string]: PersonPrototype; } = {};\n\n    constructor() {\n        super();\n        this.players['Tom'] = new Tom();\n        this.players['Dick'] = new Dick();\n        this.players['Harry'] = new Harry();\n    }\n\n    createPerson(player: string): PersonPrototype {\n        return this.players[player].clone();\n    }\n}\n\n(function main() {\n    const factory = new PlayerPersonFactory();\n    const prototypes = ['Tom', 'Dick', 'Harry'].map((player) => {\n        return factory.createPerson(player)\n    });\n    console.log(prototypes);\n})();","position":{"start":{"line":20,"column":1,"offset":630},"end":{"line":90,"column":4,"offset":2057},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"References And Resources","position":{"start":{"line":92,"column":4,"offset":2062},"end":{"line":92,"column":28,"offset":2086},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2059},"end":{"line":92,"column":28,"offset":2086},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.codeproject.com/Articles/476807/Understanding-and-Implementing-Prototype-Pattern-i","children":[{"type":"text","value":"Understanding The Prototype Design Pattern","position":{"start":{"line":94,"column":4,"offset":2091},"end":{"line":94,"column":46,"offset":2133},"indent":[]}}],"position":{"start":{"line":94,"column":3,"offset":2090},"end":{"line":94,"column":143,"offset":2230},"indent":[]}}],"position":{"start":{"line":94,"column":3,"offset":2090},"end":{"line":94,"column":143,"offset":2230},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":2088},"end":{"line":94,"column":143,"offset":2230},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":2088},"end":{"line":94,"column":143,"offset":2230},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":97,"column":1,"offset":2233},"end":{"line":97,"column":31,"offset":2263},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":97,"column":31,"offset":2263}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"prototype-pattern\"\n    }}>{`Prototype Pattern`}</h1>\n    <p>{`GoF defines prototype pattern as \"Specify the kind of objects to create using a prototypical instance, and create new objects by copying this prototype.\"`}</p>\n    <p>{`The components used in this pattern:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Prototype: An interface or abstract classes that defined the method to clone itself.`}</li>\n      <li parentName=\"ul\">{`ConcretePrototype: This is the concrete class that will clone itself.`}</li>\n      <li parentName=\"ul\">{`Client: The application object that needs the cloned copies of the object.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"in-code\"\n    }}>{`In code`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`interface PersonPrototype {\n    name: string;\n    clone(): PersonPrototype;\n}\n\nclass Tom implements PersonPrototype {\n    private _name:string = 'Tom';\n\n    get name() {\n        return this._name;\n    }\n\n    clone(): PersonPrototype {\n        return new Tom();\n    }\n}\n\nclass Dick implements PersonPrototype {\n    private _name:string = 'Dick';\n\n    get name() {\n        return this._name;\n    }\n\n    clone(): PersonPrototype {\n        return new Dick();\n    }\n}\n\nclass Harry implements PersonPrototype {\n    private _name:string = 'Harry';\n\n    get name() {\n        return this._name;\n    }\n\n    clone(): PersonPrototype {\n        return new Harry();\n    }\n}\n\n// create factory\nabstract class PersonFactory {\n    abstract createPerson(person: string): PersonPrototype;\n}\n\n// concrete factories\nclass PlayerPersonFactory extends PersonFactory {\n    private players: { [player: string]: PersonPrototype; } = {};\n\n    constructor() {\n        super();\n        this.players['Tom'] = new Tom();\n        this.players['Dick'] = new Dick();\n        this.players['Harry'] = new Harry();\n    }\n\n    createPerson(player: string): PersonPrototype {\n        return this.players[player].clone();\n    }\n}\n\n(function main() {\n    const factory = new PlayerPersonFactory();\n    const prototypes = ['Tom', 'Dick', 'Harry'].map((player) => {\n        return factory.createPerson(player)\n    });\n    console.log(prototypes);\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"references-and-resources\"\n    }}>{`References And Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.codeproject.com/Articles/476807/Understanding-and-Implementing-Prototype-Pattern-i\"\n        }}>{`Understanding The Prototype Design Pattern`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}