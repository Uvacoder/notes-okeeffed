{"expireTime":9007200848610926000,"key":"gatsby-plugin-mdx-entire-payload-bdca0ffe0eb2a358fe2638f414d237f1-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Go Data Structures","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":21,"offset":187},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":21,"offset":187},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Fizzbuzz","position":{"start":{"line":10,"column":4,"offset":192},"end":{"line":10,"column":12,"offset":200},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":189},"end":{"line":10,"column":12,"offset":200},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func fizzBuzz(i int) string {\n  switch true {\n    case i%3 == 0 && i%5 == 0:\n        return \"fizzbuzz\"\n    case i%3 == 0:\n        return \"fizz\"\n    case i%5 == 0:\n        return \"buzz\"\n    default:\n        return strconv.Itoa(i)\n  }\n}","position":{"start":{"line":12,"column":1,"offset":202},"end":{"line":25,"column":4,"offset":446},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Chunked Arrays","position":{"start":{"line":27,"column":4,"offset":451},"end":{"line":27,"column":18,"offset":465},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":448},"end":{"line":27,"column":18,"offset":465},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"func arrayChunk(arr []int, size int) [][]int {\n\tif len(arr) <= 0 {\n\t\treturn nil\n\t}\n\n\tvar tmp []int\n\tvar chunkedArr [][]int\n\tfor i, item := range arr {\n\t\ttmp = append(tmp, item)\n\n\t\tisFinal := len(arr)-1 == i\n\t\tif i%size == size-1 || isFinal {\n\t\t\tfmt.Printf(\"%v\", tmp)\n\t\t\tchunkedArr = append(chunkedArr, tmp)\n\t\t\ttmp = nil\n\t\t}\n\t}\n\n\treturn chunkedArr\n}","position":{"start":{"line":29,"column":1,"offset":467},"end":{"line":50,"column":4,"offset":825},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Palindromes","position":{"start":{"line":52,"column":4,"offset":830},"end":{"line":52,"column":15,"offset":841},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":827},"end":{"line":52,"column":15,"offset":841},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"package main\n\n// return whether it is a palindrome or not\nfunc main() {\n\treturn\n}\n\n// String converts string struct expecting palindromes\ntype String struct {\n\tstr string\n}\n\nfunc newPalindrome(s string) String {\n\treturn String{s}\n}\n\nfunc (s String) isPalindrome() bool {\n\tr := []rune(s.str)\n\tfor i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n\t\tif r[i] != r[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}","position":{"start":{"line":54,"column":1,"offset":843},"end":{"line":81,"column":4,"offset":1260},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":84,"column":1,"offset":1263},"end":{"line":84,"column":31,"offset":1293},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":84,"column":31,"offset":1293}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"go-data-structures\"\n    }}>{`Go Data Structures`}</h1>\n    <h2 {...{\n      \"id\": \"fizzbuzz\"\n    }}>{`Fizzbuzz`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func fizzBuzz(i int) string {\n  switch true {\n    case i%3 == 0 && i%5 == 0:\n        return \"fizzbuzz\"\n    case i%3 == 0:\n        return \"fizz\"\n    case i%5 == 0:\n        return \"buzz\"\n    default:\n        return strconv.Itoa(i)\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"chunked-arrays\"\n    }}>{`Chunked Arrays`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`func arrayChunk(arr []int, size int) [][]int {\n    if len(arr) <= 0 {\n        return nil\n    }\n\n    var tmp []int\n    var chunkedArr [][]int\n    for i, item := range arr {\n        tmp = append(tmp, item)\n\n        isFinal := len(arr)-1 == i\n        if i%size == size-1 || isFinal {\n            fmt.Printf(\"%v\", tmp)\n            chunkedArr = append(chunkedArr, tmp)\n            tmp = nil\n        }\n    }\n\n    return chunkedArr\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"palindromes\"\n    }}>{`Palindromes`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\n// return whether it is a palindrome or not\nfunc main() {\n    return\n}\n\n// String converts string struct expecting palindromes\ntype String struct {\n    str string\n}\n\nfunc newPalindrome(s string) String {\n    return String{s}\n}\n\nfunc (s String) isPalindrome() bool {\n    r := []rune(s.str)\n    for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n        if r[i] != r[j] {\n            return false\n        }\n    }\n\n    return true\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}