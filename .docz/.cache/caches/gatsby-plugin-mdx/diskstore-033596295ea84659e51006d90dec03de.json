{"expireTime":9007200852878349000,"key":"gatsby-plugin-mdx-entire-payload-50b569e45e6dd116fb26b1d97cd18314-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Unix Redirection in C","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":24,"offset":190},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":24,"offset":190},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":195},"end":{"line":10,"column":13,"offset":204},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":10,"column":13,"offset":204},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.amazon.com.au/Computer-Systems-Programmers-Perspective-Global/dp/1292101768/","children":[{"type":"text","value":"Computer Systems A Programmer's Perspective - Page 944","position":{"start":{"line":12,"column":5,"offset":210},"end":{"line":12,"column":59,"offset":264},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":209},"end":{"line":12,"column":150,"offset":355},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":209},"end":{"line":12,"column":150,"offset":355},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":206},"end":{"line":12,"column":150,"offset":355},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://linuxhint.com/dup2_system_call_c/","children":[{"type":"text","value":"dup2 System Call","position":{"start":{"line":13,"column":5,"offset":360},"end":{"line":13,"column":21,"offset":376},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":359},"end":{"line":13,"column":65,"offset":420},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":359},"end":{"line":13,"column":65,"offset":420},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":356},"end":{"line":13,"column":65,"offset":420},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://stackoverflow.com/questions/584142/what-is-the-difference-between-read-and-fread#:~:text=read()%20is%20a%20low,order%20to%20fill%20its%20buffer.","children":[{"type":"text","value":"Stack Overflow - difference between read and fread","position":{"start":{"line":14,"column":5,"offset":425},"end":{"line":14,"column":55,"offset":475},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":424},"end":{"line":14,"column":212,"offset":632},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":424},"end":{"line":14,"column":212,"offset":632},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":421},"end":{"line":14,"column":212,"offset":632},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.tutorialspoint.com/unix_system_calls/read.htm","children":[{"type":"text","value":"Unix System Calls - read","position":{"start":{"line":15,"column":5,"offset":637},"end":{"line":15,"column":29,"offset":661},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":636},"end":{"line":15,"column":89,"offset":721},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":636},"end":{"line":15,"column":89,"offset":721},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":633},"end":{"line":15,"column":89,"offset":721},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.acodersjourney.com/top-20-c-pointer-mistakes/","children":[{"type":"text","value":"Top 20 C Pointer Mistakes","position":{"start":{"line":16,"column":5,"offset":726},"end":{"line":16,"column":30,"offset":751},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":725},"end":{"line":16,"column":90,"offset":811},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":725},"end":{"line":16,"column":90,"offset":811},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":722},"end":{"line":16,"column":90,"offset":811},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://stackoverflow.com/questions/3377659/reading-in-a-file-and-getting-the-string-length","children":[{"type":"text","value":"Stack Overflow - Reading file and getting string length","position":{"start":{"line":17,"column":5,"offset":816},"end":{"line":17,"column":60,"offset":871},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":815},"end":{"line":17,"column":154,"offset":965},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":815},"end":{"line":17,"column":154,"offset":965},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":812},"end":{"line":17,"column":154,"offset":965},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://www.cs.loyola.edu/~jglenn/702/S2005/Examples/dup2.html","children":[{"type":"text","value":"CS 702 Operating Systems - redirect and pipes","position":{"start":{"line":18,"column":5,"offset":970},"end":{"line":18,"column":50,"offset":1015},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":969},"end":{"line":18,"column":114,"offset":1079},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":969},"end":{"line":18,"column":114,"offset":1079},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":966},"end":{"line":18,"column":114,"offset":1079},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":206},"end":{"line":18,"column":114,"offset":1079},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"First example","position":{"start":{"line":20,"column":4,"offset":1084},"end":{"line":20,"column":17,"offset":1097},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1081},"end":{"line":20,"column":17,"offset":1097},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <fcntl.h>\n\nint main() {\n  int fd1, fd2;\n  char c;\n\n  fd1 = open(\"foobar.txt\", O_RDONLY);\n  fd2 = open(\"foobar.txt\", O_RDONLY);\n  read(fd2, &c, 1);\n  read(fd2, &c, 1);\n  read(fd2, &c, 1);\n  read(fd2, &c, 1);\n  printf(\"c = %c\\n\", c);\n\n  //read(fd2, &c, 1);\n  // dup2(fd2, fd1);\n  read(fd1, &c, 1);\n  dup2(fd1, fd2);\n  read(fd2, &c, 1);\n  printf(\"c = %c\\n\", c);\n  exit(0);\n}","position":{"start":{"line":22,"column":1,"offset":1099},"end":{"line":48,"column":4,"offset":1547},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"s","meta":null,"value":"> gcc one.c && ./a.out\nc = b\nc = o","position":{"start":{"line":50,"column":1,"offset":1549},"end":{"line":54,"column":4,"offset":1592},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Second example","position":{"start":{"line":56,"column":4,"offset":1597},"end":{"line":56,"column":18,"offset":1611},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1594},"end":{"line":56,"column":18,"offset":1611},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <fcntl.h>\n\n#define STR_LEN 6\n\nint main() {\n  int fd1;\n\n\n  fd1 = open(\"foobar.txt\", O_RDONLY);\n  if (dup2(fd1, STDIN_FILENO) < 0) {\n    printf(\"Unable to duplicate file descriptor.\");\n    exit(EXIT_FAILURE);\n  }\n\n  char *c1 = (char*)malloc(STR_LEN);\n  char *c2 = (char*)malloc(STR_LEN);\n\n  scanf(\"%s %s\", c1, c2);\n  printf(\"c1 = %s\\nc2 = %s\\n\", c1, c2);\n\n  // SAVE THE WHALES, FREE THE MALLOCS\n  free(c1);\n  free(c2);\n\n  exit(0);\n}","position":{"start":{"line":58,"column":1,"offset":1613},"end":{"line":88,"column":4,"offset":2120},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"s","meta":null,"value":"> gcc three.c&& ./a.out\nc1 = foobar\nc2 = test","position":{"start":{"line":90,"column":1,"offset":2122},"end":{"line":94,"column":4,"offset":2176},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":97,"column":1,"offset":2179},"end":{"line":97,"column":31,"offset":2209},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":97,"column":31,"offset":2209}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"unix-redirection-in-c\"\n    }}>{`Unix Redirection in C`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.amazon.com.au/Computer-Systems-Programmers-Perspective-Global/dp/1292101768/\"\n        }}>{`Computer Systems A Programmer's Perspective - Page 944`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://linuxhint.com/dup2_system_call_c/\"\n        }}>{`dup2 System Call`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stackoverflow.com/questions/584142/what-is-the-difference-between-read-and-fread#:~:text=read()%20is%20a%20low,order%20to%20fill%20its%20buffer.\"\n        }}>{`Stack Overflow - difference between read and fread`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.tutorialspoint.com/unix_system_calls/read.htm\"\n        }}>{`Unix System Calls - read`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.acodersjourney.com/top-20-c-pointer-mistakes/\"\n        }}>{`Top 20 C Pointer Mistakes`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stackoverflow.com/questions/3377659/reading-in-a-file-and-getting-the-string-length\"\n        }}>{`Stack Overflow - Reading file and getting string length`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.cs.loyola.edu/~jglenn/702/S2005/Examples/dup2.html\"\n        }}>{`CS 702 Operating Systems - redirect and pipes`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"first-example\"\n    }}>{`First example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <fcntl.h>\n\nint main() {\n  int fd1, fd2;\n  char c;\n\n  fd1 = open(\"foobar.txt\", O_RDONLY);\n  fd2 = open(\"foobar.txt\", O_RDONLY);\n  read(fd2, &c, 1);\n  read(fd2, &c, 1);\n  read(fd2, &c, 1);\n  read(fd2, &c, 1);\n  printf(\"c = %c\\\\n\", c);\n\n  //read(fd2, &c, 1);\n  // dup2(fd2, fd1);\n  read(fd1, &c, 1);\n  dup2(fd1, fd2);\n  read(fd2, &c, 1);\n  printf(\"c = %c\\\\n\", c);\n  exit(0);\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`> gcc one.c && ./a.out\nc = b\nc = o\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"second-example\"\n    }}>{`Second example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <fcntl.h>\n\n#define STR_LEN 6\n\nint main() {\n  int fd1;\n\n\n  fd1 = open(\"foobar.txt\", O_RDONLY);\n  if (dup2(fd1, STDIN_FILENO) < 0) {\n    printf(\"Unable to duplicate file descriptor.\");\n    exit(EXIT_FAILURE);\n  }\n\n  char *c1 = (char*)malloc(STR_LEN);\n  char *c2 = (char*)malloc(STR_LEN);\n\n  scanf(\"%s %s\", c1, c2);\n  printf(\"c1 = %s\\\\nc2 = %s\\\\n\", c1, c2);\n\n  // SAVE THE WHALES, FREE THE MALLOCS\n  free(c1);\n  free(c2);\n\n  exit(0);\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`> gcc three.c&& ./a.out\nc1 = foobar\nc2 = test\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}