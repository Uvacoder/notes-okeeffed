{"expireTime":9007200848610893000,"key":"gatsby-plugin-mdx-entire-payload-5a692b8151ded725c4d6f9708db6558f-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Kotlin Basics","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":16,"offset":182},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":16,"offset":182},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This highlight just covers scenarios not entirely standardised to most programming languages eg it will not cover while loops etc.","position":{"start":{"line":10,"column":1,"offset":184},"end":{"line":10,"column":131,"offset":314},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":184},"end":{"line":10,"column":131,"offset":314},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Kotlin REPL","position":{"start":{"line":12,"column":4,"offset":319},"end":{"line":12,"column":15,"offset":330},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":316},"end":{"line":12,"column":15,"offset":330},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Brew install ","position":{"start":{"line":14,"column":1,"offset":332},"end":{"line":14,"column":14,"offset":345},"indent":[]}},{"type":"inlineCode","value":"kotlin","position":{"start":{"line":14,"column":14,"offset":345},"end":{"line":14,"column":22,"offset":353},"indent":[]}},{"type":"text","value":" and then you'll have access to the REPL.","position":{"start":{"line":14,"column":22,"offset":353},"end":{"line":14,"column":63,"offset":394},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":332},"end":{"line":14,"column":63,"offset":394},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use ","position":{"start":{"line":16,"column":1,"offset":396},"end":{"line":16,"column":5,"offset":400},"indent":[]}},{"type":"inlineCode","value":"kotlinc","position":{"start":{"line":16,"column":5,"offset":400},"end":{"line":16,"column":14,"offset":409},"indent":[]}},{"type":"text","value":" with no arguments to enter the REPL.","position":{"start":{"line":16,"column":14,"offset":409},"end":{"line":16,"column":51,"offset":446},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":396},"end":{"line":16,"column":51,"offset":446},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To compile and run code from the command line:","position":{"start":{"line":18,"column":1,"offset":448},"end":{"line":18,"column":47,"offset":494},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":448},"end":{"line":18,"column":47,"offset":494},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"kotlinc hello.kt -include-runtime -d hello.jar\njava -jar hello.jar","position":{"start":{"line":20,"column":1,"offset":496},"end":{"line":23,"column":4,"offset":575},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Hello, Kotlin","position":{"start":{"line":25,"column":4,"offset":580},"end":{"line":25,"column":17,"offset":593},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":577},"end":{"line":25,"column":17,"offset":593},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"fun main(args: Array<String>) {\n  println(\"Hello, Kotlin!\")\n}","position":{"start":{"line":27,"column":1,"offset":595},"end":{"line":31,"column":4,"offset":670},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Shift Operators","position":{"start":{"line":33,"column":4,"offset":675},"end":{"line":33,"column":19,"offset":690},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":672},"end":{"line":33,"column":19,"offset":690},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"1 shl 3 // shift left\n32 shr 2 // shift right","position":{"start":{"line":35,"column":1,"offset":692},"end":{"line":38,"column":4,"offset":751},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Math Functions","position":{"start":{"line":40,"column":4,"offset":756},"end":{"line":40,"column":18,"offset":770},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":753},"end":{"line":40,"column":18,"offset":770},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"import kotlin.math.*\n\nfun main(args: Array<String>) {\n  sin(45 * PI / 180) // 0.7071067811865475\n}\n\nsqrt(4.0) // 2.0\n\nmax(1,2) // 2","position":{"start":{"line":42,"column":1,"offset":772},"end":{"line":52,"column":4,"offset":917},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Naming","position":{"start":{"line":54,"column":4,"offset":922},"end":{"line":54,"column":10,"offset":928},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":919},"end":{"line":54,"column":10,"offset":928},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val number: Int = 10 // constants\n\nconst val reallyConstant: Int = 42 // top level keyword to mark it as compile-time constant\n\nvar variableNumber: Int = 42\nvariableNumber = 12 // allowed","position":{"start":{"line":56,"column":1,"offset":930},"end":{"line":63,"column":4,"offset":1131},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Type Conversion","position":{"start":{"line":65,"column":4,"offset":1136},"end":{"line":65,"column":19,"offset":1151},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1133},"end":{"line":65,"column":19,"offset":1151},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"var integer: Int = 100\nvar decimal: Double = 12.5\ninteger = decimal // THROWS error\ninteger = decimal.toInt() // works nicer","position":{"start":{"line":67,"column":1,"offset":1153},"end":{"line":72,"column":4,"offset":1291},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To do implicit conversion:","position":{"start":{"line":74,"column":1,"offset":1293},"end":{"line":74,"column":27,"offset":1319},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1293},"end":{"line":74,"column":27,"offset":1319},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val hourlyRate: Double = 19.5\nval hoursWorked: Int = 10\nval totalCost: Double = hourlyRate * hoursWorked","position":{"start":{"line":76,"column":1,"offset":1321},"end":{"line":80,"column":4,"offset":1439},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Chars Vs Strings","position":{"start":{"line":82,"column":4,"offset":1444},"end":{"line":82,"column":20,"offset":1460},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":1441},"end":{"line":82,"column":20,"offset":1460},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val characterA: Char = 'a' // must be single quotes\nval stringDog: String = \"Dog\" // must be double quotes","position":{"start":{"line":84,"column":1,"offset":1462},"end":{"line":87,"column":4,"offset":1582},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"String interpolation happens with ","position":{"start":{"line":89,"column":1,"offset":1584},"end":{"line":89,"column":35,"offset":1618},"indent":[]}},{"type":"inlineCode","value":"$","position":{"start":{"line":89,"column":35,"offset":1618},"end":{"line":89,"column":38,"offset":1621},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":89,"column":38,"offset":1621},"end":{"line":89,"column":39,"offset":1622},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":1584},"end":{"line":89,"column":39,"offset":1622},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"var name = \"Dick\"\nvar message = \"Hello my name is $name!\" // \"Hello my name is Dick!\"","position":{"start":{"line":91,"column":1,"offset":1624},"end":{"line":94,"column":4,"offset":1723},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Multiline strings:","position":{"start":{"line":96,"column":1,"offset":1725},"end":{"line":96,"column":19,"offset":1743},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":1725},"end":{"line":96,"column":19,"offset":1743},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"let bigString = \"\"\"\n  |You can have a string\n  |that contains multiple\n  |lines\n  |by\n  |doing this.\n  \"\"\".trimMargin()\nprintln(bigString)","position":{"start":{"line":98,"column":1,"offset":1745},"end":{"line":107,"column":4,"offset":1897},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The above will print:","position":{"start":{"line":109,"column":1,"offset":1899},"end":{"line":109,"column":22,"offset":1920},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":1899},"end":{"line":109,"column":22,"offset":1920},"indent":[]}},{"type":"code","lang":"text","meta":null,"value":"You can have a string\nthat contains multiple\nlines\nby\ndoing this.","position":{"start":{"line":111,"column":1,"offset":1922},"end":{"line":117,"column":4,"offset":1999},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pair + Triples","position":{"start":{"line":119,"column":4,"offset":2004},"end":{"line":119,"column":18,"offset":2018},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":2001},"end":{"line":119,"column":18,"offset":2018},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val coordinates: Pair<Int, Int> = Pair(2, 3)\nval coordinates3D = Triple(2, 3, 1)","position":{"start":{"line":121,"column":1,"offset":2020},"end":{"line":124,"column":4,"offset":2114},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Number types","position":{"start":{"line":126,"column":4,"offset":2119},"end":{"line":126,"column":16,"offset":2131},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":2116},"end":{"line":126,"column":16,"offset":2131},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val a: Short = 12\nval b: Byte = 120\nval c: Int = -100000\n\nval answer = a + b + c // Answer will be an Int","position":{"start":{"line":128,"column":1,"offset":2133},"end":{"line":134,"column":4,"offset":2252},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Any, Unit, and Nothing","position":{"start":{"line":136,"column":4,"offset":2257},"end":{"line":136,"column":26,"offset":2279},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":2254},"end":{"line":136,"column":26,"offset":2279},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val anyNum: Any = 1\nval anyString: Any = \"Yo\"","position":{"start":{"line":138,"column":1,"offset":2281},"end":{"line":141,"column":4,"offset":2340},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Unit","position":{"start":{"line":143,"column":1,"offset":2342},"end":{"line":143,"column":7,"offset":2348},"indent":[]}},{"type":"text","value":" is a special type which only ever represents one value: the Unit object. It is similar to the void type in Java, except it makes working with generics easier:","position":{"start":{"line":143,"column":7,"offset":2348},"end":{"line":143,"column":166,"offset":2507},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":2342},"end":{"line":143,"column":166,"offset":2507},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"fun add() {\n  val result = 2 + 2\n  println(result)\n}\n\n// same as\nfun add(): Unit {\n  val result = 2 + 2\n  println(result)\n}","position":{"start":{"line":145,"column":1,"offset":2509},"end":{"line":156,"column":4,"offset":2646},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Nothing","position":{"start":{"line":158,"column":1,"offset":2648},"end":{"line":158,"column":10,"offset":2657},"indent":[]}},{"type":"text","value":" is a type that is helpful for declaring that a function not only doesn't return anything, but also never completes.","position":{"start":{"line":158,"column":10,"offset":2657},"end":{"line":158,"column":126,"offset":2773},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":2648},"end":{"line":158,"column":126,"offset":2773},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This can occur if a function either causes the program to stop completely by throwing an ","position":{"start":{"line":160,"column":1,"offset":2775},"end":{"line":160,"column":90,"offset":2864},"indent":[]}},{"type":"inlineCode","value":"Exception","position":{"start":{"line":160,"column":90,"offset":2864},"end":{"line":160,"column":101,"offset":2875},"indent":[]}},{"type":"text","value":" or if it simply goes on forever without ever finishing.","position":{"start":{"line":160,"column":101,"offset":2875},"end":{"line":160,"column":157,"offset":2931},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":2775},"end":{"line":160,"column":157,"offset":2931},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Control Logic","position":{"start":{"line":162,"column":4,"offset":2936},"end":{"line":162,"column":17,"offset":2949},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":2933},"end":{"line":162,"column":17,"offset":2949},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Worth noting if/else can be single line ie ","position":{"start":{"line":164,"column":1,"offset":2951},"end":{"line":164,"column":44,"offset":2994},"indent":[]}},{"type":"inlineCode","value":"val min = if (a < b) a else b","position":{"start":{"line":164,"column":44,"offset":2994},"end":{"line":164,"column":75,"offset":3025},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":164,"column":75,"offset":3025},"end":{"line":164,"column":76,"offset":3026},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":2951},"end":{"line":164,"column":76,"offset":3026},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Range","position":{"start":{"line":166,"column":5,"offset":3032},"end":{"line":166,"column":10,"offset":3037},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":3028},"end":{"line":166,"column":10,"offset":3037},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val closedRange = 0..5 // (0,1,2,3,4,5)\nval halfOpenRange = 0 until 5 // (0,1,2,3,4)\nval decreasingRange = 5 downTo 0 // (5,4,3,2,1,0)","position":{"start":{"line":168,"column":1,"offset":3039},"end":{"line":172,"column":4,"offset":3187},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Repeat","position":{"start":{"line":174,"column":5,"offset":3193},"end":{"line":174,"column":11,"offset":3199},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":3189},"end":{"line":174,"column":11,"offset":3199},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"sum = 1\nvar lastSum = 0\nrepeat(10) {\n  val temp = sum\n  sum += lastSum\n  lastSum = temp\n}","position":{"start":{"line":176,"column":1,"offset":3201},"end":{"line":184,"column":4,"offset":3304},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Stepping","position":{"start":{"line":186,"column":5,"offset":3310},"end":{"line":186,"column":13,"offset":3318},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":3306},"end":{"line":186,"column":13,"offset":3318},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"sum = 0\nfor (i in 1..count step 2) {\n  sum += i\n}","position":{"start":{"line":188,"column":1,"offset":3320},"end":{"line":193,"column":4,"offset":3383},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You could even ","position":{"start":{"line":195,"column":1,"offset":3385},"end":{"line":195,"column":16,"offset":3400},"indent":[]}},{"type":"inlineCode","value":"downTo","position":{"start":{"line":195,"column":16,"offset":3400},"end":{"line":195,"column":24,"offset":3408},"indent":[]}},{"type":"text","value":" step:","position":{"start":{"line":195,"column":24,"offset":3408},"end":{"line":195,"column":30,"offset":3414},"indent":[]}}],"position":{"start":{"line":195,"column":1,"offset":3385},"end":{"line":195,"column":30,"offset":3414},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"sum = 0\nfor (i in count downTo 1 step 2) {\n  sum += i\n}","position":{"start":{"line":197,"column":1,"offset":3416},"end":{"line":202,"column":4,"offset":3485},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Labelled Statements","position":{"start":{"line":204,"column":5,"offset":3491},"end":{"line":204,"column":24,"offset":3510},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":3487},"end":{"line":204,"column":24,"offset":3510},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"sum = 0\nfor (row in 0 until 8) {\n  if (row % 2 == 0) {\n    continue\n  }\n  for (column in 0 until 8) {\n    sum += row * column\n  }\n}","position":{"start":{"line":206,"column":1,"offset":3512},"end":{"line":216,"column":4,"offset":3657},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"When Expressions","position":{"start":{"line":218,"column":4,"offset":3662},"end":{"line":218,"column":20,"offset":3678},"indent":[]}}],"position":{"start":{"line":218,"column":1,"offset":3659},"end":{"line":218,"column":20,"offset":3678},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val number = 10\nwhen (number) {\n  0 -> println(\"Zero\")\n  else -> println(\"Non-zero\")\n}\n\n// multi-valued whens\nval string = \"Dog\"\nwhen (string) {\n  \"Cat\", \"Dog\" -> println(\"Animal is a house pet.\")\n  else -> println(\"Animal is not a house pet.\")\n}\n\n// when in range\ntimeOfDay = when (hourOfDay) {\n  in 0..5 -> \"Early morning\"\n  in 6..11 -> \"Morning\"\n  in 12..16 -> \"Afternoon\"\n  in 17..19 -> \"Evening\"\n  in 20..23 -> \"Late evening\"\n  else -> \"INVALID HOUR!\"\n}\n\n// conditions in when statements\nwhen {\n  x == 0 && y == 0 && z == 0 -> println(\"Origin\")\n  y == 0 && z == 0 -> println(\"On the x-axis at x = $x\")\n  x == 0 && z == 0 -> println(\"On the y-axis at y = $y\")\n  x == 0 && y == 0 -> println(\"On the z-axis at z = $z\")\n  else -> println(\"Somewhere in space at x = $x, y = $y, z = $z\")\n}","position":{"start":{"line":220,"column":1,"offset":3680},"end":{"line":252,"column":4,"offset":4482},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Functions","position":{"start":{"line":254,"column":4,"offset":4487},"end":{"line":254,"column":13,"offset":4496},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":4484},"end":{"line":254,"column":13,"offset":4496},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note that parameters are constants by default.","position":{"start":{"line":256,"column":1,"offset":4498},"end":{"line":256,"column":47,"offset":4544},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":4498},"end":{"line":256,"column":47,"offset":4544},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"fun printMyName() {\n  println(\"My name is Dick Lucas.\")\n}\n\n// with params\nfun printMultipleOfFive(value: Int) {\n  println(\"$value * 5 = ${value * 5}\")\n}\nprintMultipleOfFive(10)\n\n// string interpolated\nfun printMultipleOf(multiplier: Int, andValue: Int) {\n  println(\"$multiplier * $andValue = ${multiplier * andValue}\")\n}\nprintMultipleOf(4, 2)","position":{"start":{"line":258,"column":1,"offset":4546},"end":{"line":274,"column":4,"offset":4902},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If a function consists solely of a single expression, you can assign the expression to the function using = while at the same time not using braces, a return type, or a return statement:","position":{"start":{"line":276,"column":1,"offset":4904},"end":{"line":276,"column":187,"offset":5090},"indent":[]}}],"position":{"start":{"line":276,"column":1,"offset":4904},"end":{"line":276,"column":187,"offset":5090},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"fun multiplyInferred(number: Int, multiplier: Int) = number * multiplier","position":{"start":{"line":278,"column":1,"offset":5092},"end":{"line":280,"column":4,"offset":5178},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Overloading","position":{"start":{"line":282,"column":5,"offset":5184},"end":{"line":282,"column":16,"offset":5195},"indent":[]}}],"position":{"start":{"line":282,"column":1,"offset":5180},"end":{"line":282,"column":16,"offset":5195},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"fun getValue(value: Int): Int {\n  return value + 1\n}\nfun getValue(value: String): String {\n  return \"The value is $value\"\n}","position":{"start":{"line":284,"column":1,"offset":5197},"end":{"line":291,"column":4,"offset":5334},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Functions As Variables","position":{"start":{"line":293,"column":5,"offset":5340},"end":{"line":293,"column":27,"offset":5362},"indent":[]}}],"position":{"start":{"line":293,"column":1,"offset":5336},"end":{"line":293,"column":27,"offset":5362},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"fun add(a: Int, b: Int): Int {\n  return a + b\n}\n\nvar function = ::add\nfunction(4,2) // works","position":{"start":{"line":295,"column":1,"offset":5364},"end":{"line":302,"column":4,"offset":5470},"indent":[1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":305,"column":1,"offset":5473},"end":{"line":305,"column":31,"offset":5503},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":305,"column":31,"offset":5503}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"kotlin-basics\"\n    }}>{`Kotlin Basics`}</h1>\n    <p>{`This highlight just covers scenarios not entirely standardised to most programming languages eg it will not cover while loops etc.`}</p>\n    <h2 {...{\n      \"id\": \"kotlin-repl\"\n    }}>{`Kotlin REPL`}</h2>\n    <p>{`Brew install `}<inlineCode parentName=\"p\">{`kotlin`}</inlineCode>{` and then you'll have access to the REPL.`}</p>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`kotlinc`}</inlineCode>{` with no arguments to enter the REPL.`}</p>\n    <p>{`To compile and run code from the command line:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kotlinc hello.kt -include-runtime -d hello.jar\njava -jar hello.jar\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"hello-kotlin\"\n    }}>{`Hello, Kotlin`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun main(args: Array<String>) {\n  println(\"Hello, Kotlin!\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shift-operators\"\n    }}>{`Shift Operators`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`1 shl 3 // shift left\n32 shr 2 // shift right\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"math-functions\"\n    }}>{`Math Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import kotlin.math.*\n\nfun main(args: Array<String>) {\n  sin(45 * PI / 180) // 0.7071067811865475\n}\n\nsqrt(4.0) // 2.0\n\nmax(1,2) // 2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"naming\"\n    }}>{`Naming`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val number: Int = 10 // constants\n\nconst val reallyConstant: Int = 42 // top level keyword to mark it as compile-time constant\n\nvar variableNumber: Int = 42\nvariableNumber = 12 // allowed\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-conversion\"\n    }}>{`Type Conversion`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var integer: Int = 100\nvar decimal: Double = 12.5\ninteger = decimal // THROWS error\ninteger = decimal.toInt() // works nicer\n`}</code></pre>\n    <p>{`To do implicit conversion:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val hourlyRate: Double = 19.5\nval hoursWorked: Int = 10\nval totalCost: Double = hourlyRate * hoursWorked\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"chars-vs-strings\"\n    }}>{`Chars Vs Strings`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val characterA: Char = 'a' // must be single quotes\nval stringDog: String = \"Dog\" // must be double quotes\n`}</code></pre>\n    <p>{`String interpolation happens with `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var name = \"Dick\"\nvar message = \"Hello my name is $name!\" // \"Hello my name is Dick!\"\n`}</code></pre>\n    <p>{`Multiline strings:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`let bigString = \"\"\"\n  |You can have a string\n  |that contains multiple\n  |lines\n  |by\n  |doing this.\n  \"\"\".trimMargin()\nprintln(bigString)\n`}</code></pre>\n    <p>{`The above will print:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`You can have a string\nthat contains multiple\nlines\nby\ndoing this.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pair--triples\"\n    }}>{`Pair + Triples`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val coordinates: Pair<Int, Int> = Pair(2, 3)\nval coordinates3D = Triple(2, 3, 1)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"number-types\"\n    }}>{`Number types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val a: Short = 12\nval b: Byte = 120\nval c: Int = -100000\n\nval answer = a + b + c // Answer will be an Int\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"any-unit-and-nothing\"\n    }}>{`Any, Unit, and Nothing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val anyNum: Any = 1\nval anyString: Any = \"Yo\"\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Unit`}</inlineCode>{` is a special type which only ever represents one value: the Unit object. It is similar to the void type in Java, except it makes working with generics easier:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun add() {\n  val result = 2 + 2\n  println(result)\n}\n\n// same as\nfun add(): Unit {\n  val result = 2 + 2\n  println(result)\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Nothing`}</inlineCode>{` is a type that is helpful for declaring that a function not only doesn't return anything, but also never completes.`}</p>\n    <p>{`This can occur if a function either causes the program to stop completely by throwing an `}<inlineCode parentName=\"p\">{`Exception`}</inlineCode>{` or if it simply goes on forever without ever finishing.`}</p>\n    <h2 {...{\n      \"id\": \"control-logic\"\n    }}>{`Control Logic`}</h2>\n    <p>{`Worth noting if/else can be single line ie `}<inlineCode parentName=\"p\">{`val min = if (a < b) a else b`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"range\"\n    }}>{`Range`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val closedRange = 0..5 // (0,1,2,3,4,5)\nval halfOpenRange = 0 until 5 // (0,1,2,3,4)\nval decreasingRange = 5 downTo 0 // (5,4,3,2,1,0)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"repeat\"\n    }}>{`Repeat`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 1\nvar lastSum = 0\nrepeat(10) {\n  val temp = sum\n  sum += lastSum\n  lastSum = temp\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"stepping\"\n    }}>{`Stepping`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 0\nfor (i in 1..count step 2) {\n  sum += i\n}\n`}</code></pre>\n    <p>{`You could even `}<inlineCode parentName=\"p\">{`downTo`}</inlineCode>{` step:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 0\nfor (i in count downTo 1 step 2) {\n  sum += i\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"labelled-statements\"\n    }}>{`Labelled Statements`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`sum = 0\nfor (row in 0 until 8) {\n  if (row % 2 == 0) {\n    continue\n  }\n  for (column in 0 until 8) {\n    sum += row * column\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"when-expressions\"\n    }}>{`When Expressions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val number = 10\nwhen (number) {\n  0 -> println(\"Zero\")\n  else -> println(\"Non-zero\")\n}\n\n// multi-valued whens\nval string = \"Dog\"\nwhen (string) {\n  \"Cat\", \"Dog\" -> println(\"Animal is a house pet.\")\n  else -> println(\"Animal is not a house pet.\")\n}\n\n// when in range\ntimeOfDay = when (hourOfDay) {\n  in 0..5 -> \"Early morning\"\n  in 6..11 -> \"Morning\"\n  in 12..16 -> \"Afternoon\"\n  in 17..19 -> \"Evening\"\n  in 20..23 -> \"Late evening\"\n  else -> \"INVALID HOUR!\"\n}\n\n// conditions in when statements\nwhen {\n  x == 0 && y == 0 && z == 0 -> println(\"Origin\")\n  y == 0 && z == 0 -> println(\"On the x-axis at x = $x\")\n  x == 0 && z == 0 -> println(\"On the y-axis at y = $y\")\n  x == 0 && y == 0 -> println(\"On the z-axis at z = $z\")\n  else -> println(\"Somewhere in space at x = $x, y = $y, z = $z\")\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <p>{`Note that parameters are constants by default.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun printMyName() {\n  println(\"My name is Dick Lucas.\")\n}\n\n// with params\nfun printMultipleOfFive(value: Int) {\n  println(\"$value * 5 = \\${value * 5}\")\n}\nprintMultipleOfFive(10)\n\n// string interpolated\nfun printMultipleOf(multiplier: Int, andValue: Int) {\n  println(\"$multiplier * $andValue = \\${multiplier * andValue}\")\n}\nprintMultipleOf(4, 2)\n`}</code></pre>\n    <p>{`If a function consists solely of a single expression, you can assign the expression to the function using = while at the same time not using braces, a return type, or a return statement:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun multiplyInferred(number: Int, multiplier: Int) = number * multiplier\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"overloading\"\n    }}>{`Overloading`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun getValue(value: Int): Int {\n  return value + 1\n}\nfun getValue(value: String): String {\n  return \"The value is $value\"\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"functions-as-variables\"\n    }}>{`Functions As Variables`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun add(a: Int, b: Int): Int {\n  return a + b\n}\n\nvar function = ::add\nfunction(4,2) // works\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}