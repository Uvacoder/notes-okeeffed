{"expireTime":9007200848610921000,"key":"gatsby-plugin-mdx-entire-payload-7ef8a7fe95de7757107e1093b4936bc7-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Iterator","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":11,"offset":177},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":11,"offset":177},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A behavioural pattern that is used to access the elements of a collection object in sequential manner without a required understanding of the underlying representation.","position":{"start":{"line":10,"column":1,"offset":179},"end":{"line":10,"column":169,"offset":347},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":179},"end":{"line":10,"column":169,"offset":347},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Components","position":{"start":{"line":12,"column":4,"offset":352},"end":{"line":12,"column":14,"offset":362},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":349},"end":{"line":12,"column":14,"offset":362},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ConcreteIterator: An interface to define how the ","position":{"start":{"line":14,"column":3,"offset":366},"end":{"line":14,"column":52,"offset":415},"indent":[]}},{"type":"inlineCode","value":"next","position":{"start":{"line":14,"column":52,"offset":415},"end":{"line":14,"column":58,"offset":421},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":14,"column":58,"offset":421},"end":{"line":14,"column":63,"offset":426},"indent":[]}},{"type":"inlineCode","value":"hasNext","position":{"start":{"line":14,"column":63,"offset":426},"end":{"line":14,"column":72,"offset":435},"indent":[]}},{"type":"text","value":" methods work.","position":{"start":{"line":14,"column":72,"offset":435},"end":{"line":14,"column":86,"offset":449},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":366},"end":{"line":14,"column":86,"offset":449},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":364},"end":{"line":14,"column":86,"offset":449},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ConcreteCollection: A collection that has knowledge of the iterator and creates the iterator.","position":{"start":{"line":15,"column":3,"offset":452},"end":{"line":15,"column":96,"offset":545},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":452},"end":{"line":15,"column":96,"offset":545},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":450},"end":{"line":15,"column":96,"offset":545},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":364},"end":{"line":15,"column":96,"offset":545},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":17,"column":4,"offset":550},"end":{"line":17,"column":11,"offset":557},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":547},"end":{"line":17,"column":11,"offset":557},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this basic example below, we will create a ","position":{"start":{"line":19,"column":1,"offset":559},"end":{"line":19,"column":47,"offset":605},"indent":[]}},{"type":"inlineCode","value":"ConcreteCollection","position":{"start":{"line":19,"column":47,"offset":605},"end":{"line":19,"column":67,"offset":625},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":19,"column":67,"offset":625},"end":{"line":19,"column":72,"offset":630},"indent":[]}},{"type":"inlineCode","value":"ConcreteIterator","position":{"start":{"line":19,"column":72,"offset":630},"end":{"line":19,"column":90,"offset":648},"indent":[]}},{"type":"text","value":" class to demonstrate how the ","position":{"start":{"line":19,"column":90,"offset":648},"end":{"line":19,"column":120,"offset":678},"indent":[]}},{"type":"inlineCode","value":"Iterator","position":{"start":{"line":19,"column":120,"offset":678},"end":{"line":19,"column":130,"offset":688},"indent":[]}},{"type":"text","value":" design pattern works.","position":{"start":{"line":19,"column":130,"offset":688},"end":{"line":19,"column":152,"offset":710},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":559},"end":{"line":19,"column":152,"offset":710},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note that after create a collection, we can use the ","position":{"start":{"line":21,"column":1,"offset":712},"end":{"line":21,"column":53,"offset":764},"indent":[]}},{"type":"inlineCode","value":"createIterator","position":{"start":{"line":21,"column":53,"offset":764},"end":{"line":21,"column":69,"offset":780},"indent":[]}},{"type":"text","value":" method as many times as we want to return seperate instances of an ","position":{"start":{"line":21,"column":69,"offset":780},"end":{"line":21,"column":137,"offset":848},"indent":[]}},{"type":"inlineCode","value":"iterator","position":{"start":{"line":21,"column":137,"offset":848},"end":{"line":21,"column":147,"offset":858},"indent":[]}},{"type":"text","value":" - for demonstration purposes, we will create a second iterator to do just that.","position":{"start":{"line":21,"column":147,"offset":858},"end":{"line":21,"column":227,"offset":938},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":712},"end":{"line":21,"column":227,"offset":938},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The last part of ","position":{"start":{"line":23,"column":1,"offset":940},"end":{"line":23,"column":18,"offset":957},"indent":[]}},{"type":"inlineCode","value":"\"main\"","position":{"start":{"line":23,"column":18,"offset":957},"end":{"line":23,"column":26,"offset":965},"indent":[]}},{"type":"text","value":" will demo what happens when you intertwine iterator calls.","position":{"start":{"line":23,"column":26,"offset":965},"end":{"line":23,"column":85,"offset":1024},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":940},"end":{"line":23,"column":85,"offset":1024},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Check the logs for results.","position":{"start":{"line":25,"column":1,"offset":1026},"end":{"line":25,"column":28,"offset":1053},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1026},"end":{"line":25,"column":28,"offset":1053},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"interface Iterator<T> {\n  next(): T;\n  hasNext(): boolean;\n}\n\ninterface Collection {\n  createIterator(): Iterator<Number>;\n}\n\nclass ConcreteIterator implements Iterator<Number> {\n  private _collection: Number[];\n  private _index: number = 0;\n\n  constructor(newCollection: Number[]) {\n    this._collection = newCollection;\n  }\n\n  next(): any {\n    const result = this._collection[this._index];\n    this.log();\n    this._index += 1;\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this._index < this._collection.length;\n  }\n\n  private log(): void {\n    console.log(`Method called during index: ${this._collection[this._index]}`);\n  }\n}\n\nclass ConcreteCollection implements Collection {\n  private _collection: Number[] = [];\n\n  constructor(collection: Number[]) {\n    this._collection = collection;\n  }\n\n  createIterator(): Iterator<Number> {\n    return new ConcreteIterator(this._collection);\n  }\n}\n\n(function main() {\n  const collection: ConcreteCollection = new ConcreteCollection([0, 1, 2, 3]);\n  const iterator: Iterator<Number> = collection.createIterator();\n  const secondIterator: Iterator<Number> = collection.createIterator();\n\n  while (iterator.hasNext()) {\n    const number: Number = iterator.next();\n    console.log(`Logging: ${number.valueOf()}`);\n  }\n\n  while (secondIterator.hasNext()) {\n    const number: Number = secondIterator.next();\n    console.log(`Second Iterator Logging: ${number.valueOf()}`);\n  }\n\n  // third and fourth iterators intertwined\n  const thirdIterator: Iterator<Number> = collection.createIterator();\n  const fourthIterator: Iterator<Number> = collection.createIterator();\n\n  console.log('thirdIterator', thirdIterator.next());\n  console.log('thirdIterator', thirdIterator.next());\n  console.log('thirdIterator', thirdIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('thirdIterator', thirdIterator.next());\n})();","position":{"start":{"line":27,"column":1,"offset":1055},"end":{"line":101,"column":4,"offset":3129},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":103,"column":4,"offset":3134},"end":{"line":103,"column":13,"offset":3143},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3131},"end":{"line":103,"column":13,"offset":3143},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Iterator_pattern","children":[{"type":"text","value":"Wikipedia","position":{"start":{"line":105,"column":4,"offset":3148},"end":{"line":105,"column":13,"offset":3157},"indent":[]}}],"position":{"start":{"line":105,"column":3,"offset":3147},"end":{"line":105,"column":62,"offset":3206},"indent":[]}}],"position":{"start":{"line":105,"column":3,"offset":3147},"end":{"line":105,"column":62,"offset":3206},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":3145},"end":{"line":105,"column":62,"offset":3206},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.tutorialspoint.com/design_pattern/iterator_pattern.htm","children":[{"type":"text","value":"Tutorials Point","position":{"start":{"line":106,"column":4,"offset":3210},"end":{"line":106,"column":19,"offset":3225},"indent":[]}}],"position":{"start":{"line":106,"column":3,"offset":3209},"end":{"line":106,"column":88,"offset":3294},"indent":[]}}],"position":{"start":{"line":106,"column":3,"offset":3209},"end":{"line":106,"column":88,"offset":3294},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":3207},"end":{"line":106,"column":88,"offset":3294},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":3145},"end":{"line":106,"column":88,"offset":3294},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":109,"column":1,"offset":3297},"end":{"line":109,"column":31,"offset":3327},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":109,"column":31,"offset":3327}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"iterator\"\n    }}>{`Iterator`}</h1>\n    <p>{`A behavioural pattern that is used to access the elements of a collection object in sequential manner without a required understanding of the underlying representation.`}</p>\n    <h2 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`ConcreteIterator: An interface to define how the `}<inlineCode parentName=\"li\">{`next`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`hasNext`}</inlineCode>{` methods work.`}</li>\n      <li parentName=\"ul\">{`ConcreteCollection: A collection that has knowledge of the iterator and creates the iterator.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`In this basic example below, we will create a `}<inlineCode parentName=\"p\">{`ConcreteCollection`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ConcreteIterator`}</inlineCode>{` class to demonstrate how the `}<inlineCode parentName=\"p\">{`Iterator`}</inlineCode>{` design pattern works.`}</p>\n    <p>{`Note that after create a collection, we can use the `}<inlineCode parentName=\"p\">{`createIterator`}</inlineCode>{` method as many times as we want to return seperate instances of an `}<inlineCode parentName=\"p\">{`iterator`}</inlineCode>{` - for demonstration purposes, we will create a second iterator to do just that.`}</p>\n    <p>{`The last part of `}<inlineCode parentName=\"p\">{`\"main\"`}</inlineCode>{` will demo what happens when you intertwine iterator calls.`}</p>\n    <p>{`Check the logs for results.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface Iterator<T> {\n  next(): T;\n  hasNext(): boolean;\n}\n\ninterface Collection {\n  createIterator(): Iterator<Number>;\n}\n\nclass ConcreteIterator implements Iterator<Number> {\n  private _collection: Number[];\n  private _index: number = 0;\n\n  constructor(newCollection: Number[]) {\n    this._collection = newCollection;\n  }\n\n  next(): any {\n    const result = this._collection[this._index];\n    this.log();\n    this._index += 1;\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this._index < this._collection.length;\n  }\n\n  private log(): void {\n    console.log(\\`Method called during index: \\${this._collection[this._index]}\\`);\n  }\n}\n\nclass ConcreteCollection implements Collection {\n  private _collection: Number[] = [];\n\n  constructor(collection: Number[]) {\n    this._collection = collection;\n  }\n\n  createIterator(): Iterator<Number> {\n    return new ConcreteIterator(this._collection);\n  }\n}\n\n(function main() {\n  const collection: ConcreteCollection = new ConcreteCollection([0, 1, 2, 3]);\n  const iterator: Iterator<Number> = collection.createIterator();\n  const secondIterator: Iterator<Number> = collection.createIterator();\n\n  while (iterator.hasNext()) {\n    const number: Number = iterator.next();\n    console.log(\\`Logging: \\${number.valueOf()}\\`);\n  }\n\n  while (secondIterator.hasNext()) {\n    const number: Number = secondIterator.next();\n    console.log(\\`Second Iterator Logging: \\${number.valueOf()}\\`);\n  }\n\n  // third and fourth iterators intertwined\n  const thirdIterator: Iterator<Number> = collection.createIterator();\n  const fourthIterator: Iterator<Number> = collection.createIterator();\n\n  console.log('thirdIterator', thirdIterator.next());\n  console.log('thirdIterator', thirdIterator.next());\n  console.log('thirdIterator', thirdIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('fourIterator', fourthIterator.next());\n  console.log('thirdIterator', thirdIterator.next());\n})();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Iterator_pattern\"\n        }}>{`Wikipedia`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.tutorialspoint.com/design_pattern/iterator_pattern.htm\"\n        }}>{`Tutorials Point`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}