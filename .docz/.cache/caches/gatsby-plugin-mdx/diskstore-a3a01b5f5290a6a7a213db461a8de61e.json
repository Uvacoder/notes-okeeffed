{"expireTime":9007200848610896000,"key":"gatsby-plugin-mdx-entire-payload-81b54113f027515a970c5c1ccaf00f36-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Mongo Cheat Sheet","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":20,"offset":185},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":20,"offset":185},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"MONGO-1: Mongo Install","position":{"start":{"line":9,"column":4,"offset":190},"end":{"line":9,"column":26,"offset":212},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":187},"end":{"line":9,"column":26,"offset":212},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"npm install mongoose --save\n\n// to run\n\nmongod // starts the daemon\nmongo // check out the documents","position":{"start":{"line":11,"column":1,"offset":214},"end":{"line":18,"column":4,"offset":322},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"MONGO-2: Mongo Shell","position":{"start":{"line":20,"column":4,"offset":327},"end":{"line":20,"column":24,"offset":347},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":324},"end":{"line":20,"column":24,"offset":347},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"show dbs — // display the databases\nuse bookworm — // specify the database you're going to work with\nshow collections — // shows the document collections for the selected database\ndb.users.find() — // display all the documents in the users collection\ndb.users.find().pretty() — // nicer format for output documents within the shell\ndb.users.drop() — // remove the users collection from the current database","position":{"start":{"line":22,"column":1,"offset":349},"end":{"line":29,"column":4,"offset":763},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"MONGO-3: Mongo Sample Usage","position":{"start":{"line":31,"column":4,"offset":768},"end":{"line":31,"column":31,"offset":795},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":765},"end":{"line":31,"column":31,"offset":795},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// models > user.js\n\nvar mongoose = require('mongoose');\n\nvar UserSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    unique: true,\n  },\n  name: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  favoriteBook: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  password: {\n    type: String,\n    required: true\n  }\n});\n\nvar User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n\n// in app.js\n\nvar User = require('../models/user');","position":{"start":{"line":33,"column":1,"offset":797},"end":{"line":67,"column":4,"offset":1327},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"MONGO-4: Building an Example Schema in the ","position":{"start":{"line":69,"column":4,"offset":1332},"end":{"line":69,"column":47,"offset":1375},"indent":[]}},{"type":"inlineCode","value":"mock","position":{"start":{"line":69,"column":47,"offset":1375},"end":{"line":69,"column":53,"offset":1381},"indent":[]}},{"type":"text","value":" folder","position":{"start":{"line":69,"column":53,"offset":1381},"end":{"line":69,"column":60,"offset":1388},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":1329},"end":{"line":69,"column":60,"offset":1388},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// mock/example.js\n\nimport mongoose from 'mongoose';\n\nconst schema = new mongoose.Schema({\n  question: String,\n  answer: String,\n  completed: Boolean\n});\n\nexport const model = mongoose.model('Layout', schema);","position":{"start":{"line":71,"column":1,"offset":1390},"end":{"line":83,"column":4,"offset":1607},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"MONGO-5: Accessing the Schema results","position":{"start":{"line":85,"column":4,"offset":1612},"end":{"line":85,"column":41,"offset":1649},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":1609},"end":{"line":85,"column":41,"offset":1649},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// in a route file\nvar express = require('express');\nvar router = express.Router();\n\nimport {ExampleModel} from '../models/example';\n\n/* GET users listing. */\nrouter.get('/', (req, res) => {\n  console.log(ExampleModel);\n  ExampleModel.find({}, \"test string\", (err, results) => {\n    if (err) {\n      return res.status(500).json({message: err.message});  \n    }\n    res.json({ results: results });\n  });\n  // res.json({ todos: \"todos\" });\n    // res.send('respond with a resource');\n});\n\nmodule.exports = router;","position":{"start":{"line":87,"column":1,"offset":1651},"end":{"line":108,"column":4,"offset":2170},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":110,"column":1,"offset":2172},"end":{"line":110,"column":31,"offset":2202},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":110,"column":31,"offset":2202}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mongo-cheat-sheet\"\n    }}>{`Mongo Cheat Sheet`}</h1>\n    <h2 {...{\n      \"id\": \"mongo-1-mongo-install\"\n    }}>{`MONGO-1: Mongo Install`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install mongoose --save\n\n// to run\n\nmongod // starts the daemon\nmongo // check out the documents\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mongo-2-mongo-shell\"\n    }}>{`MONGO-2: Mongo Shell`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`show dbs — // display the databases\nuse bookworm — // specify the database you're going to work with\nshow collections — // shows the document collections for the selected database\ndb.users.find() — // display all the documents in the users collection\ndb.users.find().pretty() — // nicer format for output documents within the shell\ndb.users.drop() — // remove the users collection from the current database\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mongo-3-mongo-sample-usage\"\n    }}>{`MONGO-3: Mongo Sample Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// models > user.js\n\nvar mongoose = require('mongoose');\n\nvar UserSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    unique: true,\n  },\n  name: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  favoriteBook: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  password: {\n    type: String,\n    required: true\n  }\n});\n\nvar User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n\n// in app.js\n\nvar User = require('../models/user');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mongo-4-building-an-example-schema-in-the-mock-folder\"\n    }}>{`MONGO-4: Building an Example Schema in the `}<inlineCode parentName=\"h2\">{`mock`}</inlineCode>{` folder`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// mock/example.js\n\nimport mongoose from 'mongoose';\n\nconst schema = new mongoose.Schema({\n  question: String,\n  answer: String,\n  completed: Boolean\n});\n\nexport const model = mongoose.model('Layout', schema);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mongo-5-accessing-the-schema-results\"\n    }}>{`MONGO-5: Accessing the Schema results`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// in a route file\nvar express = require('express');\nvar router = express.Router();\n\nimport {ExampleModel} from '../models/example';\n\n/* GET users listing. */\nrouter.get('/', (req, res) => {\n  console.log(ExampleModel);\n  ExampleModel.find({}, \"test string\", (err, results) => {\n    if (err) {\n      return res.status(500).json({message: err.message});  \n    }\n    res.json({ results: results });\n  });\n  // res.json({ todos: \"todos\" });\n    // res.send('respond with a resource');\n});\n\nmodule.exports = router;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}