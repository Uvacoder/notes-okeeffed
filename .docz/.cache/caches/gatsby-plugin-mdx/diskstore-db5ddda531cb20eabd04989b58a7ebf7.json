{"expireTime":9007200848610883000,"key":"gatsby-plugin-mdx-entire-payload-b0ab0693bb874ac3040edc3d5babc5e8-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"JS-Testing-Practices-And-Principles","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":38,"offset":204},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":38,"offset":204},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":209},"end":{"line":10,"column":13,"offset":218},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":206},"end":{"line":10,"column":13,"offset":218},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://frontendmasters.com/courses/testing-practices-principles/jest-testing-framework/","children":[{"type":"text","value":"Online Course","position":{"start":{"line":12,"column":5,"offset":224},"end":{"line":12,"column":18,"offset":237},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":223},"end":{"line":12,"column":109,"offset":328},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":223},"end":{"line":12,"column":109,"offset":328},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":220},"end":{"line":12,"column":109,"offset":328},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://jestjs.io/docs/en/cli","children":[{"type":"text","value":"Jest CLI docs","position":{"start":{"line":13,"column":5,"offset":333},"end":{"line":13,"column":18,"offset":346},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":332},"end":{"line":13,"column":50,"offset":378},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":332},"end":{"line":13,"column":50,"offset":378},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":329},"end":{"line":13,"column":50,"offset":378},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/atlassian/jest-in-case","children":[{"type":"text","value":"Jest-in-case library","position":{"start":{"line":14,"column":5,"offset":383},"end":{"line":14,"column":25,"offset":403},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":382},"end":{"line":14,"column":69,"offset":447},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":382},"end":{"line":14,"column":69,"offset":447},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":379},"end":{"line":14,"column":69,"offset":447},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://kentcdodds.com/blog/pure-modules/","children":[{"type":"text","value":"Why Pure Modules","position":{"start":{"line":15,"column":5,"offset":452},"end":{"line":15,"column":21,"offset":468},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":451},"end":{"line":15,"column":65,"offset":512},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":451},"end":{"line":15,"column":65,"offset":512},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":448},"end":{"line":15,"column":65,"offset":512},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":220},"end":{"line":15,"column":65,"offset":512},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Jest Intro","position":{"start":{"line":17,"column":4,"offset":517},"end":{"line":17,"column":14,"offset":527},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":514},"end":{"line":17,"column":14,"offset":527},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"CLI","position":{"start":{"line":19,"column":5,"offset":533},"end":{"line":19,"column":8,"offset":536},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":529},"end":{"line":19,"column":8,"offset":536},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Running ","position":{"start":{"line":21,"column":1,"offset":538},"end":{"line":21,"column":9,"offset":546},"indent":[]}},{"type":"inlineCode","value":"jest -o","position":{"start":{"line":21,"column":9,"offset":546},"end":{"line":21,"column":18,"offset":555},"indent":[]}},{"type":"text","value":" will look for related files since last commit. When running, you can use shortcuts to run certain tests. Read the watch usage for more info.","position":{"start":{"line":21,"column":18,"offset":555},"end":{"line":21,"column":159,"offset":696},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":538},"end":{"line":21,"column":159,"offset":696},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Commands","position":{"start":{"line":23,"column":5,"offset":702},"end":{"line":23,"column":13,"offset":710},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":698},"end":{"line":23,"column":13,"offset":710},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"toBe","position":{"start":{"line":25,"column":3,"offset":714},"end":{"line":25,"column":9,"offset":720},"indent":[]}},{"type":"text","value":" will compare memory allocation","position":{"start":{"line":25,"column":9,"offset":720},"end":{"line":25,"column":40,"offset":751},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":714},"end":{"line":25,"column":40,"offset":751},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":712},"end":{"line":25,"column":40,"offset":751},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"toEqual","position":{"start":{"line":26,"column":3,"offset":754},"end":{"line":26,"column":12,"offset":763},"indent":[]}},{"type":"text","value":" will deep equal object values etc","position":{"start":{"line":26,"column":12,"offset":763},"end":{"line":26,"column":46,"offset":797},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":754},"end":{"line":26,"column":46,"offset":797},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":752},"end":{"line":26,"column":46,"offset":797},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"toMatchObject","position":{"start":{"line":27,"column":3,"offset":800},"end":{"line":27,"column":18,"offset":815},"indent":[]}},{"type":"text","value":" checks if all expected object matches what is in the actual object","position":{"start":{"line":27,"column":18,"offset":815},"end":{"line":27,"column":85,"offset":882},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":800},"end":{"line":27,"column":85,"offset":882},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":798},"end":{"line":27,"column":85,"offset":882},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"toHaveBeenCalled","position":{"start":{"line":28,"column":3,"offset":885},"end":{"line":28,"column":21,"offset":903},"indent":[]}},{"type":"text","value":" is used to help with mock functons","position":{"start":{"line":28,"column":21,"offset":903},"end":{"line":28,"column":56,"offset":938},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":885},"end":{"line":28,"column":56,"offset":938},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":883},"end":{"line":28,"column":56,"offset":938},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"toHaveBeenCalledTimes","position":{"start":{"line":29,"column":3,"offset":941},"end":{"line":29,"column":26,"offset":964},"indent":[]}},{"type":"text","value":" is mock called how many times","position":{"start":{"line":29,"column":26,"offset":964},"end":{"line":29,"column":56,"offset":994},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":941},"end":{"line":29,"column":56,"offset":994},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":939},"end":{"line":29,"column":56,"offset":994},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"toHaveBeenCalledWith","position":{"start":{"line":30,"column":3,"offset":997},"end":{"line":30,"column":25,"offset":1019},"indent":[]}},{"type":"text","value":" to check what argument is passed","position":{"start":{"line":30,"column":25,"offset":1019},"end":{"line":30,"column":58,"offset":1052},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":997},"end":{"line":30,"column":58,"offset":1052},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":995},"end":{"line":30,"column":58,"offset":1052},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":712},"end":{"line":30,"column":58,"offset":1052},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With ","position":{"start":{"line":32,"column":1,"offset":1054},"end":{"line":32,"column":6,"offset":1059},"indent":[]}},{"type":"inlineCode","value":"toEqual","position":{"start":{"line":32,"column":6,"offset":1059},"end":{"line":32,"column":15,"offset":1068},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":32,"column":15,"offset":1068},"end":{"line":32,"column":17,"offset":1070},"indent":[]}},{"type":"inlineCode","value":"toMatchObject","position":{"start":{"line":32,"column":17,"offset":1070},"end":{"line":32,"column":32,"offset":1085},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":32,"column":32,"offset":1085},"end":{"line":32,"column":37,"offset":1090},"indent":[]}},{"type":"inlineCode","value":"toHaveBeenCalledWith","position":{"start":{"line":32,"column":37,"offset":1090},"end":{"line":32,"column":59,"offset":1112},"indent":[]}},{"type":"text","value":" you can match a schema. Eg:","position":{"start":{"line":32,"column":59,"offset":1112},"end":{"line":32,"column":87,"offset":1140},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1054},"end":{"line":32,"column":87,"offset":1140},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"test('example', () => {\n  const bday = {\n    day: 22,\n    month: 4,\n    year: 1992,\n    meta: { display: '22nd April 1992' },\n  };\n\n  const schema = {\n    day: expect.any(Number),\n    month: expect.any(Number),\n    year: expect.any(Number),\n    meta: {\n      display: expect.stringContaining('1992'),\n    },\n    // there's also expect.arrayContaining or expect.objectContaining\n  };\n  expect(birthday).toEqual(schema);\n});","position":{"start":{"line":34,"column":1,"offset":1142},"end":{"line":54,"column":4,"offset":1582},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is useful for generated data.","position":{"start":{"line":56,"column":1,"offset":1584},"end":{"line":56,"column":35,"offset":1618},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1584},"end":{"line":56,"column":35,"offset":1618},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Test Factories and Colocating Tests Q&A","position":{"start":{"line":58,"column":4,"offset":1623},"end":{"line":58,"column":43,"offset":1662},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1620},"end":{"line":58,"column":43,"offset":1662},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Creating a test factory is a good approach to testing a pure function.","position":{"start":{"line":60,"column":1,"offset":1664},"end":{"line":60,"column":71,"offset":1734},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1664},"end":{"line":60,"column":71,"offset":1734},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"describe('isPasswordAllowed', () => {\n  const allowedPasswords = ['allowed'];\n  const disallowedPasswords = ['disallowed'];\n\n  allowedPasswords.forEach(pwd => {\n    test(`\"${pwd}\" should be allowed`, () => {\n      expect(isPasswordAllowed(pwd)).toBe(true);\n    });\n  });\n\n  disallowedPasswords.forEach(pwd => {\n    test(`\"${pwd}\" should be allowed`, () => {\n      expect(isPasswordAllowed(pwd)).toBe(false);\n    });\n  });\n});","position":{"start":{"line":62,"column":1,"offset":1736},"end":{"line":79,"column":4,"offset":2179},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There was a reference here to Atlassian's ","position":{"start":{"line":81,"column":1,"offset":2181},"end":{"line":81,"column":43,"offset":2223},"indent":[]}},{"type":"inlineCode","value":"jest-in-case","position":{"start":{"line":81,"column":43,"offset":2223},"end":{"line":81,"column":57,"offset":2237},"indent":[]}},{"type":"text","value":" library that you can see ","position":{"start":{"line":81,"column":57,"offset":2237},"end":{"line":81,"column":83,"offset":2263},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/atlassian/jest-in-case","children":[{"type":"text","value":"here","position":{"start":{"line":81,"column":84,"offset":2264},"end":{"line":81,"column":88,"offset":2268},"indent":[]}}],"position":{"start":{"line":81,"column":83,"offset":2263},"end":{"line":81,"column":132,"offset":2312},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":81,"column":132,"offset":2312},"end":{"line":81,"column":133,"offset":2313},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2181},"end":{"line":81,"column":133,"offset":2313},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\"Colocating\" your tests essentially is the idea of putting your test in the same folder as where the source code is. Its a more relevant position for updates etc.","position":{"start":{"line":83,"column":1,"offset":2315},"end":{"line":83,"column":163,"offset":2477},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2315},"end":{"line":83,"column":163,"offset":2477},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Code coverage","position":{"start":{"line":85,"column":4,"offset":2482},"end":{"line":85,"column":17,"offset":2495},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":2479},"end":{"line":85,"column":17,"offset":2495},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Istanbul is a standard coverage tool for JS testing.","position":{"start":{"line":87,"column":1,"offset":2497},"end":{"line":87,"column":53,"offset":2549},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2497},"end":{"line":87,"column":53,"offset":2549},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The code coverage report helps you identify lines of code that haven't been covered during testing.","position":{"start":{"line":89,"column":1,"offset":2551},"end":{"line":89,"column":100,"offset":2650},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2551},"end":{"line":89,"column":100,"offset":2650},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Monkey Patch a mock","position":{"start":{"line":91,"column":4,"offset":2655},"end":{"line":91,"column":23,"offset":2674},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2652},"end":{"line":91,"column":23,"offset":2674},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Monkey patching is updating 3rd party software to fit our needs - in this case, changing a func.","position":{"start":{"line":93,"column":1,"offset":2676},"end":{"line":93,"column":97,"offset":2772},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2676},"end":{"line":93,"column":97,"offset":2772},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\ntest('returns winner', () => {\n  utils.getWinner = (p1, p2) => p2;\n\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n});","position":{"start":{"line":95,"column":1,"offset":2774},"end":{"line":105,"column":4,"offset":3033},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Assert calling a mock","position":{"start":{"line":107,"column":4,"offset":3038},"end":{"line":107,"column":25,"offset":3059},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3035},"end":{"line":107,"column":25,"offset":3059},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\ntest('returns winner', () => {\n  const originalGetWinner = utils.getWinner;\n  utils.getWinner = (...args) => {\n    util.getWinner.mock.calls.push(args);\n    return args[1];\n  };\n  utils.getWinner.mock = { calls: [] };\n\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n  expect(utils.getWinner.mock.calls).toEqual([\n    ['Ken Wheeler', 'Kent C Dodds'],\n    ['Ken Wheeler', 'Kent C Dodds'],\n  ]);\n\n  utils.getWinner = originalGetWinner;\n});","position":{"start":{"line":109,"column":1,"offset":3061},"end":{"line":130,"column":4,"offset":3638},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Jest spyOn","position":{"start":{"line":132,"column":4,"offset":3643},"end":{"line":132,"column":14,"offset":3653},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":3640},"end":{"line":132,"column":14,"offset":3653},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When calling ","position":{"start":{"line":134,"column":1,"offset":3655},"end":{"line":134,"column":14,"offset":3668},"indent":[]}},{"type":"inlineCode","value":"spyOn","position":{"start":{"line":134,"column":14,"offset":3668},"end":{"line":134,"column":21,"offset":3675},"indent":[]}},{"type":"text","value":", it just wraps the function and \"spies\" on it with a mock function to allow it to keep running.","position":{"start":{"line":134,"column":21,"offset":3675},"end":{"line":134,"column":117,"offset":3771},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":3655},"end":{"line":134,"column":117,"offset":3771},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once you do that, we can mock the implementation to enable the test to run our fake one:","position":{"start":{"line":136,"column":1,"offset":3773},"end":{"line":136,"column":89,"offset":3861},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":3773},"end":{"line":136,"column":89,"offset":3861},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\ntest('returns winner', () => {\n  jest.spyOn(utils, 'getWinner');\n  utils.getWinner.mockImplementation((p1, p2) => p2);\n\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n  expect(utils.getWinner.mock.calls).toEqual([\n    ['Ken Wheeler', 'Kent C Dodds'],\n    ['Ken Wheeler', 'Kent C Dodds'],\n  ]);\n\n  util.getWinner.mockRestore();\n});","position":{"start":{"line":138,"column":1,"offset":3863},"end":{"line":155,"column":4,"offset":4334},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Jest Mock","position":{"start":{"line":157,"column":4,"offset":4339},"end":{"line":157,"column":13,"offset":4348},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":4336},"end":{"line":157,"column":13,"offset":4348},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Jest Mock prevents us running into the namespace issues that ","position":{"start":{"line":159,"column":1,"offset":4350},"end":{"line":159,"column":62,"offset":4411},"indent":[]}},{"type":"inlineCode","value":"spyOn","position":{"start":{"line":159,"column":62,"offset":4411},"end":{"line":159,"column":69,"offset":4418},"indent":[]}},{"type":"text","value":" can give us which stops us from busting ES6 modules.","position":{"start":{"line":159,"column":69,"offset":4418},"end":{"line":159,"column":122,"offset":4471},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":4350},"end":{"line":159,"column":122,"offset":4471},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Jest will swap out whatever is in that file with a mock.","position":{"start":{"line":161,"column":1,"offset":4473},"end":{"line":161,"column":57,"offset":4529},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":4473},"end":{"line":161,"column":57,"offset":4529},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The callback allows you to mock specific functions.","position":{"start":{"line":163,"column":1,"offset":4531},"end":{"line":163,"column":52,"offset":4582},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":4531},"end":{"line":163,"column":52,"offset":4582},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\njest.mock('../utils', () => {\n  // to mock the actual file\n  const actualUtils = require.requireActual('../utils');\n\n  return {\n    // if we want to keep base utils\n    ...actualUtils,\n    getWinner: jest.fn((p1, p2) => p2),\n  };\n});\n\nbeforeEach(() => {\n  // ensure mocks are cleared before each test\n  utils.getWinner.mockClear();\n});\n\ntest('returns winner', () => {\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n  expect(utils.getWinner.mock.calls).toEqual([\n    ['Ken Wheeler', 'Kent C Dodds'],\n    ['Ken Wheeler', 'Kent C Dodds'],\n  ]);\n\n  util.getWinner.mockRestore();\n});","position":{"start":{"line":165,"column":1,"offset":4584},"end":{"line":195,"column":4,"offset":5303},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There is a convention by Jest to store mocks in a ","position":{"start":{"line":197,"column":1,"offset":5305},"end":{"line":197,"column":51,"offset":5355},"indent":[]}},{"type":"inlineCode","value":"__mocks__","position":{"start":{"line":197,"column":51,"offset":5355},"end":{"line":197,"column":62,"offset":5366},"indent":[]}},{"type":"text","value":" folder which is also colocated with the file to mock.","position":{"start":{"line":197,"column":62,"offset":5366},"end":{"line":197,"column":116,"offset":5420},"indent":[]}}],"position":{"start":{"line":197,"column":1,"offset":5305},"end":{"line":197,"column":116,"offset":5420},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we don't provide a mock, it will go to the ","position":{"start":{"line":199,"column":1,"offset":5422},"end":{"line":199,"column":47,"offset":5468},"indent":[]}},{"type":"inlineCode","value":"__mocks__","position":{"start":{"line":199,"column":47,"offset":5468},"end":{"line":199,"column":58,"offset":5479},"indent":[]}},{"type":"text","value":" folder to check if there is an implementation there.","position":{"start":{"line":199,"column":58,"offset":5479},"end":{"line":199,"column":111,"offset":5532},"indent":[]}}],"position":{"start":{"line":199,"column":1,"offset":5422},"end":{"line":199,"column":111,"offset":5532},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\n// no implementation - go check '../__mocks__/utils'\njest.mock('../utils');\n\nbeforeEach(() => {\n  // ensure mocks are cleared before each test\n  utils.getWinner.mockClear();\n});\n\ntest('returns winner', () => {\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n  expect(utils.getWinner.mock.calls).toEqual([\n    ['Ken Wheeler', 'Kent C Dodds'],\n    ['Ken Wheeler', 'Kent C Dodds'],\n  ]);\n\n  util.getWinner.mockRestore();\n});","position":{"start":{"line":201,"column":1,"offset":5534},"end":{"line":223,"column":4,"offset":6095},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To mock modules, you put a mock at the root dir (example has ","position":{"start":{"line":225,"column":1,"offset":6097},"end":{"line":225,"column":62,"offset":6158},"indent":[]}},{"type":"inlineCode","value":"src/__mocks__","position":{"start":{"line":225,"column":62,"offset":6158},"end":{"line":225,"column":77,"offset":6173},"indent":[]}},{"type":"text","value":") and Jest will pick those up automatically.","position":{"start":{"line":225,"column":77,"offset":6173},"end":{"line":225,"column":121,"offset":6217},"indent":[]}}],"position":{"start":{"line":225,"column":1,"offset":6097},"end":{"line":225,"column":121,"offset":6217},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// checks for `src/__mocks__/axios.js`\nimport axiosMock from 'axios';\n\n// if we don't want to mock module\njest.unmock('axios');","position":{"start":{"line":227,"column":1,"offset":6219},"end":{"line":233,"column":4,"offset":6364},"indent":[1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"An interesting point here on pure modules is that Jest has a ","position":{"start":{"line":235,"column":3,"offset":6368},"end":{"line":235,"column":64,"offset":6429},"indent":[]}},{"type":"inlineCode","value":"resetModules","position":{"start":{"line":235,"column":64,"offset":6429},"end":{"line":235,"column":78,"offset":6443},"indent":[]}},{"type":"text","value":" method that you can run after each test if there is impurity (ie variables declared at the top-level of the file).","position":{"start":{"line":235,"column":78,"offset":6443},"end":{"line":235,"column":193,"offset":6558},"indent":[]}}],"position":{"start":{"line":235,"column":3,"offset":6368},"end":{"line":235,"column":193,"offset":6558},"indent":[]}}],"position":{"start":{"line":235,"column":1,"offset":6366},"end":{"line":235,"column":193,"offset":6558},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using a ","position":{"start":{"line":237,"column":4,"offset":6563},"end":{"line":237,"column":12,"offset":6571},"indent":[]}},{"type":"inlineCode","value":"__mocks__","position":{"start":{"line":237,"column":12,"offset":6571},"end":{"line":237,"column":23,"offset":6582},"indent":[]}},{"type":"text","value":" directory","position":{"start":{"line":237,"column":23,"offset":6582},"end":{"line":237,"column":33,"offset":6592},"indent":[]}}],"position":{"start":{"line":237,"column":1,"offset":6560},"end":{"line":237,"column":33,"offset":6592},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import * as usersController from '../users';\nimport { db, initDb } from 'db-utils';\n\nbeforeEach(() => {\n  // an example just initialising the db here\n  initDb();\n});\n\ntest('getUsers returns all users in the database', async () => {\n  const req = {};\n  const res = {\n    json: jest.fn(),\n  };\n\n  await usersController.getUsers(req, res);\n  expect(res.json).toHaveBeenCalledTimes(1);\n  console.log(res.json.mock.calls[0]); // passes back array called in func [{users:[]}]\n\n  // for testing\n  const actualUsers = await db.getUsers();\n  expect(users).toEqual(actualUsers.map(safeUser));\n});","position":{"start":{"line":239,"column":1,"offset":6594},"end":{"line":262,"column":4,"offset":7198},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The example that Kent C Dodds users here is a util to generate random users.","position":{"start":{"line":264,"column":1,"offset":7200},"end":{"line":264,"column":77,"offset":7276},"indent":[]}}],"position":{"start":{"line":264,"column":1,"offset":7200},"end":{"line":264,"column":77,"offset":7276},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Test Factories","position":{"start":{"line":266,"column":4,"offset":7281},"end":{"line":266,"column":18,"offset":7295},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":7278},"end":{"line":266,"column":18,"offset":7295},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Something to note throughout the tests is that Kent uses a ","position":{"start":{"line":268,"column":3,"offset":7299},"end":{"line":268,"column":62,"offset":7358},"indent":[]}},{"type":"inlineCode","value":"setup","position":{"start":{"line":268,"column":62,"offset":7358},"end":{"line":268,"column":69,"offset":7365},"indent":[]}},{"type":"text","value":" top-level function to get the data required during test runtime instead of initialising at the top-level.","position":{"start":{"line":268,"column":69,"offset":7365},"end":{"line":268,"column":175,"offset":7471},"indent":[]}}],"position":{"start":{"line":268,"column":3,"offset":7299},"end":{"line":268,"column":175,"offset":7471},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":7297},"end":{"line":268,"column":175,"offset":7471},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function setup() {\n  const req = {};\n  const res = {};\n  Object.assign(res, {\n    status: jest.fn(\n      function status() {\n        return this;\n      }.bind(res),\n    ),\n    json: jest.fn(\n      function status() {\n        return this;\n      }.bind(res),\n    ),\n    send: jest.fn(\n      function status() {\n        return this;\n      }.bind(res),\n    ),\n  });\n  return { req, res };\n}","position":{"start":{"line":270,"column":1,"offset":7473},"end":{"line":293,"column":4,"offset":7877},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Doing cleanup ahead of tests can be useful instead of after. This helps inspect the database at the time of failure to help debug.","position":{"start":{"line":295,"column":3,"offset":7881},"end":{"line":295,"column":133,"offset":8011},"indent":[]}}],"position":{"start":{"line":295,"column":3,"offset":7881},"end":{"line":295,"column":133,"offset":8011},"indent":[]}}],"position":{"start":{"line":295,"column":1,"offset":7879},"end":{"line":295,"column":133,"offset":8011},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":297,"column":4,"offset":8016},"end":{"line":297,"column":14,"offset":8026},"indent":[]}}],"position":{"start":{"line":297,"column":1,"offset":8013},"end":{"line":297,"column":14,"offset":8026},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Kent mentions that you should use the ","position":{"start":{"line":299,"column":1,"offset":8028},"end":{"line":299,"column":39,"offset":8066},"indent":[]}},{"type":"inlineCode","value":"testing trophy","position":{"start":{"line":299,"column":39,"offset":8066},"end":{"line":299,"column":55,"offset":8082},"indent":[]}},{"type":"text","value":". He mentions that generally he focuses mainly on integration test over unit and e2e as they are more expensive time and money wise.","position":{"start":{"line":299,"column":55,"offset":8082},"end":{"line":299,"column":187,"offset":8214},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":8028},"end":{"line":299,"column":187,"offset":8214},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":302,"column":1,"offset":8217},"end":{"line":302,"column":31,"offset":8247},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":302,"column":31,"offset":8247}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"js-testing-practices-and-principles\"\n    }}>{`JS-Testing-Practices-And-Principles`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/testing-practices-principles/jest-testing-framework/\"\n        }}>{`Online Course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://jestjs.io/docs/en/cli\"\n        }}>{`Jest CLI docs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/atlassian/jest-in-case\"\n        }}>{`Jest-in-case library`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/pure-modules/\"\n        }}>{`Why Pure Modules`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"jest-intro\"\n    }}>{`Jest Intro`}</h2>\n    <h3 {...{\n      \"id\": \"cli\"\n    }}>{`CLI`}</h3>\n    <p>{`Running `}<inlineCode parentName=\"p\">{`jest -o`}</inlineCode>{` will look for related files since last commit. When running, you can use shortcuts to run certain tests. Read the watch usage for more info.`}</p>\n    <h3 {...{\n      \"id\": \"commands\"\n    }}>{`Commands`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toBe`}</inlineCode>{` will compare memory allocation`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toEqual`}</inlineCode>{` will deep equal object values etc`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toMatchObject`}</inlineCode>{` checks if all expected object matches what is in the actual object`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toHaveBeenCalled`}</inlineCode>{` is used to help with mock functons`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toHaveBeenCalledTimes`}</inlineCode>{` is mock called how many times`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toHaveBeenCalledWith`}</inlineCode>{` to check what argument is passed`}</li>\n    </ul>\n    <p>{`With `}<inlineCode parentName=\"p\">{`toEqual`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`toMatchObject`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`toHaveBeenCalledWith`}</inlineCode>{` you can match a schema. Eg:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`test('example', () => {\n  const bday = {\n    day: 22,\n    month: 4,\n    year: 1992,\n    meta: { display: '22nd April 1992' },\n  };\n\n  const schema = {\n    day: expect.any(Number),\n    month: expect.any(Number),\n    year: expect.any(Number),\n    meta: {\n      display: expect.stringContaining('1992'),\n    },\n    // there's also expect.arrayContaining or expect.objectContaining\n  };\n  expect(birthday).toEqual(schema);\n});\n`}</code></pre>\n    <p>{`This is useful for generated data.`}</p>\n    <h2 {...{\n      \"id\": \"test-factories-and-colocating-tests-qa\"\n    }}>{`Test Factories and Colocating Tests Q&A`}</h2>\n    <p>{`Creating a test factory is a good approach to testing a pure function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`describe('isPasswordAllowed', () => {\n  const allowedPasswords = ['allowed'];\n  const disallowedPasswords = ['disallowed'];\n\n  allowedPasswords.forEach(pwd => {\n    test(\\`\"\\${pwd}\" should be allowed\\`, () => {\n      expect(isPasswordAllowed(pwd)).toBe(true);\n    });\n  });\n\n  disallowedPasswords.forEach(pwd => {\n    test(\\`\"\\${pwd}\" should be allowed\\`, () => {\n      expect(isPasswordAllowed(pwd)).toBe(false);\n    });\n  });\n});\n`}</code></pre>\n    <p>{`There was a reference here to Atlassian's `}<inlineCode parentName=\"p\">{`jest-in-case`}</inlineCode>{` library that you can see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/atlassian/jest-in-case\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`\"Colocating\" your tests essentially is the idea of putting your test in the same folder as where the source code is. Its a more relevant position for updates etc.`}</p>\n    <h2 {...{\n      \"id\": \"code-coverage\"\n    }}>{`Code coverage`}</h2>\n    <p>{`Istanbul is a standard coverage tool for JS testing.`}</p>\n    <p>{`The code coverage report helps you identify lines of code that haven't been covered during testing.`}</p>\n    <h2 {...{\n      \"id\": \"monkey-patch-a-mock\"\n    }}>{`Monkey Patch a mock`}</h2>\n    <p>{`Monkey patching is updating 3rd party software to fit our needs - in this case, changing a func.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\ntest('returns winner', () => {\n  utils.getWinner = (p1, p2) => p2;\n\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"assert-calling-a-mock\"\n    }}>{`Assert calling a mock`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\ntest('returns winner', () => {\n  const originalGetWinner = utils.getWinner;\n  utils.getWinner = (...args) => {\n    util.getWinner.mock.calls.push(args);\n    return args[1];\n  };\n  utils.getWinner.mock = { calls: [] };\n\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n  expect(utils.getWinner.mock.calls).toEqual([\n    ['Ken Wheeler', 'Kent C Dodds'],\n    ['Ken Wheeler', 'Kent C Dodds'],\n  ]);\n\n  utils.getWinner = originalGetWinner;\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"jest-spyon\"\n    }}>{`Jest spyOn`}</h2>\n    <p>{`When calling `}<inlineCode parentName=\"p\">{`spyOn`}</inlineCode>{`, it just wraps the function and \"spies\" on it with a mock function to allow it to keep running.`}</p>\n    <p>{`Once you do that, we can mock the implementation to enable the test to run our fake one:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\ntest('returns winner', () => {\n  jest.spyOn(utils, 'getWinner');\n  utils.getWinner.mockImplementation((p1, p2) => p2);\n\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n  expect(utils.getWinner.mock.calls).toEqual([\n    ['Ken Wheeler', 'Kent C Dodds'],\n    ['Ken Wheeler', 'Kent C Dodds'],\n  ]);\n\n  util.getWinner.mockRestore();\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"jest-mock\"\n    }}>{`Jest Mock`}</h2>\n    <p>{`Jest Mock prevents us running into the namespace issues that `}<inlineCode parentName=\"p\">{`spyOn`}</inlineCode>{` can give us which stops us from busting ES6 modules.`}</p>\n    <p>{`Jest will swap out whatever is in that file with a mock.`}</p>\n    <p>{`The callback allows you to mock specific functions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\njest.mock('../utils', () => {\n  // to mock the actual file\n  const actualUtils = require.requireActual('../utils');\n\n  return {\n    // if we want to keep base utils\n    ...actualUtils,\n    getWinner: jest.fn((p1, p2) => p2),\n  };\n});\n\nbeforeEach(() => {\n  // ensure mocks are cleared before each test\n  utils.getWinner.mockClear();\n});\n\ntest('returns winner', () => {\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n  expect(utils.getWinner.mock.calls).toEqual([\n    ['Ken Wheeler', 'Kent C Dodds'],\n    ['Ken Wheeler', 'Kent C Dodds'],\n  ]);\n\n  util.getWinner.mockRestore();\n});\n`}</code></pre>\n    <p>{`There is a convention by Jest to store mocks in a `}<inlineCode parentName=\"p\">{`__mocks__`}</inlineCode>{` folder which is also colocated with the file to mock.`}</p>\n    <p>{`If we don't provide a mock, it will go to the `}<inlineCode parentName=\"p\">{`__mocks__`}</inlineCode>{` folder to check if there is an implementation there.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import thumbWar from '../thumb-war';\nimport * as utils from '../utils';\n\n// no implementation - go check '../__mocks__/utils'\njest.mock('../utils');\n\nbeforeEach(() => {\n  // ensure mocks are cleared before each test\n  utils.getWinner.mockClear();\n});\n\ntest('returns winner', () => {\n  const winner = thumbWar('Ken Wheeler', 'Kent C Dodds');\n  expect(winner).toBe('Kent C Dodds');\n  expect(utils.getWinner.mock.calls).toEqual([\n    ['Ken Wheeler', 'Kent C Dodds'],\n    ['Ken Wheeler', 'Kent C Dodds'],\n  ]);\n\n  util.getWinner.mockRestore();\n});\n`}</code></pre>\n    <p>{`To mock modules, you put a mock at the root dir (example has `}<inlineCode parentName=\"p\">{`src/__mocks__`}</inlineCode>{`) and Jest will pick those up automatically.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// checks for \\`src/__mocks__/axios.js\\`\nimport axiosMock from 'axios';\n\n// if we don't want to mock module\njest.unmock('axios');\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An interesting point here on pure modules is that Jest has a `}<inlineCode parentName=\"p\">{`resetModules`}</inlineCode>{` method that you can run after each test if there is impurity (ie variables declared at the top-level of the file).`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"using-a-__mocks__-directory\"\n    }}>{`Using a `}<inlineCode parentName=\"h2\">{`__mocks__`}</inlineCode>{` directory`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import * as usersController from '../users';\nimport { db, initDb } from 'db-utils';\n\nbeforeEach(() => {\n  // an example just initialising the db here\n  initDb();\n});\n\ntest('getUsers returns all users in the database', async () => {\n  const req = {};\n  const res = {\n    json: jest.fn(),\n  };\n\n  await usersController.getUsers(req, res);\n  expect(res.json).toHaveBeenCalledTimes(1);\n  console.log(res.json.mock.calls[0]); // passes back array called in func [{users:[]}]\n\n  // for testing\n  const actualUsers = await db.getUsers();\n  expect(users).toEqual(actualUsers.map(safeUser));\n});\n`}</code></pre>\n    <p>{`The example that Kent C Dodds users here is a util to generate random users.`}</p>\n    <h2 {...{\n      \"id\": \"test-factories\"\n    }}>{`Test Factories`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Something to note throughout the tests is that Kent uses a `}<inlineCode parentName=\"p\">{`setup`}</inlineCode>{` top-level function to get the data required during test runtime instead of initialising at the top-level.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function setup() {\n  const req = {};\n  const res = {};\n  Object.assign(res, {\n    status: jest.fn(\n      function status() {\n        return this;\n      }.bind(res),\n    ),\n    json: jest.fn(\n      function status() {\n        return this;\n      }.bind(res),\n    ),\n    send: jest.fn(\n      function status() {\n        return this;\n      }.bind(res),\n    ),\n  });\n  return { req, res };\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Doing cleanup ahead of tests can be useful instead of after. This helps inspect the database at the time of failure to help debug.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"conclusion\"\n    }}>{`Conclusion`}</h2>\n    <p>{`Kent mentions that you should use the `}<inlineCode parentName=\"p\">{`testing trophy`}</inlineCode>{`. He mentions that generally he focuses mainly on integration test over unit and e2e as they are more expensive time and money wise.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}