{"expireTime":9007200848610921000,"key":"gatsby-plugin-mdx-entire-payload-fc8bd3bf9f006c8b70a53befe0f93ef8-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Decorator Pattern","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":20,"offset":186},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":20,"offset":186},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is another type of structural pattern.","position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":44,"offset":231},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":44,"offset":231},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The decorator pattern works by creating a decorator class that accepts the base class as an argument to the constructor and then implementing a function that calls to super.","position":{"start":{"line":12,"column":1,"offset":233},"end":{"line":12,"column":174,"offset":406},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":233},"end":{"line":12,"column":174,"offset":406},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Intent:","position":{"start":{"line":14,"column":1,"offset":408},"end":{"line":14,"column":8,"offset":415},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":408},"end":{"line":14,"column":8,"offset":415},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Attach additional responsibilities to an object dynamically. Gives an alternative to subclassing.","position":{"start":{"line":16,"column":4,"offset":420},"end":{"line":16,"column":101,"offset":517},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":420},"end":{"line":16,"column":101,"offset":517},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":417},"end":{"line":16,"column":101,"offset":517},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Client-specified embellishment of a core object by recursively wrapping it.","position":{"start":{"line":17,"column":4,"offset":521},"end":{"line":17,"column":79,"offset":596},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":521},"end":{"line":17,"column":79,"offset":596},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":518},"end":{"line":17,"column":79,"offset":596},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Wrapping a gift, putting it in a box, and wrapping the box.","position":{"start":{"line":18,"column":4,"offset":600},"end":{"line":18,"column":63,"offset":659},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":600},"end":{"line":18,"column":63,"offset":659},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":597},"end":{"line":18,"column":63,"offset":659},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":417},"end":{"line":18,"column":63,"offset":659},"indent":[1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"interface Pizza {\n  cost(): Number;\n}\n\nclass BasePizza implements Pizza {\n  cost(): Number {\n    return 10;\n  }\n}\n\nabstract class PizzaExtraDecorator implements Pizza {\n  private _pizza: Pizza;\n\n  constructor(pizza: BasePizza) {\n    this._pizza = pizza;\n  }\n\n  cost(): Number {\n    return this._pizza.cost();\n  }\n}\n\nclass ExtraPineappleDecorator extends PizzaExtraDecorator {\n  private _price: Number = 2;\n\n  cost(): Number {\n    return super.cost().valueOf() + this._price.valueOf();\n  }\n}\n\nclass ExtraCheeseDecorator extends PizzaExtraDecorator {\n  private _price: Number = 2.5;\n\n  cost(): Number {\n    return super.cost().valueOf() + this._price.valueOf();\n  }\n}\n\n(function main() {\n  const pizza = new BasePizza();\n  const withPineapple = new ExtraPineappleDecorator(pizza);\n  const withExtraCheese = new ExtraCheeseDecorator(withPineapple);\n  console.log(`Total: $${withExtraCheese.cost()}`);\n})();","position":{"start":{"line":20,"column":1,"offset":661},"end":{"line":65,"column":4,"offset":1582},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Other alternatives could include creating a christmas tree with actual decorations as a decorator.","position":{"start":{"line":67,"column":1,"offset":1584},"end":{"line":67,"column":99,"offset":1682},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1584},"end":{"line":67,"column":99,"offset":1682},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":70,"column":1,"offset":1685},"end":{"line":70,"column":31,"offset":1715},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":70,"column":31,"offset":1715}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"decorator-pattern\"\n    }}>{`Decorator Pattern`}</h1>\n    <p>{`This is another type of structural pattern.`}</p>\n    <p>{`The decorator pattern works by creating a decorator class that accepts the base class as an argument to the constructor and then implementing a function that calls to super.`}</p>\n    <p>{`Intent:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Attach additional responsibilities to an object dynamically. Gives an alternative to subclassing.`}</li>\n      <li parentName=\"ol\">{`Client-specified embellishment of a core object by recursively wrapping it.`}</li>\n      <li parentName=\"ol\">{`Wrapping a gift, putting it in a box, and wrapping the box.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`interface Pizza {\n  cost(): Number;\n}\n\nclass BasePizza implements Pizza {\n  cost(): Number {\n    return 10;\n  }\n}\n\nabstract class PizzaExtraDecorator implements Pizza {\n  private _pizza: Pizza;\n\n  constructor(pizza: BasePizza) {\n    this._pizza = pizza;\n  }\n\n  cost(): Number {\n    return this._pizza.cost();\n  }\n}\n\nclass ExtraPineappleDecorator extends PizzaExtraDecorator {\n  private _price: Number = 2;\n\n  cost(): Number {\n    return super.cost().valueOf() + this._price.valueOf();\n  }\n}\n\nclass ExtraCheeseDecorator extends PizzaExtraDecorator {\n  private _price: Number = 2.5;\n\n  cost(): Number {\n    return super.cost().valueOf() + this._price.valueOf();\n  }\n}\n\n(function main() {\n  const pizza = new BasePizza();\n  const withPineapple = new ExtraPineappleDecorator(pizza);\n  const withExtraCheese = new ExtraCheeseDecorator(withPineapple);\n  console.log(\\`Total: $\\${withExtraCheese.cost()}\\`);\n})();\n`}</code></pre>\n    <p>{`Other alternatives could include creating a christmas tree with actual decorations as a decorator.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}