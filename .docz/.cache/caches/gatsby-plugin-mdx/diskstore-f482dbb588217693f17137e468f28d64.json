{"expireTime":9007200867335996000,"key":"gatsby-plugin-mdx-entire-payload-afe2f6276a9b5188113ba813104583fc-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"GraphQL Setup","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":16,"offset":181},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":16,"offset":181},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Links","position":{"start":{"line":9,"column":4,"offset":186},"end":{"line":9,"column":9,"offset":191},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":183},"end":{"line":9,"column":9,"offset":191},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2","children":[{"type":"text","value":"https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2","position":{"start":{"line":11,"column":1,"offset":193},"end":{"line":11,"column":95,"offset":287},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":193},"end":{"line":11,"column":95,"offset":287},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":11,"column":95,"offset":287},"end":{"line":12,"column":1,"offset":288},"indent":[1]}},{"type":"link","title":null,"url":"https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde","children":[{"type":"text","value":"https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde","position":{"start":{"line":12,"column":1,"offset":288},"end":{"line":12,"column":79,"offset":366},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":288},"end":{"line":12,"column":79,"offset":366},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":193},"end":{"line":12,"column":79,"offset":366},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"To get it running","position":{"start":{"line":14,"column":4,"offset":371},"end":{"line":14,"column":21,"offset":388},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":368},"end":{"line":14,"column":21,"offset":388},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"amplify init\namplify add api\n# > GraphQL\n# > name\n# > API Key\n# > No\n# > Yes\n# Select single or one-to-many\n# y","position":{"start":{"line":16,"column":1,"offset":390},"end":{"line":26,"column":4,"offset":513},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Not that you can preset a schema to have used for Amplify.","position":{"start":{"line":28,"column":1,"offset":515},"end":{"line":28,"column":59,"offset":573},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":515},"end":{"line":28,"column":59,"offset":573},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example, create a ","position":{"start":{"line":30,"column":1,"offset":575},"end":{"line":30,"column":19,"offset":593},"indent":[]}},{"type":"inlineCode","value":"schema.graphql","position":{"start":{"line":30,"column":19,"offset":593},"end":{"line":30,"column":35,"offset":609},"indent":[]}},{"type":"text","value":" file with following and pass the path during setup:","position":{"start":{"line":30,"column":35,"offset":609},"end":{"line":30,"column":87,"offset":661},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":575},"end":{"line":30,"column":87,"offset":661},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"type Pet @model {\n  id: ID!\n  name: String!\n  description: String\n  hello: String\n}","position":{"start":{"line":32,"column":1,"offset":663},"end":{"line":39,"column":4,"offset":764},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example schema","position":{"start":{"line":41,"column":5,"offset":770},"end":{"line":41,"column":19,"offset":784},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":766},"end":{"line":41,"column":19,"offset":784},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"type Pet @model {\n  id: ID!\n  name: String!\n  description: String\n}","position":{"start":{"line":43,"column":1,"offset":786},"end":{"line":49,"column":4,"offset":871},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example mutation","position":{"start":{"line":51,"column":5,"offset":877},"end":{"line":51,"column":21,"offset":893},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":873},"end":{"line":51,"column":21,"offset":893},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import API, { graphqlOperation } from '@aws-amplify/api';\n\n// define mutation\nconst createPet = `\n  mutation($name: String!, $description: String) {\n    createPet(input: {\n      name: $name\n      description: $description\n  }) {\n    id\n    name\n    description\n  }\n}`;\n// execute a mutation\nstate = { name: '' };\nonChangeText = (value) => {\n  this.setState({ name: value });\n};\ncreatePet = async () => {\n  const pet = this.state;\n  await API.graphql(graphqlOperation(createPet, pet));\n};","position":{"start":{"line":53,"column":1,"offset":895},"end":{"line":77,"column":4,"offset":1400},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example query","position":{"start":{"line":79,"column":5,"offset":1406},"end":{"line":79,"column":18,"offset":1419},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":1402},"end":{"line":79,"column":18,"offset":1419},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// define query\nconst listPets = `\n  query {\n    listPets {\n      items {\n        id\n        name\n        description\n      }\n    }\n }\n`\n// execute query\ngetPets = () => {\n  const data = await API.graphql(graphqlOperation(listPets))\n  // do something with data\n}","position":{"start":{"line":81,"column":1,"offset":1421},"end":{"line":99,"column":4,"offset":1701},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Autogenerating code for the schema","position":{"start":{"line":101,"column":4,"offset":1706},"end":{"line":101,"column":38,"offset":1740},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":1703},"end":{"line":101,"column":38,"offset":1740},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"amplify codegen add","position":{"start":{"line":103,"column":1,"offset":1742},"end":{"line":105,"column":4,"offset":1773},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"1-many, many-to-many relationship schemas","position":{"start":{"line":107,"column":4,"offset":1778},"end":{"line":107,"column":45,"offset":1819},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":1775},"end":{"line":107,"column":45,"offset":1819},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"type Post @model {\n  id: ID!\n  title: String!\n  editors: [PostEditor] @connection(name: \"PostEditors\")\n}\n# Create a join model and disable queries as you don't need them\n# and can query through Post.editors and User.posts\ntype PostEditor @model(queries: null) {\n  id: ID!\n  post: Post! @connection(name: \"PostEditors\")\n  editor: User! @connection(name: \"UserEditors\")\n}\ntype User @model {\n  id: ID!\n  username: String!\n  posts: [PostEditor] @connection(name: \"UserEditors\")\n}","position":{"start":{"line":109,"column":1,"offset":1821},"end":{"line":127,"column":4,"offset":2314},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":130,"column":1,"offset":2317},"end":{"line":130,"column":31,"offset":2347},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":130,"column":31,"offset":2347}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"graphql-setup\"\n    }}>{`GraphQL Setup`}</h1>\n    <h2 {...{\n      \"id\": \"links\"\n    }}>{`Links`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2\"\n      }}>{`https://blog.expo.io/how-to-build-cloud-powered-mobile-apps-with-expo-aws-amplify-2fddc898f9a2`}</a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde\"\n      }}>{`https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde`}</a></p>\n    <h2 {...{\n      \"id\": \"to-get-it-running\"\n    }}>{`To get it running`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`amplify init\namplify add api\n# > GraphQL\n# > name\n# > API Key\n# > No\n# > Yes\n# Select single or one-to-many\n# y\n`}</code></pre>\n    <p>{`Not that you can preset a schema to have used for Amplify.`}</p>\n    <p>{`Example, create a `}<inlineCode parentName=\"p\">{`schema.graphql`}</inlineCode>{` file with following and pass the path during setup:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`type Pet @model {\n  id: ID!\n  name: String!\n  description: String\n  hello: String\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-schema\"\n    }}>{`Example schema`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`type Pet @model {\n  id: ID!\n  name: String!\n  description: String\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-mutation\"\n    }}>{`Example mutation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import API, { graphqlOperation } from '@aws-amplify/api';\n\n// define mutation\nconst createPet = \\`\n  mutation($name: String!, $description: String) {\n    createPet(input: {\n      name: $name\n      description: $description\n  }) {\n    id\n    name\n    description\n  }\n}\\`;\n// execute a mutation\nstate = { name: '' };\nonChangeText = (value) => {\n  this.setState({ name: value });\n};\ncreatePet = async () => {\n  const pet = this.state;\n  await API.graphql(graphqlOperation(createPet, pet));\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-query\"\n    }}>{`Example query`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// define query\nconst listPets = \\`\n  query {\n    listPets {\n      items {\n        id\n        name\n        description\n      }\n    }\n }\n\\`\n// execute query\ngetPets = () => {\n  const data = await API.graphql(graphqlOperation(listPets))\n  // do something with data\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"autogenerating-code-for-the-schema\"\n    }}>{`Autogenerating code for the schema`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`amplify codegen add\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"1-many-many-to-many-relationship-schemas\"\n    }}>{`1-many, many-to-many relationship schemas`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`type Post @model {\n  id: ID!\n  title: String!\n  editors: [PostEditor] @connection(name: \"PostEditors\")\n}\n# Create a join model and disable queries as you don't need them\n# and can query through Post.editors and User.posts\ntype PostEditor @model(queries: null) {\n  id: ID!\n  post: Post! @connection(name: \"PostEditors\")\n  editor: User! @connection(name: \"UserEditors\")\n}\ntype User @model {\n  id: ID!\n  username: String!\n  posts: [PostEditor] @connection(name: \"UserEditors\")\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}