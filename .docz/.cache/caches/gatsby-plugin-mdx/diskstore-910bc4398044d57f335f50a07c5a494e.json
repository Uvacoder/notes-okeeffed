{"expireTime":9007200852878423000,"key":"gatsby-plugin-mdx-entire-payload-7cd3911853e9f35997349d1a2697f84d-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Java Lambda Funcs","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":20,"offset":186},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":20,"offset":186},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The basic gist is to generate a ","position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":33,"offset":220},"indent":[]}},{"type":"inlineCode","value":"interface","position":{"start":{"line":10,"column":33,"offset":220},"end":{"line":10,"column":44,"offset":231},"indent":[]}},{"type":"text","value":" with the lambda signature, then explicitly create a function preface by the interface type.","position":{"start":{"line":10,"column":44,"offset":231},"end":{"line":10,"column":136,"offset":323},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":136,"offset":323},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This will allow you to call the lambda function as a instance method.","position":{"start":{"line":12,"column":1,"offset":325},"end":{"line":12,"column":70,"offset":394},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":325},"end":{"line":12,"column":70,"offset":394},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":14,"column":4,"offset":399},"end":{"line":14,"column":11,"offset":406},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":396},"end":{"line":14,"column":11,"offset":406},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"// src/main/java/Lambda.java\ninterface Anon {\n    String helloWorld();\n}\n\ninterface AnonInt {\n    int sum(int a, int b);\n}\n\nclass Lambda {\n    String hello() {\n        Anon anon = () -> \"Hello, World!\";\n        return anon.helloWorld();\n    }\n\n    int sumOnePlusTwo() {\n        AnonInt anon = (int a, int b) -> a + b;\n        return anon.sum(1, 2);\n    }\n}","position":{"start":{"line":16,"column":1,"offset":408},"end":{"line":37,"column":4,"offset":776},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As for the test file:","position":{"start":{"line":39,"column":1,"offset":778},"end":{"line":39,"column":22,"offset":799},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":778},"end":{"line":39,"column":22,"offset":799},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"// src/tests/java/LambdaTest.java\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class LambdaTest {\n    @Test\n    public void testLambda() {\n        assertEquals(\"Hello, World!\", new Lambda().hello());\n    }\n\n    @Test\n    public void testLambdaSum() {\n        assertEquals(3, new Lambda().sumOnePlusTwo());\n    }\n}","position":{"start":{"line":41,"column":1,"offset":801},"end":{"line":59,"column":4,"offset":1183},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":62,"column":1,"offset":1186},"end":{"line":62,"column":31,"offset":1216},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":62,"column":31,"offset":1216}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"java-lambda-funcs\"\n    }}>{`Java Lambda Funcs`}</h1>\n    <p>{`The basic gist is to generate a `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{` with the lambda signature, then explicitly create a function preface by the interface type.`}</p>\n    <p>{`This will allow you to call the lambda function as a instance method.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/main/java/Lambda.java\ninterface Anon {\n    String helloWorld();\n}\n\ninterface AnonInt {\n    int sum(int a, int b);\n}\n\nclass Lambda {\n    String hello() {\n        Anon anon = () -> \"Hello, World!\";\n        return anon.helloWorld();\n    }\n\n    int sumOnePlusTwo() {\n        AnonInt anon = (int a, int b) -> a + b;\n        return anon.sum(1, 2);\n    }\n}\n`}</code></pre>\n    <p>{`As for the test file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// src/tests/java/LambdaTest.java\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class LambdaTest {\n    @Test\n    public void testLambda() {\n        assertEquals(\"Hello, World!\", new Lambda().hello());\n    }\n\n    @Test\n    public void testLambdaSum() {\n        assertEquals(3, new Lambda().sumOnePlusTwo());\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}