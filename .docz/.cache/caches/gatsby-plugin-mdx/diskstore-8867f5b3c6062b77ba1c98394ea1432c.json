{"expireTime":9007200848610924000,"key":"gatsby-plugin-mdx-entire-payload-1b80cbd6f00fe782ee2be886a0a66df3-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Builder Pattern","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":18,"offset":184},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":18,"offset":184},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":10,"column":1,"offset":186},"end":{"line":10,"column":5,"offset":190},"indent":[]}},{"type":"inlineCode","value":"Builder Pattern","position":{"start":{"line":10,"column":5,"offset":190},"end":{"line":10,"column":22,"offset":207},"indent":[]}},{"type":"text","value":" enables us to create different instance representations using the same construction code.","position":{"start":{"line":10,"column":22,"offset":207},"end":{"line":10,"column":112,"offset":297},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":186},"end":{"line":10,"column":112,"offset":297},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this scenario, we will use the classic trope of building a pizza to illustate how to implement this pattern.","position":{"start":{"line":12,"column":1,"offset":299},"end":{"line":12,"column":112,"offset":410},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":299},"end":{"line":12,"column":112,"offset":410},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The pattern works by using the following:","position":{"start":{"line":14,"column":1,"offset":412},"end":{"line":14,"column":42,"offset":453},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":412},"end":{"line":14,"column":42,"offset":453},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":16,"column":3,"offset":457},"end":{"line":16,"column":5,"offset":459},"indent":[]}},{"type":"inlineCode","value":"Product","position":{"start":{"line":16,"column":5,"offset":459},"end":{"line":16,"column":14,"offset":468},"indent":[]}},{"type":"text","value":" which represents the complex object under construction. In this case, the product is the ","position":{"start":{"line":16,"column":14,"offset":468},"end":{"line":16,"column":104,"offset":558},"indent":[]}},{"type":"inlineCode","value":"Pizza","position":{"start":{"line":16,"column":104,"offset":558},"end":{"line":16,"column":111,"offset":565},"indent":[]}},{"type":"text","value":" class which denotes our pizza instances. We wil name this our ","position":{"start":{"line":16,"column":111,"offset":565},"end":{"line":16,"column":174,"offset":628},"indent":[]}},{"type":"inlineCode","value":"PizzaProduct","position":{"start":{"line":16,"column":174,"offset":628},"end":{"line":16,"column":188,"offset":642},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":16,"column":188,"offset":642},"end":{"line":16,"column":189,"offset":643},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":457},"end":{"line":16,"column":189,"offset":643},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":455},"end":{"line":16,"column":189,"offset":643},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":17,"column":3,"offset":646},"end":{"line":17,"column":5,"offset":648},"indent":[]}},{"type":"inlineCode","value":"Builder","position":{"start":{"line":17,"column":5,"offset":648},"end":{"line":17,"column":14,"offset":657},"indent":[]}},{"type":"text","value":" that specifies the abstract class for creating the ","position":{"start":{"line":17,"column":14,"offset":657},"end":{"line":17,"column":66,"offset":709},"indent":[]}},{"type":"inlineCode","value":"Product","position":{"start":{"line":17,"column":66,"offset":709},"end":{"line":17,"column":75,"offset":718},"indent":[]}},{"type":"text","value":" parts (in our case the ","position":{"start":{"line":17,"column":75,"offset":718},"end":{"line":17,"column":99,"offset":742},"indent":[]}},{"type":"inlineCode","value":"Pizza","position":{"start":{"line":17,"column":99,"offset":742},"end":{"line":17,"column":106,"offset":749},"indent":[]}},{"type":"text","value":"). In this case, it will be our abstract class ","position":{"start":{"line":17,"column":106,"offset":749},"end":{"line":17,"column":153,"offset":796},"indent":[]}},{"type":"inlineCode","value":"PizzaBuilder","position":{"start":{"line":17,"column":153,"offset":796},"end":{"line":17,"column":167,"offset":810},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":17,"column":167,"offset":810},"end":{"line":17,"column":168,"offset":811},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":646},"end":{"line":17,"column":168,"offset":811},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":644},"end":{"line":17,"column":168,"offset":811},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Concrete Builders","position":{"start":{"line":18,"column":3,"offset":814},"end":{"line":18,"column":22,"offset":833},"indent":[]}},{"type":"text","value":" where each builder is responsible to instantiate different representations of the product. In this case, the concrete builders will be our classes that construct different types of pizza denoted as ","position":{"start":{"line":18,"column":22,"offset":833},"end":{"line":18,"column":221,"offset":1032},"indent":[]}},{"type":"inlineCode","value":"NConcreteBuilder","position":{"start":{"line":18,"column":221,"offset":1032},"end":{"line":18,"column":239,"offset":1050},"indent":[]}},{"type":"text","value":" where the ","position":{"start":{"line":18,"column":239,"offset":1050},"end":{"line":18,"column":250,"offset":1061},"indent":[]}},{"type":"inlineCode","value":"N","position":{"start":{"line":18,"column":250,"offset":1061},"end":{"line":18,"column":253,"offset":1064},"indent":[]}},{"type":"text","value":" represents the name of the kind of pizza. All we will do in this example is create a Hawaiin pizza and a Meat Lovers pizza, so the concrete builders will be called ","position":{"start":{"line":18,"column":253,"offset":1064},"end":{"line":18,"column":418,"offset":1229},"indent":[]}},{"type":"inlineCode","value":"HawaiinConcreteBuilder","position":{"start":{"line":18,"column":418,"offset":1229},"end":{"line":18,"column":442,"offset":1253},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":18,"column":442,"offset":1253},"end":{"line":18,"column":447,"offset":1258},"indent":[]}},{"type":"inlineCode","value":"MeatLoversConcreteBuilder","position":{"start":{"line":18,"column":447,"offset":1258},"end":{"line":18,"column":474,"offset":1285},"indent":[]}},{"type":"text","value":" in this example.","position":{"start":{"line":18,"column":474,"offset":1285},"end":{"line":18,"column":491,"offset":1302},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":814},"end":{"line":18,"column":491,"offset":1302},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":812},"end":{"line":18,"column":491,"offset":1302},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":19,"column":3,"offset":1305},"end":{"line":19,"column":5,"offset":1307},"indent":[]}},{"type":"inlineCode","value":"Director","position":{"start":{"line":19,"column":5,"offset":1307},"end":{"line":19,"column":15,"offset":1317},"indent":[]}},{"type":"text","value":" that constructs the object using the ","position":{"start":{"line":19,"column":15,"offset":1317},"end":{"line":19,"column":53,"offset":1355},"indent":[]}},{"type":"inlineCode","value":"Builder","position":{"start":{"line":19,"column":53,"offset":1355},"end":{"line":19,"column":62,"offset":1364},"indent":[]}},{"type":"text","value":" interface. In this case, we will have the ","position":{"start":{"line":19,"column":62,"offset":1364},"end":{"line":19,"column":105,"offset":1407},"indent":[]}},{"type":"inlineCode","value":"ChefDirector","position":{"start":{"line":19,"column":105,"offset":1407},"end":{"line":19,"column":119,"offset":1421},"indent":[]}},{"type":"text","value":" class fulfil this role. The ","position":{"start":{"line":19,"column":119,"offset":1421},"end":{"line":19,"column":148,"offset":1450},"indent":[]}},{"type":"inlineCode","value":"ChefDirector","position":{"start":{"line":19,"column":148,"offset":1450},"end":{"line":19,"column":162,"offset":1464},"indent":[]}},{"type":"text","value":" will create a chef that is used to create the different types of pizza.","position":{"start":{"line":19,"column":162,"offset":1464},"end":{"line":19,"column":234,"offset":1536},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":1305},"end":{"line":19,"column":234,"offset":1536},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1303},"end":{"line":19,"column":234,"offset":1536},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":455},"end":{"line":19,"column":234,"offset":1536},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Builder Design Pattern In Action","position":{"start":{"line":21,"column":4,"offset":1541},"end":{"line":21,"column":36,"offset":1573},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1538},"end":{"line":21,"column":36,"offset":1573},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First, let's build our ","position":{"start":{"line":23,"column":1,"offset":1575},"end":{"line":23,"column":24,"offset":1598},"indent":[]}},{"type":"inlineCode","value":"PizzaProduct","position":{"start":{"line":23,"column":24,"offset":1598},"end":{"line":23,"column":38,"offset":1612},"indent":[]}},{"type":"text","value":". To do so, we will create an interface to ensure our product will include all the pizza essentials and then implement that to a ","position":{"start":{"line":23,"column":38,"offset":1612},"end":{"line":23,"column":167,"offset":1741},"indent":[]}},{"type":"inlineCode","value":"PizzaProduct","position":{"start":{"line":23,"column":167,"offset":1741},"end":{"line":23,"column":181,"offset":1755},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":23,"column":181,"offset":1755},"end":{"line":23,"column":182,"offset":1756},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1575},"end":{"line":23,"column":182,"offset":1756},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":25,"column":1,"offset":1758},"end":{"line":25,"column":5,"offset":1762},"indent":[]}},{"type":"inlineCode","value":"PizzaProduct","position":{"start":{"line":25,"column":5,"offset":1762},"end":{"line":25,"column":19,"offset":1776},"indent":[]}},{"type":"text","value":" itself will create the pizza instances, but will ultimately be abstracted away and flexibly built thanks to our ","position":{"start":{"line":25,"column":19,"offset":1776},"end":{"line":25,"column":132,"offset":1889},"indent":[]}},{"type":"inlineCode","value":"Director","position":{"start":{"line":25,"column":132,"offset":1889},"end":{"line":25,"column":142,"offset":1899},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":25,"column":142,"offset":1899},"end":{"line":25,"column":147,"offset":1904},"indent":[]}},{"type":"inlineCode","value":"Concrete Builders","position":{"start":{"line":25,"column":147,"offset":1904},"end":{"line":25,"column":166,"offset":1923},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":25,"column":166,"offset":1923},"end":{"line":25,"column":167,"offset":1924},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1758},"end":{"line":25,"column":167,"offset":1924},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// each pizza requires a base, sauce and topping property\n// also ensure a taste method is implemented\ninterface Pizza {\n    base: string;\n    sauce: string;\n    topping: string;\n    taste(): void;\n}\n\nclass PizzaProduct implements Pizza {\n    private _base: string;\n    private _topping: string;\n    private _sauce: string;\n\n    constructor() {\n        // initialise all values to empty strings\n        // our direct will use the concrete builders\n        // to set all these values durin\n        this._base = '';\n        this._topping = '';\n        this._sauce = '';\n    }\n\n    set base(baseValue: string) {\n        this._base = baseValue;\n    }\n\n    set topping(toppingValue: string) {\n        this._topping = toppingValue;\n    }\n\n    set sauce(sauceValue: string) {\n        this._sauce = sauceValue;\n    }\n\n    taste(): void {\n        console.log(`Base: ${this._base}, Topping: ${this._topping}, Sauce: ${this._sauce}.`);\n    }\n}","position":{"start":{"line":27,"column":1,"offset":1926},"end":{"line":67,"column":4,"offset":2876},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Writing Our Abstract Builder","position":{"start":{"line":69,"column":4,"offset":2881},"end":{"line":69,"column":32,"offset":2909},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":2878},"end":{"line":69,"column":32,"offset":2909},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next, we need to define our ","position":{"start":{"line":71,"column":1,"offset":2911},"end":{"line":71,"column":29,"offset":2939},"indent":[]}},{"type":"inlineCode","value":"PizzaBuilder","position":{"start":{"line":71,"column":29,"offset":2939},"end":{"line":71,"column":43,"offset":2953},"indent":[]}},{"type":"text","value":". This builder will be an abstract class that defines the required methods and set the base for our concrete builders to extend from.","position":{"start":{"line":71,"column":43,"offset":2953},"end":{"line":71,"column":176,"offset":3086},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2911},"end":{"line":71,"column":176,"offset":3086},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note: an abstract class cannot have an instance created. This is incredibly important. The instances created in the program will be done by our concrete builders later.","position":{"start":{"line":73,"column":1,"offset":3088},"end":{"line":73,"column":169,"offset":3256},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":3088},"end":{"line":73,"column":169,"offset":3256},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"abstract class PizzaBuilder {\n    // this relation to the PizzaProduct is what abstracts the PizzaProduct\n    // from the code run from the program\n    protected _pizza: PizzaProduct;\n\n    // we set these functions to abstract because we want\n    // the concrete builders that extend the PizzaBuilder\n    // to implement these functions\n    abstract buildBase(): void;\n    abstract buildSauce(): void;\n    abstract buildTopping(): void;\n\n    constructor() {\n        // added for the sake of simplicty instead of a makePizza function\n        // we will just instantiate an \"empty\" pizza when a builder\n        // instance is initialised\n        this._pizza = new PizzaProduct();\n    }\n\n    get pizza() {\n        return this._pizza;\n    }\n}","position":{"start":{"line":75,"column":1,"offset":3258},"end":{"line":99,"column":4,"offset":4014},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Writing Our Concrete Builders","position":{"start":{"line":101,"column":4,"offset":4019},"end":{"line":101,"column":33,"offset":4048},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":4016},"end":{"line":101,"column":33,"offset":4048},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that the abstract builder has been created, we now create the ","position":{"start":{"line":103,"column":1,"offset":4050},"end":{"line":103,"column":67,"offset":4116},"indent":[]}},{"type":"inlineCode","value":"concrete builders","position":{"start":{"line":103,"column":67,"offset":4116},"end":{"line":103,"column":86,"offset":4135},"indent":[]}},{"type":"text","value":". Remember, the role of each ","position":{"start":{"line":103,"column":86,"offset":4135},"end":{"line":103,"column":115,"offset":4164},"indent":[]}},{"type":"inlineCode","value":"concrete builder","position":{"start":{"line":103,"column":115,"offset":4164},"end":{"line":103,"column":133,"offset":4182},"indent":[]}},{"type":"text","value":" is the build out different versions of our ","position":{"start":{"line":103,"column":133,"offset":4182},"end":{"line":103,"column":177,"offset":4226},"indent":[]}},{"type":"inlineCode","value":"PizzaProduct","position":{"start":{"line":103,"column":177,"offset":4226},"end":{"line":103,"column":191,"offset":4240},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":103,"column":191,"offset":4240},"end":{"line":103,"column":192,"offset":4241},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":4050},"end":{"line":103,"column":192,"offset":4241},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note: since we are extended from the abstract class, we do not need to override the constructor method. The base constructor method provided in the super class ","position":{"start":{"line":105,"column":1,"offset":4243},"end":{"line":105,"column":161,"offset":4403},"indent":[]}},{"type":"inlineCode","value":"PizzaBuilder","position":{"start":{"line":105,"column":161,"offset":4403},"end":{"line":105,"column":175,"offset":4417},"indent":[]}},{"type":"text","value":" will handle our instantiation of the private ","position":{"start":{"line":105,"column":175,"offset":4417},"end":{"line":105,"column":221,"offset":4463},"indent":[]}},{"type":"inlineCode","value":"_pizza","position":{"start":{"line":105,"column":221,"offset":4463},"end":{"line":105,"column":229,"offset":4471},"indent":[]}},{"type":"text","value":" property as well as the getter, so the code for these concrete builders should be straight forward implementations of the ","position":{"start":{"line":105,"column":229,"offset":4471},"end":{"line":105,"column":352,"offset":4594},"indent":[]}},{"type":"inlineCode","value":"abstract classes","position":{"start":{"line":105,"column":352,"offset":4594},"end":{"line":105,"column":370,"offset":4612},"indent":[]}},{"type":"text","value":" required.","position":{"start":{"line":105,"column":370,"offset":4612},"end":{"line":105,"column":380,"offset":4622},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":4243},"end":{"line":105,"column":380,"offset":4622},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"class HawaiinConcreteBuilder extends PizzaBuilder {\n  buildBase(): void {\n    this._pizza.base = 'thick crust';\n  }\n\n  buildSauce(): void {\n    this._pizza.sauce = 'tomato';\n  }\n\n  buildTopping(): void {\n    this._pizza.topping = 'ham and pineapple';\n  }\n}\n\nclass MeatLoversConcreteBuilder extends PizzaBuilder {\n  buildBase(): void {\n    this._pizza.base = 'thin crust';\n  }\n\n  buildSauce(): void {\n    this._pizza.sauce = 'tomato';\n  }\n\n  buildTopping(): void {\n    this._pizza.topping = 'a lot of meat';\n  }\n}","position":{"start":{"line":107,"column":1,"offset":4624},"end":{"line":135,"column":4,"offset":5154},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Writing Our Director","position":{"start":{"line":137,"column":4,"offset":5159},"end":{"line":137,"column":24,"offset":5179},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":5156},"end":{"line":137,"column":24,"offset":5179},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, we can build our Chef Director. The role of the director is to take any builder that conforms to our abstract builder class ","position":{"start":{"line":139,"column":1,"offset":5181},"end":{"line":139,"column":134,"offset":5314},"indent":[]}},{"type":"inlineCode","value":"PizzaBuilder","position":{"start":{"line":139,"column":134,"offset":5314},"end":{"line":139,"column":148,"offset":5328},"indent":[]}},{"type":"text","value":" and make the pizzas and taste the pizzas.","position":{"start":{"line":139,"column":148,"offset":5328},"end":{"line":139,"column":190,"offset":5370},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":5181},"end":{"line":139,"column":190,"offset":5370},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"class ChefDirector {\n    private pizzaBuilder?: PizzaBuilder;\n\n    makePizza(pizzaBuilder: PizzaBuilder): void {\n        this.pizzaBuilder = pizzaBuilder;\n        this.pizzaBuilder.buildBase();\n        this.pizzaBuilder.buildSauce();\n        this.pizzaBuilder.buildTopping();\n    }\n\n    tastePizza(): void {\n        try {\n            if (!this.pizzaBuilder) {\n                throw new Error('No pizza builder property defined');\n            }\n\n            this.pizzaBuilder.pizza.taste();\n        } catch(e) {\n            console.error(e);\n        }\n    }\n}","position":{"start":{"line":141,"column":1,"offset":5372},"end":{"line":164,"column":4,"offset":5948},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Putting It All Together","position":{"start":{"line":166,"column":4,"offset":5953},"end":{"line":166,"column":27,"offset":5976},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":5950},"end":{"line":166,"column":27,"offset":5976},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that all our required code has been written, we can happily write a quite script to test that an instance of our ","position":{"start":{"line":168,"column":1,"offset":5978},"end":{"line":168,"column":118,"offset":6095},"indent":[]}},{"type":"inlineCode","value":"ChefDirector","position":{"start":{"line":168,"column":118,"offset":6095},"end":{"line":168,"column":132,"offset":6109},"indent":[]}},{"type":"text","value":" can make both a \"Hawaiin\" and \"Meat Lovers\" pizza!","position":{"start":{"line":168,"column":132,"offset":6109},"end":{"line":168,"column":183,"offset":6160},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":5978},"end":{"line":168,"column":183,"offset":6160},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// the director will be used to create and taste pizzas\nconst chefDirector = new ChefDirector();\n\n// the concrete builders will now be used to define\n// what type of pizza the chef will make and taste\nconst hawaiinBuilder = new HawaiinConcreteBuilder();\nconst meatLoversBuilder = new MeatLoversConcreteBuilder();\n\n// First, let's test our Hawaiin Pizza\nchefDirector.makePizza(hawaiinBuilder);\nchefDirector.tastePizza();\n\n// Secondly, let's test our Meat Lovers\nchefDirector.makePizza(meatLoversBuilder);\nchefDirector.tastePizza();","position":{"start":{"line":170,"column":1,"offset":6162},"end":{"line":186,"column":4,"offset":6710},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we now check our console, we can see our results:","position":{"start":{"line":188,"column":1,"offset":6712},"end":{"line":188,"column":53,"offset":6764},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":6712},"end":{"line":188,"column":53,"offset":6764},"indent":[]}},{"type":"code","lang":"md","meta":null,"value":"Base: thick crust, Topping: ham and pineapple, Sauce: tomato.\nBase: thin crust, Topping: a lot of meat, Sauce: tomato.","position":{"start":{"line":190,"column":1,"offset":6766},"end":{"line":193,"column":4,"offset":6894},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":196,"column":1,"offset":6897},"end":{"line":196,"column":31,"offset":6927},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":196,"column":31,"offset":6927}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"builder-pattern\"\n    }}>{`Builder Pattern`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Builder Pattern`}</inlineCode>{` enables us to create different instance representations using the same construction code.`}</p>\n    <p>{`In this scenario, we will use the classic trope of building a pizza to illustate how to implement this pattern.`}</p>\n    <p>{`The pattern works by using the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`Product`}</inlineCode>{` which represents the complex object under construction. In this case, the product is the `}<inlineCode parentName=\"li\">{`Pizza`}</inlineCode>{` class which denotes our pizza instances. We wil name this our `}<inlineCode parentName=\"li\">{`PizzaProduct`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`Builder`}</inlineCode>{` that specifies the abstract class for creating the `}<inlineCode parentName=\"li\">{`Product`}</inlineCode>{` parts (in our case the `}<inlineCode parentName=\"li\">{`Pizza`}</inlineCode>{`). In this case, it will be our abstract class `}<inlineCode parentName=\"li\">{`PizzaBuilder`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Concrete Builders`}</inlineCode>{` where each builder is responsible to instantiate different representations of the product. In this case, the concrete builders will be our classes that construct different types of pizza denoted as `}<inlineCode parentName=\"li\">{`NConcreteBuilder`}</inlineCode>{` where the `}<inlineCode parentName=\"li\">{`N`}</inlineCode>{` represents the name of the kind of pizza. All we will do in this example is create a Hawaiin pizza and a Meat Lovers pizza, so the concrete builders will be called `}<inlineCode parentName=\"li\">{`HawaiinConcreteBuilder`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`MeatLoversConcreteBuilder`}</inlineCode>{` in this example.`}</li>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`Director`}</inlineCode>{` that constructs the object using the `}<inlineCode parentName=\"li\">{`Builder`}</inlineCode>{` interface. In this case, we will have the `}<inlineCode parentName=\"li\">{`ChefDirector`}</inlineCode>{` class fulfil this role. The `}<inlineCode parentName=\"li\">{`ChefDirector`}</inlineCode>{` will create a chef that is used to create the different types of pizza.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"builder-design-pattern-in-action\"\n    }}>{`Builder Design Pattern In Action`}</h2>\n    <p>{`First, let's build our `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{`. To do so, we will create an interface to ensure our product will include all the pizza essentials and then implement that to a `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{` itself will create the pizza instances, but will ultimately be abstracted away and flexibly built thanks to our `}<inlineCode parentName=\"p\">{`Director`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Concrete Builders`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// each pizza requires a base, sauce and topping property\n// also ensure a taste method is implemented\ninterface Pizza {\n    base: string;\n    sauce: string;\n    topping: string;\n    taste(): void;\n}\n\nclass PizzaProduct implements Pizza {\n    private _base: string;\n    private _topping: string;\n    private _sauce: string;\n\n    constructor() {\n        // initialise all values to empty strings\n        // our direct will use the concrete builders\n        // to set all these values durin\n        this._base = '';\n        this._topping = '';\n        this._sauce = '';\n    }\n\n    set base(baseValue: string) {\n        this._base = baseValue;\n    }\n\n    set topping(toppingValue: string) {\n        this._topping = toppingValue;\n    }\n\n    set sauce(sauceValue: string) {\n        this._sauce = sauceValue;\n    }\n\n    taste(): void {\n        console.log(\\`Base: \\${this._base}, Topping: \\${this._topping}, Sauce: \\${this._sauce}.\\`);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-our-abstract-builder\"\n    }}>{`Writing Our Abstract Builder`}</h2>\n    <p>{`Next, we need to define our `}<inlineCode parentName=\"p\">{`PizzaBuilder`}</inlineCode>{`. This builder will be an abstract class that defines the required methods and set the base for our concrete builders to extend from.`}</p>\n    <p>{`Note: an abstract class cannot have an instance created. This is incredibly important. The instances created in the program will be done by our concrete builders later.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`abstract class PizzaBuilder {\n    // this relation to the PizzaProduct is what abstracts the PizzaProduct\n    // from the code run from the program\n    protected _pizza: PizzaProduct;\n\n    // we set these functions to abstract because we want\n    // the concrete builders that extend the PizzaBuilder\n    // to implement these functions\n    abstract buildBase(): void;\n    abstract buildSauce(): void;\n    abstract buildTopping(): void;\n\n    constructor() {\n        // added for the sake of simplicty instead of a makePizza function\n        // we will just instantiate an \"empty\" pizza when a builder\n        // instance is initialised\n        this._pizza = new PizzaProduct();\n    }\n\n    get pizza() {\n        return this._pizza;\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-our-concrete-builders\"\n    }}>{`Writing Our Concrete Builders`}</h2>\n    <p>{`Now that the abstract builder has been created, we now create the `}<inlineCode parentName=\"p\">{`concrete builders`}</inlineCode>{`. Remember, the role of each `}<inlineCode parentName=\"p\">{`concrete builder`}</inlineCode>{` is the build out different versions of our `}<inlineCode parentName=\"p\">{`PizzaProduct`}</inlineCode>{`.`}</p>\n    <p>{`Note: since we are extended from the abstract class, we do not need to override the constructor method. The base constructor method provided in the super class `}<inlineCode parentName=\"p\">{`PizzaBuilder`}</inlineCode>{` will handle our instantiation of the private `}<inlineCode parentName=\"p\">{`_pizza`}</inlineCode>{` property as well as the getter, so the code for these concrete builders should be straight forward implementations of the `}<inlineCode parentName=\"p\">{`abstract classes`}</inlineCode>{` required.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class HawaiinConcreteBuilder extends PizzaBuilder {\n  buildBase(): void {\n    this._pizza.base = 'thick crust';\n  }\n\n  buildSauce(): void {\n    this._pizza.sauce = 'tomato';\n  }\n\n  buildTopping(): void {\n    this._pizza.topping = 'ham and pineapple';\n  }\n}\n\nclass MeatLoversConcreteBuilder extends PizzaBuilder {\n  buildBase(): void {\n    this._pizza.base = 'thin crust';\n  }\n\n  buildSauce(): void {\n    this._pizza.sauce = 'tomato';\n  }\n\n  buildTopping(): void {\n    this._pizza.topping = 'a lot of meat';\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"writing-our-director\"\n    }}>{`Writing Our Director`}</h2>\n    <p>{`Finally, we can build our Chef Director. The role of the director is to take any builder that conforms to our abstract builder class `}<inlineCode parentName=\"p\">{`PizzaBuilder`}</inlineCode>{` and make the pizzas and taste the pizzas.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class ChefDirector {\n    private pizzaBuilder?: PizzaBuilder;\n\n    makePizza(pizzaBuilder: PizzaBuilder): void {\n        this.pizzaBuilder = pizzaBuilder;\n        this.pizzaBuilder.buildBase();\n        this.pizzaBuilder.buildSauce();\n        this.pizzaBuilder.buildTopping();\n    }\n\n    tastePizza(): void {\n        try {\n            if (!this.pizzaBuilder) {\n                throw new Error('No pizza builder property defined');\n            }\n\n            this.pizzaBuilder.pizza.taste();\n        } catch(e) {\n            console.error(e);\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"putting-it-all-together\"\n    }}>{`Putting It All Together`}</h2>\n    <p>{`Now that all our required code has been written, we can happily write a quite script to test that an instance of our `}<inlineCode parentName=\"p\">{`ChefDirector`}</inlineCode>{` can make both a \"Hawaiin\" and \"Meat Lovers\" pizza!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// the director will be used to create and taste pizzas\nconst chefDirector = new ChefDirector();\n\n// the concrete builders will now be used to define\n// what type of pizza the chef will make and taste\nconst hawaiinBuilder = new HawaiinConcreteBuilder();\nconst meatLoversBuilder = new MeatLoversConcreteBuilder();\n\n// First, let's test our Hawaiin Pizza\nchefDirector.makePizza(hawaiinBuilder);\nchefDirector.tastePizza();\n\n// Secondly, let's test our Meat Lovers\nchefDirector.makePizza(meatLoversBuilder);\nchefDirector.tastePizza();\n`}</code></pre>\n    <p>{`If we now check our console, we can see our results:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`Base: thick crust, Topping: ham and pineapple, Sauce: tomato.\nBase: thin crust, Topping: a lot of meat, Sauce: tomato.\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}