{"expireTime":9007200867335966000,"key":"gatsby-plugin-mdx-entire-payload-4dafc70120ef015480a7c004bd1c655e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Debugging In Elixir","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":22,"offset":188},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":22,"offset":188},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"tl;dr","position":{"start":{"line":10,"column":4,"offset":193},"end":{"line":10,"column":9,"offset":198},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":190},"end":{"line":10,"column":9,"offset":198},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use ","position":{"start":{"line":12,"column":1,"offset":200},"end":{"line":12,"column":5,"offset":204},"indent":[]}},{"type":"inlineCode","value":"IO.inspect","position":{"start":{"line":12,"column":5,"offset":204},"end":{"line":12,"column":17,"offset":216},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":12,"column":17,"offset":216},"end":{"line":12,"column":21,"offset":220},"indent":[]}},{"type":"inlineCode","value":"IEx.pry","position":{"start":{"line":12,"column":21,"offset":220},"end":{"line":12,"column":30,"offset":229},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":12,"column":30,"offset":229},"end":{"line":12,"column":31,"offset":230},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":200},"end":{"line":12,"column":31,"offset":230},"indent":[]}},{"type":"code","lang":"elixir","meta":null,"value":"# inspect\n[1, 2, 3]\n|> IO.inspect(label: \"before\")\n|> Enum.map(&(&1 * 2))\n|> IO.inspect(label: \"after\")\n|> Enum.sum\n\n# pry\ndef some_fun(a, b, c) do\n  require IEx; IEx.pry\n  ...\nend","position":{"start":{"line":14,"column":1,"offset":232},"end":{"line":27,"column":4,"offset":426},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Other Resources","position":{"start":{"line":29,"column":4,"offset":431},"end":{"line":29,"column":19,"offset":446},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":428},"end":{"line":29,"column":19,"offset":446},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Other resources can be found at ","position":{"start":{"line":31,"column":1,"offset":448},"end":{"line":31,"column":33,"offset":480},"indent":[]}},{"type":"link","title":null,"url":"https://elixir-lang.org/getting-started/debugging.html","children":[{"type":"text","value":"https://elixir-lang.org/getting-started/debugging.html","position":{"start":{"line":31,"column":33,"offset":480},"end":{"line":31,"column":87,"offset":534},"indent":[]}}],"position":{"start":{"line":31,"column":33,"offset":480},"end":{"line":31,"column":87,"offset":534},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":448},"end":{"line":31,"column":87,"offset":534},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"IO.Inspect/2","position":{"start":{"line":33,"column":4,"offset":539},"end":{"line":33,"column":16,"offset":551},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":536},"end":{"line":33,"column":16,"offset":551},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"What makes ","position":{"start":{"line":35,"column":1,"offset":553},"end":{"line":35,"column":12,"offset":564},"indent":[]}},{"type":"inlineCode","value":"IO.inspect(item, opts \\\\ [])","position":{"start":{"line":35,"column":12,"offset":564},"end":{"line":35,"column":42,"offset":594},"indent":[]}},{"type":"text","value":" really useful in debugging is that it returns the item argument passed to it without affecting the behavior of the original code.","position":{"start":{"line":35,"column":42,"offset":594},"end":{"line":35,"column":172,"offset":724},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":553},"end":{"line":35,"column":172,"offset":724},"indent":[]}},{"type":"code","lang":"elixir","meta":null,"value":"(1..10)\n|> IO.inspect\n|> Enum.map(fn x -> x * 2 end)\n|> IO.inspect\n|> Enum.sum\n|> IO.inspect\n\n[1, 2, 3]\n|> IO.inspect(label: \"before\")\n|> Enum.map(&(&1 * 2))\n|> IO.inspect(label: \"after\")\n|> Enum.sum\n\n# 3\ndef some_fun(a, b, c) do\n  IO.inspect binding()\n  ...\nend","position":{"start":{"line":37,"column":1,"offset":726},"end":{"line":56,"column":4,"offset":1002},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Outputs:","position":{"start":{"line":58,"column":1,"offset":1004},"end":{"line":58,"column":9,"offset":1012},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1004},"end":{"line":58,"column":9,"offset":1012},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"# 1\n1..10\n[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n110\n\n# 2\nbefore: [1, 2, 3]\nafter: [2, 4, 6]\n\n# 3\n[a: :foo, b: \"bar\", c: :baz]","position":{"start":{"line":60,"column":1,"offset":1014},"end":{"line":72,"column":4,"offset":1151},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"IEx.pry/0","position":{"start":{"line":74,"column":4,"offset":1156},"end":{"line":74,"column":13,"offset":1165},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1153},"end":{"line":74,"column":13,"offset":1165},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Similar to Ruby's ","position":{"start":{"line":76,"column":1,"offset":1167},"end":{"line":76,"column":19,"offset":1185},"indent":[]}},{"type":"inlineCode","value":"binding.pry","position":{"start":{"line":76,"column":19,"offset":1185},"end":{"line":76,"column":32,"offset":1198},"indent":[]}},{"type":"text","value":". Will open an interactive shell.","position":{"start":{"line":76,"column":32,"offset":1198},"end":{"line":76,"column":65,"offset":1231},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":1167},"end":{"line":76,"column":65,"offset":1231},"indent":[]}},{"type":"code","lang":"elixir","meta":null,"value":"def some_fun(a, b, c) do\n  require IEx; IEx.pry\n  ...\nend","position":{"start":{"line":78,"column":1,"offset":1233},"end":{"line":83,"column":4,"offset":1304},"indent":[1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":86,"column":1,"offset":1307},"end":{"line":86,"column":31,"offset":1337},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":86,"column":31,"offset":1337}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"debugging-in-elixir\"\n    }}>{`Debugging In Elixir`}</h1>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`IO.inspect`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`IEx.pry`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`# inspect\n[1, 2, 3]\n|> IO.inspect(label: \"before\")\n|> Enum.map(&(&1 * 2))\n|> IO.inspect(label: \"after\")\n|> Enum.sum\n\n# pry\ndef some_fun(a, b, c) do\n  require IEx; IEx.pry\n  ...\nend\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"other-resources\"\n    }}>{`Other Resources`}</h2>\n    <p>{`Other resources can be found at `}<a parentName=\"p\" {...{\n        \"href\": \"https://elixir-lang.org/getting-started/debugging.html\"\n      }}>{`https://elixir-lang.org/getting-started/debugging.html`}</a></p>\n    <h2 {...{\n      \"id\": \"ioinspect2\"\n    }}>{`IO.Inspect/2`}</h2>\n    <p>{`What makes `}<inlineCode parentName=\"p\">{`IO.inspect(item, opts \\\\\\\\ [])`}</inlineCode>{` really useful in debugging is that it returns the item argument passed to it without affecting the behavior of the original code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`(1..10)\n|> IO.inspect\n|> Enum.map(fn x -> x * 2 end)\n|> IO.inspect\n|> Enum.sum\n|> IO.inspect\n\n[1, 2, 3]\n|> IO.inspect(label: \"before\")\n|> Enum.map(&(&1 * 2))\n|> IO.inspect(label: \"after\")\n|> Enum.sum\n\n# 3\ndef some_fun(a, b, c) do\n  IO.inspect binding()\n  ...\nend\n`}</code></pre>\n    <p>{`Outputs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# 1\n1..10\n[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n110\n\n# 2\nbefore: [1, 2, 3]\nafter: [2, 4, 6]\n\n# 3\n[a: :foo, b: \"bar\", c: :baz]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iexpry0\"\n    }}>{`IEx.pry/0`}</h2>\n    <p>{`Similar to Ruby's `}<inlineCode parentName=\"p\">{`binding.pry`}</inlineCode>{`. Will open an interactive shell.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elixir\"\n      }}>{`def some_fun(a, b, c) do\n  require IEx; IEx.pry\n  ...\nend\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}