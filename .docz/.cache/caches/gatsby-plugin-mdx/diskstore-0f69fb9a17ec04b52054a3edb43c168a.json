{"expireTime":9007200852878330000,"key":"gatsby-plugin-mdx-entire-payload-6835837dcd3358560d6a506f1485641e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Lambda Edge CDK","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":18,"offset":184},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":18,"offset":184},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// Origin request handler.\nconst myOriginRequestHandler = new lambdaNodejs.NodejsFunction(\n  this,\n  'OriginRequestHandler',\n  {\n    entry: 'src/lambda/myOriginRequestHandler.ts',\n    handler: 'myOriginRequestHandler',\n    runtime: lambda.Runtime.NODEJS_10_X,\n  },\n);\n\n// A numbered version to give to cloudfront\nconst myOriginRequestHandlerVersion = new lambda.Version(\n  this,\n  'OriginRequestHandlerVersion',\n  {\n    lambda: myOriginRequestHandler,\n  },\n);\n\n// A bucket to serve content from\nconst myBucket = new s3.Bucket(this, 'OriginBucket');\n\n// Origin access identity for cloudfront to access the bucket\nconst myCdnOai = new cloudfront.OriginAccessIdentity(this, 'CdnOai');\nmyBucket.grantRead(myCdnOai);\n\n// The CDN web distribution\nnew cloudfront.CloudFrontWebDistribution(this, 'Cdn', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: myBucket,\n        originAccessIdentity: myCdnOai,\n      },\n      behaviors: [\n        {\n          isDefaultBehavior: true,\n          lambdaFunctionAssociations: [\n            {\n              eventType: cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,\n              lambdaFunction: myOriginRequestHandlerVersion,\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});","position":{"start":{"line":10,"column":1,"offset":186},"end":{"line":60,"column":4,"offset":1439},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I believe you need to mix it in with this to get things going:","position":{"start":{"line":62,"column":1,"offset":1441},"end":{"line":62,"column":63,"offset":1503},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1441},"end":{"line":62,"column":63,"offset":1503},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"new cdk.CfnOutput(this, 'DistributionId', {\n  value: distribution.distributionId,\n});\n\n// Route53 alias record for the CloudFront distribution\nnew route53.ARecord(this, 'SiteAliasRecord', {\n  recordName: siteDomain,\n  target: route53.RecordTarget.fromAlias(\n    new targets.CloudFrontTarget(distribution),\n  ),\n  zone,\n});","position":{"start":{"line":64,"column":1,"offset":1505},"end":{"line":77,"column":4,"offset":1837},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":79,"column":4,"offset":1842},"end":{"line":79,"column":13,"offset":1851},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":1839},"end":{"line":79,"column":13,"offset":1851},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/aws/aws-cdk/issues/6259","children":[{"type":"text","value":"AWS Issue - Docs on Lambda@edge","position":{"start":{"line":81,"column":5,"offset":1857},"end":{"line":81,"column":36,"offset":1888},"indent":[]}}],"position":{"start":{"line":81,"column":4,"offset":1856},"end":{"line":81,"column":81,"offset":1933},"indent":[]}}],"position":{"start":{"line":81,"column":4,"offset":1856},"end":{"line":81,"column":81,"offset":1933},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":1853},"end":{"line":81,"column":81,"offset":1933},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":1853},"end":{"line":81,"column":81,"offset":1933},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":84,"column":1,"offset":1936},"end":{"line":84,"column":31,"offset":1966},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":84,"column":31,"offset":1966}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lambda-edge-cdk\"\n    }}>{`Lambda Edge CDK`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// Origin request handler.\nconst myOriginRequestHandler = new lambdaNodejs.NodejsFunction(\n  this,\n  'OriginRequestHandler',\n  {\n    entry: 'src/lambda/myOriginRequestHandler.ts',\n    handler: 'myOriginRequestHandler',\n    runtime: lambda.Runtime.NODEJS_10_X,\n  },\n);\n\n// A numbered version to give to cloudfront\nconst myOriginRequestHandlerVersion = new lambda.Version(\n  this,\n  'OriginRequestHandlerVersion',\n  {\n    lambda: myOriginRequestHandler,\n  },\n);\n\n// A bucket to serve content from\nconst myBucket = new s3.Bucket(this, 'OriginBucket');\n\n// Origin access identity for cloudfront to access the bucket\nconst myCdnOai = new cloudfront.OriginAccessIdentity(this, 'CdnOai');\nmyBucket.grantRead(myCdnOai);\n\n// The CDN web distribution\nnew cloudfront.CloudFrontWebDistribution(this, 'Cdn', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: myBucket,\n        originAccessIdentity: myCdnOai,\n      },\n      behaviors: [\n        {\n          isDefaultBehavior: true,\n          lambdaFunctionAssociations: [\n            {\n              eventType: cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,\n              lambdaFunction: myOriginRequestHandlerVersion,\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n`}</code></pre>\n    <p>{`I believe you need to mix it in with this to get things going:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`new cdk.CfnOutput(this, 'DistributionId', {\n  value: distribution.distributionId,\n});\n\n// Route53 alias record for the CloudFront distribution\nnew route53.ARecord(this, 'SiteAliasRecord', {\n  recordName: siteDomain,\n  target: route53.RecordTarget.fromAlias(\n    new targets.CloudFrontTarget(distribution),\n  ),\n  zone,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/aws/aws-cdk/issues/6259\"\n        }}>{`AWS Issue - Docs on Lambda@edge`}</a></li>\n    </ol>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}