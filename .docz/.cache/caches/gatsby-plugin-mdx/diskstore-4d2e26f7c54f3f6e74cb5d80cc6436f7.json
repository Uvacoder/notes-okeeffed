{"expireTime":9007200867335978000,"key":"gatsby-plugin-mdx-entire-payload-6aef5ac77c590b14b5e202c5a6cc9910-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Template Method","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":18,"offset":184},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":18,"offset":184},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The template method is a class behavioural pattern.","position":{"start":{"line":10,"column":1,"offset":186},"end":{"line":10,"column":52,"offset":237},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":186},"end":{"line":10,"column":52,"offset":237},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":12,"column":4,"offset":242},"end":{"line":12,"column":11,"offset":249},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":239},"end":{"line":12,"column":11,"offset":249},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"abstract class BaseClass {\n  public templateMethod(): void {\n    this.actionA();\n    this.actionB();\n  }\n\n  public actionA(): void {\n    throw new Error('should not be invoker by BaseClass');\n  }\n\n  public actionB(): void {\n    throw new Error('should not be invoker by BaseClass');\n  }\n}\n\nclass ConcreteAClass extends BaseClass {\n  actionA(): void {\n    console.log('A take actionA');\n  }\n\n  actionB(): void {\n    console.log('A take actionB');\n  }\n}\n\nclass ConcreteBClass extends BaseClass {\n  actionA(): void {\n    console.log('B take actionA');\n  }\n\n  actionB(): void {\n    console.log('B take actionB');\n  }\n}\n\n(function main() {\n  const a = new ConcreteAClass();\n  const b = new ConcreteBClass();\n\n  a.templateMethod();\n  b.templateMethod();\n})();","position":{"start":{"line":14,"column":1,"offset":251},"end":{"line":57,"column":4,"offset":1022},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":60,"column":1,"offset":1025},"end":{"line":60,"column":31,"offset":1055},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":60,"column":31,"offset":1055}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"template-method\"\n    }}>{`Template Method`}</h1>\n    <p>{`The template method is a class behavioural pattern.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`abstract class BaseClass {\n  public templateMethod(): void {\n    this.actionA();\n    this.actionB();\n  }\n\n  public actionA(): void {\n    throw new Error('should not be invoker by BaseClass');\n  }\n\n  public actionB(): void {\n    throw new Error('should not be invoker by BaseClass');\n  }\n}\n\nclass ConcreteAClass extends BaseClass {\n  actionA(): void {\n    console.log('A take actionA');\n  }\n\n  actionB(): void {\n    console.log('A take actionB');\n  }\n}\n\nclass ConcreteBClass extends BaseClass {\n  actionA(): void {\n    console.log('B take actionA');\n  }\n\n  actionB(): void {\n    console.log('B take actionB');\n  }\n}\n\n(function main() {\n  const a = new ConcreteAClass();\n  const b = new ConcreteBClass();\n\n  a.templateMethod();\n  b.templateMethod();\n})();\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}