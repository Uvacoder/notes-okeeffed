{"expireTime":9007200867335981000,"key":"gatsby-plugin-mdx-entire-payload-6c7196ddb88081affdce9e8e783db17e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Facade Pattern","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":17,"offset":183},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":17,"offset":183},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Facade Pattern is a ","position":{"start":{"line":10,"column":1,"offset":185},"end":{"line":10,"column":25,"offset":209},"indent":[]}},{"type":"inlineCode","value":"structural","position":{"start":{"line":10,"column":25,"offset":209},"end":{"line":10,"column":37,"offset":221},"indent":[]}},{"type":"text","value":" design pattern that is used to, according the the Gang Of Four book, \"Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.\"","position":{"start":{"line":10,"column":37,"offset":221},"end":{"line":10,"column":255,"offset":439},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":185},"end":{"line":10,"column":255,"offset":439},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":12,"column":4,"offset":444},"end":{"line":12,"column":11,"offset":451},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":441},"end":{"line":12,"column":11,"offset":451},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the example below, we will look at basic facade that takes the different operations required to start a running race of the basic phrase \"Get ready! Get set! Go!\" by breaking down each sentence into a phase.","position":{"start":{"line":14,"column":1,"offset":453},"end":{"line":14,"column":211,"offset":663},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":453},"end":{"line":14,"column":211,"offset":663},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Participants","position":{"start":{"line":16,"column":4,"offset":668},"end":{"line":16,"column":16,"offset":680},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":665},"end":{"line":16,"column":16,"offset":680},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Facade: (RunningRaceFacade)","position":{"start":{"line":18,"column":3,"offset":684},"end":{"line":18,"column":30,"offset":711},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":684},"end":{"line":18,"column":30,"offset":711},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"knows which subsystem classes are responsible for what operation.","position":{"start":{"line":19,"column":5,"offset":716},"end":{"line":19,"column":70,"offset":781},"indent":[]}}],"position":{"start":{"line":19,"column":5,"offset":716},"end":{"line":19,"column":70,"offset":781},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":714},"end":{"line":19,"column":70,"offset":781},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"delegates parts of a client request to the appropriate subsystem objects.","position":{"start":{"line":20,"column":5,"offset":786},"end":{"line":20,"column":78,"offset":859},"indent":[]}}],"position":{"start":{"line":20,"column":5,"offset":786},"end":{"line":20,"column":78,"offset":859},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":784},"end":{"line":20,"column":78,"offset":859},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":714},"end":{"line":20,"column":78,"offset":859},"indent":[3]}}],"position":{"start":{"line":18,"column":1,"offset":682},"end":{"line":20,"column":78,"offset":859},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Subsystem classes: (PhaseOneSystem, PhaseTwoSystem, PhaseThreeSystem)","position":{"start":{"line":21,"column":3,"offset":862},"end":{"line":21,"column":72,"offset":931},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":862},"end":{"line":21,"column":72,"offset":931},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"contains functionality for subsystem.","position":{"start":{"line":22,"column":5,"offset":936},"end":{"line":22,"column":42,"offset":973},"indent":[]}}],"position":{"start":{"line":22,"column":5,"offset":936},"end":{"line":22,"column":42,"offset":973},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":934},"end":{"line":22,"column":42,"offset":973},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"executes work delegated by Facade object.","position":{"start":{"line":23,"column":5,"offset":978},"end":{"line":23,"column":46,"offset":1019},"indent":[]}}],"position":{"start":{"line":23,"column":5,"offset":978},"end":{"line":23,"column":46,"offset":1019},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":976},"end":{"line":23,"column":46,"offset":1019},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"has no knowledge of facade or reference to it.","position":{"start":{"line":24,"column":5,"offset":1024},"end":{"line":24,"column":51,"offset":1070},"indent":[]}}],"position":{"start":{"line":24,"column":5,"offset":1024},"end":{"line":24,"column":51,"offset":1070},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":1022},"end":{"line":24,"column":51,"offset":1070},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":934},"end":{"line":24,"column":51,"offset":1070},"indent":[3,3]}}],"position":{"start":{"line":21,"column":1,"offset":860},"end":{"line":24,"column":51,"offset":1070},"indent":[1,1,1]}}],"position":{"start":{"line":18,"column":1,"offset":682},"end":{"line":24,"column":51,"offset":1070},"indent":[1,1,1,1,1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"class PhaseOneSystem {\n  getReady() {\n    console.log('Get ready!');\n  }\n}\n\nclass PhaseTwoSystem {\n  getSet() {\n    console.log('Get set!');\n  }\n}\n\nclass PhaseThreeSystem {\n  go() {\n    console.log('Go!');\n  }\n}\n\nclass RunningRaceFacade {\n\n  private _phaseOne: PhaseOneSystem;\n  private _phaseTwo: PhaseTwoSystem;\n  private _phaseThree: PhaseThreeSystem;\n\n  constructor() {\n    this._phaseOne = new PhaseOneSystem();\n    this._phaseTwo = new PhaseTwoSystem();\n    this._phaseThree = new PhaseThreeSystem();\n  }\n\n  beginRace() {\n    this._phaseOne.getReady();\n    this._phaseTwo.getSet();\n    this._phaseThree.go();\n  }\n}\n\n(function main() {\n  const race = new RunningRaceFacade();\n  race.beginRace(); // logs out \"Get ready! Get Set! Go! on separate lines\n})();","position":{"start":{"line":26,"column":1,"offset":1072},"end":{"line":68,"column":4,"offset":1851},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":71,"column":1,"offset":1854},"end":{"line":71,"column":31,"offset":1884},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":71,"column":31,"offset":1884}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"facade-pattern\"\n    }}>{`Facade Pattern`}</h1>\n    <p>{`The Facade Pattern is a `}<inlineCode parentName=\"p\">{`structural`}</inlineCode>{` design pattern that is used to, according the the Gang Of Four book, \"Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.\"`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`In the example below, we will look at basic facade that takes the different operations required to start a running race of the basic phrase \"Get ready! Get set! Go!\" by breaking down each sentence into a phase.`}</p>\n    <h2 {...{\n      \"id\": \"participants\"\n    }}>{`Participants`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Facade: (RunningRaceFacade)`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`knows which subsystem classes are responsible for what operation.`}</li>\n          <li parentName=\"ul\">{`delegates parts of a client request to the appropriate subsystem objects.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Subsystem classes: (PhaseOneSystem, PhaseTwoSystem, PhaseThreeSystem)`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`contains functionality for subsystem.`}</li>\n          <li parentName=\"ul\">{`executes work delegated by Facade object.`}</li>\n          <li parentName=\"ul\">{`has no knowledge of facade or reference to it.`}</li>\n        </ul></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class PhaseOneSystem {\n  getReady() {\n    console.log('Get ready!');\n  }\n}\n\nclass PhaseTwoSystem {\n  getSet() {\n    console.log('Get set!');\n  }\n}\n\nclass PhaseThreeSystem {\n  go() {\n    console.log('Go!');\n  }\n}\n\nclass RunningRaceFacade {\n\n  private _phaseOne: PhaseOneSystem;\n  private _phaseTwo: PhaseTwoSystem;\n  private _phaseThree: PhaseThreeSystem;\n\n  constructor() {\n    this._phaseOne = new PhaseOneSystem();\n    this._phaseTwo = new PhaseTwoSystem();\n    this._phaseThree = new PhaseThreeSystem();\n  }\n\n  beginRace() {\n    this._phaseOne.getReady();\n    this._phaseTwo.getSet();\n    this._phaseThree.go();\n  }\n}\n\n(function main() {\n  const race = new RunningRaceFacade();\n  race.beginRace(); // logs out \"Get ready! Get Set! Go! on separate lines\n})();\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}