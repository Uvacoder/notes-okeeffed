{"expireTime":9007200867335907000,"key":"gatsby-plugin-mdx-entire-payload-eaa2930b0817be868a2ef0fa2acf18d5-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Working with dates","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":21,"offset":187},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":21,"offset":187},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":192},"end":{"line":10,"column":13,"offset":201},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":189},"end":{"line":10,"column":13,"offset":201},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://blog.coingecko.com/working-with-dates-and-times-in-rails-rspec-testing/","children":[{"type":"text","value":"RSpec working with dates and times","position":{"start":{"line":12,"column":5,"offset":207},"end":{"line":12,"column":39,"offset":241},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":206},"end":{"line":12,"column":121,"offset":323},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":206},"end":{"line":12,"column":121,"offset":323},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":203},"end":{"line":12,"column":121,"offset":323},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":203},"end":{"line":12,"column":121,"offset":323},"indent":[]}},{"type":"code","lang":"ruby","meta":null,"value":"let!(:item) { Item.create(:item, name: \"Bean\", expiration_date: Time.current) }\n\ndescribed \"#expired?\" do\n  it \"return false when item is yet to be expired\" do\n    travel_to(Time.current - 5.day) do\n      expect(item.expired?).to eq(false)\n    end\n  end\n  it \"return true when item is expired\" do\n    travel_to(Time.current + 5.day) do\n      expect(item.expired?).to eq(true)\n    end\n  end\nend","position":{"start":{"line":14,"column":1,"offset":325},"end":{"line":29,"column":4,"offset":730},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can also use a specific date:","position":{"start":{"line":31,"column":1,"offset":732},"end":{"line":31,"column":34,"offset":765},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":732},"end":{"line":31,"column":34,"offset":765},"indent":[]}},{"type":"code","lang":"ruby","meta":null,"value":"Time.current     # => Sat, 10 Nov 2010 00:00:00 EST -05:00\ntravel_to Time.zone.local(2020, 10, 1, 00, 00, 00)\nTime.current     # => Wed, 1 Oct 2020 00:00:00 EST -05:00","position":{"start":{"line":33,"column":1,"offset":767},"end":{"line":37,"column":4,"offset":946},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":40,"column":1,"offset":949},"end":{"line":40,"column":31,"offset":979},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":40,"column":31,"offset":979}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"working-with-dates\"\n    }}>{`Working with dates`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://blog.coingecko.com/working-with-dates-and-times-in-rails-rspec-testing/\"\n        }}>{`RSpec working with dates and times`}</a></li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`let!(:item) { Item.create(:item, name: \"Bean\", expiration_date: Time.current) }\n\ndescribed \"#expired?\" do\n  it \"return false when item is yet to be expired\" do\n    travel_to(Time.current - 5.day) do\n      expect(item.expired?).to eq(false)\n    end\n  end\n  it \"return true when item is expired\" do\n    travel_to(Time.current + 5.day) do\n      expect(item.expired?).to eq(true)\n    end\n  end\nend\n`}</code></pre>\n    <p>{`You can also use a specific date:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`Time.current     # => Sat, 10 Nov 2010 00:00:00 EST -05:00\ntravel_to Time.zone.local(2020, 10, 1, 00, 00, 00)\nTime.current     # => Wed, 1 Oct 2020 00:00:00 EST -05:00\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}