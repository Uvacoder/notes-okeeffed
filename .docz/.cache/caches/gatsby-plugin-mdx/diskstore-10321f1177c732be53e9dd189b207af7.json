{"expireTime":9007200867335932000,"key":"gatsby-plugin-mdx-entire-payload-0d1c6f4500a6b1c8031b14a2ee8abcc1-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"7. Microservices","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":19,"offset":185},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":19,"offset":185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we have multiple apps that require information from between each other, we need to start talking about the  ","position":{"start":{"line":10,"column":1,"offset":187},"end":{"line":10,"column":112,"offset":298},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"service mesh","position":{"start":{"line":10,"column":114,"offset":300},"end":{"line":10,"column":126,"offset":312},"indent":[]}}],"position":{"start":{"line":10,"column":112,"offset":298},"end":{"line":10,"column":128,"offset":314},"indent":[]}},{"type":"text","value":". Normally between applications,  we run into the following problems:","position":{"start":{"line":10,"column":128,"offset":314},"end":{"line":10,"column":197,"offset":383},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":187},"end":{"line":10,"column":197,"offset":383},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There is no encryption","position":{"start":{"line":12,"column":3,"offset":387},"end":{"line":12,"column":25,"offset":409},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":387},"end":{"line":12,"column":25,"offset":409},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":385},"end":{"line":12,"column":25,"offset":409},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No retries.","position":{"start":{"line":13,"column":3,"offset":412},"end":{"line":13,"column":14,"offset":423},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":412},"end":{"line":13,"column":14,"offset":423},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":410},"end":{"line":13,"column":14,"offset":423},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No fallover.","position":{"start":{"line":14,"column":3,"offset":426},"end":{"line":14,"column":15,"offset":438},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":426},"end":{"line":14,"column":15,"offset":438},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":424},"end":{"line":14,"column":15,"offset":438},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No intelligent load balancer.","position":{"start":{"line":15,"column":3,"offset":441},"end":{"line":15,"column":32,"offset":470},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":441},"end":{"line":15,"column":32,"offset":470},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":439},"end":{"line":15,"column":32,"offset":470},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No routing decisions.","position":{"start":{"line":16,"column":3,"offset":473},"end":{"line":16,"column":24,"offset":494},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":473},"end":{"line":16,"column":24,"offset":494},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":471},"end":{"line":16,"column":24,"offset":494},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No metrics/logs/traces.","position":{"start":{"line":17,"column":3,"offset":497},"end":{"line":17,"column":26,"offset":520},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":497},"end":{"line":17,"column":26,"offset":520},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":495},"end":{"line":17,"column":26,"offset":520},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No access control.","position":{"start":{"line":18,"column":3,"offset":523},"end":{"line":18,"column":21,"offset":541},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":523},"end":{"line":18,"column":21,"offset":541},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":521},"end":{"line":18,"column":21,"offset":541},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":385},"end":{"line":18,"column":21,"offset":541},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"One solution is to implement ","position":{"start":{"line":20,"column":1,"offset":543},"end":{"line":20,"column":30,"offset":572},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"sidecars","position":{"start":{"line":20,"column":32,"offset":574},"end":{"line":20,"column":40,"offset":582},"indent":[]}}],"position":{"start":{"line":20,"column":30,"offset":572},"end":{"line":20,"column":42,"offset":584},"indent":[]}},{"type":"text","value":" which is a proxy to every single microservice. This can resolve issues such as encryption, retries when a connection fails, intelligent load balancing.","position":{"start":{"line":20,"column":42,"offset":584},"end":{"line":20,"column":194,"offset":736},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":543},"end":{"line":20,"column":194,"offset":736},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You could also add a ","position":{"start":{"line":22,"column":1,"offset":738},"end":{"line":22,"column":22,"offset":759},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"management interface","position":{"start":{"line":22,"column":24,"offset":761},"end":{"line":22,"column":44,"offset":781},"indent":[]}}],"position":{"start":{"line":22,"column":22,"offset":759},"end":{"line":22,"column":46,"offset":783},"indent":[]}},{"type":"text","value":" which resolves routing decisions, metrics/logs/traces and access control (ie valid certificate etc).","position":{"start":{"line":22,"column":46,"offset":783},"end":{"line":22,"column":147,"offset":884},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":738},"end":{"line":22,"column":147,"offset":884},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This brings us to ","position":{"start":{"line":24,"column":1,"offset":886},"end":{"line":24,"column":19,"offset":904},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Istio","position":{"start":{"line":24,"column":21,"offset":906},"end":{"line":24,"column":26,"offset":911},"indent":[]}}],"position":{"start":{"line":24,"column":19,"offset":904},"end":{"line":24,"column":28,"offset":913},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":24,"column":28,"offset":913},"end":{"line":24,"column":29,"offset":914},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":886},"end":{"line":24,"column":29,"offset":914},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/gitgoodclub/image/upload/v1540090167/istio-diagram.png","alt":"Istio diagram","position":{"start":{"line":26,"column":1,"offset":916},"end":{"line":26,"column":100,"offset":1015},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":916},"end":{"line":26,"column":100,"offset":1015},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"7.1 Istio Installation","position":{"start":{"line":28,"column":4,"offset":1020},"end":{"line":28,"column":26,"offset":1042},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1017},"end":{"line":28,"column":26,"offset":1042},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you want to use Istio, it's worth now using a node with enough memory ie t2.medium.","position":{"start":{"line":30,"column":1,"offset":1044},"end":{"line":30,"column":87,"offset":1130},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1044},"end":{"line":30,"column":87,"offset":1130},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Kops configuration","position":{"start":{"line":32,"column":5,"offset":1136},"end":{"line":32,"column":23,"offset":1154},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1132},"end":{"line":32,"column":23,"offset":1154},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"$ kops edit cluster kubernetes.newtech.academy","position":{"start":{"line":34,"column":1,"offset":1156},"end":{"line":36,"column":4,"offset":1214},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Add:","position":{"start":{"line":37,"column":1,"offset":1215},"end":{"line":37,"column":5,"offset":1219},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1215},"end":{"line":37,"column":5,"offset":1219},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"spec:\n  kubeAPIServer:\n    admissionControl:\n    - NamespaceLifecycle\n    - LimitRanger\n    - ServiceAccount\n    - PersistentVolumeLabel\n    - DefaultStorageClass\n    - DefaultTolerationSeconds\n    - MutatingAdmissionWebhook\n    - ValidatingAdmissionWebhook\n    - ResourceQuota\n    - NodeRestriction\n    - Priority","position":{"start":{"line":38,"column":1,"offset":1220},"end":{"line":53,"column":4,"offset":1542},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Download (1.0.2):","position":{"start":{"line":55,"column":5,"offset":1548},"end":{"line":55,"column":22,"offset":1565},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1544},"end":{"line":55,"column":22,"offset":1565},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"$ cd ~\n$ wget https://github.com/istio/istio/releases/download/1.0.2/istio-1.0.2-linux.tar.gz\ntar -xzvf istio-1.0.2-linux.tar.gz\n$ cd istio-1.0.2\n# Alternatively just export the PATH so you don't have to logout\n$ echo 'export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"' >> ~/.profile\n$ istioctl # check everything is running correctly","position":{"start":{"line":57,"column":1,"offset":1567},"end":{"line":65,"column":4,"offset":1912},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Download (latest):","position":{"start":{"line":67,"column":5,"offset":1918},"end":{"line":67,"column":23,"offset":1936},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1914},"end":{"line":67,"column":23,"offset":1936},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"$ cd ~\n$ curl -L https://git.io/getLatestIstio | sh -\n$ echo 'export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"' >> ~/.profile # change 1.0.2 in your version -- alternative just export the PATH so you don't have to logout\n$ cd istio-1.0.2 # change 1.0.2 in your version","position":{"start":{"line":69,"column":1,"offset":1938},"end":{"line":74,"column":4,"offset":2218},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Istio install","position":{"start":{"line":76,"column":5,"offset":2224},"end":{"line":76,"column":18,"offset":2237},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":2220},"end":{"line":76,"column":18,"offset":2237},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Apply CRDs:","position":{"start":{"line":78,"column":1,"offset":2239},"end":{"line":78,"column":12,"offset":2250},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2239},"end":{"line":78,"column":12,"offset":2250},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/helm/istio/templates/crds.yaml","position":{"start":{"line":80,"column":1,"offset":2252},"end":{"line":82,"column":4,"offset":2346},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Wait a few seconds.","position":{"start":{"line":84,"column":1,"offset":2348},"end":{"line":84,"column":20,"offset":2367},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2348},"end":{"line":84,"column":20,"offset":2367},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Option 1: with no mutual TLS authentication","position":{"start":{"line":87,"column":1,"offset":2370},"end":{"line":87,"column":44,"offset":2413},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2370},"end":{"line":87,"column":44,"offset":2413},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/istio-demo.yaml","position":{"start":{"line":88,"column":1,"offset":2414},"end":{"line":90,"column":4,"offset":2493},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Option 2: or with mutual TLS authentication","position":{"start":{"line":92,"column":1,"offset":2495},"end":{"line":92,"column":44,"offset":2538},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2495},"end":{"line":92,"column":44,"offset":2538},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/istio-demo-auth.yaml","position":{"start":{"line":93,"column":1,"offset":2539},"end":{"line":95,"column":4,"offset":2623},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"7.2 Example app","position":{"start":{"line":97,"column":4,"offset":2628},"end":{"line":97,"column":19,"offset":2643},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2625},"end":{"line":97,"column":19,"offset":2643},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/gitgoodclub/image/upload/v1540091246/Screen_Shot_2018-10-21_at_2.07.07_pm.png","alt":"Example app diagram","position":{"start":{"line":99,"column":1,"offset":2645},"end":{"line":99,"column":129,"offset":2773},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":2645},"end":{"line":99,"column":129,"offset":2773},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example app (from istio)","position":{"start":{"line":101,"column":5,"offset":2779},"end":{"line":101,"column":29,"offset":2803},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":2775},"end":{"line":101,"column":29,"offset":2803},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"\nkubectl apply -f <(istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml)","position":{"start":{"line":103,"column":1,"offset":2805},"end":{"line":106,"column":4,"offset":2954},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Hello world app","position":{"start":{"line":108,"column":5,"offset":2960},"end":{"line":108,"column":20,"offset":2975},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":2956},"end":{"line":108,"column":20,"offset":2975},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"\nkubectl apply -f <(istioctl kube-inject -f helloworld.yaml)\nkubectl apply -f helloworld-gw.yaml","position":{"start":{"line":110,"column":1,"offset":2977},"end":{"line":114,"column":4,"offset":3133},"indent":[1,1,1,1]}},{"type":"code","lang":"yaml","meta":null,"value":"# helloworld.yaml\n# Spinning up the container for a simple hello world app\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing a service for \"hello\"\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n# Spinning up container for world\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1\n    spec:\n      containers:\n      - name: world\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing world container\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n# World 2 deployment\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-2\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: world-2\n        version: v1\n    spec:\n      containers:\n      - name: world-2\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\" \n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing service for world 2 deployment\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-2\n  labels:\n    app: world-2\nspec:\n  selector:\n    app: world-2\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---","position":{"start":{"line":116,"column":1,"offset":3135},"end":{"line":236,"column":4,"offset":5166},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"After deploying and applying the Istio injection from following the above istio commands, we will see that each deploying will have an app running with it along with the sidebar.","position":{"start":{"line":238,"column":1,"offset":5168},"end":{"line":238,"column":179,"offset":5346},"indent":[]}}],"position":{"start":{"line":238,"column":1,"offset":5168},"end":{"line":238,"column":179,"offset":5346},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the Istio gateway, we launch the following:","position":{"start":{"line":240,"column":1,"offset":5348},"end":{"line":240,"column":48,"offset":5395},"indent":[]}}],"position":{"start":{"line":240,"column":1,"offset":5348},"end":{"line":240,"column":48,"offset":5395},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - helloworld-gateway\n  # if we match uri /hello, then follow routing\n  http:\n  - match:\n    - uri:\n        prefix: /hello\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080","position":{"start":{"line":242,"column":1,"offset":5397},"end":{"line":277,"column":4,"offset":6039},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"7.3 Advanced Istio Routing","position":{"start":{"line":279,"column":4,"offset":6044},"end":{"line":279,"column":30,"offset":6070},"indent":[]}}],"position":{"start":{"line":279,"column":1,"offset":6041},"end":{"line":279,"column":30,"offset":6070},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/gitgoodclub/image/upload/v1540109060/Screen_Shot_2018-10-21_at_7.04.07_pm.png","alt":"Advanced Routing Setup","position":{"start":{"line":281,"column":1,"offset":6072},"end":{"line":281,"column":132,"offset":6203},"indent":[]}}],"position":{"start":{"line":281,"column":1,"offset":6072},"end":{"line":281,"column":132,"offset":6203},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thanks to Istio, we can do advanced routing based around the above diagram thanks to the Deployments having different metadata:","position":{"start":{"line":283,"column":1,"offset":6205},"end":{"line":283,"column":128,"offset":6332},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":6205},"end":{"line":283,"column":128,"offset":6332},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The deployment:","position":{"start":{"line":285,"column":1,"offset":6334},"end":{"line":285,"column":16,"offset":6349},"indent":[]}}],"position":{"start":{"line":285,"column":1,"offset":6334},"end":{"line":285,"column":16,"offset":6349},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v2\nspec:\n  replicas: 3\n  template:\n    # we use this metadata for Istio to distinguish on routes\n    metadata:\n      labels:\n        app: hello\n        version: v2\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello, this is v2\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080","position":{"start":{"line":287,"column":1,"offset":6351},"end":{"line":312,"column":4,"offset":6870},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The routing:","position":{"start":{"line":314,"column":1,"offset":6872},"end":{"line":314,"column":13,"offset":6884},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":6872},"end":{"line":314,"column":13,"offset":6884},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"# helloworld-v2-routing\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  # ! Subsets is where the magic happens!\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: john\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v2 # ! match v2 only\n        port:\n          number: 8080\n  - route: # default route for hello.example.com\n    - destination:\n        host: ! hello.default.svc.cluster.local\n        subset: v1 # match v1 only\n        port:\n          number: 8080","position":{"start":{"line":316,"column":1,"offset":6886},"end":{"line":359,"column":4,"offset":7774},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now, if we apply this virtual service to the service mesh, then based on whether we pass the \"end-user\" header or not, we will hit either v1 or v2!","position":{"start":{"line":361,"column":1,"offset":7776},"end":{"line":361,"column":148,"offset":7923},"indent":[]}}],"position":{"start":{"line":361,"column":1,"offset":7776},"end":{"line":361,"column":148,"offset":7923},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can test by running ","position":{"start":{"line":363,"column":1,"offset":7925},"end":{"line":363,"column":24,"offset":7948},"indent":[]}},{"type":"inlineCode","value":"curl loadbalanceraddress.domain.com -H \"host: hello.example.com\"","position":{"start":{"line":363,"column":24,"offset":7948},"end":{"line":363,"column":90,"offset":8014},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":363,"column":90,"offset":8014},"end":{"line":363,"column":91,"offset":8015},"indent":[]}}],"position":{"start":{"line":363,"column":1,"offset":7925},"end":{"line":363,"column":91,"offset":8015},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For v2 we can run `","position":{"start":{"line":365,"column":1,"offset":8017},"end":{"line":365,"column":20,"offset":8036},"indent":[]}},{"type":"inlineCode","value":"curl loadbalanceraddress.domain.com -H \"host: hello.example.com\" -H \"end-user: John\"","position":{"start":{"line":365,"column":20,"offset":8036},"end":{"line":365,"column":106,"offset":8122},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":365,"column":106,"offset":8122},"end":{"line":365,"column":108,"offset":8124},"indent":[]}}],"position":{"start":{"line":365,"column":1,"offset":8017},"end":{"line":365,"column":108,"offset":8124},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"7.4 Canary deployments","position":{"start":{"line":367,"column":4,"offset":8129},"end":{"line":367,"column":26,"offset":8151},"indent":[]}}],"position":{"start":{"line":367,"column":1,"offset":8126},"end":{"line":367,"column":26,"offset":8151},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Canary deployments basically want routing mainly to the first version, but we also want some A/B testing to have version 2 having a 10% weight.","position":{"start":{"line":369,"column":1,"offset":8153},"end":{"line":369,"column":144,"offset":8296},"indent":[]}}],"position":{"start":{"line":369,"column":1,"offset":8153},"end":{"line":369,"column":144,"offset":8296},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"apiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v1\n        port:\n          number: 8080\n      weight: 90\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v2\n        port:\n          number: 8080\n      weight: 10","position":{"start":{"line":371,"column":1,"offset":8298},"end":{"line":409,"column":4,"offset":9003},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"7.5 Running retries","position":{"start":{"line":411,"column":4,"offset":9008},"end":{"line":411,"column":23,"offset":9027},"indent":[]}}],"position":{"start":{"line":411,"column":1,"offset":9005},"end":{"line":411,"column":24,"offset":9028},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If one of the pods stop working, we can retry to another pod without the client seeing any of the issues. The example app has one of three pods running with a 5s latency but a 2s timeout to demonstrate this. It looks like the following:","position":{"start":{"line":413,"column":1,"offset":9030},"end":{"line":413,"column":237,"offset":9266},"indent":[]}}],"position":{"start":{"line":413,"column":1,"offset":9030},"end":{"line":413,"column":237,"offset":9266},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/gitgoodclub/image/upload/v1540110459/Screen_Shot_2018-10-21_at_7.26.50_pm.png","alt":"Retry diagram","position":{"start":{"line":415,"column":1,"offset":9268},"end":{"line":415,"column":123,"offset":9390},"indent":[]}}],"position":{"start":{"line":415,"column":1,"offset":9268},"end":{"line":415,"column":123,"offset":9390},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can see this being done with ","position":{"start":{"line":417,"column":1,"offset":9392},"end":{"line":417,"column":33,"offset":9424},"indent":[]}},{"type":"inlineCode","value":"Hello World v3","position":{"start":{"line":417,"column":33,"offset":9424},"end":{"line":417,"column":49,"offset":9440},"indent":[]}},{"type":"text","value":" so we can see this in action with:","position":{"start":{"line":417,"column":49,"offset":9440},"end":{"line":417,"column":84,"offset":9475},"indent":[]}}],"position":{"start":{"line":417,"column":1,"offset":9392},"end":{"line":417,"column":84,"offset":9475},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"# helloworld-v3.yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v3\nspec:\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v3\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: TEXT\n          value: hello, this is $(MY_POD_NAME)\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v3-latency\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v3\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: TEXT\n          value: hello, this is $(MY_POD_NAME)\n        - name: LATENCY\n          value: \"5\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n  - name: v3\n    labels:\n      version: v3\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-v3\nspec:\n  hosts:\n  - \"hello-v3.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route: # default route for hello.example.com\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v3 # match v3 only\n        port:\n          number: 8080\n    timeout: 10s\n    retries:\n      attempts: 2\n      perTryTimeout: 2s","position":{"start":{"line":419,"column":1,"offset":9477},"end":{"line":512,"column":4,"offset":11314},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can also call ","position":{"start":{"line":514,"column":1,"offset":11316},"end":{"line":514,"column":18,"offset":11333},"indent":[]}},{"type":"inlineCode","value":"kubectl get destinationrule","position":{"start":{"line":514,"column":18,"offset":11333},"end":{"line":514,"column":47,"offset":11362},"indent":[]}},{"type":"text","value":" etc to get and describe particular rules.","position":{"start":{"line":514,"column":47,"offset":11362},"end":{"line":514,"column":89,"offset":11404},"indent":[]}}],"position":{"start":{"line":514,"column":1,"offset":11316},"end":{"line":514,"column":89,"offset":11404},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"7.6 Mutual TLS example","position":{"start":{"line":516,"column":4,"offset":11409},"end":{"line":516,"column":26,"offset":11431},"indent":[]}}],"position":{"start":{"line":516,"column":1,"offset":11406},"end":{"line":516,"column":26,"offset":11431},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create pods, services, destinationrules, virtualservices","position":{"start":{"line":518,"column":1,"offset":11433},"end":{"line":518,"column":57,"offset":11489},"indent":[]}}],"position":{"start":{"line":518,"column":1,"offset":11433},"end":{"line":518,"column":57,"offset":11489},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"kubectl create -f <(istioctl kube-inject -f helloworld-tls.yaml)\nkubectl create -f helloworld-legacy.yaml","position":{"start":{"line":519,"column":1,"offset":11490},"end":{"line":522,"column":4,"offset":11607},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The goals of Istio security are:","position":{"start":{"line":524,"column":1,"offset":11609},"end":{"line":524,"column":33,"offset":11641},"indent":[]}}],"position":{"start":{"line":524,"column":1,"offset":11609},"end":{"line":524,"column":33,"offset":11641},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Security by default:","position":{"start":{"line":526,"column":5,"offset":11647},"end":{"line":526,"column":25,"offset":11667},"indent":[]}}],"position":{"start":{"line":526,"column":3,"offset":11645},"end":{"line":526,"column":27,"offset":11669},"indent":[]}},{"type":"text","value":" no changes needed for application code and infrastructure.","position":{"start":{"line":526,"column":27,"offset":11669},"end":{"line":526,"column":86,"offset":11728},"indent":[]}}],"position":{"start":{"line":526,"column":3,"offset":11645},"end":{"line":526,"column":86,"offset":11728},"indent":[]}}],"position":{"start":{"line":526,"column":1,"offset":11643},"end":{"line":526,"column":86,"offset":11728},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Defense in depth:","position":{"start":{"line":527,"column":5,"offset":11733},"end":{"line":527,"column":22,"offset":11750},"indent":[]}}],"position":{"start":{"line":527,"column":3,"offset":11731},"end":{"line":527,"column":24,"offset":11752},"indent":[]}},{"type":"text","value":" integrate with existing security systems to provide multiple layers of defense.","position":{"start":{"line":527,"column":24,"offset":11752},"end":{"line":527,"column":104,"offset":11832},"indent":[]}}],"position":{"start":{"line":527,"column":3,"offset":11731},"end":{"line":527,"column":104,"offset":11832},"indent":[]}}],"position":{"start":{"line":527,"column":1,"offset":11729},"end":{"line":527,"column":104,"offset":11832},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Zero-trust network:","position":{"start":{"line":528,"column":5,"offset":11837},"end":{"line":528,"column":24,"offset":11856},"indent":[]}}],"position":{"start":{"line":528,"column":3,"offset":11835},"end":{"line":528,"column":26,"offset":11858},"indent":[]}},{"type":"text","value":" build security solutions on untrusted networks.","position":{"start":{"line":528,"column":26,"offset":11858},"end":{"line":528,"column":74,"offset":11906},"indent":[]}}],"position":{"start":{"line":528,"column":3,"offset":11835},"end":{"line":528,"column":74,"offset":11906},"indent":[]}}],"position":{"start":{"line":528,"column":1,"offset":11833},"end":{"line":528,"column":74,"offset":11906},"indent":[]}}],"position":{"start":{"line":526,"column":1,"offset":11643},"end":{"line":528,"column":74,"offset":11906},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Two types of auth:","position":{"start":{"line":530,"column":1,"offset":11908},"end":{"line":530,"column":19,"offset":11926},"indent":[]}}],"position":{"start":{"line":530,"column":1,"offset":11908},"end":{"line":530,"column":19,"offset":11926},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Transport authentication (service to service authentication) using Mutual TLS.","position":{"start":{"line":532,"column":4,"offset":11931},"end":{"line":532,"column":82,"offset":12009},"indent":[]}}],"position":{"start":{"line":532,"column":4,"offset":11931},"end":{"line":532,"column":82,"offset":12009},"indent":[]}}],"position":{"start":{"line":532,"column":1,"offset":11928},"end":{"line":532,"column":82,"offset":12009},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Origin authentication (end-user authentication). Verifying the end user using JWTs.","position":{"start":{"line":533,"column":4,"offset":12013},"end":{"line":533,"column":87,"offset":12096},"indent":[]}}],"position":{"start":{"line":533,"column":4,"offset":12013},"end":{"line":533,"column":87,"offset":12096},"indent":[]}}],"position":{"start":{"line":533,"column":1,"offset":12010},"end":{"line":533,"column":87,"offset":12096},"indent":[]}}],"position":{"start":{"line":532,"column":1,"offset":11928},"end":{"line":533,"column":87,"offset":12096},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Mutual TLS can be turned on ","position":{"start":{"line":535,"column":1,"offset":12098},"end":{"line":535,"column":29,"offset":12126},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"without having to change the code of applications","position":{"start":{"line":535,"column":31,"offset":12128},"end":{"line":535,"column":80,"offset":12177},"indent":[]}}],"position":{"start":{"line":535,"column":29,"offset":12126},"end":{"line":535,"column":82,"offset":12179},"indent":[]}},{"type":"text","value":" (because of the sidecar deployment).","position":{"start":{"line":535,"column":82,"offset":12179},"end":{"line":535,"column":119,"offset":12216},"indent":[]}}],"position":{"start":{"line":535,"column":1,"offset":12098},"end":{"line":535,"column":119,"offset":12216},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It provides each service with a ","position":{"start":{"line":537,"column":1,"offset":12218},"end":{"line":537,"column":33,"offset":12250},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"strong identity","position":{"start":{"line":537,"column":35,"offset":12252},"end":{"line":537,"column":50,"offset":12267},"indent":[]}}],"position":{"start":{"line":537,"column":33,"offset":12250},"end":{"line":537,"column":52,"offset":12269},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":537,"column":52,"offset":12269},"end":{"line":537,"column":53,"offset":12270},"indent":[]}}],"position":{"start":{"line":537,"column":1,"offset":12218},"end":{"line":537,"column":53,"offset":12270},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Attacks like impersonation be rerouting DNS records will fail, because a fake application can't prove its identity using the certificate mechanism.","position":{"start":{"line":539,"column":3,"offset":12274},"end":{"line":539,"column":150,"offset":12421},"indent":[]}}],"position":{"start":{"line":539,"column":3,"offset":12274},"end":{"line":539,"column":150,"offset":12421},"indent":[]}}],"position":{"start":{"line":539,"column":1,"offset":12272},"end":{"line":539,"column":150,"offset":12421},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Secures (encrypts)","position":{"start":{"line":540,"column":5,"offset":12426},"end":{"line":540,"column":23,"offset":12444},"indent":[]}}],"position":{"start":{"line":540,"column":3,"offset":12424},"end":{"line":540,"column":25,"offset":12446},"indent":[]}},{"type":"text","value":" service-to-service and end-user-to-service communication.","position":{"start":{"line":540,"column":25,"offset":12446},"end":{"line":540,"column":83,"offset":12504},"indent":[]}}],"position":{"start":{"line":540,"column":3,"offset":12424},"end":{"line":540,"column":83,"offset":12504},"indent":[]}}],"position":{"start":{"line":540,"column":1,"offset":12422},"end":{"line":540,"column":83,"offset":12504},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Provides key and certificate management to ","position":{"start":{"line":541,"column":3,"offset":12507},"end":{"line":541,"column":46,"offset":12550},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"manage generation, distribution and rotation","position":{"start":{"line":541,"column":48,"offset":12552},"end":{"line":541,"column":92,"offset":12596},"indent":[]}}],"position":{"start":{"line":541,"column":46,"offset":12550},"end":{"line":541,"column":94,"offset":12598},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":541,"column":94,"offset":12598},"end":{"line":541,"column":95,"offset":12599},"indent":[]}}],"position":{"start":{"line":541,"column":3,"offset":12507},"end":{"line":541,"column":95,"offset":12599},"indent":[]}}],"position":{"start":{"line":541,"column":1,"offset":12505},"end":{"line":541,"column":95,"offset":12599},"indent":[]}}],"position":{"start":{"line":539,"column":1,"offset":12272},"end":{"line":541,"column":95,"offset":12599},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/gitgoodclub/image/upload/v1540153502/Screen_Shot_2018-10-22_at_7.24.10_am.png","alt":"TLS Example App","position":{"start":{"line":543,"column":1,"offset":12601},"end":{"line":543,"column":125,"offset":12725},"indent":[]}}],"position":{"start":{"line":543,"column":1,"offset":12601},"end":{"line":543,"column":125,"offset":12725},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Legacy applications with not have a sidecar. ","position":{"start":{"line":545,"column":3,"offset":12729},"end":{"line":545,"column":48,"offset":12774},"indent":[]}}],"position":{"start":{"line":545,"column":3,"offset":12729},"end":{"line":545,"column":48,"offset":12774},"indent":[]}}],"position":{"start":{"line":545,"column":1,"offset":12727},"end":{"line":545,"column":48,"offset":12774},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"One service will go LTR, and the other RTL.","position":{"start":{"line":546,"column":3,"offset":12777},"end":{"line":546,"column":46,"offset":12820},"indent":[]}}],"position":{"start":{"line":546,"column":3,"offset":12777},"end":{"line":546,"column":46,"offset":12820},"indent":[]}}],"position":{"start":{"line":546,"column":1,"offset":12775},"end":{"line":546,"column":46,"offset":12820},"indent":[]}}],"position":{"start":{"line":545,"column":1,"offset":12727},"end":{"line":546,"column":46,"offset":12820},"indent":[1]}},{"type":"code","lang":"yaml","meta":null,"value":"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns1\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns2\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-tls\n  namespace: ns1\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world.ns2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-tls\n  namespace: ns2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"end.legacy:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-reverse-tls\n  namespace: ns2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"end-reverse.ns1:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: end-reverse-tls\n  namespace: ns1\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: end-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  namespace: ns1\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  namespace: ns2\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-reverse\n  namespace: ns2\n  labels:\n    app: world-reverse\nspec:\n  selector:\n    app: world-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: end-reverse\n  namespace: ns1\n  labels:\n    app: end-reverse\nspec:\n  selector:\n    app: end-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.ns1.svc.cluster.local\n  # uncomment to enable mutual TLS\n  #trafficPolicy:\n  #  tls:\n  #    mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1-tls\n    labels:\n      version: v1-tls\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello-reverse\nspec:\n  host: hello-reverse.legacy.svc.cluster.local\n  # uncomment to enable mutual TLS\n  #trafficPolicy:\n  #  tls:\n  #    mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1-tls\n    labels:\n      version: v1-tls\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-tls\nspec:\n  hosts:\n  - \"hello-tls.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.ns1.svc.cluster.local\n        subset: v1-tls # match v3 only\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-tls-reverse\nspec:\n  hosts:\n  - \"hello-tls-reverse.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello-reverse.legacy.svc.cluster.local\n        subset: v1-tls\n        port:\n          number: 8080","position":{"start":{"line":548,"column":1,"offset":12822},"end":{"line":795,"column":4,"offset":17113},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As for the missing legacy services, they can be found in the ","position":{"start":{"line":797,"column":1,"offset":17115},"end":{"line":797,"column":62,"offset":17176},"indent":[]}},{"type":"inlineCode","value":"helloworld-legacy","position":{"start":{"line":797,"column":62,"offset":17176},"end":{"line":797,"column":81,"offset":17195},"indent":[]}},{"type":"text","value":" file:","position":{"start":{"line":797,"column":81,"offset":17195},"end":{"line":797,"column":87,"offset":17201},"indent":[]}}],"position":{"start":{"line":797,"column":1,"offset":17115},"end":{"line":797,"column":87,"offset":17201},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: legacy\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: end-tls\n  namespace: legacy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: end\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-reverse-tls\n  namespace: legacy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world-reverse.ns2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: end\n  namespace: legacy\n  labels:\n    app: end\nspec:\n  selector:\n    app: end\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-reverse\n  namespace: legacy\n  labels:\n    app: hello-reverse\nspec:\n  selector:\n    app: hello-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080","position":{"start":{"line":799,"column":1,"offset":17203},"end":{"line":882,"column":4,"offset":18573},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Both these files can applied by running the following:","position":{"start":{"line":884,"column":1,"offset":18575},"end":{"line":884,"column":55,"offset":18629},"indent":[]}}],"position":{"start":{"line":884,"column":1,"offset":18575},"end":{"line":884,"column":55,"offset":18629},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"$ kubectl apply -f <(istioctl kube-inject -f helloworld-tls.yaml)\n$ kubectl apply -f helloworld-legacy.yaml\n$ kubetl get svc -o wide -n istio-system # get services from istio-system services\n# After getting the load balancer, you can then curl the ELB passing the Host header","position":{"start":{"line":886,"column":1,"offset":18631},"end":{"line":891,"column":4,"offset":18918},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now we need to ","position":{"start":{"line":893,"column":1,"offset":18920},"end":{"line":893,"column":16,"offset":18935},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"enable TLS authetication.","position":{"start":{"line":893,"column":18,"offset":18937},"end":{"line":893,"column":43,"offset":18962},"indent":[]}}],"position":{"start":{"line":893,"column":16,"offset":18935},"end":{"line":893,"column":45,"offset":18964},"indent":[]}}],"position":{"start":{"line":893,"column":1,"offset":18920},"end":{"line":893,"column":45,"offset":18964},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"# helloworld-rbac-enable.yaml\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\n# ensures mtls is push to side cars\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"legacy\"\nspec:\n  host: \"end.legacy.svc.cluster.local\"\n  trafficPolicy:\n    tls:\n      mode: DISABLE","position":{"start":{"line":895,"column":1,"offset":18966},"end":{"line":936,"column":4,"offset":19811},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Apply this file to enable mutual TLS that works one way but not the other (as like in the diagram). However, in the above yaml files we did now enable the traffic policy, so you need to update that and apply the updated files for all of this to work.","position":{"start":{"line":938,"column":1,"offset":19813},"end":{"line":938,"column":251,"offset":20063},"indent":[]}}],"position":{"start":{"line":938,"column":1,"offset":19813},"end":{"line":938,"column":251,"offset":20063},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"7.7 End-user authentication","position":{"start":{"line":940,"column":4,"offset":20068},"end":{"line":940,"column":31,"offset":20095},"indent":[]}}],"position":{"start":{"line":940,"column":1,"offset":20065},"end":{"line":940,"column":31,"offset":20095},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"kubectl create -f <(istioctl kube-inject -f helloworld-jwt.yaml)\nkubectl create -f helloworld-jwt-enable.yaml","position":{"start":{"line":942,"column":1,"offset":20097},"end":{"line":945,"column":4,"offset":20218},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we want to access a Pod, we need to use a gateway. ","position":{"start":{"line":947,"column":1,"offset":20220},"end":{"line":947,"column":55,"offset":20274},"indent":[]}}],"position":{"start":{"line":947,"column":1,"offset":20220},"end":{"line":947,"column":55,"offset":20274},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"# helloworld-gw.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /hello\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080","position":{"start":{"line":949,"column":1,"offset":20276},"end":{"line":984,"column":4,"offset":20891},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you want a service within Istio, you will always need to define the ","position":{"start":{"line":986,"column":1,"offset":20893},"end":{"line":986,"column":72,"offset":20964},"indent":[]}},{"type":"inlineCode","value":"VirtualService","position":{"start":{"line":986,"column":72,"offset":20964},"end":{"line":986,"column":88,"offset":20980},"indent":[]}},{"type":"text","value":". We don't need the ","position":{"start":{"line":986,"column":88,"offset":20980},"end":{"line":986,"column":108,"offset":21000},"indent":[]}},{"type":"inlineCode","value":"VirtualService","position":{"start":{"line":986,"column":108,"offset":21000},"end":{"line":986,"column":124,"offset":21016},"indent":[]}},{"type":"text","value":" for services that are accessed by the client.","position":{"start":{"line":986,"column":124,"offset":21016},"end":{"line":986,"column":170,"offset":21062},"indent":[]}}],"position":{"start":{"line":986,"column":1,"offset":20893},"end":{"line":986,"column":170,"offset":21062},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"7.8 RBAC with Istio and MTLS","position":{"start":{"line":988,"column":4,"offset":21067},"end":{"line":988,"column":32,"offset":21095},"indent":[]}}],"position":{"start":{"line":988,"column":1,"offset":21064},"end":{"line":988,"column":32,"offset":21095},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have MTLS, we have strong identites.","position":{"start":{"line":990,"column":1,"offset":21097},"end":{"line":990,"column":49,"offset":21145},"indent":[]}}],"position":{"start":{"line":990,"column":1,"offset":21097},"end":{"line":990,"column":49,"offset":21145},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Based on those identities, we can start doing ","position":{"start":{"line":992,"column":1,"offset":21147},"end":{"line":992,"column":47,"offset":21193},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Role Based Access Control (RBAC)","position":{"start":{"line":992,"column":49,"offset":21195},"end":{"line":992,"column":81,"offset":21227},"indent":[]}}],"position":{"start":{"line":992,"column":47,"offset":21193},"end":{"line":992,"column":83,"offset":21229},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":992,"column":83,"offset":21229},"end":{"line":992,"column":84,"offset":21230},"indent":[]}}],"position":{"start":{"line":992,"column":1,"offset":21147},"end":{"line":992,"column":84,"offset":21230},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"RBAC allows us to limit access ","position":{"start":{"line":994,"column":1,"offset":21232},"end":{"line":994,"column":32,"offset":21263},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"between our services","position":{"start":{"line":994,"column":34,"offset":21265},"end":{"line":994,"column":54,"offset":21285},"indent":[]}}],"position":{"start":{"line":994,"column":32,"offset":21263},"end":{"line":994,"column":56,"offset":21287},"indent":[]}},{"type":"text","value":" and from ","position":{"start":{"line":994,"column":56,"offset":21287},"end":{"line":994,"column":66,"offset":21297},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"end-user to services","position":{"start":{"line":994,"column":68,"offset":21299},"end":{"line":994,"column":88,"offset":21319},"indent":[]}}],"position":{"start":{"line":994,"column":66,"offset":21297},"end":{"line":994,"column":90,"offset":21321},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":994,"column":90,"offset":21321},"end":{"line":994,"column":91,"offset":21322},"indent":[]}}],"position":{"start":{"line":994,"column":1,"offset":21232},"end":{"line":994,"column":91,"offset":21322},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Istio is able to verify the identity of a service by ","position":{"start":{"line":996,"column":1,"offset":21324},"end":{"line":996,"column":54,"offset":21377},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"checking the identity of the x.509 certificate (which comes with enabled mutual TLS)","position":{"start":{"line":996,"column":56,"offset":21379},"end":{"line":996,"column":140,"offset":21463},"indent":[]}}],"position":{"start":{"line":996,"column":54,"offset":21377},"end":{"line":996,"column":142,"offset":21465},"indent":[]}},{"type":"text","value":". Example: with RBAC, service A might be able to be contacted by B, but not by C.","position":{"start":{"line":996,"column":142,"offset":21465},"end":{"line":996,"column":223,"offset":21546},"indent":[]}}],"position":{"start":{"line":996,"column":1,"offset":21324},"end":{"line":996,"column":223,"offset":21546},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Istio is using SPIFFE standard (another CNFC project).","position":{"start":{"line":998,"column":1,"offset":21548},"end":{"line":998,"column":55,"offset":21602},"indent":[]}}],"position":{"start":{"line":998,"column":1,"offset":21548},"end":{"line":998,"column":55,"offset":21602},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"RBAC in istio:","position":{"start":{"line":1000,"column":1,"offset":21604},"end":{"line":1000,"column":15,"offset":21618},"indent":[]}}],"position":{"start":{"line":1000,"column":1,"offset":21604},"end":{"line":1000,"column":15,"offset":21618},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can provide ","position":{"start":{"line":1002,"column":3,"offset":21622},"end":{"line":1002,"column":15,"offset":21634},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"service-to-service","position":{"start":{"line":1002,"column":17,"offset":21636},"end":{"line":1002,"column":35,"offset":21654},"indent":[]}}],"position":{"start":{"line":1002,"column":15,"offset":21634},"end":{"line":1002,"column":37,"offset":21656},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":1002,"column":37,"offset":21656},"end":{"line":1002,"column":42,"offset":21661},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"end-user-to-service","position":{"start":{"line":1002,"column":44,"offset":21663},"end":{"line":1002,"column":63,"offset":21682},"indent":[]}}],"position":{"start":{"line":1002,"column":42,"offset":21661},"end":{"line":1002,"column":65,"offset":21684},"indent":[]}},{"type":"text","value":" auth.","position":{"start":{"line":1002,"column":65,"offset":21684},"end":{"line":1002,"column":71,"offset":21690},"indent":[]}}],"position":{"start":{"line":1002,"column":3,"offset":21622},"end":{"line":1002,"column":71,"offset":21690},"indent":[]}}],"position":{"start":{"line":1002,"column":1,"offset":21620},"end":{"line":1002,"column":71,"offset":21690},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Supports ","position":{"start":{"line":1003,"column":3,"offset":21693},"end":{"line":1003,"column":12,"offset":21702},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"conditions","position":{"start":{"line":1003,"column":14,"offset":21704},"end":{"line":1003,"column":24,"offset":21714},"indent":[]}}],"position":{"start":{"line":1003,"column":12,"offset":21702},"end":{"line":1003,"column":26,"offset":21716},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":1003,"column":26,"offset":21716},"end":{"line":1003,"column":31,"offset":21721},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"role-binding","position":{"start":{"line":1003,"column":33,"offset":21723},"end":{"line":1003,"column":45,"offset":21735},"indent":[]}}],"position":{"start":{"line":1003,"column":31,"offset":21721},"end":{"line":1003,"column":47,"offset":21737},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1003,"column":47,"offset":21737},"end":{"line":1003,"column":48,"offset":21738},"indent":[]}}],"position":{"start":{"line":1003,"column":3,"offset":21693},"end":{"line":1003,"column":48,"offset":21738},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"You can bind to ","position":{"start":{"line":1004,"column":5,"offset":21743},"end":{"line":1004,"column":21,"offset":21759},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ServiceAccounts","position":{"start":{"line":1004,"column":23,"offset":21761},"end":{"line":1004,"column":38,"offset":21776},"indent":[]}}],"position":{"start":{"line":1004,"column":21,"offset":21759},"end":{"line":1004,"column":40,"offset":21778},"indent":[]}},{"type":"text","value":" (which can be linked to pods).","position":{"start":{"line":1004,"column":40,"offset":21778},"end":{"line":1004,"column":71,"offset":21809},"indent":[]}}],"position":{"start":{"line":1004,"column":5,"offset":21743},"end":{"line":1004,"column":71,"offset":21809},"indent":[]}}],"position":{"start":{"line":1004,"column":3,"offset":21741},"end":{"line":1004,"column":71,"offset":21809},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"End-user-to-service can for example let you create ","position":{"start":{"line":1005,"column":5,"offset":21814},"end":{"line":1005,"column":56,"offset":21865},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"condition on being authenticated using JWT","position":{"start":{"line":1005,"column":58,"offset":21867},"end":{"line":1005,"column":100,"offset":21909},"indent":[]}}],"position":{"start":{"line":1005,"column":56,"offset":21865},"end":{"line":1005,"column":102,"offset":21911},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1005,"column":102,"offset":21911},"end":{"line":1005,"column":103,"offset":21912},"indent":[]}}],"position":{"start":{"line":1005,"column":5,"offset":21814},"end":{"line":1005,"column":103,"offset":21912},"indent":[]}}],"position":{"start":{"line":1005,"column":3,"offset":21812},"end":{"line":1005,"column":103,"offset":21912},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It has high performance.","position":{"start":{"line":1006,"column":5,"offset":21917},"end":{"line":1006,"column":29,"offset":21941},"indent":[]}}],"position":{"start":{"line":1006,"column":5,"offset":21917},"end":{"line":1006,"column":29,"offset":21941},"indent":[]}}],"position":{"start":{"line":1006,"column":3,"offset":21915},"end":{"line":1006,"column":29,"offset":21941},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Not enabled by default.","position":{"start":{"line":1007,"column":5,"offset":21946},"end":{"line":1007,"column":28,"offset":21969},"indent":[]}}],"position":{"start":{"line":1007,"column":5,"offset":21946},"end":{"line":1007,"column":28,"offset":21969},"indent":[]}}],"position":{"start":{"line":1007,"column":3,"offset":21944},"end":{"line":1007,"column":28,"offset":21969},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We can enable it globally or on a namespace.","position":{"start":{"line":1008,"column":5,"offset":21974},"end":{"line":1008,"column":49,"offset":22018},"indent":[]}}],"position":{"start":{"line":1008,"column":5,"offset":21974},"end":{"line":1008,"column":49,"offset":22018},"indent":[]}}],"position":{"start":{"line":1008,"column":3,"offset":21972},"end":{"line":1008,"column":49,"offset":22018},"indent":[]}}],"position":{"start":{"line":1004,"column":3,"offset":21741},"end":{"line":1008,"column":49,"offset":22018},"indent":[3,3,3,3]}}],"position":{"start":{"line":1003,"column":1,"offset":21691},"end":{"line":1008,"column":49,"offset":22018},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":1002,"column":1,"offset":21620},"end":{"line":1008,"column":49,"offset":22018},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Example for including it on the \"default\" namespace:","position":{"start":{"line":1010,"column":1,"offset":22020},"end":{"line":1010,"column":53,"offset":22072},"indent":[]}}],"position":{"start":{"line":1010,"column":1,"offset":22020},"end":{"line":1010,"column":53,"offset":22072},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"apiVersion: \"rbac.istio.io/v1alpha1\"\nkind: RbacConfig\nmetadata:\n  name: default\nspec:\n  mode: 'ON_WITH_INCLUSION'\n  inclusion:\n    namespaces: [\"default\"]\n---\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE","position":{"start":{"line":1012,"column":1,"offset":22074},"end":{"line":1050,"column":4,"offset":22827},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can then create a ","position":{"start":{"line":1052,"column":1,"offset":22829},"end":{"line":1052,"column":22,"offset":22850},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ServiceRole","position":{"start":{"line":1052,"column":24,"offset":22852},"end":{"line":1052,"column":35,"offset":22863},"indent":[]}}],"position":{"start":{"line":1052,"column":22,"offset":22850},"end":{"line":1052,"column":37,"offset":22865},"indent":[]}},{"type":"text","value":" specifying the rules and a ","position":{"start":{"line":1052,"column":37,"offset":22865},"end":{"line":1052,"column":65,"offset":22893},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ServiceRoleBinding","position":{"start":{"line":1052,"column":67,"offset":22895},"end":{"line":1052,"column":85,"offset":22913},"indent":[]}}],"position":{"start":{"line":1052,"column":65,"offset":22893},"end":{"line":1052,"column":87,"offset":22915},"indent":[]}},{"type":"text","value":" to link a ","position":{"start":{"line":1052,"column":87,"offset":22915},"end":{"line":1052,"column":98,"offset":22926},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ServiceRole","position":{"start":{"line":1052,"column":100,"offset":22928},"end":{"line":1052,"column":111,"offset":22939},"indent":[]}}],"position":{"start":{"line":1052,"column":98,"offset":22926},"end":{"line":1052,"column":113,"offset":22941},"indent":[]}},{"type":"text","value":" to a subject (example Kubernetes ","position":{"start":{"line":1052,"column":113,"offset":22941},"end":{"line":1052,"column":147,"offset":22975},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ServiceAccount","position":{"start":{"line":1052,"column":149,"offset":22977},"end":{"line":1052,"column":163,"offset":22991},"indent":[]}}],"position":{"start":{"line":1052,"column":147,"offset":22975},"end":{"line":1052,"column":165,"offset":22993},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":1052,"column":165,"offset":22993},"end":{"line":1052,"column":167,"offset":22995},"indent":[]}}],"position":{"start":{"line":1052,"column":1,"offset":22829},"end":{"line":1052,"column":167,"offset":22995},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Example of how we want the demo to look when it comes to what it can contact:","position":{"start":{"line":1054,"column":1,"offset":22997},"end":{"line":1054,"column":78,"offset":23074},"indent":[]}}],"position":{"start":{"line":1054,"column":1,"offset":22997},"end":{"line":1054,"column":78,"offset":23074},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/gitgoodclub/image/upload/v1540155683/Screen_Shot_2018-10-22_at_8.00.47_am.png","alt":"Contact rules","position":{"start":{"line":1056,"column":1,"offset":23076},"end":{"line":1056,"column":123,"offset":23198},"indent":[]}}],"position":{"start":{"line":1056,"column":1,"offset":23076},"end":{"line":1056,"column":123,"offset":23198},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The order for the following is:","position":{"start":{"line":1058,"column":1,"offset":23200},"end":{"line":1058,"column":32,"offset":23231},"indent":[]}}],"position":{"start":{"line":1058,"column":1,"offset":23200},"end":{"line":1058,"column":32,"offset":23231},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create ","position":{"start":{"line":1060,"column":4,"offset":23236},"end":{"line":1060,"column":11,"offset":23243},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ServiceRoles","position":{"start":{"line":1060,"column":13,"offset":23245},"end":{"line":1060,"column":25,"offset":23257},"indent":[]}}],"position":{"start":{"line":1060,"column":11,"offset":23243},"end":{"line":1060,"column":27,"offset":23259},"indent":[]}},{"type":"text","value":" that only enable certain methods and services with specific access.","position":{"start":{"line":1060,"column":27,"offset":23259},"end":{"line":1060,"column":95,"offset":23327},"indent":[]}}],"position":{"start":{"line":1060,"column":4,"offset":23236},"end":{"line":1060,"column":95,"offset":23327},"indent":[]}}],"position":{"start":{"line":1060,"column":1,"offset":23233},"end":{"line":1060,"column":95,"offset":23327},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Enable ","position":{"start":{"line":1061,"column":4,"offset":23331},"end":{"line":1061,"column":11,"offset":23338},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ServiceRoleBindings","position":{"start":{"line":1061,"column":13,"offset":23340},"end":{"line":1061,"column":32,"offset":23359},"indent":[]}}],"position":{"start":{"line":1061,"column":11,"offset":23338},"end":{"line":1061,"column":34,"offset":23361},"indent":[]}},{"type":"text","value":" to bind that the ","position":{"start":{"line":1061,"column":34,"offset":23361},"end":{"line":1061,"column":52,"offset":23379},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ServiceRoles","position":{"start":{"line":1061,"column":54,"offset":23381},"end":{"line":1061,"column":66,"offset":23393},"indent":[]}}],"position":{"start":{"line":1061,"column":52,"offset":23379},"end":{"line":1061,"column":68,"offset":23395},"indent":[]}},{"type":"text","value":" to a ","position":{"start":{"line":1061,"column":68,"offset":23395},"end":{"line":1061,"column":74,"offset":23401},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"subject","position":{"start":{"line":1061,"column":76,"offset":23403},"end":{"line":1061,"column":83,"offset":23410},"indent":[]}}],"position":{"start":{"line":1061,"column":74,"offset":23401},"end":{"line":1061,"column":85,"offset":23412},"indent":[]}},{"type":"text","value":" (or ","position":{"start":{"line":1061,"column":85,"offset":23412},"end":{"line":1061,"column":90,"offset":23417},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ingress controller name","position":{"start":{"line":1061,"column":92,"offset":23419},"end":{"line":1061,"column":115,"offset":23442},"indent":[]}}],"position":{"start":{"line":1061,"column":90,"offset":23417},"end":{"line":1061,"column":117,"offset":23444},"indent":[]}},{"type":"text","value":" in the first case).","position":{"start":{"line":1061,"column":117,"offset":23444},"end":{"line":1061,"column":137,"offset":23464},"indent":[]}}],"position":{"start":{"line":1061,"column":4,"offset":23331},"end":{"line":1061,"column":137,"offset":23464},"indent":[]}}],"position":{"start":{"line":1061,"column":1,"offset":23328},"end":{"line":1061,"column":137,"offset":23464},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create the ","position":{"start":{"line":1062,"column":4,"offset":23468},"end":{"line":1062,"column":15,"offset":23479},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ServiceAccounts","position":{"start":{"line":1062,"column":17,"offset":23481},"end":{"line":1062,"column":32,"offset":23496},"indent":[]}}],"position":{"start":{"line":1062,"column":15,"offset":23479},"end":{"line":1062,"column":34,"offset":23498},"indent":[]}},{"type":"text","value":" that have the correct metadata required for the ","position":{"start":{"line":1062,"column":34,"offset":23498},"end":{"line":1062,"column":83,"offset":23547},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ServiceRoleBindings","position":{"start":{"line":1062,"column":85,"offset":23549},"end":{"line":1062,"column":104,"offset":23568},"indent":[]}}],"position":{"start":{"line":1062,"column":83,"offset":23547},"end":{"line":1062,"column":106,"offset":23570},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1062,"column":106,"offset":23570},"end":{"line":1062,"column":107,"offset":23571},"indent":[]}}],"position":{"start":{"line":1062,"column":4,"offset":23468},"end":{"line":1062,"column":107,"offset":23571},"indent":[]}}],"position":{"start":{"line":1062,"column":1,"offset":23465},"end":{"line":1062,"column":107,"offset":23571},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create the ","position":{"start":{"line":1063,"column":4,"offset":23575},"end":{"line":1063,"column":15,"offset":23586},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Deployments","position":{"start":{"line":1063,"column":17,"offset":23588},"end":{"line":1063,"column":28,"offset":23599},"indent":[]}}],"position":{"start":{"line":1063,"column":15,"offset":23586},"end":{"line":1063,"column":30,"offset":23601},"indent":[]}},{"type":"text","value":" that have the affiliated ","position":{"start":{"line":1063,"column":30,"offset":23601},"end":{"line":1063,"column":56,"offset":23627},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ServiceAccount","position":{"start":{"line":1063,"column":58,"offset":23629},"end":{"line":1063,"column":72,"offset":23643},"indent":[]}}],"position":{"start":{"line":1063,"column":56,"offset":23627},"end":{"line":1063,"column":74,"offset":23645},"indent":[]}},{"type":"text","value":" required.","position":{"start":{"line":1063,"column":74,"offset":23645},"end":{"line":1063,"column":84,"offset":23655},"indent":[]}}],"position":{"start":{"line":1063,"column":4,"offset":23575},"end":{"line":1063,"column":84,"offset":23655},"indent":[]}}],"position":{"start":{"line":1063,"column":1,"offset":23572},"end":{"line":1063,"column":84,"offset":23655},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a ","position":{"start":{"line":1064,"column":4,"offset":23659},"end":{"line":1064,"column":13,"offset":23668},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Service","position":{"start":{"line":1064,"column":15,"offset":23670},"end":{"line":1064,"column":22,"offset":23677},"indent":[]}}],"position":{"start":{"line":1064,"column":13,"offset":23668},"end":{"line":1064,"column":24,"offset":23679},"indent":[]}},{"type":"text","value":" for that ","position":{"start":{"line":1064,"column":24,"offset":23679},"end":{"line":1064,"column":34,"offset":23689},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Deployment","position":{"start":{"line":1064,"column":36,"offset":23691},"end":{"line":1064,"column":46,"offset":23701},"indent":[]}}],"position":{"start":{"line":1064,"column":34,"offset":23689},"end":{"line":1064,"column":48,"offset":23703},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1064,"column":48,"offset":23703},"end":{"line":1064,"column":49,"offset":23704},"indent":[]}}],"position":{"start":{"line":1064,"column":4,"offset":23659},"end":{"line":1064,"column":49,"offset":23704},"indent":[]}}],"position":{"start":{"line":1064,"column":1,"offset":23656},"end":{"line":1064,"column":49,"offset":23704},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create the ","position":{"start":{"line":1065,"column":4,"offset":23708},"end":{"line":1065,"column":15,"offset":23719},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Gateway","position":{"start":{"line":1065,"column":17,"offset":23721},"end":{"line":1065,"column":24,"offset":23728},"indent":[]}}],"position":{"start":{"line":1065,"column":15,"offset":23719},"end":{"line":1065,"column":26,"offset":23730},"indent":[]}},{"type":"text","value":" that uses the default ","position":{"start":{"line":1065,"column":26,"offset":23730},"end":{"line":1065,"column":49,"offset":23753},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Istio Gateway","position":{"start":{"line":1065,"column":51,"offset":23755},"end":{"line":1065,"column":64,"offset":23768},"indent":[]}}],"position":{"start":{"line":1065,"column":49,"offset":23753},"end":{"line":1065,"column":66,"offset":23770},"indent":[]}},{"type":"text","value":" to access the ","position":{"start":{"line":1065,"column":66,"offset":23770},"end":{"line":1065,"column":81,"offset":23785},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Services","position":{"start":{"line":1065,"column":83,"offset":23787},"end":{"line":1065,"column":91,"offset":23795},"indent":[]}}],"position":{"start":{"line":1065,"column":81,"offset":23785},"end":{"line":1065,"column":93,"offset":23797},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1065,"column":93,"offset":23797},"end":{"line":1065,"column":94,"offset":23798},"indent":[]}}],"position":{"start":{"line":1065,"column":4,"offset":23708},"end":{"line":1065,"column":94,"offset":23798},"indent":[]}}],"position":{"start":{"line":1065,"column":1,"offset":23705},"end":{"line":1065,"column":94,"offset":23798},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create the ","position":{"start":{"line":1066,"column":4,"offset":23802},"end":{"line":1066,"column":15,"offset":23813},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"VirtualService","position":{"start":{"line":1066,"column":17,"offset":23815},"end":{"line":1066,"column":31,"offset":23829},"indent":[]}}],"position":{"start":{"line":1066,"column":15,"offset":23813},"end":{"line":1066,"column":33,"offset":23831},"indent":[]}},{"type":"text","value":" that gives us access to the hello world app through the ","position":{"start":{"line":1066,"column":33,"offset":23831},"end":{"line":1066,"column":90,"offset":23888},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Gateway","position":{"start":{"line":1066,"column":92,"offset":23890},"end":{"line":1066,"column":99,"offset":23897},"indent":[]}}],"position":{"start":{"line":1066,"column":90,"offset":23888},"end":{"line":1066,"column":101,"offset":23899},"indent":[]}},{"type":"text","value":" connected to the ","position":{"start":{"line":1066,"column":101,"offset":23899},"end":{"line":1066,"column":119,"offset":23917},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Service","position":{"start":{"line":1066,"column":121,"offset":23919},"end":{"line":1066,"column":128,"offset":23926},"indent":[]}}],"position":{"start":{"line":1066,"column":119,"offset":23917},"end":{"line":1066,"column":130,"offset":23928},"indent":[]}},{"type":"text","value":" which sits within the ","position":{"start":{"line":1066,"column":130,"offset":23928},"end":{"line":1066,"column":153,"offset":23951},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ServiceMesh","position":{"start":{"line":1066,"column":155,"offset":23953},"end":{"line":1066,"column":166,"offset":23964},"indent":[]}}],"position":{"start":{"line":1066,"column":153,"offset":23951},"end":{"line":1066,"column":168,"offset":23966},"indent":[]}},{"type":"text","value":" from the ","position":{"start":{"line":1066,"column":168,"offset":23966},"end":{"line":1066,"column":178,"offset":23976},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"IngressController","position":{"start":{"line":1066,"column":180,"offset":23978},"end":{"line":1066,"column":197,"offset":23995},"indent":[]}}],"position":{"start":{"line":1066,"column":178,"offset":23976},"end":{"line":1066,"column":199,"offset":23997},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1066,"column":199,"offset":23997},"end":{"line":1066,"column":200,"offset":23998},"indent":[]}}],"position":{"start":{"line":1066,"column":4,"offset":23802},"end":{"line":1066,"column":200,"offset":23998},"indent":[]}}],"position":{"start":{"line":1066,"column":1,"offset":23799},"end":{"line":1066,"column":200,"offset":23998},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create the ","position":{"start":{"line":1067,"column":4,"offset":24002},"end":{"line":1067,"column":15,"offset":24013},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DestinationRule","position":{"start":{"line":1067,"column":17,"offset":24015},"end":{"line":1067,"column":32,"offset":24030},"indent":[]}}],"position":{"start":{"line":1067,"column":15,"offset":24013},"end":{"line":1067,"column":34,"offset":24032},"indent":[]}},{"type":"text","value":" that allows allows access to the ","position":{"start":{"line":1067,"column":34,"offset":24032},"end":{"line":1067,"column":68,"offset":24066},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"VirtualService","position":{"start":{"line":1067,"column":70,"offset":24068},"end":{"line":1067,"column":84,"offset":24082},"indent":[]}}],"position":{"start":{"line":1067,"column":68,"offset":24066},"end":{"line":1067,"column":86,"offset":24084},"indent":[]}},{"type":"text","value":" using ","position":{"start":{"line":1067,"column":86,"offset":24084},"end":{"line":1067,"column":93,"offset":24091},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"MTLS","position":{"start":{"line":1067,"column":95,"offset":24093},"end":{"line":1067,"column":99,"offset":24097},"indent":[]}}],"position":{"start":{"line":1067,"column":93,"offset":24091},"end":{"line":1067,"column":101,"offset":24099},"indent":[]}},{"type":"text","value":" from the ","position":{"start":{"line":1067,"column":101,"offset":24099},"end":{"line":1067,"column":111,"offset":24109},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"IngressController","position":{"start":{"line":1067,"column":113,"offset":24111},"end":{"line":1067,"column":130,"offset":24128},"indent":[]}}],"position":{"start":{"line":1067,"column":111,"offset":24109},"end":{"line":1067,"column":132,"offset":24130},"indent":[]}},{"type":"text","value":" which is a ","position":{"start":{"line":1067,"column":132,"offset":24130},"end":{"line":1067,"column":144,"offset":24142},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Reverse Proxy internal load balancer","position":{"start":{"line":1067,"column":146,"offset":24144},"end":{"line":1067,"column":182,"offset":24180},"indent":[]}}],"position":{"start":{"line":1067,"column":144,"offset":24142},"end":{"line":1067,"column":184,"offset":24182},"indent":[]}},{"type":"text","value":" accessed from the external ","position":{"start":{"line":1067,"column":184,"offset":24182},"end":{"line":1067,"column":212,"offset":24210},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"AWS LoadBalancer","position":{"start":{"line":1067,"column":214,"offset":24212},"end":{"line":1067,"column":230,"offset":24228},"indent":[]}}],"position":{"start":{"line":1067,"column":212,"offset":24210},"end":{"line":1067,"column":232,"offset":24230},"indent":[]}},{"type":"text","value":" tied to the accessible ","position":{"start":{"line":1067,"column":232,"offset":24230},"end":{"line":1067,"column":256,"offset":24254},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"DNS Records","position":{"start":{"line":1067,"column":258,"offset":24256},"end":{"line":1067,"column":269,"offset":24267},"indent":[]}}],"position":{"start":{"line":1067,"column":256,"offset":24254},"end":{"line":1067,"column":271,"offset":24269},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1067,"column":271,"offset":24269},"end":{"line":1067,"column":272,"offset":24270},"indent":[]}}],"position":{"start":{"line":1067,"column":4,"offset":24002},"end":{"line":1067,"column":272,"offset":24270},"indent":[]}}],"position":{"start":{"line":1067,"column":1,"offset":23999},"end":{"line":1067,"column":272,"offset":24270},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"You can now access the microservice from the ","position":{"start":{"line":1068,"column":4,"offset":24274},"end":{"line":1068,"column":49,"offset":24319},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"AWS LoadBalancer Route53 alias","position":{"start":{"line":1068,"column":51,"offset":24321},"end":{"line":1068,"column":81,"offset":24351},"indent":[]}}],"position":{"start":{"line":1068,"column":49,"offset":24319},"end":{"line":1068,"column":83,"offset":24353},"indent":[]}},{"type":"text","value":" passing the ","position":{"start":{"line":1068,"column":83,"offset":24353},"end":{"line":1068,"column":96,"offset":24366},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"internal namespace domain","position":{"start":{"line":1068,"column":98,"offset":24368},"end":{"line":1068,"column":123,"offset":24393},"indent":[]}}],"position":{"start":{"line":1068,"column":96,"offset":24366},"end":{"line":1068,"column":125,"offset":24395},"indent":[]}},{"type":"text","value":" as the ","position":{"start":{"line":1068,"column":125,"offset":24395},"end":{"line":1068,"column":133,"offset":24403},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"host header","position":{"start":{"line":1068,"column":135,"offset":24405},"end":{"line":1068,"column":146,"offset":24416},"indent":[]}}],"position":{"start":{"line":1068,"column":133,"offset":24403},"end":{"line":1068,"column":148,"offset":24418},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1068,"column":148,"offset":24418},"end":{"line":1068,"column":149,"offset":24419},"indent":[]}}],"position":{"start":{"line":1068,"column":4,"offset":24274},"end":{"line":1068,"column":149,"offset":24419},"indent":[]}}],"position":{"start":{"line":1068,"column":1,"offset":24271},"end":{"line":1068,"column":149,"offset":24419},"indent":[]}}],"position":{"start":{"line":1060,"column":1,"offset":23233},"end":{"line":1068,"column":149,"offset":24419},"indent":[1,1,1,1,1,1,1,1]}},{"type":"code","lang":"yaml","meta":null,"value":"# ! helloworld-rbac.yaml file\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: hello-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"hello.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: world-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"world.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: world-2-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"world-2.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: istio-ingress-binding\n  namespace: default\nspec:\n  subjects:\n  - properties:\n      source.namespace: \"istio-system\"\n  roleRef:\n    kind: ServiceRole\n    name: \"hello-viewer\"\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: hello-user-binding\n  namespace: default\nspec:\n  subjects:\n  - user: \"cluster.local/ns/default/sa/hello\"\n  roleRef:\n    kind: ServiceRole\n    name: \"world-viewer\"\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: world-user-binding\n  namespace: default\nspec:\n  subjects:\n  - user: \"cluster.local/ns/default/sa/world\"\n  roleRef:\n    kind: ServiceRole\n    name: \"world-2-viewer\"\n---\n###\n### Kubernetes Service accounts\n###\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: hello\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: world\n---\n###\n### helloworld.yaml deployments, including a serviceaccount\n### for the hello deployment and the world deployment\n###\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      serviceAccountName: hello  # service account\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1\n    spec:\n      serviceAccountName: world  # service account\n      containers:\n      - name: world\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world-2\n        version: v1\n    spec:\n      containers:\n      - name: world-2\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-2\n  labels:\n    app: world-2\nspec:\n  selector:\n    app: world-2\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello-rbac.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v1\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  # uncomment to enable mutual TLS\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1\n    labels:\n      version: v1","position":{"start":{"line":1070,"column":1,"offset":24421},"end":{"line":1316,"column":4,"offset":28867},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This again requires the rbac prequisite:","position":{"start":{"line":1318,"column":1,"offset":28869},"end":{"line":1318,"column":41,"offset":28909},"indent":[]}}],"position":{"start":{"line":1318,"column":1,"offset":28869},"end":{"line":1318,"column":41,"offset":28909},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"# helloworld-rbac-enable.yaml\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\n# ensures mtls is push to side cars\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"legacy\"\nspec:\n  host: \"end.legacy.svc.cluster.local\"\n  trafficPolicy:\n    tls:\n      mode: DISABLE","position":{"start":{"line":1320,"column":1,"offset":28911},"end":{"line":1361,"column":4,"offset":29756},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/gitgoodclub/image/upload/v1540159695/Screen_Shot_2018-10-22_at_9.07.45_am.png","alt":"After applying the files to Istio","position":{"start":{"line":1363,"column":1,"offset":29758},"end":{"line":1363,"column":143,"offset":29900},"indent":[]}}],"position":{"start":{"line":1363,"column":1,"offset":29758},"end":{"line":1363,"column":143,"offset":29900},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Evidently enough, it is incredibly important to ensure the routing is set up correctly so there is no large scale failure.","position":{"start":{"line":1365,"column":1,"offset":29902},"end":{"line":1365,"column":123,"offset":30024},"indent":[]}}],"position":{"start":{"line":1365,"column":1,"offset":29902},"end":{"line":1365,"column":123,"offset":30024},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"7.9 End-user Authentication","position":{"start":{"line":1367,"column":4,"offset":30029},"end":{"line":1367,"column":31,"offset":30056},"indent":[]}}],"position":{"start":{"line":1367,"column":1,"offset":30026},"end":{"line":1367,"column":31,"offset":30056},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Istio currently supports JWT tokens to authenticate users.","position":{"start":{"line":1369,"column":1,"offset":30058},"end":{"line":1369,"column":59,"offset":30116},"indent":[]}}],"position":{"start":{"line":1369,"column":1,"offset":30058},"end":{"line":1369,"column":59,"offset":30116},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the implementation, the user will receive a JWT token from an authenticated server after logging in.","position":{"start":{"line":1371,"column":1,"offset":30118},"end":{"line":1371,"column":104,"offset":30221},"indent":[]}}],"position":{"start":{"line":1371,"column":1,"offset":30118},"end":{"line":1371,"column":104,"offset":30221},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This app will provide us with a token that is ","position":{"start":{"line":1373,"column":3,"offset":30225},"end":{"line":1373,"column":49,"offset":30271},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"signed with a key","position":{"start":{"line":1373,"column":51,"offset":30273},"end":{"line":1373,"column":68,"offset":30290},"indent":[]}}],"position":{"start":{"line":1373,"column":49,"offset":30271},"end":{"line":1373,"column":70,"offset":30292},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1373,"column":70,"offset":30292},"end":{"line":1373,"column":71,"offset":30293},"indent":[]}}],"position":{"start":{"line":1373,"column":3,"offset":30225},"end":{"line":1373,"column":71,"offset":30293},"indent":[]}}],"position":{"start":{"line":1373,"column":1,"offset":30223},"end":{"line":1373,"column":71,"offset":30293},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The data is not encrypted, but the ","position":{"start":{"line":1374,"column":3,"offset":30296},"end":{"line":1374,"column":38,"offset":30331},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"token contains a signature","position":{"start":{"line":1374,"column":40,"offset":30333},"end":{"line":1374,"column":66,"offset":30359},"indent":[]}}],"position":{"start":{"line":1374,"column":38,"offset":30331},"end":{"line":1374,"column":68,"offset":30361},"indent":[]}},{"type":"text","value":", which can be ","position":{"start":{"line":1374,"column":68,"offset":30361},"end":{"line":1374,"column":83,"offset":30376},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"verified","position":{"start":{"line":1374,"column":85,"offset":30378},"end":{"line":1374,"column":93,"offset":30386},"indent":[]}}],"position":{"start":{"line":1374,"column":83,"offset":30376},"end":{"line":1374,"column":95,"offset":30388},"indent":[]}},{"type":"text","value":" to see ","position":{"start":{"line":1374,"column":95,"offset":30388},"end":{"line":1374,"column":103,"offset":30396},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"whether it was really created by the server","position":{"start":{"line":1374,"column":105,"offset":30398},"end":{"line":1374,"column":148,"offset":30441},"indent":[]}}],"position":{"start":{"line":1374,"column":103,"offset":30396},"end":{"line":1374,"column":150,"offset":30443},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1374,"column":150,"offset":30443},"end":{"line":1374,"column":151,"offset":30444},"indent":[]}}],"position":{"start":{"line":1374,"column":3,"offset":30296},"end":{"line":1374,"column":151,"offset":30444},"indent":[]}}],"position":{"start":{"line":1374,"column":1,"offset":30294},"end":{"line":1374,"column":151,"offset":30444},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Only the server has the ","position":{"start":{"line":1375,"column":3,"offset":30447},"end":{"line":1375,"column":27,"offset":30471},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"private key","position":{"start":{"line":1375,"column":29,"offset":30473},"end":{"line":1375,"column":40,"offset":30484},"indent":[]}}],"position":{"start":{"line":1375,"column":27,"offset":30471},"end":{"line":1375,"column":42,"offset":30486},"indent":[]}},{"type":"text","value":", so we can't recreate or tamper with the token.","position":{"start":{"line":1375,"column":42,"offset":30486},"end":{"line":1375,"column":90,"offset":30534},"indent":[]}}],"position":{"start":{"line":1375,"column":3,"offset":30447},"end":{"line":1375,"column":90,"offset":30534},"indent":[]}}],"position":{"start":{"line":1375,"column":1,"offset":30445},"end":{"line":1375,"column":90,"offset":30534},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Using microservices, every app would need to be ","position":{"start":{"line":1376,"column":3,"offset":30537},"end":{"line":1376,"column":51,"offset":30585},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"seperately configured","position":{"start":{"line":1376,"column":53,"offset":30587},"end":{"line":1376,"column":74,"offset":30608},"indent":[]}}],"position":{"start":{"line":1376,"column":51,"offset":30585},"end":{"line":1376,"column":76,"offset":30610},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1376,"column":76,"offset":30610},"end":{"line":1376,"column":77,"offset":30611},"indent":[]}}],"position":{"start":{"line":1376,"column":3,"offset":30537},"end":{"line":1376,"column":77,"offset":30611},"indent":[]}}],"position":{"start":{"line":1376,"column":1,"offset":30535},"end":{"line":1376,"column":77,"offset":30611},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Every service would need to ","position":{"start":{"line":1377,"column":3,"offset":30614},"end":{"line":1377,"column":31,"offset":30642},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"validate the token","position":{"start":{"line":1377,"column":33,"offset":30644},"end":{"line":1377,"column":51,"offset":30662},"indent":[]}}],"position":{"start":{"line":1377,"column":31,"offset":30642},"end":{"line":1377,"column":53,"offset":30664},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1377,"column":53,"offset":30664},"end":{"line":1377,"column":54,"offset":30665},"indent":[]}}],"position":{"start":{"line":1377,"column":3,"offset":30614},"end":{"line":1377,"column":54,"offset":30665},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Once validated the service would need to check whether the user has access to this service.","position":{"start":{"line":1378,"column":5,"offset":30670},"end":{"line":1378,"column":96,"offset":30761},"indent":[]}}],"position":{"start":{"line":1378,"column":5,"offset":30670},"end":{"line":1378,"column":96,"offset":30761},"indent":[]}}],"position":{"start":{"line":1378,"column":3,"offset":30668},"end":{"line":1378,"column":96,"offset":30761},"indent":[]}}],"position":{"start":{"line":1378,"column":3,"offset":30668},"end":{"line":1378,"column":96,"offset":30761},"indent":[]}}],"position":{"start":{"line":1377,"column":1,"offset":30612},"end":{"line":1378,"column":96,"offset":30761},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"With Istio, ","position":{"start":{"line":1379,"column":3,"offset":30764},"end":{"line":1379,"column":15,"offset":30776},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"this can be taken away from the app code and managed centrally.","position":{"start":{"line":1379,"column":17,"offset":30778},"end":{"line":1379,"column":80,"offset":30841},"indent":[]}}],"position":{"start":{"line":1379,"column":15,"offset":30776},"end":{"line":1379,"column":82,"offset":30843},"indent":[]}}],"position":{"start":{"line":1379,"column":3,"offset":30764},"end":{"line":1379,"column":82,"offset":30843},"indent":[]}}],"position":{"start":{"line":1379,"column":1,"offset":30762},"end":{"line":1379,"column":82,"offset":30843},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"You can configure the ","position":{"start":{"line":1380,"column":3,"offset":30846},"end":{"line":1380,"column":25,"offset":30868},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"jwt token signature/properties","position":{"start":{"line":1380,"column":27,"offset":30870},"end":{"line":1380,"column":57,"offset":30900},"indent":[]}}],"position":{"start":{"line":1380,"column":25,"offset":30868},"end":{"line":1380,"column":59,"offset":30902},"indent":[]}},{"type":"text","value":" you expect in into and have ","position":{"start":{"line":1380,"column":59,"offset":30902},"end":{"line":1380,"column":88,"offset":30931},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"policies to allow/disallow access to a service.","position":{"start":{"line":1380,"column":90,"offset":30933},"end":{"line":1380,"column":137,"offset":30980},"indent":[]}}],"position":{"start":{"line":1380,"column":88,"offset":30931},"end":{"line":1380,"column":139,"offset":30982},"indent":[]}}],"position":{"start":{"line":1380,"column":3,"offset":30846},"end":{"line":1380,"column":139,"offset":30982},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Example \"hello\" app might only be accessible if user is authenticated.","position":{"start":{"line":1381,"column":5,"offset":30987},"end":{"line":1381,"column":75,"offset":31057},"indent":[]}}],"position":{"start":{"line":1381,"column":5,"offset":30987},"end":{"line":1381,"column":75,"offset":31057},"indent":[]}}],"position":{"start":{"line":1381,"column":3,"offset":30985},"end":{"line":1381,"column":75,"offset":31057},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":1382,"column":5,"offset":31062},"end":{"line":1382,"column":9,"offset":31066},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"sidecar","position":{"start":{"line":1382,"column":11,"offset":31068},"end":{"line":1382,"column":18,"offset":31075},"indent":[]}}],"position":{"start":{"line":1382,"column":9,"offset":31066},"end":{"line":1382,"column":20,"offset":31077},"indent":[]}},{"type":"text","value":" will verify the ","position":{"start":{"line":1382,"column":20,"offset":31077},"end":{"line":1382,"column":37,"offset":31094},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"validity","position":{"start":{"line":1382,"column":39,"offset":31096},"end":{"line":1382,"column":47,"offset":31104},"indent":[]}}],"position":{"start":{"line":1382,"column":37,"offset":31094},"end":{"line":1382,"column":49,"offset":31106},"indent":[]}},{"type":"text","value":" of the signature, to make sure the token is valid.","position":{"start":{"line":1382,"column":49,"offset":31106},"end":{"line":1382,"column":100,"offset":31157},"indent":[]}}],"position":{"start":{"line":1382,"column":5,"offset":31062},"end":{"line":1382,"column":100,"offset":31157},"indent":[]}}],"position":{"start":{"line":1382,"column":3,"offset":31060},"end":{"line":1382,"column":100,"offset":31157},"indent":[]}}],"position":{"start":{"line":1381,"column":3,"offset":30985},"end":{"line":1382,"column":100,"offset":31157},"indent":[3]}}],"position":{"start":{"line":1380,"column":1,"offset":30844},"end":{"line":1382,"column":100,"offset":31157},"indent":[1,1]}}],"position":{"start":{"line":1373,"column":1,"offset":30223},"end":{"line":1382,"column":100,"offset":31157},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/gitgoodclub/image/upload/v1540160832/Screen_Shot_2018-10-22_at_9.26.42_am.png","alt":"JWT Token setup","position":{"start":{"line":1384,"column":1,"offset":31159},"end":{"line":1384,"column":125,"offset":31283},"indent":[]}}],"position":{"start":{"line":1384,"column":1,"offset":31159},"end":{"line":1384,"column":125,"offset":31283},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"# Istio with JWT Auth\n# helloworld-jwt.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-auth\nspec:\n  # this is a change to previous\n  hosts:\n  - \"auth.kubernetes.newtech.academy\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: auth.default.svc.cluster.local\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-hello\nspec:\n  hosts:\n  - \"hello.kubernetes.newtech.academy\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: auth\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: auth\n        version: v1\n    spec:\n      containers:\n      - name: auth\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: this is the authentication service\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth\n  labels:\n    app: auth\nspec:\n  selector:\n    app: auth\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: Hello, you can only reach this service when authenticated\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n###\n### Enable TLS\n###\n---\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE","position":{"start":{"line":1386,"column":1,"offset":31285},"end":{"line":1540,"column":4,"offset":34055},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To get to auth, we need to create an alias for ","position":{"start":{"line":1542,"column":1,"offset":34057},"end":{"line":1542,"column":48,"offset":34104},"indent":[]}},{"type":"inlineCode","value":"auth.domain.name","position":{"start":{"line":1542,"column":48,"offset":34104},"end":{"line":1542,"column":66,"offset":34122},"indent":[]}},{"type":"text","value":" in Route 53 to expose the load balancer.","position":{"start":{"line":1542,"column":66,"offset":34122},"end":{"line":1542,"column":107,"offset":34163},"indent":[]}}],"position":{"start":{"line":1542,"column":1,"offset":34057},"end":{"line":1542,"column":107,"offset":34163},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To enable the policy for the JWT token auth to take effect, we need to apply the following to the cluster:","position":{"start":{"line":1544,"column":1,"offset":34165},"end":{"line":1544,"column":107,"offset":34271},"indent":[]}}],"position":{"start":{"line":1544,"column":1,"offset":34165},"end":{"line":1544,"column":107,"offset":34271},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"# helloworld-jwt-enable.yaml\napiVersion: \"authentication.istio.io/v1alpha1\"\nkind: \"Policy\"\nmetadata:\n  name: \"jwt-example\"\nspec:\n  targets:\n  - name: hello\n  peers:\n  - mtls: {}\n  origins:\n  - jwt:\n  \t  # jwksUri is from auth uri we setup in Route53\n      issuer: \"http-echo@http-echo.kubernetes.newtech.academy\"\n      jwksUri: \"http://auth.kubernetes.newtech.academy/.well-known/jwks.json\"\n  principalBinding: USE_ORIGIN\n---","position":{"start":{"line":1546,"column":1,"offset":34273},"end":{"line":1564,"column":4,"offset":34710},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"After fetching the token, we can now access authenticated routes by passing the header ","position":{"start":{"line":1566,"column":1,"offset":34712},"end":{"line":1566,"column":88,"offset":34799},"indent":[]}},{"type":"inlineCode","value":"\"Authorization\": \"Bearer $TOKEN\"","position":{"start":{"line":1566,"column":88,"offset":34799},"end":{"line":1566,"column":122,"offset":34833},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1566,"column":122,"offset":34833},"end":{"line":1566,"column":123,"offset":34834},"indent":[]}}],"position":{"start":{"line":1566,"column":1,"offset":34712},"end":{"line":1566,"column":123,"offset":34834},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The example uses ","position":{"start":{"line":1568,"column":1,"offset":34836},"end":{"line":1568,"column":18,"offset":34853},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/wardviaene/http-echo/blob/master/main.go","children":[{"type":"text","value":"this Github repo","position":{"start":{"line":1568,"column":19,"offset":34854},"end":{"line":1568,"column":35,"offset":34870},"indent":[]}}],"position":{"start":{"line":1568,"column":18,"offset":34853},"end":{"line":1568,"column":97,"offset":34932},"indent":[]}},{"type":"text","value":" with the /login route to do auth and another route to check the auth from other services.","position":{"start":{"line":1568,"column":97,"offset":34932},"end":{"line":1568,"column":187,"offset":35022},"indent":[]}}],"position":{"start":{"line":1568,"column":1,"offset":34836},"end":{"line":1568,"column":187,"offset":35022},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Something useful is that you can also check the logs of the Istio proxy. This can be done with ","position":{"start":{"line":1570,"column":1,"offset":35024},"end":{"line":1570,"column":96,"offset":35119},"indent":[]}},{"type":"inlineCode","value":"kubectl logs <% pod_name %> -c istio-proxy","position":{"start":{"line":1570,"column":96,"offset":35119},"end":{"line":1570,"column":140,"offset":35163},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1570,"column":140,"offset":35163},"end":{"line":1570,"column":141,"offset":35164},"indent":[]}}],"position":{"start":{"line":1570,"column":1,"offset":35024},"end":{"line":1570,"column":141,"offset":35164},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"7.10 Istio Ingress Traffic","position":{"start":{"line":1572,"column":4,"offset":35169},"end":{"line":1572,"column":30,"offset":35195},"indent":[]}}],"position":{"start":{"line":1572,"column":1,"offset":35166},"end":{"line":1572,"column":30,"offset":35195},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To enable ingress traffic to allow to access outside services, we can apply an external service file. The following example will allow the ","position":{"start":{"line":1574,"column":1,"offset":35197},"end":{"line":1574,"column":140,"offset":35336},"indent":[]}},{"type":"inlineCode","value":"ifconfig.co","position":{"start":{"line":1574,"column":140,"offset":35336},"end":{"line":1574,"column":153,"offset":35349},"indent":[]}},{"type":"text","value":" hostname to be accessible from the pods.","position":{"start":{"line":1574,"column":153,"offset":35349},"end":{"line":1574,"column":194,"offset":35390},"indent":[]}}],"position":{"start":{"line":1574,"column":1,"offset":35197},"end":{"line":1574,"column":194,"offset":35390},"indent":[]}},{"type":"code","lang":"yaml","meta":null,"value":"# external-service.yaml\n#\n# http\n#\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: ifconfig-co-http\nspec:\n  hosts:\n  - ifconfig.co\n  ports:\n  - number: 80\n    name: http\n    protocol: HTTP\n  resolution: DNS\n  location: MESH_EXTERNAL\n---\n#\n# https\n#\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: ifconfig-co-https\nspec:\n  hosts:\n  - ifconfig.co\n  ports:\n  - number: 443\n    name: https\n    protocol: HTTPS\n  resolution: DNS\n  location: MESH_EXTERNAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: ifconfig-co\nspec:\n  hosts:\n  - ifconfig.co\n  tls:\n  - match:\n    - port: 443\n      sni_hosts:\n      - ifconfig.co\n    route:\n    - destination:\n        host: ifconfig.co\n        port:\n          number: 443\n      weight: 100","position":{"start":{"line":1576,"column":1,"offset":35392},"end":{"line":1630,"column":4,"offset":36222},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You should now be able to log into the pod to try out contacting other services.","position":{"start":{"line":1632,"column":1,"offset":36224},"end":{"line":1632,"column":81,"offset":36304},"indent":[]}}],"position":{"start":{"line":1632,"column":1,"offset":36224},"end":{"line":1632,"column":81,"offset":36304},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"7.10 Distributed Tracing with Jaegar","position":{"start":{"line":1634,"column":4,"offset":36309},"end":{"line":1634,"column":40,"offset":36345},"indent":[]}}],"position":{"start":{"line":1634,"column":1,"offset":36306},"end":{"line":1634,"column":40,"offset":36345},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Jaegar is automatically stored in the ","position":{"start":{"line":1636,"column":1,"offset":36347},"end":{"line":1636,"column":39,"offset":36385},"indent":[]}},{"type":"inlineCode","value":"isto-system","position":{"start":{"line":1636,"column":39,"offset":36385},"end":{"line":1636,"column":52,"offset":36398},"indent":[]}},{"type":"text","value":". You can confirm this with the following:","position":{"start":{"line":1636,"column":52,"offset":36398},"end":{"line":1636,"column":94,"offset":36440},"indent":[]}}],"position":{"start":{"line":1636,"column":1,"offset":36347},"end":{"line":1636,"column":94,"offset":36440},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"$ kubectl get pod -n istio-system # istio-tracing pod\n$ kubectl get svc -n istio-system # jaegar-[agent/collector/query]\n# You could export the port for jaegar-query by updating the service\n$ kubectl edit svc jaegar-query -n istio-system # changing ClusterIP to LoadBalancer","position":{"start":{"line":1638,"column":1,"offset":36442},"end":{"line":1643,"column":4,"offset":36728},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To find the traces, you need to find the svc ","position":{"start":{"line":1645,"column":1,"offset":36730},"end":{"line":1645,"column":46,"offset":36775},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"LoadBalancer","position":{"start":{"line":1645,"column":48,"offset":36777},"end":{"line":1645,"column":60,"offset":36789},"indent":[]}}],"position":{"start":{"line":1645,"column":46,"offset":36775},"end":{"line":1645,"column":62,"offset":36791},"indent":[]}},{"type":"text","value":" port for Jaegar Query and then you can access the web url using the port.","position":{"start":{"line":1645,"column":62,"offset":36791},"end":{"line":1645,"column":136,"offset":36865},"indent":[]}}],"position":{"start":{"line":1645,"column":1,"offset":36730},"end":{"line":1645,"column":136,"offset":36865},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This ports are only internal, so you would either need to expose the IP address or use ","position":{"start":{"line":1647,"column":1,"offset":36867},"end":{"line":1647,"column":88,"offset":36954},"indent":[]}},{"type":"inlineCode","value":"kubectl port-forward","position":{"start":{"line":1647,"column":88,"offset":36954},"end":{"line":1647,"column":110,"offset":36976},"indent":[]}},{"type":"text","value":" to forward all the ports on.","position":{"start":{"line":1647,"column":110,"offset":36976},"end":{"line":1647,"column":139,"offset":37005},"indent":[]}}],"position":{"start":{"line":1647,"column":1,"offset":36867},"end":{"line":1647,"column":139,"offset":37005},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To results, you'll need to use the ","position":{"start":{"line":1649,"column":1,"offset":37007},"end":{"line":1649,"column":36,"offset":37042},"indent":[]}},{"type":"inlineCode","value":"open-tracing","position":{"start":{"line":1649,"column":36,"offset":37042},"end":{"line":1649,"column":50,"offset":37056},"indent":[]}},{"type":"text","value":" headers.","position":{"start":{"line":1649,"column":50,"offset":37056},"end":{"line":1649,"column":59,"offset":37065},"indent":[]}}],"position":{"start":{"line":1649,"column":1,"offset":37007},"end":{"line":1649,"column":59,"offset":37065},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"7.11 Istio Metrics with Grafana","position":{"start":{"line":1651,"column":4,"offset":37070},"end":{"line":1651,"column":35,"offset":37101},"indent":[]}}],"position":{"start":{"line":1651,"column":1,"offset":37067},"end":{"line":1651,"column":35,"offset":37101},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Similar to Jaegar, you can find the Grafana service by getting the services for the Istio System.","position":{"start":{"line":1653,"column":1,"offset":37103},"end":{"line":1653,"column":98,"offset":37200},"indent":[]}}],"position":{"start":{"line":1653,"column":1,"offset":37103},"end":{"line":1653,"column":98,"offset":37200},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"$ kubectl get svc -n istio-system # grafana\n# You could export the port for grafana by updating the service\n$ kubectl edit svc grafana -n istio-system # changing ClusterIP to LoadBalancer","position":{"start":{"line":1655,"column":1,"offset":37202},"end":{"line":1659,"column":4,"offset":37401},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":1661,"column":1,"offset":37403},"end":{"line":1661,"column":31,"offset":37433},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1661,"column":31,"offset":37433}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"7-microservices\"\n    }}>{`7. Microservices`}</h1>\n    <p>{`If we have multiple apps that require information from between each other, we need to start talking about the  `}<strong parentName=\"p\">{`service mesh`}</strong>{`. Normally between applications,  we run into the following problems:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`There is no encryption`}</li>\n      <li parentName=\"ul\">{`No retries.`}</li>\n      <li parentName=\"ul\">{`No fallover.`}</li>\n      <li parentName=\"ul\">{`No intelligent load balancer.`}</li>\n      <li parentName=\"ul\">{`No routing decisions.`}</li>\n      <li parentName=\"ul\">{`No metrics/logs/traces.`}</li>\n      <li parentName=\"ul\">{`No access control.`}</li>\n    </ul>\n    <p>{`One solution is to implement `}<strong parentName=\"p\">{`sidecars`}</strong>{` which is a proxy to every single microservice. This can resolve issues such as encryption, retries when a connection fails, intelligent load balancing.`}</p>\n    <p>{`You could also add a `}<strong parentName=\"p\">{`management interface`}</strong>{` which resolves routing decisions, metrics/logs/traces and access control (ie valid certificate etc).`}</p>\n    <p>{`This brings us to `}<strong parentName=\"p\">{`Istio`}</strong>{`.`}</p>\n    <p><img alt=\"Istio diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540090167/istio-diagram.png\" /></p>\n    <h2 {...{\n      \"id\": \"71-istio-installation\"\n    }}>{`7.1 Istio Installation`}</h2>\n    <p>{`If you want to use Istio, it's worth now using a node with enough memory ie t2.medium.`}</p>\n    <h3 {...{\n      \"id\": \"kops-configuration\"\n    }}>{`Kops configuration`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kops edit cluster kubernetes.newtech.academy\n`}</code></pre>\n    <p>{`Add:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`spec:\n  kubeAPIServer:\n    admissionControl:\n    - NamespaceLifecycle\n    - LimitRanger\n    - ServiceAccount\n    - PersistentVolumeLabel\n    - DefaultStorageClass\n    - DefaultTolerationSeconds\n    - MutatingAdmissionWebhook\n    - ValidatingAdmissionWebhook\n    - ResourceQuota\n    - NodeRestriction\n    - Priority\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"download-102\"\n    }}>{`Download (1.0.2):`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ cd ~\n$ wget https://github.com/istio/istio/releases/download/1.0.2/istio-1.0.2-linux.tar.gz\ntar -xzvf istio-1.0.2-linux.tar.gz\n$ cd istio-1.0.2\n# Alternatively just export the PATH so you don't have to logout\n$ echo 'export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"' >> ~/.profile\n$ istioctl # check everything is running correctly\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"download-latest\"\n    }}>{`Download (latest):`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ cd ~\n$ curl -L https://git.io/getLatestIstio | sh -\n$ echo 'export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"' >> ~/.profile # change 1.0.2 in your version -- alternative just export the PATH so you don't have to logout\n$ cd istio-1.0.2 # change 1.0.2 in your version\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"istio-install\"\n    }}>{`Istio install`}</h3>\n    <p>{`Apply CRDs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/helm/istio/templates/crds.yaml\n`}</code></pre>\n    <p>{`Wait a few seconds.`}</p>\n    <p>{`Option 1: with no mutual TLS authentication`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/istio-demo.yaml\n`}</code></pre>\n    <p>{`Option 2: or with mutual TLS authentication`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f ~/istio-1.0.2/install/kubernetes/istio-demo-auth.yaml\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"72-example-app\"\n    }}>{`7.2 Example app`}</h2>\n    <p><img alt=\"Example app diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540091246/Screen_Shot_2018-10-21_at_2.07.07_pm.png\" /></p>\n    <h3 {...{\n      \"id\": \"example-app-from-istio\"\n    }}>{`Example app (from istio)`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"\nkubectl apply -f <(istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"hello-world-app\"\n    }}>{`Hello world app`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export PATH=\"$PATH:/home/ubuntu/istio-1.0.2/bin\"\nkubectl apply -f <(istioctl kube-inject -f helloworld.yaml)\nkubectl apply -f helloworld-gw.yaml\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld.yaml\n# Spinning up the container for a simple hello world app\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing a service for \"hello\"\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n# Spinning up container for world\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1\n    spec:\n      containers:\n      - name: world\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing world container\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n# World 2 deployment\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-2\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: world-2\n        version: v1\n    spec:\n      containers:\n      - name: world-2\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\" \n        ports:\n        - name: http\n          containerPort: 8080\n---\n# Exposing service for world 2 deployment\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-2\n  labels:\n    app: world-2\nspec:\n  selector:\n    app: world-2\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\n`}</code></pre>\n    <p>{`After deploying and applying the Istio injection from following the above istio commands, we will see that each deploying will have an app running with it along with the sidebar.`}</p>\n    <p>{`For the Istio gateway, we launch the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - helloworld-gateway\n  # if we match uri /hello, then follow routing\n  http:\n  - match:\n    - uri:\n        prefix: /hello\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"73-advanced-istio-routing\"\n    }}>{`7.3 Advanced Istio Routing`}</h2>\n    <p><img alt=\"Advanced Routing Setup\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540109060/Screen_Shot_2018-10-21_at_7.04.07_pm.png\" /></p>\n    <p>{`Thanks to Istio, we can do advanced routing based around the above diagram thanks to the Deployments having different metadata:`}</p>\n    <p>{`The deployment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v2\nspec:\n  replicas: 3\n  template:\n    # we use this metadata for Istio to distinguish on routes\n    metadata:\n      labels:\n        app: hello\n        version: v2\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello, this is v2\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n`}</code></pre>\n    <p>{`The routing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-v2-routing\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  # ! Subsets is where the magic happens!\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: john\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v2 # ! match v2 only\n        port:\n          number: 8080\n  - route: # default route for hello.example.com\n    - destination:\n        host: ! hello.default.svc.cluster.local\n        subset: v1 # match v1 only\n        port:\n          number: 8080\n`}</code></pre>\n    <p>{`Now, if we apply this virtual service to the service mesh, then based on whether we pass the \"end-user\" header or not, we will hit either v1 or v2!`}</p>\n    <p>{`We can test by running `}<inlineCode parentName=\"p\">{`curl loadbalanceraddress.domain.com -H \"host: hello.example.com\"`}</inlineCode>{`.`}</p>\n    <p>{`For v2 we can run \\``}<inlineCode parentName=\"p\">{`curl loadbalanceraddress.domain.com -H \"host: hello.example.com\" -H \"end-user: John\"`}</inlineCode>{`. `}</p>\n    <h2 {...{\n      \"id\": \"74-canary-deployments\"\n    }}>{`7.4 Canary deployments`}</h2>\n    <p>{`Canary deployments basically want routing mainly to the first version, but we also want some A/B testing to have version 2 having a 10% weight.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v1\n        port:\n          number: 8080\n      weight: 90\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v2\n        port:\n          number: 8080\n      weight: 10\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"75-running-retries\"\n    }}>{`7.5 Running retries`}</h2>\n    <p>{`If one of the pods stop working, we can retry to another pod without the client seeing any of the issues. The example app has one of three pods running with a 5s latency but a 2s timeout to demonstrate this. It looks like the following:`}</p>\n    <p><img alt=\"Retry diagram\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540110459/Screen_Shot_2018-10-21_at_7.26.50_pm.png\" /></p>\n    <p>{`We can see this being done with `}<inlineCode parentName=\"p\">{`Hello World v3`}</inlineCode>{` so we can see this in action with:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-v3.yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v3\nspec:\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v3\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: TEXT\n          value: hello, this is $(MY_POD_NAME)\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-v3-latency\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v3\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: TEXT\n          value: hello, this is $(MY_POD_NAME)\n        - name: LATENCY\n          value: \"5\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n  - name: v3\n    labels:\n      version: v3\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-v3\nspec:\n  hosts:\n  - \"hello-v3.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route: # default route for hello.example.com\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v3 # match v3 only\n        port:\n          number: 8080\n    timeout: 10s\n    retries:\n      attempts: 2\n      perTryTimeout: 2s\n`}</code></pre>\n    <p>{`We can also call `}<inlineCode parentName=\"p\">{`kubectl get destinationrule`}</inlineCode>{` etc to get and describe particular rules.`}</p>\n    <h2 {...{\n      \"id\": \"76-mutual-tls-example\"\n    }}>{`7.6 Mutual TLS example`}</h2>\n    <p>{`Create pods, services, destinationrules, virtualservices`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl create -f <(istioctl kube-inject -f helloworld-tls.yaml)\nkubectl create -f helloworld-legacy.yaml\n`}</code></pre>\n    <p>{`The goals of Istio security are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Security by default:`}</strong>{` no changes needed for application code and infrastructure.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Defense in depth:`}</strong>{` integrate with existing security systems to provide multiple layers of defense.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Zero-trust network:`}</strong>{` build security solutions on untrusted networks.`}</li>\n    </ul>\n    <p>{`Two types of auth:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Transport authentication (service to service authentication) using Mutual TLS.`}</li>\n      <li parentName=\"ol\">{`Origin authentication (end-user authentication). Verifying the end user using JWTs.`}</li>\n    </ol>\n    <p>{`Mutual TLS can be turned on `}<strong parentName=\"p\">{`without having to change the code of applications`}</strong>{` (because of the sidecar deployment).`}</p>\n    <p>{`It provides each service with a `}<strong parentName=\"p\">{`strong identity`}</strong>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Attacks like impersonation be rerouting DNS records will fail, because a fake application can't prove its identity using the certificate mechanism.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Secures (encrypts)`}</strong>{` service-to-service and end-user-to-service communication.`}</li>\n      <li parentName=\"ul\">{`Provides key and certificate management to `}<strong parentName=\"li\">{`manage generation, distribution and rotation`}</strong>{`.`}</li>\n    </ul>\n    <p><img alt=\"TLS Example App\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540153502/Screen_Shot_2018-10-22_at_7.24.10_am.png\" /></p>\n    <ul>\n      <li parentName=\"ul\">{`Legacy applications with not have a sidecar. `}</li>\n      <li parentName=\"ul\">{`One service will go LTR, and the other RTL.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns1\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns2\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-tls\n  namespace: ns1\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world.ns2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-tls\n  namespace: ns2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"end.legacy:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-reverse-tls\n  namespace: ns2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"end-reverse.ns1:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: end-reverse-tls\n  namespace: ns1\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: end-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  namespace: ns1\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  namespace: ns2\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-reverse\n  namespace: ns2\n  labels:\n    app: world-reverse\nspec:\n  selector:\n    app: world-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: end-reverse\n  namespace: ns1\n  labels:\n    app: end-reverse\nspec:\n  selector:\n    app: end-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.ns1.svc.cluster.local\n  # uncomment to enable mutual TLS\n  #trafficPolicy:\n  #  tls:\n  #    mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1-tls\n    labels:\n      version: v1-tls\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello-reverse\nspec:\n  host: hello-reverse.legacy.svc.cluster.local\n  # uncomment to enable mutual TLS\n  #trafficPolicy:\n  #  tls:\n  #    mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1-tls\n    labels:\n      version: v1-tls\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-tls\nspec:\n  hosts:\n  - \"hello-tls.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.ns1.svc.cluster.local\n        subset: v1-tls # match v3 only\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-tls-reverse\nspec:\n  hosts:\n  - \"hello-tls-reverse.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello-reverse.legacy.svc.cluster.local\n        subset: v1-tls\n        port:\n          number: 8080\n`}</code></pre>\n    <p>{`As for the missing legacy services, they can be found in the `}<inlineCode parentName=\"p\">{`helloworld-legacy`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nkind: Namespace\nmetadata:\n  name: legacy\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: end-tls\n  namespace: legacy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: end\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello-reverse-tls\n  namespace: legacy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello-reverse\n        version: v1-tls\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world-reverse.ns2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: end\n  namespace: legacy\n  labels:\n    app: end\nspec:\n  selector:\n    app: end\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-reverse\n  namespace: legacy\n  labels:\n    app: hello-reverse\nspec:\n  selector:\n    app: hello-reverse\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n`}</code></pre>\n    <p>{`Both these files can applied by running the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl apply -f <(istioctl kube-inject -f helloworld-tls.yaml)\n$ kubectl apply -f helloworld-legacy.yaml\n$ kubetl get svc -o wide -n istio-system # get services from istio-system services\n# After getting the load balancer, you can then curl the ELB passing the Host header\n`}</code></pre>\n    <p>{`Now we need to `}<strong parentName=\"p\">{`enable TLS authetication.`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-rbac-enable.yaml\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\n# ensures mtls is push to side cars\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"legacy\"\nspec:\n  host: \"end.legacy.svc.cluster.local\"\n  trafficPolicy:\n    tls:\n      mode: DISABLE\n`}</code></pre>\n    <p>{`Apply this file to enable mutual TLS that works one way but not the other (as like in the diagram). However, in the above yaml files we did now enable the traffic policy, so you need to update that and apply the updated files for all of this to work.`}</p>\n    <h2 {...{\n      \"id\": \"77-end-user-authentication\"\n    }}>{`7.7 End-user authentication`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`kubectl create -f <(istioctl kube-inject -f helloworld-jwt.yaml)\nkubectl create -f helloworld-jwt-enable.yaml\n`}</code></pre>\n    <p>{`If we want to access a Pod, we need to use a gateway. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-gw.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"*\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /hello\n    route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n`}</code></pre>\n    <p>{`If you want a service within Istio, you will always need to define the `}<inlineCode parentName=\"p\">{`VirtualService`}</inlineCode>{`. We don't need the `}<inlineCode parentName=\"p\">{`VirtualService`}</inlineCode>{` for services that are accessed by the client.`}</p>\n    <h2 {...{\n      \"id\": \"78-rbac-with-istio-and-mtls\"\n    }}>{`7.8 RBAC with Istio and MTLS`}</h2>\n    <p>{`Now that we have MTLS, we have strong identites.`}</p>\n    <p>{`Based on those identities, we can start doing `}<strong parentName=\"p\">{`Role Based Access Control (RBAC)`}</strong>{`.`}</p>\n    <p>{`RBAC allows us to limit access `}<strong parentName=\"p\">{`between our services`}</strong>{` and from `}<strong parentName=\"p\">{`end-user to services`}</strong>{`.`}</p>\n    <p>{`Istio is able to verify the identity of a service by `}<strong parentName=\"p\">{`checking the identity of the x.509 certificate (which comes with enabled mutual TLS)`}</strong>{`. Example: with RBAC, service A might be able to be contacted by B, but not by C.`}</p>\n    <p>{`Istio is using SPIFFE standard (another CNFC project).`}</p>\n    <p>{`RBAC in istio:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Can provide `}<strong parentName=\"li\">{`service-to-service`}</strong>{` and `}<strong parentName=\"li\">{`end-user-to-service`}</strong>{` auth.`}</li>\n      <li parentName=\"ul\">{`Supports `}<strong parentName=\"li\">{`conditions`}</strong>{` and `}<strong parentName=\"li\">{`role-binding`}</strong>{`.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`You can bind to `}<strong parentName=\"li\">{`ServiceAccounts`}</strong>{` (which can be linked to pods).`}</li>\n          <li parentName=\"ul\">{`End-user-to-service can for example let you create `}<strong parentName=\"li\">{`condition on being authenticated using JWT`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`It has high performance.`}</li>\n          <li parentName=\"ul\">{`Not enabled by default.`}</li>\n          <li parentName=\"ul\">{`We can enable it globally or on a namespace.`}</li>\n        </ul></li>\n    </ul>\n    <p>{`Example for including it on the \"default\" namespace:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: \"rbac.istio.io/v1alpha1\"\nkind: RbacConfig\nmetadata:\n  name: default\nspec:\n  mode: 'ON_WITH_INCLUSION'\n  inclusion:\n    namespaces: [\"default\"]\n---\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n`}</code></pre>\n    <p>{`We can then create a `}<strong parentName=\"p\">{`ServiceRole`}</strong>{` specifying the rules and a `}<strong parentName=\"p\">{`ServiceRoleBinding`}</strong>{` to link a `}<strong parentName=\"p\">{`ServiceRole`}</strong>{` to a subject (example Kubernetes `}<strong parentName=\"p\">{`ServiceAccount`}</strong>{`).`}</p>\n    <p>{`Example of how we want the demo to look when it comes to what it can contact:`}</p>\n    <p><img alt=\"Contact rules\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540155683/Screen_Shot_2018-10-22_at_8.00.47_am.png\" /></p>\n    <p>{`The order for the following is:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create `}<strong parentName=\"li\">{`ServiceRoles`}</strong>{` that only enable certain methods and services with specific access.`}</li>\n      <li parentName=\"ol\">{`Enable `}<strong parentName=\"li\">{`ServiceRoleBindings`}</strong>{` to bind that the `}<strong parentName=\"li\">{`ServiceRoles`}</strong>{` to a `}<strong parentName=\"li\">{`subject`}</strong>{` (or `}<strong parentName=\"li\">{`ingress controller name`}</strong>{` in the first case).`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`ServiceAccounts`}</strong>{` that have the correct metadata required for the `}<strong parentName=\"li\">{`ServiceRoleBindings`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`Deployments`}</strong>{` that have the affiliated `}<strong parentName=\"li\">{`ServiceAccount`}</strong>{` required.`}</li>\n      <li parentName=\"ol\">{`Create a `}<strong parentName=\"li\">{`Service`}</strong>{` for that `}<strong parentName=\"li\">{`Deployment`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`Gateway`}</strong>{` that uses the default `}<strong parentName=\"li\">{`Istio Gateway`}</strong>{` to access the `}<strong parentName=\"li\">{`Services`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`VirtualService`}</strong>{` that gives us access to the hello world app through the `}<strong parentName=\"li\">{`Gateway`}</strong>{` connected to the `}<strong parentName=\"li\">{`Service`}</strong>{` which sits within the `}<strong parentName=\"li\">{`ServiceMesh`}</strong>{` from the `}<strong parentName=\"li\">{`IngressController`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`Create the `}<strong parentName=\"li\">{`DestinationRule`}</strong>{` that allows allows access to the `}<strong parentName=\"li\">{`VirtualService`}</strong>{` using `}<strong parentName=\"li\">{`MTLS`}</strong>{` from the `}<strong parentName=\"li\">{`IngressController`}</strong>{` which is a `}<strong parentName=\"li\">{`Reverse Proxy internal load balancer`}</strong>{` accessed from the external `}<strong parentName=\"li\">{`AWS LoadBalancer`}</strong>{` tied to the accessible `}<strong parentName=\"li\">{`DNS Records`}</strong>{`.`}</li>\n      <li parentName=\"ol\">{`You can now access the microservice from the `}<strong parentName=\"li\">{`AWS LoadBalancer Route53 alias`}</strong>{` passing the `}<strong parentName=\"li\">{`internal namespace domain`}</strong>{` as the `}<strong parentName=\"li\">{`host header`}</strong>{`.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# ! helloworld-rbac.yaml file\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: hello-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"hello.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: world-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"world.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRole\nmetadata:\n  name: world-2-viewer\n  namespace: default\nspec:\n  rules:\n  - services: [\"world-2.default.svc.cluster.local\"]\n    methods: [\"GET\", \"HEAD\"]\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: istio-ingress-binding\n  namespace: default\nspec:\n  subjects:\n  - properties:\n      source.namespace: \"istio-system\"\n  roleRef:\n    kind: ServiceRole\n    name: \"hello-viewer\"\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: hello-user-binding\n  namespace: default\nspec:\n  subjects:\n  - user: \"cluster.local/ns/default/sa/hello\"\n  roleRef:\n    kind: ServiceRole\n    name: \"world-viewer\"\n---\napiVersion: \"rbac.istio.io/v1alpha1\"\nkind: ServiceRoleBinding\nmetadata:\n  name: world-user-binding\n  namespace: default\nspec:\n  subjects:\n  - user: \"cluster.local/ns/default/sa/world\"\n  roleRef:\n    kind: ServiceRole\n    name: \"world-2-viewer\"\n---\n###\n### Kubernetes Service accounts\n###\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: hello\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: world\n---\n###\n### helloworld.yaml deployments, including a serviceaccount\n### for the hello deployment and the world deployment\n###\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      serviceAccountName: hello  # service account\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: hello\n        - name: NEXT\n          value: \"world:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world\n        version: v1\n    spec:\n      serviceAccountName: world  # service account\n      containers:\n      - name: world\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: world\n        - name: NEXT\n          value: \"world-2:8080\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world\n  labels:\n    app: world\nspec:\n  selector:\n    app: world\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: world-2\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: world-2\n        version: v1\n    spec:\n      containers:\n      - name: world-2\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: \"!!!\"\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: world-2\n  labels:\n    app: world-2\nspec:\n  selector:\n    app: world-2\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n  - \"hello-rbac.example.com\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        subset: v1\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: hello\nspec:\n  host: hello.default.svc.cluster.local\n  # uncomment to enable mutual TLS\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n`}</code></pre>\n    <p>{`This again requires the rbac prequisite:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-rbac-enable.yaml\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\n# ensures mtls is push to side cars\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"legacy\"\nspec:\n  host: \"end.legacy.svc.cluster.local\"\n  trafficPolicy:\n    tls:\n      mode: DISABLE\n`}</code></pre>\n    <p><img alt=\"After applying the files to Istio\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540159695/Screen_Shot_2018-10-22_at_9.07.45_am.png\" /></p>\n    <p>{`Evidently enough, it is incredibly important to ensure the routing is set up correctly so there is no large scale failure.`}</p>\n    <h2 {...{\n      \"id\": \"79-end-user-authentication\"\n    }}>{`7.9 End-user Authentication`}</h2>\n    <p>{`Istio currently supports JWT tokens to authenticate users.`}</p>\n    <p>{`In the implementation, the user will receive a JWT token from an authenticated server after logging in.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`This app will provide us with a token that is `}<strong parentName=\"li\">{`signed with a key`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`The data is not encrypted, but the `}<strong parentName=\"li\">{`token contains a signature`}</strong>{`, which can be `}<strong parentName=\"li\">{`verified`}</strong>{` to see `}<strong parentName=\"li\">{`whether it was really created by the server`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Only the server has the `}<strong parentName=\"li\">{`private key`}</strong>{`, so we can't recreate or tamper with the token.`}</li>\n      <li parentName=\"ul\">{`Using microservices, every app would need to be `}<strong parentName=\"li\">{`seperately configured`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Every service would need to `}<strong parentName=\"li\">{`validate the token`}</strong>{`.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Once validated the service would need to check whether the user has access to this service.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`With Istio, `}<strong parentName=\"li\">{`this can be taken away from the app code and managed centrally.`}</strong></li>\n      <li parentName=\"ul\">{`You can configure the `}<strong parentName=\"li\">{`jwt token signature/properties`}</strong>{` you expect in into and have `}<strong parentName=\"li\">{`policies to allow/disallow access to a service.`}</strong><ul parentName=\"li\">\n          <li parentName=\"ul\">{`Example \"hello\" app might only be accessible if user is authenticated.`}</li>\n          <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`sidecar`}</strong>{` will verify the `}<strong parentName=\"li\">{`validity`}</strong>{` of the signature, to make sure the token is valid.`}</li>\n        </ul></li>\n    </ul>\n    <p><img alt=\"JWT Token setup\" src=\"https://res.cloudinary.com/gitgoodclub/image/upload/v1540160832/Screen_Shot_2018-10-22_at_9.26.42_am.png\" /></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# Istio with JWT Auth\n# helloworld-jwt.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: helloworld-gateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"*\"\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-auth\nspec:\n  # this is a change to previous\n  hosts:\n  - \"auth.kubernetes.newtech.academy\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: auth.default.svc.cluster.local\n        port:\n          number: 8080\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld-hello\nspec:\n  hosts:\n  - \"hello.kubernetes.newtech.academy\"\n  gateways:\n  - helloworld-gateway\n  http:\n  - route:\n    - destination:\n        host: hello.default.svc.cluster.local\n        port:\n          number: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: auth\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: auth\n        version: v1\n    spec:\n      containers:\n      - name: auth\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: this is the authentication service\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth\n  labels:\n    app: auth\nspec:\n  selector:\n    app: auth\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: hello\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: hello\n        version: v1\n    spec:\n      containers:\n      - name: hello\n        image: wardviaene/http-echo\n        env:\n        - name: TEXT\n          value: Hello, you can only reach this service when authenticated\n        ports:\n        - name: http\n          containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello\n  labels:\n    app: hello\nspec:\n  selector:\n    app: hello\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\n###\n### Enable TLS\n###\n---\napiVersion: authentication.istio.io/v1alpha1\nkind: \"MeshPolicy\"\nmetadata:\n  name: \"default\"\nspec:\n  peers:\n  - mtls: {}\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: \"enable-mtls\"\n  namespace: \"default\" # even though we specify a namespace, this rule applies to all namespaces\nspec:\n  host: \"*.local\"\n  trafficPolicy:\n    tls:\n      mode: ISTIO_MUTUAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n name: \"api-server\"\nspec:\n host: \"kubernetes.default.svc.cluster.local\"\n trafficPolicy:\n   tls:\n     mode: DISABLE\n`}</code></pre>\n    <p>{`To get to auth, we need to create an alias for `}<inlineCode parentName=\"p\">{`auth.domain.name`}</inlineCode>{` in Route 53 to expose the load balancer.`}</p>\n    <p>{`To enable the policy for the JWT token auth to take effect, we need to apply the following to the cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# helloworld-jwt-enable.yaml\napiVersion: \"authentication.istio.io/v1alpha1\"\nkind: \"Policy\"\nmetadata:\n  name: \"jwt-example\"\nspec:\n  targets:\n  - name: hello\n  peers:\n  - mtls: {}\n  origins:\n  - jwt:\n      # jwksUri is from auth uri we setup in Route53\n      issuer: \"http-echo@http-echo.kubernetes.newtech.academy\"\n      jwksUri: \"http://auth.kubernetes.newtech.academy/.well-known/jwks.json\"\n  principalBinding: USE_ORIGIN\n---\n`}</code></pre>\n    <p>{`After fetching the token, we can now access authenticated routes by passing the header `}<inlineCode parentName=\"p\">{`\"Authorization\": \"Bearer $TOKEN\"`}</inlineCode>{`.`}</p>\n    <p>{`The example uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/wardviaene/http-echo/blob/master/main.go\"\n      }}>{`this Github repo`}</a>{` with the /login route to do auth and another route to check the auth from other services.`}</p>\n    <p>{`Something useful is that you can also check the logs of the Istio proxy. This can be done with `}<inlineCode parentName=\"p\">{`kubectl logs <% pod_name %> -c istio-proxy`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"710-istio-ingress-traffic\"\n    }}>{`7.10 Istio Ingress Traffic`}</h2>\n    <p>{`To enable ingress traffic to allow to access outside services, we can apply an external service file. The following example will allow the `}<inlineCode parentName=\"p\">{`ifconfig.co`}</inlineCode>{` hostname to be accessible from the pods.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`# external-service.yaml\n#\n# http\n#\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: ifconfig-co-http\nspec:\n  hosts:\n  - ifconfig.co\n  ports:\n  - number: 80\n    name: http\n    protocol: HTTP\n  resolution: DNS\n  location: MESH_EXTERNAL\n---\n#\n# https\n#\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: ifconfig-co-https\nspec:\n  hosts:\n  - ifconfig.co\n  ports:\n  - number: 443\n    name: https\n    protocol: HTTPS\n  resolution: DNS\n  location: MESH_EXTERNAL\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: ifconfig-co\nspec:\n  hosts:\n  - ifconfig.co\n  tls:\n  - match:\n    - port: 443\n      sni_hosts:\n      - ifconfig.co\n    route:\n    - destination:\n        host: ifconfig.co\n        port:\n          number: 443\n      weight: 100\n`}</code></pre>\n    <p>{`You should now be able to log into the pod to try out contacting other services.`}</p>\n    <h2 {...{\n      \"id\": \"710-distributed-tracing-with-jaegar\"\n    }}>{`7.10 Distributed Tracing with Jaegar`}</h2>\n    <p>{`Jaegar is automatically stored in the `}<inlineCode parentName=\"p\">{`isto-system`}</inlineCode>{`. You can confirm this with the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl get pod -n istio-system # istio-tracing pod\n$ kubectl get svc -n istio-system # jaegar-[agent/collector/query]\n# You could export the port for jaegar-query by updating the service\n$ kubectl edit svc jaegar-query -n istio-system # changing ClusterIP to LoadBalancer\n`}</code></pre>\n    <p>{`To find the traces, you need to find the svc `}<strong parentName=\"p\">{`LoadBalancer`}</strong>{` port for Jaegar Query and then you can access the web url using the port.`}</p>\n    <p>{`This ports are only internal, so you would either need to expose the IP address or use `}<inlineCode parentName=\"p\">{`kubectl port-forward`}</inlineCode>{` to forward all the ports on.`}</p>\n    <p>{`To results, you'll need to use the `}<inlineCode parentName=\"p\">{`open-tracing`}</inlineCode>{` headers.`}</p>\n    <h2 {...{\n      \"id\": \"711-istio-metrics-with-grafana\"\n    }}>{`7.11 Istio Metrics with Grafana`}</h2>\n    <p>{`Similar to Jaegar, you can find the Grafana service by getting the services for the Istio System.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ kubectl get svc -n istio-system # grafana\n# You could export the port for grafana by updating the service\n$ kubectl edit svc grafana -n istio-system # changing ClusterIP to LoadBalancer\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}