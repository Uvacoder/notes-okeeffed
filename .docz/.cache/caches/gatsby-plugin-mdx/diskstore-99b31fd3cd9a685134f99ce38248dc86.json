{"expireTime":9007200849425508000,"key":"gatsby-plugin-mdx-entire-payload-e8a3e816a7fbe464146c905a9463702c-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Redis with Nodejs","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":20,"offset":186},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":20,"offset":186},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"yarn install redis","position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":21,"offset":208},"indent":[]}},{"type":"text","value":" and use the controller. Example controller setup. Use promises to enable sequential optionality.","position":{"start":{"line":10,"column":21,"offset":208},"end":{"line":10,"column":118,"offset":305},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":118,"offset":305},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const redis = require('redis');\n\nfunction setHashSet(key, field, value) {\n  return new Promise((resolve, reject) => {\n    client.hset(key, field, value, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getHashSet(key) {\n  return new Promise((resolve, reject) => {\n    client.hvals(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction delKey(key) {\n  return new Promise((resolve, reject) => {\n    client.del(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getKeys(key) {\n  return new Promise((resolve, reject) => {\n    client.hkeys(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getValue(key, field) {\n  return new Promise((resolve, reject) => {\n    client.hget(key, field, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction setArray(key, arr) {\n  return new Promise((resolve, reject) => {\n    client.sadd(key, ...arr, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getArray(key) {\n  return new Promise((resolve, reject) => {\n    client.smembers(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getListLen(key) {\n  return new Promise((resolve, reject) => {\n    client.llen(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction pushToListEnd(key) {\n  return new Promise((resolve, reject) => {\n    client.rpush(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction popFromListStart(key) {\n  return new Promise((resolve, reject) => {\n    client.lpop(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction deleteArrayMember(key, value) {\n  return new Promise((resolve, reject) => {\n    client.srem(key, value, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nmodule.exports = {\n  setHashSet,\n  getHashSet,\n  getKeys,\n  getValue,\n  setArray,\n  getArray,\n  deleteArrayMember,\n  getListLen,\n  pushToListEnd,\n  popFromListStart\n};","position":{"start":{"line":12,"column":1,"offset":307},"end":{"line":126,"column":4,"offset":2506},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":129,"column":1,"offset":2509},"end":{"line":129,"column":31,"offset":2539},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":129,"column":31,"offset":2539}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"redis-with-nodejs\"\n    }}>{`Redis with Nodejs`}</h1>\n    <p><inlineCode parentName=\"p\">{`yarn install redis`}</inlineCode>{` and use the controller. Example controller setup. Use promises to enable sequential optionality.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const redis = require('redis');\n\nfunction setHashSet(key, field, value) {\n  return new Promise((resolve, reject) => {\n    client.hset(key, field, value, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getHashSet(key) {\n  return new Promise((resolve, reject) => {\n    client.hvals(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction delKey(key) {\n  return new Promise((resolve, reject) => {\n    client.del(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getKeys(key) {\n  return new Promise((resolve, reject) => {\n    client.hkeys(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getValue(key, field) {\n  return new Promise((resolve, reject) => {\n    client.hget(key, field, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction setArray(key, arr) {\n  return new Promise((resolve, reject) => {\n    client.sadd(key, ...arr, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getArray(key) {\n  return new Promise((resolve, reject) => {\n    client.smembers(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction getListLen(key) {\n  return new Promise((resolve, reject) => {\n    client.llen(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction pushToListEnd(key) {\n  return new Promise((resolve, reject) => {\n    client.rpush(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction popFromListStart(key) {\n  return new Promise((resolve, reject) => {\n    client.lpop(key, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nfunction deleteArrayMember(key, value) {\n  return new Promise((resolve, reject) => {\n    client.srem(key, value, (err, res) => {\n      if (err) reject(err);\n      resolve(res);\n    });\n  });\n}\n\nmodule.exports = {\n  setHashSet,\n  getHashSet,\n  getKeys,\n  getValue,\n  setArray,\n  getArray,\n  deleteArrayMember,\n  getListLen,\n  pushToListEnd,\n  popFromListStart\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}