{"expireTime":9007200849425592000,"key":"gatsby-plugin-mdx-entire-payload-c95ee128441f0e9e6231e4cfcaf842fa-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Pthreads","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":11,"offset":176},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":12,"offset":177},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pthreads API","position":{"start":{"line":9,"column":4,"offset":182},"end":{"line":9,"column":16,"offset":194},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":179},"end":{"line":9,"column":17,"offset":195},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Defined in the ANSI/IEEE Posix 1003.1 - 1995 standard","position":{"start":{"line":11,"column":3,"offset":199},"end":{"line":11,"column":56,"offset":252},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":199},"end":{"line":11,"column":56,"offset":252},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":197},"end":{"line":11,"column":56,"offset":252},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Subroutines comprise the Pthreads API can be informally grouped into three major classes:","position":{"start":{"line":12,"column":3,"offset":255},"end":{"line":12,"column":92,"offset":344},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":255},"end":{"line":12,"column":92,"offset":344},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":253},"end":{"line":12,"column":92,"offset":344},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":197},"end":{"line":12,"column":92,"offset":344},"indent":[1]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Thread management","position":{"start":{"line":13,"column":4,"offset":348},"end":{"line":13,"column":21,"offset":365},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":348},"end":{"line":13,"column":21,"offset":365},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":345},"end":{"line":13,"column":21,"offset":365},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Mutexes ","position":{"start":{"line":14,"column":4,"offset":369},"end":{"line":14,"column":12,"offset":377},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":369},"end":{"line":14,"column":12,"offset":377},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":366},"end":{"line":14,"column":12,"offset":377},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Condition variables","position":{"start":{"line":15,"column":4,"offset":381},"end":{"line":15,"column":23,"offset":400},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":381},"end":{"line":15,"column":23,"offset":400},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":378},"end":{"line":15,"column":23,"offset":400},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":345},"end":{"line":15,"column":23,"offset":400},"indent":[1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"1: Thread Management","position":{"start":{"line":17,"column":3,"offset":404},"end":{"line":17,"column":23,"offset":424},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":402},"end":{"line":17,"column":23,"offset":424},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"first class of functions work directly on threads - creating, detatching, joining etc ","position":{"start":{"line":19,"column":3,"offset":428},"end":{"line":19,"column":89,"offset":514},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":428},"end":{"line":19,"column":89,"offset":514},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":426},"end":{"line":19,"column":89,"offset":514},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"also include funcs to set/query thread attributes (joinable, scheduling etc)","position":{"start":{"line":20,"column":3,"offset":517},"end":{"line":20,"column":79,"offset":593},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":517},"end":{"line":20,"column":79,"offset":593},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":515},"end":{"line":20,"column":79,"offset":593},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":426},"end":{"line":20,"column":79,"offset":593},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Create Threads","position":{"start":{"line":22,"column":3,"offset":597},"end":{"line":22,"column":17,"offset":611},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":595},"end":{"line":22,"column":19,"offset":613},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":595},"end":{"line":22,"column":19,"offset":613},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"initially, single default thread - others must be explicitly created","position":{"start":{"line":24,"column":3,"offset":617},"end":{"line":24,"column":71,"offset":685},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":617},"end":{"line":24,"column":71,"offset":685},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":615},"end":{"line":24,"column":71,"offset":685},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":615},"end":{"line":24,"column":71,"offset":685},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"pthread_create(thread, attr, startRoutine, arg)\n// thread - unique identifier for the new thread (pthread_t)\n// attr - attr object used to set thread attributes (pthread_attr) - you can specify a thread attributes object, or NULL for the default values\n// startRoutine - C routine that the thread will execute \n// arg - single arg that may be passed to startRoutine - it must be passed by reference (pointer to struct) and NULL may be used if no arg is to be passed\n\n/*\n\tIf successful, the pthread_create() function shall return zero; otherwise, an error number shall be returned to indicate the error\n */","position":{"start":{"line":26,"column":1,"offset":687},"end":{"line":36,"column":4,"offset":1300},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Thread Attributes","position":{"start":{"line":38,"column":3,"offset":1304},"end":{"line":38,"column":20,"offset":1321},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1302},"end":{"line":38,"column":22,"offset":1323},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1302},"end":{"line":38,"column":22,"offset":1323},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default, a thread is created with certain attributes.","position":{"start":{"line":40,"column":1,"offset":1325},"end":{"line":40,"column":57,"offset":1381},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1325},"end":{"line":40,"column":57,"offset":1381},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"pthread_attr_init(attr) and pthread_attr_destroy(attr) are used to initialize/destroy the thread attribute object.","position":{"start":{"line":42,"column":1,"offset":1383},"end":{"line":42,"column":115,"offset":1497},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1383},"end":{"line":42,"column":115,"offset":1497},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Other routines are then used to query/set specific attributes in the thread attribute object.","position":{"start":{"line":44,"column":1,"offset":1499},"end":{"line":44,"column":94,"offset":1592},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1499},"end":{"line":44,"column":94,"offset":1592},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Terminating Thread","position":{"start":{"line":46,"column":3,"offset":1596},"end":{"line":46,"column":21,"offset":1614},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1594},"end":{"line":46,"column":23,"offset":1616},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1594},"end":{"line":46,"column":23,"offset":1616},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Thread makes call to the pthread_exit() subroutine ","position":{"start":{"line":48,"column":4,"offset":1621},"end":{"line":48,"column":55,"offset":1672},"indent":[]}}],"position":{"start":{"line":48,"column":4,"offset":1621},"end":{"line":48,"column":55,"offset":1672},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1618},"end":{"line":48,"column":55,"offset":1672},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Thread is cancelled by another thread via pthread_cancel() routine ","position":{"start":{"line":49,"column":4,"offset":1676},"end":{"line":49,"column":71,"offset":1743},"indent":[]}}],"position":{"start":{"line":49,"column":4,"offset":1676},"end":{"line":49,"column":71,"offset":1743},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1673},"end":{"line":49,"column":71,"offset":1743},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Entire process is terminated due to call to exit subroutine ","position":{"start":{"line":50,"column":4,"offset":1747},"end":{"line":50,"column":64,"offset":1807},"indent":[]}}],"position":{"start":{"line":50,"column":4,"offset":1747},"end":{"line":50,"column":64,"offset":1807},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1744},"end":{"line":50,"column":64,"offset":1807},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1618},"end":{"line":50,"column":64,"offset":1807},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Routine: ","position":{"start":{"line":52,"column":1,"offset":1809},"end":{"line":52,"column":10,"offset":1818},"indent":[]}},{"type":"inlineCode","value":"pthread_exit(status)","position":{"start":{"line":52,"column":10,"offset":1818},"end":{"line":52,"column":32,"offset":1840},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1809},"end":{"line":52,"column":32,"offset":1840},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"used to explicitly exit the thread","position":{"start":{"line":54,"column":3,"offset":1844},"end":{"line":54,"column":37,"offset":1878},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":1844},"end":{"line":54,"column":37,"offset":1878},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1842},"end":{"line":54,"column":37,"offset":1878},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"programmer may optionalyl specify a termination status, which is stored as a void pointer for any thread that may join the calling thread","position":{"start":{"line":55,"column":3,"offset":1881},"end":{"line":55,"column":140,"offset":2018},"indent":[]}}],"position":{"start":{"line":55,"column":3,"offset":1881},"end":{"line":55,"column":140,"offset":2018},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1879},"end":{"line":55,"column":140,"offset":2018},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1842},"end":{"line":55,"column":140,"offset":2018},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Cleanup: ","position":{"start":{"line":57,"column":1,"offset":2020},"end":{"line":57,"column":10,"offset":2029},"indent":[]}},{"type":"inlineCode","value":"pthread_exit()","position":{"start":{"line":57,"column":10,"offset":2029},"end":{"line":57,"column":26,"offset":2045},"indent":[]}},{"type":"text","value":" does not close files; any files opened inside the thread will remain open after the thread is terminated.","position":{"start":{"line":57,"column":26,"offset":2045},"end":{"line":57,"column":132,"offset":2151},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":2020},"end":{"line":57,"column":132,"offset":2151},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Example","position":{"start":{"line":59,"column":3,"offset":2155},"end":{"line":59,"column":10,"offset":2162},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":2153},"end":{"line":59,"column":12,"offset":2164},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":2153},"end":{"line":59,"column":12,"offset":2164},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"#include <pthread.h>\n#include <stdio.h>\n#include <stdlib.h>\n#define NUM_THREADS 5\n\nvoid *PrintHello(void *threadid) {\n\tint *tid;\n\ttid = (int *)threadid;\n\tprintf(\"Hello World! It's me, thread #%d!\\n\", *tid);\n\tpthread_exit(NULL);\n}\n\nint main(int argc, char *argv[]) {\n\tpthread_t threads[NUM_THREADS];\n\tint rc, t, tids[NUM_THREADS];\n\tfor (t=0; t< NUM_THREADS; t++) {\n\t\tprintf(\"In main: creating thread %d\\n\", t);\n\t\ttids[t] = t;\n\t\trc = pthread_create(&threads[t], NULL, PrintHello, (void *)&tids[t]);\n\n\t\tif (rc) {\n\t\t\tprintf(\"ERROR; return code from pthread_create() is %d\\n\", rc);\n\t\t\texit(-1);\n\t\t}\n\t}\n\tpthread_exit(NULL);\t\n}","position":{"start":{"line":61,"column":1,"offset":2166},"end":{"line":89,"column":4,"offset":2796},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Passing Arguments to Threads","position":{"start":{"line":91,"column":4,"offset":2801},"end":{"line":91,"column":32,"offset":2829},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2798},"end":{"line":91,"column":32,"offset":2829},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"pthread_create()","position":{"start":{"line":93,"column":1,"offset":2831},"end":{"line":93,"column":19,"offset":2849},"indent":[]}},{"type":"text","value":" routine permits the programmer to pass one argument to the thread start routine.","position":{"start":{"line":93,"column":19,"offset":2849},"end":{"line":93,"column":100,"offset":2930},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2831},"end":{"line":93,"column":100,"offset":2930},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For cases where multiple args must be passed, we can create a struct and use the reference pointer as an arg.","position":{"start":{"line":95,"column":1,"offset":2932},"end":{"line":95,"column":110,"offset":3041},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2932},"end":{"line":95,"column":110,"offset":3041},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All args passed by reference must be cast to (void *)","position":{"start":{"line":97,"column":1,"offset":3043},"end":{"line":97,"column":54,"offset":3096},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":3043},"end":{"line":97,"column":54,"offset":3096},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"struct two_args {\n\tint arg1;\n\tint arg2;\t\n};\n\nvoid *needs_2_args(void *ap) {\n\tstruct two_args *argp;\n\tint a1, a2;\n\n\targp = (struct two_args *) ap;\n\n\t// do stuff here\n\t\n\ta1 = argp->arg1;\n\ta2 = argp->arg2;\n\t\n\t// do stuff here \n\n\tfree(argp);\n\tpthread_exit(NULL);\n}\n\nint main(int argc, char *argv[]) {\n\tpthread_t t;\n\tstruct two_args *ap;\n\tint rc;\n\n\t// do stuff here \n\n\tap = (struct two_args *)malloc(sizeof(struct two_args));\n\tap->arg1 = 1;\n\tap->arg2 = 2;\n\trc = pthread_create(&t, NULL, needs_2_args, (void *) ap);\n\n\t// do stuff here \n\n\tpthread_exit(NULL);\n}","position":{"start":{"line":99,"column":1,"offset":3098},"end":{"line":138,"column":4,"offset":3661},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Joining and Detatching Threads","position":{"start":{"line":140,"column":4,"offset":3666},"end":{"line":140,"column":34,"offset":3696},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":3663},"end":{"line":140,"column":34,"offset":3696},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Routines","position":{"start":{"line":142,"column":3,"offset":3700},"end":{"line":142,"column":11,"offset":3708},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":3698},"end":{"line":142,"column":13,"offset":3710},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":3698},"end":{"line":142,"column":13,"offset":3710},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"pthread_join(threadid, status)","position":{"start":{"line":144,"column":4,"offset":3715},"end":{"line":144,"column":34,"offset":3745},"indent":[]}}],"position":{"start":{"line":144,"column":4,"offset":3715},"end":{"line":144,"column":34,"offset":3745},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":3712},"end":{"line":144,"column":34,"offset":3745},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"pthread_detach(threadit, status)","position":{"start":{"line":145,"column":4,"offset":3749},"end":{"line":145,"column":36,"offset":3781},"indent":[]}}],"position":{"start":{"line":145,"column":4,"offset":3749},"end":{"line":145,"column":36,"offset":3781},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":3746},"end":{"line":145,"column":36,"offset":3781},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"pthread_attr_setdatachstate(attr, detachstate)","position":{"start":{"line":146,"column":4,"offset":3785},"end":{"line":146,"column":50,"offset":3831},"indent":[]}}],"position":{"start":{"line":146,"column":4,"offset":3785},"end":{"line":146,"column":50,"offset":3831},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":3782},"end":{"line":146,"column":50,"offset":3831},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"pthread_attr_getdetachstate(attr, detachstate)","position":{"start":{"line":147,"column":4,"offset":3835},"end":{"line":147,"column":50,"offset":3881},"indent":[]}}],"position":{"start":{"line":147,"column":4,"offset":3835},"end":{"line":147,"column":50,"offset":3881},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":3832},"end":{"line":147,"column":50,"offset":3881},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":3712},"end":{"line":147,"column":50,"offset":3881},"indent":[1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"\"joining\" is one way to accomplish synchronization between threads","position":{"start":{"line":149,"column":3,"offset":3885},"end":{"line":149,"column":69,"offset":3951},"indent":[]}}],"position":{"start":{"line":149,"column":3,"offset":3885},"end":{"line":149,"column":69,"offset":3951},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":3883},"end":{"line":149,"column":69,"offset":3951},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"the ","position":{"start":{"line":150,"column":3,"offset":3954},"end":{"line":150,"column":7,"offset":3958},"indent":[]}},{"type":"inlineCode","value":"pthread_join()","position":{"start":{"line":150,"column":7,"offset":3958},"end":{"line":150,"column":23,"offset":3974},"indent":[]}},{"type":"text","value":" subroutine blocks the calling thread until the specified threadid thread terminates","position":{"start":{"line":150,"column":23,"offset":3974},"end":{"line":150,"column":107,"offset":4058},"indent":[]}}],"position":{"start":{"line":150,"column":3,"offset":3954},"end":{"line":150,"column":107,"offset":4058},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":3952},"end":{"line":150,"column":107,"offset":4058},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The programmer is able to obtain the target thread's termination return status if it was specified in the target thread's call to ","position":{"start":{"line":151,"column":3,"offset":4061},"end":{"line":151,"column":133,"offset":4191},"indent":[]}},{"type":"inlineCode","value":"pthread_exit()","position":{"start":{"line":151,"column":133,"offset":4191},"end":{"line":151,"column":149,"offset":4207},"indent":[]}}],"position":{"start":{"line":151,"column":3,"offset":4061},"end":{"line":151,"column":149,"offset":4207},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":4059},"end":{"line":151,"column":149,"offset":4207},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When a thread if created, one of its attributes defines whether it is joinable or detached.","position":{"start":{"line":152,"column":3,"offset":4210},"end":{"line":152,"column":94,"offset":4301},"indent":[]}}],"position":{"start":{"line":152,"column":3,"offset":4210},"end":{"line":152,"column":94,"offset":4301},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":4208},"end":{"line":152,"column":94,"offset":4301},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Only threads that are create as joinable can be joined.","position":{"start":{"line":153,"column":3,"offset":4304},"end":{"line":153,"column":58,"offset":4359},"indent":[]}}],"position":{"start":{"line":153,"column":3,"offset":4304},"end":{"line":153,"column":58,"offset":4359},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":4302},"end":{"line":153,"column":58,"offset":4359},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":3883},"end":{"line":153,"column":58,"offset":4359},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To explicitly create a thread as joinable or detached, the attr argument in the ","position":{"start":{"line":155,"column":1,"offset":4361},"end":{"line":155,"column":81,"offset":4441},"indent":[]}},{"type":"inlineCode","value":"pthread_create()","position":{"start":{"line":155,"column":81,"offset":4441},"end":{"line":155,"column":99,"offset":4459},"indent":[]}},{"type":"text","value":" routine is used:","position":{"start":{"line":155,"column":99,"offset":4459},"end":{"line":155,"column":116,"offset":4476},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":4361},"end":{"line":155,"column":116,"offset":4476},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Declare a pthread attribute ariable of the ","position":{"start":{"line":157,"column":4,"offset":4481},"end":{"line":157,"column":47,"offset":4524},"indent":[]}},{"type":"inlineCode","value":"pthread_attr_t data","position":{"start":{"line":157,"column":47,"offset":4524},"end":{"line":157,"column":68,"offset":4545},"indent":[]}},{"type":"text","value":" type ","position":{"start":{"line":157,"column":68,"offset":4545},"end":{"line":157,"column":74,"offset":4551},"indent":[]}}],"position":{"start":{"line":157,"column":4,"offset":4481},"end":{"line":157,"column":74,"offset":4551},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":4478},"end":{"line":157,"column":74,"offset":4551},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Initialize the attribute ariable with ","position":{"start":{"line":158,"column":4,"offset":4555},"end":{"line":158,"column":42,"offset":4593},"indent":[]}},{"type":"inlineCode","value":"pthread_attr_init()","position":{"start":{"line":158,"column":42,"offset":4593},"end":{"line":158,"column":63,"offset":4614},"indent":[]}}],"position":{"start":{"line":158,"column":4,"offset":4555},"end":{"line":158,"column":63,"offset":4614},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":4552},"end":{"line":158,"column":63,"offset":4614},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Set the attribute detached status with ","position":{"start":{"line":159,"column":4,"offset":4618},"end":{"line":159,"column":43,"offset":4657},"indent":[]}},{"type":"inlineCode","value":"pthread_attr_setdetachedstate()","position":{"start":{"line":159,"column":43,"offset":4657},"end":{"line":159,"column":76,"offset":4690},"indent":[]}}],"position":{"start":{"line":159,"column":4,"offset":4618},"end":{"line":159,"column":76,"offset":4690},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":4615},"end":{"line":159,"column":76,"offset":4690},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When done, ree library resources used by the attribute with ","position":{"start":{"line":160,"column":4,"offset":4694},"end":{"line":160,"column":64,"offset":4754},"indent":[]}},{"type":"inlineCode","value":"pthread_attr_destroy()","position":{"start":{"line":160,"column":64,"offset":4754},"end":{"line":160,"column":88,"offset":4778},"indent":[]}}],"position":{"start":{"line":160,"column":4,"offset":4694},"end":{"line":160,"column":88,"offset":4778},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":4691},"end":{"line":160,"column":88,"offset":4778},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":4478},"end":{"line":160,"column":88,"offset":4778},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Example","position":{"start":{"line":162,"column":3,"offset":4782},"end":{"line":162,"column":10,"offset":4789},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":4780},"end":{"line":162,"column":12,"offset":4791},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":4780},"end":{"line":162,"column":12,"offset":4791},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"void *BusyWork(void *null) {\n\t// do stuff \n\tpthread_exit((void *) 0);\n}\n\nint main(int argc, char *argv[]) {\n\tpthread_attr_t attr;\n\tint rc, t;\n\tvoid *status;\n\n\t/* init and set thread detached attribute */\n\tpthread_attr_init(&attr);\n\tpthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n\n\t/* free attribute and wait for the other threads */\n\tpthread_attr_destory(&attr);\n\tfor (t=0; t< NUM_THREADS; t++) {\n\t\trc = pthread_join(thread[t], &status);\n\t\t// do stuff \n\t\tprintf(\"Completed join with thred %d status = %ld\\n\", t, (long)status);\n\t}\n\tpthread_exit(NULL);\n}","position":{"start":{"line":164,"column":1,"offset":4793},"end":{"line":188,"column":4,"offset":5368},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Syncronisation Issues","position":{"start":{"line":190,"column":4,"offset":5373},"end":{"line":190,"column":25,"offset":5394},"indent":[]}}],"position":{"start":{"line":190,"column":1,"offset":5370},"end":{"line":190,"column":26,"offset":5395},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When multiple threads attempt to manipulate the same data item, the results can often be incoherent if proper care is not take ie. race conditions.","position":{"start":{"line":192,"column":1,"offset":5397},"end":{"line":192,"column":148,"offset":5544},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":5397},"end":{"line":192,"column":148,"offset":5544},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"2: Mutexes","position":{"start":{"line":194,"column":3,"offset":5548},"end":{"line":194,"column":13,"offset":5558},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":5546},"end":{"line":194,"column":13,"offset":5558},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The second class of functions deal with synchronization - called a \"mutex\", which is an abbreviation for mutual exclusion.","position":{"start":{"line":196,"column":1,"offset":5560},"end":{"line":196,"column":123,"offset":5682},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":5560},"end":{"line":196,"column":123,"offset":5682},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Creating and Destroying Mutexes","position":{"start":{"line":198,"column":4,"offset":5687},"end":{"line":198,"column":35,"offset":5718},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":5684},"end":{"line":198,"column":35,"offset":5718},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Routines","position":{"start":{"line":200,"column":1,"offset":5720},"end":{"line":200,"column":9,"offset":5728},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":5720},"end":{"line":201,"column":4,"offset":5732},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"pthread_mutex_init(mutex, attr)","position":{"start":{"line":202,"column":1,"offset":5733},"end":{"line":202,"column":34,"offset":5766},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":202,"column":34,"offset":5766},"end":{"line":203,"column":1,"offset":5767},"indent":[1]}},{"type":"inlineCode","value":"pthread_mutex_destroy(mutex)","position":{"start":{"line":203,"column":1,"offset":5767},"end":{"line":203,"column":31,"offset":5797},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":203,"column":31,"offset":5797},"end":{"line":204,"column":1,"offset":5798},"indent":[1]}},{"type":"inlineCode","value":"pthread_mutexattr_init(attr)","position":{"start":{"line":204,"column":1,"offset":5798},"end":{"line":204,"column":31,"offset":5828},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":204,"column":31,"offset":5828},"end":{"line":205,"column":1,"offset":5829},"indent":[1]}},{"type":"inlineCode","value":"pthread_mutexattr_destroy(attr)","position":{"start":{"line":205,"column":1,"offset":5829},"end":{"line":205,"column":34,"offset":5862},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":5733},"end":{"line":205,"column":34,"offset":5862},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A mutex must be declared with type ","position":{"start":{"line":207,"column":1,"offset":5864},"end":{"line":207,"column":36,"offset":5899},"indent":[]}},{"type":"inlineCode","value":"pthread_mutex_t","position":{"start":{"line":207,"column":36,"offset":5899},"end":{"line":207,"column":53,"offset":5916},"indent":[]}},{"type":"text","value":", and must be initialized before they can be used.","position":{"start":{"line":207,"column":53,"offset":5916},"end":{"line":207,"column":103,"offset":5966},"indent":[]}}],"position":{"start":{"line":207,"column":1,"offset":5864},"end":{"line":207,"column":103,"offset":5966},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are two ways to init a mutex variable:\n1. Statically, when declared eg ","position":{"start":{"line":209,"column":1,"offset":5968},"end":{"line":210,"column":33,"offset":6045},"indent":[1]}},{"type":"inlineCode","value":"pthread_mutex_t mymutex = PTHREAD_MUTEX_INITIALIZER","position":{"start":{"line":210,"column":33,"offset":6045},"end":{"line":210,"column":86,"offset":6098},"indent":[]}},{"type":"text","value":"\n2. Dynamically, with the ","position":{"start":{"line":210,"column":86,"offset":6098},"end":{"line":211,"column":26,"offset":6124},"indent":[1]}},{"type":"inlineCode","value":"pthread_mutex_init()","position":{"start":{"line":211,"column":26,"offset":6124},"end":{"line":211,"column":48,"offset":6146},"indent":[]}},{"type":"text","value":" routine. This method permits setting mutex object attributes, ","position":{"start":{"line":211,"column":48,"offset":6146},"end":{"line":211,"column":111,"offset":6209},"indent":[]}},{"type":"inlineCode","value":"attr","position":{"start":{"line":211,"column":111,"offset":6209},"end":{"line":211,"column":117,"offset":6215},"indent":[]}},{"type":"text","value":" (which my be specified as NULL to accept defaults).","position":{"start":{"line":211,"column":117,"offset":6215},"end":{"line":211,"column":169,"offset":6267},"indent":[]}}],"position":{"start":{"line":209,"column":1,"offset":5968},"end":{"line":211,"column":169,"offset":6267},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The mutex is initially unlocked.","position":{"start":{"line":213,"column":1,"offset":6269},"end":{"line":213,"column":33,"offset":6301},"indent":[]}}],"position":{"start":{"line":213,"column":1,"offset":6269},"end":{"line":213,"column":33,"offset":6301},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Locking & Unlocking Mutexes","position":{"start":{"line":215,"column":4,"offset":6306},"end":{"line":215,"column":31,"offset":6333},"indent":[]}}],"position":{"start":{"line":215,"column":1,"offset":6303},"end":{"line":215,"column":31,"offset":6333},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Routines","position":{"start":{"line":217,"column":1,"offset":6335},"end":{"line":217,"column":9,"offset":6343},"indent":[]}}],"position":{"start":{"line":217,"column":1,"offset":6335},"end":{"line":218,"column":4,"offset":6347},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"pthread_mutex_lock(mutex)","position":{"start":{"line":219,"column":1,"offset":6348},"end":{"line":219,"column":28,"offset":6375},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":219,"column":28,"offset":6375},"end":{"line":220,"column":1,"offset":6376},"indent":[1]}},{"type":"inlineCode","value":"pthread_mutex_unlock(mutex)","position":{"start":{"line":220,"column":1,"offset":6376},"end":{"line":220,"column":30,"offset":6405},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":220,"column":30,"offset":6405},"end":{"line":221,"column":1,"offset":6406},"indent":[1]}},{"type":"inlineCode","value":"pthread_mutex_trylock(mutex)","position":{"start":{"line":221,"column":1,"offset":6406},"end":{"line":221,"column":31,"offset":6436},"indent":[]}}],"position":{"start":{"line":219,"column":1,"offset":6348},"end":{"line":221,"column":31,"offset":6436},"indent":[1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"pthread_mutex_lock(mutex)","position":{"start":{"line":223,"column":3,"offset":6440},"end":{"line":223,"column":30,"offset":6467},"indent":[]}},{"type":"text","value":" will lock the specified mutex","position":{"start":{"line":223,"column":30,"offset":6467},"end":{"line":223,"column":60,"offset":6497},"indent":[]}}],"position":{"start":{"line":223,"column":3,"offset":6440},"end":{"line":223,"column":60,"offset":6497},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":6438},"end":{"line":223,"column":60,"offset":6497},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"pthread_mutex_unlock(mutex)","position":{"start":{"line":224,"column":3,"offset":6500},"end":{"line":224,"column":32,"offset":6529},"indent":[]}},{"type":"text","value":" will unlock a mutex if called by the owning thread\n\t\t- throws an error if already unlocked or owned by another thread","position":{"start":{"line":224,"column":32,"offset":6529},"end":{"line":225,"column":66,"offset":6646},"indent":[0]}}],"position":{"start":{"line":224,"column":3,"offset":6500},"end":{"line":225,"column":66,"offset":6646},"indent":[0]}}],"position":{"start":{"line":224,"column":1,"offset":6498},"end":{"line":225,"column":66,"offset":6646},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"pthread_mutex_trylock(mutex)","position":{"start":{"line":226,"column":3,"offset":6649},"end":{"line":226,"column":33,"offset":6679},"indent":[]}},{"type":"text","value":" will attempt to lock a mutex, however if the mutex is already locked it will return a \"EBUSY\" error code. \n\t\t- May be useful to prevent deadlocks!","position":{"start":{"line":226,"column":33,"offset":6679},"end":{"line":227,"column":39,"offset":6825},"indent":[0]}}],"position":{"start":{"line":226,"column":3,"offset":6649},"end":{"line":227,"column":39,"offset":6825},"indent":[0]}}],"position":{"start":{"line":226,"column":1,"offset":6647},"end":{"line":227,"column":39,"offset":6825},"indent":[1]}}],"position":{"start":{"line":223,"column":1,"offset":6438},"end":{"line":227,"column":39,"offset":6825},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Example 1","position":{"start":{"line":229,"column":3,"offset":6829},"end":{"line":229,"column":12,"offset":6838},"indent":[]}}],"position":{"start":{"line":229,"column":1,"offset":6827},"end":{"line":229,"column":14,"offset":6840},"indent":[]}}],"position":{"start":{"line":229,"column":1,"offset":6827},"end":{"line":229,"column":14,"offset":6840},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can now write our previously incorrect code segment as...","position":{"start":{"line":231,"column":1,"offset":6842},"end":{"line":231,"column":61,"offset":6902},"indent":[]}}],"position":{"start":{"line":231,"column":1,"offset":6842},"end":{"line":231,"column":61,"offset":6902},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"pthread_mutex_t min_value_lock;\n\nmain() {\n\t...\n\tpthread_mutex_init(&min_value_lock, NULL);\n\t...\n}\n\nvoid *find_min(void *list_ptr) {\n\t...\n\tpthread_mutex_lock(&min_value_lock);\n\tif (my_cost < best_cost) {\n\t\tbest_cost = my_cost;\n\t}\t\n\tpthread_mutex_unlock(&min_value_lock);\n}","position":{"start":{"line":233,"column":1,"offset":6904},"end":{"line":250,"column":4,"offset":7185},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Example 2","position":{"start":{"line":252,"column":3,"offset":7189},"end":{"line":252,"column":12,"offset":7198},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":7187},"end":{"line":252,"column":14,"offset":7200},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":7187},"end":{"line":252,"column":14,"offset":7200},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":254,"column":1,"offset":7202},"end":{"line":254,"column":5,"offset":7206},"indent":[]}},{"type":"inlineCode","value":"producer-consumer","position":{"start":{"line":254,"column":5,"offset":7206},"end":{"line":254,"column":24,"offset":7225},"indent":[]}},{"type":"text","value":" scenario imposes the following constraints:","position":{"start":{"line":254,"column":24,"offset":7225},"end":{"line":254,"column":68,"offset":7269},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":7202},"end":{"line":254,"column":68,"offset":7269},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The producer thread must not overwrite the shared buffer when the previous task has no been picked up by a consumer thread.","position":{"start":{"line":256,"column":4,"offset":7274},"end":{"line":256,"column":127,"offset":7397},"indent":[]}}],"position":{"start":{"line":256,"column":4,"offset":7274},"end":{"line":256,"column":127,"offset":7397},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":7271},"end":{"line":256,"column":127,"offset":7397},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The consumer threads must not pick up tasks until there is something present in the shared data structure.","position":{"start":{"line":257,"column":4,"offset":7401},"end":{"line":257,"column":110,"offset":7507},"indent":[]}}],"position":{"start":{"line":257,"column":4,"offset":7401},"end":{"line":257,"column":110,"offset":7507},"indent":[]}}],"position":{"start":{"line":257,"column":1,"offset":7398},"end":{"line":257,"column":110,"offset":7507},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Individual consumer threads should pick up tasks one at a time.","position":{"start":{"line":258,"column":4,"offset":7511},"end":{"line":258,"column":67,"offset":7574},"indent":[]}}],"position":{"start":{"line":258,"column":4,"offset":7511},"end":{"line":258,"column":67,"offset":7574},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":7508},"end":{"line":258,"column":67,"offset":7574},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":7271},"end":{"line":258,"column":67,"offset":7574},"indent":[1,1]}},{"type":"code","lang":"c","meta":null,"value":"pthread_mutex_t task_queue_lock;\nint task_available;\n\nmain() {\n\ttask_available = 0;\n\tpthread_mutex_init(&task_queue_lock, NULL);\n}\n\nvoid *producer(void *producer_thread_data) {\n\t...\n\twhile (!done()) {\n\t\tinserted = 0;\n\t\tcreate_task(&my_task);\n\t\twhile (inserted == 0) {\n\t\t\tpthread_mutex_lock(&task_queue_lock);\n\t\t\tif (task_available == 0) {\n\t\t\t\tinsert_into_queue(my_task);\n\t\t\t\ttask_available = 1;\n\t\t\t\tinserted = 1;\n\t\t\t}\n\t\t\tpthread_mutex_unlock(&task_queue_lock);\n\t\t}\n\t}\n}\n\nvoid *consumer(void *consumer_thread_data) {\n\t...\n\twhile (!done()) {\n\t\textracted = 0;\n\t\twhile (extracted == 0) {\n\t\t\tpthread_mutex_lock(&task_queue_lock);\n\t\t\tif (task_available == 1) {\n\t\t\t\textract_from_queue(&my_task);\n\t\t\t\ttask_available = 0;\n\t\t\t\textracted = 1;\n\t\t\t}\n\t\t\tpthread_mutex_unlock(&task_queue_lock);\n\t\t}\n\t\tprocess_task(my_task);\n\t}\n}","position":{"start":{"line":260,"column":1,"offset":7576},"end":{"line":302,"column":4,"offset":8399},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Overheads of Locking","position":{"start":{"line":304,"column":4,"offset":8404},"end":{"line":304,"column":24,"offset":8424},"indent":[]}}],"position":{"start":{"line":304,"column":1,"offset":8401},"end":{"line":304,"column":25,"offset":8425},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Locks represent serialization points since critical sections must be executed by threads one after another.","position":{"start":{"line":306,"column":3,"offset":8429},"end":{"line":306,"column":110,"offset":8536},"indent":[]}}],"position":{"start":{"line":306,"column":3,"offset":8429},"end":{"line":306,"column":110,"offset":8536},"indent":[]}}],"position":{"start":{"line":306,"column":1,"offset":8427},"end":{"line":306,"column":110,"offset":8536},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Encapsulating large segments of the program within locks can lead to significant performance degradation.","position":{"start":{"line":307,"column":3,"offset":8539},"end":{"line":307,"column":108,"offset":8644},"indent":[]}}],"position":{"start":{"line":307,"column":3,"offset":8539},"end":{"line":307,"column":108,"offset":8644},"indent":[]}}],"position":{"start":{"line":307,"column":1,"offset":8537},"end":{"line":307,"column":108,"offset":8644},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It is often possible to reduce the idling overhead associated with locks using ","position":{"start":{"line":308,"column":3,"offset":8647},"end":{"line":308,"column":82,"offset":8726},"indent":[]}},{"type":"inlineCode","value":"pthread_mutex_trylock","position":{"start":{"line":308,"column":82,"offset":8726},"end":{"line":308,"column":105,"offset":8749},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":308,"column":105,"offset":8749},"end":{"line":308,"column":106,"offset":8750},"indent":[]}}],"position":{"start":{"line":308,"column":3,"offset":8647},"end":{"line":308,"column":106,"offset":8750},"indent":[]}}],"position":{"start":{"line":308,"column":1,"offset":8645},"end":{"line":308,"column":106,"offset":8750},"indent":[]}}],"position":{"start":{"line":306,"column":1,"offset":8427},"end":{"line":308,"column":106,"offset":8750},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Alleviating Locking Overhead","position":{"start":{"line":310,"column":3,"offset":8754},"end":{"line":310,"column":31,"offset":8782},"indent":[]}}],"position":{"start":{"line":310,"column":1,"offset":8752},"end":{"line":310,"column":33,"offset":8784},"indent":[]}}],"position":{"start":{"line":310,"column":1,"offset":8752},"end":{"line":310,"column":33,"offset":8784},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"pthread_mutex_t tryLock_lock = PTHREAD_MUTEX_INITIALIZER;\n\nlock_status = pthread_mutex_trylock(&tryLock_lock)\nif (lock_status == EBUSY) {\n\t/* do something else */\n\t...\n} else {\n\t/* do one thing */\n\t...\n\tpthread_mutex_unlock(&tryLock_lock);\n}","position":{"start":{"line":312,"column":1,"offset":8786},"end":{"line":324,"column":4,"offset":9037},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Monitors","position":{"start":{"line":326,"column":4,"offset":9042},"end":{"line":326,"column":12,"offset":9050},"indent":[]}}],"position":{"start":{"line":326,"column":1,"offset":9039},"end":{"line":326,"column":12,"offset":9050},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Mutexes provide powerful sync tools, but...","position":{"start":{"line":328,"column":1,"offset":9052},"end":{"line":328,"column":44,"offset":9095},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":9052},"end":{"line":328,"column":44,"offset":9095},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"lock() and unlock() are scatteed among several threads, therefore it is difficult to understand their effects","position":{"start":{"line":329,"column":3,"offset":9098},"end":{"line":329,"column":112,"offset":9207},"indent":[]}}],"position":{"start":{"line":329,"column":3,"offset":9098},"end":{"line":329,"column":112,"offset":9207},"indent":[]}}],"position":{"start":{"line":329,"column":1,"offset":9096},"end":{"line":329,"column":112,"offset":9207},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"usage must be correct in all the threads ","position":{"start":{"line":330,"column":3,"offset":9210},"end":{"line":330,"column":44,"offset":9251},"indent":[]}}],"position":{"start":{"line":330,"column":3,"offset":9210},"end":{"line":330,"column":44,"offset":9251},"indent":[]}}],"position":{"start":{"line":330,"column":1,"offset":9208},"end":{"line":330,"column":44,"offset":9251},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"one bad thread (or one programming error) can kill the whole system","position":{"start":{"line":331,"column":3,"offset":9254},"end":{"line":331,"column":70,"offset":9321},"indent":[]}}],"position":{"start":{"line":331,"column":3,"offset":9254},"end":{"line":331,"column":70,"offset":9321},"indent":[]}}],"position":{"start":{"line":331,"column":1,"offset":9252},"end":{"line":331,"column":70,"offset":9321},"indent":[]}}],"position":{"start":{"line":329,"column":1,"offset":9096},"end":{"line":331,"column":70,"offset":9321},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":333,"column":1,"offset":9323},"end":{"line":333,"column":3,"offset":9325},"indent":[]}},{"type":"inlineCode","value":"monitor","position":{"start":{"line":333,"column":3,"offset":9325},"end":{"line":333,"column":12,"offset":9334},"indent":[]}},{"type":"text","value":" is a high-level abstraction that may provide a convenient and effective mechanism for thread synchronization.","position":{"start":{"line":333,"column":12,"offset":9334},"end":{"line":333,"column":122,"offset":9444},"indent":[]}}],"position":{"start":{"line":333,"column":1,"offset":9323},"end":{"line":333,"column":122,"offset":9444},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"local data variables are accessible only by the monitor ","position":{"start":{"line":335,"column":3,"offset":9448},"end":{"line":335,"column":59,"offset":9504},"indent":[]}}],"position":{"start":{"line":335,"column":3,"offset":9448},"end":{"line":335,"column":59,"offset":9504},"indent":[]}}],"position":{"start":{"line":335,"column":1,"offset":9446},"end":{"line":335,"column":59,"offset":9504},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"thread enters monitor by invoking one of its procedures ","position":{"start":{"line":336,"column":3,"offset":9507},"end":{"line":336,"column":59,"offset":9563},"indent":[]}}],"position":{"start":{"line":336,"column":3,"offset":9507},"end":{"line":336,"column":59,"offset":9563},"indent":[]}}],"position":{"start":{"line":336,"column":1,"offset":9505},"end":{"line":336,"column":59,"offset":9563},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"only one thread may be executing in a the monitor at a time","position":{"start":{"line":337,"column":3,"offset":9566},"end":{"line":337,"column":62,"offset":9625},"indent":[]}}],"position":{"start":{"line":337,"column":3,"offset":9566},"end":{"line":337,"column":62,"offset":9625},"indent":[]}}],"position":{"start":{"line":337,"column":1,"offset":9564},"end":{"line":337,"column":62,"offset":9625},"indent":[]}}],"position":{"start":{"line":335,"column":1,"offset":9446},"end":{"line":337,"column":62,"offset":9625},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Monitor and Condition Variables","position":{"start":{"line":339,"column":3,"offset":9629},"end":{"line":339,"column":34,"offset":9660},"indent":[]}}],"position":{"start":{"line":339,"column":1,"offset":9627},"end":{"line":339,"column":36,"offset":9662},"indent":[]}}],"position":{"start":{"line":339,"column":1,"offset":9627},"end":{"line":339,"column":36,"offset":9662},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Monitor does not need to code certain sync constraints explicitly.","position":{"start":{"line":341,"column":3,"offset":9666},"end":{"line":341,"column":69,"offset":9732},"indent":[]}}],"position":{"start":{"line":341,"column":3,"offset":9666},"end":{"line":341,"column":69,"offset":9732},"indent":[]}}],"position":{"start":{"line":341,"column":1,"offset":9664},"end":{"line":341,"column":69,"offset":9732},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"However, it is not sufficiently powerful for modeling some other synchronization schemes.","position":{"start":{"line":342,"column":3,"offset":9735},"end":{"line":342,"column":92,"offset":9824},"indent":[]}}],"position":{"start":{"line":342,"column":3,"offset":9735},"end":{"line":342,"column":92,"offset":9824},"indent":[]}}],"position":{"start":{"line":342,"column":1,"offset":9733},"end":{"line":342,"column":92,"offset":9824},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"An additional sync mechanism ie ","position":{"start":{"line":343,"column":3,"offset":9827},"end":{"line":343,"column":35,"offset":9859},"indent":[]}},{"type":"inlineCode","value":"condition variable","position":{"start":{"line":343,"column":35,"offset":9859},"end":{"line":343,"column":55,"offset":9879},"indent":[]}},{"type":"text","value":" is required.","position":{"start":{"line":343,"column":55,"offset":9879},"end":{"line":343,"column":68,"offset":9892},"indent":[]}}],"position":{"start":{"line":343,"column":3,"offset":9827},"end":{"line":343,"column":68,"offset":9892},"indent":[]}}],"position":{"start":{"line":343,"column":1,"offset":9825},"end":{"line":343,"column":68,"offset":9892},"indent":[]}}],"position":{"start":{"line":341,"column":1,"offset":9664},"end":{"line":343,"column":68,"offset":9892},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Condition Variables","position":{"start":{"line":345,"column":3,"offset":9896},"end":{"line":345,"column":22,"offset":9915},"indent":[]}}],"position":{"start":{"line":345,"column":1,"offset":9894},"end":{"line":345,"column":24,"offset":9917},"indent":[]}}],"position":{"start":{"line":345,"column":1,"offset":9894},"end":{"line":345,"column":24,"offset":9917},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The third class of functions address communications between threads that share a mutex","position":{"start":{"line":347,"column":3,"offset":9921},"end":{"line":347,"column":89,"offset":10007},"indent":[]}}],"position":{"start":{"line":347,"column":3,"offset":9921},"end":{"line":347,"column":89,"offset":10007},"indent":[]}}],"position":{"start":{"line":347,"column":1,"offset":9919},"end":{"line":347,"column":89,"offset":10007},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A condition variable allows a thread to block itself until specified data reaches a predefined state.","position":{"start":{"line":348,"column":3,"offset":10010},"end":{"line":348,"column":104,"offset":10111},"indent":[]}}],"position":{"start":{"line":348,"column":3,"offset":10010},"end":{"line":348,"column":104,"offset":10111},"indent":[]}}],"position":{"start":{"line":348,"column":1,"offset":10008},"end":{"line":348,"column":104,"offset":10111},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A condition variable indicates an event and has no value\n\t\t- One cannot store a value into nor retrieve a value from a condition variable.\n\t\t- If a thread must wait for an event to occur, that tread waits on the corresponding condition variable.\n\t\t- A condition variable has a queue for those threads that are waiting the corresponding event to occur to wait on.\n\t\t- If another thread causes the event to occur, that thread simply signal the corresponding condition variable.","position":{"start":{"line":349,"column":3,"offset":10114},"end":{"line":353,"column":112,"offset":10585},"indent":[0,0,0,0]}}],"position":{"start":{"line":349,"column":3,"offset":10114},"end":{"line":353,"column":112,"offset":10585},"indent":[0,0,0,0]}}],"position":{"start":{"line":349,"column":1,"offset":10112},"end":{"line":353,"column":112,"offset":10585},"indent":[1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"This class includes funcs to ","position":{"start":{"line":354,"column":3,"offset":10588},"end":{"line":354,"column":32,"offset":10617},"indent":[]}},{"type":"inlineCode","value":"create","position":{"start":{"line":354,"column":32,"offset":10617},"end":{"line":354,"column":40,"offset":10625},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":354,"column":40,"offset":10625},"end":{"line":354,"column":42,"offset":10627},"indent":[]}},{"type":"inlineCode","value":"destroy","position":{"start":{"line":354,"column":42,"offset":10627},"end":{"line":354,"column":51,"offset":10636},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":354,"column":51,"offset":10636},"end":{"line":354,"column":53,"offset":10638},"indent":[]}},{"type":"inlineCode","value":"wait","position":{"start":{"line":354,"column":53,"offset":10638},"end":{"line":354,"column":59,"offset":10644},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":354,"column":59,"offset":10644},"end":{"line":354,"column":64,"offset":10649},"indent":[]}},{"type":"inlineCode","value":"signal","position":{"start":{"line":354,"column":64,"offset":10649},"end":{"line":354,"column":72,"offset":10657},"indent":[]}},{"type":"text","value":" based on specified variable values.","position":{"start":{"line":354,"column":72,"offset":10657},"end":{"line":354,"column":108,"offset":10693},"indent":[]}}],"position":{"start":{"line":354,"column":3,"offset":10588},"end":{"line":354,"column":108,"offset":10693},"indent":[]}}],"position":{"start":{"line":354,"column":1,"offset":10586},"end":{"line":354,"column":108,"offset":10693},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Funcs to set/quey cond variable attrs are also included.","position":{"start":{"line":355,"column":3,"offset":10696},"end":{"line":355,"column":59,"offset":10752},"indent":[]}}],"position":{"start":{"line":355,"column":3,"offset":10696},"end":{"line":355,"column":59,"offset":10752},"indent":[]}}],"position":{"start":{"line":355,"column":1,"offset":10694},"end":{"line":355,"column":59,"offset":10752},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Cond variable is always used in conjunction with a ","position":{"start":{"line":356,"column":3,"offset":10755},"end":{"line":356,"column":54,"offset":10806},"indent":[]}},{"type":"inlineCode","value":"mutex lock","position":{"start":{"line":356,"column":54,"offset":10806},"end":{"line":356,"column":66,"offset":10818},"indent":[]}}],"position":{"start":{"line":356,"column":3,"offset":10755},"end":{"line":356,"column":66,"offset":10818},"indent":[]}}],"position":{"start":{"line":356,"column":1,"offset":10753},"end":{"line":356,"column":66,"offset":10818},"indent":[]}}],"position":{"start":{"line":347,"column":1,"offset":9919},"end":{"line":356,"column":66,"offset":10818},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Create & Destroying Cond Variables","position":{"start":{"line":358,"column":4,"offset":10823},"end":{"line":358,"column":38,"offset":10857},"indent":[]}}],"position":{"start":{"line":358,"column":1,"offset":10820},"end":{"line":358,"column":38,"offset":10857},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Routines","position":{"start":{"line":360,"column":1,"offset":10859},"end":{"line":360,"column":9,"offset":10867},"indent":[]}}],"position":{"start":{"line":360,"column":1,"offset":10859},"end":{"line":361,"column":4,"offset":10871},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"pthread_cond_init(condition, attr)\npthread_cond_destroy(condition)\npthread_condattr_init(attr)\npthread_condattr_destroy(attr)","position":{"start":{"line":362,"column":1,"offset":10872},"end":{"line":365,"column":31,"offset":10997},"indent":[1,1,1]}}],"position":{"start":{"line":362,"column":1,"offset":10872},"end":{"line":365,"column":31,"offset":10997},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Condition variables must be declared with type ","position":{"start":{"line":367,"column":1,"offset":10999},"end":{"line":367,"column":48,"offset":11046},"indent":[]}},{"type":"inlineCode","value":"pthread_cont_t","position":{"start":{"line":367,"column":48,"offset":11046},"end":{"line":367,"column":64,"offset":11062},"indent":[]}},{"type":"text","value":", and must be initialized before they can be used.","position":{"start":{"line":367,"column":64,"offset":11062},"end":{"line":367,"column":114,"offset":11112},"indent":[]}}],"position":{"start":{"line":367,"column":1,"offset":10999},"end":{"line":367,"column":114,"offset":11112},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"2 Ways to declare:\n1. Statically\n2. Dynamically ","position":{"start":{"line":369,"column":1,"offset":11114},"end":{"line":371,"column":16,"offset":11162},"indent":[1,1]}}],"position":{"start":{"line":369,"column":1,"offset":11114},"end":{"line":371,"column":16,"offset":11162},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Waiting and Signaling on Condition Variable","position":{"start":{"line":373,"column":4,"offset":11167},"end":{"line":373,"column":47,"offset":11210},"indent":[]}}],"position":{"start":{"line":373,"column":1,"offset":11164},"end":{"line":373,"column":47,"offset":11210},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"pthread_cond_signal()","position":{"start":{"line":375,"column":1,"offset":11212},"end":{"line":375,"column":24,"offset":11235},"indent":[]}},{"type":"text","value":" is used to signal (or wake up) another thread which is waiting on the condition variable and should be called after the ","position":{"start":{"line":375,"column":24,"offset":11235},"end":{"line":375,"column":145,"offset":11356},"indent":[]}},{"type":"inlineCode","value":"mutex","position":{"start":{"line":375,"column":145,"offset":11356},"end":{"line":375,"column":152,"offset":11363},"indent":[]}},{"type":"text","value":" is locked.","position":{"start":{"line":375,"column":152,"offset":11363},"end":{"line":375,"column":163,"offset":11374},"indent":[]}}],"position":{"start":{"line":375,"column":1,"offset":11212},"end":{"line":375,"column":163,"offset":11374},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It must unlock ","position":{"start":{"line":377,"column":1,"offset":11376},"end":{"line":377,"column":16,"offset":11391},"indent":[]}},{"type":"inlineCode","value":"mutex","position":{"start":{"line":377,"column":16,"offset":11391},"end":{"line":377,"column":23,"offset":11398},"indent":[]}},{"type":"text","value":" in order for ","position":{"start":{"line":377,"column":23,"offset":11398},"end":{"line":377,"column":37,"offset":11412},"indent":[]}},{"type":"inlineCode","value":"pthread_cond_wait()","position":{"start":{"line":377,"column":37,"offset":11412},"end":{"line":377,"column":58,"offset":11433},"indent":[]}},{"type":"text","value":" routine to complete.","position":{"start":{"line":377,"column":58,"offset":11433},"end":{"line":377,"column":79,"offset":11454},"indent":[]}}],"position":{"start":{"line":377,"column":1,"offset":11376},"end":{"line":377,"column":79,"offset":11454},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"pthread_cond_broadcast()","position":{"start":{"line":379,"column":1,"offset":11456},"end":{"line":379,"column":27,"offset":11482},"indent":[]}},{"type":"text","value":" routine unlocks all of the threads blocked on the condition variable.","position":{"start":{"line":379,"column":27,"offset":11482},"end":{"line":379,"column":97,"offset":11552},"indent":[]}}],"position":{"start":{"line":379,"column":1,"offset":11456},"end":{"line":379,"column":97,"offset":11552},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Proper locking and unlocked of mutex is essential for these routines\n\t\t- Failing to lock may cause it NOT to block \n\t\t- Failing to unlock the mutex may not allow a matching ","position":{"start":{"line":381,"column":3,"offset":11556},"end":{"line":383,"column":57,"offset":11727},"indent":[0,0]}},{"type":"inlineCode","value":"pthread_cond_wait()","position":{"start":{"line":383,"column":57,"offset":11727},"end":{"line":383,"column":78,"offset":11748},"indent":[]}},{"type":"text","value":" routine to complete (it will remain blocked)","position":{"start":{"line":383,"column":78,"offset":11748},"end":{"line":383,"column":123,"offset":11793},"indent":[]}}],"position":{"start":{"line":381,"column":3,"offset":11556},"end":{"line":383,"column":123,"offset":11793},"indent":[0,0]}}],"position":{"start":{"line":381,"column":1,"offset":11554},"end":{"line":383,"column":123,"offset":11793},"indent":[1,1]}}],"position":{"start":{"line":381,"column":1,"offset":11554},"end":{"line":383,"column":123,"offset":11793},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Producer-Consumer Using Condition Variables","position":{"start":{"line":385,"column":4,"offset":11798},"end":{"line":385,"column":47,"offset":11841},"indent":[]}}],"position":{"start":{"line":385,"column":1,"offset":11795},"end":{"line":385,"column":48,"offset":11842},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"pthread_cond_t cond_queue_empty, cond_queue_full;\npthread_mutex_t task_queue_cond_lock;\nint task_available;\n// other data structures here \n\nmain() {\n\t// declarations and initializations \n\ttask_available = 0;\n\tpthread_cond_init(&cond_queue_empty, NULL);\n\tpthread_cond_init(&cond_queue_full, NULL);\n\tpthread_mutex_init(&task_queue_cond_lock, NULL);\n\t// create and join producer and consumer threads\n}\n\nvoid *producer(void *producer_thread_data) {\n\twhile(!done()) {\n\t\tcreate_task();\n\t\tpthread_mutex_lock(&task_queue_cond_lock);\n\t\t\n\t\twhile (task_available == 1) {\n\t\t\tpthread_cond_wait(&cond_queue_empty,\n\t\t\t\t&task_queue_cond_lock);\n\t\t}\n\n\t\tinsert_into_queue();\n\t\ttask_available = 1;\n\t\tpthread_cond_signal(&cond_queue_full);\n\t\tpthread_mutex_unlock(&task_queue_cond_lock);\n\t}\n}\n\nvoid *consumer(void *consumer_thread_data) {\n\twhile(!done()) {\n\t\tpthread_mutex_lock(&task_queue_cond_lock);\n\t\twhile (task_available == 0) {\n\t\t\tpthread_cond_wait(&cond_queue_full,\n\t\t\t\t&task_queue_cond_lock);\n\t\t}\n\n\t\tmy_task = extract_from_queue();\n\t\ttask_available = 0;\n\t\tpthread_cond_signal(&cond_queue_empty);\n\t\tpthread_mutex_unlock(&task_queue_cond_lock);\n\t\tprocess_task(my_task);\n\t}\n}","position":{"start":{"line":387,"column":1,"offset":11844},"end":{"line":434,"column":4,"offset":13012},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":450,"column":1,"offset":13028},"end":{"line":450,"column":31,"offset":13058},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":450,"column":31,"offset":13058}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"pthreads\"\n    }}>{`Pthreads`}</h1>\n    <h2 {...{\n      \"id\": \"pthreads-api\"\n    }}>{`Pthreads API`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Defined in the ANSI/IEEE Posix 1003.1 - 1995 standard`}</li>\n      <li parentName=\"ul\">{`Subroutines comprise the Pthreads API can be informally grouped into three major classes:`}</li>\n    </ul>\n    <ol>\n      <li parentName=\"ol\">{`Thread management`}</li>\n      <li parentName=\"ol\">{`Mutexes `}</li>\n      <li parentName=\"ol\">{`Condition variables`}</li>\n    </ol>\n    <h1 {...{\n      \"id\": \"1-thread-management\"\n    }}>{`1: Thread Management`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`first class of functions work directly on threads - creating, detatching, joining etc `}</li>\n      <li parentName=\"ul\">{`also include funcs to set/query thread attributes (joinable, scheduling etc)`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Create Threads`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`initially, single default thread - others must be explicitly created`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`pthread_create(thread, attr, startRoutine, arg)\n// thread - unique identifier for the new thread (pthread_t)\n// attr - attr object used to set thread attributes (pthread_attr) - you can specify a thread attributes object, or NULL for the default values\n// startRoutine - C routine that the thread will execute \n// arg - single arg that may be passed to startRoutine - it must be passed by reference (pointer to struct) and NULL may be used if no arg is to be passed\n\n/*\n    If successful, the pthread_create() function shall return zero; otherwise, an error number shall be returned to indicate the error\n */\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Thread Attributes`}</strong></p>\n    <p>{`By default, a thread is created with certain attributes.`}</p>\n    <p>{`pthread_attr_init(attr) and pthread_attr_destroy(attr) are used to initialize/destroy the thread attribute object.`}</p>\n    <p>{`Other routines are then used to query/set specific attributes in the thread attribute object.`}</p>\n    <p><strong parentName=\"p\">{`Terminating Thread`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Thread makes call to the pthread_exit() subroutine `}</li>\n      <li parentName=\"ol\">{`Thread is cancelled by another thread via pthread_cancel() routine `}</li>\n      <li parentName=\"ol\">{`Entire process is terminated due to call to exit subroutine `}</li>\n    </ol>\n    <p>{`Routine: `}<inlineCode parentName=\"p\">{`pthread_exit(status)`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\">{`used to explicitly exit the thread`}</li>\n      <li parentName=\"ul\">{`programmer may optionalyl specify a termination status, which is stored as a void pointer for any thread that may join the calling thread`}</li>\n    </ul>\n    <p>{`Cleanup: `}<inlineCode parentName=\"p\">{`pthread_exit()`}</inlineCode>{` does not close files; any files opened inside the thread will remain open after the thread is terminated.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`#include <pthread.h>\n#include <stdio.h>\n#include <stdlib.h>\n#define NUM_THREADS 5\n\nvoid *PrintHello(void *threadid) {\n    int *tid;\n    tid = (int *)threadid;\n    printf(\"Hello World! It's me, thread #%d!\\\\n\", *tid);\n    pthread_exit(NULL);\n}\n\nint main(int argc, char *argv[]) {\n    pthread_t threads[NUM_THREADS];\n    int rc, t, tids[NUM_THREADS];\n    for (t=0; t< NUM_THREADS; t++) {\n        printf(\"In main: creating thread %d\\\\n\", t);\n        tids[t] = t;\n        rc = pthread_create(&threads[t], NULL, PrintHello, (void *)&tids[t]);\n\n        if (rc) {\n            printf(\"ERROR; return code from pthread_create() is %d\\\\n\", rc);\n            exit(-1);\n        }\n    }\n    pthread_exit(NULL); \n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"passing-arguments-to-threads\"\n    }}>{`Passing Arguments to Threads`}</h2>\n    <p><inlineCode parentName=\"p\">{`pthread_create()`}</inlineCode>{` routine permits the programmer to pass one argument to the thread start routine.`}</p>\n    <p>{`For cases where multiple args must be passed, we can create a struct and use the reference pointer as an arg.`}</p>\n    <p>{`All args passed by reference must be cast to (void *)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`struct two_args {\n    int arg1;\n    int arg2;   \n};\n\nvoid *needs_2_args(void *ap) {\n    struct two_args *argp;\n    int a1, a2;\n\n    argp = (struct two_args *) ap;\n\n    // do stuff here\n    \n    a1 = argp->arg1;\n    a2 = argp->arg2;\n    \n    // do stuff here \n\n    free(argp);\n    pthread_exit(NULL);\n}\n\nint main(int argc, char *argv[]) {\n    pthread_t t;\n    struct two_args *ap;\n    int rc;\n\n    // do stuff here \n\n    ap = (struct two_args *)malloc(sizeof(struct two_args));\n    ap->arg1 = 1;\n    ap->arg2 = 2;\n    rc = pthread_create(&t, NULL, needs_2_args, (void *) ap);\n\n    // do stuff here \n\n    pthread_exit(NULL);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"joining-and-detatching-threads\"\n    }}>{`Joining and Detatching Threads`}</h2>\n    <p><strong parentName=\"p\">{`Routines`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`pthread_join(threadid, status)`}</li>\n      <li parentName=\"ol\">{`pthread_detach(threadit, status)`}</li>\n      <li parentName=\"ol\">{`pthread_attr_setdatachstate(attr, detachstate)`}</li>\n      <li parentName=\"ol\">{`pthread_attr_getdetachstate(attr, detachstate)`}</li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">{`\"joining\" is one way to accomplish synchronization between threads`}</li>\n      <li parentName=\"ul\">{`the `}<inlineCode parentName=\"li\">{`pthread_join()`}</inlineCode>{` subroutine blocks the calling thread until the specified threadid thread terminates`}</li>\n      <li parentName=\"ul\">{`The programmer is able to obtain the target thread's termination return status if it was specified in the target thread's call to `}<inlineCode parentName=\"li\">{`pthread_exit()`}</inlineCode></li>\n      <li parentName=\"ul\">{`When a thread if created, one of its attributes defines whether it is joinable or detached.`}</li>\n      <li parentName=\"ul\">{`Only threads that are create as joinable can be joined.`}</li>\n    </ul>\n    <p>{`To explicitly create a thread as joinable or detached, the attr argument in the `}<inlineCode parentName=\"p\">{`pthread_create()`}</inlineCode>{` routine is used:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Declare a pthread attribute ariable of the `}<inlineCode parentName=\"li\">{`pthread_attr_t data`}</inlineCode>{` type `}</li>\n      <li parentName=\"ol\">{`Initialize the attribute ariable with `}<inlineCode parentName=\"li\">{`pthread_attr_init()`}</inlineCode></li>\n      <li parentName=\"ol\">{`Set the attribute detached status with `}<inlineCode parentName=\"li\">{`pthread_attr_setdetachedstate()`}</inlineCode></li>\n      <li parentName=\"ol\">{`When done, ree library resources used by the attribute with `}<inlineCode parentName=\"li\">{`pthread_attr_destroy()`}</inlineCode></li>\n    </ol>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`void *BusyWork(void *null) {\n    // do stuff \n    pthread_exit((void *) 0);\n}\n\nint main(int argc, char *argv[]) {\n    pthread_attr_t attr;\n    int rc, t;\n    void *status;\n\n    /* init and set thread detached attribute */\n    pthread_attr_init(&attr);\n    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n\n    /* free attribute and wait for the other threads */\n    pthread_attr_destory(&attr);\n    for (t=0; t< NUM_THREADS; t++) {\n        rc = pthread_join(thread[t], &status);\n        // do stuff \n        printf(\"Completed join with thred %d status = %ld\\\\n\", t, (long)status);\n    }\n    pthread_exit(NULL);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"syncronisation-issues\"\n    }}>{`Syncronisation Issues`}</h2>\n    <p>{`When multiple threads attempt to manipulate the same data item, the results can often be incoherent if proper care is not take ie. race conditions.`}</p>\n    <h1 {...{\n      \"id\": \"2-mutexes\"\n    }}>{`2: Mutexes`}</h1>\n    <p>{`The second class of functions deal with synchronization - called a \"mutex\", which is an abbreviation for mutual exclusion.`}</p>\n    <h2 {...{\n      \"id\": \"creating-and-destroying-mutexes\"\n    }}>{`Creating and Destroying Mutexes`}</h2>\n    <h2 {...{\n      \"id\": \"routines\"\n    }}>{`Routines`}</h2>\n    <p><inlineCode parentName=\"p\">{`pthread_mutex_init(mutex, attr)`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`pthread_mutex_destroy(mutex)`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`pthread_mutexattr_init(attr)`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`pthread_mutexattr_destroy(attr)`}</inlineCode></p>\n    <p>{`A mutex must be declared with type `}<inlineCode parentName=\"p\">{`pthread_mutex_t`}</inlineCode>{`, and must be initialized before they can be used.`}</p>\n    <p>{`There are two ways to init a mutex variable:\n1. Statically, when declared eg `}<inlineCode parentName=\"p\">{`pthread_mutex_t mymutex = PTHREAD_MUTEX_INITIALIZER`}</inlineCode>{`\n2. Dynamically, with the `}<inlineCode parentName=\"p\">{`pthread_mutex_init()`}</inlineCode>{` routine. This method permits setting mutex object attributes, `}<inlineCode parentName=\"p\">{`attr`}</inlineCode>{` (which my be specified as NULL to accept defaults).`}</p>\n    <p>{`The mutex is initially unlocked.`}</p>\n    <h2 {...{\n      \"id\": \"locking--unlocking-mutexes\"\n    }}>{`Locking & Unlocking Mutexes`}</h2>\n    <h2 {...{\n      \"id\": \"routines-1\"\n    }}>{`Routines`}</h2>\n    <p><inlineCode parentName=\"p\">{`pthread_mutex_lock(mutex)`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`pthread_mutex_unlock(mutex)`}</inlineCode>{`\n`}<inlineCode parentName=\"p\">{`pthread_mutex_trylock(mutex)`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pthread_mutex_lock(mutex)`}</inlineCode>{` will lock the specified mutex`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pthread_mutex_unlock(mutex)`}</inlineCode>{` will unlock a mutex if called by the owning thread\n- throws an error if already unlocked or owned by another thread`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pthread_mutex_trylock(mutex)`}</inlineCode>{` will attempt to lock a mutex, however if the mutex is already locked it will return a \"EBUSY\" error code.\n- May be useful to prevent deadlocks!`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example 1`}</strong></p>\n    <p>{`We can now write our previously incorrect code segment as...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`pthread_mutex_t min_value_lock;\n\nmain() {\n    ...\n    pthread_mutex_init(&min_value_lock, NULL);\n    ...\n}\n\nvoid *find_min(void *list_ptr) {\n    ...\n    pthread_mutex_lock(&min_value_lock);\n    if (my_cost < best_cost) {\n        best_cost = my_cost;\n    }   \n    pthread_mutex_unlock(&min_value_lock);\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example 2`}</strong></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`producer-consumer`}</inlineCode>{` scenario imposes the following constraints:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The producer thread must not overwrite the shared buffer when the previous task has no been picked up by a consumer thread.`}</li>\n      <li parentName=\"ol\">{`The consumer threads must not pick up tasks until there is something present in the shared data structure.`}</li>\n      <li parentName=\"ol\">{`Individual consumer threads should pick up tasks one at a time.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`pthread_mutex_t task_queue_lock;\nint task_available;\n\nmain() {\n    task_available = 0;\n    pthread_mutex_init(&task_queue_lock, NULL);\n}\n\nvoid *producer(void *producer_thread_data) {\n    ...\n    while (!done()) {\n        inserted = 0;\n        create_task(&my_task);\n        while (inserted == 0) {\n            pthread_mutex_lock(&task_queue_lock);\n            if (task_available == 0) {\n                insert_into_queue(my_task);\n                task_available = 1;\n                inserted = 1;\n            }\n            pthread_mutex_unlock(&task_queue_lock);\n        }\n    }\n}\n\nvoid *consumer(void *consumer_thread_data) {\n    ...\n    while (!done()) {\n        extracted = 0;\n        while (extracted == 0) {\n            pthread_mutex_lock(&task_queue_lock);\n            if (task_available == 1) {\n                extract_from_queue(&my_task);\n                task_available = 0;\n                extracted = 1;\n            }\n            pthread_mutex_unlock(&task_queue_lock);\n        }\n        process_task(my_task);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"overheads-of-locking\"\n    }}>{`Overheads of Locking`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Locks represent serialization points since critical sections must be executed by threads one after another.`}</li>\n      <li parentName=\"ul\">{`Encapsulating large segments of the program within locks can lead to significant performance degradation.`}</li>\n      <li parentName=\"ul\">{`It is often possible to reduce the idling overhead associated with locks using `}<inlineCode parentName=\"li\">{`pthread_mutex_trylock`}</inlineCode>{`.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Alleviating Locking Overhead`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`pthread_mutex_t tryLock_lock = PTHREAD_MUTEX_INITIALIZER;\n\nlock_status = pthread_mutex_trylock(&tryLock_lock)\nif (lock_status == EBUSY) {\n    /* do something else */\n    ...\n} else {\n    /* do one thing */\n    ...\n    pthread_mutex_unlock(&tryLock_lock);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"monitors\"\n    }}>{`Monitors`}</h2>\n    <p>{`Mutexes provide powerful sync tools, but...`}</p>\n    <ul>\n      <li parentName=\"ul\">{`lock() and unlock() are scatteed among several threads, therefore it is difficult to understand their effects`}</li>\n      <li parentName=\"ul\">{`usage must be correct in all the threads `}</li>\n      <li parentName=\"ul\">{`one bad thread (or one programming error) can kill the whole system`}</li>\n    </ul>\n    <p>{`A `}<inlineCode parentName=\"p\">{`monitor`}</inlineCode>{` is a high-level abstraction that may provide a convenient and effective mechanism for thread synchronization.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`local data variables are accessible only by the monitor `}</li>\n      <li parentName=\"ul\">{`thread enters monitor by invoking one of its procedures `}</li>\n      <li parentName=\"ul\">{`only one thread may be executing in a the monitor at a time`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Monitor and Condition Variables`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Monitor does not need to code certain sync constraints explicitly.`}</li>\n      <li parentName=\"ul\">{`However, it is not sufficiently powerful for modeling some other synchronization schemes.`}</li>\n      <li parentName=\"ul\">{`An additional sync mechanism ie `}<inlineCode parentName=\"li\">{`condition variable`}</inlineCode>{` is required.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Condition Variables`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`The third class of functions address communications between threads that share a mutex`}</li>\n      <li parentName=\"ul\">{`A condition variable allows a thread to block itself until specified data reaches a predefined state.`}</li>\n      <li parentName=\"ul\">{`A condition variable indicates an event and has no value\n- One cannot store a value into nor retrieve a value from a condition variable.\n- If a thread must wait for an event to occur, that tread waits on the corresponding condition variable.\n- A condition variable has a queue for those threads that are waiting the corresponding event to occur to wait on.\n- If another thread causes the event to occur, that thread simply signal the corresponding condition variable.`}</li>\n      <li parentName=\"ul\">{`This class includes funcs to `}<inlineCode parentName=\"li\">{`create`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`destroy`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`wait`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`signal`}</inlineCode>{` based on specified variable values.`}</li>\n      <li parentName=\"ul\">{`Funcs to set/quey cond variable attrs are also included.`}</li>\n      <li parentName=\"ul\">{`Cond variable is always used in conjunction with a `}<inlineCode parentName=\"li\">{`mutex lock`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"create--destroying-cond-variables\"\n    }}>{`Create & Destroying Cond Variables`}</h2>\n    <h2 {...{\n      \"id\": \"routines-2\"\n    }}>{`Routines`}</h2>\n    <p>{`pthread_cond_init(condition, attr)\npthread_cond_destroy(condition)\npthread_condattr_init(attr)\npthread_condattr_destroy(attr)`}</p>\n    <p>{`Condition variables must be declared with type `}<inlineCode parentName=\"p\">{`pthread_cont_t`}</inlineCode>{`, and must be initialized before they can be used.`}</p>\n    <p>{`2 Ways to declare:\n1. Statically\n2. Dynamically `}</p>\n    <h2 {...{\n      \"id\": \"waiting-and-signaling-on-condition-variable\"\n    }}>{`Waiting and Signaling on Condition Variable`}</h2>\n    <p><inlineCode parentName=\"p\">{`pthread_cond_signal()`}</inlineCode>{` is used to signal (or wake up) another thread which is waiting on the condition variable and should be called after the `}<inlineCode parentName=\"p\">{`mutex`}</inlineCode>{` is locked.`}</p>\n    <p>{`It must unlock `}<inlineCode parentName=\"p\">{`mutex`}</inlineCode>{` in order for `}<inlineCode parentName=\"p\">{`pthread_cond_wait()`}</inlineCode>{` routine to complete.`}</p>\n    <p><inlineCode parentName=\"p\">{`pthread_cond_broadcast()`}</inlineCode>{` routine unlocks all of the threads blocked on the condition variable.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Proper locking and unlocked of mutex is essential for these routines\n- Failing to lock may cause it NOT to block\n- Failing to unlock the mutex may not allow a matching `}<inlineCode parentName=\"li\">{`pthread_cond_wait()`}</inlineCode>{` routine to complete (it will remain blocked)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"producer-consumer-using-condition-variables\"\n    }}>{`Producer-Consumer Using Condition Variables`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`pthread_cond_t cond_queue_empty, cond_queue_full;\npthread_mutex_t task_queue_cond_lock;\nint task_available;\n// other data structures here \n\nmain() {\n    // declarations and initializations \n    task_available = 0;\n    pthread_cond_init(&cond_queue_empty, NULL);\n    pthread_cond_init(&cond_queue_full, NULL);\n    pthread_mutex_init(&task_queue_cond_lock, NULL);\n    // create and join producer and consumer threads\n}\n\nvoid *producer(void *producer_thread_data) {\n    while(!done()) {\n        create_task();\n        pthread_mutex_lock(&task_queue_cond_lock);\n        \n        while (task_available == 1) {\n            pthread_cond_wait(&cond_queue_empty,\n                &task_queue_cond_lock);\n        }\n\n        insert_into_queue();\n        task_available = 1;\n        pthread_cond_signal(&cond_queue_full);\n        pthread_mutex_unlock(&task_queue_cond_lock);\n    }\n}\n\nvoid *consumer(void *consumer_thread_data) {\n    while(!done()) {\n        pthread_mutex_lock(&task_queue_cond_lock);\n        while (task_available == 0) {\n            pthread_cond_wait(&cond_queue_full,\n                &task_queue_cond_lock);\n        }\n\n        my_task = extract_from_queue();\n        task_available = 0;\n        pthread_cond_signal(&cond_queue_empty);\n        pthread_mutex_unlock(&task_queue_cond_lock);\n        process_task(my_task);\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}