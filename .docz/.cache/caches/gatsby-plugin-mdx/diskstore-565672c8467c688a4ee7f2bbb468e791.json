{"expireTime":9007200849425565000,"key":"gatsby-plugin-mdx-entire-payload-622ea329bf3b5305b50504e1a6e79ce6-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Basic Slice Functions","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":24,"offset":190},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":24,"offset":190},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Set up the folder with test and main file:","position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":10,"column":43,"offset":234},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":10,"column":43,"offset":234},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// slices_test.go\npackage slices\n\nimport (\n\t\"testing\"\n)\n\n// slices.go\npackage slices","position":{"start":{"line":12,"column":1,"offset":236},"end":{"line":22,"column":4,"offset":330},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Push","position":{"start":{"line":24,"column":4,"offset":335},"end":{"line":24,"column":8,"offset":339},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":332},"end":{"line":24,"column":8,"offset":339},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// slices_test.go\nfunc TestPushToIntSlice(t *testing.T) {\n\ts := []int{1, 2, 3}\n\ti := 4\n\n\texp := []int{1, 2, 3, 4}\n\tres := Push(s, i)\n\tfor idx, val := range res {\n\t\tif exp[idx] != val {\n\t\t\tt.Fatalf(\"Expected %+v, got %+v\", exp, res)\n\t\t}\n\t}\n}\n\n// Push append int to end of int slice\nfunc Push(a []int, b int) []int {\n\treturn append(a, b)\n}","position":{"start":{"line":26,"column":1,"offset":341},"end":{"line":45,"column":4,"offset":688},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pop","position":{"start":{"line":47,"column":4,"offset":693},"end":{"line":47,"column":7,"offset":696},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":690},"end":{"line":47,"column":7,"offset":696},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// slices_test.go\nfunc TestPopIntFromSliceSlice(t *testing.T) {\n\ts := []int{1, 2, 3, 4}\n\n\texpArr := []int{1, 2, 3}\n\texp := 4\n\n\tres, resArr := Pop(s)\n\tfor idx, val := range resArr {\n\t\tif expArr[idx] != val {\n\t\t\tt.Fatalf(\"Expected %+v, got %+v\", exp, res)\n\t\t}\n\t}\n\n\tif exp != res {\n\t\tt.Fatalf(\"Popped integer not as expected\")\n\t}\n}\n\n// Pop return an integer from an array + array without last index\nfunc Pop(a []int) (int, []int) {\n\tx, b := a[len(a)-1], a[:len(a)-1]\n\treturn x, b\n}","position":{"start":{"line":49,"column":1,"offset":698},"end":{"line":74,"column":4,"offset":1186},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Unshift","position":{"start":{"line":76,"column":4,"offset":1191},"end":{"line":76,"column":11,"offset":1198},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":1188},"end":{"line":76,"column":11,"offset":1198},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// slices_test.go\n\n// Unshift append as first element and return new slice\nfunc Unshift(a []int, b int) []int {\n\treturn append([]int{b}, a...)\n}","position":{"start":{"line":78,"column":1,"offset":1200},"end":{"line":85,"column":4,"offset":1354},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Shift","position":{"start":{"line":87,"column":4,"offset":1359},"end":{"line":87,"column":9,"offset":1364},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":1356},"end":{"line":87,"column":9,"offset":1364},"indent":[]}},{"type":"code","lang":"go","meta":null,"value":"// slices_test.go\n\n// Shift remove from front and return int and new slice\nfunc Shift(a []int) (int, []int) {\n\tx, b := a[0], a[1:]\n\treturn x, b\n}","position":{"start":{"line":89,"column":1,"offset":1366},"end":{"line":97,"column":4,"offset":1521},"indent":[1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":100,"column":1,"offset":1524},"end":{"line":100,"column":31,"offset":1554},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":100,"column":31,"offset":1554}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"basic-slice-functions\"\n    }}>{`Basic Slice Functions`}</h1>\n    <p>{`Set up the folder with test and main file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// slices_test.go\npackage slices\n\nimport (\n    \"testing\"\n)\n\n// slices.go\npackage slices\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"push\"\n    }}>{`Push`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// slices_test.go\nfunc TestPushToIntSlice(t *testing.T) {\n    s := []int{1, 2, 3}\n    i := 4\n\n    exp := []int{1, 2, 3, 4}\n    res := Push(s, i)\n    for idx, val := range res {\n        if exp[idx] != val {\n            t.Fatalf(\"Expected %+v, got %+v\", exp, res)\n        }\n    }\n}\n\n// Push append int to end of int slice\nfunc Push(a []int, b int) []int {\n    return append(a, b)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pop\"\n    }}>{`Pop`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// slices_test.go\nfunc TestPopIntFromSliceSlice(t *testing.T) {\n    s := []int{1, 2, 3, 4}\n\n    expArr := []int{1, 2, 3}\n    exp := 4\n\n    res, resArr := Pop(s)\n    for idx, val := range resArr {\n        if expArr[idx] != val {\n            t.Fatalf(\"Expected %+v, got %+v\", exp, res)\n        }\n    }\n\n    if exp != res {\n        t.Fatalf(\"Popped integer not as expected\")\n    }\n}\n\n// Pop return an integer from an array + array without last index\nfunc Pop(a []int) (int, []int) {\n    x, b := a[len(a)-1], a[:len(a)-1]\n    return x, b\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"unshift\"\n    }}>{`Unshift`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// slices_test.go\n\n// Unshift append as first element and return new slice\nfunc Unshift(a []int, b int) []int {\n    return append([]int{b}, a...)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shift\"\n    }}>{`Shift`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`// slices_test.go\n\n// Shift remove from front and return int and new slice\nfunc Shift(a []int) (int, []int) {\n    x, b := a[0], a[1:]\n    return x, b\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}