{"expireTime":9007200849425530000,"key":"gatsby-plugin-mdx-entire-payload-3229c286a3f967bc7d33c410b5b1f259-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"PHP Unit Testing","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":19,"offset":185},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":19,"offset":185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is simply a basic example of the layout.","position":{"start":{"line":10,"column":1,"offset":187},"end":{"line":10,"column":46,"offset":232},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":187},"end":{"line":10,"column":46,"offset":232},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ensure ","position":{"start":{"line":12,"column":1,"offset":234},"end":{"line":12,"column":8,"offset":241},"indent":[]}},{"type":"inlineCode","value":"phpunit","position":{"start":{"line":12,"column":8,"offset":241},"end":{"line":12,"column":17,"offset":250},"indent":[]}},{"type":"text","value":" is downloaded and add it to your ","position":{"start":{"line":12,"column":17,"offset":250},"end":{"line":12,"column":51,"offset":284},"indent":[]}},{"type":"inlineCode","value":"$PATH","position":{"start":{"line":12,"column":51,"offset":284},"end":{"line":12,"column":58,"offset":291},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":12,"column":58,"offset":291},"end":{"line":12,"column":59,"offset":292},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":234},"end":{"line":12,"column":59,"offset":292},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"From, here run ","position":{"start":{"line":14,"column":1,"offset":294},"end":{"line":14,"column":16,"offset":309},"indent":[]}},{"type":"inlineCode","value":"phpunit.phar path/to/test.php","position":{"start":{"line":14,"column":16,"offset":309},"end":{"line":14,"column":47,"offset":340},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":14,"column":47,"offset":340},"end":{"line":14,"column":48,"offset":341},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":294},"end":{"line":14,"column":48,"offset":341},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Basic example","position":{"start":{"line":16,"column":4,"offset":346},"end":{"line":16,"column":17,"offset":359},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":343},"end":{"line":16,"column":17,"offset":359},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Anagram function to test","position":{"start":{"line":18,"column":5,"offset":365},"end":{"line":18,"column":29,"offset":389},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":361},"end":{"line":18,"column":29,"offset":389},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"<?php\n// anagrams.php\n\nfunction anagrams($a, $b)\n{\n    $regA = preg_replace(\"/[^a-z]/i\", \"\", $a);\n    $regB = preg_replace(\"/[^a-z]/i\", \"\", $b);\n\n    $regA = strtolower($regA);\n    $splitA = str_split($regA);\n    sort($splitA);\n\n    $regB = strtolower($regB);\n    $splitB = str_split($regB);\n    sort($splitB);\n\n    $resA = implode(\"\", $splitA);\n    $resB = implode(\"\", $splitB);\n\n    return $resA == $resB;\n}","position":{"start":{"line":20,"column":1,"offset":391},"end":{"line":42,"column":4,"offset":811},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Running the test","position":{"start":{"line":44,"column":5,"offset":817},"end":{"line":44,"column":21,"offset":833},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":813},"end":{"line":44,"column":21,"offset":833},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"phpunit.phar anagrams_test.php","position":{"start":{"line":46,"column":1,"offset":835},"end":{"line":46,"column":33,"offset":867},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":835},"end":{"line":46,"column":33,"offset":867},"indent":[]}},{"type":"code","lang":"php","meta":null,"value":"<?php\n// anagrams_test.php\nrequire \"anagrams.php\";\n\nclass AnagramsTest extends PHPUnit\\Framework\\TestCase\n{\n    public function testAnagramsBasic()\n    {\n        $a = \"tokyo\";\n        $b = \"kyoto\";\n        $this->assertEquals(true, anagrams($a,$b));\n    }\n\n\n    public function testAnagramsWithCapitals()\n    {\n        // $this->markTestSkipped('Skipped.');\n        $a = \"Tokyo\";\n        $b = \"kyoto\";\n        $this->assertEquals(true, anagrams($a,$b));\n    }\n\n    public function testAnagramsWithPunctuation()\n    {\n        // $this->markTestSkipped('Skipped.');\n        $a = \"To  35k 2@4yo\";\n        $b = \"kYoTo223!!\";\n        $this->assertEquals(true, anagrams($a,$b));\n    }\n}","position":{"start":{"line":48,"column":1,"offset":869},"end":{"line":79,"column":4,"offset":1560},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":82,"column":1,"offset":1563},"end":{"line":82,"column":31,"offset":1593},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":82,"column":31,"offset":1593}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"php-unit-testing\"\n    }}>{`PHP Unit Testing`}</h1>\n    <p>{`This is simply a basic example of the layout.`}</p>\n    <p>{`Ensure `}<inlineCode parentName=\"p\">{`phpunit`}</inlineCode>{` is downloaded and add it to your `}<inlineCode parentName=\"p\">{`$PATH`}</inlineCode>{`.`}</p>\n    <p>{`From, here run `}<inlineCode parentName=\"p\">{`phpunit.phar path/to/test.php`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"basic-example\"\n    }}>{`Basic example`}</h2>\n    <h3 {...{\n      \"id\": \"anagram-function-to-test\"\n    }}>{`Anagram function to test`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n// anagrams.php\n\nfunction anagrams($a, $b)\n{\n    $regA = preg_replace(\"/[^a-z]/i\", \"\", $a);\n    $regB = preg_replace(\"/[^a-z]/i\", \"\", $b);\n\n    $regA = strtolower($regA);\n    $splitA = str_split($regA);\n    sort($splitA);\n\n    $regB = strtolower($regB);\n    $splitB = str_split($regB);\n    sort($splitB);\n\n    $resA = implode(\"\", $splitA);\n    $resB = implode(\"\", $splitB);\n\n    return $resA == $resB;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"running-the-test\"\n    }}>{`Running the test`}</h3>\n    <p><inlineCode parentName=\"p\">{`phpunit.phar anagrams_test.php`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n// anagrams_test.php\nrequire \"anagrams.php\";\n\nclass AnagramsTest extends PHPUnit\\\\Framework\\\\TestCase\n{\n    public function testAnagramsBasic()\n    {\n        $a = \"tokyo\";\n        $b = \"kyoto\";\n        $this->assertEquals(true, anagrams($a,$b));\n    }\n\n\n    public function testAnagramsWithCapitals()\n    {\n        // $this->markTestSkipped('Skipped.');\n        $a = \"Tokyo\";\n        $b = \"kyoto\";\n        $this->assertEquals(true, anagrams($a,$b));\n    }\n\n    public function testAnagramsWithPunctuation()\n    {\n        // $this->markTestSkipped('Skipped.');\n        $a = \"To  35k 2@4yo\";\n        $b = \"kYoTo223!!\";\n        $this->assertEquals(true, anagrams($a,$b));\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}