{"expireTime":9007200852878364000,"key":"gatsby-plugin-mdx-entire-payload-765ae949148fe295115eadb2b573dbb6-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Building Rust Command Line Tools","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":35,"offset":201},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":35,"offset":201},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Initial findings based off a useful article ","position":{"start":{"line":10,"column":1,"offset":203},"end":{"line":10,"column":45,"offset":247},"indent":[]}},{"type":"link","title":null,"url":"https://mattgathu.github.io/writing-cli-app-rust/","children":[{"type":"text","value":"found here","position":{"start":{"line":10,"column":46,"offset":248},"end":{"line":10,"column":56,"offset":258},"indent":[]}}],"position":{"start":{"line":10,"column":45,"offset":247},"end":{"line":10,"column":108,"offset":310},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":10,"column":108,"offset":310},"end":{"line":10,"column":109,"offset":311},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":203},"end":{"line":10,"column":109,"offset":311},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We're using the ","position":{"start":{"line":12,"column":1,"offset":313},"end":{"line":12,"column":17,"offset":329},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/clap-rs/clap","children":[{"type":"text","value":"Clap","position":{"start":{"line":12,"column":18,"offset":330},"end":{"line":12,"column":22,"offset":334},"indent":[]}}],"position":{"start":{"line":12,"column":17,"offset":329},"end":{"line":12,"column":56,"offset":368},"indent":[]}},{"type":"text","value":" crate to help bootstrap CLIs.","position":{"start":{"line":12,"column":56,"offset":368},"end":{"line":12,"column":86,"offset":398},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":313},"end":{"line":12,"column":86,"offset":398},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Useful tools to consider","position":{"start":{"line":14,"column":4,"offset":403},"end":{"line":14,"column":28,"offset":427},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":400},"end":{"line":14,"column":28,"offset":427},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/rust-cli/human-panic","children":[{"type":"text","value":"https://github.com/rust-cli/human-panic","position":{"start":{"line":16,"column":3,"offset":431},"end":{"line":16,"column":42,"offset":470},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":431},"end":{"line":16,"column":42,"offset":470},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":431},"end":{"line":16,"column":42,"offset":470},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":429},"end":{"line":16,"column":42,"offset":470},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/hniksic/rust-subprocess","children":[{"type":"text","value":"https://github.com/hniksic/rust-subprocess","position":{"start":{"line":17,"column":3,"offset":473},"end":{"line":17,"column":45,"offset":515},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":473},"end":{"line":17,"column":45,"offset":515},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":473},"end":{"line":17,"column":45,"offset":515},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":471},"end":{"line":17,"column":45,"offset":515},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/oconnor663/duct.rs","children":[{"type":"text","value":"https://github.com/oconnor663/duct.rs","position":{"start":{"line":18,"column":3,"offset":518},"end":{"line":18,"column":40,"offset":555},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":518},"end":{"line":18,"column":40,"offset":555},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":518},"end":{"line":18,"column":40,"offset":555},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":516},"end":{"line":18,"column":40,"offset":555},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/kkawakam/rustyline","children":[{"type":"text","value":"https://github.com/kkawakam/rustyline","position":{"start":{"line":19,"column":3,"offset":558},"end":{"line":19,"column":40,"offset":595},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":558},"end":{"line":19,"column":40,"offset":595},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":558},"end":{"line":19,"column":40,"offset":595},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":556},"end":{"line":19,"column":40,"offset":595},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/mitsuhiko/indicatif","children":[{"type":"text","value":"https://github.com/mitsuhiko/indicatif","position":{"start":{"line":20,"column":3,"offset":598},"end":{"line":20,"column":41,"offset":636},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":598},"end":{"line":20,"column":41,"offset":636},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":598},"end":{"line":20,"column":41,"offset":636},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":596},"end":{"line":20,"column":41,"offset":636},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[],"position":{"start":{"line":21,"column":1,"offset":637},"end":{"line":21,"column":3,"offset":639},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":429},"end":{"line":21,"column":3,"offset":639},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"tl;dr","position":{"start":{"line":23,"column":4,"offset":644},"end":{"line":23,"column":9,"offset":649},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":641},"end":{"line":23,"column":10,"offset":650},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Initialise an app using ","position":{"start":{"line":25,"column":1,"offset":652},"end":{"line":25,"column":25,"offset":676},"indent":[]}},{"type":"inlineCode","value":"cargo new app_name_you_want --bin","position":{"start":{"line":25,"column":25,"offset":676},"end":{"line":25,"column":60,"offset":711},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":25,"column":60,"offset":711},"end":{"line":25,"column":61,"offset":712},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":652},"end":{"line":25,"column":61,"offset":712},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This example diverges from the above article by using the \"Clap\" crate with the YAML file config.","position":{"start":{"line":27,"column":1,"offset":714},"end":{"line":27,"column":98,"offset":811},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":714},"end":{"line":27,"column":98,"offset":811},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"src/main.rs","position":{"start":{"line":29,"column":5,"offset":817},"end":{"line":29,"column":16,"offset":828},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":813},"end":{"line":29,"column":16,"offset":828},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Update the file to reflect the following:","position":{"start":{"line":31,"column":1,"offset":830},"end":{"line":31,"column":42,"offset":871},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":830},"end":{"line":31,"column":42,"offset":871},"indent":[]}},{"type":"code","lang":"rust","meta":null,"value":"#[macro_use]\nextern crate clap;\nuse clap::App;\n\nfn main() {\n    let yaml = load_yaml!(\"cli.yml\");\n    let matches = App::from_yaml(yaml).get_matches();\n\n    // Gets a value for config if supplied by user, or defaults to \"default.conf\"\n    let config = matches.value_of(\"config\").unwrap_or(\"default.conf\");\n    println!(\"Value for config: {}\", config);\n\n    // Calling .unwrap() is safe here because \"INPUT\" is required (if \"INPUT\" wasn't\n    // required we could have used an 'if let' to conditionally get the value)\n    println!(\"Using input file: {}\", matches.value_of(\"INPUT\").unwrap());\n\n    // Vary the output based on how many times the user used the \"verbose\" flag\n    // (i.e. 'myprog -v -v -v' or 'myprog -vvv' vs 'myprog -v'\n    match matches.occurrences_of(\"verbose\") {\n        0 => println!(\"No verbose info\"),\n        1 => println!(\"Some verbose info\"),\n        2 => println!(\"Tons of verbose info\"),\n        3 | _ => println!(\"Don't be crazy\"),\n    }\n\n    // You can handle information about subcommands by requesting their matches by name\n    // (as below), requesting just the name used, or both at the same time\n    if let Some(matches) = matches.subcommand_matches(\"test\") {\n        if matches.is_present(\"debug\") {\n            println!(\"Printing debug info...\");\n        } else {\n            println!(\"Printing normally...\");\n        }\n    }\n}","position":{"start":{"line":33,"column":1,"offset":873},"end":{"line":69,"column":4,"offset":2247},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"src/cli.yml","position":{"start":{"line":71,"column":5,"offset":2253},"end":{"line":71,"column":16,"offset":2264},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2249},"end":{"line":71,"column":16,"offset":2264},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the CLI args, set the following:","position":{"start":{"line":73,"column":1,"offset":2266},"end":{"line":73,"column":37,"offset":2302},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":2266},"end":{"line":73,"column":37,"offset":2302},"indent":[]}},{"type":"code","lang":"yml","meta":null,"value":"name: jamaica\nversion: \"1.0\"\nauthor: Dennis O'Keeffe <hello@dennisokeeffe.com>\nabout: Build agnostic app configs\nargs:\n    - config:\n        short: c\n        long: config\n        value_name: FILE\n        help: Sets a custom config file\n        takes_value: true\n    - INPUT:\n        help: Sets the input file to use\n        required: true\n        index: 1\n    - verbose:\n        short: v\n        multiple: true\n        help: Sets the level of verbosity\nsubcommands:\n    - test:\n        about: controls testing features\n        version: \"1.3\"\n        author: Someone E. <someone_else@other.com>\n        args:\n            - debug:\n                short: d\n                help: print debug information","position":{"start":{"line":75,"column":1,"offset":2304},"end":{"line":104,"column":4,"offset":3014},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Running the above config","position":{"start":{"line":106,"column":5,"offset":3020},"end":{"line":106,"column":29,"offset":3044},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":3016},"end":{"line":106,"column":29,"offset":3044},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"cargo run -- src/main.rs --config=made/up/\n# ... omitted Rust build output\nValue for config: made/up/file\nUsing input file: src/main.rs\nNo verbose info\n\ncargo run -- --help\n# shows help output: omitted for now","position":{"start":{"line":108,"column":1,"offset":3046},"end":{"line":117,"column":4,"offset":3268},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":120,"column":1,"offset":3271},"end":{"line":120,"column":31,"offset":3301},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":120,"column":31,"offset":3301}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"building-rust-command-line-tools\"\n    }}>{`Building Rust Command Line Tools`}</h1>\n    <p>{`Initial findings based off a useful article `}<a parentName=\"p\" {...{\n        \"href\": \"https://mattgathu.github.io/writing-cli-app-rust/\"\n      }}>{`found here`}</a>{`.`}</p>\n    <p>{`We're using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/clap-rs/clap\"\n      }}>{`Clap`}</a>{` crate to help bootstrap CLIs.`}</p>\n    <h2 {...{\n      \"id\": \"useful-tools-to-consider\"\n    }}>{`Useful tools to consider`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/rust-cli/human-panic\"\n        }}>{`https://github.com/rust-cli/human-panic`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/hniksic/rust-subprocess\"\n        }}>{`https://github.com/hniksic/rust-subprocess`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/oconnor663/duct.rs\"\n        }}>{`https://github.com/oconnor663/duct.rs`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/kkawakam/rustyline\"\n        }}>{`https://github.com/kkawakam/rustyline`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mitsuhiko/indicatif\"\n        }}>{`https://github.com/mitsuhiko/indicatif`}</a></li>\n      <li parentName=\"ul\"></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"tldr\"\n    }}>{`tl;dr`}</h2>\n    <p>{`Initialise an app using `}<inlineCode parentName=\"p\">{`cargo new app_name_you_want --bin`}</inlineCode>{`.`}</p>\n    <p>{`This example diverges from the above article by using the \"Clap\" crate with the YAML file config.`}</p>\n    <h3 {...{\n      \"id\": \"srcmainrs\"\n    }}>{`src/main.rs`}</h3>\n    <p>{`Update the file to reflect the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`#[macro_use]\nextern crate clap;\nuse clap::App;\n\nfn main() {\n    let yaml = load_yaml!(\"cli.yml\");\n    let matches = App::from_yaml(yaml).get_matches();\n\n    // Gets a value for config if supplied by user, or defaults to \"default.conf\"\n    let config = matches.value_of(\"config\").unwrap_or(\"default.conf\");\n    println!(\"Value for config: {}\", config);\n\n    // Calling .unwrap() is safe here because \"INPUT\" is required (if \"INPUT\" wasn't\n    // required we could have used an 'if let' to conditionally get the value)\n    println!(\"Using input file: {}\", matches.value_of(\"INPUT\").unwrap());\n\n    // Vary the output based on how many times the user used the \"verbose\" flag\n    // (i.e. 'myprog -v -v -v' or 'myprog -vvv' vs 'myprog -v'\n    match matches.occurrences_of(\"verbose\") {\n        0 => println!(\"No verbose info\"),\n        1 => println!(\"Some verbose info\"),\n        2 => println!(\"Tons of verbose info\"),\n        3 | _ => println!(\"Don't be crazy\"),\n    }\n\n    // You can handle information about subcommands by requesting their matches by name\n    // (as below), requesting just the name used, or both at the same time\n    if let Some(matches) = matches.subcommand_matches(\"test\") {\n        if matches.is_present(\"debug\") {\n            println!(\"Printing debug info...\");\n        } else {\n            println!(\"Printing normally...\");\n        }\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"srccliyml\"\n    }}>{`src/cli.yml`}</h3>\n    <p>{`For the CLI args, set the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`name: jamaica\nversion: \"1.0\"\nauthor: Dennis O'Keeffe <hello@dennisokeeffe.com>\nabout: Build agnostic app configs\nargs:\n    - config:\n        short: c\n        long: config\n        value_name: FILE\n        help: Sets a custom config file\n        takes_value: true\n    - INPUT:\n        help: Sets the input file to use\n        required: true\n        index: 1\n    - verbose:\n        short: v\n        multiple: true\n        help: Sets the level of verbosity\nsubcommands:\n    - test:\n        about: controls testing features\n        version: \"1.3\"\n        author: Someone E. <someone_else@other.com>\n        args:\n            - debug:\n                short: d\n                help: print debug information\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"running-the-above-config\"\n    }}>{`Running the above config`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cargo run -- src/main.rs --config=made/up/\n# ... omitted Rust build output\nValue for config: made/up/file\nUsing input file: src/main.rs\nNo verbose info\n\ncargo run -- --help\n# shows help output: omitted for now\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}