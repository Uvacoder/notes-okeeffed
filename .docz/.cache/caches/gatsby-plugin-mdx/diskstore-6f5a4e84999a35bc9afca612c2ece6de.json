{"expireTime":9007200848610914000,"key":"gatsby-plugin-mdx-entire-payload-6236da7d90c9078a2bcc827c082430b3-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Webmasters Elm","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":17,"offset":183},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":17,"offset":183},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Costs","position":{"start":{"line":10,"column":4,"offset":188},"end":{"line":10,"column":9,"offset":193},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":185},"end":{"line":10,"column":9,"offset":193},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Learning a new language","position":{"start":{"line":12,"column":4,"offset":198},"end":{"line":12,"column":27,"offset":221},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":198},"end":{"line":12,"column":27,"offset":221},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":195},"end":{"line":12,"column":27,"offset":221},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Smaller ecosystem","position":{"start":{"line":13,"column":4,"offset":225},"end":{"line":13,"column":21,"offset":242},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":225},"end":{"line":13,"column":21,"offset":242},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":222},"end":{"line":13,"column":21,"offset":242},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Fewer Web APIs have first-class support","position":{"start":{"line":14,"column":4,"offset":246},"end":{"line":14,"column":43,"offset":285},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":246},"end":{"line":14,"column":43,"offset":285},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":243},"end":{"line":14,"column":43,"offset":285},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":195},"end":{"line":14,"column":43,"offset":285},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Benefits","position":{"start":{"line":16,"column":4,"offset":290},"end":{"line":16,"column":12,"offset":298},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":287},"end":{"line":16,"column":12,"offset":298},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Bundle size small","position":{"start":{"line":18,"column":4,"offset":303},"end":{"line":18,"column":21,"offset":320},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":303},"end":{"line":18,"column":21,"offset":320},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":300},"end":{"line":18,"column":21,"offset":320},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Production Elm in the first week","position":{"start":{"line":19,"column":4,"offset":324},"end":{"line":19,"column":36,"offset":356},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":324},"end":{"line":19,"column":36,"offset":356},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":321},"end":{"line":19,"column":36,"offset":356},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":300},"end":{"line":19,"column":36,"offset":356},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Elm","position":{"start":{"line":21,"column":4,"offset":361},"end":{"line":21,"column":7,"offset":364},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":358},"end":{"line":21,"column":7,"offset":364},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"JS Equivalent","position":{"start":{"line":23,"column":3,"offset":368},"end":{"line":23,"column":16,"offset":381},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":368},"end":{"line":23,"column":16,"offset":381},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Elm","position":{"start":{"line":23,"column":19,"offset":384},"end":{"line":23,"column":22,"offset":387},"indent":[]}}],"position":{"start":{"line":23,"column":19,"offset":384},"end":{"line":23,"column":30,"offset":395},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":366},"end":{"line":23,"column":32,"offset":397},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"UI","position":{"start":{"line":25,"column":3,"offset":432},"end":{"line":25,"column":5,"offset":434},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":432},"end":{"line":25,"column":16,"offset":445},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"view","position":{"start":{"line":25,"column":19,"offset":448},"end":{"line":25,"column":23,"offset":452},"indent":[]}}],"position":{"start":{"line":25,"column":19,"offset":448},"end":{"line":25,"column":30,"offset":459},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":430},"end":{"line":25,"column":32,"offset":461},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"State","position":{"start":{"line":26,"column":3,"offset":464},"end":{"line":26,"column":8,"offset":469},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":464},"end":{"line":26,"column":16,"offset":477},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"model","position":{"start":{"line":26,"column":19,"offset":480},"end":{"line":26,"column":24,"offset":485},"indent":[]}}],"position":{"start":{"line":26,"column":19,"offset":480},"end":{"line":26,"column":30,"offset":491},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":462},"end":{"line":26,"column":32,"offset":493},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Async","position":{"start":{"line":27,"column":3,"offset":496},"end":{"line":27,"column":8,"offset":501},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":496},"end":{"line":27,"column":16,"offset":509},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"update","position":{"start":{"line":27,"column":19,"offset":512},"end":{"line":27,"column":25,"offset":518},"indent":[]}}],"position":{"start":{"line":27,"column":19,"offset":512},"end":{"line":27,"column":30,"offset":523},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":494},"end":{"line":27,"column":32,"offset":525},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Utilities","position":{"start":{"line":28,"column":3,"offset":528},"end":{"line":28,"column":12,"offset":537},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":528},"end":{"line":28,"column":16,"offset":541},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"core","position":{"start":{"line":28,"column":19,"offset":544},"end":{"line":28,"column":23,"offset":548},"indent":[]}}],"position":{"start":{"line":28,"column":19,"offset":544},"end":{"line":28,"column":30,"offset":555},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":526},"end":{"line":28,"column":32,"offset":557},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Packages","position":{"start":{"line":29,"column":3,"offset":560},"end":{"line":29,"column":11,"offset":568},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":560},"end":{"line":29,"column":16,"offset":573},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"elm install","position":{"start":{"line":29,"column":19,"offset":576},"end":{"line":29,"column":30,"offset":587},"indent":[]}}],"position":{"start":{"line":29,"column":19,"offset":576},"end":{"line":29,"column":30,"offset":587},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":558},"end":{"line":29,"column":32,"offset":589},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":366},"end":{"line":29,"column":32,"offset":589},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Rendering a page","position":{"start":{"line":31,"column":4,"offset":594},"end":{"line":31,"column":20,"offset":610},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":591},"end":{"line":31,"column":20,"offset":610},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Compiling","position":{"start":{"line":33,"column":5,"offset":616},"end":{"line":33,"column":14,"offset":625},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":612},"end":{"line":33,"column":14,"offset":625},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Compiles to JS.","position":{"start":{"line":35,"column":1,"offset":627},"end":{"line":35,"column":16,"offset":642},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":627},"end":{"line":35,"column":16,"offset":642},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"elm make Main.elm --output elm.js","position":{"start":{"line":37,"column":1,"offset":644},"end":{"line":39,"column":4,"offset":690},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"User Interface Example","position":{"start":{"line":41,"column":4,"offset":695},"end":{"line":41,"column":26,"offset":717},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":692},"end":{"line":41,"column":26,"offset":717},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Converting this to Elm:","position":{"start":{"line":43,"column":1,"offset":719},"end":{"line":43,"column":24,"offset":742},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":719},"end":{"line":43,"column":24,"offset":742},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"let pluralize = (singular, plural, quantity) =>\n  quantity === 1 ? singular : plural;","position":{"start":{"line":45,"column":1,"offset":744},"end":{"line":48,"column":4,"offset":847},"indent":[1,1,1]}},{"type":"code","lang":"elm","meta":null,"value":"pluralize singular plural quantity =\n    if quantity == 1 then\n        singular\n    else\n        plural\n\nmain =\n    text (pluralize \"leaf\" \"leaves\" 1) -- parentheses are to disambiguate","position":{"start":{"line":50,"column":1,"offset":849},"end":{"line":59,"column":4,"offset":1045},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Part 1 - Example","position":{"start":{"line":61,"column":4,"offset":1050},"end":{"line":61,"column":20,"offset":1066},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1047},"end":{"line":61,"column":20,"offset":1066},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This basic example gives a short look at actually creating a working piece of code.","position":{"start":{"line":63,"column":1,"offset":1068},"end":{"line":63,"column":84,"offset":1151},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1068},"end":{"line":63,"column":84,"offset":1151},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"module Main exposing (main)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\n\n\nbanner =\n    div [ class \"banner\" ]\n        [ div [ class \"container\" ]\n            [ h1 [] [ text \"conduit\"]\n            , p [] [ text \"A place to share your knowledge.\"]\n            ]\n        ]\n\n\nfeed =\n    div [ class \"feed-toggle\" ] [ text \"(In the future we’ll display a feed of articles here!)\" ]\n\n\nmain =\n    div [ class \"home-page\" ]\n        [ banner\n        , div [ class \"container page\" ]\n            [ div [ class \"row\" ]\n                [ div [ class \"col-md-9\" ] [ feed ]\n                , div [ class \"col-md-3\" ] []\n                ]\n            ]\n        ]","position":{"start":{"line":65,"column":1,"offset":1153},"end":{"line":95,"column":4,"offset":1831},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The Elm Architecture","position":{"start":{"line":97,"column":4,"offset":1836},"end":{"line":97,"column":24,"offset":1856},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":1833},"end":{"line":97,"column":24,"offset":1856},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Update, Model, View.","position":{"start":{"line":99,"column":1,"offset":1858},"end":{"line":99,"column":21,"offset":1878},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":1858},"end":{"line":99,"column":21,"offset":1878},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"View is function that takes a ","position":{"start":{"line":101,"column":1,"offset":1880},"end":{"line":101,"column":31,"offset":1910},"indent":[]}},{"type":"inlineCode","value":"model","position":{"start":{"line":101,"column":31,"offset":1910},"end":{"line":101,"column":38,"offset":1917},"indent":[]}},{"type":"text","value":" as a function.","position":{"start":{"line":101,"column":38,"offset":1917},"end":{"line":101,"column":53,"offset":1932},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":1880},"end":{"line":101,"column":53,"offset":1932},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note that whatever message you use, you need to be consistent for ","position":{"start":{"line":103,"column":1,"offset":1934},"end":{"line":103,"column":67,"offset":2000},"indent":[]}},{"type":"inlineCode","value":"Update","position":{"start":{"line":103,"column":67,"offset":2000},"end":{"line":103,"column":75,"offset":2008},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":103,"column":75,"offset":2008},"end":{"line":103,"column":80,"offset":2013},"indent":[]}},{"type":"inlineCode","value":"View","position":{"start":{"line":103,"column":80,"offset":2013},"end":{"line":103,"column":86,"offset":2019},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":103,"column":86,"offset":2019},"end":{"line":103,"column":87,"offset":2020},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":1934},"end":{"line":103,"column":87,"offset":2020},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"type alias Msg =\n    { description: String\n    , data: String\n    }\n\nview : Model -> Html Msg\nview model =\n\n--\nupdate : Msg -> Model -> Model\nupdate msg model =","position":{"start":{"line":105,"column":1,"offset":2022},"end":{"line":117,"column":4,"offset":2193},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Type Annotations","position":{"start":{"line":119,"column":4,"offset":2198},"end":{"line":119,"column":20,"offset":2214},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":2195},"end":{"line":119,"column":20,"offset":2214},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"username = \"okeeffed\"\n\n-- typed example (Elm uses inference either way)\nusername : String\nusername = \"okeeffed\"\n\n-- alt example\nString.length : String -> Int\n\n-- name list\nnames : List String\nnames = [\"Sam\", \"Bob\", \"Bill\"]","position":{"start":{"line":121,"column":1,"offset":2216},"end":{"line":134,"column":4,"offset":2449},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Functions","position":{"start":{"line":136,"column":4,"offset":2454},"end":{"line":136,"column":13,"offset":2463},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":2451},"end":{"line":136,"column":13,"offset":2463},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"pluralize : String -> String -> Int -> String\n\n-- equivocal to\npluralize : String -> (String -> (Int -> String))","position":{"start":{"line":138,"column":1,"offset":2465},"end":{"line":143,"column":4,"offset":2588},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Case Expressions","position":{"start":{"line":145,"column":4,"offset":2593},"end":{"line":145,"column":20,"offset":2609},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":2590},"end":{"line":145,"column":20,"offset":2609},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"case model.tab of\n    \"YourFeed\" ->\n        -- show feed\n    \"GlobalFeed\" ->\n        -- show Global Feed\n    _ ->\n        -- show Tag Feed","position":{"start":{"line":147,"column":1,"offset":2611},"end":{"line":155,"column":4,"offset":2760},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Custom Types","position":{"start":{"line":157,"column":4,"offset":2765},"end":{"line":157,"column":16,"offset":2777},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":2762},"end":{"line":157,"column":16,"offset":2777},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"-- creates completely distinct values\ntype Tab =\n    YourFeed\n    | GlobalFeed\n    | TagFeed\n\nyours : Tab\nyours =\n    YourFeed\n\n-- Turning types into functions\n\ntype Tab =\n    YourFeed\n    | GlobalFeed\n    | TagFeed String\n\n-- in the repl\n> TagFeed \"Happiness\"\nTagFeed \"Happiness\" : Tab\n> TagFeed\n<function> : String -> Tab","position":{"start":{"line":159,"column":1,"offset":2779},"end":{"line":182,"column":4,"offset":3113},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Using Custom Types with updates:","position":{"start":{"line":184,"column":1,"offset":3115},"end":{"line":184,"column":33,"offset":3147},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":3115},"end":{"line":184,"column":33,"offset":3147},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"-- allows us to pass different data types\ntype Msg\n    = ClickedTag String\n    | ClickedPage Int\n\nupdate msg model =\n    case msg of\n        ClickedTag selectedTag ->\n            -- use tag here\n        ClickedPage page ->\n            -- use page here","position":{"start":{"line":186,"column":1,"offset":3149},"end":{"line":198,"column":4,"offset":3411},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Summing it all up","position":{"start":{"line":200,"column":1,"offset":3413},"end":{"line":200,"column":18,"offset":3430},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":3413},"end":{"line":200,"column":18,"offset":3430},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Type | In Elm\ncase-expressions | case msg of\nEnumerations | type Bool = True | False\nContainers | type Msg = ClickedPage Int | ...\nVariant Functions | onClick (ClickedPage pageNumber)","position":{"start":{"line":202,"column":1,"offset":3432},"end":{"line":206,"column":53,"offset":3615},"indent":[1,1,1,1]}}],"position":{"start":{"line":202,"column":1,"offset":3432},"end":{"line":206,"column":53,"offset":3615},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Maybe Overview","position":{"start":{"line":208,"column":4,"offset":3620},"end":{"line":208,"column":18,"offset":3634},"indent":[]}}],"position":{"start":{"line":208,"column":1,"offset":3617},"end":{"line":208,"column":18,"offset":3634},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"-- List.head : List elem -> Maybe elem\nfirst users =\n    List.head users\n\n-- example case\ncase first newUsers of\n    Just user ->\n        String.length user\n    Nothing ->\n        0","position":{"start":{"line":210,"column":1,"offset":3636},"end":{"line":221,"column":4,"offset":3828},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pipelines","position":{"start":{"line":223,"column":4,"offset":3833},"end":{"line":223,"column":13,"offset":3842},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":3830},"end":{"line":223,"column":13,"offset":3842},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"List.head (List.map (List.reverse (List.filter (\\x -> x < 5) [2, 4, 6])) negate)\n\n-- As pipeline\n[2, 4, 6]\n    |> List.filter (\\x -> x < 5)\n    |> List.reverse\n    |> List.map negate\n    |> List.head","position":{"start":{"line":225,"column":1,"offset":3844},"end":{"line":234,"column":4,"offset":4054},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Decoding JSON","position":{"start":{"line":236,"column":4,"offset":4059},"end":{"line":236,"column":17,"offset":4072},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":4056},"end":{"line":236,"column":17,"offset":4072},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"-- Import to understand custom type\ntype Result okVal errVal\n    = Ok okVal\n    | Err errVal\n\n-- similar to String.toint()\ncase decodeString Json.Decode.int \"42\" of\n    Ok num ->\n        -- Do something with Int\n    Err error ->\n        -- Do something with the error\n\ntype alias User =\n    { id : Int\n    , firstName : String\n    , lastName : String\n    }\n\nuser : Decoder User\nuser =\n    Json.Decode.succeed User\n        |> required \"user_id\" int\n        |> required \"first_name\" string\n        |> required \"last_name\" string\n\n-- Alternatively\nusers : Decoder (List User)\nusers =\n    list user","position":{"start":{"line":238,"column":1,"offset":4074},"end":{"line":268,"column":4,"offset":4679},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Optional and Nullable","position":{"start":{"line":270,"column":4,"offset":4684},"end":{"line":270,"column":25,"offset":4705},"indent":[]}}],"position":{"start":{"line":270,"column":1,"offset":4681},"end":{"line":270,"column":25,"offset":4705},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"type alias User =\n    { id : Int\n    , name : Maybe String\n    , email : String\n    }\n\nuser : Decoder User\nuser =\n    Json.Decode.succeed User\n        |> required \"user_id\" int\n        |> required \"name\" (nullable string)\n        |> required \"email\" string","position":{"start":{"line":272,"column":1,"offset":4707},"end":{"line":285,"column":4,"offset":4974},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For an example that requires a list:","position":{"start":{"line":287,"column":1,"offset":4976},"end":{"line":287,"column":37,"offset":5012},"indent":[]}}],"position":{"start":{"line":287,"column":1,"offset":4976},"end":{"line":287,"column":37,"offset":5012},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"Decode.succeed Metadata\n   |> required \"description\" string\n   |> required \"title\" string\n   |> required \"tagList\" (list string)\n   |> required \"favorited\" bool\n   |> required \"favoritesCound\" int\n   |> required \"createdAt\" Timestamp.iso8601Decoder","position":{"start":{"line":289,"column":1,"offset":5014},"end":{"line":297,"column":4,"offset":5273},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Tuples","position":{"start":{"line":299,"column":4,"offset":5278},"end":{"line":299,"column":10,"offset":5284},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":5275},"end":{"line":299,"column":10,"offset":5284},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Serve the same purpose as records but with field ","position":{"start":{"line":301,"column":1,"offset":5286},"end":{"line":301,"column":50,"offset":5335},"indent":[]}},{"type":"inlineCode","value":"positions","position":{"start":{"line":301,"column":50,"offset":5335},"end":{"line":301,"column":61,"offset":5346},"indent":[]}},{"type":"text","value":" instead of names.","position":{"start":{"line":301,"column":61,"offset":5346},"end":{"line":301,"column":79,"offset":5364},"indent":[]}}],"position":{"start":{"line":301,"column":1,"offset":5286},"end":{"line":301,"column":79,"offset":5364},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There is a 3 limit max!","position":{"start":{"line":303,"column":1,"offset":5366},"end":{"line":303,"column":24,"offset":5389},"indent":[]}}],"position":{"start":{"line":303,"column":1,"offset":5366},"end":{"line":303,"column":24,"offset":5389},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"x = Tuple.first (5, 7)\n(name, x, y) = (\"foo\", 5, 7)\n\nx = { x = 5, y = 7 }.x\n{ name, x, y } = { name = \"foo\", x = 5, y = 7 }","position":{"start":{"line":305,"column":1,"offset":5391},"end":{"line":311,"column":4,"offset":5525},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Http and interacting with servers","position":{"start":{"line":313,"column":4,"offset":5530},"end":{"line":313,"column":37,"offset":5563},"indent":[]}}],"position":{"start":{"line":313,"column":1,"offset":5527},"end":{"line":313,"column":37,"offset":5563},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"Http","position":{"start":{"line":315,"column":1,"offset":5565},"end":{"line":317,"column":4,"offset":5580},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":320,"column":1,"offset":5583},"end":{"line":320,"column":31,"offset":5613},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":320,"column":31,"offset":5613}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"webmasters-elm\"\n    }}>{`Webmasters Elm`}</h1>\n    <h2 {...{\n      \"id\": \"costs\"\n    }}>{`Costs`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Learning a new language`}</li>\n      <li parentName=\"ol\">{`Smaller ecosystem`}</li>\n      <li parentName=\"ol\">{`Fewer Web APIs have first-class support`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"benefits\"\n    }}>{`Benefits`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Bundle size small`}</li>\n      <li parentName=\"ol\">{`Production Elm in the first week`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"elm\"\n    }}>{`Elm`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`JS Equivalent`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Elm`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`UI`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`view`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`State`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`model`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Async`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`update`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Utilities`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`core`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Packages`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`elm install`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"rendering-a-page\"\n    }}>{`Rendering a page`}</h2>\n    <h3 {...{\n      \"id\": \"compiling\"\n    }}>{`Compiling`}</h3>\n    <p>{`Compiles to JS.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`elm make Main.elm --output elm.js\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"user-interface-example\"\n    }}>{`User Interface Example`}</h2>\n    <p>{`Converting this to Elm:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let pluralize = (singular, plural, quantity) =>\n  quantity === 1 ? singular : plural;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`pluralize singular plural quantity =\n    if quantity == 1 then\n        singular\n    else\n        plural\n\nmain =\n    text (pluralize \"leaf\" \"leaves\" 1) -- parentheses are to disambiguate\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"part-1---example\"\n    }}>{`Part 1 - Example`}</h2>\n    <p>{`This basic example gives a short look at actually creating a working piece of code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`module Main exposing (main)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\n\n\nbanner =\n    div [ class \"banner\" ]\n        [ div [ class \"container\" ]\n            [ h1 [] [ text \"conduit\"]\n            , p [] [ text \"A place to share your knowledge.\"]\n            ]\n        ]\n\n\nfeed =\n    div [ class \"feed-toggle\" ] [ text \"(In the future we’ll display a feed of articles here!)\" ]\n\n\nmain =\n    div [ class \"home-page\" ]\n        [ banner\n        , div [ class \"container page\" ]\n            [ div [ class \"row\" ]\n                [ div [ class \"col-md-9\" ] [ feed ]\n                , div [ class \"col-md-3\" ] []\n                ]\n            ]\n        ]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"the-elm-architecture\"\n    }}>{`The Elm Architecture`}</h2>\n    <p>{`Update, Model, View.`}</p>\n    <p>{`View is function that takes a `}<inlineCode parentName=\"p\">{`model`}</inlineCode>{` as a function.`}</p>\n    <p>{`Note that whatever message you use, you need to be consistent for `}<inlineCode parentName=\"p\">{`Update`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`View`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`type alias Msg =\n    { description: String\n    , data: String\n    }\n\nview : Model -> Html Msg\nview model =\n\n--\nupdate : Msg -> Model -> Model\nupdate msg model =\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-annotations\"\n    }}>{`Type Annotations`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`username = \"okeeffed\"\n\n-- typed example (Elm uses inference either way)\nusername : String\nusername = \"okeeffed\"\n\n-- alt example\nString.length : String -> Int\n\n-- name list\nnames : List String\nnames = [\"Sam\", \"Bob\", \"Bill\"]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`pluralize : String -> String -> Int -> String\n\n-- equivocal to\npluralize : String -> (String -> (Int -> String))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"case-expressions\"\n    }}>{`Case Expressions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`case model.tab of\n    \"YourFeed\" ->\n        -- show feed\n    \"GlobalFeed\" ->\n        -- show Global Feed\n    _ ->\n        -- show Tag Feed\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-types\"\n    }}>{`Custom Types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- creates completely distinct values\ntype Tab =\n    YourFeed\n    | GlobalFeed\n    | TagFeed\n\nyours : Tab\nyours =\n    YourFeed\n\n-- Turning types into functions\n\ntype Tab =\n    YourFeed\n    | GlobalFeed\n    | TagFeed String\n\n-- in the repl\n> TagFeed \"Happiness\"\nTagFeed \"Happiness\" : Tab\n> TagFeed\n<function> : String -> Tab\n`}</code></pre>\n    <p>{`Using Custom Types with updates:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- allows us to pass different data types\ntype Msg\n    = ClickedTag String\n    | ClickedPage Int\n\nupdate msg model =\n    case msg of\n        ClickedTag selectedTag ->\n            -- use tag here\n        ClickedPage page ->\n            -- use page here\n`}</code></pre>\n    <p>{`Summing it all up`}</p>\n    <p>{`Type | In Elm\ncase-expressions | case msg of\nEnumerations | type Bool = True | False\nContainers | type Msg = ClickedPage Int | ...\nVariant Functions | onClick (ClickedPage pageNumber)`}</p>\n    <h2 {...{\n      \"id\": \"maybe-overview\"\n    }}>{`Maybe Overview`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- List.head : List elem -> Maybe elem\nfirst users =\n    List.head users\n\n-- example case\ncase first newUsers of\n    Just user ->\n        String.length user\n    Nothing ->\n        0\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pipelines\"\n    }}>{`Pipelines`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`List.head (List.map (List.reverse (List.filter (\\\\x -> x < 5) [2, 4, 6])) negate)\n\n-- As pipeline\n[2, 4, 6]\n    |> List.filter (\\\\x -> x < 5)\n    |> List.reverse\n    |> List.map negate\n    |> List.head\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"decoding-json\"\n    }}>{`Decoding JSON`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- Import to understand custom type\ntype Result okVal errVal\n    = Ok okVal\n    | Err errVal\n\n-- similar to String.toint()\ncase decodeString Json.Decode.int \"42\" of\n    Ok num ->\n        -- Do something with Int\n    Err error ->\n        -- Do something with the error\n\ntype alias User =\n    { id : Int\n    , firstName : String\n    , lastName : String\n    }\n\nuser : Decoder User\nuser =\n    Json.Decode.succeed User\n        |> required \"user_id\" int\n        |> required \"first_name\" string\n        |> required \"last_name\" string\n\n-- Alternatively\nusers : Decoder (List User)\nusers =\n    list user\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"optional-and-nullable\"\n    }}>{`Optional and Nullable`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`type alias User =\n    { id : Int\n    , name : Maybe String\n    , email : String\n    }\n\nuser : Decoder User\nuser =\n    Json.Decode.succeed User\n        |> required \"user_id\" int\n        |> required \"name\" (nullable string)\n        |> required \"email\" string\n`}</code></pre>\n    <p>{`For an example that requires a list:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`Decode.succeed Metadata\n   |> required \"description\" string\n   |> required \"title\" string\n   |> required \"tagList\" (list string)\n   |> required \"favorited\" bool\n   |> required \"favoritesCound\" int\n   |> required \"createdAt\" Timestamp.iso8601Decoder\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tuples\"\n    }}>{`Tuples`}</h2>\n    <p>{`Serve the same purpose as records but with field `}<inlineCode parentName=\"p\">{`positions`}</inlineCode>{` instead of names.`}</p>\n    <p>{`There is a 3 limit max!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`x = Tuple.first (5, 7)\n(name, x, y) = (\"foo\", 5, 7)\n\nx = { x = 5, y = 7 }.x\n{ name, x, y } = { name = \"foo\", x = 5, y = 7 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"http-and-interacting-with-servers\"\n    }}>{`Http and interacting with servers`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`Http\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}