{"expireTime":9007200867335911000,"key":"gatsby-plugin-mdx-entire-payload-82dfd14e1693f1836acc129bb84d6706-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"State Management in Pure React","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":33,"offset":199},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":33,"offset":199},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This course looks deep into understanding state, the inner workings of ","position":{"start":{"line":10,"column":1,"offset":201},"end":{"line":10,"column":72,"offset":272},"indent":[]}},{"type":"inlineCode","value":"this.setState","position":{"start":{"line":10,"column":72,"offset":272},"end":{"line":10,"column":87,"offset":287},"indent":[]}},{"type":"text","value":", exploring APIs to navigate around prop-drilling, reducers for advanced state management, write custom hooks, store state in local storage, store state in URL query params and fetch from a server.","position":{"start":{"line":10,"column":87,"offset":287},"end":{"line":10,"column":284,"offset":484},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":201},"end":{"line":10,"column":284,"offset":484},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":12,"column":4,"offset":489},"end":{"line":12,"column":13,"offset":498},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":486},"end":{"line":12,"column":13,"offset":498},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://frontendmasters.com/courses/pure-react-state/","children":[{"type":"text","value":"FE Masters Course","position":{"start":{"line":14,"column":5,"offset":504},"end":{"line":14,"column":22,"offset":521},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":503},"end":{"line":14,"column":78,"offset":577},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":503},"end":{"line":14,"column":78,"offset":577},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":500},"end":{"line":14,"column":78,"offset":577},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://speakerdeck.com/stevekinney/react-state","children":[{"type":"text","value":"Slides","position":{"start":{"line":15,"column":5,"offset":582},"end":{"line":15,"column":11,"offset":588},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":581},"end":{"line":15,"column":61,"offset":638},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":581},"end":{"line":15,"column":61,"offset":638},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":578},"end":{"line":15,"column":61,"offset":638},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/stevekinney/react-state-management","children":[{"type":"text","value":"GitHub resource for course","position":{"start":{"line":16,"column":5,"offset":643},"end":{"line":16,"column":31,"offset":669},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":642},"end":{"line":16,"column":87,"offset":725},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":642},"end":{"line":16,"column":87,"offset":725},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":639},"end":{"line":16,"column":87,"offset":725},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/stevekinney/grudges-react-state","children":[{"type":"text","value":"Github code for Grude list","position":{"start":{"line":17,"column":5,"offset":730},"end":{"line":17,"column":31,"offset":756},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":729},"end":{"line":17,"column":84,"offset":809},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":729},"end":{"line":17,"column":84,"offset":809},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":726},"end":{"line":17,"column":84,"offset":809},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/stevekinney/star-wars-characters-react-state","children":[{"type":"text","value":"Star Wars character state","position":{"start":{"line":18,"column":5,"offset":814},"end":{"line":18,"column":30,"offset":839},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":813},"end":{"line":18,"column":96,"offset":905},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":813},"end":{"line":18,"column":96,"offset":905},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":810},"end":{"line":18,"column":96,"offset":905},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://nikgraf.github.io/react-hooks/","children":[{"type":"text","value":"Collection of React Hooks","position":{"start":{"line":19,"column":5,"offset":910},"end":{"line":19,"column":30,"offset":935},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":909},"end":{"line":19,"column":71,"offset":976},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":909},"end":{"line":19,"column":71,"offset":976},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":906},"end":{"line":19,"column":71,"offset":976},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":500},"end":{"line":19,"column":71,"offset":976},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Types of State","position":{"start":{"line":21,"column":4,"offset":981},"end":{"line":21,"column":18,"offset":995},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":978},"end":{"line":21,"column":18,"offset":995},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Model data: nouns in application","position":{"start":{"line":23,"column":4,"offset":1000},"end":{"line":23,"column":36,"offset":1032},"indent":[]}}],"position":{"start":{"line":23,"column":4,"offset":1000},"end":{"line":23,"column":36,"offset":1032},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":997},"end":{"line":23,"column":36,"offset":1032},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"View/UI state: Are those nouns sorted in ascending or descending order?","position":{"start":{"line":24,"column":4,"offset":1036},"end":{"line":24,"column":75,"offset":1107},"indent":[]}}],"position":{"start":{"line":24,"column":4,"offset":1036},"end":{"line":24,"column":75,"offset":1107},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1033},"end":{"line":24,"column":75,"offset":1107},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Session state: Is the user logged in?","position":{"start":{"line":25,"column":4,"offset":1111},"end":{"line":25,"column":41,"offset":1148},"indent":[]}}],"position":{"start":{"line":25,"column":4,"offset":1111},"end":{"line":25,"column":41,"offset":1148},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1108},"end":{"line":25,"column":41,"offset":1148},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Communication: Are we in the process of fetching the nouns from the server?","position":{"start":{"line":26,"column":4,"offset":1152},"end":{"line":26,"column":79,"offset":1227},"indent":[]}}],"position":{"start":{"line":26,"column":4,"offset":1152},"end":{"line":26,"column":79,"offset":1227},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1149},"end":{"line":26,"column":79,"offset":1227},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Location: Where are we in the application? Which nouns are we looking at?","position":{"start":{"line":27,"column":4,"offset":1231},"end":{"line":27,"column":77,"offset":1304},"indent":[]}}],"position":{"start":{"line":27,"column":4,"offset":1231},"end":{"line":27,"column":77,"offset":1304},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1228},"end":{"line":27,"column":77,"offset":1304},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":997},"end":{"line":27,"column":77,"offset":1304},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"setState & Class","position":{"start":{"line":29,"column":4,"offset":1309},"end":{"line":29,"column":20,"offset":1325},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1306},"end":{"line":29,"column":20,"offset":1325},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This warm up just looks at the old ","position":{"start":{"line":31,"column":1,"offset":1327},"end":{"line":31,"column":36,"offset":1362},"indent":[]}},{"type":"inlineCode","value":"setState","position":{"start":{"line":31,"column":36,"offset":1362},"end":{"line":31,"column":46,"offset":1372},"indent":[]}},{"type":"text","value":" with class components that we know.","position":{"start":{"line":31,"column":46,"offset":1372},"end":{"line":31,"column":82,"offset":1408},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1327},"end":{"line":31,"column":82,"offset":1408},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nimport './styles.scss';\n\nclass Application extends Component {\n  state = { count: 0 };\n\n  increment = () => {\n    this.setState({\n      count: this.state.count + 1,\n    });\n  };\n\n  decrement = () => {\n    this.setState({\n      count: this.state.count - 1,\n    });\n  };\n\n  render() {\n    const { count } = this.state;\n\n    return (\n      <main className=\"Counter\">\n        <p className=\"count\">{count}</p>\n        <section className=\"controls\">\n          <button onClick={this.increment}>Increment</button>\n          <button onClick={this.decrement}>Decrement</button>\n        </section>\n      </main>\n    );\n  }\n}\n\nrender(<Application />, document.getElementById('root'));","position":{"start":{"line":33,"column":1,"offset":1410},"end":{"line":70,"column":4,"offset":2179},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"While different when it comes to hooks, React will batch up ","position":{"start":{"line":72,"column":1,"offset":2181},"end":{"line":72,"column":61,"offset":2241},"indent":[]}},{"type":"inlineCode","value":"setState","position":{"start":{"line":72,"column":61,"offset":2241},"end":{"line":72,"column":71,"offset":2251},"indent":[]}},{"type":"text","value":" calls to avoid unnecessary re-renders.","position":{"start":{"line":72,"column":71,"offset":2251},"end":{"line":72,"column":110,"offset":2290},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":2181},"end":{"line":72,"column":110,"offset":2290},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"setState","position":{"start":{"line":74,"column":1,"offset":2292},"end":{"line":74,"column":11,"offset":2302},"indent":[]}},{"type":"text","value":" also runs asynchronously - important to know!","position":{"start":{"line":74,"column":11,"offset":2302},"end":{"line":74,"column":57,"offset":2348},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":2292},"end":{"line":74,"column":57,"offset":2348},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"setState","position":{"start":{"line":76,"column":1,"offset":2350},"end":{"line":76,"column":11,"offset":2360},"indent":[]}},{"type":"text","value":" also allows you to pass in a function that enables you to ensure there is no batching. That function can take arguments ","position":{"start":{"line":76,"column":11,"offset":2360},"end":{"line":76,"column":132,"offset":2481},"indent":[]}},{"type":"inlineCode","value":"(state, props)","position":{"start":{"line":76,"column":132,"offset":2481},"end":{"line":76,"column":148,"offset":2497},"indent":[]}},{"type":"text","value":". This helps us to abstract functions that can reused everywhere.","position":{"start":{"line":76,"column":148,"offset":2497},"end":{"line":76,"column":213,"offset":2562},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":2350},"end":{"line":76,"column":213,"offset":2562},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, there is a callback that you can pass as a second argument to ","position":{"start":{"line":78,"column":1,"offset":2564},"end":{"line":78,"column":72,"offset":2635},"indent":[]}},{"type":"inlineCode","value":"setState","position":{"start":{"line":78,"column":72,"offset":2635},"end":{"line":78,"column":82,"offset":2645},"indent":[]}},{"type":"text","value":" that allows you to fire a function after the change. This is useful for when you are breaking encapsulation or need to pass data back to a parent after the change.","position":{"start":{"line":78,"column":82,"offset":2645},"end":{"line":78,"column":246,"offset":2809},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2564},"end":{"line":78,"column":246,"offset":2809},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Fun tidbit that came up is that arrow function methods are not supported natively without a Babel plugin.","position":{"start":{"line":80,"column":3,"offset":2813},"end":{"line":80,"column":108,"offset":2918},"indent":[]}}],"position":{"start":{"line":80,"column":3,"offset":2813},"end":{"line":80,"column":108,"offset":2918},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2811},"end":{"line":80,"column":108,"offset":2918},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"setState Patterns and Anti-Patterns","position":{"start":{"line":82,"column":4,"offset":2923},"end":{"line":82,"column":39,"offset":2958},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2920},"end":{"line":82,"column":39,"offset":2958},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Setting initial state by combining two different props - just add props as you need them.","position":{"start":{"line":84,"column":4,"offset":2963},"end":{"line":84,"column":93,"offset":3052},"indent":[]}}],"position":{"start":{"line":84,"column":4,"offset":2963},"end":{"line":84,"column":93,"offset":3052},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2960},"end":{"line":84,"column":93,"offset":3052},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Don't use state for things that won't be rendered - example was this constantly polled endpoint.","position":{"start":{"line":85,"column":4,"offset":3056},"end":{"line":85,"column":100,"offset":3152},"indent":[]}}],"position":{"start":{"line":85,"column":4,"offset":3056},"end":{"line":85,"column":100,"offset":3152},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":3053},"end":{"line":85,"column":100,"offset":3152},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2960},"end":{"line":85,"column":100,"offset":3152},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Hooks State","position":{"start":{"line":87,"column":4,"offset":3157},"end":{"line":87,"column":15,"offset":3168},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":3154},"end":{"line":87,"column":15,"offset":3168},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This gives a way to manipulate state in functional components. With this we don't have to worry about event binding. This is not disimilar to ","position":{"start":{"line":89,"column":1,"offset":3170},"end":{"line":89,"column":143,"offset":3312},"indent":[]}},{"type":"inlineCode","value":"setState","position":{"start":{"line":89,"column":143,"offset":3312},"end":{"line":89,"column":153,"offset":3322},"indent":[]}},{"type":"text","value":" asynchronous call.","position":{"start":{"line":89,"column":153,"offset":3322},"end":{"line":89,"column":172,"offset":3341},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":3170},"end":{"line":89,"column":172,"offset":3341},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const [count, setCount] = React.useState(0);\n\nconst increment = () => setCount(count + 1);\nconst decrement = () => setCount(count - 1);\nconst reset = () => setCount(0);","position":{"start":{"line":91,"column":1,"offset":3343},"end":{"line":97,"column":4,"offset":3529},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can also take a function for this ie ","position":{"start":{"line":99,"column":1,"offset":3531},"end":{"line":99,"column":41,"offset":3571},"indent":[]}},{"type":"inlineCode","value":"setCount(c => c + 1)","position":{"start":{"line":99,"column":41,"offset":3571},"end":{"line":99,"column":63,"offset":3593},"indent":[]}},{"type":"text","value":". This does not get a prop as a second argument. That means we can still pull out the function as long as we don't need access to props.","position":{"start":{"line":99,"column":63,"offset":3593},"end":{"line":99,"column":199,"offset":3729},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":3531},"end":{"line":99,"column":199,"offset":3729},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here, we also need to pass something tangible back ie no ","position":{"start":{"line":101,"column":1,"offset":3731},"end":{"line":101,"column":58,"offset":3788},"indent":[]}},{"type":"inlineCode","value":"undefined","position":{"start":{"line":101,"column":58,"offset":3788},"end":{"line":101,"column":69,"offset":3799},"indent":[]}},{"type":"text","value":" returns from the callback.","position":{"start":{"line":101,"column":69,"offset":3799},"end":{"line":101,"column":96,"offset":3826},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":3731},"end":{"line":101,"column":96,"offset":3826},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We don't have a callback, but we can now use ","position":{"start":{"line":103,"column":1,"offset":3828},"end":{"line":103,"column":46,"offset":3873},"indent":[]}},{"type":"inlineCode","value":"useEffect","position":{"start":{"line":103,"column":46,"offset":3873},"end":{"line":103,"column":57,"offset":3884},"indent":[]}},{"type":"text","value":" as a replacement.","position":{"start":{"line":103,"column":57,"offset":3884},"end":{"line":103,"column":75,"offset":3902},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3828},"end":{"line":103,"column":75,"offset":3902},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const [count, setCount] = React.useState(0);\n\nconst increment = () => setCount(count + 1);\nconst decrement = () => setCount(count - 1);\nconst reset = () => setCount(0);\n\nuseEffect(() => {\n  document.title = `Counter: ${count}`;\n}, [count]);\n\n// this second effect is an example of an effect for local storage\nuseEffect(() => {\n  storeStateInLocalStorage(count);\n}, count);","position":{"start":{"line":105,"column":1,"offset":3904},"end":{"line":120,"column":4,"offset":4294},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note: if you don't give ","position":{"start":{"line":122,"column":1,"offset":4296},"end":{"line":122,"column":25,"offset":4320},"indent":[]}},{"type":"inlineCode","value":"useEffect","position":{"start":{"line":122,"column":25,"offset":4320},"end":{"line":122,"column":36,"offset":4331},"indent":[]}},{"type":"text","value":" a second parameter, it will run on every render.","position":{"start":{"line":122,"column":36,"offset":4331},"end":{"line":122,"column":85,"offset":4380},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":4296},"end":{"line":122,"column":85,"offset":4380},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you give one, it gives dependencies where the effect will only run when there is a change to the dependency.","position":{"start":{"line":124,"column":1,"offset":4382},"end":{"line":124,"column":112,"offset":4493},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":4382},"end":{"line":124,"column":112,"offset":4493},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Making an hooks abstraction","position":{"start":{"line":126,"column":5,"offset":4499},"end":{"line":126,"column":32,"offset":4526},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":4495},"end":{"line":126,"column":32,"offset":4526},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// this is an abstraction for React.useState\nconst useLocalStorage = (initialState, key) => {\n  const get = () => {\n    const storage = localStorage.getItem('counterState');\n    if (storage) return JSON.parse(storage)[key];\n    return initialState;\n  };\n\n  const [value, setValue] = useState(get());\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify({ value }));\n  }, value);\n\n  return [value, setValue];\n};","position":{"start":{"line":128,"column":1,"offset":4528},"end":{"line":145,"column":4,"offset":4969},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This makes things a bit more useable across the app:","position":{"start":{"line":147,"column":1,"offset":4971},"end":{"line":147,"column":53,"offset":5023},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":4971},"end":{"line":147,"column":53,"offset":5023},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const Counter = () => {\n  const [count, setCount] = useLocalStorage(0, 'count');\n  // Rest removed for brevity\n};","position":{"start":{"line":149,"column":1,"offset":5025},"end":{"line":154,"column":4,"offset":5156},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Persisting State & useRef","position":{"start":{"line":156,"column":4,"offset":5161},"end":{"line":156,"column":29,"offset":5186},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":5158},"end":{"line":156,"column":29,"offset":5186},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the case of the function components, we have a unique call of the function each time which will give a different copy of the state and props.","position":{"start":{"line":158,"column":1,"offset":5188},"end":{"line":158,"column":145,"offset":5332},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":5188},"end":{"line":158,"column":145,"offset":5332},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using a reference is a way for us to persist a previous value in our function components.","position":{"start":{"line":160,"column":1,"offset":5334},"end":{"line":160,"column":90,"offset":5423},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":5334},"end":{"line":160,"column":90,"offset":5423},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const Counter = () => {\n  const [count, setCount] = useLocalStorage(0, 'count');\n  const countRef = React.useRef();\n\n  let message = '';\n  if (countRef.current < count) message = 'Higher';\n  if (countRef.current > count) message = 'Lower';\n\n  // the only way to update the current reference\n  countRef.current = count;\n  // Rest removed for brevity\n};","position":{"start":{"line":162,"column":1,"offset":5425},"end":{"line":175,"column":4,"offset":5794},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"useEffect & Cleanup","position":{"start":{"line":177,"column":4,"offset":5799},"end":{"line":177,"column":23,"offset":5818},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":5796},"end":{"line":177,"column":23,"offset":5818},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, we see that there is always a new interval called when the useEffect runs:","position":{"start":{"line":179,"column":1,"offset":5820},"end":{"line":179,"column":92,"offset":5911},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":5820},"end":{"line":179,"column":92,"offset":5911},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"useEffect(() => {\n  setInterval(() => {\n    console.log(`Count: ${count}`);\n  }, 1000);\n}, [count]);","position":{"start":{"line":181,"column":1,"offset":5913},"end":{"line":187,"column":4,"offset":6031},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The above has no cleanups. No bueno. Those suttle things will come to bite us. To avoid this:","position":{"start":{"line":189,"column":1,"offset":6033},"end":{"line":189,"column":94,"offset":6126},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":6033},"end":{"line":189,"column":94,"offset":6126},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"useEffect(() => {\n  const id = setInterval(() => {\n    console.log(`Count: ${count}`);\n  }, 1000);\n  // this will give a callback where we can cleanup\n  // after itself for each effect\n  return () => clearInterval(id);\n}, [count]);","position":{"start":{"line":191,"column":1,"offset":6128},"end":{"line":200,"column":4,"offset":6377},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Reducers","position":{"start":{"line":202,"column":4,"offset":6382},"end":{"line":202,"column":12,"offset":6390},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":6379},"end":{"line":202,"column":12,"offset":6390},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"React these days have a ","position":{"start":{"line":204,"column":1,"offset":6392},"end":{"line":204,"column":25,"offset":6416},"indent":[]}},{"type":"inlineCode","value":"useReducer","position":{"start":{"line":204,"column":25,"offset":6416},"end":{"line":204,"column":37,"offset":6428},"indent":[]}},{"type":"text","value":" which takes a simplified version of what Redux does.","position":{"start":{"line":204,"column":37,"offset":6428},"end":{"line":204,"column":90,"offset":6481},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":6392},"end":{"line":204,"column":90,"offset":6481},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"React state needs immutable objects everytime. If you mutate an object or array, it is the same object in memory - React can't tell the difference. We know this already from the prominent use of passing new arrays and objects with the spread operator.","position":{"start":{"line":206,"column":1,"offset":6483},"end":{"line":206,"column":252,"offset":6734},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":6483},"end":{"line":206,"column":252,"offset":6734},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The example used is what happens when we update parent state for one child and all the children re-rendering needlessly.","position":{"start":{"line":208,"column":3,"offset":6738},"end":{"line":208,"column":123,"offset":6858},"indent":[]}}],"position":{"start":{"line":208,"column":3,"offset":6738},"end":{"line":208,"column":123,"offset":6858},"indent":[]}}],"position":{"start":{"line":208,"column":1,"offset":6736},"end":{"line":208,"column":123,"offset":6858},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":210,"column":1,"offset":6860},"end":{"line":210,"column":3,"offset":6862},"indent":[]}},{"type":"inlineCode","value":"reducer","position":{"start":{"line":210,"column":3,"offset":6862},"end":{"line":210,"column":12,"offset":6871},"indent":[]}},{"type":"text","value":" is a function that takes two arguments. It takes two arguments: 1. The current state of the world (state) and 2. The thing that happened (action).","position":{"start":{"line":210,"column":12,"offset":6871},"end":{"line":210,"column":159,"offset":7018},"indent":[]}}],"position":{"start":{"line":210,"column":1,"offset":6860},"end":{"line":210,"column":159,"offset":7018},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It takes these two things and pipes out a resolved new state of the world.","position":{"start":{"line":212,"column":1,"offset":7020},"end":{"line":212,"column":75,"offset":7094},"indent":[]}}],"position":{"start":{"line":212,"column":1,"offset":7020},"end":{"line":212,"column":75,"offset":7094},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const initialState = {};\n\nconst reducer = (state, action) => {\n  if (action.type === TYPE) {\n    // this assumes state is just an array for a list etc\n    return [action.payload, ...state];\n  }\n  return state;\n};\n\n// code to run\nconst Component = () => {\n  const [dataNamedWhatever, dispatch] = useReducer(reducer, initialState);\n  const actionToDo = mutation => {\n    dispatch({\n      type: TYPE,\n      payload: mutation,\n    });\n  };\n};","position":{"start":{"line":214,"column":1,"offset":7096},"end":{"line":235,"column":4,"offset":7552},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The benefit of this is that is becomes super easy to unit test. This means we don't need to worry about mounting components to do so.","position":{"start":{"line":237,"column":1,"offset":7554},"end":{"line":237,"column":134,"offset":7687},"indent":[]}}],"position":{"start":{"line":237,"column":1,"offset":7554},"end":{"line":237,"column":134,"offset":7687},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Steve mentions that his preference is to not use a switch statement.","position":{"start":{"line":239,"column":1,"offset":7689},"end":{"line":239,"column":69,"offset":7757},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":7689},"end":{"line":239,"column":69,"offset":7757},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"React.memo & useCallback","position":{"start":{"line":241,"column":4,"offset":7762},"end":{"line":241,"column":28,"offset":7786},"indent":[]}}],"position":{"start":{"line":241,"column":1,"offset":7759},"end":{"line":241,"column":28,"offset":7786},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At this point, what we want to do is tell React not to rerender if nothing has changed.","position":{"start":{"line":243,"column":1,"offset":7788},"end":{"line":243,"column":88,"offset":7875},"indent":[]}}],"position":{"start":{"line":243,"column":1,"offset":7788},"end":{"line":243,"column":88,"offset":7875},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"React.memo","position":{"start":{"line":245,"column":1,"offset":7877},"end":{"line":245,"column":13,"offset":7889},"indent":[]}},{"type":"text","value":" simply takes a function component, and if it has the same props, simply don't rerender it.","position":{"start":{"line":245,"column":13,"offset":7889},"end":{"line":245,"column":104,"offset":7980},"indent":[]}}],"position":{"start":{"line":245,"column":1,"offset":7877},"end":{"line":245,"column":104,"offset":7980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We also have ","position":{"start":{"line":247,"column":1,"offset":7982},"end":{"line":247,"column":14,"offset":7995},"indent":[]}},{"type":"inlineCode","value":"useCallback","position":{"start":{"line":247,"column":14,"offset":7995},"end":{"line":247,"column":27,"offset":8008},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":247,"column":27,"offset":8008},"end":{"line":247,"column":32,"offset":8013},"indent":[]}},{"type":"inlineCode","value":"useMemo","position":{"start":{"line":247,"column":32,"offset":8013},"end":{"line":247,"column":41,"offset":8022},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":247,"column":41,"offset":8022},"end":{"line":247,"column":42,"offset":8023},"indent":[]}}],"position":{"start":{"line":247,"column":1,"offset":7982},"end":{"line":247,"column":42,"offset":8023},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"useMemo","position":{"start":{"line":249,"column":1,"offset":8025},"end":{"line":249,"column":10,"offset":8034},"indent":[]}},{"type":"text","value":" will call a function and if the dependencies haven't changed, it will not call the function again.","position":{"start":{"line":249,"column":10,"offset":8034},"end":{"line":249,"column":109,"offset":8133},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":8025},"end":{"line":249,"column":109,"offset":8133},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"useCallback","position":{"start":{"line":251,"column":1,"offset":8135},"end":{"line":251,"column":14,"offset":8148},"indent":[]}},{"type":"text","value":" will give you a new memoized function that you can call. It changes only if one the dependencies has changed.","position":{"start":{"line":251,"column":14,"offset":8148},"end":{"line":251,"column":124,"offset":8258},"indent":[]}}],"position":{"start":{"line":251,"column":1,"offset":8135},"end":{"line":251,"column":124,"offset":8258},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const initialState = {};\n\nconst reducer = (state, action) => {\n  if (action.type === TYPE) {\n    // this assumes state is just an array for a list etc\n    return [action.payload, ...state];\n  }\n  return state;\n};\n\n// code to run\nconst Component = () => {\n  const [dataNamedWhatever, dispatch] = useReducer(reducer, initialState);\n  const actionToDo = mutation => {\n    dispatch({\n      type: TYPE,\n      payload: mutation,\n    });\n  };\n};","position":{"start":{"line":253,"column":1,"offset":8260},"end":{"line":274,"column":4,"offset":8716},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we wrap our ","position":{"start":{"line":276,"column":1,"offset":8718},"end":{"line":276,"column":16,"offset":8733},"indent":[]}},{"type":"inlineCode","value":"NewGrudge","position":{"start":{"line":276,"column":16,"offset":8733},"end":{"line":276,"column":27,"offset":8744},"indent":[]}},{"type":"text","value":" with ","position":{"start":{"line":276,"column":27,"offset":8744},"end":{"line":276,"column":33,"offset":8750},"indent":[]}},{"type":"inlineCode","value":"React.memo","position":{"start":{"line":276,"column":33,"offset":8750},"end":{"line":276,"column":45,"offset":8762},"indent":[]}},{"type":"text","value":", then it will check","position":{"start":{"line":276,"column":45,"offset":8762},"end":{"line":276,"column":65,"offset":8782},"indent":[]}}],"position":{"start":{"line":276,"column":1,"offset":8718},"end":{"line":276,"column":65,"offset":8782},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const Component = () => {\n  const [dataNamedWhatever, dispatch] = useReducer(reducer, initialState);\n  // this changes to make sure the function is memoized and only changes\n  // if value of \"mutation\" changes\n  const actionToDo = useCallback(\n    mutation => {\n      dispatch({\n        type: TYPE,\n        payload: mutation,\n      });\n    },\n    [dispatch],\n  );\n};\n\nconst List = React.memo(({ onSubmit }) => {\n  // rest of code\n});","position":{"start":{"line":278,"column":1,"offset":8784},"end":{"line":297,"column":4,"offset":9235},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we get the same function every time, we don't really need to rerender. This works because now our ","position":{"start":{"line":299,"column":1,"offset":9237},"end":{"line":299,"column":102,"offset":9338},"indent":[]}},{"type":"inlineCode","value":"useCallback","position":{"start":{"line":299,"column":102,"offset":9338},"end":{"line":299,"column":115,"offset":9351},"indent":[]}},{"type":"text","value":" only depends on ","position":{"start":{"line":299,"column":115,"offset":9351},"end":{"line":299,"column":132,"offset":9368},"indent":[]}},{"type":"inlineCode","value":"dispatch","position":{"start":{"line":299,"column":132,"offset":9368},"end":{"line":299,"column":142,"offset":9378},"indent":[]}},{"type":"text","value":" and not the ","position":{"start":{"line":299,"column":142,"offset":9378},"end":{"line":299,"column":155,"offset":9391},"indent":[]}},{"type":"inlineCode","value":"mutation","position":{"start":{"line":299,"column":155,"offset":9391},"end":{"line":299,"column":165,"offset":9401},"indent":[]}},{"type":"text","value":" value.","position":{"start":{"line":299,"column":165,"offset":9401},"end":{"line":299,"column":172,"offset":9408},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":9237},"end":{"line":299,"column":172,"offset":9408},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Prop Drilling & Context API","position":{"start":{"line":301,"column":4,"offset":9413},"end":{"line":301,"column":31,"offset":9440},"indent":[]}}],"position":{"start":{"line":301,"column":1,"offset":9410},"end":{"line":301,"column":31,"offset":9440},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The aim of Context API is to be \"hey, I want the state to be available around the place so that I can hook into\".","position":{"start":{"line":303,"column":1,"offset":9442},"end":{"line":303,"column":114,"offset":9555},"indent":[]}}],"position":{"start":{"line":303,"column":1,"offset":9442},"end":{"line":303,"column":114,"offset":9555},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"An interesting question that come up about Redux out of the box. Redux comes with middleware out of the box, ","position":{"start":{"line":305,"column":3,"offset":9559},"end":{"line":305,"column":112,"offset":9668},"indent":[]}},{"type":"inlineCode","value":"useReducer","position":{"start":{"line":305,"column":112,"offset":9668},"end":{"line":305,"column":124,"offset":9680},"indent":[]}},{"type":"text","value":" does not. Redux has ","position":{"start":{"line":305,"column":124,"offset":9680},"end":{"line":305,"column":145,"offset":9701},"indent":[]}},{"type":"inlineCode","value":"combinedReducers","position":{"start":{"line":305,"column":145,"offset":9701},"end":{"line":305,"column":163,"offset":9719},"indent":[]}},{"type":"text","value":", others do not. The tradeoff is with you need them and whether you use what you write vs what is battle tested etc.","position":{"start":{"line":305,"column":163,"offset":9719},"end":{"line":305,"column":279,"offset":9835},"indent":[]}}],"position":{"start":{"line":305,"column":3,"offset":9559},"end":{"line":305,"column":279,"offset":9835},"indent":[]}}],"position":{"start":{"line":305,"column":1,"offset":9557},"end":{"line":305,"column":279,"offset":9835},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Creating a Context Provider","position":{"start":{"line":307,"column":5,"offset":9841},"end":{"line":307,"column":32,"offset":9868},"indent":[]}}],"position":{"start":{"line":307,"column":1,"offset":9837},"end":{"line":307,"column":32,"offset":9868},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"React.createContext()","position":{"start":{"line":309,"column":1,"offset":9870},"end":{"line":309,"column":24,"offset":9893},"indent":[]}},{"type":"text","value":" will give you a ","position":{"start":{"line":309,"column":24,"offset":9893},"end":{"line":309,"column":41,"offset":9910},"indent":[]}},{"type":"inlineCode","value":"Provider","position":{"start":{"line":309,"column":41,"offset":9910},"end":{"line":309,"column":51,"offset":9920},"indent":[]}},{"type":"text","value":" and a ","position":{"start":{"line":309,"column":51,"offset":9920},"end":{"line":309,"column":58,"offset":9927},"indent":[]}},{"type":"inlineCode","value":"Consumer","position":{"start":{"line":309,"column":58,"offset":9927},"end":{"line":309,"column":68,"offset":9937},"indent":[]}},{"type":"text","value":". If you use hooks, you might be able to get away without using the consumer.","position":{"start":{"line":309,"column":68,"offset":9937},"end":{"line":309,"column":145,"offset":10014},"indent":[]}}],"position":{"start":{"line":309,"column":1,"offset":9870},"end":{"line":309,"column":145,"offset":10014},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import React from 'react';\n\nconst SuperCoolContext = React.createContext();\n\nSuperCoolContext.Provider;\nSuperCoolContext.Consumer;\n\n// in use (this uses the Render Prop pattern)\nconst App = () => (\n  <SuperCoolContext.Provider value={0}>\n    <SuperCoolContext.Consumer>\n      {value => <p>{value}</p>}\n    </SuperCoolContext.Consumer>\n  </SuperCoolContext.Provider>\n);","position":{"start":{"line":311,"column":1,"offset":10016},"end":{"line":327,"column":4,"offset":10402},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The example given ends up pulling all the reducer actions into a ","position":{"start":{"line":329,"column":1,"offset":10404},"end":{"line":329,"column":66,"offset":10469},"indent":[]}},{"type":"inlineCode","value":"GrudgeContext.js","position":{"start":{"line":329,"column":66,"offset":10469},"end":{"line":329,"column":84,"offset":10487},"indent":[]}},{"type":"text","value":" file with the reducer.","position":{"start":{"line":329,"column":84,"offset":10487},"end":{"line":329,"column":107,"offset":10510},"indent":[]}}],"position":{"start":{"line":329,"column":1,"offset":10404},"end":{"line":329,"column":107,"offset":10510},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import React, { useReducer, createContext, useCallback } from 'react';\nimport initialState from './initialState';\nimport id from 'uuid/v4';\n\nexport const GrudgeContext = createContext();\n\nconst GRUDGE_ADD = 'GRUDGE_ADD';\nconst GRUDGE_FORGIVE = 'GRUDGE_FORGIVE';\n\nconst reducer = (state = [], action) => {\n  if (action.type === GRUDGE_ADD) {\n    return [\n      {\n        id: id(),\n        ...action.payload,\n      },\n      ...state,\n    ];\n  }\n\n  if (action.type === GRUDGE_FORGIVE) {\n    return state.map(grudge => {\n      if (grudge.id === action.payload.id) {\n        return { ...grudge, forgiven: !grudge.forgiven };\n      }\n      return grudge;\n    });\n  }\n\n  return state;\n};\n\nexport const GrudgeProvider = ({ children }) => {\n  const [grudges, dispatch] = useReducer(reducer, initialState);\n\n  const addGrudge = useCallback(\n    ({ person, reason }) => {\n      dispatch({\n        type: GRUDGE_ADD,\n        payload: {\n          person,\n          reason,\n        },\n      });\n    },\n    [dispatch],\n  );\n\n  const toggleForgiveness = useCallback(\n    id => {\n      dispatch({\n        type: GRUDGE_FORGIVE,\n        payload: {\n          id,\n        },\n      });\n    },\n    [dispatch],\n  );\n\n  return (\n    <GrudgeContext.Provider value={{ grudges, addGrudge, toggleForgiveness }}>\n      {children}\n    </GrudgeContext.Provider>\n  );\n};","position":{"start":{"line":331,"column":1,"offset":10512},"end":{"line":398,"column":4,"offset":11866},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And so the demo ","position":{"start":{"line":400,"column":1,"offset":11868},"end":{"line":400,"column":17,"offset":11884},"indent":[]}},{"type":"inlineCode","value":"Application.js","position":{"start":{"line":400,"column":17,"offset":11884},"end":{"line":400,"column":33,"offset":11900},"indent":[]}},{"type":"text","value":" file becomes slim:","position":{"start":{"line":400,"column":33,"offset":11900},"end":{"line":400,"column":52,"offset":11919},"indent":[]}}],"position":{"start":{"line":400,"column":1,"offset":11868},"end":{"line":400,"column":52,"offset":11919},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import React from 'react';\n\nimport Grudges from './Grudges';\nimport NewGrudge from './NewGrudge';\n\nconst Application = () => {\n  return (\n    <div className=\"Application\">\n      <NewGrudge />\n      <Grudges />\n    </div>\n  );\n};\n\nexport default Application;","position":{"start":{"line":402,"column":1,"offset":11921},"end":{"line":418,"column":4,"offset":12196},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now we can update the ","position":{"start":{"line":420,"column":1,"offset":12198},"end":{"line":420,"column":23,"offset":12220},"indent":[]}},{"type":"inlineCode","value":"Grudges.js","position":{"start":{"line":420,"column":23,"offset":12220},"end":{"line":420,"column":35,"offset":12232},"indent":[]}},{"type":"text","value":" list:","position":{"start":{"line":420,"column":35,"offset":12232},"end":{"line":420,"column":41,"offset":12238},"indent":[]}}],"position":{"start":{"line":420,"column":1,"offset":12198},"end":{"line":420,"column":41,"offset":12238},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import React from 'react';\nimport Grudge from './Grudge';\nimport { GrudgeContext } from './GrudgeContext';\n\nconst Grudges = () => {\n  const { grudges } = React.useContext(GrudgeContext);\n\n  return (\n    <section className=\"Grudges\">\n      <h2>Grudges ({grudges.length})</h2>\n      {grudges.map(grudge => (\n        <Grudge key={grudge.id} grudge={grudge} />\n      ))}\n    </section>\n  );\n};\n\nexport default Grudges;","position":{"start":{"line":422,"column":1,"offset":12240},"end":{"line":441,"column":4,"offset":12672},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And finally update the individual grudges:","position":{"start":{"line":443,"column":1,"offset":12674},"end":{"line":443,"column":43,"offset":12716},"indent":[]}}],"position":{"start":{"line":443,"column":1,"offset":12674},"end":{"line":443,"column":43,"offset":12716},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import React from 'react';\nimport { GrudgeContext } from './GrudgeContext';\n\nconst Grudge = ({ grudge }) => {\n  const { toggleForgiveness } = React.useContext(GrudgeContext);\n\n  return (\n    <article className=\"Grudge\">\n      <h3>{grudge.person}</h3>\n      <p>{grudge.reason}</p>\n      <div className=\"Grudge-controls\">\n        <label className=\"Grudge-forgiven\">\n          <input\n            type=\"checkbox\"\n            checked={grudge.forgiven}\n            onChange={() => toggleForgiveness(grudge.id)}\n          />{' '}\n          Forgiven\n        </label>\n      </div>\n    </article>\n  );\n};\n\nexport default Grudge;","position":{"start":{"line":445,"column":1,"offset":12718},"end":{"line":471,"column":4,"offset":13354},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice that we are losing some of the optimisations that we made here + the ability to unit test smaller parts.","position":{"start":{"line":473,"column":1,"offset":13356},"end":{"line":473,"column":112,"offset":13467},"indent":[]}}],"position":{"start":{"line":473,"column":1,"offset":13356},"end":{"line":473,"column":112,"offset":13467},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When it comes to testing, you now need to pass the a provider. You can use the ","position":{"start":{"line":475,"column":1,"offset":13469},"end":{"line":475,"column":80,"offset":13548},"indent":[]}},{"type":"inlineCode","value":"container","position":{"start":{"line":475,"column":80,"offset":13548},"end":{"line":475,"column":91,"offset":13559},"indent":[]}},{"type":"text","value":" pattern or ","position":{"start":{"line":475,"column":91,"offset":13559},"end":{"line":475,"column":103,"offset":13571},"indent":[]}},{"type":"inlineCode","value":"HOC","position":{"start":{"line":475,"column":103,"offset":13571},"end":{"line":475,"column":108,"offset":13576},"indent":[]}},{"type":"text","value":" pattern to \"hug\" these changes to help.","position":{"start":{"line":475,"column":108,"offset":13576},"end":{"line":475,"column":148,"offset":13616},"indent":[]}}],"position":{"start":{"line":475,"column":1,"offset":13469},"end":{"line":475,"column":148,"offset":13616},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Data Fetching","position":{"start":{"line":477,"column":4,"offset":13621},"end":{"line":477,"column":17,"offset":13634},"indent":[]}}],"position":{"start":{"line":477,"column":1,"offset":13618},"end":{"line":477,"column":17,"offset":13634},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The question is whether or not we need to bring in any heavy-weight tools into our application like RxJS etc to help cancel and debounce API calls etc.","position":{"start":{"line":479,"column":1,"offset":13636},"end":{"line":479,"column":152,"offset":13787},"indent":[]}}],"position":{"start":{"line":479,"column":1,"offset":13636},"end":{"line":479,"column":152,"offset":13787},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Creating a custom hook for a fetch:","position":{"start":{"line":481,"column":1,"offset":13789},"end":{"line":481,"column":36,"offset":13824},"indent":[]}}],"position":{"start":{"line":481,"column":1,"offset":13789},"end":{"line":481,"column":36,"offset":13824},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const useFetch = url => {\n  const [response, setResponse] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    console.log('Fetching');\n\n    setLoading(true);\n    setError(null);\n    setResponse(null);\n\n    fetch(url)\n      .then(response => response.json())\n      .then(response => {\n        setResponse(response);\n        setLoading(false);\n      })\n      .catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n  }, [url]);\n\n  return [response, loading, error];\n};","position":{"start":{"line":483,"column":1,"offset":13826},"end":{"line":510,"column":4,"offset":14417},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Refactoring to a reducer","position":{"start":{"line":512,"column":5,"offset":14423},"end":{"line":512,"column":29,"offset":14447},"indent":[]}}],"position":{"start":{"line":512,"column":1,"offset":14419},"end":{"line":512,"column":29,"offset":14447},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Something that is important here is that we are handling cases for:","position":{"start":{"line":514,"column":1,"offset":14449},"end":{"line":514,"column":68,"offset":14516},"indent":[]}}],"position":{"start":{"line":514,"column":1,"offset":14449},"end":{"line":514,"column":68,"offset":14516},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Fetching","position":{"start":{"line":516,"column":4,"offset":14521},"end":{"line":516,"column":12,"offset":14529},"indent":[]}}],"position":{"start":{"line":516,"column":4,"offset":14521},"end":{"line":516,"column":12,"offset":14529},"indent":[]}}],"position":{"start":{"line":516,"column":1,"offset":14518},"end":{"line":516,"column":12,"offset":14529},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Complete response","position":{"start":{"line":517,"column":4,"offset":14533},"end":{"line":517,"column":21,"offset":14550},"indent":[]}}],"position":{"start":{"line":517,"column":4,"offset":14533},"end":{"line":517,"column":21,"offset":14550},"indent":[]}}],"position":{"start":{"line":517,"column":1,"offset":14530},"end":{"line":517,"column":21,"offset":14550},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Errors","position":{"start":{"line":518,"column":4,"offset":14554},"end":{"line":518,"column":10,"offset":14560},"indent":[]}}],"position":{"start":{"line":518,"column":4,"offset":14554},"end":{"line":518,"column":10,"offset":14560},"indent":[]}}],"position":{"start":{"line":518,"column":1,"offset":14551},"end":{"line":518,"column":10,"offset":14560},"indent":[]}}],"position":{"start":{"line":516,"column":1,"offset":14518},"end":{"line":518,"column":10,"offset":14560},"indent":[1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"const fetchReducer = (state, action) => {\n  if (action.type === 'FETCHING') {\n    return {\n      result: null,\n      loading: true,\n      error: null,\n    };\n  }\n\n  if (action.type === 'RESPONSE_COMPLETE') {\n    return {\n      result: action.payload.result,\n      loading: false,\n      error: null,\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      result: null,\n      loading: false,\n      error: action.payload.error,\n    };\n  }\n\n  return state;\n};","position":{"start":{"line":520,"column":1,"offset":14562},"end":{"line":548,"column":4,"offset":15044},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now we can dispatch actions.","position":{"start":{"line":550,"column":1,"offset":15046},"end":{"line":550,"column":29,"offset":15074},"indent":[]}}],"position":{"start":{"line":550,"column":1,"offset":15046},"end":{"line":550,"column":29,"offset":15074},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const useFetch = (url, dependencies = [], formatResponse = () => {}) => {\n  const [state, dispatch] = useReducer(fetchReducer, initialState);\n\n  useEffect(() => {\n    dispatch({ type: 'FETCHING' });\n    fetch(url)\n      .then(response => response.json())\n      .then(response => {\n        dispatch({\n          type: 'RESPONSE_COMPLETE',\n          payload: { result: formatResponse(response) },\n        });\n      })\n      .catch(error => {\n        dispatch({ type: 'ERROR', payload: { error } });\n      });\n  }, [url, formatResponse]);\n\n  const { result, loading, error } = state;\n\n  return [result, loading, error];\n};","position":{"start":{"line":552,"column":1,"offset":15076},"end":{"line":575,"column":4,"offset":15712},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Thunks","position":{"start":{"line":577,"column":4,"offset":15717},"end":{"line":577,"column":10,"offset":15723},"indent":[]}}],"position":{"start":{"line":577,"column":1,"offset":15714},"end":{"line":577,"column":10,"offset":15723},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Something we get in Redux is middleware. The reducer itself does not have an idea of asynchonity. It is genuinely other calls that force the async. Redux uses this thing called a ","position":{"start":{"line":579,"column":1,"offset":15725},"end":{"line":579,"column":180,"offset":15904},"indent":[]}},{"type":"inlineCode","value":"thunk","position":{"start":{"line":579,"column":180,"offset":15904},"end":{"line":579,"column":187,"offset":15911},"indent":[]}},{"type":"text","value":". In normal reducers, we dispatch actions. A thunk itself is a function returned from another function.","position":{"start":{"line":579,"column":187,"offset":15911},"end":{"line":579,"column":290,"offset":16014},"indent":[]}}],"position":{"start":{"line":579,"column":1,"offset":15725},"end":{"line":579,"column":290,"offset":16014},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function definitelyNotAThunk() {\n  return function aThunk() {\n    console.log('Hello I am a think.');\n  };\n}","position":{"start":{"line":581,"column":1,"offset":16016},"end":{"line":587,"column":4,"offset":16142},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"useThunkReducer","position":{"start":{"line":589,"column":5,"offset":16148},"end":{"line":589,"column":20,"offset":16163},"indent":[]}}],"position":{"start":{"line":589,"column":1,"offset":16144},"end":{"line":589,"column":20,"offset":16163},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using this allows us to separate the function from the UI and tells the reducer that does know stuff how to do it.","position":{"start":{"line":591,"column":1,"offset":16165},"end":{"line":591,"column":115,"offset":16279},"indent":[]}}],"position":{"start":{"line":591,"column":1,"offset":16165},"end":{"line":591,"column":115,"offset":16279},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"useThunkReducer = (reducer, initialState) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const enchancedDispatch = React.useCallback(action => {\n    // example uses Lodash isFunction\n    if (isFunction(action)) {\n      action(dispatch);\n    } else {\n      dispatch(action);\n    }\n  }, [dispatch]);\n\n  return [state, enchancedDispatch];\n};\n\n// in application\nconst fetchCharacters = dispatch => {\n  fetch(endpoint)\n    .then(res => res.json())\n    .then(res => dispatch({ type: 'RES_COMPLETE' }));\n};\n\nconst Application = () => {\n  const [state, dispatch] = useThunkReducer(reducer, initialState);\n\n  // If we want it on load\n  // useEffect(() => {\n  //   dispatch(fetchCharacters)\n  // }, []);\n\n  render() {\n    return (<button onClick={() => dispatch(fetchCharacters)}>Click</button>)\n  }\n};","position":{"start":{"line":593,"column":1,"offset":16281},"end":{"line":628,"column":4,"offset":17115},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Something worth noting here is that Steve mentions that some of the previous performance optimisations that we lost prior can actually be tweaked with react-redux.","position":{"start":{"line":630,"column":3,"offset":17119},"end":{"line":630,"column":166,"offset":17282},"indent":[]}}],"position":{"start":{"line":630,"column":3,"offset":17119},"end":{"line":630,"column":166,"offset":17282},"indent":[]}}],"position":{"start":{"line":630,"column":1,"offset":17117},"end":{"line":630,"column":166,"offset":17282},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Routing & Thunks","position":{"start":{"line":632,"column":4,"offset":17287},"end":{"line":632,"column":20,"offset":17303},"indent":[]}}],"position":{"start":{"line":632,"column":1,"offset":17284},"end":{"line":632,"column":20,"offset":17303},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This section talks to the perils of ","position":{"start":{"line":634,"column":1,"offset":17305},"end":{"line":634,"column":37,"offset":17341},"indent":[]}},{"type":"inlineCode","value":"useEffect","position":{"start":{"line":634,"column":37,"offset":17341},"end":{"line":634,"column":48,"offset":17352},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":634,"column":48,"offset":17352},"end":{"line":634,"column":53,"offset":17357},"indent":[]}},{"type":"inlineCode","value":"dispatch","position":{"start":{"line":634,"column":53,"offset":17357},"end":{"line":634,"column":63,"offset":17367},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":634,"column":63,"offset":17367},"end":{"line":634,"column":64,"offset":17368},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/stevekinney/star-wars-characters-react-state#the-perils-of-useeffect-and-dependencies","children":[{"type":"text","value":"found here","position":{"start":{"line":634,"column":65,"offset":17369},"end":{"line":634,"column":75,"offset":17379},"indent":[]}}],"position":{"start":{"line":634,"column":64,"offset":17368},"end":{"line":634,"column":182,"offset":17486},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":634,"column":182,"offset":17486},"end":{"line":634,"column":183,"offset":17487},"indent":[]}}],"position":{"start":{"line":634,"column":1,"offset":17305},"end":{"line":634,"column":183,"offset":17487},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For React Router, we have perils to be careful of with the dependencies:","position":{"start":{"line":636,"column":1,"offset":17489},"end":{"line":636,"column":73,"offset":17561},"indent":[]}}],"position":{"start":{"line":636,"column":1,"offset":17489},"end":{"line":636,"column":73,"offset":17561},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const CharacterView = ({ match }) => {\n  const [character, setCharacter] = useState({});\n\n  useEffect(() => {\n    fetch(endpoint + '/characters/' + match.params.id)\n      .then(response => response.json())\n      .then(response => setCharacter(response.character))\n      .catch(console.error);\n  }, [match.params.id]);\n\n  // ...\n};","position":{"start":{"line":638,"column":1,"offset":17563},"end":{"line":651,"column":4,"offset":17911},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":654,"column":1,"offset":17914},"end":{"line":654,"column":31,"offset":17944},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":654,"column":31,"offset":17944}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"state-management-in-pure-react\"\n    }}>{`State Management in Pure React`}</h1>\n    <p>{`This course looks deep into understanding state, the inner workings of `}<inlineCode parentName=\"p\">{`this.setState`}</inlineCode>{`, exploring APIs to navigate around prop-drilling, reducers for advanced state management, write custom hooks, store state in local storage, store state in URL query params and fetch from a server.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/pure-react-state/\"\n        }}>{`FE Masters Course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://speakerdeck.com/stevekinney/react-state\"\n        }}>{`Slides`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stevekinney/react-state-management\"\n        }}>{`GitHub resource for course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stevekinney/grudges-react-state\"\n        }}>{`Github code for Grude list`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stevekinney/star-wars-characters-react-state\"\n        }}>{`Star Wars character state`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://nikgraf.github.io/react-hooks/\"\n        }}>{`Collection of React Hooks`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"types-of-state\"\n    }}>{`Types of State`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Model data: nouns in application`}</li>\n      <li parentName=\"ol\">{`View/UI state: Are those nouns sorted in ascending or descending order?`}</li>\n      <li parentName=\"ol\">{`Session state: Is the user logged in?`}</li>\n      <li parentName=\"ol\">{`Communication: Are we in the process of fetching the nouns from the server?`}</li>\n      <li parentName=\"ol\">{`Location: Where are we in the application? Which nouns are we looking at?`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"setstate--class\"\n    }}>{`setState & Class`}</h2>\n    <p>{`This warm up just looks at the old `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` with class components that we know.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nimport './styles.scss';\n\nclass Application extends Component {\n  state = { count: 0 };\n\n  increment = () => {\n    this.setState({\n      count: this.state.count + 1,\n    });\n  };\n\n  decrement = () => {\n    this.setState({\n      count: this.state.count - 1,\n    });\n  };\n\n  render() {\n    const { count } = this.state;\n\n    return (\n      <main className=\"Counter\">\n        <p className=\"count\">{count}</p>\n        <section className=\"controls\">\n          <button onClick={this.increment}>Increment</button>\n          <button onClick={this.decrement}>Decrement</button>\n        </section>\n      </main>\n    );\n  }\n}\n\nrender(<Application />, document.getElementById('root'));\n`}</code></pre>\n    <p>{`While different when it comes to hooks, React will batch up `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` calls to avoid unnecessary re-renders.`}</p>\n    <p><inlineCode parentName=\"p\">{`setState`}</inlineCode>{` also runs asynchronously - important to know!`}</p>\n    <p><inlineCode parentName=\"p\">{`setState`}</inlineCode>{` also allows you to pass in a function that enables you to ensure there is no batching. That function can take arguments `}<inlineCode parentName=\"p\">{`(state, props)`}</inlineCode>{`. This helps us to abstract functions that can reused everywhere.`}</p>\n    <p>{`Finally, there is a callback that you can pass as a second argument to `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` that allows you to fire a function after the change. This is useful for when you are breaking encapsulation or need to pass data back to a parent after the change.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Fun tidbit that came up is that arrow function methods are not supported natively without a Babel plugin.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"setstate-patterns-and-anti-patterns\"\n    }}>{`setState Patterns and Anti-Patterns`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Setting initial state by combining two different props - just add props as you need them.`}</li>\n      <li parentName=\"ol\">{`Don't use state for things that won't be rendered - example was this constantly polled endpoint.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"hooks-state\"\n    }}>{`Hooks State`}</h2>\n    <p>{`This gives a way to manipulate state in functional components. With this we don't have to worry about event binding. This is not disimilar to `}<inlineCode parentName=\"p\">{`setState`}</inlineCode>{` asynchronous call.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const [count, setCount] = React.useState(0);\n\nconst increment = () => setCount(count + 1);\nconst decrement = () => setCount(count - 1);\nconst reset = () => setCount(0);\n`}</code></pre>\n    <p>{`We can also take a function for this ie `}<inlineCode parentName=\"p\">{`setCount(c => c + 1)`}</inlineCode>{`. This does not get a prop as a second argument. That means we can still pull out the function as long as we don't need access to props.`}</p>\n    <p>{`Here, we also need to pass something tangible back ie no `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` returns from the callback.`}</p>\n    <p>{`We don't have a callback, but we can now use `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` as a replacement.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const [count, setCount] = React.useState(0);\n\nconst increment = () => setCount(count + 1);\nconst decrement = () => setCount(count - 1);\nconst reset = () => setCount(0);\n\nuseEffect(() => {\n  document.title = \\`Counter: \\${count}\\`;\n}, [count]);\n\n// this second effect is an example of an effect for local storage\nuseEffect(() => {\n  storeStateInLocalStorage(count);\n}, count);\n`}</code></pre>\n    <p>{`Note: if you don't give `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` a second parameter, it will run on every render.`}</p>\n    <p>{`If you give one, it gives dependencies where the effect will only run when there is a change to the dependency.`}</p>\n    <h3 {...{\n      \"id\": \"making-an-hooks-abstraction\"\n    }}>{`Making an hooks abstraction`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// this is an abstraction for React.useState\nconst useLocalStorage = (initialState, key) => {\n  const get = () => {\n    const storage = localStorage.getItem('counterState');\n    if (storage) return JSON.parse(storage)[key];\n    return initialState;\n  };\n\n  const [value, setValue] = useState(get());\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify({ value }));\n  }, value);\n\n  return [value, setValue];\n};\n`}</code></pre>\n    <p>{`This makes things a bit more useable across the app:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const Counter = () => {\n  const [count, setCount] = useLocalStorage(0, 'count');\n  // Rest removed for brevity\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"persisting-state--useref\"\n    }}>{`Persisting State & useRef`}</h2>\n    <p>{`In the case of the function components, we have a unique call of the function each time which will give a different copy of the state and props.`}</p>\n    <p>{`Using a reference is a way for us to persist a previous value in our function components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const Counter = () => {\n  const [count, setCount] = useLocalStorage(0, 'count');\n  const countRef = React.useRef();\n\n  let message = '';\n  if (countRef.current < count) message = 'Higher';\n  if (countRef.current > count) message = 'Lower';\n\n  // the only way to update the current reference\n  countRef.current = count;\n  // Rest removed for brevity\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"useeffect--cleanup\"\n    }}>{`useEffect & Cleanup`}</h2>\n    <p>{`In this example, we see that there is always a new interval called when the useEffect runs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`useEffect(() => {\n  setInterval(() => {\n    console.log(\\`Count: \\${count}\\`);\n  }, 1000);\n}, [count]);\n`}</code></pre>\n    <p>{`The above has no cleanups. No bueno. Those suttle things will come to bite us. To avoid this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`useEffect(() => {\n  const id = setInterval(() => {\n    console.log(\\`Count: \\${count}\\`);\n  }, 1000);\n  // this will give a callback where we can cleanup\n  // after itself for each effect\n  return () => clearInterval(id);\n}, [count]);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reducers\"\n    }}>{`Reducers`}</h2>\n    <p>{`React these days have a `}<inlineCode parentName=\"p\">{`useReducer`}</inlineCode>{` which takes a simplified version of what Redux does.`}</p>\n    <p>{`React state needs immutable objects everytime. If you mutate an object or array, it is the same object in memory - React can't tell the difference. We know this already from the prominent use of passing new arrays and objects with the spread operator.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The example used is what happens when we update parent state for one child and all the children re-rendering needlessly.`}</p>\n    </blockquote>\n    <p>{`A `}<inlineCode parentName=\"p\">{`reducer`}</inlineCode>{` is a function that takes two arguments. It takes two arguments: 1. The current state of the world (state) and 2. The thing that happened (action).`}</p>\n    <p>{`It takes these two things and pipes out a resolved new state of the world.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const initialState = {};\n\nconst reducer = (state, action) => {\n  if (action.type === TYPE) {\n    // this assumes state is just an array for a list etc\n    return [action.payload, ...state];\n  }\n  return state;\n};\n\n// code to run\nconst Component = () => {\n  const [dataNamedWhatever, dispatch] = useReducer(reducer, initialState);\n  const actionToDo = mutation => {\n    dispatch({\n      type: TYPE,\n      payload: mutation,\n    });\n  };\n};\n`}</code></pre>\n    <p>{`The benefit of this is that is becomes super easy to unit test. This means we don't need to worry about mounting components to do so.`}</p>\n    <p>{`Steve mentions that his preference is to not use a switch statement.`}</p>\n    <h2 {...{\n      \"id\": \"reactmemo--usecallback\"\n    }}>{`React.memo & useCallback`}</h2>\n    <p>{`At this point, what we want to do is tell React not to rerender if nothing has changed.`}</p>\n    <p><inlineCode parentName=\"p\">{`React.memo`}</inlineCode>{` simply takes a function component, and if it has the same props, simply don't rerender it.`}</p>\n    <p>{`We also have `}<inlineCode parentName=\"p\">{`useCallback`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`useMemo`}</inlineCode>{`.`}</p>\n    <p><inlineCode parentName=\"p\">{`useMemo`}</inlineCode>{` will call a function and if the dependencies haven't changed, it will not call the function again.`}</p>\n    <p><inlineCode parentName=\"p\">{`useCallback`}</inlineCode>{` will give you a new memoized function that you can call. It changes only if one the dependencies has changed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const initialState = {};\n\nconst reducer = (state, action) => {\n  if (action.type === TYPE) {\n    // this assumes state is just an array for a list etc\n    return [action.payload, ...state];\n  }\n  return state;\n};\n\n// code to run\nconst Component = () => {\n  const [dataNamedWhatever, dispatch] = useReducer(reducer, initialState);\n  const actionToDo = mutation => {\n    dispatch({\n      type: TYPE,\n      payload: mutation,\n    });\n  };\n};\n`}</code></pre>\n    <p>{`If we wrap our `}<inlineCode parentName=\"p\">{`NewGrudge`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`React.memo`}</inlineCode>{`, then it will check`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const Component = () => {\n  const [dataNamedWhatever, dispatch] = useReducer(reducer, initialState);\n  // this changes to make sure the function is memoized and only changes\n  // if value of \"mutation\" changes\n  const actionToDo = useCallback(\n    mutation => {\n      dispatch({\n        type: TYPE,\n        payload: mutation,\n      });\n    },\n    [dispatch],\n  );\n};\n\nconst List = React.memo(({ onSubmit }) => {\n  // rest of code\n});\n`}</code></pre>\n    <p>{`If we get the same function every time, we don't really need to rerender. This works because now our `}<inlineCode parentName=\"p\">{`useCallback`}</inlineCode>{` only depends on `}<inlineCode parentName=\"p\">{`dispatch`}</inlineCode>{` and not the `}<inlineCode parentName=\"p\">{`mutation`}</inlineCode>{` value.`}</p>\n    <h2 {...{\n      \"id\": \"prop-drilling--context-api\"\n    }}>{`Prop Drilling & Context API`}</h2>\n    <p>{`The aim of Context API is to be \"hey, I want the state to be available around the place so that I can hook into\".`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`An interesting question that come up about Redux out of the box. Redux comes with middleware out of the box, `}<inlineCode parentName=\"p\">{`useReducer`}</inlineCode>{` does not. Redux has `}<inlineCode parentName=\"p\">{`combinedReducers`}</inlineCode>{`, others do not. The tradeoff is with you need them and whether you use what you write vs what is battle tested etc.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"creating-a-context-provider\"\n    }}>{`Creating a Context Provider`}</h3>\n    <p><inlineCode parentName=\"p\">{`React.createContext()`}</inlineCode>{` will give you a `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`Consumer`}</inlineCode>{`. If you use hooks, you might be able to get away without using the consumer.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\n\nconst SuperCoolContext = React.createContext();\n\nSuperCoolContext.Provider;\nSuperCoolContext.Consumer;\n\n// in use (this uses the Render Prop pattern)\nconst App = () => (\n  <SuperCoolContext.Provider value={0}>\n    <SuperCoolContext.Consumer>\n      {value => <p>{value}</p>}\n    </SuperCoolContext.Consumer>\n  </SuperCoolContext.Provider>\n);\n`}</code></pre>\n    <p>{`The example given ends up pulling all the reducer actions into a `}<inlineCode parentName=\"p\">{`GrudgeContext.js`}</inlineCode>{` file with the reducer.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React, { useReducer, createContext, useCallback } from 'react';\nimport initialState from './initialState';\nimport id from 'uuid/v4';\n\nexport const GrudgeContext = createContext();\n\nconst GRUDGE_ADD = 'GRUDGE_ADD';\nconst GRUDGE_FORGIVE = 'GRUDGE_FORGIVE';\n\nconst reducer = (state = [], action) => {\n  if (action.type === GRUDGE_ADD) {\n    return [\n      {\n        id: id(),\n        ...action.payload,\n      },\n      ...state,\n    ];\n  }\n\n  if (action.type === GRUDGE_FORGIVE) {\n    return state.map(grudge => {\n      if (grudge.id === action.payload.id) {\n        return { ...grudge, forgiven: !grudge.forgiven };\n      }\n      return grudge;\n    });\n  }\n\n  return state;\n};\n\nexport const GrudgeProvider = ({ children }) => {\n  const [grudges, dispatch] = useReducer(reducer, initialState);\n\n  const addGrudge = useCallback(\n    ({ person, reason }) => {\n      dispatch({\n        type: GRUDGE_ADD,\n        payload: {\n          person,\n          reason,\n        },\n      });\n    },\n    [dispatch],\n  );\n\n  const toggleForgiveness = useCallback(\n    id => {\n      dispatch({\n        type: GRUDGE_FORGIVE,\n        payload: {\n          id,\n        },\n      });\n    },\n    [dispatch],\n  );\n\n  return (\n    <GrudgeContext.Provider value={{ grudges, addGrudge, toggleForgiveness }}>\n      {children}\n    </GrudgeContext.Provider>\n  );\n};\n`}</code></pre>\n    <p>{`And so the demo `}<inlineCode parentName=\"p\">{`Application.js`}</inlineCode>{` file becomes slim:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\n\nimport Grudges from './Grudges';\nimport NewGrudge from './NewGrudge';\n\nconst Application = () => {\n  return (\n    <div className=\"Application\">\n      <NewGrudge />\n      <Grudges />\n    </div>\n  );\n};\n\nexport default Application;\n`}</code></pre>\n    <p>{`Now we can update the `}<inlineCode parentName=\"p\">{`Grudges.js`}</inlineCode>{` list:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport Grudge from './Grudge';\nimport { GrudgeContext } from './GrudgeContext';\n\nconst Grudges = () => {\n  const { grudges } = React.useContext(GrudgeContext);\n\n  return (\n    <section className=\"Grudges\">\n      <h2>Grudges ({grudges.length})</h2>\n      {grudges.map(grudge => (\n        <Grudge key={grudge.id} grudge={grudge} />\n      ))}\n    </section>\n  );\n};\n\nexport default Grudges;\n`}</code></pre>\n    <p>{`And finally update the individual grudges:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport { GrudgeContext } from './GrudgeContext';\n\nconst Grudge = ({ grudge }) => {\n  const { toggleForgiveness } = React.useContext(GrudgeContext);\n\n  return (\n    <article className=\"Grudge\">\n      <h3>{grudge.person}</h3>\n      <p>{grudge.reason}</p>\n      <div className=\"Grudge-controls\">\n        <label className=\"Grudge-forgiven\">\n          <input\n            type=\"checkbox\"\n            checked={grudge.forgiven}\n            onChange={() => toggleForgiveness(grudge.id)}\n          />{' '}\n          Forgiven\n        </label>\n      </div>\n    </article>\n  );\n};\n\nexport default Grudge;\n`}</code></pre>\n    <p>{`Notice that we are losing some of the optimisations that we made here + the ability to unit test smaller parts.`}</p>\n    <p>{`When it comes to testing, you now need to pass the a provider. You can use the `}<inlineCode parentName=\"p\">{`container`}</inlineCode>{` pattern or `}<inlineCode parentName=\"p\">{`HOC`}</inlineCode>{` pattern to \"hug\" these changes to help.`}</p>\n    <h2 {...{\n      \"id\": \"data-fetching\"\n    }}>{`Data Fetching`}</h2>\n    <p>{`The question is whether or not we need to bring in any heavy-weight tools into our application like RxJS etc to help cancel and debounce API calls etc.`}</p>\n    <p>{`Creating a custom hook for a fetch:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const useFetch = url => {\n  const [response, setResponse] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    console.log('Fetching');\n\n    setLoading(true);\n    setError(null);\n    setResponse(null);\n\n    fetch(url)\n      .then(response => response.json())\n      .then(response => {\n        setResponse(response);\n        setLoading(false);\n      })\n      .catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n  }, [url]);\n\n  return [response, loading, error];\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"refactoring-to-a-reducer\"\n    }}>{`Refactoring to a reducer`}</h3>\n    <p>{`Something that is important here is that we are handling cases for:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Fetching`}</li>\n      <li parentName=\"ol\">{`Complete response`}</li>\n      <li parentName=\"ol\">{`Errors`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const fetchReducer = (state, action) => {\n  if (action.type === 'FETCHING') {\n    return {\n      result: null,\n      loading: true,\n      error: null,\n    };\n  }\n\n  if (action.type === 'RESPONSE_COMPLETE') {\n    return {\n      result: action.payload.result,\n      loading: false,\n      error: null,\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      result: null,\n      loading: false,\n      error: action.payload.error,\n    };\n  }\n\n  return state;\n};\n`}</code></pre>\n    <p>{`Now we can dispatch actions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const useFetch = (url, dependencies = [], formatResponse = () => {}) => {\n  const [state, dispatch] = useReducer(fetchReducer, initialState);\n\n  useEffect(() => {\n    dispatch({ type: 'FETCHING' });\n    fetch(url)\n      .then(response => response.json())\n      .then(response => {\n        dispatch({\n          type: 'RESPONSE_COMPLETE',\n          payload: { result: formatResponse(response) },\n        });\n      })\n      .catch(error => {\n        dispatch({ type: 'ERROR', payload: { error } });\n      });\n  }, [url, formatResponse]);\n\n  const { result, loading, error } = state;\n\n  return [result, loading, error];\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"thunks\"\n    }}>{`Thunks`}</h2>\n    <p>{`Something we get in Redux is middleware. The reducer itself does not have an idea of asynchonity. It is genuinely other calls that force the async. Redux uses this thing called a `}<inlineCode parentName=\"p\">{`thunk`}</inlineCode>{`. In normal reducers, we dispatch actions. A thunk itself is a function returned from another function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function definitelyNotAThunk() {\n  return function aThunk() {\n    console.log('Hello I am a think.');\n  };\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usethunkreducer\"\n    }}>{`useThunkReducer`}</h3>\n    <p>{`Using this allows us to separate the function from the UI and tells the reducer that does know stuff how to do it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`useThunkReducer = (reducer, initialState) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const enchancedDispatch = React.useCallback(action => {\n    // example uses Lodash isFunction\n    if (isFunction(action)) {\n      action(dispatch);\n    } else {\n      dispatch(action);\n    }\n  }, [dispatch]);\n\n  return [state, enchancedDispatch];\n};\n\n// in application\nconst fetchCharacters = dispatch => {\n  fetch(endpoint)\n    .then(res => res.json())\n    .then(res => dispatch({ type: 'RES_COMPLETE' }));\n};\n\nconst Application = () => {\n  const [state, dispatch] = useThunkReducer(reducer, initialState);\n\n  // If we want it on load\n  // useEffect(() => {\n  //   dispatch(fetchCharacters)\n  // }, []);\n\n  render() {\n    return (<button onClick={() => dispatch(fetchCharacters)}>Click</button>)\n  }\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Something worth noting here is that Steve mentions that some of the previous performance optimisations that we lost prior can actually be tweaked with react-redux.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"routing--thunks\"\n    }}>{`Routing & Thunks`}</h2>\n    <p>{`This section talks to the perils of `}<inlineCode parentName=\"p\">{`useEffect`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`dispatch`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/stevekinney/star-wars-characters-react-state#the-perils-of-useeffect-and-dependencies\"\n      }}>{`found here`}</a>{`.`}</p>\n    <p>{`For React Router, we have perils to be careful of with the dependencies:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const CharacterView = ({ match }) => {\n  const [character, setCharacter] = useState({});\n\n  useEffect(() => {\n    fetch(endpoint + '/characters/' + match.params.id)\n      .then(response => response.json())\n      .then(response => setCharacter(response.character))\n      .catch(console.error);\n  }, [match.params.id]);\n\n  // ...\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}