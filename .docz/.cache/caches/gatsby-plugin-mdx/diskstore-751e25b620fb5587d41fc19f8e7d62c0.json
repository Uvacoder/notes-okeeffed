{"expireTime":9007200867335903000,"key":"gatsby-plugin-mdx-entire-payload-361f69b7b85dcfef4a877b217d5154a2-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Scala Expressions and Functions","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":34,"offset":200},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":34,"offset":200},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As opposed to instructions, everything in Scala is considered an ","position":{"start":{"line":10,"column":1,"offset":202},"end":{"line":10,"column":66,"offset":267},"indent":[]}},{"type":"inlineCode","value":"expression","position":{"start":{"line":10,"column":66,"offset":267},"end":{"line":10,"column":78,"offset":279},"indent":[]}},{"type":"text","value":". Even if/else statements themselves in Scala are expressions.","position":{"start":{"line":10,"column":78,"offset":279},"end":{"line":10,"column":140,"offset":341},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":202},"end":{"line":10,"column":140,"offset":341},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"For Loops","position":{"start":{"line":12,"column":4,"offset":346},"end":{"line":12,"column":13,"offset":355},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":343},"end":{"line":12,"column":13,"offset":355},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For loops are not recommended in Scala. They return ","position":{"start":{"line":14,"column":1,"offset":357},"end":{"line":14,"column":53,"offset":409},"indent":[]}},{"type":"inlineCode","value":"Unit","position":{"start":{"line":14,"column":53,"offset":409},"end":{"line":14,"column":59,"offset":415},"indent":[]}},{"type":"text","value":" which in itself is equivalent to","position":{"start":{"line":14,"column":59,"offset":415},"end":{"line":14,"column":92,"offset":448},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":14,"column":92,"offset":448},"end":{"line":14,"column":98,"offset":454},"indent":[]}},{"type":"text","value":". This is the case for side effects - an intergral part of understanding Scala.","position":{"start":{"line":14,"column":98,"offset":454},"end":{"line":14,"column":177,"offset":533},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":357},"end":{"line":14,"column":177,"offset":533},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Code Blocks","position":{"start":{"line":16,"column":4,"offset":538},"end":{"line":16,"column":15,"offset":549},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":535},"end":{"line":16,"column":15,"offset":549},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note that if you write a code block, the last value in the code block is returned as the value.","position":{"start":{"line":18,"column":1,"offset":551},"end":{"line":18,"column":96,"offset":646},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":551},"end":{"line":18,"column":96,"offset":646},"indent":[]}},{"type":"code","lang":"scala","meta":null,"value":"val codeBlock = {\n    val a = 1\n    val b = 2\n\n    if(a < b) \"hi\" else \"bye\"\n}\n\nprintln(codeBlock)\n// evaluates to \"hi\"","position":{"start":{"line":20,"column":1,"offset":648},"end":{"line":30,"column":4,"offset":780},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples of Expressions and Side Effects","position":{"start":{"line":32,"column":4,"offset":785},"end":{"line":32,"column":44,"offset":825},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":782},"end":{"line":32,"column":44,"offset":825},"indent":[]}},{"type":"code","lang":"scala","meta":null,"value":"\"hello\" // type String\nprintln(\"hello\") // type Unit\n\n// type Boolean\nval a = {\n    2 < 3\n}\n\n// type Int value 10\nval b = {\n    if(a) 123 else 321\n    10\n}\n\n// c is of type Unit\nvar i = 0\nval c = while (i < 10) {\n    i += 1\n}","position":{"start":{"line":34,"column":1,"offset":827},"end":{"line":54,"column":4,"offset":1065},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Functions","position":{"start":{"line":56,"column":4,"offset":1070},"end":{"line":56,"column":13,"offset":1079},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1067},"end":{"line":56,"column":13,"offset":1079},"indent":[]}},{"type":"code","lang":"scala","meta":null,"value":"object Functions extends App {\n    // this works because we know everything is an expression\n    def functionExample(a: String, b: Int): String = a + \" \" + b\n\n    def parameterlessFunc(): Int = 42\n    println(parameterlessFunc())\n    // also valid in Scala to call func\n    println(parameterlessFunc)\n\n    def repeterFunc(a: String, n: Int): String  = {\n        if (n == 1) a\n        else a + repeterFunc(a, n-1)\n    }\n}","position":{"start":{"line":58,"column":1,"offset":1081},"end":{"line":73,"column":4,"offset":1514},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":76,"column":1,"offset":1517},"end":{"line":76,"column":31,"offset":1547},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":76,"column":31,"offset":1547}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"scala-expressions-and-functions\"\n    }}>{`Scala Expressions and Functions`}</h1>\n    <p>{`As opposed to instructions, everything in Scala is considered an `}<inlineCode parentName=\"p\">{`expression`}</inlineCode>{`. Even if/else statements themselves in Scala are expressions.`}</p>\n    <h2 {...{\n      \"id\": \"for-loops\"\n    }}>{`For Loops`}</h2>\n    <p>{`For loops are not recommended in Scala. They return `}<inlineCode parentName=\"p\">{`Unit`}</inlineCode>{` which in itself is equivalent to`}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`. This is the case for side effects - an intergral part of understanding Scala.`}</p>\n    <h2 {...{\n      \"id\": \"code-blocks\"\n    }}>{`Code Blocks`}</h2>\n    <p>{`Note that if you write a code block, the last value in the code block is returned as the value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`val codeBlock = {\n    val a = 1\n    val b = 2\n\n    if(a < b) \"hi\" else \"bye\"\n}\n\nprintln(codeBlock)\n// evaluates to \"hi\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples-of-expressions-and-side-effects\"\n    }}>{`Examples of Expressions and Side Effects`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`\"hello\" // type String\nprintln(\"hello\") // type Unit\n\n// type Boolean\nval a = {\n    2 < 3\n}\n\n// type Int value 10\nval b = {\n    if(a) 123 else 321\n    10\n}\n\n// c is of type Unit\nvar i = 0\nval c = while (i < 10) {\n    i += 1\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scala\"\n      }}>{`object Functions extends App {\n    // this works because we know everything is an expression\n    def functionExample(a: String, b: Int): String = a + \" \" + b\n\n    def parameterlessFunc(): Int = 42\n    println(parameterlessFunc())\n    // also valid in Scala to call func\n    println(parameterlessFunc)\n\n    def repeterFunc(a: String, n: Int): String  = {\n        if (n == 1) a\n        else a + repeterFunc(a, n-1)\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}