{"expireTime":9007200849425568000,"key":"gatsby-plugin-mdx-entire-payload-7d44caa9a1f703a16754d91fbfb10f3c-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Hardcore Functional Programming in JavaScrpt","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":47,"offset":213},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":47,"offset":213},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are notes taken from Frontend Masters course \"Hardcore Functional Programming in JavaScrpt\"","position":{"start":{"line":10,"column":1,"offset":215},"end":{"line":10,"column":98,"offset":312},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":215},"end":{"line":10,"column":98,"offset":312},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":12,"column":4,"offset":317},"end":{"line":12,"column":13,"offset":326},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":314},"end":{"line":12,"column":13,"offset":326},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://frontendmasters.com/courses/functional-javascript/introduction/","children":[{"type":"text","value":"Frontend Masters course","position":{"start":{"line":14,"column":5,"offset":332},"end":{"line":14,"column":28,"offset":355},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":331},"end":{"line":14,"column":102,"offset":429},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":331},"end":{"line":14,"column":102,"offset":429},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":328},"end":{"line":14,"column":102,"offset":429},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://docs.google.com/presentation/d/1WmIH538r0ubjW5zfKh43I1_Up4OnqQnNhICETyDnhSI/","children":[{"type":"text","value":"Course Slides","position":{"start":{"line":15,"column":5,"offset":434},"end":{"line":15,"column":18,"offset":447},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":433},"end":{"line":15,"column":105,"offset":534},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":433},"end":{"line":15,"column":105,"offset":534},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":430},"end":{"line":15,"column":105,"offset":534},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://ramdajs.com/","children":[{"type":"text","value":"RamdaJS","position":{"start":{"line":16,"column":5,"offset":539},"end":{"line":16,"column":12,"offset":546},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":538},"end":{"line":16,"column":35,"offset":569},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":538},"end":{"line":16,"column":35,"offset":569},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":535},"end":{"line":16,"column":35,"offset":569},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://baconjs.github.io/","children":[{"type":"text","value":"BaconJS","position":{"start":{"line":17,"column":5,"offset":574},"end":{"line":17,"column":12,"offset":581},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":573},"end":{"line":17,"column":41,"offset":610},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":573},"end":{"line":17,"column":41,"offset":610},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":570},"end":{"line":17,"column":41,"offset":610},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://baconjs.github.io/","children":[{"type":"text","value":"Fantasy IO","position":{"start":{"line":18,"column":5,"offset":615},"end":{"line":18,"column":15,"offset":625},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":614},"end":{"line":18,"column":44,"offset":654},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":614},"end":{"line":18,"column":44,"offset":654},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":611},"end":{"line":18,"column":44,"offset":654},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/DrBoolean/pointfree-fantasy","children":[{"type":"text","value":"Pointfree Fantasy - for mjoin, chain etc","position":{"start":{"line":19,"column":5,"offset":659},"end":{"line":19,"column":45,"offset":699},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":658},"end":{"line":19,"column":94,"offset":748},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":658},"end":{"line":19,"column":94,"offset":748},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":655},"end":{"line":19,"column":94,"offset":748},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/origamitower/folktale","children":[{"type":"text","value":"Folktale - Either monad","position":{"start":{"line":20,"column":5,"offset":753},"end":{"line":20,"column":28,"offset":776},"indent":[]}}],"position":{"start":{"line":20,"column":4,"offset":752},"end":{"line":20,"column":71,"offset":819},"indent":[]}}],"position":{"start":{"line":20,"column":4,"offset":752},"end":{"line":20,"column":71,"offset":819},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":749},"end":{"line":20,"column":71,"offset":819},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":328},"end":{"line":20,"column":71,"offset":819},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Introduction","position":{"start":{"line":22,"column":4,"offset":824},"end":{"line":22,"column":16,"offset":836},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":821},"end":{"line":22,"column":16,"offset":836},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"\"Separation and recognition\" - the soul of functional programming.","position":{"start":{"line":24,"column":3,"offset":840},"end":{"line":24,"column":69,"offset":906},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":840},"end":{"line":24,"column":69,"offset":906},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":838},"end":{"line":24,"column":69,"offset":906},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The symptoms:","position":{"start":{"line":26,"column":1,"offset":908},"end":{"line":26,"column":14,"offset":921},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":908},"end":{"line":26,"column":14,"offset":921},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Custom names","position":{"start":{"line":28,"column":4,"offset":926},"end":{"line":28,"column":16,"offset":938},"indent":[]}}],"position":{"start":{"line":28,"column":4,"offset":926},"end":{"line":28,"column":16,"offset":938},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":923},"end":{"line":28,"column":16,"offset":938},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Looping patterns","position":{"start":{"line":29,"column":4,"offset":942},"end":{"line":29,"column":20,"offset":958},"indent":[]}}],"position":{"start":{"line":29,"column":4,"offset":942},"end":{"line":29,"column":20,"offset":958},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":939},"end":{"line":29,"column":20,"offset":958},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Glue code","position":{"start":{"line":30,"column":4,"offset":962},"end":{"line":30,"column":13,"offset":971},"indent":[]}}],"position":{"start":{"line":30,"column":4,"offset":962},"end":{"line":30,"column":13,"offset":971},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":959},"end":{"line":30,"column":13,"offset":971},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Side effects","position":{"start":{"line":31,"column":4,"offset":975},"end":{"line":31,"column":16,"offset":987},"indent":[]}}],"position":{"start":{"line":31,"column":4,"offset":975},"end":{"line":31,"column":16,"offset":987},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":972},"end":{"line":31,"column":16,"offset":987},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":923},"end":{"line":31,"column":16,"offset":987},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Omit Needless Names","position":{"start":{"line":33,"column":5,"offset":993},"end":{"line":33,"column":24,"offset":1012},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":989},"end":{"line":33,"column":24,"offset":1012},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Variable declarations from within a function - is it needed? If not, omit and add as an argument.","position":{"start":{"line":35,"column":1,"offset":1014},"end":{"line":35,"column":98,"offset":1111},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1014},"end":{"line":35,"column":98,"offset":1111},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Separating Mutation From Calculation","position":{"start":{"line":37,"column":5,"offset":1117},"end":{"line":37,"column":41,"offset":1153},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1113},"end":{"line":37,"column":41,"offset":1153},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ask \"where is the mutation happening?\" For example, the ","position":{"start":{"line":39,"column":1,"offset":1155},"end":{"line":39,"column":57,"offset":1211},"indent":[]}},{"type":"inlineCode","value":"teaser","position":{"start":{"line":39,"column":57,"offset":1211},"end":{"line":39,"column":65,"offset":1219},"indent":[]}},{"type":"text","value":" function in the example to chop down text in the call ","position":{"start":{"line":39,"column":65,"offset":1219},"end":{"line":39,"column":120,"offset":1274},"indent":[]}},{"type":"inlineCode","value":"map(teaser(50), all('p'))","position":{"start":{"line":39,"column":120,"offset":1274},"end":{"line":39,"column":147,"offset":1301},"indent":[]}},{"type":"text","value":" is where the mutation is happening. It is important to understand where and how this mutation works for simplification.","position":{"start":{"line":39,"column":147,"offset":1301},"end":{"line":39,"column":267,"offset":1421},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1155},"end":{"line":39,"column":267,"offset":1421},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the above example, the ","position":{"start":{"line":41,"column":1,"offset":1423},"end":{"line":41,"column":27,"offset":1449},"indent":[]}},{"type":"inlineCode","value":"teaser","position":{"start":{"line":41,"column":27,"offset":1449},"end":{"line":41,"column":35,"offset":1457},"indent":[]}},{"type":"text","value":" also ran ","position":{"start":{"line":41,"column":35,"offset":1457},"end":{"line":41,"column":45,"offset":1467},"indent":[]}},{"type":"inlineCode","value":"setText","position":{"start":{"line":41,"column":45,"offset":1467},"end":{"line":41,"column":54,"offset":1476},"indent":[]}},{"type":"text","value":" from within the function with the mutated text, which is unnecessary for that function and can be abstracted out.","position":{"start":{"line":41,"column":54,"offset":1476},"end":{"line":41,"column":168,"offset":1590},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1423},"end":{"line":41,"column":168,"offset":1590},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Recognize Pure Functions","position":{"start":{"line":43,"column":5,"offset":1596},"end":{"line":43,"column":29,"offset":1620},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1592},"end":{"line":43,"column":29,"offset":1620},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Functions that don't change anything are called \"pure\".","position":{"start":{"line":45,"column":1,"offset":1622},"end":{"line":45,"column":56,"offset":1677},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1622},"end":{"line":45,"column":56,"offset":1677},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Their purity makes them:","position":{"start":{"line":47,"column":1,"offset":1679},"end":{"line":47,"column":25,"offset":1703},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1679},"end":{"line":47,"column":25,"offset":1703},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Testable","position":{"start":{"line":49,"column":4,"offset":1708},"end":{"line":49,"column":12,"offset":1716},"indent":[]}}],"position":{"start":{"line":49,"column":4,"offset":1708},"end":{"line":49,"column":12,"offset":1716},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1705},"end":{"line":49,"column":12,"offset":1716},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Portable","position":{"start":{"line":50,"column":4,"offset":1720},"end":{"line":50,"column":12,"offset":1728},"indent":[]}}],"position":{"start":{"line":50,"column":4,"offset":1720},"end":{"line":50,"column":12,"offset":1728},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1717},"end":{"line":50,"column":12,"offset":1728},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Memoizable","position":{"start":{"line":51,"column":4,"offset":1732},"end":{"line":51,"column":14,"offset":1742},"indent":[]}}],"position":{"start":{"line":51,"column":4,"offset":1732},"end":{"line":51,"column":14,"offset":1742},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1729},"end":{"line":51,"column":14,"offset":1742},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Parallelizable","position":{"start":{"line":52,"column":4,"offset":1746},"end":{"line":52,"column":18,"offset":1760},"indent":[]}}],"position":{"start":{"line":52,"column":4,"offset":1746},"end":{"line":52,"column":18,"offset":1760},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1743},"end":{"line":52,"column":18,"offset":1760},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1705},"end":{"line":52,"column":18,"offset":1760},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Separate Functions From Rules","position":{"start":{"line":54,"column":5,"offset":1766},"end":{"line":54,"column":34,"offset":1795},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1762},"end":{"line":54,"column":34,"offset":1795},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Functions are nouns. Each input (in the domain) should map to a specific output (in the range).","position":{"start":{"line":56,"column":1,"offset":1797},"end":{"line":56,"column":96,"offset":1892},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1797},"end":{"line":56,"column":96,"offset":1892},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Separate arity from functions:","position":{"start":{"line":58,"column":1,"offset":1894},"end":{"line":58,"column":31,"offset":1924},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1894},"end":{"line":58,"column":31,"offset":1924},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function get(property, object) {\n  return object[property];\n}\nvar people = [{ name: 'example' }];\n\n// args up front\nfunction getPersonName(person) {\n  return get('name', person);\n}\n\nvar names = people.map(getPersonName);\n\n// more args later\n// - magic happens here -\nvar names = people.map(get('name'));\n\n// the magic in detail\nfunction curry(fn) {\n  return function() {\n    if (fn.length > argument.length) {\n      var slice = Array.prototype.slice;\n      var args = slice.apply(arguments);\n      return function() {\n        return fn.apply(null, args.concat(slice.apply(arguments)));\n      };\n    }\n    return fn.apply(null, arguments);\n  };\n}\n\nvar get = curry(function(property, object) {\n  return object[property];\n});","position":{"start":{"line":60,"column":1,"offset":1926},"end":{"line":94,"column":4,"offset":2666},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Arity is the idea of separating functions and making them only give one thing at a time (currying).","position":{"start":{"line":96,"column":1,"offset":2668},"end":{"line":96,"column":100,"offset":2767},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":2668},"end":{"line":96,"column":100,"offset":2767},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The examples then used in this application where using Ramda.","position":{"start":{"line":98,"column":1,"offset":2769},"end":{"line":98,"column":62,"offset":2830},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2769},"end":{"line":98,"column":62,"offset":2830},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Compose","position":{"start":{"line":100,"column":5,"offset":2836},"end":{"line":100,"column":12,"offset":2843},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":2832},"end":{"line":100,"column":12,"offset":2843},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Function can \"meld\" aka compose. Compose is right-to-left, the opposite of Unix pipe which is left-to-right.","position":{"start":{"line":102,"column":1,"offset":2845},"end":{"line":102,"column":109,"offset":2953},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":2845},"end":{"line":102,"column":109,"offset":2953},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When you can understand the relationship between ","position":{"start":{"line":104,"column":1,"offset":2955},"end":{"line":104,"column":50,"offset":3004},"indent":[]}},{"type":"inlineCode","value":"map","position":{"start":{"line":104,"column":50,"offset":3004},"end":{"line":104,"column":55,"offset":3009},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":104,"column":55,"offset":3009},"end":{"line":104,"column":60,"offset":3014},"indent":[]}},{"type":"inlineCode","value":"compose","position":{"start":{"line":104,"column":60,"offset":3014},"end":{"line":104,"column":69,"offset":3023},"indent":[]}},{"type":"text","value":" you can start to see the relationship between the two.","position":{"start":{"line":104,"column":69,"offset":3023},"end":{"line":104,"column":124,"offset":3078},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":2955},"end":{"line":104,"column":124,"offset":3078},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Point Free","position":{"start":{"line":106,"column":5,"offset":3084},"end":{"line":106,"column":15,"offset":3094},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":3080},"end":{"line":106,"column":15,"offset":3094},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Points in this case mean arguments.","position":{"start":{"line":108,"column":1,"offset":3096},"end":{"line":108,"column":36,"offset":3131},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":3096},"end":{"line":108,"column":36,"offset":3131},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The Voyage","position":{"start":{"line":110,"column":4,"offset":3136},"end":{"line":110,"column":14,"offset":3146},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":3133},"end":{"line":110,"column":14,"offset":3146},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Category Theory","position":{"start":{"line":112,"column":5,"offset":3152},"end":{"line":112,"column":20,"offset":3167},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":3148},"end":{"line":112,"column":20,"offset":3167},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is a simply example: ","position":{"start":{"line":114,"column":1,"offset":3169},"end":{"line":114,"column":27,"offset":3195},"indent":[]}},{"type":"inlineCode","value":"add(1, 1) // => 2","position":{"start":{"line":114,"column":27,"offset":3195},"end":{"line":114,"column":46,"offset":3214},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":3169},"end":{"line":114,"column":46,"offset":3214},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Mathematically, we know this:","position":{"start":{"line":116,"column":1,"offset":3216},"end":{"line":116,"column":30,"offset":3245},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":3216},"end":{"line":116,"column":30,"offset":3245},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// associative\nadd(add(1, 1), 4) === add(1, add(1, 4));\n// communitive\nadd(1, 4) === add(4, 1);\n// identity\nadd(n, 0) === n;\n// distributive\nmultiply(2, add(3, 4)) === add(multiply(2, 3), multiply(2, 4));","position":{"start":{"line":118,"column":1,"offset":3247},"end":{"line":127,"column":4,"offset":3469},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"These theorems and formulas make the basis of our work.","position":{"start":{"line":129,"column":1,"offset":3471},"end":{"line":129,"column":56,"offset":3526},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":3471},"end":{"line":129,"column":56,"offset":3526},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"compose :: (b -> c) -> (a -> b) -> (a -> c)\nid :: a -> a","position":{"start":{"line":131,"column":1,"offset":3528},"end":{"line":134,"column":4,"offset":3599},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You need both a composition AND an identity to form a ","position":{"start":{"line":136,"column":1,"offset":3601},"end":{"line":136,"column":55,"offset":3655},"indent":[]}},{"type":"inlineCode","value":"category","position":{"start":{"line":136,"column":55,"offset":3655},"end":{"line":136,"column":65,"offset":3665},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":136,"column":65,"offset":3665},"end":{"line":136,"column":66,"offset":3666},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":3601},"end":{"line":136,"column":66,"offset":3666},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note: The identity function is if you give it a value it will give it right back.","position":{"start":{"line":138,"column":1,"offset":3668},"end":{"line":138,"column":82,"offset":3749},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":3668},"end":{"line":138,"column":82,"offset":3749},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So we can get some category laws:","position":{"start":{"line":140,"column":1,"offset":3751},"end":{"line":140,"column":34,"offset":3784},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":3751},"end":{"line":140,"column":34,"offset":3784},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// left identity\ncompose(\n  id,\n  f,\n) === f;\n// right identity\ncompose(\n  f,\n  id,\n) === f;\n// associativity\ncompose(\n  compose(\n    f,\n    g,\n  ),\n  h,\n) ===\n  compose(\n    f,\n    compose(\n      g,\n      h,\n    ),\n  );","position":{"start":{"line":142,"column":1,"offset":3786},"end":{"line":168,"column":4,"offset":4024},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Objects","position":{"start":{"line":170,"column":5,"offset":4030},"end":{"line":170,"column":12,"offset":4037},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":4026},"end":{"line":170,"column":12,"offset":4037},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"How do we deal with errors, side effects etc? We use objects. Think of them like:","position":{"start":{"line":172,"column":1,"offset":4039},"end":{"line":172,"column":82,"offset":4120},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":4039},"end":{"line":172,"column":82,"offset":4120},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Container/Wrappers for values (also known as Identity)","position":{"start":{"line":174,"column":4,"offset":4125},"end":{"line":174,"column":58,"offset":4179},"indent":[]}}],"position":{"start":{"line":174,"column":4,"offset":4125},"end":{"line":174,"column":58,"offset":4179},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":4122},"end":{"line":174,"column":58,"offset":4179},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No methods","position":{"start":{"line":175,"column":4,"offset":4183},"end":{"line":175,"column":14,"offset":4193},"indent":[]}}],"position":{"start":{"line":175,"column":4,"offset":4183},"end":{"line":175,"column":14,"offset":4193},"indent":[]}}],"position":{"start":{"line":175,"column":1,"offset":4180},"end":{"line":175,"column":14,"offset":4193},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Not nouns","position":{"start":{"line":176,"column":4,"offset":4197},"end":{"line":176,"column":13,"offset":4206},"indent":[]}}],"position":{"start":{"line":176,"column":4,"offset":4197},"end":{"line":176,"column":13,"offset":4206},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":4194},"end":{"line":176,"column":13,"offset":4206},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Probably won't be making your own often","position":{"start":{"line":177,"column":4,"offset":4210},"end":{"line":177,"column":43,"offset":4249},"indent":[]}}],"position":{"start":{"line":177,"column":4,"offset":4210},"end":{"line":177,"column":43,"offset":4249},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":4207},"end":{"line":177,"column":43,"offset":4249},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":4122},"end":{"line":177,"column":43,"offset":4249},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The container:","position":{"start":{"line":179,"column":1,"offset":4251},"end":{"line":179,"column":15,"offset":4265},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":4251},"end":{"line":179,"column":15,"offset":4265},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var _Container = function(val) {\n  this.val = val;\n};\n\n// helper for during compose use\nvar Container = function(x) {\n  return new _Container(x);\n};\n\nContainer(3);\n// => _Container { val: 3}","position":{"start":{"line":181,"column":1,"offset":4267},"end":{"line":193,"column":4,"offset":4475},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In order to map over our container, we can add the following:","position":{"start":{"line":195,"column":1,"offset":4477},"end":{"line":195,"column":62,"offset":4538},"indent":[]}}],"position":{"start":{"line":195,"column":1,"offset":4477},"end":{"line":195,"column":62,"offset":4538},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var _Container.prototype.map = function(f) {\n  // this is the important part - it is running\n  // the function on the value in the container\n  return Container(f(this.val))\n}\n\nContainer(\"flamethrower\").map(function(s) { return capitalize(s)})\nContainer(\"flamethrower\").map(capitalize)\n// => Container(\"Flamethrower\")","position":{"start":{"line":197,"column":1,"offset":4540},"end":{"line":207,"column":4,"offset":4874},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The general idea is that we go within the object and run a function on the object.","position":{"start":{"line":209,"column":3,"offset":4878},"end":{"line":209,"column":85,"offset":4960},"indent":[]}}],"position":{"start":{"line":209,"column":3,"offset":4878},"end":{"line":209,"column":85,"offset":4960},"indent":[]}}],"position":{"start":{"line":209,"column":1,"offset":4876},"end":{"line":209,"column":85,"offset":4960},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These themselves are what we know as a ","position":{"start":{"line":211,"column":1,"offset":4962},"end":{"line":211,"column":40,"offset":5001},"indent":[]}},{"type":"inlineCode","value":"functor","position":{"start":{"line":211,"column":40,"offset":5001},"end":{"line":211,"column":49,"offset":5010},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":211,"column":49,"offset":5010},"end":{"line":211,"column":50,"offset":5011},"indent":[]}}],"position":{"start":{"line":211,"column":1,"offset":4962},"end":{"line":211,"column":50,"offset":5011},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"More example of this in action with the ","position":{"start":{"line":213,"column":1,"offset":5013},"end":{"line":213,"column":41,"offset":5053},"indent":[]}},{"type":"inlineCode","value":"ramda.map","position":{"start":{"line":213,"column":41,"offset":5053},"end":{"line":213,"column":52,"offset":5064},"indent":[]}},{"type":"text","value":" function:","position":{"start":{"line":213,"column":52,"offset":5064},"end":{"line":213,"column":62,"offset":5074},"indent":[]}}],"position":{"start":{"line":213,"column":1,"offset":5013},"end":{"line":213,"column":62,"offset":5074},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"map(match(/cat/g), Container('catsup'));\n//=> Container([\"cat\"])\nmap(\n  compose(\n    first,\n    reverse,\n  ),\n  Container('dog'),\n);\n//=> Container(\"g\")","position":{"start":{"line":215,"column":1,"offset":5076},"end":{"line":226,"column":4,"offset":5246},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Maybe Functor","position":{"start":{"line":228,"column":5,"offset":5252},"end":{"line":228,"column":18,"offset":5265},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":5248},"end":{"line":228,"column":18,"offset":5265},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"\"An object or data structure you can map over\" - a functor","position":{"start":{"line":230,"column":3,"offset":5269},"end":{"line":230,"column":61,"offset":5327},"indent":[]}}],"position":{"start":{"line":230,"column":3,"offset":5269},"end":{"line":230,"column":61,"offset":5327},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":5267},"end":{"line":230,"column":61,"offset":5327},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's take an example that runs in null issues:","position":{"start":{"line":232,"column":1,"offset":5329},"end":{"line":232,"column":48,"offset":5376},"indent":[]}}],"position":{"start":{"line":232,"column":1,"offset":5329},"end":{"line":232,"column":48,"offset":5376},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var getElement = document.querySelector;\nvar getNameParts = compose(\n  split(''),\n  get('value'),\n  getElement,\n);\n\ngetNameParts('#full_name');\n//=> ['Jonathan', 'Gregory', 'Brandis']","position":{"start":{"line":234,"column":1,"offset":5378},"end":{"line":244,"column":4,"offset":5579},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So, meeting our first Functor: ","position":{"start":{"line":246,"column":1,"offset":5581},"end":{"line":246,"column":32,"offset":5612},"indent":[]}},{"type":"inlineCode","value":"Maybe","position":{"start":{"line":246,"column":32,"offset":5612},"end":{"line":246,"column":39,"offset":5619},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":246,"column":39,"offset":5619},"end":{"line":246,"column":40,"offset":5620},"indent":[]}}],"position":{"start":{"line":246,"column":1,"offset":5581},"end":{"line":246,"column":40,"offset":5620},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Captures a null check","position":{"start":{"line":248,"column":4,"offset":5625},"end":{"line":248,"column":25,"offset":5646},"indent":[]}}],"position":{"start":{"line":248,"column":4,"offset":5625},"end":{"line":248,"column":25,"offset":5646},"indent":[]}}],"position":{"start":{"line":248,"column":1,"offset":5622},"end":{"line":248,"column":25,"offset":5646},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The value inside may not be there","position":{"start":{"line":249,"column":4,"offset":5650},"end":{"line":249,"column":37,"offset":5683},"indent":[]}}],"position":{"start":{"line":249,"column":4,"offset":5650},"end":{"line":249,"column":37,"offset":5683},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":5647},"end":{"line":249,"column":37,"offset":5683},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Sometimes has two subclasses ","position":{"start":{"line":250,"column":4,"offset":5687},"end":{"line":250,"column":33,"offset":5716},"indent":[]}},{"type":"inlineCode","value":"Just / Nothing","position":{"start":{"line":250,"column":33,"offset":5716},"end":{"line":250,"column":49,"offset":5732},"indent":[]}}],"position":{"start":{"line":250,"column":4,"offset":5687},"end":{"line":250,"column":49,"offset":5732},"indent":[]}}],"position":{"start":{"line":250,"column":1,"offset":5684},"end":{"line":250,"column":49,"offset":5732},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Sometimes called ","position":{"start":{"line":251,"column":4,"offset":5736},"end":{"line":251,"column":21,"offset":5753},"indent":[]}},{"type":"inlineCode","value":"Option","position":{"start":{"line":251,"column":21,"offset":5753},"end":{"line":251,"column":29,"offset":5761},"indent":[]}},{"type":"text","value":" with subclassess ","position":{"start":{"line":251,"column":29,"offset":5761},"end":{"line":251,"column":47,"offset":5779},"indent":[]}},{"type":"inlineCode","value":"Some / None","position":{"start":{"line":251,"column":47,"offset":5779},"end":{"line":251,"column":60,"offset":5792},"indent":[]}}],"position":{"start":{"line":251,"column":4,"offset":5736},"end":{"line":251,"column":60,"offset":5792},"indent":[]}}],"position":{"start":{"line":251,"column":1,"offset":5733},"end":{"line":251,"column":60,"offset":5792},"indent":[]}}],"position":{"start":{"line":248,"column":1,"offset":5622},"end":{"line":251,"column":60,"offset":5792},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The idea is that you may or may not have a value in your container.","position":{"start":{"line":253,"column":1,"offset":5794},"end":{"line":253,"column":68,"offset":5861},"indent":[]}}],"position":{"start":{"line":253,"column":1,"offset":5794},"end":{"line":253,"column":68,"offset":5861},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var _Maybe.prototype.map = function(f) {\n  return this.val ? Maybe(f(this.val)) : Maybe(null)\n}\n\nmap(capitalize, Maybe(\"flame\"))\n//=> Maybe(\"Flame\")\nmap(capitalize, Maybe(null))\n//=> Maybe(null)","position":{"start":{"line":255,"column":1,"offset":5863},"end":{"line":264,"column":4,"offset":6075},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This in application:","position":{"start":{"line":266,"column":1,"offset":6077},"end":{"line":266,"column":21,"offset":6097},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":6077},"end":{"line":266,"column":21,"offset":6097},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var firstMatch = compose(\n  map(first),\n  Maybe,\n  match(/cat/g),\n);\nfirstMatch('dogsup');\n//=> Maybe(null)","position":{"start":{"line":268,"column":1,"offset":6099},"end":{"line":276,"column":4,"offset":6224},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Worthy inclusions from the course questions:","position":{"start":{"line":278,"column":1,"offset":6226},"end":{"line":278,"column":45,"offset":6270},"indent":[]}}],"position":{"start":{"line":278,"column":1,"offset":6226},"end":{"line":278,"column":45,"offset":6270},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const _ = require('ramda');\nconst inc = _.add(1);\n\nmap(inc, [4]); // [5]\nmap(inc, Identity(4)); // Identity(5)\nmap(map(inc), Identity([4])); // Identity([5])","position":{"start":{"line":280,"column":1,"offset":6272},"end":{"line":287,"column":4,"offset":6447},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This can also trip people up:","position":{"start":{"line":289,"column":1,"offset":6449},"end":{"line":289,"column":30,"offset":6478},"indent":[]}}],"position":{"start":{"line":289,"column":1,"offset":6449},"end":{"line":289,"column":30,"offset":6478},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var xs = Identity(['do', 'ray', 'me', 'fa', 'so', 'la', 'ti', 'do']);\nvar ex2 = map(_.head);\nassertEqual(Identity('do'), ex2(xs)); // Note the identity gets passed in here!","position":{"start":{"line":291,"column":1,"offset":6480},"end":{"line":295,"column":4,"offset":6670},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Either w/ subclasses Left or Right","position":{"start":{"line":297,"column":5,"offset":6676},"end":{"line":297,"column":39,"offset":6710},"indent":[]}}],"position":{"start":{"line":297,"column":1,"offset":6672},"end":{"line":297,"column":39,"offset":6710},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Typically used for pure error handling. Like Maybe, but with an error message embedded. Has two subclasses: Left/Right. Mays the function over a Right, ignores the Left.","position":{"start":{"line":299,"column":1,"offset":6712},"end":{"line":299,"column":170,"offset":6881},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":6712},"end":{"line":299,"column":170,"offset":6881},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"map(function(x) {\n  return x + 1;\n}, Right(2));\n//=> Right(3)\nmap(function(x) {\n  return x + 1;\n}, Left('some message'));\n//=> Left('some message') for error handling","position":{"start":{"line":301,"column":1,"offset":6883},"end":{"line":310,"column":4,"offset":7067},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A more practical application:","position":{"start":{"line":312,"column":1,"offset":7069},"end":{"line":312,"column":30,"offset":7098},"indent":[]}}],"position":{"start":{"line":312,"column":1,"offset":7069},"end":{"line":312,"column":30,"offset":7098},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var determineAge = function(user) {\n  return user.age ? Right(user.age) : Left('could not get age');\n};\nvar yearOlder = compose(\n  map(add(1)),\n  determineAge,\n);\n\nyearOlder({ age: 22 });\n//=> Right(23)\n\nyearOlder({ age: null });\n//=> Left(\"couldn't get age\")","position":{"start":{"line":314,"column":1,"offset":7100},"end":{"line":328,"column":4,"offset":7377},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"IO","position":{"start":{"line":330,"column":5,"offset":7383},"end":{"line":330,"column":7,"offset":7385},"indent":[]}}],"position":{"start":{"line":330,"column":1,"offset":7379},"end":{"line":330,"column":7,"offset":7385},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"IO","position":{"start":{"line":332,"column":1,"offset":7387},"end":{"line":332,"column":5,"offset":7391},"indent":[]}},{"type":"text","value":" is a functor that puts a function inside it (not a string, number etc).","position":{"start":{"line":332,"column":5,"offset":7391},"end":{"line":332,"column":77,"offset":7463},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":7387},"end":{"line":332,"column":77,"offset":7463},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Facets of IO:","position":{"start":{"line":334,"column":1,"offset":7465},"end":{"line":334,"column":14,"offset":7478},"indent":[]}}],"position":{"start":{"line":334,"column":1,"offset":7465},"end":{"line":334,"column":14,"offset":7478},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A lazy computation \"builder\"","position":{"start":{"line":336,"column":4,"offset":7483},"end":{"line":336,"column":32,"offset":7511},"indent":[]}}],"position":{"start":{"line":336,"column":4,"offset":7483},"end":{"line":336,"column":32,"offset":7511},"indent":[]}}],"position":{"start":{"line":336,"column":1,"offset":7480},"end":{"line":336,"column":32,"offset":7511},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Typically used to contain side effects","position":{"start":{"line":337,"column":4,"offset":7515},"end":{"line":337,"column":42,"offset":7553},"indent":[]}}],"position":{"start":{"line":337,"column":4,"offset":7515},"end":{"line":337,"column":42,"offset":7553},"indent":[]}}],"position":{"start":{"line":337,"column":1,"offset":7512},"end":{"line":337,"column":42,"offset":7553},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"You must ","position":{"start":{"line":338,"column":4,"offset":7557},"end":{"line":338,"column":13,"offset":7566},"indent":[]}},{"type":"inlineCode","value":"runIO","position":{"start":{"line":338,"column":13,"offset":7566},"end":{"line":338,"column":20,"offset":7573},"indent":[]}},{"type":"text","value":" to perform the operation","position":{"start":{"line":338,"column":20,"offset":7573},"end":{"line":338,"column":45,"offset":7598},"indent":[]}}],"position":{"start":{"line":338,"column":4,"offset":7557},"end":{"line":338,"column":45,"offset":7598},"indent":[]}}],"position":{"start":{"line":338,"column":1,"offset":7554},"end":{"line":338,"column":45,"offset":7598},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Map appends the function to a list of things to run with the effectful value","position":{"start":{"line":339,"column":4,"offset":7602},"end":{"line":339,"column":80,"offset":7678},"indent":[]}}],"position":{"start":{"line":339,"column":4,"offset":7602},"end":{"line":339,"column":80,"offset":7678},"indent":[]}}],"position":{"start":{"line":339,"column":1,"offset":7599},"end":{"line":339,"column":80,"offset":7678},"indent":[]}}],"position":{"start":{"line":336,"column":1,"offset":7480},"end":{"line":339,"column":80,"offset":7678},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Examples:","position":{"start":{"line":341,"column":1,"offset":7680},"end":{"line":341,"column":10,"offset":7689},"indent":[]}}],"position":{"start":{"line":341,"column":1,"offset":7680},"end":{"line":341,"column":10,"offset":7689},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var email_io = IO(function() {\n  return $('#email').val();\n});\nvar msg_io = map(concat('welcome'), email_io);\n\nrunIO(msg_io);\n//=> \"welcome steve@foodie.net\"","position":{"start":{"line":343,"column":1,"offset":7691},"end":{"line":351,"column":4,"offset":7866},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"An example of building up an IO:","position":{"start":{"line":353,"column":1,"offset":7868},"end":{"line":353,"column":33,"offset":7900},"indent":[]}}],"position":{"start":{"line":353,"column":1,"offset":7868},"end":{"line":353,"column":33,"offset":7900},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var getBgColor = compose(\n  get('background-color'),\n  JSON.parse,\n);\nvar bgPref = compose(\n  map(getBgColor),\n  Store.get('preferences'),\n);\n\nvar app = bgPref();\n//=> IO()\n\nrunIO(app);\n//=> #efefef","position":{"start":{"line":355,"column":1,"offset":7902},"end":{"line":370,"column":4,"offset":8118},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Other Functors","position":{"start":{"line":372,"column":5,"offset":8124},"end":{"line":372,"column":19,"offset":8138},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":8120},"end":{"line":372,"column":19,"offset":8138},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"EventStream: Infinite list of results, dual of array, map is sometimes lazy, calls the mapped function each time an event happens. Similar-ish to RxJS. They used Bacon in this example.","position":{"start":{"line":374,"column":4,"offset":8143},"end":{"line":374,"column":188,"offset":8327},"indent":[]}}],"position":{"start":{"line":374,"column":4,"offset":8143},"end":{"line":374,"column":188,"offset":8327},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":8140},"end":{"line":374,"column":188,"offset":8327},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Future: Has an eventual value, similar to a promise but \"lazy\", you must \"fork\" it to kick it off, it takes a function as its value, calls the function with it's result once it's there.","position":{"start":{"line":375,"column":4,"offset":8331},"end":{"line":375,"column":189,"offset":8516},"indent":[]}}],"position":{"start":{"line":375,"column":4,"offset":8331},"end":{"line":375,"column":189,"offset":8516},"indent":[]}}],"position":{"start":{"line":375,"column":1,"offset":8328},"end":{"line":375,"column":189,"offset":8516},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":8140},"end":{"line":375,"column":189,"offset":8516},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Functor Law Properties","position":{"start":{"line":377,"column":5,"offset":8522},"end":{"line":377,"column":27,"offset":8544},"indent":[]}}],"position":{"start":{"line":377,"column":1,"offset":8518},"end":{"line":377,"column":27,"offset":8544},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// identity\nmap(id) === id;\n\n// composition\ncompose(\n  map(f),\n  map(g),\n) ===\n  map(\n    compose(\n      f,\n      g,\n    ),\n  );","position":{"start":{"line":379,"column":1,"offset":8546},"end":{"line":394,"column":4,"offset":8692},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"An example functor:","position":{"start":{"line":396,"column":1,"offset":8694},"end":{"line":396,"column":20,"offset":8713},"indent":[]}}],"position":{"start":{"line":396,"column":1,"offset":8694},"end":{"line":396,"column":20,"offset":8713},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// reverse :: String -> String\n// toArray :: a -> Array a\nvar toArray = function(x) {\n  return [x];\n};\n\ncompose(\n  toArray,\n  reverse,\n)('bingo');\n//=> [ognib]\n\ncompose(\n  map(reverse),\n  toArray,\n)('bingo');\n//=> [ognib]","position":{"start":{"line":398,"column":1,"offset":8715},"end":{"line":416,"column":4,"offset":8954},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Natural Transformations","position":{"start":{"line":418,"column":1,"offset":8956},"end":{"line":418,"column":26,"offset":8981},"indent":[]}},{"type":"text","value":" is when you take one functor to another without knowing anything about the values.","position":{"start":{"line":418,"column":26,"offset":8981},"end":{"line":418,"column":109,"offset":9064},"indent":[]}}],"position":{"start":{"line":418,"column":1,"offset":8956},"end":{"line":418,"column":109,"offset":9064},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An example is ","position":{"start":{"line":420,"column":1,"offset":9066},"end":{"line":420,"column":15,"offset":9080},"indent":[]}},{"type":"inlineCode","value":"Maybe","position":{"start":{"line":420,"column":15,"offset":9080},"end":{"line":420,"column":22,"offset":9087},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":420,"column":22,"offset":9087},"end":{"line":420,"column":23,"offset":9088},"indent":[]}}],"position":{"start":{"line":420,"column":1,"offset":9066},"end":{"line":420,"column":23,"offset":9088},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"maybeToArray(Maybe(2));\nmaybeToArray(Maybe(null));","position":{"start":{"line":422,"column":1,"offset":9090},"end":{"line":425,"column":4,"offset":9158},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Monads","position":{"start":{"line":427,"column":5,"offset":9164},"end":{"line":427,"column":11,"offset":9170},"indent":[]}}],"position":{"start":{"line":427,"column":1,"offset":9160},"end":{"line":427,"column":11,"offset":9170},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Monads = Pointed Functors ","position":{"start":{"line":429,"column":1,"offset":9172},"end":{"line":429,"column":27,"offset":9198},"indent":[]}},{"type":"inlineCode","value":"of :: a -> F a","position":{"start":{"line":429,"column":27,"offset":9198},"end":{"line":429,"column":43,"offset":9214},"indent":[]}},{"type":"text","value":" aka: pure, return, unit, point.","position":{"start":{"line":429,"column":43,"offset":9214},"end":{"line":429,"column":75,"offset":9246},"indent":[]}}],"position":{"start":{"line":429,"column":1,"offset":9172},"end":{"line":429,"column":75,"offset":9246},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Anything with an ","position":{"start":{"line":431,"column":1,"offset":9248},"end":{"line":431,"column":18,"offset":9265},"indent":[]}},{"type":"inlineCode","value":"of","position":{"start":{"line":431,"column":18,"offset":9265},"end":{"line":431,"column":22,"offset":9269},"indent":[]}},{"type":"text","value":" is a Pointed Functor:","position":{"start":{"line":431,"column":22,"offset":9269},"end":{"line":431,"column":44,"offset":9291},"indent":[]}}],"position":{"start":{"line":431,"column":1,"offset":9248},"end":{"line":431,"column":44,"offset":9291},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"Container.of(split);\n// Container(split)\n\nFuture.of(split);\n// Future(split)\n\nMaybe.of(split);\n// Maybe(split)\n\nEventStream.of(split);\n// EventStream(split)","position":{"start":{"line":433,"column":1,"offset":9293},"end":{"line":445,"column":4,"offset":9467},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"\"Nest computations\" - just a pointed functor with one the following functions: ","position":{"start":{"line":447,"column":1,"offset":9469},"end":{"line":447,"column":80,"offset":9548},"indent":[]}},{"type":"inlineCode","value":"mjoin","position":{"start":{"line":447,"column":80,"offset":9548},"end":{"line":447,"column":87,"offset":9555},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":447,"column":87,"offset":9555},"end":{"line":447,"column":89,"offset":9557},"indent":[]}},{"type":"inlineCode","value":"chain","position":{"start":{"line":447,"column":89,"offset":9557},"end":{"line":447,"column":96,"offset":9564},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":447,"column":96,"offset":9564},"end":{"line":447,"column":97,"offset":9565},"indent":[]}}],"position":{"start":{"line":447,"column":1,"offset":9469},"end":{"line":447,"column":97,"offset":9565},"indent":[]}},{"type":"code","lang":"haskell","meta":null,"value":"mjoin :: M M a -> M a\nchain :: (a -> M b) -> M a -> M b","position":{"start":{"line":449,"column":1,"offset":9567},"end":{"line":452,"column":4,"offset":9637},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Example:","position":{"start":{"line":454,"column":1,"offset":9639},"end":{"line":454,"column":9,"offset":9647},"indent":[]}}],"position":{"start":{"line":454,"column":1,"offset":9639},"end":{"line":454,"column":9,"offset":9647},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"mjoin(Container(Container(2))); //=> Container(2)\n\n// in the given example\nvar getTrackingId = compose(\n  Maybe,\n  get('tracking_id'),\n);\nvar findOrder = compose(\n  Maybe,\n  Api.findOrder,\n);\nvar getOrderTracking = compose(\n  mjoin,\n  map(getTrackingId),\n  findOrder,\n);\n\nvar renderPage = compose(\n  map(renderTemplate),\n  getOrderTracking,\n);\nrenderPage(379);\n//=> Maybe(Html)","position":{"start":{"line":456,"column":1,"offset":9649},"end":{"line":480,"column":4,"offset":10044},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Converting deep nested maps:","position":{"start":{"line":482,"column":1,"offset":10046},"end":{"line":482,"column":29,"offset":10074},"indent":[]}}],"position":{"start":{"line":482,"column":1,"offset":10046},"end":{"line":482,"column":29,"offset":10074},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// safeGet returns a Maybe functor\nvar ex1 = compose(\n  map(map(safeGet('name'))),\n  map(safeGet('street')),\n  safeGet('address'),\n);\n\n// with a mjoin, you could do...\nvar ex1 = compose(\n  mjoin\n  map(safeGet('name')),\n  mjoin,\n  map(safeGet('street')),\n  safeGet('address'),\n);\n\n// but given we know chain is just \"monad\",\n// then mjoin, we could...\nvar ex1 = compose(\n  chain(safeGet('name')),\n  chain(safeGet('street')),\n  safeGet('address'),\n);","position":{"start":{"line":484,"column":1,"offset":10076},"end":{"line":508,"column":4,"offset":10542},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There is also such thing as ","position":{"start":{"line":510,"column":1,"offset":10544},"end":{"line":510,"column":29,"offset":10572},"indent":[]}},{"type":"inlineCode","value":"mcompose","position":{"start":{"line":510,"column":29,"offset":10572},"end":{"line":510,"column":39,"offset":10582},"indent":[]}},{"type":"text","value":" which will remove the need for the child ","position":{"start":{"line":510,"column":39,"offset":10582},"end":{"line":510,"column":81,"offset":10624},"indent":[]}},{"type":"inlineCode","value":"chain","position":{"start":{"line":510,"column":81,"offset":10624},"end":{"line":510,"column":88,"offset":10631},"indent":[]}},{"type":"text","value":" function.","position":{"start":{"line":510,"column":88,"offset":10631},"end":{"line":510,"column":98,"offset":10641},"indent":[]}}],"position":{"start":{"line":510,"column":1,"offset":10544},"end":{"line":510,"column":98,"offset":10641},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":513,"column":1,"offset":10644},"end":{"line":513,"column":31,"offset":10674},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":513,"column":31,"offset":10674}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"hardcore-functional-programming-in-javascrpt\"\n    }}>{`Hardcore Functional Programming in JavaScrpt`}</h1>\n    <p>{`There are notes taken from Frontend Masters course \"Hardcore Functional Programming in JavaScrpt\"`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/functional-javascript/introduction/\"\n        }}>{`Frontend Masters course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.google.com/presentation/d/1WmIH538r0ubjW5zfKh43I1_Up4OnqQnNhICETyDnhSI/\"\n        }}>{`Course Slides`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://ramdajs.com/\"\n        }}>{`RamdaJS`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://baconjs.github.io/\"\n        }}>{`BaconJS`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://baconjs.github.io/\"\n        }}>{`Fantasy IO`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/DrBoolean/pointfree-fantasy\"\n        }}>{`Pointfree Fantasy - for mjoin, chain etc`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/origamitower/folktale\"\n        }}>{`Folktale - Either monad`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`\"Separation and recognition\" - the soul of functional programming.`}</p>\n    </blockquote>\n    <p>{`The symptoms:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Custom names`}</li>\n      <li parentName=\"ol\">{`Looping patterns`}</li>\n      <li parentName=\"ol\">{`Glue code`}</li>\n      <li parentName=\"ol\">{`Side effects`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"omit-needless-names\"\n    }}>{`Omit Needless Names`}</h3>\n    <p>{`Variable declarations from within a function - is it needed? If not, omit and add as an argument.`}</p>\n    <h3 {...{\n      \"id\": \"separating-mutation-from-calculation\"\n    }}>{`Separating Mutation From Calculation`}</h3>\n    <p>{`Ask \"where is the mutation happening?\" For example, the `}<inlineCode parentName=\"p\">{`teaser`}</inlineCode>{` function in the example to chop down text in the call `}<inlineCode parentName=\"p\">{`map(teaser(50), all('p'))`}</inlineCode>{` is where the mutation is happening. It is important to understand where and how this mutation works for simplification.`}</p>\n    <p>{`In the above example, the `}<inlineCode parentName=\"p\">{`teaser`}</inlineCode>{` also ran `}<inlineCode parentName=\"p\">{`setText`}</inlineCode>{` from within the function with the mutated text, which is unnecessary for that function and can be abstracted out.`}</p>\n    <h3 {...{\n      \"id\": \"recognize-pure-functions\"\n    }}>{`Recognize Pure Functions`}</h3>\n    <p>{`Functions that don't change anything are called \"pure\".`}</p>\n    <p>{`Their purity makes them:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Testable`}</li>\n      <li parentName=\"ol\">{`Portable`}</li>\n      <li parentName=\"ol\">{`Memoizable`}</li>\n      <li parentName=\"ol\">{`Parallelizable`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"separate-functions-from-rules\"\n    }}>{`Separate Functions From Rules`}</h3>\n    <p>{`Functions are nouns. Each input (in the domain) should map to a specific output (in the range).`}</p>\n    <p>{`Separate arity from functions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function get(property, object) {\n  return object[property];\n}\nvar people = [{ name: 'example' }];\n\n// args up front\nfunction getPersonName(person) {\n  return get('name', person);\n}\n\nvar names = people.map(getPersonName);\n\n// more args later\n// - magic happens here -\nvar names = people.map(get('name'));\n\n// the magic in detail\nfunction curry(fn) {\n  return function() {\n    if (fn.length > argument.length) {\n      var slice = Array.prototype.slice;\n      var args = slice.apply(arguments);\n      return function() {\n        return fn.apply(null, args.concat(slice.apply(arguments)));\n      };\n    }\n    return fn.apply(null, arguments);\n  };\n}\n\nvar get = curry(function(property, object) {\n  return object[property];\n});\n`}</code></pre>\n    <p>{`Arity is the idea of separating functions and making them only give one thing at a time (currying).`}</p>\n    <p>{`The examples then used in this application where using Ramda.`}</p>\n    <h3 {...{\n      \"id\": \"compose\"\n    }}>{`Compose`}</h3>\n    <p>{`Function can \"meld\" aka compose. Compose is right-to-left, the opposite of Unix pipe which is left-to-right.`}</p>\n    <p>{`When you can understand the relationship between `}<inlineCode parentName=\"p\">{`map`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`compose`}</inlineCode>{` you can start to see the relationship between the two.`}</p>\n    <h3 {...{\n      \"id\": \"point-free\"\n    }}>{`Point Free`}</h3>\n    <p>{`Points in this case mean arguments.`}</p>\n    <h2 {...{\n      \"id\": \"the-voyage\"\n    }}>{`The Voyage`}</h2>\n    <h3 {...{\n      \"id\": \"category-theory\"\n    }}>{`Category Theory`}</h3>\n    <p>{`Here is a simply example: `}<inlineCode parentName=\"p\">{`add(1, 1) // => 2`}</inlineCode></p>\n    <p>{`Mathematically, we know this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// associative\nadd(add(1, 1), 4) === add(1, add(1, 4));\n// communitive\nadd(1, 4) === add(4, 1);\n// identity\nadd(n, 0) === n;\n// distributive\nmultiply(2, add(3, 4)) === add(multiply(2, 3), multiply(2, 4));\n`}</code></pre>\n    <p>{`These theorems and formulas make the basis of our work.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`compose :: (b -> c) -> (a -> b) -> (a -> c)\nid :: a -> a\n`}</code></pre>\n    <p>{`You need both a composition AND an identity to form a `}<inlineCode parentName=\"p\">{`category`}</inlineCode>{`.`}</p>\n    <p>{`Note: The identity function is if you give it a value it will give it right back.`}</p>\n    <p>{`So we can get some category laws:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// left identity\ncompose(\n  id,\n  f,\n) === f;\n// right identity\ncompose(\n  f,\n  id,\n) === f;\n// associativity\ncompose(\n  compose(\n    f,\n    g,\n  ),\n  h,\n) ===\n  compose(\n    f,\n    compose(\n      g,\n      h,\n    ),\n  );\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"objects\"\n    }}>{`Objects`}</h3>\n    <p>{`How do we deal with errors, side effects etc? We use objects. Think of them like:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Container/Wrappers for values (also known as Identity)`}</li>\n      <li parentName=\"ol\">{`No methods`}</li>\n      <li parentName=\"ol\">{`Not nouns`}</li>\n      <li parentName=\"ol\">{`Probably won't be making your own often`}</li>\n    </ol>\n    <p>{`The container:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var _Container = function(val) {\n  this.val = val;\n};\n\n// helper for during compose use\nvar Container = function(x) {\n  return new _Container(x);\n};\n\nContainer(3);\n// => _Container { val: 3}\n`}</code></pre>\n    <p>{`In order to map over our container, we can add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var _Container.prototype.map = function(f) {\n  // this is the important part - it is running\n  // the function on the value in the container\n  return Container(f(this.val))\n}\n\nContainer(\"flamethrower\").map(function(s) { return capitalize(s)})\nContainer(\"flamethrower\").map(capitalize)\n// => Container(\"Flamethrower\")\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The general idea is that we go within the object and run a function on the object.`}</p>\n    </blockquote>\n    <p>{`These themselves are what we know as a `}<inlineCode parentName=\"p\">{`functor`}</inlineCode>{`.`}</p>\n    <p>{`More example of this in action with the `}<inlineCode parentName=\"p\">{`ramda.map`}</inlineCode>{` function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`map(match(/cat/g), Container('catsup'));\n//=> Container([\"cat\"])\nmap(\n  compose(\n    first,\n    reverse,\n  ),\n  Container('dog'),\n);\n//=> Container(\"g\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"maybe-functor\"\n    }}>{`Maybe Functor`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`\"An object or data structure you can map over\" - a functor`}</p>\n    </blockquote>\n    <p>{`Let's take an example that runs in null issues:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var getElement = document.querySelector;\nvar getNameParts = compose(\n  split(''),\n  get('value'),\n  getElement,\n);\n\ngetNameParts('#full_name');\n//=> ['Jonathan', 'Gregory', 'Brandis']\n`}</code></pre>\n    <p>{`So, meeting our first Functor: `}<inlineCode parentName=\"p\">{`Maybe`}</inlineCode>{`.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Captures a null check`}</li>\n      <li parentName=\"ol\">{`The value inside may not be there`}</li>\n      <li parentName=\"ol\">{`Sometimes has two subclasses `}<inlineCode parentName=\"li\">{`Just / Nothing`}</inlineCode></li>\n      <li parentName=\"ol\">{`Sometimes called `}<inlineCode parentName=\"li\">{`Option`}</inlineCode>{` with subclassess `}<inlineCode parentName=\"li\">{`Some / None`}</inlineCode></li>\n    </ol>\n    <p>{`The idea is that you may or may not have a value in your container.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var _Maybe.prototype.map = function(f) {\n  return this.val ? Maybe(f(this.val)) : Maybe(null)\n}\n\nmap(capitalize, Maybe(\"flame\"))\n//=> Maybe(\"Flame\")\nmap(capitalize, Maybe(null))\n//=> Maybe(null)\n`}</code></pre>\n    <p>{`This in application:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var firstMatch = compose(\n  map(first),\n  Maybe,\n  match(/cat/g),\n);\nfirstMatch('dogsup');\n//=> Maybe(null)\n`}</code></pre>\n    <p>{`Worthy inclusions from the course questions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const _ = require('ramda');\nconst inc = _.add(1);\n\nmap(inc, [4]); // [5]\nmap(inc, Identity(4)); // Identity(5)\nmap(map(inc), Identity([4])); // Identity([5])\n`}</code></pre>\n    <p>{`This can also trip people up:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var xs = Identity(['do', 'ray', 'me', 'fa', 'so', 'la', 'ti', 'do']);\nvar ex2 = map(_.head);\nassertEqual(Identity('do'), ex2(xs)); // Note the identity gets passed in here!\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"either-w-subclasses-left-or-right\"\n    }}>{`Either w/ subclasses Left or Right`}</h3>\n    <p>{`Typically used for pure error handling. Like Maybe, but with an error message embedded. Has two subclasses: Left/Right. Mays the function over a Right, ignores the Left.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`map(function(x) {\n  return x + 1;\n}, Right(2));\n//=> Right(3)\nmap(function(x) {\n  return x + 1;\n}, Left('some message'));\n//=> Left('some message') for error handling\n`}</code></pre>\n    <p>{`A more practical application:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var determineAge = function(user) {\n  return user.age ? Right(user.age) : Left('could not get age');\n};\nvar yearOlder = compose(\n  map(add(1)),\n  determineAge,\n);\n\nyearOlder({ age: 22 });\n//=> Right(23)\n\nyearOlder({ age: null });\n//=> Left(\"couldn't get age\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"io\"\n    }}>{`IO`}</h3>\n    <p><inlineCode parentName=\"p\">{`IO`}</inlineCode>{` is a functor that puts a function inside it (not a string, number etc).`}</p>\n    <p>{`Facets of IO:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A lazy computation \"builder\"`}</li>\n      <li parentName=\"ol\">{`Typically used to contain side effects`}</li>\n      <li parentName=\"ol\">{`You must `}<inlineCode parentName=\"li\">{`runIO`}</inlineCode>{` to perform the operation`}</li>\n      <li parentName=\"ol\">{`Map appends the function to a list of things to run with the effectful value`}</li>\n    </ol>\n    <p>{`Examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var email_io = IO(function() {\n  return $('#email').val();\n});\nvar msg_io = map(concat('welcome'), email_io);\n\nrunIO(msg_io);\n//=> \"welcome steve@foodie.net\"\n`}</code></pre>\n    <p>{`An example of building up an IO:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var getBgColor = compose(\n  get('background-color'),\n  JSON.parse,\n);\nvar bgPref = compose(\n  map(getBgColor),\n  Store.get('preferences'),\n);\n\nvar app = bgPref();\n//=> IO()\n\nrunIO(app);\n//=> #efefef\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"other-functors\"\n    }}>{`Other Functors`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`EventStream: Infinite list of results, dual of array, map is sometimes lazy, calls the mapped function each time an event happens. Similar-ish to RxJS. They used Bacon in this example.`}</li>\n      <li parentName=\"ol\">{`Future: Has an eventual value, similar to a promise but \"lazy\", you must \"fork\" it to kick it off, it takes a function as its value, calls the function with it's result once it's there.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"functor-law-properties\"\n    }}>{`Functor Law Properties`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// identity\nmap(id) === id;\n\n// composition\ncompose(\n  map(f),\n  map(g),\n) ===\n  map(\n    compose(\n      f,\n      g,\n    ),\n  );\n`}</code></pre>\n    <p>{`An example functor:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// reverse :: String -> String\n// toArray :: a -> Array a\nvar toArray = function(x) {\n  return [x];\n};\n\ncompose(\n  toArray,\n  reverse,\n)('bingo');\n//=> [ognib]\n\ncompose(\n  map(reverse),\n  toArray,\n)('bingo');\n//=> [ognib]\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Natural Transformations`}</inlineCode>{` is when you take one functor to another without knowing anything about the values.`}</p>\n    <p>{`An example is `}<inlineCode parentName=\"p\">{`Maybe`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`maybeToArray(Maybe(2));\nmaybeToArray(Maybe(null));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"monads\"\n    }}>{`Monads`}</h3>\n    <p>{`Monads = Pointed Functors `}<inlineCode parentName=\"p\">{`of :: a -> F a`}</inlineCode>{` aka: pure, return, unit, point.`}</p>\n    <p>{`Anything with an `}<inlineCode parentName=\"p\">{`of`}</inlineCode>{` is a Pointed Functor:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`Container.of(split);\n// Container(split)\n\nFuture.of(split);\n// Future(split)\n\nMaybe.of(split);\n// Maybe(split)\n\nEventStream.of(split);\n// EventStream(split)\n`}</code></pre>\n    <p>{`\"Nest computations\" - just a pointed functor with one the following functions: `}<inlineCode parentName=\"p\">{`mjoin`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`chain`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-haskell\"\n      }}>{`mjoin :: M M a -> M a\nchain :: (a -> M b) -> M a -> M b\n`}</code></pre>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`mjoin(Container(Container(2))); //=> Container(2)\n\n// in the given example\nvar getTrackingId = compose(\n  Maybe,\n  get('tracking_id'),\n);\nvar findOrder = compose(\n  Maybe,\n  Api.findOrder,\n);\nvar getOrderTracking = compose(\n  mjoin,\n  map(getTrackingId),\n  findOrder,\n);\n\nvar renderPage = compose(\n  map(renderTemplate),\n  getOrderTracking,\n);\nrenderPage(379);\n//=> Maybe(Html)\n`}</code></pre>\n    <p>{`Converting deep nested maps:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// safeGet returns a Maybe functor\nvar ex1 = compose(\n  map(map(safeGet('name'))),\n  map(safeGet('street')),\n  safeGet('address'),\n);\n\n// with a mjoin, you could do...\nvar ex1 = compose(\n  mjoin\n  map(safeGet('name')),\n  mjoin,\n  map(safeGet('street')),\n  safeGet('address'),\n);\n\n// but given we know chain is just \"monad\",\n// then mjoin, we could...\nvar ex1 = compose(\n  chain(safeGet('name')),\n  chain(safeGet('street')),\n  safeGet('address'),\n);\n`}</code></pre>\n    <p>{`There is also such thing as `}<inlineCode parentName=\"p\">{`mcompose`}</inlineCode>{` which will remove the need for the child `}<inlineCode parentName=\"p\">{`chain`}</inlineCode>{` function.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}