{"expireTime":9007200867335931000,"key":"gatsby-plugin-mdx-entire-payload-572aff1f7e89bc3985e9fc94ea6f5953-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Kotlin Arrays And Lists","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":26,"offset":192},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":26,"offset":192},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Creating Arrays","position":{"start":{"line":10,"column":4,"offset":197},"end":{"line":10,"column":19,"offset":212},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":194},"end":{"line":10,"column":19,"offset":212},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Easiest way is to use the ","position":{"start":{"line":12,"column":1,"offset":214},"end":{"line":12,"column":27,"offset":240},"indent":[]}},{"type":"inlineCode","value":"arrayOf","position":{"start":{"line":12,"column":27,"offset":240},"end":{"line":12,"column":36,"offset":249},"indent":[]}},{"type":"text","value":" func. Kotlin will infer the type.","position":{"start":{"line":12,"column":36,"offset":249},"end":{"line":12,"column":70,"offset":283},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":214},"end":{"line":12,"column":70,"offset":283},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val evenNumbers = arrayOf(2,4,6,8)\n\n// easy way to create an array with default values\nval fiveFives = arrayOf(5, {5}) // 5,5,5,5,5","position":{"start":{"line":14,"column":1,"offset":285},"end":{"line":19,"column":4,"offset":430},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Array Of Primitives","position":{"start":{"line":21,"column":4,"offset":435},"end":{"line":21,"column":23,"offset":454},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":432},"end":{"line":21,"column":23,"offset":454},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val oddNumbers = intArrayOf(1,3,5,7)\nval zeros = DoubleArray(4) // 0.0, 0.0, 0.0, 0.0\nval otherOddNumbers = arrayOf(1,3,5,7).toIntArray()","position":{"start":{"line":23,"column":1,"offset":456},"end":{"line":27,"column":4,"offset":607},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Lists","position":{"start":{"line":29,"column":4,"offset":612},"end":{"line":29,"column":9,"offset":617},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":609},"end":{"line":29,"column":9,"offset":617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"List type in Kotlin is an interface that has concrete realizations in types such as ArrayList, LinkedList and others.","position":{"start":{"line":31,"column":1,"offset":619},"end":{"line":31,"column":118,"offset":736},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":619},"end":{"line":31,"column":118,"offset":736},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lists have the additional features of being ","position":{"start":{"line":33,"column":1,"offset":738},"end":{"line":33,"column":45,"offset":782},"indent":[]}},{"type":"inlineCode","value":"dynamically-sized","position":{"start":{"line":33,"column":45,"offset":782},"end":{"line":33,"column":64,"offset":801},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":33,"column":64,"offset":801},"end":{"line":33,"column":65,"offset":802},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":738},"end":{"line":33,"column":65,"offset":802},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val innerPlanets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\")","position":{"start":{"line":35,"column":1,"offset":804},"end":{"line":37,"column":4,"offset":880},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Empty Lists","position":{"start":{"line":39,"column":5,"offset":886},"end":{"line":39,"column":16,"offset":897},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":882},"end":{"line":39,"column":16,"offset":897},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val subscribers: List<String> = listOf()\n// same as\nval subscribers = listOf<String>()","position":{"start":{"line":41,"column":1,"offset":899},"end":{"line":45,"column":4,"offset":999},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Mutable Lists","position":{"start":{"line":47,"column":5,"offset":1005},"end":{"line":47,"column":18,"offset":1018},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1001},"end":{"line":47,"column":18,"offset":1018},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val outerPlanets = mutableListOf(\"Jupiter\", \"Saturn\", \"Uranus\",\n\"Neptune\")\nval exoPlanets = mutableListOf<String>()","position":{"start":{"line":49,"column":1,"offset":1020},"end":{"line":53,"column":4,"offset":1149},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"List Properties and Methods","position":{"start":{"line":55,"column":5,"offset":1155},"end":{"line":55,"column":32,"offset":1182},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1151},"end":{"line":55,"column":32,"offset":1182},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val players = mutableListOf(\"Alice\", \"Bob\", \"Cindy\", \"Dan\")\n\nprint(players.isEmpty()) // > false\n\nif (players.size < 2) {\n  println(\"We need at least two players!\")\n} else {\n  println(\"Let's start!\")\n}\n// > Let's start!\n\nvar currentPlayer = players.first()\nprintln(currentPlayer) // > Alice\nprintln(players.last()) // > Dan\n\nval minPlayer = players.min()\nminPlayer.let {\n  println(\"$minPlayer will start\") // > Alice will start\n}\n\nprintln(arrayOf(2, 3, 1).first())\n// > 2\nprintln(arrayOf(2, 3, 1).min())\n// > 1\n\nval maxPlayer = players.max()\nif (maxPlayer != null) {\n  println(\"$maxPlayer is the MAX\") // > Dan is the MAX\n}\n\nval firstPlayer = players[0]\nprintln(\"First player is $firstPlayer\")\n// > First player is Alice\nval secondPlayer = players.get(1)\n\nval upcomingPlayersSlice = players.slice(1..2)\nprintln(upcomingPlayersSlice.joinToString()) // > Bob, Cindy\n\nplayers.slice(1..3).contains(\"Alice\") // false","position":{"start":{"line":57,"column":1,"offset":1184},"end":{"line":97,"column":4,"offset":2109},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding List Elements","position":{"start":{"line":99,"column":4,"offset":2114},"end":{"line":99,"column":24,"offset":2134},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":2111},"end":{"line":99,"column":24,"offset":2134},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"players.add(\"Eli\")\n// or\nplayers += \"Gina\"\n\nprintln(players.joinToString())\n// > \"Alice\", \"Bob\", \"Cindy\", \"Dan\", \"Eli\", \"Gina\"\n\n// inserting elements\nplayers.add(5, \"Frank\")","position":{"start":{"line":101,"column":1,"offset":2136},"end":{"line":111,"column":4,"offset":2323},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Removing List Elements","position":{"start":{"line":113,"column":4,"offset":2328},"end":{"line":113,"column":26,"offset":2350},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":2325},"end":{"line":113,"column":26,"offset":2350},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val wasPlayerRemoved = players.remove(\"Gina\")\nprintln(\"It is $wasPlayerRemoved that Gina was removed\")\n// > It is true that Gina was removed\n\nval removedPlayer = players.removeAt(2)\nprintln(\"$removedPlayer was removed\") // > Cindy was removed","position":{"start":{"line":115,"column":1,"offset":2352},"end":{"line":122,"column":4,"offset":2608},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Iterating Through A List","position":{"start":{"line":124,"column":4,"offset":2613},"end":{"line":124,"column":28,"offset":2637},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":2610},"end":{"line":124,"column":28,"offset":2637},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"for (player in players) {\n  println(player)\n}\n// > Alice\n// > Anna\n// > Bob\n// > Dan\n// > Franklin\n\n// with index\nfor ((index, player) in players.withIndex()) {\n  println(\"${index + 1}. $player\")\n}\n// > 1. Alice\n// > 2. Anna\n// > 3. Bob\n// > 4. Dan\n// > 5. Franklin\n\n// if summing numbers\nfun sumOfElements(list: List<Int>): Int {\n  var sum = 0\n  for (number in list) {\n    sum += number\n  }\nreturn sum }","position":{"start":{"line":126,"column":1,"offset":2639},"end":{"line":153,"column":4,"offset":3057},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Nullable Lists","position":{"start":{"line":155,"column":4,"offset":3062},"end":{"line":155,"column":18,"offset":3076},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":3059},"end":{"line":155,"column":18,"offset":3076},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can have nullable lists, a list of nullables or both.","position":{"start":{"line":157,"column":1,"offset":3078},"end":{"line":157,"column":58,"offset":3135},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":3078},"end":{"line":157,"column":58,"offset":3135},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"var nullableList = List<Int>? = listOf(1,2,3,4) // list can be nullable\nvar listOfNullables = List<Int?> = listOf(1,2,null,4) // elements can be null","position":{"start":{"line":159,"column":1,"offset":3137},"end":{"line":162,"column":4,"offset":3300},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Maps and Sets","position":{"start":{"line":164,"column":4,"offset":3305},"end":{"line":164,"column":17,"offset":3318},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":3302},"end":{"line":164,"column":17,"offset":3318},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A map is an unordered collection of pairs, where each pair is compised of a a key and value.","position":{"start":{"line":166,"column":1,"offset":3320},"end":{"line":166,"column":93,"offset":3412},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":3320},"end":{"line":166,"column":93,"offset":3412},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Creating Maps","position":{"start":{"line":168,"column":4,"offset":3417},"end":{"line":168,"column":17,"offset":3430},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":3414},"end":{"line":168,"column":17,"offset":3430},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":" var yearOfBirth = mapOf(\"Anna\" to 1990, \"Brian\" to 1991, \"Craig\" to 1992,\n\"Donna\" to 1993)\nvar namesAndScores = mutableMapOf(\"Anna\" to 2, \"Brian\" to 2, \"Craig\" to\n8, \"Donna\" to 6)\nprintln(namesAndScores) // > {Anna=2, Brian=2, Craig=8, Donna=6}\nnamesAndScores = mutableMapOf()\nvar pairs = HashMap<String, Int>()\npairs = HashMap<String, Int>(20)","position":{"start":{"line":170,"column":1,"offset":3432},"end":{"line":179,"column":4,"offset":3791},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Mutating Mutable Maps","position":{"start":{"line":181,"column":4,"offset":3796},"end":{"line":181,"column":25,"offset":3817},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":3793},"end":{"line":181,"column":25,"offset":3817},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val bobData = mutableMapOf(\n  \"name\" to \"Bob\",\n  \"profession\" to \"CardPlayer\",\n  \"country\" to \"USA\")\nbobData.put(\"state\", \"CA\")\nbobData[\"city\"] = \"San Francisco\"","position":{"start":{"line":183,"column":1,"offset":3819},"end":{"line":190,"column":4,"offset":3994},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Updating Map Values","position":{"start":{"line":192,"column":5,"offset":4000},"end":{"line":192,"column":24,"offset":4019},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":3996},"end":{"line":192,"column":24,"offset":4019},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"bobData.put(\"name\", \"Bobby\") // Bob\nbobData[\"profession\"] = \"Mailman\"\nval pair = \"nickname\" to \"Bobby D\"\nbobData += pair\nprintln(bobData)\n// > {name=Bobby, profession=Mailman, country=USA, state=CA, city=San\nFrancisco, nickname=Bobby D}","position":{"start":{"line":194,"column":1,"offset":4021},"end":{"line":202,"column":4,"offset":4271},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Removing Pairs","position":{"start":{"line":204,"column":5,"offset":4277},"end":{"line":204,"column":19,"offset":4291},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":4273},"end":{"line":204,"column":19,"offset":4291},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"bobData.remove(\"city\")\nbobData.remove(\"state\", \"CA\")","position":{"start":{"line":206,"column":1,"offset":4293},"end":{"line":209,"column":4,"offset":4359},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Iterating through maps","position":{"start":{"line":211,"column":5,"offset":4365},"end":{"line":211,"column":27,"offset":4387},"indent":[]}}],"position":{"start":{"line":211,"column":1,"offset":4361},"end":{"line":211,"column":27,"offset":4387},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"for ((player, score) in namesAndScores) {\n  println (\"$player - $score\")\n}\n// > Anna - 2\n// > Brian - 2\n// > Craig - 8\n// > Donna - 6\n\nfor (player in namesAndScores.keys) {\n  print(\"$player, \") // no newline\n}\nprintln() // print a newline\n// > Anna, Brian, Craig, Donna,","position":{"start":{"line":213,"column":1,"offset":4389},"end":{"line":227,"column":4,"offset":4673},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note: For performance-critical code, ","position":{"start":{"line":229,"column":1,"offset":4675},"end":{"line":229,"column":38,"offset":4712},"indent":[]}},{"type":"inlineCode","value":"HashMap<K, V>","position":{"start":{"line":229,"column":38,"offset":4712},"end":{"line":229,"column":53,"offset":4727},"indent":[]}},{"type":"text","value":" should be used via ","position":{"start":{"line":229,"column":53,"offset":4727},"end":{"line":229,"column":73,"offset":4747},"indent":[]}},{"type":"inlineCode","value":"hashMapOf()","position":{"start":{"line":229,"column":73,"offset":4747},"end":{"line":229,"column":86,"offset":4760},"indent":[]}},{"type":"text","value":" instead of ","position":{"start":{"line":229,"column":86,"offset":4760},"end":{"line":229,"column":98,"offset":4772},"indent":[]}},{"type":"inlineCode","value":"mapOf()","position":{"start":{"line":229,"column":98,"offset":4772},"end":{"line":229,"column":107,"offset":4781},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":229,"column":107,"offset":4781},"end":{"line":229,"column":108,"offset":4782},"indent":[]}}],"position":{"start":{"line":229,"column":1,"offset":4675},"end":{"line":229,"column":108,"offset":4782},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Sets","position":{"start":{"line":231,"column":4,"offset":4787},"end":{"line":231,"column":8,"offset":4791},"indent":[]}}],"position":{"start":{"line":231,"column":1,"offset":4784},"end":{"line":231,"column":8,"offset":4791},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A set is an unordered collection of unique values of the same type. This can be useful for uniqueness.","position":{"start":{"line":233,"column":1,"offset":4793},"end":{"line":233,"column":103,"offset":4895},"indent":[]}}],"position":{"start":{"line":233,"column":1,"offset":4793},"end":{"line":233,"column":103,"offset":4895},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val names = setOf(\"Anna\", \"Brian\", \"Craig\", \"Anna\")\nprintln(names)\n// > [Anna, Brian, Craig]\n\n// for an empty set\nval hashSet = HashSet<Int>()","position":{"start":{"line":235,"column":1,"offset":4897},"end":{"line":242,"column":4,"offset":5053},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Sets from Arrays","position":{"start":{"line":244,"column":4,"offset":5058},"end":{"line":244,"column":20,"offset":5074},"indent":[]}}],"position":{"start":{"line":244,"column":1,"offset":5055},"end":{"line":244,"column":20,"offset":5074},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"val someArray = arrayOf(1, 2, 3, 1)\nvar someSet = mutableSetOf(*someArray)\nprintln(someSet) // > [1, 2, 3]\n\nprintln(someSet.contains(1))\n// > true\n\nprintln(4 in someSet)\n// > false","position":{"start":{"line":246,"column":1,"offset":5076},"end":{"line":256,"column":4,"offset":5270},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding Or Removing Elements","position":{"start":{"line":258,"column":4,"offset":5275},"end":{"line":258,"column":31,"offset":5302},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":5272},"end":{"line":258,"column":31,"offset":5302},"indent":[]}},{"type":"code","lang":"kotlin","meta":null,"value":"someSet.add(5)\nval removedOne = someSet.remove(1)\nprintln(removedOne) // > true\nprintln(someSet)\n// > [2, 3, 5]","position":{"start":{"line":260,"column":1,"offset":5304},"end":{"line":266,"column":4,"offset":5429},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":269,"column":1,"offset":5432},"end":{"line":269,"column":31,"offset":5462},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":269,"column":31,"offset":5462}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"kotlin-arrays-and-lists\"\n    }}>{`Kotlin Arrays And Lists`}</h1>\n    <h2 {...{\n      \"id\": \"creating-arrays\"\n    }}>{`Creating Arrays`}</h2>\n    <p>{`Easiest way is to use the `}<inlineCode parentName=\"p\">{`arrayOf`}</inlineCode>{` func. Kotlin will infer the type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val evenNumbers = arrayOf(2,4,6,8)\n\n// easy way to create an array with default values\nval fiveFives = arrayOf(5, {5}) // 5,5,5,5,5\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"array-of-primitives\"\n    }}>{`Array Of Primitives`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val oddNumbers = intArrayOf(1,3,5,7)\nval zeros = DoubleArray(4) // 0.0, 0.0, 0.0, 0.0\nval otherOddNumbers = arrayOf(1,3,5,7).toIntArray()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lists\"\n    }}>{`Lists`}</h2>\n    <p>{`List type in Kotlin is an interface that has concrete realizations in types such as ArrayList, LinkedList and others.`}</p>\n    <p>{`Lists have the additional features of being `}<inlineCode parentName=\"p\">{`dynamically-sized`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val innerPlanets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"empty-lists\"\n    }}>{`Empty Lists`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val subscribers: List<String> = listOf()\n// same as\nval subscribers = listOf<String>()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mutable-lists\"\n    }}>{`Mutable Lists`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val outerPlanets = mutableListOf(\"Jupiter\", \"Saturn\", \"Uranus\",\n\"Neptune\")\nval exoPlanets = mutableListOf<String>()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"list-properties-and-methods\"\n    }}>{`List Properties and Methods`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val players = mutableListOf(\"Alice\", \"Bob\", \"Cindy\", \"Dan\")\n\nprint(players.isEmpty()) // > false\n\nif (players.size < 2) {\n  println(\"We need at least two players!\")\n} else {\n  println(\"Let's start!\")\n}\n// > Let's start!\n\nvar currentPlayer = players.first()\nprintln(currentPlayer) // > Alice\nprintln(players.last()) // > Dan\n\nval minPlayer = players.min()\nminPlayer.let {\n  println(\"$minPlayer will start\") // > Alice will start\n}\n\nprintln(arrayOf(2, 3, 1).first())\n// > 2\nprintln(arrayOf(2, 3, 1).min())\n// > 1\n\nval maxPlayer = players.max()\nif (maxPlayer != null) {\n  println(\"$maxPlayer is the MAX\") // > Dan is the MAX\n}\n\nval firstPlayer = players[0]\nprintln(\"First player is $firstPlayer\")\n// > First player is Alice\nval secondPlayer = players.get(1)\n\nval upcomingPlayersSlice = players.slice(1..2)\nprintln(upcomingPlayersSlice.joinToString()) // > Bob, Cindy\n\nplayers.slice(1..3).contains(\"Alice\") // false\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-list-elements\"\n    }}>{`Adding List Elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`players.add(\"Eli\")\n// or\nplayers += \"Gina\"\n\nprintln(players.joinToString())\n// > \"Alice\", \"Bob\", \"Cindy\", \"Dan\", \"Eli\", \"Gina\"\n\n// inserting elements\nplayers.add(5, \"Frank\")\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"removing-list-elements\"\n    }}>{`Removing List Elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val wasPlayerRemoved = players.remove(\"Gina\")\nprintln(\"It is $wasPlayerRemoved that Gina was removed\")\n// > It is true that Gina was removed\n\nval removedPlayer = players.removeAt(2)\nprintln(\"$removedPlayer was removed\") // > Cindy was removed\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iterating-through-a-list\"\n    }}>{`Iterating Through A List`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`for (player in players) {\n  println(player)\n}\n// > Alice\n// > Anna\n// > Bob\n// > Dan\n// > Franklin\n\n// with index\nfor ((index, player) in players.withIndex()) {\n  println(\"\\${index + 1}. $player\")\n}\n// > 1. Alice\n// > 2. Anna\n// > 3. Bob\n// > 4. Dan\n// > 5. Franklin\n\n// if summing numbers\nfun sumOfElements(list: List<Int>): Int {\n  var sum = 0\n  for (number in list) {\n    sum += number\n  }\nreturn sum }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"nullable-lists\"\n    }}>{`Nullable Lists`}</h2>\n    <p>{`You can have nullable lists, a list of nullables or both.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var nullableList = List<Int>? = listOf(1,2,3,4) // list can be nullable\nvar listOfNullables = List<Int?> = listOf(1,2,null,4) // elements can be null\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"maps-and-sets\"\n    }}>{`Maps and Sets`}</h2>\n    <p>{`A map is an unordered collection of pairs, where each pair is compised of a a key and value.`}</p>\n    <h2 {...{\n      \"id\": \"creating-maps\"\n    }}>{`Creating Maps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{` var yearOfBirth = mapOf(\"Anna\" to 1990, \"Brian\" to 1991, \"Craig\" to 1992,\n\"Donna\" to 1993)\nvar namesAndScores = mutableMapOf(\"Anna\" to 2, \"Brian\" to 2, \"Craig\" to\n8, \"Donna\" to 6)\nprintln(namesAndScores) // > {Anna=2, Brian=2, Craig=8, Donna=6}\nnamesAndScores = mutableMapOf()\nvar pairs = HashMap<String, Int>()\npairs = HashMap<String, Int>(20)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mutating-mutable-maps\"\n    }}>{`Mutating Mutable Maps`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val bobData = mutableMapOf(\n  \"name\" to \"Bob\",\n  \"profession\" to \"CardPlayer\",\n  \"country\" to \"USA\")\nbobData.put(\"state\", \"CA\")\nbobData[\"city\"] = \"San Francisco\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"updating-map-values\"\n    }}>{`Updating Map Values`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`bobData.put(\"name\", \"Bobby\") // Bob\nbobData[\"profession\"] = \"Mailman\"\nval pair = \"nickname\" to \"Bobby D\"\nbobData += pair\nprintln(bobData)\n// > {name=Bobby, profession=Mailman, country=USA, state=CA, city=San\nFrancisco, nickname=Bobby D}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"removing-pairs\"\n    }}>{`Removing Pairs`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`bobData.remove(\"city\")\nbobData.remove(\"state\", \"CA\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"iterating-through-maps\"\n    }}>{`Iterating through maps`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`for ((player, score) in namesAndScores) {\n  println (\"$player - $score\")\n}\n// > Anna - 2\n// > Brian - 2\n// > Craig - 8\n// > Donna - 6\n\nfor (player in namesAndScores.keys) {\n  print(\"$player, \") // no newline\n}\nprintln() // print a newline\n// > Anna, Brian, Craig, Donna,\n`}</code></pre>\n    <p>{`Note: For performance-critical code, `}<inlineCode parentName=\"p\">{`HashMap<K, V>`}</inlineCode>{` should be used via `}<inlineCode parentName=\"p\">{`hashMapOf()`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`mapOf()`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"sets\"\n    }}>{`Sets`}</h2>\n    <p>{`A set is an unordered collection of unique values of the same type. This can be useful for uniqueness.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val names = setOf(\"Anna\", \"Brian\", \"Craig\", \"Anna\")\nprintln(names)\n// > [Anna, Brian, Craig]\n\n// for an empty set\nval hashSet = HashSet<Int>()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sets-from-arrays\"\n    }}>{`Sets from Arrays`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val someArray = arrayOf(1, 2, 3, 1)\nvar someSet = mutableSetOf(*someArray)\nprintln(someSet) // > [1, 2, 3]\n\nprintln(someSet.contains(1))\n// > true\n\nprintln(4 in someSet)\n// > false\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-or-removing-elements\"\n    }}>{`Adding Or Removing Elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`someSet.add(5)\nval removedOne = someSet.remove(1)\nprintln(removedOne) // > true\nprintln(someSet)\n// > [2, 3, 5]\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}