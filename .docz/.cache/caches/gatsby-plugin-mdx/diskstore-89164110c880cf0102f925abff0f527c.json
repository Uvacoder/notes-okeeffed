{"expireTime":9007200852878417000,"key":"gatsby-plugin-mdx-entire-payload-4e57f66845fc093fda3586608c861c7e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The New Hard Parts","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":21,"offset":187},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":21,"offset":187},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":192},"end":{"line":10,"column":13,"offset":201},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":189},"end":{"line":10,"column":13,"offset":201},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://frontendmasters.com/courses/javascript-new-hard-parts/","children":[{"type":"text","value":"FE Masters Course","position":{"start":{"line":12,"column":5,"offset":207},"end":{"line":12,"column":22,"offset":224},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":206},"end":{"line":12,"column":87,"offset":289},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":206},"end":{"line":12,"column":87,"offset":289},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":203},"end":{"line":12,"column":87,"offset":289},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://static.frontendmasters.com/resources/2018-05-23-javascript-new-hard-parts/new-hard-parts-slides.pdf","children":[{"type":"text","value":"Course Slides","position":{"start":{"line":13,"column":5,"offset":294},"end":{"line":13,"column":18,"offset":307},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":293},"end":{"line":13,"column":128,"offset":417},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":293},"end":{"line":13,"column":128,"offset":417},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":290},"end":{"line":13,"column":128,"offset":417},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://csbin.io/iterators","children":[{"type":"text","value":"Iterator Exercises","position":{"start":{"line":14,"column":5,"offset":422},"end":{"line":14,"column":23,"offset":440},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":421},"end":{"line":14,"column":51,"offset":468},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":421},"end":{"line":14,"column":51,"offset":468},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":418},"end":{"line":14,"column":51,"offset":468},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield","children":[{"type":"text","value":"MDN yield Docs","position":{"start":{"line":15,"column":5,"offset":473},"end":{"line":15,"column":19,"offset":487},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":472},"end":{"line":15,"column":103,"offset":571},"indent":[]}}],"position":{"start":{"line":15,"column":4,"offset":472},"end":{"line":15,"column":103,"offset":571},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":469},"end":{"line":15,"column":103,"offset":571},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":203},"end":{"line":15,"column":103,"offset":571},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Iterators","position":{"start":{"line":17,"column":4,"offset":576},"end":{"line":17,"column":13,"offset":585},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":573},"end":{"line":17,"column":13,"offset":585},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We regularly have lists/collections/data where we want to go through the elements and do something ie","position":{"start":{"line":19,"column":1,"offset":587},"end":{"line":19,"column":102,"offset":688},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":587},"end":{"line":19,"column":102,"offset":688},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"for (let i = 0; i < numbers.length; i++) {\n  console.log(numbers[i]);\n}","position":{"start":{"line":21,"column":1,"offset":690},"end":{"line":25,"column":4,"offset":779},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We're going to discover there's a new beautiful way of thinking about using each element one-by-one.","position":{"start":{"line":27,"column":1,"offset":781},"end":{"line":27,"column":101,"offset":881},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":781},"end":{"line":27,"column":101,"offset":881},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Programs store data and apply functonality to it. But there are two parts to applying functions to collections of data.","position":{"start":{"line":29,"column":3,"offset":885},"end":{"line":29,"column":122,"offset":1004},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":885},"end":{"line":29,"column":122,"offset":1004},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":883},"end":{"line":29,"column":122,"offset":1004},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The parts are:","position":{"start":{"line":31,"column":1,"offset":1006},"end":{"line":31,"column":15,"offset":1020},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1006},"end":{"line":31,"column":15,"offset":1020},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The process of accessing each element.","position":{"start":{"line":33,"column":4,"offset":1025},"end":{"line":33,"column":42,"offset":1063},"indent":[]}}],"position":{"start":{"line":33,"column":4,"offset":1025},"end":{"line":33,"column":42,"offset":1063},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1022},"end":{"line":33,"column":42,"offset":1063},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"What we want to do to each element.","position":{"start":{"line":34,"column":4,"offset":1067},"end":{"line":34,"column":39,"offset":1102},"indent":[]}}],"position":{"start":{"line":34,"column":4,"offset":1067},"end":{"line":34,"column":39,"offset":1102},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1064},"end":{"line":34,"column":39,"offset":1102},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1022},"end":{"line":34,"column":39,"offset":1102},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Iterators automate the accessing of each element - so we can focus on what to do to each element - and make it available to us in a smooth way.","position":{"start":{"line":36,"column":1,"offset":1104},"end":{"line":36,"column":144,"offset":1247},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1104},"end":{"line":36,"column":144,"offset":1247},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we can create a function that stored numbers and each time we ran the function return the next element, it would let us think of our array/list as a stream/flow of data with our function returning the next element from our \"stream\" - this makes our code more readable and more functional.","position":{"start":{"line":38,"column":1,"offset":1249},"end":{"line":38,"column":292,"offset":1540},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1249},"end":{"line":38,"column":292,"offset":1540},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Remember, functions can be returned from other functions in JavaScript.","position":{"start":{"line":40,"column":3,"offset":1544},"end":{"line":40,"column":74,"offset":1615},"indent":[]}}],"position":{"start":{"line":40,"column":3,"offset":1544},"end":{"line":40,"column":74,"offset":1615},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1542},"end":{"line":40,"column":74,"offset":1615},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Return Next Element with a Function","position":{"start":{"line":42,"column":5,"offset":1621},"end":{"line":42,"column":40,"offset":1656},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1617},"end":{"line":42,"column":40,"offset":1656},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"// Note: There will eventually be an error with this\n// that isn't currently handled.\nfunction createFunction(array) {\n  let i = 0;\n  const inner: {\n    next: function() {\n       const element = array[i];\n       i++;\n       return element;\n    }\n  }\n  return inner;\n}\n\nconst returnNextElement = createFunction([4, 5, 6]);","position":{"start":{"line":44,"column":1,"offset":1658},"end":{"line":60,"column":4,"offset":1997},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Any function that returns the next element is known as an \"iterator function\".","position":{"start":{"line":62,"column":3,"offset":2001},"end":{"line":62,"column":81,"offset":2079},"indent":[]}}],"position":{"start":{"line":62,"column":3,"offset":2001},"end":{"line":62,"column":81,"offset":2079},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1999},"end":{"line":62,"column":81,"offset":2079},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Generators","position":{"start":{"line":64,"column":4,"offset":2084},"end":{"line":64,"column":14,"offset":2094},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2081},"end":{"line":64,"column":14,"offset":2094},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once we start thinking of data as flows (picking elements one-by-one), we can rethink how we produce those flows. JS let's us do this with a function:","position":{"start":{"line":66,"column":1,"offset":2096},"end":{"line":66,"column":151,"offset":2246},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2096},"end":{"line":66,"column":151,"offset":2246},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function* createFlow() {\n  yield 4;\n  yield 5;\n  yield 6;\n}\n\nconst returnNextElement = createFlow();\nconst element1 = returnNextElement.next();\nconst element2 = returnNextElement.next();","position":{"start":{"line":68,"column":1,"offset":2248},"end":{"line":78,"column":4,"offset":2452},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Yielding allows us to dynamically set what data flows out to us. The implication of ","position":{"start":{"line":80,"column":1,"offset":2454},"end":{"line":80,"column":85,"offset":2538},"indent":[]}},{"type":"inlineCode","value":"yield","position":{"start":{"line":80,"column":85,"offset":2538},"end":{"line":80,"column":92,"offset":2545},"indent":[]}},{"type":"text","value":" is that the work that comes of a function is what is stored:","position":{"start":{"line":80,"column":92,"offset":2545},"end":{"line":80,"column":153,"offset":2606},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2454},"end":{"line":80,"column":153,"offset":2606},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function* createFlow() {\n  const num = 10;\n  const newNum = yield num;\n  yield 5 + newNum;\n  yield 6;\n}\n\nconst returnNextElement = createFlow();\nconst element1 = returnNextElement.next(); // 10\nconst element2 = returnNextElement.next(2); // 7 - be wary of that","position":{"start":{"line":82,"column":1,"offset":2608},"end":{"line":93,"column":4,"offset":2886},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Generators are described to be more towards the declarative side and not the imperative.","position":{"start":{"line":95,"column":3,"offset":2890},"end":{"line":95,"column":91,"offset":2978},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":2890},"end":{"line":95,"column":91,"offset":2978},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2888},"end":{"line":95,"column":91,"offset":2978},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"A great insight was the idea of being able to infinitely calculate the fibonacci sequence.","position":{"start":{"line":97,"column":3,"offset":2982},"end":{"line":97,"column":93,"offset":3072},"indent":[]}}],"position":{"start":{"line":97,"column":3,"offset":2982},"end":{"line":97,"column":93,"offset":3072},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2980},"end":{"line":97,"column":93,"offset":3072},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Async Generators","position":{"start":{"line":99,"column":4,"offset":3077},"end":{"line":99,"column":20,"offset":3093},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":3074},"end":{"line":99,"column":20,"offset":3093},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We have the ability to pause and only restart when the data returns.","position":{"start":{"line":101,"column":1,"offset":3095},"end":{"line":101,"column":69,"offset":3163},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":3095},"end":{"line":101,"column":69,"offset":3163},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function doWhenDataReceived(value) {\n  returnNextElement.next(value)\n}\n\nfunction* createFlow() {\n  const data = yield fetch('http://twitter.com/will/tweets/1`)\n  console.log(data)\n}\n\nconst returnNextElement = createFlow()\nconst futureData = returnNextElement.next()\n\nfutureData.then(doWhenDataReceived)","position":{"start":{"line":103,"column":1,"offset":3165},"end":{"line":117,"column":4,"offset":3485},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Important to note how this generate continues to keep things asynchronous.","position":{"start":{"line":119,"column":3,"offset":3489},"end":{"line":119,"column":77,"offset":3563},"indent":[]}}],"position":{"start":{"line":119,"column":3,"offset":3489},"end":{"line":119,"column":77,"offset":3563},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":3487},"end":{"line":119,"column":77,"offset":3563},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Async Await","position":{"start":{"line":121,"column":4,"offset":3568},"end":{"line":121,"column":15,"offset":3579},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":3565},"end":{"line":121,"column":15,"offset":3579},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function doWhenDataReceived(value) {\n  returnNextElement.next(value)\n}\n\nfunction* createFlow() {\n  console.log('Me first')\n  const data = await fetch('http://twitter.com/will/tweets/1`)\n  console.log(data)\n}\n\ncreateFlow()\nconsole.log('Me second')","position":{"start":{"line":123,"column":1,"offset":3581},"end":{"line":136,"column":4,"offset":3845},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":139,"column":1,"offset":3848},"end":{"line":139,"column":31,"offset":3878},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":139,"column":31,"offset":3878}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"the-new-hard-parts\"\n    }}>{`The New Hard Parts`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/javascript-new-hard-parts/\"\n        }}>{`FE Masters Course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://static.frontendmasters.com/resources/2018-05-23-javascript-new-hard-parts/new-hard-parts-slides.pdf\"\n        }}>{`Course Slides`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"http://csbin.io/iterators\"\n        }}>{`Iterator Exercises`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\"\n        }}>{`MDN yield Docs`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"iterators\"\n    }}>{`Iterators`}</h2>\n    <p>{`We regularly have lists/collections/data where we want to go through the elements and do something ie`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`for (let i = 0; i < numbers.length; i++) {\n  console.log(numbers[i]);\n}\n`}</code></pre>\n    <p>{`We're going to discover there's a new beautiful way of thinking about using each element one-by-one.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Programs store data and apply functonality to it. But there are two parts to applying functions to collections of data.`}</p>\n    </blockquote>\n    <p>{`The parts are:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The process of accessing each element.`}</li>\n      <li parentName=\"ol\">{`What we want to do to each element.`}</li>\n    </ol>\n    <p>{`Iterators automate the accessing of each element - so we can focus on what to do to each element - and make it available to us in a smooth way.`}</p>\n    <p>{`If we can create a function that stored numbers and each time we ran the function return the next element, it would let us think of our array/list as a stream/flow of data with our function returning the next element from our \"stream\" - this makes our code more readable and more functional.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Remember, functions can be returned from other functions in JavaScript.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"return-next-element-with-a-function\"\n    }}>{`Return Next Element with a Function`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Note: There will eventually be an error with this\n// that isn't currently handled.\nfunction createFunction(array) {\n  let i = 0;\n  const inner: {\n    next: function() {\n       const element = array[i];\n       i++;\n       return element;\n    }\n  }\n  return inner;\n}\n\nconst returnNextElement = createFunction([4, 5, 6]);\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Any function that returns the next element is known as an \"iterator function\".`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"generators\"\n    }}>{`Generators`}</h2>\n    <p>{`Once we start thinking of data as flows (picking elements one-by-one), we can rethink how we produce those flows. JS let's us do this with a function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function* createFlow() {\n  yield 4;\n  yield 5;\n  yield 6;\n}\n\nconst returnNextElement = createFlow();\nconst element1 = returnNextElement.next();\nconst element2 = returnNextElement.next();\n`}</code></pre>\n    <p>{`Yielding allows us to dynamically set what data flows out to us. The implication of `}<inlineCode parentName=\"p\">{`yield`}</inlineCode>{` is that the work that comes of a function is what is stored:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function* createFlow() {\n  const num = 10;\n  const newNum = yield num;\n  yield 5 + newNum;\n  yield 6;\n}\n\nconst returnNextElement = createFlow();\nconst element1 = returnNextElement.next(); // 10\nconst element2 = returnNextElement.next(2); // 7 - be wary of that\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Generators are described to be more towards the declarative side and not the imperative.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`A great insight was the idea of being able to infinitely calculate the fibonacci sequence.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"async-generators\"\n    }}>{`Async Generators`}</h2>\n    <p>{`We have the ability to pause and only restart when the data returns.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function doWhenDataReceived(value) {\n  returnNextElement.next(value)\n}\n\nfunction* createFlow() {\n  const data = yield fetch('http://twitter.com/will/tweets/1\\`)\n  console.log(data)\n}\n\nconst returnNextElement = createFlow()\nconst futureData = returnNextElement.next()\n\nfutureData.then(doWhenDataReceived)\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Important to note how this generate continues to keep things asynchronous.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"async-await\"\n    }}>{`Async Await`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function doWhenDataReceived(value) {\n  returnNextElement.next(value)\n}\n\nfunction* createFlow() {\n  console.log('Me first')\n  const data = await fetch('http://twitter.com/will/tweets/1\\`)\n  console.log(data)\n}\n\ncreateFlow()\nconsole.log('Me second')\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}