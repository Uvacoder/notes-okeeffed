{"expireTime":9007200852878437000,"key":"gatsby-plugin-mdx-entire-payload-562402f2a5d438aa55660795827508e2-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Elm Guide","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":12,"offset":178},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":12,"offset":178},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is a basic Elm guide that follows on from the ","position":{"start":{"line":10,"column":1,"offset":180},"end":{"line":10,"column":52,"offset":231},"indent":[]}},{"type":"link","title":null,"url":"https://guide.elm-lang.org/core_language.html","children":[{"type":"text","value":"core language tour","position":{"start":{"line":10,"column":53,"offset":232},"end":{"line":10,"column":71,"offset":250},"indent":[]}}],"position":{"start":{"line":10,"column":52,"offset":231},"end":{"line":10,"column":119,"offset":298},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":10,"column":119,"offset":298},"end":{"line":10,"column":120,"offset":299},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":180},"end":{"line":10,"column":120,"offset":299},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Values","position":{"start":{"line":12,"column":4,"offset":304},"end":{"line":12,"column":10,"offset":310},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":301},"end":{"line":12,"column":10,"offset":310},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"-- Boolean\nTrue  : Bool\nFalse : Bool\n\n42    : number  -- Int or Float depending on usage\n3.14  : Float\n\n'a'   : Char\n\"abc\" : String\n\n-- multi-line String\n\"\"\"\nThis is useful for holding JSON or other\ncontent that has \"quotation marks\".\n\"\"\"","position":{"start":{"line":14,"column":1,"offset":312},"end":{"line":30,"column":4,"offset":561},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Comments","position":{"start":{"line":32,"column":4,"offset":566},"end":{"line":32,"column":12,"offset":574},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":563},"end":{"line":32,"column":12,"offset":574},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"-- a single line comment\n\n{- a multiline comment\n   {- can be nested -}\n-}\n\n-- remove the } below to toggle on/off\n{--}\nadd x y = x + y\n--}","position":{"start":{"line":34,"column":1,"offset":576},"end":{"line":45,"column":4,"offset":726},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Lists","position":{"start":{"line":47,"column":4,"offset":731},"end":{"line":47,"column":9,"offset":736},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":728},"end":{"line":47,"column":9,"offset":736},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following are equivocal:","position":{"start":{"line":49,"column":1,"offset":738},"end":{"line":49,"column":29,"offset":766},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":738},"end":{"line":49,"column":29,"offset":766},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"[1,2,3,4]\n1 :: [2,3,4]\n1 :: 2 :: 3 :: 4 :: []","position":{"start":{"line":51,"column":1,"offset":768},"end":{"line":55,"column":4,"offset":824},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Conditionals","position":{"start":{"line":57,"column":4,"offset":829},"end":{"line":57,"column":16,"offset":841},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":826},"end":{"line":57,"column":16,"offset":841},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"if powerLevel > 9000 then \"Over 9000!\" else \"dbz joke not applicable\"\n\n-- multiple conditions\nif key == 40 then\n  n + 1\nelse if key == 38 then\n  n - 1\nelse\n  n\n\n-- conditionals based on structure of algebraic data types and literals\ncase maybeList of\n  Just xs -> xs\n  Nothing -> []\n\ncase xs of\n  [] ->\n    Nothing\n  first :: rest ->\n    Just (first, rest)\n\ncase n of\n  0 -> 1\n  1 -> 1\n  _ -> fib (n-1) + fib (n-2)","position":{"start":{"line":59,"column":1,"offset":843},"end":{"line":85,"column":4,"offset":1268},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Functions","position":{"start":{"line":87,"column":4,"offset":1273},"end":{"line":87,"column":13,"offset":1282},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":1270},"end":{"line":87,"column":13,"offset":1282},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"square n =\n  n^2","position":{"start":{"line":89,"column":1,"offset":1284},"end":{"line":92,"column":4,"offset":1311},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Records","position":{"start":{"line":94,"column":4,"offset":1316},"end":{"line":94,"column":11,"offset":1323},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":1313},"end":{"line":94,"column":11,"offset":1323},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"-- create records\norigin = { x = 0, y = 0 }\npoint = { x = 3, y = 4 }\n\n-- access fields\norigin.x == 0\npoint.x == 3\n\n-- field access function\nList.map .x [ origin, point ] == [ 0, 3 ]\n\n-- update a field\n{ point | x = 6 } == { x = 6, y = 4 }\n\n-- update many fields\n{ point | x = point.x + 1, y = point.y + 1 }","position":{"start":{"line":96,"column":1,"offset":1325},"end":{"line":113,"column":4,"offset":1642},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pipes","position":{"start":{"line":115,"column":4,"offset":1647},"end":{"line":115,"column":9,"offset":1652},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":1644},"end":{"line":115,"column":9,"offset":1652},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Note: \"Pipes\" is not the technical term in Elm.","position":{"start":{"line":117,"column":1,"offset":1654},"end":{"line":117,"column":48,"offset":1701},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":1654},"end":{"line":117,"column":48,"offset":1701},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"viewNames1 names =\n  String.join \", \" (List.sort names)\n\nviewNames2 names =\n  names\n    |> List.sort\n    |> String.join \", \"\n\n-- (arg |> func) is the same as (func arg)\n-- Just keep repeating that transformation!","position":{"start":{"line":119,"column":1,"offset":1703},"end":{"line":130,"column":4,"offset":1926},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Let Expressions","position":{"start":{"line":132,"column":4,"offset":1931},"end":{"line":132,"column":19,"offset":1946},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":1928},"end":{"line":132,"column":19,"offset":1946},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is useful once expressions get too big.","position":{"start":{"line":134,"column":1,"offset":1948},"end":{"line":134,"column":45,"offset":1992},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":1948},"end":{"line":134,"column":45,"offset":1992},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"let\n  twentyFour =\n    3 * 8\n\n  sixteen =\n    4 ^ 2\nin\ntwentyFour + sixteen\n\n-- application with a hypotenuse function\nlet\n  ( three, four ) =\n    ( 3, 4 )\n\n  hypotenuse a b =\n    sqrt (a^2 + b^2)\nin\nhypotenuse three four\n\n-- type annotations in \"let\" expressions\nlet\n  name : String\n  name =\n    \"Hermann\"\n\n  increment : Int -> Int\n  increment n =\n    n + 1\nin\nincrement 10","position":{"start":{"line":136,"column":1,"offset":1994},"end":{"line":167,"column":4,"offset":2379},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Applying Functions","position":{"start":{"line":169,"column":4,"offset":2384},"end":{"line":169,"column":22,"offset":2402},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":2381},"end":{"line":169,"column":22,"offset":2402},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"-- alias for appending lists and two lists\nappend xs ys = xs ++ ys\nxs = [1,2,3]\nys = [4,5,6]\n\n-- All of the following expressions are equivalent:\na1 = append xs ys\na2 = xs ++ ys\n\nb2 = (++) xs ys\n\nc1 = (append xs) ys\nc2 = ((++) xs) ys","position":{"start":{"line":171,"column":1,"offset":2404},"end":{"line":185,"column":4,"offset":2648},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Elm Modules","position":{"start":{"line":187,"column":4,"offset":2653},"end":{"line":187,"column":15,"offset":2664},"indent":[]}}],"position":{"start":{"line":187,"column":1,"offset":2650},"end":{"line":187,"column":15,"offset":2664},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Qualified imports are preferred. Module names must match their file name, so module Parser.Utils needs to be in file Parser/Utils.elm.","position":{"start":{"line":189,"column":3,"offset":2668},"end":{"line":189,"column":137,"offset":2802},"indent":[]}}],"position":{"start":{"line":189,"column":3,"offset":2668},"end":{"line":189,"column":137,"offset":2802},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":2666},"end":{"line":189,"column":137,"offset":2802},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"module MyModule exposing (..)\n\n-- qualified imports\nimport List                            -- List.map, List.foldl\nimport List as L                       -- L.map, L.foldl\n\n-- open imports\nimport List exposing (..)              -- map, foldl, concat, ...\nimport List exposing ( map, foldl )    -- map, foldl\n\nimport Maybe exposing ( Maybe )        -- Maybe\nimport Maybe exposing ( Maybe(..) )    -- Maybe, Just, Nothing","position":{"start":{"line":191,"column":1,"offset":2804},"end":{"line":204,"column":4,"offset":3234},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Type Annotations + Aliases","position":{"start":{"line":206,"column":4,"offset":3239},"end":{"line":206,"column":30,"offset":3265},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":3236},"end":{"line":206,"column":30,"offset":3265},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"-- annotations\nanswer : Int\nanswer =\n  42\n\nfactorial : Int -> Int\nfactorial n =\n  List.product (List.range 1 n)\n\ndistance : { x : Float, y : Float } -> Float\ndistance {x,y} =\n  sqrt (x^2 + y^2)\n\n-- aliases\ntype alias Name = String\ntype alias Age = Int\n\ninfo : (Name,Age)\ninfo =\n  (\"Steve\", 28)\n\ntype alias Point = { x:Float, y:Float }\n\norigin : Point\norigin =\n  { x = 0, y = 0 }","position":{"start":{"line":208,"column":1,"offset":3267},"end":{"line":235,"column":4,"offset":3656},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Custom Types","position":{"start":{"line":237,"column":4,"offset":3661},"end":{"line":237,"column":16,"offset":3673},"indent":[]}}],"position":{"start":{"line":237,"column":1,"offset":3658},"end":{"line":237,"column":16,"offset":3673},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"type User\n  = Regular String Int\n  | Visitor String","position":{"start":{"line":239,"column":1,"offset":3675},"end":{"line":243,"column":4,"offset":3737},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Interoperability with JS and Porting","position":{"start":{"line":245,"column":4,"offset":3742},"end":{"line":245,"column":40,"offset":3778},"indent":[]}}],"position":{"start":{"line":245,"column":1,"offset":3739},"end":{"line":245,"column":40,"offset":3778},"indent":[]}},{"type":"code","lang":"elm","meta":null,"value":"-- incoming values\nport prices : (Float -> msg) -> Sub msg\n\n-- outgoing values\nport time : Float -> Cmd msg","position":{"start":{"line":247,"column":1,"offset":3780},"end":{"line":253,"column":4,"offset":3898},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To use this port from JS, you use this:","position":{"start":{"line":255,"column":1,"offset":3900},"end":{"line":255,"column":40,"offset":3939},"indent":[]}}],"position":{"start":{"line":255,"column":1,"offset":3900},"end":{"line":255,"column":40,"offset":3939},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"var app = Elm.Example.init();\n\napp.ports.prices.send(42);\napp.ports.prices.send(13);\n\napp.ports.time.subscribe(callback);\napp.ports.time.unsubscribe(callback);","position":{"start":{"line":257,"column":1,"offset":3941},"end":{"line":265,"column":4,"offset":4118},"indent":[1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":268,"column":1,"offset":4121},"end":{"line":268,"column":31,"offset":4151},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":268,"column":31,"offset":4151}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"elm-guide\"\n    }}>{`Elm Guide`}</h1>\n    <p>{`This is a basic Elm guide that follows on from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://guide.elm-lang.org/core_language.html\"\n      }}>{`core language tour`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"values\"\n    }}>{`Values`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- Boolean\nTrue  : Bool\nFalse : Bool\n\n42    : number  -- Int or Float depending on usage\n3.14  : Float\n\n'a'   : Char\n\"abc\" : String\n\n-- multi-line String\n\"\"\"\nThis is useful for holding JSON or other\ncontent that has \"quotation marks\".\n\"\"\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"comments\"\n    }}>{`Comments`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- a single line comment\n\n{- a multiline comment\n   {- can be nested -}\n-}\n\n-- remove the } below to toggle on/off\n{--}\nadd x y = x + y\n--}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"lists\"\n    }}>{`Lists`}</h2>\n    <p>{`The following are equivocal:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`[1,2,3,4]\n1 :: [2,3,4]\n1 :: 2 :: 3 :: 4 :: []\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"conditionals\"\n    }}>{`Conditionals`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`if powerLevel > 9000 then \"Over 9000!\" else \"dbz joke not applicable\"\n\n-- multiple conditions\nif key == 40 then\n  n + 1\nelse if key == 38 then\n  n - 1\nelse\n  n\n\n-- conditionals based on structure of algebraic data types and literals\ncase maybeList of\n  Just xs -> xs\n  Nothing -> []\n\ncase xs of\n  [] ->\n    Nothing\n  first :: rest ->\n    Just (first, rest)\n\ncase n of\n  0 -> 1\n  1 -> 1\n  _ -> fib (n-1) + fib (n-2)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`square n =\n  n^2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"records\"\n    }}>{`Records`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- create records\norigin = { x = 0, y = 0 }\npoint = { x = 3, y = 4 }\n\n-- access fields\norigin.x == 0\npoint.x == 3\n\n-- field access function\nList.map .x [ origin, point ] == [ 0, 3 ]\n\n-- update a field\n{ point | x = 6 } == { x = 6, y = 4 }\n\n-- update many fields\n{ point | x = point.x + 1, y = point.y + 1 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pipes\"\n    }}>{`Pipes`}</h2>\n    <p>{`Note: \"Pipes\" is not the technical term in Elm.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`viewNames1 names =\n  String.join \", \" (List.sort names)\n\nviewNames2 names =\n  names\n    |> List.sort\n    |> String.join \", \"\n\n-- (arg |> func) is the same as (func arg)\n-- Just keep repeating that transformation!\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"let-expressions\"\n    }}>{`Let Expressions`}</h2>\n    <p>{`This is useful once expressions get too big.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`let\n  twentyFour =\n    3 * 8\n\n  sixteen =\n    4 ^ 2\nin\ntwentyFour + sixteen\n\n-- application with a hypotenuse function\nlet\n  ( three, four ) =\n    ( 3, 4 )\n\n  hypotenuse a b =\n    sqrt (a^2 + b^2)\nin\nhypotenuse three four\n\n-- type annotations in \"let\" expressions\nlet\n  name : String\n  name =\n    \"Hermann\"\n\n  increment : Int -> Int\n  increment n =\n    n + 1\nin\nincrement 10\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"applying-functions\"\n    }}>{`Applying Functions`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- alias for appending lists and two lists\nappend xs ys = xs ++ ys\nxs = [1,2,3]\nys = [4,5,6]\n\n-- All of the following expressions are equivalent:\na1 = append xs ys\na2 = xs ++ ys\n\nb2 = (++) xs ys\n\nc1 = (append xs) ys\nc2 = ((++) xs) ys\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"elm-modules\"\n    }}>{`Elm Modules`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Qualified imports are preferred. Module names must match their file name, so module Parser.Utils needs to be in file Parser/Utils.elm.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`module MyModule exposing (..)\n\n-- qualified imports\nimport List                            -- List.map, List.foldl\nimport List as L                       -- L.map, L.foldl\n\n-- open imports\nimport List exposing (..)              -- map, foldl, concat, ...\nimport List exposing ( map, foldl )    -- map, foldl\n\nimport Maybe exposing ( Maybe )        -- Maybe\nimport Maybe exposing ( Maybe(..) )    -- Maybe, Just, Nothing\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-annotations--aliases\"\n    }}>{`Type Annotations + Aliases`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- annotations\nanswer : Int\nanswer =\n  42\n\nfactorial : Int -> Int\nfactorial n =\n  List.product (List.range 1 n)\n\ndistance : { x : Float, y : Float } -> Float\ndistance {x,y} =\n  sqrt (x^2 + y^2)\n\n-- aliases\ntype alias Name = String\ntype alias Age = Int\n\ninfo : (Name,Age)\ninfo =\n  (\"Steve\", 28)\n\ntype alias Point = { x:Float, y:Float }\n\norigin : Point\norigin =\n  { x = 0, y = 0 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-types\"\n    }}>{`Custom Types`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`type User\n  = Regular String Int\n  | Visitor String\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interoperability-with-js-and-porting\"\n    }}>{`Interoperability with JS and Porting`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-elm\"\n      }}>{`-- incoming values\nport prices : (Float -> msg) -> Sub msg\n\n-- outgoing values\nport time : Float -> Cmd msg\n`}</code></pre>\n    <p>{`To use this port from JS, you use this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var app = Elm.Example.init();\n\napp.ports.prices.send(42);\napp.ports.prices.send(13);\n\napp.ports.time.subscribe(callback);\napp.ports.time.unsubscribe(callback);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}