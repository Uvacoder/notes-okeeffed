{"expireTime":9007200849425521000,"key":"gatsby-plugin-mdx-entire-payload-25fe9f8829331556d8be7d2cb5a2feec-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Mutex Locks","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":14,"offset":180},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":14,"offset":180},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":10,"column":4,"offset":185},"end":{"line":10,"column":11,"offset":192},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":182},"end":{"line":10,"column":11,"offset":192},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"\"\"\"\nThis is a short example demoing how it works, but this example isn't realistic.\n\nWorth thinking about when using thread pools though and accessing shared resources.\n\"\"\"\nimport random\nimport csv\nimport threading\nlock = threading.Lock()\n\nsum = 0\ndata = list(range(1000))\n\nfor element in data:\n  with locks:\n    sum += element","position":{"start":{"line":12,"column":1,"offset":194},"end":{"line":29,"column":4,"offset":535},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":32,"column":1,"offset":538},"end":{"line":32,"column":31,"offset":568},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":32,"column":31,"offset":568}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mutex-locks\"\n    }}>{`Mutex Locks`}</h1>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`\"\"\"\nThis is a short example demoing how it works, but this example isn't realistic.\n\nWorth thinking about when using thread pools though and accessing shared resources.\n\"\"\"\nimport random\nimport csv\nimport threading\nlock = threading.Lock()\n\nsum = 0\ndata = list(range(1000))\n\nfor element in data:\n  with locks:\n    sum += element\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}