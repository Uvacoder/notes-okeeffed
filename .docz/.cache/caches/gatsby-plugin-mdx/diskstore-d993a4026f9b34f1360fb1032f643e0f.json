{"expireTime":9007200849425561000,"key":"gatsby-plugin-mdx-entire-payload-c6c3f4ea7af24480a959a48264f5f06d-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Setting Up Heuristic Matchers","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":32,"offset":198},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":32,"offset":198},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":10,"column":4,"offset":203},"end":{"line":10,"column":13,"offset":212},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":200},"end":{"line":10,"column":13,"offset":212},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://graphql-code-generator.com/docs/plugins/fragment-matcher","children":[{"type":"text","value":"Fragment Matcher - GraphQL Code Generator","position":{"start":{"line":12,"column":5,"offset":218},"end":{"line":12,"column":46,"offset":259},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":217},"end":{"line":12,"column":113,"offset":326},"indent":[]}}],"position":{"start":{"line":12,"column":4,"offset":217},"end":{"line":12,"column":113,"offset":326},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":214},"end":{"line":12,"column":113,"offset":326},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://graphql-code-generator.com/docs/plugins/typescript","children":[{"type":"text","value":"TypeScript - GraphQL Code Generator","position":{"start":{"line":13,"column":5,"offset":331},"end":{"line":13,"column":40,"offset":366},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":330},"end":{"line":13,"column":101,"offset":427},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":330},"end":{"line":13,"column":101,"offset":427},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":327},"end":{"line":13,"column":101,"offset":427},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.apollographql.com/docs/react/data/fragments/","children":[{"type":"text","value":"Apollo Client - Using fragments","position":{"start":{"line":14,"column":5,"offset":432},"end":{"line":14,"column":36,"offset":463},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":431},"end":{"line":14,"column":95,"offset":522},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":431},"end":{"line":14,"column":95,"offset":522},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":428},"end":{"line":14,"column":95,"offset":522},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":214},"end":{"line":14,"column":95,"offset":522},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The issue","position":{"start":{"line":16,"column":4,"offset":527},"end":{"line":16,"column":13,"offset":536},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":524},"end":{"line":16,"column":13,"offset":536},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With Apollo Client, you need to do some extra setup to get Apollo to place nice with heurstics based on unions. If not, it will fail based on a heuristic missing pieces of data.","position":{"start":{"line":18,"column":1,"offset":538},"end":{"line":18,"column":178,"offset":715},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":538},"end":{"line":18,"column":178,"offset":715},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This results in the error state being thrown by the client.","position":{"start":{"line":20,"column":1,"offset":717},"end":{"line":20,"column":60,"offset":776},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":717},"end":{"line":20,"column":60,"offset":776},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In order to resolve this, it requires us to install a few pieces of work.","position":{"start":{"line":22,"column":1,"offset":778},"end":{"line":22,"column":74,"offset":851},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":778},"end":{"line":22,"column":74,"offset":851},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Installation","position":{"start":{"line":24,"column":4,"offset":856},"end":{"line":24,"column":16,"offset":868},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":853},"end":{"line":24,"column":16,"offset":868},"indent":[]}},{"type":"code","lang":"shell","meta":null,"value":"yarn add -D @graphql-codegen/cli @graphql-codegen/fragment-matcher","position":{"start":{"line":26,"column":1,"offset":870},"end":{"line":28,"column":4,"offset":949},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Add ","position":{"start":{"line":30,"column":1,"offset":951},"end":{"line":30,"column":5,"offset":955},"indent":[]}},{"type":"inlineCode","value":"graphql-codegen","position":{"start":{"line":30,"column":5,"offset":955},"end":{"line":30,"column":22,"offset":972},"indent":[]}},{"type":"text","value":" to npm scripts.","position":{"start":{"line":30,"column":22,"offset":972},"end":{"line":30,"column":38,"offset":988},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":951},"end":{"line":30,"column":38,"offset":988},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ensure you are using ","position":{"start":{"line":32,"column":1,"offset":990},"end":{"line":32,"column":22,"offset":1011},"indent":[]}},{"type":"inlineCode","value":"@apollo/client","position":{"start":{"line":32,"column":22,"offset":1011},"end":{"line":32,"column":38,"offset":1027},"indent":[]}},{"type":"text","value":" and drop ","position":{"start":{"line":32,"column":38,"offset":1027},"end":{"line":32,"column":48,"offset":1037},"indent":[]}},{"type":"inlineCode","value":"@apollo/react-hooks","position":{"start":{"line":32,"column":48,"offset":1037},"end":{"line":32,"column":69,"offset":1058},"indent":[]}},{"type":"text","value":" as it is included now (see the GitHub issue ","position":{"start":{"line":32,"column":69,"offset":1058},"end":{"line":32,"column":114,"offset":1103},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/apollographql/apollo-client/issues/5808","children":[{"type":"text","value":"here","position":{"start":{"line":32,"column":115,"offset":1104},"end":{"line":32,"column":119,"offset":1108},"indent":[]}}],"position":{"start":{"line":32,"column":114,"offset":1103},"end":{"line":32,"column":180,"offset":1169},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":32,"column":180,"offset":1169},"end":{"line":32,"column":182,"offset":1171},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":990},"end":{"line":32,"column":182,"offset":1171},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This also means ensuring imports for the ","position":{"start":{"line":34,"column":1,"offset":1173},"end":{"line":34,"column":42,"offset":1214},"indent":[]}},{"type":"inlineCode","value":"ApolloProvider","position":{"start":{"line":34,"column":42,"offset":1214},"end":{"line":34,"column":58,"offset":1230},"indent":[]}},{"type":"text","value":" and other hooks come from ","position":{"start":{"line":34,"column":58,"offset":1230},"end":{"line":34,"column":85,"offset":1257},"indent":[]}},{"type":"inlineCode","value":"@apollo/client","position":{"start":{"line":34,"column":85,"offset":1257},"end":{"line":34,"column":101,"offset":1273},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":34,"column":101,"offset":1273},"end":{"line":34,"column":102,"offset":1274},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1173},"end":{"line":34,"column":102,"offset":1274},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setup for Apollo Client","position":{"start":{"line":36,"column":4,"offset":1279},"end":{"line":36,"column":27,"offset":1302},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1276},"end":{"line":36,"column":27,"offset":1302},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With Apollo Client 3, you'll need to make the following changes to your current file that sets up the client:","position":{"start":{"line":38,"column":1,"offset":1304},"end":{"line":38,"column":110,"offset":1413},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1304},"end":{"line":38,"column":110,"offset":1413},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"import {\n  InMemoryCache,\n  IntrospectionFragmentMatcher,\n} from 'apollo-cache-inmemory';\n\n// generated by Fragment Matcher plugin\nimport possibleTypes from '../introspection-result';\n\nconst cache = new InMemoryCache({\n  possibleTypes,\n});","position":{"start":{"line":40,"column":1,"offset":1415},"end":{"line":52,"column":4,"offset":1672},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Codegen","position":{"start":{"line":54,"column":4,"offset":1677},"end":{"line":54,"column":11,"offset":1684},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1674},"end":{"line":54,"column":11,"offset":1684},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create a ","position":{"start":{"line":56,"column":1,"offset":1686},"end":{"line":56,"column":10,"offset":1695},"indent":[]}},{"type":"inlineCode","value":"codegen.yml","position":{"start":{"line":56,"column":10,"offset":1695},"end":{"line":56,"column":23,"offset":1708},"indent":[]}},{"type":"text","value":" file with some config options:","position":{"start":{"line":56,"column":23,"offset":1708},"end":{"line":56,"column":54,"offset":1739},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1686},"end":{"line":56,"column":54,"offset":1739},"indent":[]}},{"type":"code","lang":"yml","meta":null,"value":"# codegen.yml\nschema: http://localhost:7000/performance/api/v2/graphql\noverwrite: true\ngenerates:\n  ./src/introspection-result.ts:\n    plugins:\n      - fragment-matcher","position":{"start":{"line":58,"column":1,"offset":1741},"end":{"line":66,"column":4,"offset":1920},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Run ","position":{"start":{"line":68,"column":1,"offset":1922},"end":{"line":68,"column":5,"offset":1926},"indent":[]}},{"type":"inlineCode","value":"yarn codegen","position":{"start":{"line":68,"column":5,"offset":1926},"end":{"line":68,"column":19,"offset":1940},"indent":[]}},{"type":"text","value":" to generate the schema while your API is running.","position":{"start":{"line":68,"column":19,"offset":1940},"end":{"line":68,"column":69,"offset":1990},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1922},"end":{"line":68,"column":69,"offset":1990},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"In Action","position":{"start":{"line":70,"column":4,"offset":1995},"end":{"line":70,"column":13,"offset":2004},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1992},"end":{"line":70,"column":13,"offset":2004},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When all of this is done, you will be able to query your data with no warnings or errors!","position":{"start":{"line":72,"column":1,"offset":2006},"end":{"line":72,"column":90,"offset":2095},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":2006},"end":{"line":72,"column":90,"offset":2095},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":75,"column":1,"offset":2098},"end":{"line":75,"column":31,"offset":2128},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":75,"column":31,"offset":2128}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"setting-up-heuristic-matchers\"\n    }}>{`Setting Up Heuristic Matchers`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://graphql-code-generator.com/docs/plugins/fragment-matcher\"\n        }}>{`Fragment Matcher - GraphQL Code Generator`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://graphql-code-generator.com/docs/plugins/typescript\"\n        }}>{`TypeScript - GraphQL Code Generator`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.apollographql.com/docs/react/data/fragments/\"\n        }}>{`Apollo Client - Using fragments`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"the-issue\"\n    }}>{`The issue`}</h2>\n    <p>{`With Apollo Client, you need to do some extra setup to get Apollo to place nice with heurstics based on unions. If not, it will fail based on a heuristic missing pieces of data.`}</p>\n    <p>{`This results in the error state being thrown by the client.`}</p>\n    <p>{`In order to resolve this, it requires us to install a few pieces of work.`}</p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add -D @graphql-codegen/cli @graphql-codegen/fragment-matcher\n`}</code></pre>\n    <p>{`Add `}<inlineCode parentName=\"p\">{`graphql-codegen`}</inlineCode>{` to npm scripts.`}</p>\n    <p>{`Ensure you are using `}<inlineCode parentName=\"p\">{`@apollo/client`}</inlineCode>{` and drop `}<inlineCode parentName=\"p\">{`@apollo/react-hooks`}</inlineCode>{` as it is included now (see the GitHub issue `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/apollographql/apollo-client/issues/5808\"\n      }}>{`here`}</a>{`).`}</p>\n    <p>{`This also means ensuring imports for the `}<inlineCode parentName=\"p\">{`ApolloProvider`}</inlineCode>{` and other hooks come from `}<inlineCode parentName=\"p\">{`@apollo/client`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"setup-for-apollo-client\"\n    }}>{`Setup for Apollo Client`}</h2>\n    <p>{`With Apollo Client 3, you'll need to make the following changes to your current file that sets up the client:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import {\n  InMemoryCache,\n  IntrospectionFragmentMatcher,\n} from 'apollo-cache-inmemory';\n\n// generated by Fragment Matcher plugin\nimport possibleTypes from '../introspection-result';\n\nconst cache = new InMemoryCache({\n  possibleTypes,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"codegen\"\n    }}>{`Codegen`}</h2>\n    <p>{`Create a `}<inlineCode parentName=\"p\">{`codegen.yml`}</inlineCode>{` file with some config options:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`# codegen.yml\nschema: http://localhost:7000/performance/api/v2/graphql\noverwrite: true\ngenerates:\n  ./src/introspection-result.ts:\n    plugins:\n      - fragment-matcher\n`}</code></pre>\n    <p>{`Run `}<inlineCode parentName=\"p\">{`yarn codegen`}</inlineCode>{` to generate the schema while your API is running.`}</p>\n    <h2 {...{\n      \"id\": \"in-action\"\n    }}>{`In Action`}</h2>\n    <p>{`When all of this is done, you will be able to query your data with no warnings or errors!`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}