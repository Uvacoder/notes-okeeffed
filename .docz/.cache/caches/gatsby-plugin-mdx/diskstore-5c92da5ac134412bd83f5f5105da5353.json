{"expireTime":9007200848610920000,"key":"gatsby-plugin-mdx-entire-payload-da66c210689903543ce1a109c406c07e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Observer","position":{"start":{"line":8,"column":3,"offset":169},"end":{"line":8,"column":11,"offset":177},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":167},"end":{"line":8,"column":11,"offset":177},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example","position":{"start":{"line":10,"column":4,"offset":182},"end":{"line":10,"column":11,"offset":189},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":179},"end":{"line":10,"column":11,"offset":189},"indent":[]}},{"type":"code","lang":"typescript","meta":null,"value":"interface Observer {\n  uniqueID: string;\n  update(): void;\n}\n\nclass ConcreteObserver implements Observer {\n  public uniqueID: string;\n  constructor(uniqueID: string) {\n    this.uniqueID = uniqueID;\n  }\n\n  update(): void {\n    console.log(`${this.uniqueID} updates something...`);\n  }\n}\n\nfunction findObserver(obs: Observer[], uniqueID: string) {\n  let index = 0;\n  const existed = obs.some((observer, idx) => {\n    index = idx;\n    return observer.uniqueID === uniqueID;\n  });\n  return {\n    existed,\n    index\n  };\n}\n\nclass Subject {\n  private _observers: Observer[];\n  constructor() {\n    this._observers = [];\n  }\n\n  registerObserver(ob: Observer) {\n    const id: string = ob.uniqueID;\n    if (findObserver(this._observers, id).existed) {\n      return console.log(`Observer ${id} is already in list`);\n    }\n    this._observers.push(ob);\n    console.log(`Observer ${ob.uniqueID} is pushed into list`);\n    console.log(this._observers);\n  }\n\n  removeObserver(uniqueID: string) {\n    const { existed, index } = findObserver(this._observers, uniqueID);\n    if (existed) {\n      this._observers.splice(index, 1);\n      console.log(`Observer ${uniqueID} is removed from list`);\n    } else {\n      console.log('Observer not existed');\n    }\n  }\n\n  notifyObservers() {\n    console.log('Subject notify all observers >>');\n    this._observers.map((observer) => {\n      observer.update();\n    });\n  }\n}\n\n(function main() {\n  const subject = new Subject();\n\n  const obA = new ConcreteObserver('A');\n  const obB = new ConcreteObserver('B');\n  const obC = new ConcreteObserver('C');\n\n  subject.registerObserver(obA);\n  subject.registerObserver(obA); // already existed\n\n  subject.registerObserver(obB);\n  subject.registerObserver(obC);\n\n  subject.notifyObservers();\n})();","position":{"start":{"line":12,"column":1,"offset":191},"end":{"line":90,"column":4,"offset":1970},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":93,"column":1,"offset":1973},"end":{"line":93,"column":31,"offset":2003},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":93,"column":31,"offset":2003}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"observer\"\n    }}>{`Observer`}</h1>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface Observer {\n  uniqueID: string;\n  update(): void;\n}\n\nclass ConcreteObserver implements Observer {\n  public uniqueID: string;\n  constructor(uniqueID: string) {\n    this.uniqueID = uniqueID;\n  }\n\n  update(): void {\n    console.log(\\`\\${this.uniqueID} updates something...\\`);\n  }\n}\n\nfunction findObserver(obs: Observer[], uniqueID: string) {\n  let index = 0;\n  const existed = obs.some((observer, idx) => {\n    index = idx;\n    return observer.uniqueID === uniqueID;\n  });\n  return {\n    existed,\n    index\n  };\n}\n\nclass Subject {\n  private _observers: Observer[];\n  constructor() {\n    this._observers = [];\n  }\n\n  registerObserver(ob: Observer) {\n    const id: string = ob.uniqueID;\n    if (findObserver(this._observers, id).existed) {\n      return console.log(\\`Observer \\${id} is already in list\\`);\n    }\n    this._observers.push(ob);\n    console.log(\\`Observer \\${ob.uniqueID} is pushed into list\\`);\n    console.log(this._observers);\n  }\n\n  removeObserver(uniqueID: string) {\n    const { existed, index } = findObserver(this._observers, uniqueID);\n    if (existed) {\n      this._observers.splice(index, 1);\n      console.log(\\`Observer \\${uniqueID} is removed from list\\`);\n    } else {\n      console.log('Observer not existed');\n    }\n  }\n\n  notifyObservers() {\n    console.log('Subject notify all observers >>');\n    this._observers.map((observer) => {\n      observer.update();\n    });\n  }\n}\n\n(function main() {\n  const subject = new Subject();\n\n  const obA = new ConcreteObserver('A');\n  const obB = new ConcreteObserver('B');\n  const obC = new ConcreteObserver('C');\n\n  subject.registerObserver(obA);\n  subject.registerObserver(obA); // already existed\n\n  subject.registerObserver(obB);\n  subject.registerObserver(obC);\n\n  subject.notifyObservers();\n})();\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}