{"expireTime":9007200852878421000,"key":"gatsby-plugin-mdx-entire-payload-4f9bd7640915ffc60e9f72f6ba598519-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":133,"offset":134},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":136},"end":{"line":5,"column":29,"offset":164},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Mocha and Chai","position":{"start":{"line":7,"column":3,"offset":168},"end":{"line":7,"column":17,"offset":182},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":166},"end":{"line":7,"column":17,"offset":182},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Table of Contents","position":{"start":{"line":9,"column":4,"offset":187},"end":{"line":9,"column":21,"offset":204},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":184},"end":{"line":9,"column":21,"offset":204},"indent":[]}},{"type":"jsx","value":"<a href=\"#section\">title</a>\n---- <a href=\"#subsection\">title</a>","position":{"start":{"line":11,"column":1,"offset":206},"end":{"line":12,"column":37,"offset":271},"indent":[1]}},{"type":"thematicBreak","position":{"start":{"line":16,"column":1,"offset":275},"end":{"line":16,"column":4,"offset":278},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Getting Started","position":{"start":{"line":18,"column":4,"offset":283},"end":{"line":18,"column":19,"offset":298},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":280},"end":{"line":18,"column":19,"offset":298},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"BDD - Behaviour Driven Development ","position":{"start":{"line":20,"column":1,"offset":300},"end":{"line":20,"column":36,"offset":335},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":300},"end":{"line":20,"column":36,"offset":335},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We want to put the test code in a file separate from the other code.","position":{"start":{"line":22,"column":1,"offset":337},"end":{"line":22,"column":69,"offset":405},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":337},"end":{"line":22,"column":69,"offset":405},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"After install the dev dependency of mocha and chai, you can write a test.js file and then run `mocha test.js' and it will simply run the test!","position":{"start":{"line":24,"column":1,"offset":407},"end":{"line":24,"column":143,"offset":549},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":407},"end":{"line":24,"column":143,"offset":549},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To start making these tests, we ","position":{"start":{"line":26,"column":1,"offset":551},"end":{"line":26,"column":33,"offset":583},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"NEED","position":{"start":{"line":26,"column":35,"offset":585},"end":{"line":26,"column":39,"offset":589},"indent":[]}}],"position":{"start":{"line":26,"column":33,"offset":583},"end":{"line":26,"column":41,"offset":591},"indent":[]}},{"type":"text","value":" to make a ","position":{"start":{"line":26,"column":41,"offset":591},"end":{"line":26,"column":52,"offset":602},"indent":[]}},{"type":"inlineCode","value":"test","position":{"start":{"line":26,"column":52,"offset":602},"end":{"line":26,"column":58,"offset":608},"indent":[]}},{"type":"text","value":" file in the same directory as ","position":{"start":{"line":26,"column":58,"offset":608},"end":{"line":26,"column":89,"offset":639},"indent":[]}},{"type":"inlineCode","value":"package.json","position":{"start":{"line":26,"column":89,"offset":639},"end":{"line":26,"column":103,"offset":653},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":551},"end":{"line":26,"column":103,"offset":653},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Building a test suite","position":{"start":{"line":30,"column":4,"offset":660},"end":{"line":30,"column":25,"offset":681},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":657},"end":{"line":30,"column":25,"offset":681},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Write a test that will run the test using the npm task ","position":{"start":{"line":32,"column":1,"offset":683},"end":{"line":32,"column":56,"offset":738},"indent":[]}},{"type":"inlineCode","value":"test","position":{"start":{"line":32,"column":56,"offset":738},"end":{"line":32,"column":62,"offset":744},"indent":[]}},{"type":"text","value":" and just reply an assertion to be true.","position":{"start":{"line":32,"column":62,"offset":744},"end":{"line":32,"column":102,"offset":784},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":683},"end":{"line":32,"column":102,"offset":784},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const expect = require('chai').expect;\n\n// Test suite\ndescribe('Mocha', () => {\n\n\t// Test spec (unit test)\n\tit('should run our test using npm', () => {\n\t\texpect(true).to.be.ok;\n\t});\n\n});","position":{"start":{"line":34,"column":1,"offset":786},"end":{"line":46,"column":4,"offset":980},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":48,"column":1,"offset":982},"end":{"line":48,"column":3,"offset":984},"indent":[]}},{"type":"inlineCode","value":"spec","position":{"start":{"line":48,"column":3,"offset":984},"end":{"line":48,"column":9,"offset":990},"indent":[]}},{"type":"text","value":" looks very similar to a ","position":{"start":{"line":48,"column":9,"offset":990},"end":{"line":48,"column":34,"offset":1015},"indent":[]}},{"type":"inlineCode","value":"suite","position":{"start":{"line":48,"column":34,"offset":1015},"end":{"line":48,"column":41,"offset":1022},"indent":[]}},{"type":"text","value":". It takes 2 arguments.","position":{"start":{"line":48,"column":41,"offset":1022},"end":{"line":48,"column":64,"offset":1045},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":982},"end":{"line":48,"column":64,"offset":1045},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A string describing the desired behaviour.","position":{"start":{"line":50,"column":4,"offset":1050},"end":{"line":50,"column":46,"offset":1092},"indent":[]}}],"position":{"start":{"line":50,"column":4,"offset":1050},"end":{"line":50,"column":46,"offset":1092},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1047},"end":{"line":50,"column":46,"offset":1092},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A function that wraps all the expectations together.","position":{"start":{"line":51,"column":4,"offset":1096},"end":{"line":51,"column":56,"offset":1148},"indent":[]}}],"position":{"start":{"line":51,"column":4,"offset":1096},"end":{"line":51,"column":56,"offset":1148},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1093},"end":{"line":51,"column":56,"offset":1148},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1047},"end":{"line":51,"column":56,"offset":1148},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"It's important to start guessing what the function might expect etc.","position":{"start":{"line":53,"column":1,"offset":1150},"end":{"line":53,"column":69,"offset":1218},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1150},"end":{"line":53,"column":69,"offset":1218},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We do a lot of the guess work for setting the spec itself. It may feel awkward at the start, but it will help get some bearings.","position":{"start":{"line":55,"column":1,"offset":1220},"end":{"line":55,"column":129,"offset":1348},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1220},"end":{"line":55,"column":129,"offset":1348},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once the spec is written, if we actually get ","position":{"start":{"line":57,"column":1,"offset":1350},"end":{"line":57,"column":46,"offset":1395},"indent":[]}},{"type":"inlineCode","value":"undefined","position":{"start":{"line":57,"column":46,"offset":1395},"end":{"line":57,"column":57,"offset":1406},"indent":[]}},{"type":"text","value":" returned, that is likely because the function hasn't been written and/or does not return anything.","position":{"start":{"line":57,"column":57,"offset":1406},"end":{"line":57,"column":156,"offset":1505},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1350},"end":{"line":57,"column":156,"offset":1505},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let expect = require('chai').expect;\n\ndescribe('checkForShip', () => {\n    const checkForShip = require('../path/to/src').checkForShip;\n    \n    // this is the test spec\n    it('should correctly report no ship at a given player's coordinate',  () => { \n\n    \tplayer = {\n\t\t\tships: [\n\t\t\t\t{\n\t\t\t\t\tlocations: [[0,0]]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n\n    it('should handle ships located at more than one coordinate',  () => { \n\n    \tplayer = {\n\t\t\tships: [\n\t\t\t\t{\n\t\t\t\t\tlocations: [[0,0], [0,1]]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\n\t\texpect(checkForShip(player, [0, 1])).to.be.true;\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n\n    it('should handle ships located at more than one coordinate',  () => { \n\n    \tplayer = {\n\t\t\tships: [\n\t\t\t\t{\n\t\t\t\t\tlocations: [[0,0], [0,1]]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\n\t\texpect(checkForShip(player, [0, 1])).to.be.true;\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n});","position":{"start":{"line":59,"column":1,"offset":1507},"end":{"line":107,"column":4,"offset":2464},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"// example in the /src/js/ship_methods.js","position":{"start":{"line":109,"column":1,"offset":2466},"end":{"line":109,"column":42,"offset":2507},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":2466},"end":{"line":109,"column":42,"offset":2507},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"function checkForShip (player, coordinates) {","position":{"start":{"line":111,"column":1,"offset":2509},"end":{"line":111,"column":46,"offset":2554},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":2509},"end":{"line":111,"column":46,"offset":2554},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var shipPresent, ship;\n\nfor (var i = 0; i < player.ships.length; i++) {\n\tship = player.ships[i];\n\n\tshipPresent = ship.locations.filter( (actualCoordinate) => {\n\t\treturn (actualCoordinate[0] === coordinates[0]) && (actualCoordinate[1] === coordinates[1]);\n\t})[0];\n\n\tif (!shipPresent) {\n\t\treturn false;\n\t}\n}","position":{"start":{"line":113,"column":1,"offset":2557},"end":{"line":125,"column":3,"offset":2872},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"}","position":{"start":{"line":126,"column":1,"offset":2873},"end":{"line":126,"column":2,"offset":2874},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":2873},"end":{"line":126,"column":2,"offset":2874},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":198,"column":1,"offset":2946},"end":{"line":198,"column":31,"offset":2976},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":198,"column":31,"offset":2976}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mocha-and-chai\"\n    }}>{`Mocha and Chai`}</h1>\n    <h2 {...{\n      \"id\": \"table-of-contents\"\n    }}>{`Table of Contents`}</h2>\n    <a href=\"#section\">title</a>\n---- <a href=\"#subsection\">title</a>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h2>\n    <p>{`BDD - Behaviour Driven Development `}</p>\n    <p>{`We want to put the test code in a file separate from the other code.`}</p>\n    <p>{`After install the dev dependency of mocha and chai, you can write a test.js file and then run \\`mocha test.js' and it will simply run the test!`}</p>\n    <p>{`To start making these tests, we `}<strong parentName=\"p\">{`NEED`}</strong>{` to make a `}<inlineCode parentName=\"p\">{`test`}</inlineCode>{` file in the same directory as `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"building-a-test-suite\"\n    }}>{`Building a test suite`}</h2>\n    <p>{`Write a test that will run the test using the npm task `}<inlineCode parentName=\"p\">{`test`}</inlineCode>{` and just reply an assertion to be true.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const expect = require('chai').expect;\n\n// Test suite\ndescribe('Mocha', () => {\n\n    // Test spec (unit test)\n    it('should run our test using npm', () => {\n        expect(true).to.be.ok;\n    });\n\n});\n`}</code></pre>\n    <p>{`A `}<inlineCode parentName=\"p\">{`spec`}</inlineCode>{` looks very similar to a `}<inlineCode parentName=\"p\">{`suite`}</inlineCode>{`. It takes 2 arguments.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A string describing the desired behaviour.`}</li>\n      <li parentName=\"ol\">{`A function that wraps all the expectations together.`}</li>\n    </ol>\n    <p>{`It's important to start guessing what the function might expect etc.`}</p>\n    <p>{`We do a lot of the guess work for setting the spec itself. It may feel awkward at the start, but it will help get some bearings.`}</p>\n    <p>{`Once the spec is written, if we actually get `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` returned, that is likely because the function hasn't been written and/or does not return anything.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`let expect = require('chai').expect;\n\ndescribe('checkForShip', () => {\n    const checkForShip = require('../path/to/src').checkForShip;\n    \n    // this is the test spec\n    it('should correctly report no ship at a given player's coordinate',  () => { \n\n        player = {\n            ships: [\n                {\n                    locations: [[0,0]]\n                }\n            ]\n        }\n\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n\n    it('should handle ships located at more than one coordinate',  () => { \n\n        player = {\n            ships: [\n                {\n                    locations: [[0,0], [0,1]]\n                }\n            ]\n        }\n\n        expect(checkForShip(player, [0, 1])).to.be.true;\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n\n    it('should handle ships located at more than one coordinate',  () => { \n\n        player = {\n            ships: [\n                {\n                    locations: [[0,0], [0,1]]\n                }\n            ]\n        }\n\n        expect(checkForShip(player, [0, 1])).to.be.true;\n        expect(checkForShip(player, [9, 9])).to.be.false;\n    });\n});\n`}</code></pre>\n    <p>{`// example in the /src/js/ship_methods.js`}</p>\n    <p>{`function checkForShip (player, coordinates) {`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`var shipPresent, ship;\n\nfor (var i = 0; i < player.ships.length; i++) {\n    ship = player.ships[i];\n\n    shipPresent = ship.locations.filter( (actualCoordinate) => {\n        return (actualCoordinate[0] === coordinates[0]) && (actualCoordinate[1] === coordinates[1]);\n    })[0];\n\n    if (!shipPresent) {\n        return false;\n    }\n}\n`}</code></pre>\n    <p>{`}`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}