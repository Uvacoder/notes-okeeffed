{"version":3,"sources":["webpack:///../manual/AWS/Deploying-Static-Site-with-CDK.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,8NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,4CADR,4CAGA,2EACA,iBAAQ,CACN,GAAM,WADR,YAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,q/BAwCL,iBAAQ,CACN,GAAM,YADR,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,s+GAuGL,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uFADQ,gC,qNAQ1BJ,EAAWK,gBAAiB","file":"component---manual-aws-deploying-static-site-with-cdk-md-bae431161fbef5425686.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"deploying-a-static-site-with-the-aws-cdk\"\n    }}>{`Deploying a static site with the AWS CDK`}</h1>\n    <p>{`Use the resource to add more detail. More to come.`}</p>\n    <h2 {...{\n      \"id\": \"indexts\"\n    }}>{`index.ts`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`#!/usr/bin/env node\nimport cdk = require('@aws-cdk/core');\nimport { StaticSite } from './static-site';\n\n/**\n * This stack relies on getting the domain name from CDK context.\n * Use 'cdk synth -c domain=mystaticsite.com -c subdomain=www'\n * Or add the following to cdk.json:\n * {\n *   \"context\": {\n *     \"domain\": \"mystaticsite.com\",\n *     \"subdomain\": \"www\"\n *   }\n * }\n **/\nclass MyStaticSiteStack extends cdk.Stack {\n  constructor(parent: cdk.App, name: string, props: cdk.StackProps) {\n    super(parent, name, props);\n\n    new StaticSite(this, 'StaticSite', {\n      domainName: this.node.tryGetContext('domain'),\n      siteSubDomain: this.node.tryGetContext('subdomain'),\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew MyStaticSiteStack(app, 'MyStaticSite', {\n  env: {\n    // Stack must be in us-east-1, because the ACM certificate for a\n    // global CloudFront distribution must be requested in us-east-1.\n    region: 'us-east-1',\n  },\n});\n\napp.synth();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"s3-stack\"\n    }}>{`S3 Stack`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`#!/usr/bin/env node\nimport cloudfront = require('@aws-cdk/aws-cloudfront');\nimport route53 = require('@aws-cdk/aws-route53');\nimport s3 = require('@aws-cdk/aws-s3');\nimport s3deploy = require('@aws-cdk/aws-s3-deployment');\nimport acm = require('@aws-cdk/aws-certificatemanager');\nimport cdk = require('@aws-cdk/core');\nimport targets = require('@aws-cdk/aws-route53-targets/lib');\nimport { Construct } from '@aws-cdk/core';\n\nexport interface StaticSiteProps {\n  domainName: string;\n  siteSubDomain: string;\n}\n\n/**\n * Static site infrastructure, which deploys site content to an S3 bucket.\n *\n * The site redirects from HTTP to HTTPS, using a CloudFront distribution,\n * Route53 alias record, and ACM certificate.\n */\nexport class StaticSite extends Construct {\n  constructor(parent: Construct, name: string, props: StaticSiteProps) {\n    super(parent, name);\n\n    const zone = route53.HostedZone.fromLookup(this, 'Zone', {\n      domainName: props.domainName,\n    });\n    const siteDomain = props.siteSubDomain + '.' + props.domainName;\n    new cdk.CfnOutput(this, 'Site', { value: 'https://' + siteDomain });\n\n    // Content bucket\n    const siteBucket = new s3.Bucket(this, 'SiteBucket', {\n      bucketName: siteDomain,\n      websiteIndexDocument: 'index.html',\n      websiteErrorDocument: 'error.html',\n      publicReadAccess: true,\n\n      // The default removal policy is RETAIN, which means that cdk destroy will not attempt to delete\n      // the new bucket, and it will remain in your account until manually deleted. By setting the policy to\n      // DESTROY, cdk destroy will attempt to delete the bucket, but will error if the bucket is not empty.\n      removalPolicy: cdk.RemovalPolicy.DESTROY, // NOT recommended for production code\n    });\n    new cdk.CfnOutput(this, 'Bucket', { value: siteBucket.bucketName });\n\n    // TLS certificate\n    const certificateArn = new acm.DnsValidatedCertificate(\n      this,\n      'SiteCertificate',\n      {\n        domainName: siteDomain,\n        hostedZone: zone,\n        region: 'us-east-1', // Cloudfront only checks this region for certificates.\n      },\n    ).certificateArn;\n    new cdk.CfnOutput(this, 'Certificate', { value: certificateArn });\n\n    // CloudFront distribution that provides HTTPS\n    const distribution = new cloudfront.CloudFrontWebDistribution(\n      this,\n      'SiteDistribution',\n      {\n        aliasConfiguration: {\n          acmCertRef: certificateArn,\n          names: [siteDomain],\n          sslMethod: cloudfront.SSLMethod.SNI,\n          securityPolicy: cloudfront.SecurityPolicyProtocol.TLS_V1_1_2016,\n        },\n        originConfigs: [\n          {\n            s3OriginSource: {\n              s3BucketSource: siteBucket,\n            },\n            behaviors: [{ isDefaultBehavior: true }],\n          },\n        ],\n      },\n    );\n    new cdk.CfnOutput(this, 'DistributionId', {\n      value: distribution.distributionId,\n    });\n\n    // Route53 alias record for the CloudFront distribution\n    new route53.ARecord(this, 'SiteAliasRecord', {\n      recordName: siteDomain,\n      target: route53.RecordTarget.fromAlias(\n        new targets.CloudFrontTarget(distribution),\n      ),\n      zone,\n    });\n\n    // Deploy site contents to S3 bucket\n    new s3deploy.BucketDeployment(this, 'DeployWithInvalidation', {\n      sources: [s3deploy.Source.asset('./site-contents')],\n      destinationBucket: siteBucket,\n      distribution,\n      distributionPaths: ['/*'],\n    });\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/aws-samples/aws-cdk-examples/tree/master/typescript/static-site\"\n        }}>{`AWS Samples - statis site`}</a></li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}