{"version":3,"sources":["webpack:///../manual/Go/Authentication-With-Goth.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,4BADR,4BAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mEADQ,UAItB,iBAAQ,CACN,GAAM,uBADR,uBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,i6E,8MAmGTJ,EAAWK,gBAAiB","file":"component---manual-go-authentication-with-goth-md-c545ac47fa501b1420b6.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"authentication-with-goth\"\n    }}>{`Authentication with Goth`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/markbates/goth/blob/master/examples/main.go\"\n        }}>{`Auth`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"example-with-github\"\n    }}>{`Example with GitHub`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-go\"\n      }}>{`package main\n\nimport (\n    \"fmt\"\n    \"html/template\"\n    \"net/http\"\n    \"os\"\n\n    \"sort\"\n\n  \"log\"\n  \"github.com/joho/godotenv\"\n\n  \"github.com/gin-gonic/gin\"\n\n    \"github.com/markbates/goth\"\n    \"github.com/markbates/goth/gothic\"\n    \"github.com/markbates/goth/providers/github\"\n)\n\nfunc main() {\n    goth.UseProviders(\n        github.New(os.Getenv(\"GITHUB_KEY\"), os.Getenv(\"GITHUB_SECRET\"), \"http://localhost:3000/auth/github/callback\"),\n    )\n\n    // OpenID Connect is based on OpenID Connect Auto Discovery URL (https://openid.net/specs/openid-connect-discovery-1_0-17.html)\n    // because the OpenID Connect provider initialize it self in the New(), it can return an error which should be handled or ignored\n    // ignore the error for now\n    openidConnect, _ := openidConnect.New(os.Getenv(\"OPENID_CONNECT_KEY\"), os.Getenv(\"OPENID_CONNECT_SECRET\"), \"http://localhost:3000/auth/openid-connect/callback\", os.Getenv(\"OPENID_CONNECT_DISCOVERY_URL\"))\n    if openidConnect != nil {\n        goth.UseProviders(openidConnect)\n    }\n\n    m := make(map[string]string)\n    m[\"github\"] = \"Github\"\n\n    var keys []string\n    for k := range m {\n        keys = append(keys, k)\n    }\n    sort.Strings(keys)\n\n    providerIndex := &ProviderIndex{Providers: keys, ProvidersMap: m}\n\n    // load .env file\n  err := godotenv.Load()\n  if err != nil {\n    log.Fatal(\"Error loading .env file\")\n  }\n\n  // set up server\n  r := gin.Default()\n    r.GET(\"/auth/{provider}/callback\", func(c *gin.Context) {\n\n        user, err := gothic.CompleteUserAuth(res, req)\n        if err != nil {\n            fmt.Fprintln(res, err)\n            return\n    }\n\n        c.JSON(200, gin.H{\n        user\n    })\n    })\n\n    r.GET(\"/logout/{provider}\", func(res http.ResponseWriter, req *http.Request) {\n        gothic.Logout(res, req)\n        c.JSON(200, gin.H{\n      \"success\": true\n    })\n    })\n\n    r.GET(\"/auth/{provider}\", func(res http.ResponseWriter, req *http.Request) {\n        // try to get the user without re-authenticating\n        if gothUser, err := gothic.CompleteUserAuth(res, req); err == nil {\n            c.JSON(200, gin.H{\n        gothUser\n      })\n        } else {\n            gothic.BeginAuthHandler(res, req)\n        }\n    })\n\n\n    log.Println(\"listening on localhost:8080\")\n    r.Run(\":8080\")\n}\n\ntype ProviderIndex struct {\n    Providers    []string\n    ProvidersMap map[string]string\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}