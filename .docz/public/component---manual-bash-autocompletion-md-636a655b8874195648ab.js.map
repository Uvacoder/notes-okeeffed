{"version":3,"sources":["webpack:///../manual/Bash/Autocompletion.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,+MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sFADQ,yBAItB,iBAAQ,CACN,GAAM,WADR,WAGA,gFAA+D,0BAAYA,WAAW,KAAvB,WAA/D,6KAAgS,0BAAYA,WAAW,KAAvB,SAAhS,OAAyV,0BAAYA,WAAW,KAAvB,QAAzV,wCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2rBAgCL,oDAAmC,0BAAYA,WAAW,KAAvB,uBAAnC,sD,sMAKJJ,EAAWK,gBAAiB","file":"component---manual-bash-autocompletion-md-636a655b8874195648ab.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"autocompletion\"\n    }}>{`Autocompletion`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://iridakos.com/programming/2018/03/01/bash-programmable-completion-tutorial\"\n        }}>{`Bash Autocompletion`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Write a bash file. This Example autocompletes words for `}<inlineCode parentName=\"p\">{`example`}</inlineCode>{` with one of \"init install store search deploy bump push pull help sync info remove version autocomplete\", and then repeats a similar ordeal for the second word if it is `}<inlineCode parentName=\"p\">{`store`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`show`}</inlineCode>{` to autocomplete to the list \"test\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`#!/bin/bash\n_example_options()\n{\n   local cur prev\n\n   cur=\\${COMP_WORDS[COMP_CWORD]}\n   prev=\\${COMP_WORDS[COMP_CWORD-1]}\n\n   case \\${COMP_CWORD} in\n       1)\n           COMPREPLY=($(compgen -W \"init install store search deploy bump push pull help sync info remove version autocomplete\" -- \\${cur}))\n       ;;\n       2)\n           case \\${prev} in\n               store)\n                   COMPREPLY=($(compgen -W \"test\" -- \\${cur}))\n               ;;\n               show)\n                   COMPREPLY=($(compgen -W \"test\" -- \\${cur}))\n               ;;\n           esac\n       ;;\n       *)\n           COMPREPLY=()\n       ;;\n   esac\n}\n\ncomplete -F _example_options example\n`}</code></pre>\n    <p>{`Once completed, you can run `}<inlineCode parentName=\"p\">{`source path/to/file`}</inlineCode>{` and have the commands available for the session.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}