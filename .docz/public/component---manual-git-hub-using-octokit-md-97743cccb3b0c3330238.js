(window.webpackJsonp=window.webpackJsonp||[]).push([[262],{"+JtV":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return l}));n("1c7q"),n("abGl"),n("gZHo"),n("Fdmb"),n("Ir+3"),n("2mQt"),n("mXGw");var o=n("/FXl"),a=n("TjRS");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/GitHub/Using-Octokit.md"}});var r={_frontmatter:c},s=a.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(o.b)(s,i({},r,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"using-octokit"},"Using Octokit"),Object(o.b)("h2",{id:"resource"},"Resource"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("a",i({parentName:"li"},{href:"https://github.com/octokit/rest.js/"}),"Octokit - GitHub")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("a",i({parentName:"li"},{href:"https://octokit.github.io/rest.js/"}),"Octokit - Documentation")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("a",i({parentName:"li"},{href:"https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line"}),"Creating a Personal Access Token"))),Object(o.b)("h2",{id:"adding-a-file-to-a-repo"},"Adding a file to a repo"),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-bash"}),"npm install @octokit/rest\n")),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"const { Octokit } = require('@octokit/rest');\nconst octokit = new Octokit();\n\n// Compare: https://developer.github.com/v3/repos/#list-organization-repositories\noctokit.repos\n  .listForOrg({\n    org: 'octokit',\n    type: 'public',\n  })\n  .then(({ data }) => {\n    // handle data\n  });\n")),Object(o.b)("h2",{id:"adding-a-file-to-a-repo-using-octokit"},"Adding a file to a repo using Octokit"),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"const { Octokit } = require('@octokit/rest');\nconst { Base64 } = require('js-base64');\nconst fs = require('fs');\n\nif (process.env.MODE !== 'production') {\n  require('dotenv').config();\n}\n\nconst octokit = new Octokit({\n  auth: process.env.GITHUB_ACCESS_TOKEN,\n});\n\nconst content = fs.readFileSync('file/to/path', 'utf-8');\nconst fileOutput = Base64.encode(content);\n\nconst { data } = await octokit.repos.createOrUpdateFileContents({\n  owner: 'okeeffed',\n  repo: 'octokit-create-file-example',\n  path: 'OUTPUT.md',\n  message: 'feat: Added OUTPUT.md programatically',\n  content: contentEncoded,\n  committer: {\n    name: `Octokit Bot`,\n    email: 'hello@dennisokeeffe.com',\n  },\n  author: {\n    name: 'Octokit Bot',\n    email: 'hello@dennisokeeffe.com',\n  },\n});\n")))}l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/GitHub/Using-Octokit.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-git-hub-using-octokit-md-97743cccb3b0c3330238.js.map