{"version":3,"sources":["webpack:///../manual/React/React-Best-Practices-2021.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,2NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,6BADR,6BAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAf,gEAAqF,0BAAYA,WAAW,MAAvB,UAArF,KACA,kBAAIA,WAAW,MAAf,2DACA,kBAAIA,WAAW,MAAf,kCACA,kBAAIA,WAAW,MAAf,sEACA,kBAAIA,WAAW,MAAf,8DACA,kBAAIA,WAAW,MAAf,yCAA8D,0BAAYA,WAAW,MAAvB,iBAA9D,KACA,kBAAIA,WAAW,MAAf,kFAEF,iBAAQ,CACN,GAAM,SADR,SAGA,sBACE,kBAAIA,WAAW,MAAf,mCAEF,iBAAQ,CACN,GAAM,WADR,WAGA,sBACE,kBAAIA,WAAW,MAAf,+CACA,kBAAIA,WAAW,MAAf,kBAAuC,mBAAGA,WAAW,MAAS,CAC1D,KAAQ,4FAD2B,iBAAvC,KAGA,kBAAIA,WAAW,MAAf,oCAAyD,mBAAGA,WAAW,MAAS,CAC5E,KAAQ,6DAD6C,qBAAzD,O,kNAQNJ,EAAWK,gBAAiB","file":"component---manual-react-react-best-practices-2021-md-2646f151667880187cae.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-best-practices-2021\"\n    }}>{`React Best Practices 2021`}</h1>\n    <h2 {...{\n      \"id\": \"rendering\"\n    }}>{`Rendering`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Does the component support handling of a state under an enum `}<inlineCode parentName=\"li\">{`status`}</inlineCode>{`?`}</li>\n      <li parentName=\"ol\">{`Is there an error boundary to handle unexpected issues?`}</li>\n      <li parentName=\"ol\">{`Should the state be colocated?`}</li>\n      <li parentName=\"ol\">{`If using context, is the provider optimised to prevent re-renders?`}</li>\n      <li parentName=\"ol\">{`Are expensive initial state calculations lazy initialized?`}</li>\n      <li parentName=\"ol\">{`Does an expensive calculation require `}<inlineCode parentName=\"li\">{`React.useMemo`}</inlineCode>{`?`}</li>\n      <li parentName=\"ol\">{`Does an expensive component (due to large list or other) require memoisation?`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"hooks\"\n    }}>{`Hooks`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Should the hook be abstracted?`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Does the test avoid implementation details?`}</li>\n      <li parentName=\"ol\">{`Do you need to `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/testing-library/react-hooks-testing-library#when-to-use-this-library\"\n        }}>{`test the hook`}</a>{`?`}</li>\n      <li parentName=\"ol\">{`Are you validating the UI by the `}<a parentName=\"li\" {...{\n          \"href\": \"https://testing-library.com/docs/queries/about/#priority\"\n        }}>{`recommended order`}</a>{`?`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}