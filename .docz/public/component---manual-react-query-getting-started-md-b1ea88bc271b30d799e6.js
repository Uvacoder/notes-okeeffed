(window.webpackJsonp=window.webpackJsonp||[]).push([[554],{"6Hqh":function(e,t,r){"use strict";r.r(t),r.d(t,"_frontmatter",(function(){return s})),r.d(t,"default",(function(){return u}));r("1c7q"),r("abGl"),r("gZHo"),r("Fdmb"),r("Ir+3"),r("2mQt"),r("mXGw");var n=r("/FXl"),a=r("TjRS");r("aD51");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/React-Query/Getting-Started.md"}});var i={_frontmatter:s},c=a.a;function u(e){var t=e.components,r=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,["components"]);return Object(n.b)(c,o({},i,r,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"getting-started-with-react-query"},"Getting Started With React Query"),Object(n.b)("h2",{id:"resources"},"Resources"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",o({parentName:"li"},{href:"https://react-query.tanstack.com/"}),"React Query")),Object(n.b)("li",{parentName:"ol"},Object(n.b)("a",o({parentName:"li"},{href:"(https://react-query.tanstack.com/guides/query-functions#handling-and-throwing-errors)"}),"Handling Errors"))),Object(n.b)("h2",{id:"handling-and-throwing-errors"},"Handling and throwing errors"),Object(n.b)("p",null,"Check the ",Object(n.b)("a",o({parentName:"p"},{href:"https://react-query.tanstack.com/guides/query-functions#handling-and-throwing-errors"}),"docs")," for more information."),Object(n.b)("p",null,"The tl;dr is that you want to return a promise or throw an error."),Object(n.b)("pre",null,Object(n.b)("code",o({parentName:"pre"},{className:"language-js"}),"const { isLoading, error, data } = useQuery('todoListData', async () => {\n  const result = await fetch('/api/v1/todos');\n\n  if (!result.ok) {\n    throw new Error(result.statusText);\n  }\n  return result.json();\n});\n")),Object(n.b)("h2",{id:"setting-up-a-new-project"},"Setting up a new project"),Object(n.b)("pre",null,Object(n.b)("code",o({parentName:"pre"},{className:"language-js"}),"import React, { useEffect } from 'react';\nimport { ErrorBoundary, FallbackProps } from 'react-error-boundary';\nimport { QueryClient, QueryClientProvider, useQuery } from 'react-query';\nimport './App.css';\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppChildren />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n")),Object(n.b)("h2",{id:"setting-up-for-testing"},"Setting up for testing"),Object(n.b)("p",null,"If using with a library such as React Testing Library, be sure to create a custom render util:"),Object(n.b)("pre",null,Object(n.b)("code",o({parentName:"pre"},{className:"language-tsx"}),"// test/test-utils.tsx\nimport React, { ReactElement } from 'react';\nimport { render } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    // Force the cache to clear to ensure responses\n    // are as expected for each test.\n    queries: {\n      cacheTime: 0,\n      retry: false,\n    },\n  },\n});\n\nconst AllTheProviders: React.FC = ({ children }) => {\n  return (\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n  );\n};\n\nconst customRender = (ui: ReactElement, options?: any) =>\n  render(ui, { wrapper: AllTheProviders, ...options });\n\n// re-export everything\nexport * from '@testing-library/react';\n\n// override render method\nexport { customRender as render };\n")),Object(n.b)("h2",{id:"custom-hooks"},"Custom hooks"),Object(n.b)("p",null,"To abstract logic, it would be recommended to abstract the hook:"),Object(n.b)("pre",null,Object(n.b)("code",o({parentName:"pre"},{className:"language-ts"}),"function useTodoList() {\n  const [status, setStatus] = React.useState<Status>(Status.pending);\n  const { isLoading, error, data } = useQuery('todoListData', async () => {\n    const result = await fetch('/api/v1/todos');\n\n    if (!result.ok) {\n      throw new Error(result.statusText);\n    }\n    return result.json();\n  });\n\n  useEffect(() => {\n    if (isLoading) {\n      setStatus(Status.pending);\n    }\n\n    if (error) {\n      // handle error reporting ... Sentry.sendErr(error)\n      setStatus(Status.failed);\n    } else if (data) {\n      setStatus(Status.success);\n    }\n  }, [isLoading, error, data]);\n\n  return { status, data };\n}\n")))}u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/React-Query/Getting-Started.md"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-react-query-getting-started-md-b1ea88bc271b30d799e6.js.map