(window.webpackJsonp=window.webpackJsonp||[]).push([[363],{Nxp4:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return o})),t.d(n,"default",(function(){return l}));t("1c7q"),t("abGl"),t("gZHo"),t("Fdmb"),t("Ir+3"),t("2mQt"),t("mXGw");var a=t("/FXl"),i=t("TjRS");t("aD51");function s(){return(s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/JavaScript/XState.md"}});var c={_frontmatter:o},r=i.a;function l(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,["components"]);return Object(a.b)(r,s({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"state-machines-in-javascript-with-xstate"},"State Machines in JavaScript with XState"),Object(a.b)("p",null,"This comes from the State Machines course on Frontend Master. Please support the course."),Object(a.b)("h2",{id:"resources"},"Resources"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("a",s({parentName:"li"},{href:"https://frontendmasters.com/courses/xstate/introduction/"}),"State Machines course")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("a",s({parentName:"li"},{href:"https://github.com/davidkpiano/frontend-masters-xstate-workshop"}),"Course repo")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("a",s({parentName:"li"},{href:"https://static.frontendmasters.com/resources/2020-05-14-state-machines-xstate/state-machine-xstate.pdf"}),"Slides"))),Object(a.b)("p",null,"The aim of this workshop is to understand state machines with no libraries before moving on."),Object(a.b)("h2",{id:"bottom-up-code"},"Bottom Up Code"),Object(a.b)("p",null,"The example here has a button with an event listener added. This is generally how we work: we put all of our application logic inside of the event handlers themselves."),Object(a.b)("p",null,"The issue with the event handler mentioned is that multiple clicks run, we could continually be refetching data."),Object(a.b)("p",null,'Now the application lives inside the applicatin handlers, which is not what we want. This style of coding to "just get it done" is considered ',Object(a.b)("strong",{parentName:"p"},"bottom up"),"."),Object(a.b)("p",null,"It makes it:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Difficult to test."),Object(a.b)("li",{parentName:"ul"},"Difficult to understand."),Object(a.b)("li",{parentName:"ul"},"Will contain bugs."),Object(a.b)("li",{parentName:"ul"},"Difficult to enhance."),Object(a.b)("li",{parentName:"ul"},"Features make it worse.")),Object(a.b)("h2",{id:"why-use-state-machines-and-statecharts"},"Why use state machines and statecharts?"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Visualized modelling"),Object(a.b)("li",{parentName:"ol"},"Precise diagrams"),Object(a.b)("li",{parentName:"ol"},"Automatic code generation"),Object(a.b)("li",{parentName:"ol"},"Comprehensive test coverage"),Object(a.b)("li",{parentName:"ol"},"Accomodation of late-breaking requirements changes")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"The benefit of the diagrams gives the logic in completeness. This is great for those who are seeing this without a technical background.")),Object(a.b)("h2",{id:"graphs"},"Graphs"),Object(a.b)("p",null,"This section speaks to graph theory."),Object(a.b)("p",null,'The part on directed graphs speaks on the terms of "source", "transfer" and "sink" nodes.'),Object(a.b)("h2",{id:"finite-state-machines"},"Finite State Machines"),Object(a.b)("p",null,"A kind of directed graph consider a quintuple (five important parts)."),Object(a.b)("p",null,"There is an example of going through the lifecycle of a JavaScript Promise. It speaks to the transition states."),Object(a.b)("p",null,"The parts of the state machine:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Finite states"),Object(a.b)("li",{parentName:"ol"},"Transitions"),Object(a.b)("li",{parentName:"ol"},"Events (labelled on edges/transitions)"),Object(a.b)("li",{parentName:"ol"},'Initial state (all FSMs start with this) - there is a dot to represent a "pseudo-transition" in the graphs.'),Object(a.b)("li",{parentName:"ol"},"Final states (not to be covered too much)")),Object(a.b)("h2",{id:"an-entry-example"},"An entry example"),Object(a.b)("p",null,"To model the states, the example uses a function for ",Object(a.b)("inlineCode",{parentName:"p"},"transition")," to model the Promise with a switch statement that switches on the ",Object(a.b)("inlineCode",{parentName:"p"},"state"),"."),Object(a.b)("p",null,"It has switches within switches in this example, and some odd representations, but the idea is that it always covered all possible states."),Object(a.b)("p",null,"As for using an object instead of a switch:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"const machine = {\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        FETCH: 'pending'\n      }\n    },\n    pending: {\n      on: {\n        RESOLVE: 'resolved',\n        REJECT: 'reject'\n      }\n    }\n    resolved: {},\n    rejected: {}\n  }\n}\n\nfunction transition(state,event) {\n  return machine\n    .states[state]?\n    .on?.[event]\n    || state\n}\n")),Object(a.b)("p",null,"Interpreting state machines:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"// keep track of state\nlet currentState = machine.initial;\n\n// receive events\nfunction send(event) {\n  // Determine the next state\n  const nextState = transition(currentState, event);\n\n  // Update the current state\n  currentState = nextState;\n}\n\n// Send some event\nsend('CLICK');\n")),Object(a.b)("h2",{id:"xstate"},"XState"),Object(a.b)("p",null,"Simplifies the issues with adding/cleaning up listeners + far more."),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-s"}),"npm i xstate\n")),Object(a.b)("p",null,"Using it in the file:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"import { createMachine } from 'xstate';\n\nconst feedbackMachine = createMachine({\n  initial: 'question',\n  states: {\n    question: {\n      // transitions:\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n      },\n    },\n    form: {\n      // transitions\n      on: {\n        SUBMIT: {\n          target: 'thanks',\n        },\n      },\n    },\n    thanks: {\n      // ...\n      on: {\n        CLOSE: 'closed',\n      },\n    },\n    closed: {\n      // Setting final node\n      type: 'final',\n    },\n  },\n});\n\n// Note, the following is long-hand\nconst feedbackMachine = createMachine({\n  states: {\n    on: {\n      SUBMIT: {\n        target: 'thanks',\n      },\n    },\n  },\n});\n// ... for ...\ncreateMachine({\n  states: {\n    on: {\n      SUBMIT: 'thanks',\n    },\n  },\n});\n\n// initial state\nconst initialState = feedbackMachine.initialState;\n\n// An `event` is an object with a `type`\nconst clickGoodEvent = {\n  type: 'CLICK_GOOD',\n};\n\n// An event object with payload\nconst submitEvent = {\n  type: 'SUBMIT',\n  feedback: 'Very good, thank you',\n};\n\nconst nextState = feedbackMachine.transition(\n  feedbackMachine.initialState,\n  clickGoodEvent,\n);\n")),Object(a.b)("p",null,"Events are objects so we can pass in custom payloads."),Object(a.b)("h2",{id:"interpret-function"},"Interpret function"),Object(a.b)("p",null,"Creates a service: a running instance of a machine."),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"import { createMachine, interpet } from 'xstate';\n\n// omitted set up feedbackMachine\n\nconst feedbackService = interpret(feedbackMachine);\n\nfeedbackService.onTransitin(state => {\n  console.log(state);\n});\n\nfeedbackService.start();\n\n// when you're done for clanup\nfeedbackService.stop();\n")),Object(a.b)("h2",{id:"visualize"},"Visualize"),Object(a.b)("p",null,"One of the benefits of XState is that you can visualize the machine!"),Object(a.b)("h2",{id:"xstate-actions"},"XState Actions"),Object(a.b)("p",null,Object(a.b)("a",s({parentName:"p"},{href:"https://xstate.js.org/docs/guides/actions.html"}),"Action docs")),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Transition actions: Moving between states"),Object(a.b)("li",{parentName:"ol"},"Entry actions: Entering into state"),Object(a.b)("li",{parentName:"ol"},"Exit actions: Exiting state")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"Action order")," will go ",Object(a.b)("inlineCode",{parentName:"p"},"exit"),", ",Object(a.b)("inlineCode",{parentName:"p"},"transition"),", then ",Object(a.b)("inlineCode",{parentName:"p"},"entry"),". ",Object(a.b)("strong",{parentName:"p"},"We do not want to rely on action order too much.")),Object(a.b)("p",null,"These actions when added could look like this:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"const enterActive = () => console.log('Enter')\n\nconst transitionActive = () => console.log('Transition')\n\nconst exitActive = () => console.log('Exit')\n\nconst enterInctive = () => console.log('Enter inactive')\n\nconst feedbackMachine = createMachine({\n  states: {\n    entry: enterActive\n    on: {\n      CLICK: {\n        target: 'thanks',\n        action: transitionActive\n      },\n    },\n    exit: exitActive\n  },\n});\n")),Object(a.b)("p",null,"You could pass multiple actions as an ",Object(a.b)("strong",{parentName:"p"},"array"),". Remember: ",Object(a.b)("strong",{parentName:"p"},"do not rely on order"),"."),Object(a.b)("p",null,"We can also pass the actions in the second argument to ",Object(a.b)("inlineCode",{parentName:"p"},"createMachine"),":"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"const feedbackMachine = createMachine(\n  {\n    states: {\n      entry: ['enterActive', 'sendTelemetry'],\n      on: {\n        CLICK: {\n          target: 'thanks',\n          action: 'transitionActive',\n        },\n      },\n      exit: 'exitActive',\n    },\n  },\n  {\n    actions: {\n      enterActive: () => console.log('Enter'),\n      sendTelemetry: () => console.log('sendTelemetry'),\n      transitionActive: () => console.log('Transition'),\n      exitActive: () => console.log('Exit'),\n      enterInctive: () => console.log('Enter inactive'),\n    },\n  },\n);\n")),Object(a.b)("h3",{id:"context--assignment"},"Context + Assignment"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"import {createMachine, assign} from 'xstate'\n\nconst feedbackMachine = createMachine(\n  {\n    initial: 'entry',\n    context: {\n      count: 0\n    }\n    states: {\n      // prefer this object syntax\n      // to wholesale function syntax\n      entry: assign({\n        count: (context, event) => {\n          return context.count + 1\n        }\n      })\n      on: {\n        CLICK: {\n          target: 'thanks',\n          action: 'transitionActive',\n        },\n      },\n      exit: 'exitActive',\n    },\n  },\n)\n")),Object(a.b)("h2",{id:"transitions"},"Transitions"),Object(a.b)("p",null,Object(a.b)("a",s({parentName:"p"},{href:"https://xstate.js.org/docs/guides/guards.html"}),"Guarded Transition docs"),"."),Object(a.b)("h3",{id:"conditional-predicates"},"Conditional Predicates"),Object(a.b)("p",null,"Example here used for retries:"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-ts"}),"import {createMachine, assign} from 'xstate'\n\nconst feedbackMachine = createMachine(\n  {\n    initial: 'entry',\n    context: {\n      count: 0\n    }\n    states: {\n      failure: {\n        on: {\n          RETRY: {\n            target: 'loading',\n            actions: assign({\n              retries: (context, event) => context.retries + 1\n            })\n            // HERE is the conditional\n            cond: 'noExceededRetries'\n          }\n        }\n      }\n    },\n  },\n  {\n    // guard for conditional\n    guards: {\n      noExceededRetries: (context, event) => {\n        return context.retries < 5\n      }\n    }\n  }\n)\n")),Object(a.b)("h3",{id:"transient-transitions"},"Transient Transitions"),Object(a.b)("p",null,Object(a.b)("a",s({parentName:"p"},{href:"https://xstate.js.org/docs/guides/transitions.html#transient-transitions"}),"Transient docs")),Object(a.b)("p",null,'Happen on "null" events. Most useful with conditionals.'),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"const gameMachine = Machine(\n  {\n    id: 'game',\n    initial: 'playing',\n    context: {\n      points: 0,\n    },\n    states: {\n      playing: {\n        on: {\n          // Transient transition\n          // Will transition to either 'win' or 'lose' immediately upon\n          // (re)entering 'playing' state if the condition is met.\n          '': [\n            { target: 'win', cond: 'didPlayerWin' },\n            { target: 'lose', cond: 'didPlayerLose' },\n          ],\n          // Self-transition\n          AWARD_POINTS: {\n            actions: assign({\n              points: 100,\n            }),\n          },\n        },\n      },\n      win: { type: 'final' },\n      lose: { type: 'final' },\n    },\n  },\n  {\n    guards: {\n      didPlayerWin: (context, event) => {\n        // check if player won\n        return context.points > 99;\n      },\n      didPlayerLose: (context, event) => {\n        // check if player lost\n        return context.points < 0;\n      },\n    },\n  },\n);\n\nconst gameService = interpret(gameMachine)\n  .onTransition(state => console.log(state.value))\n  .start();\n\n// Still in 'playing' state because no conditions of\n// transient transition were met\n// => 'playing'\n\n// When 'AWARD_POINTS' is sent, a self-transition to 'PLAYING' occurs.\n// The transient transition to 'win' is taken because the 'didPlayerWin'\n// condition is satisfied.\ngameService.send('AWARD_POINTS');\n// => 'win'\n")),Object(a.b)("h3",{id:"delayed-transitions"},"Delayed Transitions"),Object(a.b)("p",null,Object(a.b)("a",s({parentName:"p"},{href:"https://xstate.js.org/docs/guides/delays.html#delayed-transitions"}),"Delayed Events and Transitions")),Object(a.b)("p",null,"Transition states happen in zero time. They are never asynchronous. State machines are never async."),Object(a.b)("p",null,"You can use delayed transitions with some trickery."),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-js"}),"const lightDelayMachine = Machine(\n  {\n    id: 'lightDelay',\n    initial: 'green',\n    context: {\n      trafficLevel: 'low',\n    },\n    states: {\n      green: {\n        after: {\n          // after 1 second, transition to yellow\n          LIGHT_DELAY: 'yellow',\n        },\n      },\n      yellow: {\n        after: {\n          YELLOW_LIGHT_DELAY: 'red',\n        },\n      },\n      // ...\n    },\n  },\n  {\n    // String delays configured here\n    delays: {\n      LIGHT_DELAY: (context, event) => {\n        return context.trafficLevel === 'low' ? 1000 : 3000;\n      },\n      YELLOW_LIGHT_DELAY: 500, // static value\n    },\n  },\n);\n")))}l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/JavaScript/XState.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-java-script-x-state-md-018c4f06c9640bfb6bfc.js.map