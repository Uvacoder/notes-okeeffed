{"version":3,"sources":["webpack:///../manual/Epic-React/React-Fundamentals.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-epic-react-react-fundamentals-md-83136f65e1c1a7fade3e.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-fundamentals\"\n    }}>{`React Fundamentals`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\"\n        }}>{`MDN script tag`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/facebook/react/blob/fd61f7ea53989a59bc427603798bb111c852816a/packages/react-dom/src/client/ReactDOMComponent.js#L472\"\n        }}>{`React Source Code creating DOM elements`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://ui.dev/imperative-vs-declarative-programming/\"\n        }}>{`Imperative vs Declarative Programming`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"lesson-1\"\n    }}>{`Lesson 1`}</h2>\n    <p>{`The extra credit was more just using JS to create all the DOM nodes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<html>\n  <body>\n    <script type=\"module\">\n      // add root div\n      const div = document.createElement('div');\n      div.id = 'root';\n      document.querySelector('body').append(div);\n\n      // add div\n      const newDiv = document.createElement('div');\n      newDiv.textContent = 'Hello World';\n      const rootDiv = document.getElementById('root');\n      rootDiv.append(newDiv);\n    </script>\n  </body>\n</html>\n`}</code></pre>\n    <p>{`What is interesting here is the usage of `}<inlineCode parentName=\"p\">{`<script type=\"module\"></script>`}</inlineCode>{` which gives support for ES Modules.`}</p>\n    <p>{`According to `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\"\n      }}>{`MDN`}</a>{`:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Causes the code to be treated as a JavaScript module. The processing of the script contents is not affected by the charset and defer attributes. For information on using module, see our JavaScript modules guide. Unlike classic scripts, module scripts require the use of the CORS protocol for cross-origin fetching.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"lesson-2---raw-react-apis\"\n    }}>{`Lesson 2 - Raw React APIs`}</h2>\n    <p>{`Interesting distinction between React and React DOM:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`React: responsible for creating react elements (kinda like `}<inlineCode parentName=\"li\">{`document.createElement()`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`ReactDOM: responsible for render react elements to the DOM (kinda like `}<inlineCode parentName=\"li\">{`rootElement.append()`}</inlineCode>{`)`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"using-react-with-cdns--inline-js\"\n    }}>{`Using React with CDNs + Inline JS`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<body>\n  <div id=\"root\"></div>\n\n  <script src=\"https://unpkg.com/react@16.13.1/umd/react.development.js\"></script>\n  <script src=\"https://unpkg.com/react-dom@16.13.1/umd/react-dom.development.js\"></script>\n\n  <script type=\"module\">\n    // Grab root element from DOM\n    const rootElement = document.getElementById('root');\n    // Assign props as you normally would\n    const elementProps = {\n      id: 'awesome-new-id',\n      className: 'bg-blue-700',\n      children: 'I have a class and ID!',\n    };\n    const elementType = 'h1';\n\n    // This creates our element imperatively\n    const reactElement = React.createElement(elementType, elementProps);\n    ReactDOM.render(reactElement, rootElement);\n  </script>\n</body>\n`}</code></pre>\n    <p>{`And to create React components within React components, I went this route to show `}<inlineCode parentName=\"p\">{`Ayo, World!`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<body>\n  <div id=\"root\"></div>\n\n  <script src=\"https://unpkg.com/react@16.13.1/umd/react.development.js\"></script>\n  <script src=\"https://unpkg.com/react-dom@16.13.1/umd/react-dom.development.js\"></script>\n\n  <script type=\"module\">\n    // Grab root element from DOM\n    const rootElement = document.getElementById('root');\n\n    const reusableSpan = props => React.createElement('span', props);\n    const divProps = {\n      // Returns React component children\n      children: [\n        reusableSpan({ children: 'Ayo, ' }),\n        reusableSpan({\n          children: 'World!',\n        }),\n      ],\n    };\n    const divElement = React.createElement('div', divProps);\n\n    ReactDOM.render(divElement, rootElement);\n  </script>\n</body>\n`}</code></pre>\n    <p>{`React also enables us to pass Children as Rest arguments:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<body>\n  <div id=\"root\"></div>\n\n  <script src=\"https://unpkg.com/react@16.13.1/umd/react.development.js\"></script>\n  <script src=\"https://unpkg.com/react-dom@16.13.1/umd/react-dom.development.js\"></script>\n\n  <script type=\"module\">\n    // Grab root element from DOM\n    const rootElement = document.getElementById('root');\n\n    const reusableSpan = props => React.createElement('span', props);\n    const divElement = React.createElement(\n      'div',\n      {},\n      reusableSpan({ children: 'Ayo, ' }),\n      reusableSpan({\n        children: 'World!',\n      }),\n    );\n\n    ReactDOM.render(divElement, rootElement);\n  </script>\n</body>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-jsx\"\n    }}>{`Using JSX`}</h2>\n    <p>{`The better you become at understanding `}<inlineCode parentName=\"p\">{`React.createElement`}</inlineCode>{`, the better you will become with JSX.`}</p>\n    <p>{`We can begin to start using JSX in the HTML thanks to Babel!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<body>\n  <div id=\"root\"></div>\n  <script src=\"https://unpkg.com/react@16.13.1/umd/react.development.js\"></script>\n  <script src=\"https://unpkg.com/react-dom@16.13.1/umd/react-dom.development.js\"></script>\n\n  <script src=\"https://unpkg.com/@babel/standalone@7.9.3/babel.js\"></script>\n\n  <script type=\"text/babel\">\n    const className = 'container';\n    const children = 'Hello World';\n    const element = <div className={className}>{children}</div>;\n    ReactDOM.render(element, document.getElementById('root'));\n  </script>\n</body>\n`}</code></pre>\n    <p>{`Extra credit: spreads.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<body>\n  <div id=\"root\"></div>\n  <script src=\"https://unpkg.com/react@16.13.1/umd/react.development.js\"></script>\n  <script src=\"https://unpkg.com/react-dom@16.13.1/umd/react-dom.development.js\"></script>\n\n  <script src=\"https://unpkg.com/@babel/standalone@7.9.3/babel.js\"></script>\n\n  <script type=\"text/babel\">\n    const children = 'Hello World';\n    const className = 'container';\n    const props = { children, className };\n    const element = <div {...props} />;\n    ReactDOM.render(element, document.getElementById('root'));\n  </script>\n</body>\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: with JSX, you cannot write a statement ie if-else, etc.`}</p>\n    </blockquote>\n    <p>{`For the extra credit - there was a nice explanation of Babel converting spreads within the `}<inlineCode parentName=\"p\">{`<div {...props} />`}</inlineCode>{` to use an \"extend\" transform where the `}<strong parentName=\"p\">{`order matters`}</strong>{` ie if you put `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` before or after the spread, that will effect the end result.`}</p>\n    <h2 {...{\n      \"id\": \"creating-custom-components\"\n    }}>{`Creating Custom Components`}</h2>\n    <p>{`Something interesting is that in the below, the `}<inlineCode parentName=\"p\">{`helloElement`}</inlineCode>{` creates a custom `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{` component, whereas call `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{` directly `}<strong parentName=\"p\">{`does not create a custom component`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function message({ children }) {\n  return <div classNane=\"message\">{children}</div>;\n}\n\nconst helloElement = React.createElement(message, {children: 'Hello!'})\n\nconst element = {\n  <div className=\"container\">\n    {helloElement}\n    {message({children: 'World!'})}\n  </div>\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"capitalizing-components\"\n    }}>{`Capitalizing Components`}</h3>\n    <p>{`Why does `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{` not work but `}<inlineCode parentName=\"p\">{`Message`}</inlineCode>{` work? If you look at Babel, you get answers from the transpilation.`}</p>\n    <p>{`With React specifications, starting the function with a capital letter will help Babel know how to transform the custom components.`}</p>\n    <h2 {...{\n      \"id\": \"basic-forms\"\n    }}>{`Basic Forms`}</h2>\n    <p>{`In this exercise, we simply discussed ways to submit to a form.`}</p>\n    <p>{`The default HTML submit behaviour is prevented using `}<inlineCode parentName=\"p\">{`event.preventDefault()`}</inlineCode>{`, and the value can be abstracted using `}<inlineCode parentName=\"p\">{`e.target[number].value`}</inlineCode>{` or, in a better method, using `}<inlineCode parentName=\"p\">{`e.target.elements[idOfElement]`}</inlineCode>{`.`}</p>\n    <p>{`The solution is as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Basic Forms\n// http://localhost:3000/isolated/exercise/06.js\n\nimport React from 'react';\n\nfunction UsernameForm({ onSubmitUsername }) {\n  // 🐨 add a submit event handler here (\\`handleSubmit\\`).\n  // 💰 Make sure to accept the \\`event\\` as an argument and call\n  // \\`event.preventDefault()\\` to prevent the default behavior of form submit\n  // events (which refreshes the page).\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { username } = e.target.elements;\n    onSubmitUsername(username.value);\n  };\n  // 🐨 get the value from the username input (using whichever method\n  // you prefer from the options mentioned in the instructions)\n  // 💰 For example: event.target.elements[0]\n  // 🐨 Call \\`onSubmitUsername\\` with the value of the input\n\n  // 🐨 add the onSubmit handler to the <form> below\n\n  // 🐨 make sure to associate the label to the input by specifying an \\`id\\` on\n  // the input and a matching value as an \\`htmlFor\\` prop on the label.\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor=\"username\">Username:</label>\n        <input id=\"username\" type=\"text\" />\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nfunction App() {\n  const onSubmitUsername = username => alert(\\`You entered: \\${username}\\`);\n  return <UsernameForm onSubmitUsername={onSubmitUsername} />;\n}\n\nexport default App;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"using-refs\"\n    }}>{`Using Refs`}</h3>\n    <p>{`Another alternative is to use refs to get our target value.`}</p>\n    <p>{`Kent mentions that he would stick to the original method but wanted to demonstrate examples.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React, { useRef } from 'react';\n\nfunction UsernameForm({ onSubmitUsername }) {\n  const usernameRef = useRef();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const username = usernameRef.current.value;\n    onSubmitUsername(username);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor=\"username\">Username:</label>\n        <input ref={usernameRef} id=\"username\" type=\"text\" />\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nfunction App() {\n  const onSubmitUsername = username => alert(\\`You entered: \\${username}\\`);\n  return <UsernameForm onSubmitUsername={onSubmitUsername} />;\n}\n\nexport default App;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"validation-extra-credit\"\n    }}>{`Validation Extra Credit`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Basic Forms\n// http://localhost:3000/isolated/exercise/06.js\n\nimport React, { useState } from 'react';\n\nfunction UsernameForm({ onSubmitUsername }) {\n  const [isValid, setIsValid] = useState(true);\n\n  const handleChange = e => {\n    const username = e.target.value;\n    const isValid = username === username.toLowerCase();\n    setIsValid(isValid);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { username } = e.target.elements;\n    onSubmitUsername(username.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor=\"username\">Username:</label>\n        <input onChange={handleChange} id=\"username\" type=\"text\" />\n        {!isValid && <p>The value is invalid</p>}\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nfunction App() {\n  const onSubmitUsername = username => alert(\\`You entered: \\${username}\\`);\n  return <UsernameForm onSubmitUsername={onSubmitUsername} />;\n}\n\nexport default App;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"controlled-form-extra-credit\"\n    }}>{`Controlled Form Extra Credit`}</h3>\n    <p>{`To validate our form to show that the value is all lower case, we can add a function to enable this.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Basic Forms\n// http://localhost:3000/isolated/exercise/06.js\n\nimport React, { useState } from 'react';\n\nfunction UsernameForm({ onSubmitUsername }) {\n  const [username, setUsername] = useState('');\n  const [isValid, setIsValid] = useState(true);\n\n  const handleChange = e => {\n    const username = e.target.value;\n\n    const isValid = username === username.toLowerCase();\n    setIsValid(isValid);\n\n    setUsername(username);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { username } = e.target.elements;\n    onSubmitUsername(username.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor=\"username\">Username:</label>\n        <input\n          onChange={handleChange}\n          id=\"username\"\n          type=\"text\"\n          value={username}\n        />\n        {!isValid && <p>The value is invalid</p>}\n      </div>\n      <button disabled={!isValid} type=\"submit\">\n        Submit\n      </button>\n    </form>\n  );\n}\n\nfunction App() {\n  const onSubmitUsername = username => alert(\\`You entered: \\${username}\\`);\n  return <UsernameForm onSubmitUsername={onSubmitUsername} />;\n}\n\nexport default App;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rendering-arrays\"\n    }}>{`Rendering Arrays`}</h2>\n    <p>{`This is a last fundamental look at array rendering.`}</p>\n    <p>{`The gist of it is that you should use a specific `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{` that is not the index to ensure there is no unusual behaviour and that focus can follow around on the page.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}