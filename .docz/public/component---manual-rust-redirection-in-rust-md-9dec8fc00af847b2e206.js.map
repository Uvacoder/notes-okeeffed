{"version":3,"sources":["webpack:///../manual/Rust/Redirection-In-Rust.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uBADR,uBAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uDADQ,aAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iFADQ,wBAItB,iBAAQ,CACN,GAAM,mBADR,mBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,sDAKL,iBAAQ,CACN,GAAM,yBADR,yBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sWAgBL,iBAAQ,CACN,GAAM,qBADR,qBAGA,2CAA0B,0BAAYA,WAAW,KAAvB,SAA1B,OAAmF,0BAAYA,WAAW,KAAvB,OAAnF,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,2a,2MAkBTJ,EAAWK,gBAAiB","file":"component---manual-rust-redirection-in-rust-md-9dec8fc00af847b2e206.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"redirection-in-rust\"\n    }}>{`Redirection in Rust`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://docs.rs/nix/0.10.0/nix/unistd/fn.dup2.html\"\n        }}>{`nix::std`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"http://multiformats.github.io/rust-multiaddr/libc/constant.STDIN_FILENO.html\"\n        }}>{`libc::STDIN_FILENO`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting started`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`cargo new rust-redirection\ncd rust-redirection\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reading-a-simple-file\"\n    }}>{`Reading a simple file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-rust\"\n      }}>{`use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\nuse std::io::BufReader;\n\nfn main() -> io::Result<()> {\n    let file = File::open(\"foobar.txt\")?;\n    let mut buf_reader = BufReader::new(file);\n    let mut contents = String::new();\n    buf_reader.read_to_string(&mut contents)?;\n    assert_eq!(contents, \"foobar test\");\n    Ok(())\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-redirection\"\n    }}>{`Using redirection`}</h2>\n    <p>{`Converting fd from `}<inlineCode parentName=\"p\">{`usize`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`i32`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`cargo run\n   Compiling rust v0.1.0 (/Users/dennis.okeeffe/Project-Imposter/blog-repos/redirection/rust)\nerror[E0308]: mismatched types\n  --> src/main.rs:26:10\n   |\n26 |     dup2(fd, libc::STDIN_FILENO);\n   |          ^^ expected \\`i32\\`, found \\`usize\\`\n   |\nhelp: you can convert an \\`usize\\` to \\`i32\\` and panic if the converted value wouldn't fit\n   |\n26 |     dup2(fd.try_into().unwrap(), libc::STDIN_FILENO);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}