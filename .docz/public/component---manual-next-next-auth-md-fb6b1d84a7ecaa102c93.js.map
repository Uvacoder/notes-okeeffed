{"version":3,"sources":["webpack:///../manual/Next/Next-Auth.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,0MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,4CADQ,8BAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mDADQ,cAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,kFADQ,sCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,0BADQ,iCAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,iDADQ,iCAItB,iBAAQ,CACN,GAAM,gCADR,gCAGA,8HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,mLAOL,qEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,4VAKL,6HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,yFAKL,2GACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,yDAKL,8BACE,iBAAGA,WAAW,cAAd,sJAEF,8EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gGAML,oHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4KAML,8BACE,iBAAGA,WAAW,cAAd,6HAEF,0CAAyB,0BAAYA,WAAW,KAAvB,QAAzB,4BAAsG,0BAAYA,WAAW,KAAvB,QAAtG,4CACA,iBAAQ,CACN,GAAM,qBADR,sBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,0BAIL,yEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,sCAIL,8BACE,iBAAGA,WAAW,cAAd,6CAAyE,0BAAYA,WAAW,KAAvB,QAAzE,iCAEF,uDAAsC,mBAAGA,WAAW,KAAQ,CACxD,KAAQ,8CAD0B,gBAAtC,oBAGA,iBAAQ,CACN,GAAM,2CADR,2CAGA,sCAAqB,0BAAYA,WAAW,KAAvB,mCAArB,KACA,2CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6jBAwBL,sCAAqB,0BAAYA,WAAW,KAAvB,kBAArB,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,ifA0BL,gHACA,iBAAQ,CACN,GAAM,oBADR,oBAGA,2GACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,eADZ,8CAIL,2EACA,iBAAQ,CACN,GAAM,2BADR,2BAGA,4DAA2C,mBAAGA,WAAW,KAAQ,CAC7D,KAAQ,kFAD+B,6BAG3C,mFACA,8BACE,iBAAGA,WAAW,cAAd,2EAAuG,0BAAYA,WAAW,KAAvB,yCAAvG,6CAEF,iBAAQ,CACN,GAAM,iBADR,iBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,qQASL,iBAAQ,CACN,GAAM,eADR,eAGA,6CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,eAIL,sCAAqB,0BAAYA,WAAW,KAAvB,yBAArB,qG,iMAKJJ,EAAWK,gBAAiB","file":"component---manual-next-next-auth-md-fb6b1d84a7ecaa102c93.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://nextjs.org/docs/getting-started\"\n        }}>{`Next.js - Getting Started`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://next-auth.js.org/providers/credentials\"\n        }}>{`Next Auth`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/\"\n        }}>{`Set up a GitHub OAuth Application`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://pagekite.net/\"\n        }}>{`Ngrok alternative - PageKite`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://hub.docker.com/r/mysql/mysql-server/\"\n        }}>{`Docker - mysql/mysql-server`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"setting-up-mysql-with-docker\"\n    }}>{`Setting up MySQL with Docker`}</h2>\n    <p>{`This example demonstrates a setup and expects you to understand some basics behind Docker containers.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker pull mysql/mysql-server\ndocker run --name sql-test -e MYSQL_ROOT_PASSWORD=password -p 6000:3306 -d mysql/mysql-server:latest\n# confirm container running\ndocker ps\n`}</code></pre>\n    <p>{`You should see something like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS                            PORTS                               NAMES\n30be83a35610        mysql/mysql-server:latest   \"/entrypoint.sh mysqâ€¦\"   6 seconds ago       Up 2 seconds (health: starting)   33060/tcp, 0.0.0.0:6000->3306/tcp   sql-test\n`}</code></pre>\n    <p>{`We have the server port forwarding from 3306 on the container to 6000 for us to access on localhost.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`# where 30be83a35610 is there CONTAINER ID\ndocker exec 30be83a35610 -it /bin/bash\n`}</code></pre>\n    <p>{`This will take you into the Docker container shell, where we can login into MySQL.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`mysql -u root -p\n# enter \"password\" when prompted\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You can go straight into mysql from the docker exec, but I thought going the long way might be more fun for those playing around with containers.`}</p>\n    </blockquote>\n    <p>{`Now we can create a database to use for this example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`create database next_auth;\nshow databases;\n-- you should now be able to see \"next_auth\"\n`}</code></pre>\n    <p>{`In order to get things going, you may need to make some changes. I had to do the following.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`UPDATE mysql.user SET Host='%' WHERE Host='localhost' AND User='root';\nALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password';\nFLUSH PRIVILEGES;\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: Using the root isn't a great idea, but this is simply for demonstration purposes and to get things up and running.`}</p>\n    </blockquote>\n    <p>{`For here, you can `}<inlineCode parentName=\"p\">{`exit`}</inlineCode>{` the MySQL shell and run `}<inlineCode parentName=\"p\">{`exit`}</inlineCode>{` it again to leave the Docker container.`}</p>\n    <h3 {...{\n      \"id\": \"setting-up-nextjs\"\n    }}>{`Setting up Next.js`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`npx create-next-app\n`}</code></pre>\n    <p>{`Fill out the defaults for it and get it loading.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add next-auth mysql dotenv\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`We are using \"dotenv\" for loading a local `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file for local development.`}</p>\n    </blockquote>\n    <p>{`Here, we are just going to use `}<a parentName=\"p\" {...{\n        \"href\": \"https://next-auth.js.org/providers/github\"\n      }}>{`GitHub OAuth`}</a>{` for logging in.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up-next-auth-in-the-application\"\n    }}>{`Setting up Next Auth in the application`}</h2>\n    <p>{`Create a file `}<inlineCode parentName=\"p\">{`pages/api/auth/[...nextauth].js`}</inlineCode>{`.`}</p>\n    <p>{`Add the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\n\nrequire('dotenv').config();\n\nconst options = {\n  site: process.env.SITE || 'http://localhost:3000',\n\n  // Configure one or more authentication providers\n  providers: [\n    Providers.GitHub({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n  ],\n\n  // A database is optional, but required to persist accounts in a database\n  database: process.env.DATABASE_URL,\n};\n\nexport default (req, res) => NextAuth(req, res, options);\n`}</code></pre>\n    <p>{`Create a page `}<inlineCode parentName=\"p\">{`pages/index.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport { useSession } from 'next-auth/client';\n\nexport default () => {\n  const [session, loading] = useSession();\n\n  return (\n    <p>\n      {!session && (\n        <>\n          Not signed in <br />\n          <a href=\"/api/auth/signin\">Sign in</a>\n        </>\n      )}\n      {session && (\n        <>\n          Signed in as {session.user.email} <br />\n          <a href=\"/api/auth/signout\">Sign out</a>\n        </>\n      )}\n    </p>\n  );\n};\n`}</code></pre>\n    <p>{`That is all we need to do for the application! We won't start running anything just yet`}</p>\n    <h2 {...{\n      \"id\": \"setting-up-ngrok\"\n    }}>{`Setting up ngrok`}</h2>\n    <p>{`We are using tunneling to forward our localhost address out to the big, bad world.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`ngrok http 3000 # will forward 3000 out\n`}</code></pre>\n    <p>{`Once you run that, you will get an address to use.`}</p>\n    <h2 {...{\n      \"id\": \"setting-up-github-oauth\"\n    }}>{`Setting up GitHub OAuth`}</h2>\n    <p>{`Follow the guide on how to set up a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/\"\n      }}>{`GitHub OAuth Application`}</a></p>\n    <p>{`We will need to grab both the ID and the token given back.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: For the authentication callback, you will need to keep the format `}<inlineCode parentName=\"p\">{`{server}/api/auth/callback/{provider}`}</inlineCode>{`. This will be the ngrok server address.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"env-variables\"\n    }}>{`Env Variables`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`GITHUB_ID=<from-github>\nGITHUB_SECRET=<from-github>\n# The MySQL database being forwarded from Docker,\n# where 'next_auth' is the database we created\nDATABASE_URL=\"mysql://root:password@127.0.0.1:6000/next_auth?synchronize=true\"\nSITE=<ngrok-server>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"running-dev\"\n    }}>{`Running Dev`}</h2>\n    <p>{`Now is the fun part.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn dev\n`}</code></pre>\n    <p>{`If we head to `}<inlineCode parentName=\"p\">{`http://localhost:3000`}</inlineCode>{`, we will see the application, however we want to head to the ngrok address instead in our case.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}