{"version":3,"sources":["webpack:///../manual/JavaScript/XState.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---manual-java-script-x-state-md-98a9dc03ba02f3d85556.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"state-machines-in-javascript-with-xstate\"\n    }}>{`State Machines in JavaScript with XState`}</h1>\n    <p>{`This comes from the State Machines course on Frontend Master. Please support the course.`}</p>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://frontendmasters.com/courses/xstate/introduction/\"\n        }}>{`State Machines course`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/davidkpiano/frontend-masters-xstate-workshop\"\n        }}>{`Course repo`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://static.frontendmasters.com/resources/2020-05-14-state-machines-xstate/state-machine-xstate.pdf\"\n        }}>{`Slides`}</a></li>\n    </ol>\n    <p>{`The aim of this workshop is to understand state machines with no libraries before moving on.`}</p>\n    <h2 {...{\n      \"id\": \"bottom-up-code\"\n    }}>{`Bottom Up Code`}</h2>\n    <p>{`The example here has a button with an event listener added. This is generally how we work: we put all of our application logic inside of the event handlers themselves.`}</p>\n    <p>{`The issue with the event handler mentioned is that multiple clicks run, we could continually be refetching data.`}</p>\n    <p>{`Now the application lives inside the applicatin handlers, which is not what we want. This style of coding to \"just get it done\" is considered `}<strong parentName=\"p\">{`bottom up`}</strong>{`.`}</p>\n    <p>{`It makes it:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Difficult to test.`}</li>\n      <li parentName=\"ul\">{`Difficult to understand.`}</li>\n      <li parentName=\"ul\">{`Will contain bugs.`}</li>\n      <li parentName=\"ul\">{`Difficult to enhance.`}</li>\n      <li parentName=\"ul\">{`Features make it worse.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"why-use-state-machines-and-statecharts\"\n    }}>{`Why use state machines and statecharts?`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Visualized modelling`}</li>\n      <li parentName=\"ol\">{`Precise diagrams`}</li>\n      <li parentName=\"ol\">{`Automatic code generation`}</li>\n      <li parentName=\"ol\">{`Comprehensive test coverage`}</li>\n      <li parentName=\"ol\">{`Accomodation of late-breaking requirements changes`}</li>\n    </ol>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The benefit of the diagrams gives the logic in completeness. This is great for those who are seeing this without a technical background.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"graphs\"\n    }}>{`Graphs`}</h2>\n    <p>{`This section speaks to graph theory.`}</p>\n    <p>{`The part on directed graphs speaks on the terms of \"source\", \"transfer\" and \"sink\" nodes.`}</p>\n    <h2 {...{\n      \"id\": \"finite-state-machines\"\n    }}>{`Finite State Machines`}</h2>\n    <p>{`A kind of directed graph consider a quintuple (five important parts).`}</p>\n    <p>{`There is an example of going through the lifecycle of a JavaScript Promise. It speaks to the transition states.`}</p>\n    <p>{`The parts of the state machine:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Finite states`}</li>\n      <li parentName=\"ol\">{`Transitions`}</li>\n      <li parentName=\"ol\">{`Events (labelled on edges/transitions)`}</li>\n      <li parentName=\"ol\">{`Initial state (all FSMs start with this) - there is a dot to represent a \"pseudo-transition\" in the graphs.`}</li>\n      <li parentName=\"ol\">{`Final states (not to be covered too much)`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"an-entry-example\"\n    }}>{`An entry example`}</h2>\n    <p>{`To model the states, the example uses a function for `}<inlineCode parentName=\"p\">{`transition`}</inlineCode>{` to model the Promise with a switch statement that switches on the `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`.`}</p>\n    <p>{`It has switches within switches in this example, and some odd representations, but the idea is that it always covered all possible states.`}</p>\n    <p>{`As for using an object instead of a switch:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const machine = {\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        FETCH: 'pending'\n      }\n    },\n    pending: {\n      on: {\n        RESOLVE: 'resolved',\n        REJECT: 'reject'\n      }\n    }\n    resolved: {},\n    rejected: {}\n  }\n}\n\nfunction transition(state,event) {\n  return machine\n    .states[state]?\n    .on?.[event]\n    || state\n}\n`}</code></pre>\n    <p>{`Interpreting state machines:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// keep track of state\nlet currentState = machine.initial;\n\n// receive events\nfunction send(event) {\n  // Determine the next state\n  const nextState = transition(currentState, event);\n\n  // Update the current state\n  currentState = nextState;\n}\n\n// Send some event\nsend('CLICK');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"xstate\"\n    }}>{`XState`}</h2>\n    <p>{`Simplifies the issues with adding/cleaning up listeners + far more.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`npm i xstate\n`}</code></pre>\n    <p>{`Using it in the file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { createMachine } from 'xstate';\n\nconst feedbackMachine = createMachine({\n  initial: 'question',\n  states: {\n    question: {\n      // transitions:\n      on: {\n        CLICK_GOOD: 'thanks',\n        CLICK_BAD: 'form',\n      },\n    },\n    form: {\n      // transitions\n      on: {\n        SUBMIT: {\n          target: 'thanks',\n        },\n      },\n    },\n    thanks: {\n      // ...\n      on: {\n        CLOSE: 'closed',\n      },\n    },\n    closed: {\n      // Setting final node\n      type: 'final',\n    },\n  },\n});\n\n// Note, the following is long-hand\nconst feedbackMachine = createMachine({\n  states: {\n    on: {\n      SUBMIT: {\n        target: 'thanks',\n      },\n    },\n  },\n});\n// ... for ...\ncreateMachine({\n  states: {\n    on: {\n      SUBMIT: 'thanks',\n    },\n  },\n});\n\n// initial state\nconst initialState = feedbackMachine.initialState;\n\n// An \\`event\\` is an object with a \\`type\\`\nconst clickGoodEvent = {\n  type: 'CLICK_GOOD',\n};\n\n// An event object with payload\nconst submitEvent = {\n  type: 'SUBMIT',\n  feedback: 'Very good, thank you',\n};\n\nconst nextState = feedbackMachine.transition(\n  feedbackMachine.initialState,\n  clickGoodEvent,\n);\n`}</code></pre>\n    <p>{`Events are objects so we can pass in custom payloads.`}</p>\n    <h2 {...{\n      \"id\": \"interpret-function\"\n    }}>{`Interpret function`}</h2>\n    <p>{`Creates a service: a running instance of a machine.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { createMachine, interpet } from 'xstate';\n\n// omitted set up feedbackMachine\n\nconst feedbackService = interpret(feedbackMachine);\n\nfeedbackService.onTransitin(state => {\n  console.log(state);\n});\n\nfeedbackService.start();\n\n// when you're done for clanup\nfeedbackService.stop();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"visualize\"\n    }}>{`Visualize`}</h2>\n    <p>{`One of the benefits of XState is that you can visualize the machine!`}</p>\n    <h2 {...{\n      \"id\": \"xstate-actions\"\n    }}>{`XState Actions`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://xstate.js.org/docs/guides/actions.html\"\n      }}>{`Action docs`}</a></p>\n    <ol>\n      <li parentName=\"ol\">{`Transition actions: Moving between states`}</li>\n      <li parentName=\"ol\">{`Entry actions: Entering into state`}</li>\n      <li parentName=\"ol\">{`Exit actions: Exiting state`}</li>\n    </ol>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Action order`}</inlineCode>{` will go `}<inlineCode parentName=\"p\">{`exit`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`transition`}</inlineCode>{`, then `}<inlineCode parentName=\"p\">{`entry`}</inlineCode>{`. `}<strong parentName=\"p\">{`We do not want to rely on action order too much.`}</strong></p>\n    <p>{`These actions when added could look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const enterActive = () => console.log('Enter')\n\nconst transitionActive = () => console.log('Transition')\n\nconst exitActive = () => console.log('Exit')\n\nconst enterInctive = () => console.log('Enter inactive')\n\nconst feedbackMachine = createMachine({\n  states: {\n    entry: enterActive\n    on: {\n      CLICK: {\n        target: 'thanks',\n        action: transitionActive\n      },\n    },\n    exit: exitActive\n  },\n});\n`}</code></pre>\n    <p>{`You could pass multiple actions as an `}<strong parentName=\"p\">{`array`}</strong>{`. Remember: `}<strong parentName=\"p\">{`do not rely on order`}</strong>{`.`}</p>\n    <p>{`We can also pass the actions in the second argument to `}<inlineCode parentName=\"p\">{`createMachine`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const feedbackMachine = createMachine(\n  {\n    states: {\n      entry: ['enterActive', 'sendTelemetry'],\n      on: {\n        CLICK: {\n          target: 'thanks',\n          action: 'transitionActive',\n        },\n      },\n      exit: 'exitActive',\n    },\n  },\n  {\n    actions: {\n      enterActive: () => console.log('Enter'),\n      sendTelemetry: () => console.log('sendTelemetry'),\n      transitionActive: () => console.log('Transition'),\n      exitActive: () => console.log('Exit'),\n      enterInctive: () => console.log('Enter inactive'),\n    },\n  },\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"context--assignment\"\n    }}>{`Context + Assignment`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {createMachine, assign} from 'xstate'\n\nconst feedbackMachine = createMachine(\n  {\n    initial: 'entry',\n    context: {\n      count: 0\n    }\n    states: {\n      // prefer this object syntax\n      // to wholesale function syntax\n      entry: assign({\n        count: (context, event) => {\n          return context.count + 1\n        }\n      })\n      on: {\n        CLICK: {\n          target: 'thanks',\n          action: 'transitionActive',\n        },\n      },\n      exit: 'exitActive',\n    },\n  },\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"transitions\"\n    }}>{`Transitions`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://xstate.js.org/docs/guides/guards.html\"\n      }}>{`Guarded Transition docs`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"conditional-predicates\"\n    }}>{`Conditional Predicates`}</h3>\n    <p>{`Example here used for retries:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import {createMachine, assign} from 'xstate'\n\nconst feedbackMachine = createMachine(\n  {\n    initial: 'entry',\n    context: {\n      count: 0\n    }\n    states: {\n      failure: {\n        on: {\n          RETRY: {\n            target: 'loading',\n            actions: assign({\n              retries: (context, event) => context.retries + 1\n            })\n            // HERE is the conditional\n            cond: 'noExceededRetries'\n          }\n        }\n      }\n    },\n  },\n  {\n    // guard for conditional\n    guards: {\n      noExceededRetries: (context, event) => {\n        return context.retries < 5\n      }\n    }\n  }\n)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"transient-transitions\"\n    }}>{`Transient Transitions`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://xstate.js.org/docs/guides/transitions.html#transient-transitions\"\n      }}>{`Transient docs`}</a></p>\n    <p>{`Happen on \"null\" events. Most useful with conditionals.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const gameMachine = Machine(\n  {\n    id: 'game',\n    initial: 'playing',\n    context: {\n      points: 0,\n    },\n    states: {\n      playing: {\n        on: {\n          // Transient transition\n          // Will transition to either 'win' or 'lose' immediately upon\n          // (re)entering 'playing' state if the condition is met.\n          '': [\n            { target: 'win', cond: 'didPlayerWin' },\n            { target: 'lose', cond: 'didPlayerLose' },\n          ],\n          // Self-transition\n          AWARD_POINTS: {\n            actions: assign({\n              points: 100,\n            }),\n          },\n        },\n      },\n      win: { type: 'final' },\n      lose: { type: 'final' },\n    },\n  },\n  {\n    guards: {\n      didPlayerWin: (context, event) => {\n        // check if player won\n        return context.points > 99;\n      },\n      didPlayerLose: (context, event) => {\n        // check if player lost\n        return context.points < 0;\n      },\n    },\n  },\n);\n\nconst gameService = interpret(gameMachine)\n  .onTransition(state => console.log(state.value))\n  .start();\n\n// Still in 'playing' state because no conditions of\n// transient transition were met\n// => 'playing'\n\n// When 'AWARD_POINTS' is sent, a self-transition to 'PLAYING' occurs.\n// The transient transition to 'win' is taken because the 'didPlayerWin'\n// condition is satisfied.\ngameService.send('AWARD_POINTS');\n// => 'win'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delayed-transitions\"\n    }}>{`Delayed Transitions`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://xstate.js.org/docs/guides/delays.html#delayed-transitions\"\n      }}>{`Delayed Events and Transitions`}</a></p>\n    <p>{`Transition states happen in zero time. They are never asynchronous. State machines are never async.`}</p>\n    <p>{`You can use delayed transitions with some trickery.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const lightDelayMachine = Machine(\n  {\n    id: 'lightDelay',\n    initial: 'green',\n    context: {\n      trafficLevel: 'low',\n    },\n    states: {\n      green: {\n        after: {\n          // after 1 second, transition to yellow\n          LIGHT_DELAY: 'yellow',\n        },\n      },\n      yellow: {\n        after: {\n          YELLOW_LIGHT_DELAY: 'red',\n        },\n      },\n      // ...\n    },\n  },\n  {\n    // String delays configured here\n    delays: {\n      LIGHT_DELAY: (context, event) => {\n        return context.trafficLevel === 'low' ? 1000 : 3000;\n      },\n      YELLOW_LIGHT_DELAY: 500, // static value\n    },\n  },\n);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}