(window.webpackJsonp=window.webpackJsonp||[]).push([[435],{"j/Sf":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return a})),n.d(t,"default",(function(){return l}));n("1c7q"),n("abGl"),n("gZHo"),n("Fdmb"),n("Ir+3"),n("2mQt"),n("mXGw");var r=n("/FXl"),o=n("TjRS");n("aD51");function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var a={};void 0!==a&&a&&a===Object(a)&&Object.isExtensible(a)&&!a.hasOwnProperty("__filemeta")&&Object.defineProperty(a,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/Mock-Service-Worker/msw-with-React.md"}});var i={_frontmatter:a},c=o.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(r.b)(c,s({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"msw-with-react"},"msw with React"),Object(r.b)("h2",{id:"resources"},"Resources"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",s({parentName:"li"},{href:"https://github.com/mswjs/examples/tree/master/examples/rest-react"}),"React MSW Example - GitHub")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",s({parentName:"li"},{href:"https://kentcdodds.com/blog/stop-mocking-fetch"}),"Stop mocking fetch - Kent C Dodds"))),Object(r.b)("h2",{id:"setting-up"},"Setting up"),Object(r.b)("p",null,"You need to have msw generate a ",Object(r.b)("inlineCode",{parentName:"p"},"mockServiceWorker.js")," file for you in the ",Object(r.b)("inlineCode",{parentName:"p"},"public")," directory."),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-s"}),"npx msw init public\n")),Object(r.b)("h2",{id:"creating-you-mock-handlers"},"Creating you mock handlers"),Object(r.b)("p",null,"Create file ",Object(r.b)("inlineCode",{parentName:"p"},"src/mocks/handlers.js")),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"import { rest } from 'msw';\n\nexport const handlers = [\n  rest.get('/api/v1/todos', (_, res, ctx) => {\n    return res(\n      ctx.delay(1500),\n      ctx.json([\n        {\n          id: '1',\n          title: 'Mocked API',\n          done: false,\n        },\n        {\n          id: '2',\n          title: 'Task Two',\n          done: false,\n        },\n        {\n          id: '3',\n          title: 'Task Three',\n          done: false,\n        },\n      ]),\n    );\n  }),\n];\n")),Object(r.b)("h2",{id:"setting-up-for-the-browser"},"Setting up for the browser"),Object(r.b)("p",null,"Create file ",Object(r.b)("inlineCode",{parentName:"p"},"src/mocks/browser.js")),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"import { setupWorker } from 'msw';\nimport { handlers } from './handlers';\n\nexport const worker = setupWorker(...handlers);\n")),Object(r.b)("p",null,"Within your index file for the React application:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"// ...\n\n// Start the mocking conditionally.\nif (process.env.NODE_ENV === 'development') {\n  const { worker } = require('./mocks/browser');\n  worker.start();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// ...\n")),Object(r.b)("h2",{id:"setting-up-for-node-and-testing"},"Setting up for Node (and testing)"),Object(r.b)("p",null,"Create file ",Object(r.b)("inlineCode",{parentName:"p"},"src/mocks/server.js"),":"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"import { setupServer } from 'msw/node';\nimport { handlers } from './handlers';\n\n// Setup requests interception using the given handlers.\nexport const server = setupServer(...handlers);\n")),Object(r.b)("p",null,"When setting up for tests, you'll need to setup some Jest config in ",Object(r.b)("inlineCode",{parentName:"p"},"src/setupTests.ts"),"."),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"// src/test/setup-env.js\n\n// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n// test/setup-env.js\n// add this to your setupFilesAfterEnv config in jest so it's imported for every test file\nimport { server } from './mocks/server.js';\n\nbeforeAll(() => server.listen());\n// if you need to add a handler after calling setupServer for some specific test\n// this will remove that handler for the rest of them\n// (which is important for test isolation):\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n")),Object(r.b)("p",null,"An example test of running a lifecycle that is being stubbed by ",Object(r.b)("inlineCode",{parentName:"p"},"msw")," looks like the following:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"import React from 'react';\nimport {\n  render,\n  screen,\n  waitForElementToBeRemoved,\n} from '@testing-library/react';\nimport App from './App';\n\ndescribe('rendering the App component', () => {\n  describe('rendering the Todo List', () => {\n    test('shows todo items on successful state cycle', async () => {\n      render(<App />);\n\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n      await waitForElementToBeRemoved(() => screen.getByText(/loading/i));\n      expect(screen.getByText(/mocked api/i)).toBeInTheDocument();\n    });\n  });\n});\n")),Object(r.b)("p",null,"For overriding tests with a different response, we can inline the server:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"import React from 'react';\nimport { render, screen, waitForElementToBeRemoved } from '../test/test-utils';\nimport { TodoList } from './App';\nimport { rest } from 'msw';\nimport { server } from './mocks/server';\n\ndescribe('rendering the App component', () => {\n  describe('rendering the Todo List', () => {\n    test('shows todo items on successful state cycle', async () => {\n      render(<TodoList />);\n\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n      await waitForElementToBeRemoved(() => screen.getByText(/loading/i));\n      expect(screen.getByText(/mocked api/i)).toBeInTheDocument();\n    });\n\n    test('shows a failed request message when server request fails', async () => {\n      server.use(\n        rest.get('/api/v1/todos', (_, res, ctx) => {\n          return res(ctx.status(500), ctx.json({ message: 'Internal error' }));\n        }),\n      );\n\n      render(<TodoList />);\n\n      expect(screen.getByText(/loading/i)).toBeInTheDocument();\n      await waitForElementToBeRemoved(() => screen.getByText(/loading/i));\n      expect(screen.getByText(/request failed/i)).toBeInTheDocument();\n      screen.debug();\n    });\n  });\n});\n")))}l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/Mock-Service-Worker/msw-with-React.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-mock-service-worker-msw-with-react-md-19adcfd9eb5e805fbb10.js.map