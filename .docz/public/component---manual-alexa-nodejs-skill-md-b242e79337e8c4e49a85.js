(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{YKCM:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return i})),t.d(n,"default",(function(){return l}));t("1c7q"),t("abGl"),t("gZHo"),t("Fdmb"),t("Ir+3"),t("2mQt"),t("mXGw");var s=t("/FXl"),r=t("TjRS");t("aD51");function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/Alexa/Nodejs-Skill.md"}});var o={_frontmatter:i},u=r.a;function l(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(s.b)(u,a({},o,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"alexa-nodejs-skill"},"Alexa NodeJS Skill"),Object(s.b)("h2",{id:"resources"},"Resources"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},Object(s.b)("a",a({parentName:"li"},{href:"https://github.com/alexa/skill-sample-nodejs-howto/blob/master/instructions"}),"Sample NodeJS Howto")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("a",a({parentName:"li"},{href:"https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-event-sources-readme.html"}),"CDK Event Sources")),Object(s.b)("li",{parentName:"ol"},Object(s.b)("a",a({parentName:"li"},{href:"https://docs.aws.amazon.com/lambda/latest/dg/lambda-services.html"}),"Lambdba Event Targets"))),Object(s.b)("h2",{id:"tldr"},"tl;dr"),Object(s.b)("ol",null,Object(s.b)("li",{parentName:"ol"},"Create Lambda Function"),Object(s.b)("li",{parentName:"ol"},"Add ",Object(s.b)("inlineCode",{parentName:"li"},"Alexa Skillskit")," trigger"),Object(s.b)("li",{parentName:"ol"},"Add the code (examples) below"),Object(s.b)("li",{parentName:"ol"},"Grab the ARN from the top-right and add it the Alexa developer portal")),Object(s.b)("h2",{id:"notes"},"Notes"),Object(s.b)("p",null,"You may need to add the ",Object(s.b)("inlineCode",{parentName:"p"},"trigger")," yourself to the Lambda function."),Object(s.b)("h2",{id:"example-code"},"Example code"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"index.js"),":"),Object(s.b)("pre",null,Object(s.b)("code",a({parentName:"pre"},{className:"language-js"}),"/* eslint-disable  func-names */\n/* eslint-disable  no-console */\n\nconst Alexa = require('ask-sdk-core');\nconst recipes = require('./recipes');\nconst i18n = require('i18next');\nconst sprintf = require('i18next-sprintf-postprocessor');\n\n/* INTENT HANDLERS */\nconst LaunchRequestHandler = {\n  canHandle(handlerInput) {\n    return handlerInput.requestEnvelope.request.type === 'LaunchRequest';\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    const item = requestAttributes.t(\n      getRandomItem(Object.keys(recipes.RECIPE_EN_US)),\n    );\n\n    const speakOutput = requestAttributes.t(\n      'WELCOME_MESSAGE',\n      requestAttributes.t('SKILL_NAME'),\n      item,\n    );\n    const repromptOutput = requestAttributes.t('WELCOME_REPROMPT');\n\n    handlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n\n    return handlerInput.responseBuilder\n      .speak(speakOutput)\n      .reprompt(repromptOutput)\n      .getResponse();\n  },\n};\n\nconst RecipeHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      handlerInput.requestEnvelope.request.intent.name === 'RecipeIntent'\n    );\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    const itemSlot = handlerInput.requestEnvelope.request.intent.slots.Item;\n    let itemName;\n    if (itemSlot && itemSlot.value) {\n      itemName = itemSlot.value.toLowerCase();\n    }\n\n    const cardTitle = requestAttributes.t(\n      'DISPLAY_CARD_TITLE',\n      requestAttributes.t('SKILL_NAME'),\n      itemName,\n    );\n    const myRecipes = requestAttributes.t('RECIPES');\n    const recipe = myRecipes[itemName];\n    let speakOutput = '';\n\n    if (recipe) {\n      sessionAttributes.speakOutput = recipe;\n      // uncomment the _2_ reprompt lines if you want to repeat the info\n      // and prompt for a subsequent action\n      // sessionAttributes.repromptSpeech = requestAttributes.t('RECIPE_REPEAT_MESSAGE');\n      handlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n\n      return (\n        handlerInput.responseBuilder\n          .speak(sessionAttributes.speakOutput)\n          // .reprompt(sessionAttributes.repromptSpeech)\n          .withSimpleCard(cardTitle, recipe)\n          .getResponse()\n      );\n    }\n    const repromptSpeech = requestAttributes.t('RECIPE_NOT_FOUND_REPROMPT');\n    if (itemName) {\n      speakOutput += requestAttributes.t(\n        'RECIPE_NOT_FOUND_WITH_ITEM_NAME',\n        itemName,\n      );\n    } else {\n      speakOutput += requestAttributes.t('RECIPE_NOT_FOUND_WITHOUT_ITEM_NAME');\n    }\n    speakOutput += repromptSpeech;\n\n    // save outputs to attributes, so we can use it to repeat\n    sessionAttributes.speakOutput = speakOutput;\n    sessionAttributes.repromptSpeech = repromptSpeech;\n\n    handlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n\n    return handlerInput.responseBuilder\n      .speak(sessionAttributes.speakOutput)\n      .reprompt(sessionAttributes.repromptSpeech)\n      .getResponse();\n  },\n};\n\nconst HelpHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      handlerInput.requestEnvelope.request.intent.name === 'AMAZON.HelpIntent'\n    );\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    const item = requestAttributes.t(\n      getRandomItem(Object.keys(recipes.RECIPE_EN_US)),\n    );\n\n    sessionAttributes.speakOutput = requestAttributes.t('HELP_MESSAGE', item);\n    sessionAttributes.repromptSpeech = requestAttributes.t(\n      'HELP_REPROMPT',\n      item,\n    );\n\n    return handlerInput.responseBuilder\n      .speak(sessionAttributes.speakOutput)\n      .reprompt(sessionAttributes.repromptSpeech)\n      .getResponse();\n  },\n};\n\nconst RepeatHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      handlerInput.requestEnvelope.request.intent.name === 'AMAZON.RepeatIntent'\n    );\n  },\n  handle(handlerInput) {\n    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n\n    return handlerInput.responseBuilder\n      .speak(sessionAttributes.speakOutput)\n      .reprompt(sessionAttributes.repromptSpeech)\n      .getResponse();\n  },\n};\n\nconst ExitHandler = {\n  canHandle(handlerInput) {\n    return (\n      handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n      (handlerInput.requestEnvelope.request.intent.name ===\n        'AMAZON.StopIntent' ||\n        handlerInput.requestEnvelope.request.intent.name ===\n          'AMAZON.CancelIntent')\n    );\n  },\n  handle(handlerInput) {\n    const requestAttributes = handlerInput.attributesManager.getRequestAttributes();\n    const speakOutput = requestAttributes.t(\n      'STOP_MESSAGE',\n      requestAttributes.t('SKILL_NAME'),\n    );\n\n    return handlerInput.responseBuilder.speak(speakOutput).getResponse();\n  },\n};\n\nconst SessionEndedRequestHandler = {\n  canHandle(handlerInput) {\n    console.log('Inside SessionEndedRequestHandler');\n    return handlerInput.requestEnvelope.request.type === 'SessionEndedRequest';\n  },\n  handle(handlerInput) {\n    console.log(\n      `Session ended with reason: ${JSON.stringify(\n        handlerInput.requestEnvelope,\n      )}`,\n    );\n    return handlerInput.responseBuilder.getResponse();\n  },\n};\n\nconst ErrorHandler = {\n  canHandle() {\n    return true;\n  },\n  handle(handlerInput, error) {\n    console.log(`Error handled: ${error.message}`);\n\n    return handlerInput.responseBuilder\n      .speak(\"Sorry, I can't understand the command. Please say again.\")\n      .reprompt(\"Sorry, I can't understand the command. Please say again.\")\n      .getResponse();\n  },\n};\n\n/* Helper Functions */\n\n// Finding the locale of the user\nconst LocalizationInterceptor = {\n  process(handlerInput) {\n    const localizationClient = i18n.use(sprintf).init({\n      lng: handlerInput.requestEnvelope.request.locale,\n      overloadTranslationOptionHandler:\n        sprintf.overloadTranslationOptionHandler,\n      resources: languageStrings,\n      returnObjects: true,\n    });\n\n    const attributes = handlerInput.attributesManager.getRequestAttributes();\n    attributes.t = function(...args) {\n      return localizationClient.t(...args);\n    };\n  },\n};\n\n// getRandomItem\nfunction getRandomItem(arrayOfItems) {\n  // the argument is an array [] of words or phrases\n  let i = 0;\n  i = Math.floor(Math.random() * arrayOfItems.length);\n  return arrayOfItems[i];\n}\n\n/* LAMBDA SETUP */\nconst skillBuilder = Alexa.SkillBuilders.custom();\nexports.handler = skillBuilder\n  .addRequestHandlers(\n    LaunchRequestHandler,\n    RecipeHandler,\n    HelpHandler,\n    RepeatHandler,\n    ExitHandler,\n    SessionEndedRequestHandler,\n  )\n  .addRequestInterceptors(LocalizationInterceptor)\n  .addErrorHandlers(ErrorHandler)\n  .lambda();\n\n// langauge strings for localization\n// TODO: The items below this comment need your attention\n\nconst languageStrings = {\n  en: {\n    translation: {\n      RECIPES: recipes.RECIPE_EN_US,\n      SKILL_NAME: 'Minecraft Helper',\n      WELCOME_MESSAGE:\n        \"Welcome to %s. You can ask a question like, what's the recipe for a %s? ... Now, what can I help you with?\",\n      WELCOME_REPROMPT:\n        'For instructions on what you can say, please say help me.',\n      DISPLAY_CARD_TITLE: '%s  - Recipe for %s.',\n      HELP_MESSAGE:\n        \"You can ask questions such as, what's the recipe for a %s, or, you can say exit...Now, what can I help you with?\",\n      HELP_REPROMPT:\n        \"You can say things like, what's the recipe for a %s, or you can say exit...Now, what can I help you with?\",\n      STOP_MESSAGE: 'Goodbye!',\n      RECIPE_REPEAT_MESSAGE: 'Try saying repeat.',\n      RECIPE_NOT_FOUND_WITH_ITEM_NAME:\n        \"I'm sorry, I currently do not know the recipe for %s. \",\n      RECIPE_NOT_FOUND_WITHOUT_ITEM_NAME:\n        \"I'm sorry, I currently do not know that recipe. \",\n      RECIPE_NOT_FOUND_REPROMPT: 'What else can I help with?',\n    },\n  },\n  'en-US': {\n    translation: {\n      RECIPES: recipes.RECIPE_EN_US,\n      SKILL_NAME: 'American Minecraft Helper',\n    },\n  },\n  'en-GB': {\n    translation: {\n      RECIPES: recipes.RECIPE_EN_GB,\n      SKILL_NAME: 'British Minecraft Helper',\n    },\n  },\n  de: {\n    translation: {\n      RECIPES: recipes.RECIPE_DE_DE,\n      SKILL_NAME: 'Assistent für Minecraft in Deutsch',\n      WELCOME_MESSAGE:\n        'Willkommen bei %s. Du kannst beispielsweise die Frage stellen: Welche Rezepte gibt es für eine %s? ... Nun, womit kann ich dir helfen?',\n      WELCOME_REPROMPT:\n        'Wenn du wissen möchtest, was du sagen kannst, sag einfach „Hilf mir“.',\n      DISPLAY_CARD_TITLE: '%s - Rezept für %s.',\n      HELP_MESSAGE:\n        'Du kannst beispielsweise Fragen stellen wie „Wie geht das Rezept für eine %s“ oder du kannst „Beenden“ sagen ... Wie kann ich dir helfen?',\n      HELP_REPROMPT:\n        'Du kannst beispielsweise Sachen sagen wie „Wie geht das Rezept für eine %s“ oder du kannst „Beenden“ sagen ... Wie kann ich dir helfen?',\n      STOP_MESSAGE: 'Auf Wiedersehen!',\n      RECIPE_REPEAT_MESSAGE: 'Sage einfach „Wiederholen“.',\n      RECIPE_NOT_FOUND_WITH_ITEM_NAME:\n        'Tut mir leid, ich kenne derzeit das Rezept für %s nicht. ',\n      RECIPE_NOT_FOUND_WITHOUT_ITEM_NAME:\n        'Tut mir leid, ich kenne derzeit dieses Rezept nicht. ',\n      RECIPE_NOT_FOUND_REPROMPT: 'Womit kann ich dir sonst helfen?',\n    },\n  },\n};\n")),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"recipes.js")),Object(s.b)("pre",null,Object(s.b)("code",a({parentName:"pre"},{className:"language-js"}),"/* eslint-disable  func-names */\n/* eslint-disable max-len */\n/* eslint quote-props: ['error', 'consistent'] */\n// TODO: Replace this data with your own.\nmodule.exports = {\n  RECIPE_EN_GB: {\n    'snow golem':\n      'A snow golem can be created by placing a pumpkin on top of  two snow blocks on the ground.',\n    'pillar quartz block':\n      'A pillar of quartz can be obtained by placing a block of quartz on top of a block of quartz in mine craft.',\n    // ...omittd\n  },\n};\n")),Object(s.b)("h2",{id:"example-packagejson"},"Example package.json"),Object(s.b)("pre",null,Object(s.b)("code",a({parentName:"pre"},{className:"language-json"}),'{\n  "name": "how-to",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "author": "",\n  "license": "ISC",\n  "dependencies": {\n    "ask-sdk-core": "^2.0.0",\n    "ask-sdk-model": "^1.0.0",\n    "i18next": "^10.5.0",\n    "i18next-sprintf-postprocessor": "^0.2.2"\n  }\n}\n')))}l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/Alexa/Nodejs-Skill.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-alexa-nodejs-skill-md-b242e79337e8c4e49a85.js.map