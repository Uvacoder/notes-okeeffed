{"version":3,"sources":["webpack:///../manual/AWS/Adding-Role-Permissions-To-Lambda-CDK.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,qOAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iCADR,iCAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sGADQ,oBAItB,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mwE,4NA2ETJ,EAAWK,gBAAiB","file":"component---manual-aws-adding-role-permissions-to-lambda-cdk-md-1cd6e85b69427a78698a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"adding-secrets-via-cli-or-cdk\"\n    }}>{`Adding Secrets Via CLI or CDK`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://stackoverflow.com/questions/52636929/specifying-a-custom-role-for-lambda-with-the-aws-cdk\"\n        }}>{`Stack Overflow`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import events = require('@aws-cdk/aws-events');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport cdk = require('@aws-cdk/core');\nimport assets = require('@aws-cdk/aws-s3-assets');\nimport iam = require('@aws-cdk/aws-iam');\n\nrequire('dotenv').config();\n\ntype LambdaFn = { id: string; cron: string; relativeFunctionPath: string };\ntype LambdaCronStackProps = cdk.StackProps & {\n  fns: Array<LambdaFn>;\n};\n\n/**\n * Update the LambdaAsset, functions path\n * and handler\n */\nexport class LambdaCronStack extends cdk.Stack {\n  constructor(app: cdk.App, id: string, props: LambdaCronStackProps) {\n    super(app, id);\n\n    for (const fn of props.fns) {\n      // The following JavaScript example defines an directory\n      // asset which is archived as a .zip file and uploaded to\n      // S3 during deployment.\n      // See https://docs.aws.amazon.com/cdk/api/latest/docs/aws-s3-assets-readme.html\n      const myLambdaAsset = new assets.Asset(\n        // @ts-ignore - this expects Construct not cdk.Construct :thinking:\n        this,\n        \\`\\${fn.id}CronJonBotAssetsZip\\`,\n        {\n          path: fn.relativeFunctionPath,\n        },\n      );\n\n      const lambdaFn = new lambda.Function(this, \\`\\${fn.id}LambdaAssetFn\\`, {\n        code: lambda.Code.fromBucket(\n          // @ts-ignore\n          myLambdaAsset.bucket,\n          myLambdaAsset.s3ObjectKey,\n        ),\n        timeout: cdk.Duration.seconds(300),\n        runtime: lambda.Runtime.NODEJS_12_X,\n        handler: 'index.handler',\n      });\n\n      // Add policy for sending SES template\n      lambdaFn.addToRolePolicy(\n        new iam.PolicyStatement({\n          effect: iam.Effect.ALLOW,\n          actions: ['ses:SendTemplatedEmail'],\n          resources: [\n            'arn:aws:ses:us-east-1:178467697118:identity/hello@dennisokeeffe.com',\n          ],\n        }),\n      );\n\n      // Run every Sunday at 12:50PM UTC\n      // See https://docs.aws.amazon.com/lambda/latest/dg/tutorial-scheduled-events-schedule-expressions.html\n      const rule = new events.Rule(this, \\`\\${fn.id}Rule\\`, {\n        schedule: events.Schedule.expression(fn.cron),\n      });\n\n      rule.addTarget(new targets.LambdaFunction(lambdaFn));\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}