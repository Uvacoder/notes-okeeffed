{"version":3,"sources":["webpack:///../manual/React-Query/Getting-Started.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sfAMO,IAAMA,EAAe,Q,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oCADR,oCAGA,iBAAQ,CACN,GAAM,aADR,aAGA,sBACE,kBAAIC,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sCADQ,gBAGpB,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,2FADQ,qBAItB,iBAAQ,CACN,GAAM,gCADR,gCAGA,kCAAiB,mBAAGA,WAAW,KAAQ,CACnC,KAAQ,yFADK,QAAjB,0BAGA,0FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mOAWL,iBAAQ,CACN,GAAM,4BADR,4BAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,maAmBL,iBAAQ,CACN,GAAM,0BADR,0BAGA,uHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+zBAiCL,iBAAQ,CACN,GAAM,gBADR,gBAGA,yFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4pB,8MAiCTJ,EAAWK,gBAAiB","file":"component---manual-react-query-getting-started-md-b1ea88bc271b30d799e6.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"getting-started-with-react-query\"\n    }}>{`Getting Started With React Query`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://react-query.tanstack.com/\"\n        }}>{`React Query`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"(https://react-query.tanstack.com/guides/query-functions#handling-and-throwing-errors)\"\n        }}>{`Handling Errors`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"handling-and-throwing-errors\"\n    }}>{`Handling and throwing errors`}</h2>\n    <p>{`Check the `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-query.tanstack.com/guides/query-functions#handling-and-throwing-errors\"\n      }}>{`docs`}</a>{` for more information.`}</p>\n    <p>{`The tl;dr is that you want to return a promise or throw an error.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { isLoading, error, data } = useQuery('todoListData', async () => {\n  const result = await fetch('/api/v1/todos');\n\n  if (!result.ok) {\n    throw new Error(result.statusText);\n  }\n  return result.json();\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-a-new-project\"\n    }}>{`Setting up a new project`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React, { useEffect } from 'react';\nimport { ErrorBoundary, FallbackProps } from 'react-error-boundary';\nimport { QueryClient, QueryClientProvider, useQuery } from 'react-query';\nimport './App.css';\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppChildren />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-up-for-testing\"\n    }}>{`Setting up for testing`}</h2>\n    <p>{`If using with a library such as React Testing Library, be sure to create a custom render util:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// test/test-utils.tsx\nimport React, { ReactElement } from 'react';\nimport { render } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    // Force the cache to clear to ensure responses\n    // are as expected for each test.\n    queries: {\n      cacheTime: 0,\n      retry: false,\n    },\n  },\n});\n\nconst AllTheProviders: React.FC = ({ children }) => {\n  return (\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n  );\n};\n\nconst customRender = (ui: ReactElement, options?: any) =>\n  render(ui, { wrapper: AllTheProviders, ...options });\n\n// re-export everything\nexport * from '@testing-library/react';\n\n// override render method\nexport { customRender as render };\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-hooks\"\n    }}>{`Custom hooks`}</h2>\n    <p>{`To abstract logic, it would be recommended to abstract the hook:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function useTodoList() {\n  const [status, setStatus] = React.useState<Status>(Status.pending);\n  const { isLoading, error, data } = useQuery('todoListData', async () => {\n    const result = await fetch('/api/v1/todos');\n\n    if (!result.ok) {\n      throw new Error(result.statusText);\n    }\n    return result.json();\n  });\n\n  useEffect(() => {\n    if (isLoading) {\n      setStatus(Status.pending);\n    }\n\n    if (error) {\n      // handle error reporting ... Sentry.sendErr(error)\n      setStatus(Status.failed);\n    } else if (data) {\n      setStatus(Status.success);\n    }\n  }, [isLoading, error, data]);\n\n  return { status, data };\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}