(window.webpackJsonp=window.webpackJsonp||[]).push([[600],{"93fq":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return u}));n("1c7q"),n("abGl"),n("gZHo"),n("Fdmb"),n("Ir+3"),n("2mQt"),n("mXGw");var r=n("/FXl"),i=n("TjRS");n("aD51");function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"manual/Rust/Redirection-In-Rust.md"}});var s={_frontmatter:o},c=i.a;function u(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(r.b)(c,a({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"redirection-in-rust"},"Redirection in Rust"),Object(r.b)("h2",{id:"resources"},"Resources"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",a({parentName:"li"},{href:"https://docs.rs/nix/0.10.0/nix/unistd/fn.dup2.html"}),"nix::std")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",a({parentName:"li"},{href:"http://multiformats.github.io/rust-multiaddr/libc/constant.STDIN_FILENO.html"}),"libc::STDIN_FILENO"))),Object(r.b)("h2",{id:"getting-started"},"Getting started"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-s"}),"cargo new rust-redirection\ncd rust-redirection\n")),Object(r.b)("h2",{id:"reading-a-simple-file"},"Reading a simple file"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-rust"}),'use std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\nuse std::io::BufReader;\n\nfn main() -> io::Result<()> {\n    let file = File::open("foobar.txt")?;\n    let mut buf_reader = BufReader::new(file);\n    let mut contents = String::new();\n    buf_reader.read_to_string(&mut contents)?;\n    assert_eq!(contents, "foobar test");\n    Ok(())\n}\n')),Object(r.b)("h2",{id:"using-redirection"},"Using redirection"),Object(r.b)("p",null,"Converting fd from ",Object(r.b)("inlineCode",{parentName:"p"},"usize")," to ",Object(r.b)("inlineCode",{parentName:"p"},"i32"),":"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-s"}),"cargo run\n   Compiling rust v0.1.0 (/Users/dennis.okeeffe/Project-Imposter/blog-repos/redirection/rust)\nerror[E0308]: mismatched types\n  --\x3e src/main.rs:26:10\n   |\n26 |     dup2(fd, libc::STDIN_FILENO);\n   |          ^^ expected `i32`, found `usize`\n   |\nhelp: you can convert an `usize` to `i32` and panic if the converted value wouldn't fit\n   |\n26 |     dup2(fd.try_into().unwrap(), libc::STDIN_FILENO);\n")))}u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"manual/Rust/Redirection-In-Rust.md"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---manual-rust-redirection-in-rust-md-9dec8fc00af847b2e206.js.map