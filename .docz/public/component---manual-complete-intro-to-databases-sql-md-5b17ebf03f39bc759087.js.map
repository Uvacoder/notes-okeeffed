{"version":3,"sources":["webpack:///../manual/Complete-Intro-To-Databases/SQL.md","webpack:///../manual/Complete-Intro-To-Databases/joins.png"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent","module","exports"],"mappings":"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","file":"component---manual-complete-intro-to-databases-sql-md-5b17ebf03f39bc759087.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dennis.okeeffe/Project-Imposter/developer-notes/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"sql\"\n    }}>{`SQL`}</h1>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://btholt.github.io/complete-intro-to-databases/intro-to-sql-databases\"\n        }}>{`Complete Intro To Databases`}</a></li>\n    </ol>\n    <h2 {...{\n      \"id\": \"what-is-sql\"\n    }}>{`What is SQL?`}</h2>\n    <p>{`Pronounced through the letters instead of \"sequel\".`}</p>\n    <p>{`SQL means \"relational database\" (referring to relational database management systems).`}</p>\n    <p>{`The best thing to think about is with \"excel\" with a table of data.`}</p>\n    <p>{`It has a defined and a very structured schema.`}</p>\n    <p>{`SQL databases are very good at describing relations. In things like Mongo, you do not want to join collections to other collections.`}</p>\n    <h2 {...{\n      \"id\": \"postgresql\"\n    }}>{`PostgresQL`}</h2>\n    <p>{`Enjoys a lot of market share and has some killer features.`}</p>\n    <p>{`For this course, Brian runs Postgres in a Docker container. After pulling the image, we can start a `}<inlineCode parentName=\"p\">{`hello-postgres`}</inlineCode>{` container:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`# Start the container\ndocker run --name hello-postgres -p 5432:5432 -e POSTGRES_PASSWORD=mysecretpassword -d --rm postgres\n# Attach to the container\ndocker exec -it -u postgres hello-postgres psql\n`}</code></pre>\n    <p>{`In the new Postgres program, run the following to create a database and attach:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`postgres=# CREATE DATABASE message_boards;\nCREATE DATABASE\n# \\\\c is short for \\`connect\\`\npostgres=# \\\\c message_boards;\nYou are now connected to database \"message_boards\" as user \"postgres\".\n`}</code></pre>\n    <p>{`Other useful commands:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Command`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\\\\c`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Connect`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\\\\d`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Show Tables`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\\\\?`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Will show commands`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`\\\\h`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Displays kinds of queries that you can do`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-- [input]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`How to do a comment`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"creating-a-database\"\n    }}>{`Creating a database`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`message_boards=# CREATE TABLE users (\n# This is to autoincrement the IDs\nmessage_boards(# user_id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\n# VARCHAR ( NUMBER ) sets a limit for the characters\nmessage_boards(# username VARCHAR ( 25 ) UNIQUE NOT NULL,\nmessage_boards(# email VARCHAR ( 50 ) UNIQUE NOT NULL,\nmessage_boards(# full_name VARCHAR ( 100 ) NOT NULL,\nmessage_boards(# last_login TIMESTAMP,\nmessage_boards(# created_on TIMESTAMP NOT NULL\nmessage_boards(# );\nCREATE TABLE\nmessage_boards=# \\\\d\n                List of relations\n Schema |       Name        |   Type   |  Owner\n--------+-------------------+----------+----------\n public | users             | table    | postgres\n public | users_user_id_seq | sequence | postgres\n(2 rows)\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"inserting-into-a-database-table\"\n    }}>{`Inserting into a database table`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`message_boards=# INSERT INTO users (username, email, full_name, created_on) VALUES ('btholt', 'foo@baz.com', 'Brian Holt', NOW());\n# 0 represents OID, 1 represents success\nINSERT 0 1\n\nmessage_boards=# SELECT * FROM users;\n user_id | username |    email    | full_name  | last_login |         created_on\n---------+----------+-------------+------------+------------+----------------------------\n       1 | btholt   | foo@baz.com | Brian Holt |            | 2021-02-02 07:07:17.482125\n(1 row)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"select-limit-where\"\n    }}>{`SELECT, LIMIT, WHERE`}</h2>\n    <p>{`There is dummy data installed from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://btholt.github.io/complete-intro-to-databases/querying-postgresql\"\n      }}>{`website`}</a>{`.`}</p>\n    <p>{`After it is done, you will have a ton of data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`message_boards=# \\\\d\n                     List of relations\n Schema |            Name             |   Type   |  Owner\n--------+-----------------------------+----------+----------\n public | boards                      | table    | postgres\n public | boards_board_id_seq         | sequence | postgres\n public | comments                    | table    | postgres\n public | comments_comment_id_seq     | sequence | postgres\n public | rich_content                | table    | postgres\n public | rich_content_content_id_seq | sequence | postgres\n public | users                       | table    | postgres\n public | users_user_id_seq           | sequence | postgres\n(8 rows)\n\nmessage_boards=# SELECT * FROM users LIMIT 5;\n user_id |  username  |          email           |    full_name    |         last_login         |\n   created_on\n---------+------------+--------------------------+-----------------+----------------------------+------\n----------------------\n       1 | dpuckring0 | dpuckring0@wikimedia.org | Dicky Puckring  |                            | 2021-01-26 07:11:40.091563\n       2 | ssiviour1  | ssiviour1@ow.ly          | Suzanna Siviour | 2021-01-31 07:11:40.091563 | 2021-01-30 07:11:40.091563\n       3 | gsomerled2 | gsomerled2@auda.org.au   | Geneva Somerled |                            | 2021-01-29 07:11:40.091563\n       4 | wedginton3 | wedginton3@google.com    | Winny Edginton  | 2021-01-28 07:11:40.091563 | 2021-01-27 07:11:40.091563\n       5 | mshine4    | mshine4@army.mil         | Mitchael Shine  | 2021-01-26 07:11:40.091563 | 2021-01-25 07:11:40.091563\n(5 rows)\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`WHERE`}</inlineCode>{` clause is a straightforward projection:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`message_boards=# SELECT * FROM users WHERE user_id = 1;\n user_id |  username  |          email           |   full_name    | last_login |         created_on\n---------+------------+--------------------------+----------------+------------+----------------------------\n       1 | dpuckring0 | dpuckring0@wikimedia.org | Dicky Puckring |            | 2021-01-26 07:11:40.091563\n(1 row)\n\nmessage_boards=# SELECT username, email, user_id FROM users WHERE last_login IS NULL AND created_on < NOW() - interval '6 months' LIMIT 10;\n  username   |         email          | user_id\n-------------+------------------------+---------\n ggodboltfl  | ggodboltfl@hc360.com   |     562\n gplankfp    | gplankfp@google.nl     |     566\n gturlefs    | gturlefs@nsw.gov.au    |     569\n aordemannfx | aordemannfx@i2i.jp     |     574\n taldisfz    | taldisfz@ameblo.jp     |     576\n cwayong2    | cwayong2@biglobe.ne.jp |     579\n yraittg3    | yraittg3@msu.edu       |     580\n dbyrthg4    | dbyrthg4@sakura.ne.jp  |     581\n cmorsheadg5 | cmorsheadg5@go.com     |     582\n dkoppensg7  | dkoppensg7@globo.com   |     584\n(10 rows)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"count-sort-update-and-delete\"\n    }}>{`COUNT, SORT, UPDATE and DELETE`}</h2>\n    <p>{`Sorted by `}<inlineCode parentName=\"p\">{`created_on`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`# Oldest\nmessage_boards=# SELECT user_id, email, created_on FROM users ORDER BY created_on LIMIT 10;\n user_id |            email            |         created_on\n---------+-----------------------------+----------------------------\n     926 | edepp@360.cn                | 2020-01-31 07:11:40.091563\n     929 | saspinps@wired.com          | 2020-01-31 07:11:40.091563\n     923 | kdohertypm@mayoclinic.com   | 2020-01-31 07:11:40.091563\n     925 | hderrickpo@wsj.com          | 2020-01-31 07:11:40.091563\n     927 | jsappypq@sciencedaily.com   | 2020-01-31 07:11:40.091563\n     928 | cmottepr@bbc.co.uk          | 2020-01-31 07:11:40.091563\n     921 | akarlemanpk@blogs.com       | 2020-01-31 07:11:40.091563\n     922 | gtivolierpl@istockphoto.com | 2020-01-31 07:11:40.091563\n     924 | vwindridgepn@umn.edu        | 2020-01-31 07:11:40.091563\n     930 | bbrookespt@skyrock.com      | 2020-01-31 07:11:40.091563\n(10 rows)\n\n# Newest\nmessage_boards=# SELECT user_id, email, created_on FROM users ORDER BY created_on DESC LIMIT 10;\n user_id |              email              |         created_on\n---------+---------------------------------+----------------------------\n       2 | ssiviour1@ow.ly                 | 2021-01-30 07:11:40.091563\n       3 | gsomerled2@auda.org.au          | 2021-01-29 07:11:40.091563\n       4 | wedginton3@google.com           | 2021-01-27 07:11:40.091563\n       1 | dpuckring0@wikimedia.org        | 2021-01-26 07:11:40.091563\n       5 | mshine4@army.mil                | 2021-01-25 07:11:40.091563\n       6 | marnli5@google.co.uk            | 2021-01-23 07:11:40.091563\n       7 | wjohnston6@omniture.com         | 2021-01-21 07:11:40.091563\n       8 | shenstone7@networksolutions.com | 2021-01-19 07:11:40.091563\n       9 | chuffey8@csmonitor.com          | 2021-01-17 07:11:40.091563\n      10 | asandiland9@sun.com             | 2021-01-15 07:11:40.091563\n(10 rows)\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`COUNT`}</inlineCode>{` can return the number:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`message_boards=# SELECT COUNT(*) FROM users;\n count\n-------\n  1000\n(1 row)\n\n# Users that have logged in\nmessage_boards=# SELECT COUNT(last_login) FROM users;\n count\n-------\n   678\n(1 row)\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` to change records:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`message_boards=# UPDATE users SET last_login=NOW() WHERE user_id=1;\nUPDATE 1\n# To update and return the values\nmessage_boards=# UPDATE users SET last_login=NOW() WHERE user_id=1 RETURNING *;\n user_id |  username  |          email           |   full_name    |         last_login         |         created_on\n---------+------------+--------------------------+----------------+----------------------------+----------------------------\n       1 | dpuckring0 | dpuckring0@wikimedia.org | Dicky Puckring | 2021-02-02 07:23:42.988165 | 2021-01-26 07:11:40.091563\n(1 row)\n\nUPDATE 1\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`DELETE`}</inlineCode>{` is also fairly straight forward:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-s\"\n      }}>{`message_boards=# DELETE FROM users WHERE user_id=1000;\nDELETE 1\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"foreign-keys\"\n    }}>{`Foreign Keys`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`CREATE TABLE users (\n  user_id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\n  username VARCHAR ( 25 ) UNIQUE NOT NULL,\n  email VARCHAR ( 50 ) UNIQUE NOT NULL,\n  full_name VARCHAR ( 100 ) NOT NULL,\n  last_login TIMESTAMP,\n  created_on TIMESTAMP NOT NULL\n);\n\nCREATE TABLE boards (\n  board_id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\n  board_name VARCHAR ( 50 ) UNIQUE NOT NULL,\n  board_description TEXT NOT NULL\n);\n\nCREATE TABLE comments (\n  comment_id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\n  -- Says to reference the \\`user_id\\` from the user table.\n  -- ON DELETE CASCADE means if the user gets deleted, go into\n  -- comments and delete related cascade.\n  -- By default (ON DELETE NO ACTION), it would say \"you cannot delete user\".\n  -- There is even a ON DELETE SET NULL to set that value to NULL if deleted.\n  user_id INT REFERENCES users(user_id) ON DELETE CASCADE,\n  board_id INT REFERENCES boards(board_id) ON DELETE CASCADE,\n  comment TEXT NOT NULL,\n  time TIMESTAMP\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"join\"\n    }}>{`JOIN`}</h2>\n    <p><img alt=\"Join types\" src={require(\"./joins.png\")} /></p>\n    <p>{`For an inner join - it allows us to match up all the keys from one table to another.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`SELECT\n  comment_id, comments.user_id, users.username, time, LEFT(comment, 20) AS preview\nFROM\n  comments\nINNER JOIN\n  users\nON\n  comments.user_id = users.user_id\nWHERE\n  board_id = 39;\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`INNER JOIN`}</inlineCode>{` which allows us to match up all the keys from one table to another. We do that in ON clause where we say userids match is where you can join together those records into one record.`}</p>\n    <p>{`A `}<inlineCode parentName=\"p\">{`LEFT JOIN`}</inlineCode>{` would say \"if a comment has a user_id that doesn't exist, include it anyway.\" A RIGHT JOIN wouldn't make much sense here but it would include users even if they didn't have a comment on that board.`}</p>\n    <p>{`We can also an `}<inlineCode parentName=\"p\">{`OUTER JOIN`}</inlineCode>{` which would be everything that doesn't match. In our database, that would be nothing because we're guaranteed everything has match due to our constraints.`}</p>\n    <p>{`You can also do a `}<inlineCode parentName=\"p\">{`FULL OUTER JOIN`}</inlineCode>{` which says just include everything. If it doesn't have a match from either side, include it. If it does have a match, include it.`}</p>\n    <p>{`Another rarely useful join is the `}<inlineCode parentName=\"p\">{`CROSS JOIN`}</inlineCode>{`. This gives the Cartesian product of the two tables which can be enormous. A Cartesian product would be every row matched with every other row in the other table. If you have A, B, and C in one table with D and E in the other, your CROSS JOIN would be AD, AE, BD, BE, CD, an CE. If you do a cross join between two tables with 1,000 rows each, you'd get 1,000,000 records back.`}</p>\n    <p>{`Tables can also be self-joined. Imagine you have a table of employees and one of the fields is directreports which contains employeeids of employees that report the original employee. You could do a `}<inlineCode parentName=\"p\">{`SELF JOIN`}</inlineCode>{` to get the information for the reports.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`\"95% of what I do is covered by INNER and LEFT joins.\" - Brian`}</p>\n    </blockquote>\n    <p>{`Something we can do is a `}<inlineCode parentName=\"p\">{`NATURAL JOIN`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`SELECT\n  comment_id, comments.user_id, users.username, time, LEFT(comment, 20) AS preview\nFROM\n  comments\nNATURAL INNER JOIN\n  users\nWHERE\n  board_id = 39;\n`}</code></pre>\n    <p>{`This will work like it did above. `}<inlineCode parentName=\"p\">{`NATURAL JOIN`}</inlineCode>{` tells PostgreSQL \"I named things the same in both tables, go ahead and match it together yourself. It is often better to be explicit what about your intent is for joins. So use cautiously and/or for neat party tricks.`}</p>\n    <h2 {...{\n      \"id\": \"subqueries\"\n    }}>{`Subqueries`}</h2>\n    <p>{`Just be wary with this in terms of cost...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`SELECT comment_id, user_id, LEFT(comment, 20) FROM comments WHERE user_id = (SELECT user_id FROM users WHERE full_name = 'Maynord Simonich');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"group-by\"\n    }}>{`GROUP BY`}</h2>\n    <p>{`What if you were making a report and you wante to show the top ten most posted-to message boards?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`SELECT\n  boards.board_name, COUNT(*) AS comment_count\nFROM\n  comments\nINNER JOIN\n  boards\nON\n  boards.board_id = comments.board_id\nGROUP BY\n  boards.board_name\nORDER BY\n  comment_count DESC\nLIMIT 10;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"json\"\n    }}>{`JSON`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`This course incorrectly chooses to use the `}<inlineCode parentName=\"p\">{`JSON`}</inlineCode>{` data type when it should have used the `}<inlineCode parentName=\"p\">{`JSONB`}</inlineCode>{` data type. You want to choose JSONB because it stores the data in a more queryable format and more optimized for querying whereas JSON is a glorified text field.`}</p>\n    </blockquote>\n    <p>{`There is a schemaless JSON type in PostgresQL. This does not exist in many SQL types. This is one place where document based databases like MongoDB really shine; their schemaless database works really well in these situations.`}</p>\n    <p>{`Here is an example of creating some JSONB values:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`DROP TABLE IF EXISTS rich_content;\n\nCREATE TABLE rich_content (\n  content_id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\n  comment_id INT REFERENCES comments(comment_id) ON DELETE CASCADE,\n  content JSONB NOT NULL\n);\n\nINSERT INTO rich_content\n  (comment_id, content)\nVALUES\n  (63, '{ \"type\": \"poll\", \"question\": \"What is your favorite color?\", \"options\": [\"blue\", \"red\", \"green\", \"yellow\"] }'),\n  (358, '{ \"type\": \"video\", \"url\": \"https://youtu.be/dQw4w9WgXcQ\", \"dimensions\": { \"height\": 1080, \"width\": 1920 }}'),\n  (358, '{ \"type\": \"poll\", \"question\": \"Is this your favorite video?\", \"options\": [\"yes\", \"no\", \"oh you\"] }'),\n  (410, '{ \"type\": \"image\", \"url\": \"https://btholt.github.io/complete-intro-to-linux-and-the-cli/WORDMARK-Small.png\", \"dimensions\": { \"height\": 400, \"width\": 1084 }}'),\n  (485, '{ \"type\": \"image\", \"url\": \"https://btholt.github.io/complete-intro-to-linux-and-the-cli/HEADER.png\", \"dimensions\": { \"height\": 237 , \"width\": 3301 }}');\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`The JSONB data type is the shining star here. This allows us to insert JSON objects to be queried later.`}</li>\n      <li parentName=\"ol\">{`PostgreSQL won't let you insert malformatted JSON so it does validate it for you.`}</li>\n      <li parentName=\"ol\">{`Notice you can have as much nesting as you want. Any valid JSON is valid here.`}</li>\n    </ol>\n    <blockquote>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`'We're going to use two new symbols, -> and ->>. The -> means \"give me back the JSON object\". The return type will be a JSON object, even if it's just a string. It's basically a black box to PostgreSQL and it treats all JSON the same, whether it's an array, object, or just a string. The ->> means \"give me this back as a string.\"'`}</em></p>\n    </blockquote>\n    <p>{`Here is some queriying is `}<inlineCode parentName=\"p\">{`psql`}</inlineCode>{` in action:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`message_boards=# SELECT * FROM rich_content;\n content_id | comment_id |                                                                          content\n\n------------+------------+----------------------------------------------------------------------------------------------------------------------------------------------\n-------------\n          1 |         63 | {\"type\": \"poll\", \"options\": [\"blue\", \"red\", \"green\", \"yellow\"], \"question\": \"What is your favorite color?\"}\n          2 |        358 | {\"url\": \"https://youtu.be/dQw4w9WgXcQ\", \"type\": \"video\", \"dimensions\": {\"width\": 1920, \"height\": 1080}}\n          3 |        358 | {\"type\": \"poll\", \"options\": [\"yes\", \"no\", \"oh you\"], \"question\": \"Is this your favorite video?\"}\n          4 |        410 | {\"url\": \"https://btholt.github.io/complete-intro-to-linux-and-the-cli/WORDMARK-Small.png\", \"type\": \"image\", \"dimensions\": {\"width\": 1084, \"height\": 400}}\n          5 |        485 | {\"url\": \"https://btholt.github.io/complete-intro-to-linux-and-the-cli/HEADER.png\", \"type\": \"image\", \"dimensions\": {\"width\": 3301, \"height\": 237}}\n(5 rows)\n\nmessage_boards=# SELECT content -> 'type' FROM rich_content;\n ?column?\n----------\n \"poll\"\n \"video\"\n \"poll\"\n \"image\"\n \"image\"\n(5 rows)\n\n-- Ensure to use actual content\nmessage_boards=# SELECT content -> 'type' AS content_type FROM rich_content;\n content_type\n--------------\n \"poll\"\n \"video\"\n \"poll\"\n \"image\"\n \"image\"\n(5 rows)\n\n-- You can \"cast\" to be enable to use operations of a particular data type\nmessage_boards=# SELECT DISTINCT CAST(content -> 'type' AS TEXT) AS content_type FROM rich_content;\n content_type\n--------------\n \"image\"\n \"poll\"\n \"video\"\n(3 rows)\n\n-- We can cast immediately here to a string with ->>\nmessage_boards=# SELECT DISTINCT content ->> 'type' AS content_type FROM rich_content;\n content_type\n--------------\n video\n poll\n image\n(3 rows)\n`}</code></pre>\n    <p>{`For going deeper into the JSON object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`SELECT\n  content -> 'dimensions' ->> 'height' AS height,\n  content -> 'dimensions' ->> 'width' AS width,\n  comment_id\nFROM\n  rich_content\nWHERE\n  content -> 'dimensions' IS NOT NULL;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"indexes-in-postgressql\"\n    }}>{`Indexes in PostgresSQL`}</h2>\n    <p>{`Performance is always a concern.`}</p>\n    <p>{`You can put `}<inlineCode parentName=\"p\">{`EXPLAIN`}</inlineCode>{` in front of any query and it will given you an overview about how the query will run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`message_boards=# EXPLAIN SELECT comment_id, user_id, time, LEFT(comment, 20) FROM comments WHERE board_id = 39 ORDER BY time DESC LIMIT 40;\n                              QUERY PLAN\n-----------------------------------------------------------------------\n Limit  (cost=65.75..65.78 rows=12 width=48)\n   ->  Sort  (cost=65.75..65.78 rows=12 width=48)\n         Sort Key: \"time\" DESC\n         ->  Seq Scan on comments  (cost=0.00..65.53 rows=12 width=48)\n               Filter: (board_id = 39)\n(5 rows)\n`}</code></pre>\n    <p>{`65 is not a great search and we are seeing the `}<inlineCode parentName=\"p\">{`sequential scans`}</inlineCode>{` that we are not hoping to see.`}</p>\n    <p>{`In this scenario, given the access pattern, we will want to add an index on `}<inlineCode parentName=\"p\">{`board_id`}</inlineCode>{`. We can create indexes with `}<inlineCode parentName=\"p\">{`CREATE INDEX [idx name] ON <table> (<attribute>)`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`message_boards=# CREATE INDEX comments_board_id_idx ON comments (board_id);\nCREATE INDEX\nmessage_boards=# EXPLAIN SELECT comment_id, user_id, time, LEFT(comment, 20) FROM comments WHERE board_id = 39 ORDER BY time DESC LIMIT 40;\n                                           QUERY PLAN\n-------------------------------------------------------------------------------------------------\n Limit  (cost=33.73..33.76 rows=12 width=48)\n   ->  Sort  (cost=33.73..33.76 rows=12 width=48)\n         Sort Key: \"time\" DESC\n         ->  Bitmap Heap Scan on comments  (cost=4.37..33.51 rows=12 width=48)\n               Recheck Cond: (board_id = 39)\n               ->  Bitmap Index Scan on comments_board_id_idx  (cost=0.00..4.37 rows=12 width=0)\n                     Index Cond: (board_id = 39)\n(7 rows)\n`}</code></pre>\n    <p>{`The cost is now much better!`}</p>\n    <p>{`You can drop the index with `}<inlineCode parentName=\"p\">{`DROP INDEX [idx_name];`}</inlineCode>{`.`}</p>\n    <p>{`To create a unique index, we could use `}<inlineCode parentName=\"p\">{`CREATE UNIQUE INDEX username_idx on users(username);`}</inlineCode>{`. This looks similar to a `}<inlineCode parentName=\"p\">{`UNIQUE`}</inlineCode>{` constraint on an attribute.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`message_boards=# CREATE UNIQUE INDEX username_idx on users(username);\nCREATE INDEX\nmessage_boards=# SELECT username FROM users WHERE user_id = 10;\n  username\n-------------\n asandiland9\n(1 row)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/joins-1f7b7897dc343f6f1057bd852a130c05.png\";"],"sourceRoot":""}